
Gongxun_Taolin.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012a4c  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000057c  08012d20  08012d20  00013d20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801329c  0801329c  0001429c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080132a4  080132a4  000142a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080132a8  080132a8  000142a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000214  24000000  080132ac  00015000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000bfc  24000214  080134c0  00015214  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000e10  080134c0  00015e10  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00015214  2**0
                  CONTENTS, READONLY
 10 .debug_info   00021022  00000000  00000000  00015242  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000452c  00000000  00000000  00036264  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001af8  00000000  00000000  0003a790  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000014f0  00000000  00000000  0003c288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00037c37  00000000  00000000  0003d778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00025fef  00000000  00000000  000753af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015989c  00000000  00000000  0009b39e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001f4c3a  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000085e4  00000000  00000000  001f4c80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000004f  00000000  00000000  001fd264  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000214 	.word	0x24000214
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08012d04 	.word	0x08012d04

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000218 	.word	0x24000218
 800030c:	08012d04 	.word	0x08012d04

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <strlen>:
 80003b0:	4603      	mov	r3, r0
 80003b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d1fb      	bne.n	80003b2 <strlen+0x2>
 80003ba:	1a18      	subs	r0, r3, r0
 80003bc:	3801      	subs	r0, #1
 80003be:	4770      	bx	lr

080003c0 <__aeabi_drsub>:
 80003c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003c4:	e002      	b.n	80003cc <__adddf3>
 80003c6:	bf00      	nop

080003c8 <__aeabi_dsub>:
 80003c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003cc <__adddf3>:
 80003cc:	b530      	push	{r4, r5, lr}
 80003ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	bf1f      	itttt	ne
 80003e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f2:	f000 80e2 	beq.w	80005ba <__adddf3+0x1ee>
 80003f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003fe:	bfb8      	it	lt
 8000400:	426d      	neglt	r5, r5
 8000402:	dd0c      	ble.n	800041e <__adddf3+0x52>
 8000404:	442c      	add	r4, r5
 8000406:	ea80 0202 	eor.w	r2, r0, r2
 800040a:	ea81 0303 	eor.w	r3, r1, r3
 800040e:	ea82 0000 	eor.w	r0, r2, r0
 8000412:	ea83 0101 	eor.w	r1, r3, r1
 8000416:	ea80 0202 	eor.w	r2, r0, r2
 800041a:	ea81 0303 	eor.w	r3, r1, r3
 800041e:	2d36      	cmp	r5, #54	@ 0x36
 8000420:	bf88      	it	hi
 8000422:	bd30      	pophi	{r4, r5, pc}
 8000424:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000428:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800042c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000430:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000434:	d002      	beq.n	800043c <__adddf3+0x70>
 8000436:	4240      	negs	r0, r0
 8000438:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800043c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000440:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000444:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000448:	d002      	beq.n	8000450 <__adddf3+0x84>
 800044a:	4252      	negs	r2, r2
 800044c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000450:	ea94 0f05 	teq	r4, r5
 8000454:	f000 80a7 	beq.w	80005a6 <__adddf3+0x1da>
 8000458:	f1a4 0401 	sub.w	r4, r4, #1
 800045c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000460:	db0d      	blt.n	800047e <__adddf3+0xb2>
 8000462:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000466:	fa22 f205 	lsr.w	r2, r2, r5
 800046a:	1880      	adds	r0, r0, r2
 800046c:	f141 0100 	adc.w	r1, r1, #0
 8000470:	fa03 f20e 	lsl.w	r2, r3, lr
 8000474:	1880      	adds	r0, r0, r2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	4159      	adcs	r1, r3
 800047c:	e00e      	b.n	800049c <__adddf3+0xd0>
 800047e:	f1a5 0520 	sub.w	r5, r5, #32
 8000482:	f10e 0e20 	add.w	lr, lr, #32
 8000486:	2a01      	cmp	r2, #1
 8000488:	fa03 fc0e 	lsl.w	ip, r3, lr
 800048c:	bf28      	it	cs
 800048e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000492:	fa43 f305 	asr.w	r3, r3, r5
 8000496:	18c0      	adds	r0, r0, r3
 8000498:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800049c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004a0:	d507      	bpl.n	80004b2 <__adddf3+0xe6>
 80004a2:	f04f 0e00 	mov.w	lr, #0
 80004a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80004aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80004b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80004b6:	d31b      	bcc.n	80004f0 <__adddf3+0x124>
 80004b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004bc:	d30c      	bcc.n	80004d8 <__adddf3+0x10c>
 80004be:	0849      	lsrs	r1, r1, #1
 80004c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004c8:	f104 0401 	add.w	r4, r4, #1
 80004cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004d4:	f080 809a 	bcs.w	800060c <__adddf3+0x240>
 80004d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004dc:	bf08      	it	eq
 80004de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004e2:	f150 0000 	adcs.w	r0, r0, #0
 80004e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ea:	ea41 0105 	orr.w	r1, r1, r5
 80004ee:	bd30      	pop	{r4, r5, pc}
 80004f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004f4:	4140      	adcs	r0, r0
 80004f6:	eb41 0101 	adc.w	r1, r1, r1
 80004fa:	3c01      	subs	r4, #1
 80004fc:	bf28      	it	cs
 80004fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000502:	d2e9      	bcs.n	80004d8 <__adddf3+0x10c>
 8000504:	f091 0f00 	teq	r1, #0
 8000508:	bf04      	itt	eq
 800050a:	4601      	moveq	r1, r0
 800050c:	2000      	moveq	r0, #0
 800050e:	fab1 f381 	clz	r3, r1
 8000512:	bf08      	it	eq
 8000514:	3320      	addeq	r3, #32
 8000516:	f1a3 030b 	sub.w	r3, r3, #11
 800051a:	f1b3 0220 	subs.w	r2, r3, #32
 800051e:	da0c      	bge.n	800053a <__adddf3+0x16e>
 8000520:	320c      	adds	r2, #12
 8000522:	dd08      	ble.n	8000536 <__adddf3+0x16a>
 8000524:	f102 0c14 	add.w	ip, r2, #20
 8000528:	f1c2 020c 	rsb	r2, r2, #12
 800052c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000530:	fa21 f102 	lsr.w	r1, r1, r2
 8000534:	e00c      	b.n	8000550 <__adddf3+0x184>
 8000536:	f102 0214 	add.w	r2, r2, #20
 800053a:	bfd8      	it	le
 800053c:	f1c2 0c20 	rsble	ip, r2, #32
 8000540:	fa01 f102 	lsl.w	r1, r1, r2
 8000544:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000548:	bfdc      	itt	le
 800054a:	ea41 010c 	orrle.w	r1, r1, ip
 800054e:	4090      	lslle	r0, r2
 8000550:	1ae4      	subs	r4, r4, r3
 8000552:	bfa2      	ittt	ge
 8000554:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000558:	4329      	orrge	r1, r5
 800055a:	bd30      	popge	{r4, r5, pc}
 800055c:	ea6f 0404 	mvn.w	r4, r4
 8000560:	3c1f      	subs	r4, #31
 8000562:	da1c      	bge.n	800059e <__adddf3+0x1d2>
 8000564:	340c      	adds	r4, #12
 8000566:	dc0e      	bgt.n	8000586 <__adddf3+0x1ba>
 8000568:	f104 0414 	add.w	r4, r4, #20
 800056c:	f1c4 0220 	rsb	r2, r4, #32
 8000570:	fa20 f004 	lsr.w	r0, r0, r4
 8000574:	fa01 f302 	lsl.w	r3, r1, r2
 8000578:	ea40 0003 	orr.w	r0, r0, r3
 800057c:	fa21 f304 	lsr.w	r3, r1, r4
 8000580:	ea45 0103 	orr.w	r1, r5, r3
 8000584:	bd30      	pop	{r4, r5, pc}
 8000586:	f1c4 040c 	rsb	r4, r4, #12
 800058a:	f1c4 0220 	rsb	r2, r4, #32
 800058e:	fa20 f002 	lsr.w	r0, r0, r2
 8000592:	fa01 f304 	lsl.w	r3, r1, r4
 8000596:	ea40 0003 	orr.w	r0, r0, r3
 800059a:	4629      	mov	r1, r5
 800059c:	bd30      	pop	{r4, r5, pc}
 800059e:	fa21 f004 	lsr.w	r0, r1, r4
 80005a2:	4629      	mov	r1, r5
 80005a4:	bd30      	pop	{r4, r5, pc}
 80005a6:	f094 0f00 	teq	r4, #0
 80005aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80005ae:	bf06      	itte	eq
 80005b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80005b4:	3401      	addeq	r4, #1
 80005b6:	3d01      	subne	r5, #1
 80005b8:	e74e      	b.n	8000458 <__adddf3+0x8c>
 80005ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005be:	bf18      	it	ne
 80005c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005c4:	d029      	beq.n	800061a <__adddf3+0x24e>
 80005c6:	ea94 0f05 	teq	r4, r5
 80005ca:	bf08      	it	eq
 80005cc:	ea90 0f02 	teqeq	r0, r2
 80005d0:	d005      	beq.n	80005de <__adddf3+0x212>
 80005d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005d6:	bf04      	itt	eq
 80005d8:	4619      	moveq	r1, r3
 80005da:	4610      	moveq	r0, r2
 80005dc:	bd30      	pop	{r4, r5, pc}
 80005de:	ea91 0f03 	teq	r1, r3
 80005e2:	bf1e      	ittt	ne
 80005e4:	2100      	movne	r1, #0
 80005e6:	2000      	movne	r0, #0
 80005e8:	bd30      	popne	{r4, r5, pc}
 80005ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ee:	d105      	bne.n	80005fc <__adddf3+0x230>
 80005f0:	0040      	lsls	r0, r0, #1
 80005f2:	4149      	adcs	r1, r1
 80005f4:	bf28      	it	cs
 80005f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005fa:	bd30      	pop	{r4, r5, pc}
 80005fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000600:	bf3c      	itt	cc
 8000602:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000606:	bd30      	popcc	{r4, r5, pc}
 8000608:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800060c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000610:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000614:	f04f 0000 	mov.w	r0, #0
 8000618:	bd30      	pop	{r4, r5, pc}
 800061a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061e:	bf1a      	itte	ne
 8000620:	4619      	movne	r1, r3
 8000622:	4610      	movne	r0, r2
 8000624:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000628:	bf1c      	itt	ne
 800062a:	460b      	movne	r3, r1
 800062c:	4602      	movne	r2, r0
 800062e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000632:	bf06      	itte	eq
 8000634:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000638:	ea91 0f03 	teqeq	r1, r3
 800063c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000640:	bd30      	pop	{r4, r5, pc}
 8000642:	bf00      	nop

08000644 <__aeabi_ui2d>:
 8000644:	f090 0f00 	teq	r0, #0
 8000648:	bf04      	itt	eq
 800064a:	2100      	moveq	r1, #0
 800064c:	4770      	bxeq	lr
 800064e:	b530      	push	{r4, r5, lr}
 8000650:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000654:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000658:	f04f 0500 	mov.w	r5, #0
 800065c:	f04f 0100 	mov.w	r1, #0
 8000660:	e750      	b.n	8000504 <__adddf3+0x138>
 8000662:	bf00      	nop

08000664 <__aeabi_i2d>:
 8000664:	f090 0f00 	teq	r0, #0
 8000668:	bf04      	itt	eq
 800066a:	2100      	moveq	r1, #0
 800066c:	4770      	bxeq	lr
 800066e:	b530      	push	{r4, r5, lr}
 8000670:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000674:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000678:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800067c:	bf48      	it	mi
 800067e:	4240      	negmi	r0, r0
 8000680:	f04f 0100 	mov.w	r1, #0
 8000684:	e73e      	b.n	8000504 <__adddf3+0x138>
 8000686:	bf00      	nop

08000688 <__aeabi_f2d>:
 8000688:	0042      	lsls	r2, r0, #1
 800068a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800068e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000692:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000696:	bf1f      	itttt	ne
 8000698:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800069c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80006a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80006a4:	4770      	bxne	lr
 80006a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80006aa:	bf08      	it	eq
 80006ac:	4770      	bxeq	lr
 80006ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80006b2:	bf04      	itt	eq
 80006b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80006b8:	4770      	bxeq	lr
 80006ba:	b530      	push	{r4, r5, lr}
 80006bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	e71c      	b.n	8000504 <__adddf3+0x138>
 80006ca:	bf00      	nop

080006cc <__aeabi_ul2d>:
 80006cc:	ea50 0201 	orrs.w	r2, r0, r1
 80006d0:	bf08      	it	eq
 80006d2:	4770      	bxeq	lr
 80006d4:	b530      	push	{r4, r5, lr}
 80006d6:	f04f 0500 	mov.w	r5, #0
 80006da:	e00a      	b.n	80006f2 <__aeabi_l2d+0x16>

080006dc <__aeabi_l2d>:
 80006dc:	ea50 0201 	orrs.w	r2, r0, r1
 80006e0:	bf08      	it	eq
 80006e2:	4770      	bxeq	lr
 80006e4:	b530      	push	{r4, r5, lr}
 80006e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ea:	d502      	bpl.n	80006f2 <__aeabi_l2d+0x16>
 80006ec:	4240      	negs	r0, r0
 80006ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006fe:	f43f aed8 	beq.w	80004b2 <__adddf3+0xe6>
 8000702:	f04f 0203 	mov.w	r2, #3
 8000706:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800070a:	bf18      	it	ne
 800070c:	3203      	addne	r2, #3
 800070e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000712:	bf18      	it	ne
 8000714:	3203      	addne	r2, #3
 8000716:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800071a:	f1c2 0320 	rsb	r3, r2, #32
 800071e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000722:	fa20 f002 	lsr.w	r0, r0, r2
 8000726:	fa01 fe03 	lsl.w	lr, r1, r3
 800072a:	ea40 000e 	orr.w	r0, r0, lr
 800072e:	fa21 f102 	lsr.w	r1, r1, r2
 8000732:	4414      	add	r4, r2
 8000734:	e6bd      	b.n	80004b2 <__adddf3+0xe6>
 8000736:	bf00      	nop

08000738 <__aeabi_uldivmod>:
 8000738:	b953      	cbnz	r3, 8000750 <__aeabi_uldivmod+0x18>
 800073a:	b94a      	cbnz	r2, 8000750 <__aeabi_uldivmod+0x18>
 800073c:	2900      	cmp	r1, #0
 800073e:	bf08      	it	eq
 8000740:	2800      	cmpeq	r0, #0
 8000742:	bf1c      	itt	ne
 8000744:	f04f 31ff 	movne.w	r1, #4294967295
 8000748:	f04f 30ff 	movne.w	r0, #4294967295
 800074c:	f000 b9a2 	b.w	8000a94 <__aeabi_idiv0>
 8000750:	f1ad 0c08 	sub.w	ip, sp, #8
 8000754:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000758:	f000 f83e 	bl	80007d8 <__udivmoddi4>
 800075c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000760:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000764:	b004      	add	sp, #16
 8000766:	4770      	bx	lr

08000768 <__aeabi_d2lz>:
 8000768:	b508      	push	{r3, lr}
 800076a:	4602      	mov	r2, r0
 800076c:	460b      	mov	r3, r1
 800076e:	ec43 2b17 	vmov	d7, r2, r3
 8000772:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800077a:	d403      	bmi.n	8000784 <__aeabi_d2lz+0x1c>
 800077c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000780:	f000 b80a 	b.w	8000798 <__aeabi_d2ulz>
 8000784:	eeb1 7b47 	vneg.f64	d7, d7
 8000788:	ec51 0b17 	vmov	r0, r1, d7
 800078c:	f000 f804 	bl	8000798 <__aeabi_d2ulz>
 8000790:	4240      	negs	r0, r0
 8000792:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000796:	bd08      	pop	{r3, pc}

08000798 <__aeabi_d2ulz>:
 8000798:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 80007c8 <__aeabi_d2ulz+0x30>
 800079c:	ec41 0b17 	vmov	d7, r0, r1
 80007a0:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 80007d0 <__aeabi_d2ulz+0x38>
 80007a4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80007a8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80007ac:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80007b0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80007b4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80007b8:	ee16 1a10 	vmov	r1, s12
 80007bc:	ee17 0a90 	vmov	r0, s15
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	f3af 8000 	nop.w
 80007c8:	00000000 	.word	0x00000000
 80007cc:	3df00000 	.word	0x3df00000
 80007d0:	00000000 	.word	0x00000000
 80007d4:	41f00000 	.word	0x41f00000

080007d8 <__udivmoddi4>:
 80007d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007dc:	9d08      	ldr	r5, [sp, #32]
 80007de:	460c      	mov	r4, r1
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d14e      	bne.n	8000882 <__udivmoddi4+0xaa>
 80007e4:	4694      	mov	ip, r2
 80007e6:	458c      	cmp	ip, r1
 80007e8:	4686      	mov	lr, r0
 80007ea:	fab2 f282 	clz	r2, r2
 80007ee:	d962      	bls.n	80008b6 <__udivmoddi4+0xde>
 80007f0:	b14a      	cbz	r2, 8000806 <__udivmoddi4+0x2e>
 80007f2:	f1c2 0320 	rsb	r3, r2, #32
 80007f6:	4091      	lsls	r1, r2
 80007f8:	fa20 f303 	lsr.w	r3, r0, r3
 80007fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000800:	4319      	orrs	r1, r3
 8000802:	fa00 fe02 	lsl.w	lr, r0, r2
 8000806:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800080a:	fa1f f68c 	uxth.w	r6, ip
 800080e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000812:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000816:	fb07 1114 	mls	r1, r7, r4, r1
 800081a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800081e:	fb04 f106 	mul.w	r1, r4, r6
 8000822:	4299      	cmp	r1, r3
 8000824:	d90a      	bls.n	800083c <__udivmoddi4+0x64>
 8000826:	eb1c 0303 	adds.w	r3, ip, r3
 800082a:	f104 30ff 	add.w	r0, r4, #4294967295
 800082e:	f080 8112 	bcs.w	8000a56 <__udivmoddi4+0x27e>
 8000832:	4299      	cmp	r1, r3
 8000834:	f240 810f 	bls.w	8000a56 <__udivmoddi4+0x27e>
 8000838:	3c02      	subs	r4, #2
 800083a:	4463      	add	r3, ip
 800083c:	1a59      	subs	r1, r3, r1
 800083e:	fa1f f38e 	uxth.w	r3, lr
 8000842:	fbb1 f0f7 	udiv	r0, r1, r7
 8000846:	fb07 1110 	mls	r1, r7, r0, r1
 800084a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800084e:	fb00 f606 	mul.w	r6, r0, r6
 8000852:	429e      	cmp	r6, r3
 8000854:	d90a      	bls.n	800086c <__udivmoddi4+0x94>
 8000856:	eb1c 0303 	adds.w	r3, ip, r3
 800085a:	f100 31ff 	add.w	r1, r0, #4294967295
 800085e:	f080 80fc 	bcs.w	8000a5a <__udivmoddi4+0x282>
 8000862:	429e      	cmp	r6, r3
 8000864:	f240 80f9 	bls.w	8000a5a <__udivmoddi4+0x282>
 8000868:	4463      	add	r3, ip
 800086a:	3802      	subs	r0, #2
 800086c:	1b9b      	subs	r3, r3, r6
 800086e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000872:	2100      	movs	r1, #0
 8000874:	b11d      	cbz	r5, 800087e <__udivmoddi4+0xa6>
 8000876:	40d3      	lsrs	r3, r2
 8000878:	2200      	movs	r2, #0
 800087a:	e9c5 3200 	strd	r3, r2, [r5]
 800087e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000882:	428b      	cmp	r3, r1
 8000884:	d905      	bls.n	8000892 <__udivmoddi4+0xba>
 8000886:	b10d      	cbz	r5, 800088c <__udivmoddi4+0xb4>
 8000888:	e9c5 0100 	strd	r0, r1, [r5]
 800088c:	2100      	movs	r1, #0
 800088e:	4608      	mov	r0, r1
 8000890:	e7f5      	b.n	800087e <__udivmoddi4+0xa6>
 8000892:	fab3 f183 	clz	r1, r3
 8000896:	2900      	cmp	r1, #0
 8000898:	d146      	bne.n	8000928 <__udivmoddi4+0x150>
 800089a:	42a3      	cmp	r3, r4
 800089c:	d302      	bcc.n	80008a4 <__udivmoddi4+0xcc>
 800089e:	4290      	cmp	r0, r2
 80008a0:	f0c0 80f0 	bcc.w	8000a84 <__udivmoddi4+0x2ac>
 80008a4:	1a86      	subs	r6, r0, r2
 80008a6:	eb64 0303 	sbc.w	r3, r4, r3
 80008aa:	2001      	movs	r0, #1
 80008ac:	2d00      	cmp	r5, #0
 80008ae:	d0e6      	beq.n	800087e <__udivmoddi4+0xa6>
 80008b0:	e9c5 6300 	strd	r6, r3, [r5]
 80008b4:	e7e3      	b.n	800087e <__udivmoddi4+0xa6>
 80008b6:	2a00      	cmp	r2, #0
 80008b8:	f040 8090 	bne.w	80009dc <__udivmoddi4+0x204>
 80008bc:	eba1 040c 	sub.w	r4, r1, ip
 80008c0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008c4:	fa1f f78c 	uxth.w	r7, ip
 80008c8:	2101      	movs	r1, #1
 80008ca:	fbb4 f6f8 	udiv	r6, r4, r8
 80008ce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008d2:	fb08 4416 	mls	r4, r8, r6, r4
 80008d6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008da:	fb07 f006 	mul.w	r0, r7, r6
 80008de:	4298      	cmp	r0, r3
 80008e0:	d908      	bls.n	80008f4 <__udivmoddi4+0x11c>
 80008e2:	eb1c 0303 	adds.w	r3, ip, r3
 80008e6:	f106 34ff 	add.w	r4, r6, #4294967295
 80008ea:	d202      	bcs.n	80008f2 <__udivmoddi4+0x11a>
 80008ec:	4298      	cmp	r0, r3
 80008ee:	f200 80cd 	bhi.w	8000a8c <__udivmoddi4+0x2b4>
 80008f2:	4626      	mov	r6, r4
 80008f4:	1a1c      	subs	r4, r3, r0
 80008f6:	fa1f f38e 	uxth.w	r3, lr
 80008fa:	fbb4 f0f8 	udiv	r0, r4, r8
 80008fe:	fb08 4410 	mls	r4, r8, r0, r4
 8000902:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000906:	fb00 f707 	mul.w	r7, r0, r7
 800090a:	429f      	cmp	r7, r3
 800090c:	d908      	bls.n	8000920 <__udivmoddi4+0x148>
 800090e:	eb1c 0303 	adds.w	r3, ip, r3
 8000912:	f100 34ff 	add.w	r4, r0, #4294967295
 8000916:	d202      	bcs.n	800091e <__udivmoddi4+0x146>
 8000918:	429f      	cmp	r7, r3
 800091a:	f200 80b0 	bhi.w	8000a7e <__udivmoddi4+0x2a6>
 800091e:	4620      	mov	r0, r4
 8000920:	1bdb      	subs	r3, r3, r7
 8000922:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000926:	e7a5      	b.n	8000874 <__udivmoddi4+0x9c>
 8000928:	f1c1 0620 	rsb	r6, r1, #32
 800092c:	408b      	lsls	r3, r1
 800092e:	fa22 f706 	lsr.w	r7, r2, r6
 8000932:	431f      	orrs	r7, r3
 8000934:	fa20 fc06 	lsr.w	ip, r0, r6
 8000938:	fa04 f301 	lsl.w	r3, r4, r1
 800093c:	ea43 030c 	orr.w	r3, r3, ip
 8000940:	40f4      	lsrs	r4, r6
 8000942:	fa00 f801 	lsl.w	r8, r0, r1
 8000946:	0c38      	lsrs	r0, r7, #16
 8000948:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800094c:	fbb4 fef0 	udiv	lr, r4, r0
 8000950:	fa1f fc87 	uxth.w	ip, r7
 8000954:	fb00 441e 	mls	r4, r0, lr, r4
 8000958:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800095c:	fb0e f90c 	mul.w	r9, lr, ip
 8000960:	45a1      	cmp	r9, r4
 8000962:	fa02 f201 	lsl.w	r2, r2, r1
 8000966:	d90a      	bls.n	800097e <__udivmoddi4+0x1a6>
 8000968:	193c      	adds	r4, r7, r4
 800096a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800096e:	f080 8084 	bcs.w	8000a7a <__udivmoddi4+0x2a2>
 8000972:	45a1      	cmp	r9, r4
 8000974:	f240 8081 	bls.w	8000a7a <__udivmoddi4+0x2a2>
 8000978:	f1ae 0e02 	sub.w	lr, lr, #2
 800097c:	443c      	add	r4, r7
 800097e:	eba4 0409 	sub.w	r4, r4, r9
 8000982:	fa1f f983 	uxth.w	r9, r3
 8000986:	fbb4 f3f0 	udiv	r3, r4, r0
 800098a:	fb00 4413 	mls	r4, r0, r3, r4
 800098e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000992:	fb03 fc0c 	mul.w	ip, r3, ip
 8000996:	45a4      	cmp	ip, r4
 8000998:	d907      	bls.n	80009aa <__udivmoddi4+0x1d2>
 800099a:	193c      	adds	r4, r7, r4
 800099c:	f103 30ff 	add.w	r0, r3, #4294967295
 80009a0:	d267      	bcs.n	8000a72 <__udivmoddi4+0x29a>
 80009a2:	45a4      	cmp	ip, r4
 80009a4:	d965      	bls.n	8000a72 <__udivmoddi4+0x29a>
 80009a6:	3b02      	subs	r3, #2
 80009a8:	443c      	add	r4, r7
 80009aa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80009ae:	fba0 9302 	umull	r9, r3, r0, r2
 80009b2:	eba4 040c 	sub.w	r4, r4, ip
 80009b6:	429c      	cmp	r4, r3
 80009b8:	46ce      	mov	lr, r9
 80009ba:	469c      	mov	ip, r3
 80009bc:	d351      	bcc.n	8000a62 <__udivmoddi4+0x28a>
 80009be:	d04e      	beq.n	8000a5e <__udivmoddi4+0x286>
 80009c0:	b155      	cbz	r5, 80009d8 <__udivmoddi4+0x200>
 80009c2:	ebb8 030e 	subs.w	r3, r8, lr
 80009c6:	eb64 040c 	sbc.w	r4, r4, ip
 80009ca:	fa04 f606 	lsl.w	r6, r4, r6
 80009ce:	40cb      	lsrs	r3, r1
 80009d0:	431e      	orrs	r6, r3
 80009d2:	40cc      	lsrs	r4, r1
 80009d4:	e9c5 6400 	strd	r6, r4, [r5]
 80009d8:	2100      	movs	r1, #0
 80009da:	e750      	b.n	800087e <__udivmoddi4+0xa6>
 80009dc:	f1c2 0320 	rsb	r3, r2, #32
 80009e0:	fa20 f103 	lsr.w	r1, r0, r3
 80009e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80009e8:	fa24 f303 	lsr.w	r3, r4, r3
 80009ec:	4094      	lsls	r4, r2
 80009ee:	430c      	orrs	r4, r1
 80009f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009f4:	fa00 fe02 	lsl.w	lr, r0, r2
 80009f8:	fa1f f78c 	uxth.w	r7, ip
 80009fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a00:	fb08 3110 	mls	r1, r8, r0, r3
 8000a04:	0c23      	lsrs	r3, r4, #16
 8000a06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a0a:	fb00 f107 	mul.w	r1, r0, r7
 8000a0e:	4299      	cmp	r1, r3
 8000a10:	d908      	bls.n	8000a24 <__udivmoddi4+0x24c>
 8000a12:	eb1c 0303 	adds.w	r3, ip, r3
 8000a16:	f100 36ff 	add.w	r6, r0, #4294967295
 8000a1a:	d22c      	bcs.n	8000a76 <__udivmoddi4+0x29e>
 8000a1c:	4299      	cmp	r1, r3
 8000a1e:	d92a      	bls.n	8000a76 <__udivmoddi4+0x29e>
 8000a20:	3802      	subs	r0, #2
 8000a22:	4463      	add	r3, ip
 8000a24:	1a5b      	subs	r3, r3, r1
 8000a26:	b2a4      	uxth	r4, r4
 8000a28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000a2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000a30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a34:	fb01 f307 	mul.w	r3, r1, r7
 8000a38:	42a3      	cmp	r3, r4
 8000a3a:	d908      	bls.n	8000a4e <__udivmoddi4+0x276>
 8000a3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a40:	f101 36ff 	add.w	r6, r1, #4294967295
 8000a44:	d213      	bcs.n	8000a6e <__udivmoddi4+0x296>
 8000a46:	42a3      	cmp	r3, r4
 8000a48:	d911      	bls.n	8000a6e <__udivmoddi4+0x296>
 8000a4a:	3902      	subs	r1, #2
 8000a4c:	4464      	add	r4, ip
 8000a4e:	1ae4      	subs	r4, r4, r3
 8000a50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000a54:	e739      	b.n	80008ca <__udivmoddi4+0xf2>
 8000a56:	4604      	mov	r4, r0
 8000a58:	e6f0      	b.n	800083c <__udivmoddi4+0x64>
 8000a5a:	4608      	mov	r0, r1
 8000a5c:	e706      	b.n	800086c <__udivmoddi4+0x94>
 8000a5e:	45c8      	cmp	r8, r9
 8000a60:	d2ae      	bcs.n	80009c0 <__udivmoddi4+0x1e8>
 8000a62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000a66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000a6a:	3801      	subs	r0, #1
 8000a6c:	e7a8      	b.n	80009c0 <__udivmoddi4+0x1e8>
 8000a6e:	4631      	mov	r1, r6
 8000a70:	e7ed      	b.n	8000a4e <__udivmoddi4+0x276>
 8000a72:	4603      	mov	r3, r0
 8000a74:	e799      	b.n	80009aa <__udivmoddi4+0x1d2>
 8000a76:	4630      	mov	r0, r6
 8000a78:	e7d4      	b.n	8000a24 <__udivmoddi4+0x24c>
 8000a7a:	46d6      	mov	lr, sl
 8000a7c:	e77f      	b.n	800097e <__udivmoddi4+0x1a6>
 8000a7e:	4463      	add	r3, ip
 8000a80:	3802      	subs	r0, #2
 8000a82:	e74d      	b.n	8000920 <__udivmoddi4+0x148>
 8000a84:	4606      	mov	r6, r0
 8000a86:	4623      	mov	r3, r4
 8000a88:	4608      	mov	r0, r1
 8000a8a:	e70f      	b.n	80008ac <__udivmoddi4+0xd4>
 8000a8c:	3e02      	subs	r6, #2
 8000a8e:	4463      	add	r3, ip
 8000a90:	e730      	b.n	80008f4 <__udivmoddi4+0x11c>
 8000a92:	bf00      	nop

08000a94 <__aeabi_idiv0>:
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af02      	add	r7, sp, #8
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000a9e:	4b43      	ldr	r3, [pc, #268]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000aa0:	4a43      	ldr	r2, [pc, #268]	@ (8000bb0 <MX_FDCAN1_Init+0x118>)
 8000aa2:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000aa4:	4b41      	ldr	r3, [pc, #260]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000aaa:	4b40      	ldr	r3, [pc, #256]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000ab0:	4b3e      	ldr	r3, [pc, #248]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000ab6:	4b3d      	ldr	r3, [pc, #244]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000abc:	4b3b      	ldr	r3, [pc, #236]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 10;
 8000ac2:	4b3a      	ldr	r3, [pc, #232]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000ac4:	220a      	movs	r2, #10
 8000ac6:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 8;
 8000ac8:	4b38      	ldr	r3, [pc, #224]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000aca:	2208      	movs	r2, #8
 8000acc:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8000ace:	4b37      	ldr	r3, [pc, #220]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000ad0:	2202      	movs	r2, #2
 8000ad2:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000ad4:	4b35      	ldr	r3, [pc, #212]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000ad6:	2202      	movs	r2, #2
 8000ad8:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000ada:	4b34      	ldr	r3, [pc, #208]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000adc:	2201      	movs	r2, #1
 8000ade:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 10;
 8000ae0:	4b32      	ldr	r3, [pc, #200]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000ae2:	220a      	movs	r2, #10
 8000ae4:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 2;
 8000ae6:	4b31      	ldr	r3, [pc, #196]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000ae8:	2202      	movs	r2, #2
 8000aea:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 2;
 8000aec:	4b2f      	ldr	r3, [pc, #188]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000aee:	2202      	movs	r2, #2
 8000af0:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000af2:	4b2e      	ldr	r3, [pc, #184]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8000af8:	4b2c      	ldr	r3, [pc, #176]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 1;
 8000afe:	4b2b      	ldr	r3, [pc, #172]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000b00:	2201      	movs	r2, #1
 8000b02:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 4;
 8000b04:	4b29      	ldr	r3, [pc, #164]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000b06:	2204      	movs	r2, #4
 8000b08:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000b0a:	4b28      	ldr	r3, [pc, #160]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000b0c:	2204      	movs	r2, #4
 8000b0e:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000b10:	4b26      	ldr	r3, [pc, #152]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000b16:	4b25      	ldr	r3, [pc, #148]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000b18:	2204      	movs	r2, #4
 8000b1a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000b1c:	4b23      	ldr	r3, [pc, #140]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000b22:	4b22      	ldr	r3, [pc, #136]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000b24:	2204      	movs	r2, #4
 8000b26:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000b28:	4b20      	ldr	r3, [pc, #128]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000b2e:	4b1f      	ldr	r3, [pc, #124]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 1;
 8000b34:	4b1d      	ldr	r3, [pc, #116]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000b36:	2201      	movs	r2, #1
 8000b38:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000b3a:	4b1c      	ldr	r3, [pc, #112]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000b40:	4b1a      	ldr	r3, [pc, #104]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000b42:	2204      	movs	r2, #4
 8000b44:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000b46:	4819      	ldr	r0, [pc, #100]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000b48:	f002 ff68 	bl	8003a1c <HAL_FDCAN_Init>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <MX_FDCAN1_Init+0xbe>
  {
    Error_Handler();
 8000b52:	f000 fdc7 	bl	80016e4 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
//配置RX滤波
	hfdcan1_RX_Filter.IdType = FDCAN_EXTENDED_ID;       //标准 IDFDCAN_STANDARD_ID
 8000b56:	4b17      	ldr	r3, [pc, #92]	@ (8000bb4 <MX_FDCAN1_Init+0x11c>)
 8000b58:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000b5c:	601a      	str	r2, [r3, #0]
	hfdcan1_RX_Filter.FilterIndex = 0;                             //滤波器索�???????
 8000b5e:	4b15      	ldr	r3, [pc, #84]	@ (8000bb4 <MX_FDCAN1_Init+0x11c>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	605a      	str	r2, [r3, #4]
	hfdcan1_RX_Filter.FilterType = FDCAN_FILTER_MASK;              //滤波器类�???????
 8000b64:	4b13      	ldr	r3, [pc, #76]	@ (8000bb4 <MX_FDCAN1_Init+0x11c>)
 8000b66:	2202      	movs	r2, #2
 8000b68:	609a      	str	r2, [r3, #8]
	hfdcan1_RX_Filter.FilterConfig = FDCAN_FILTER_TO_RXFIFO0; //过滤�???????0关联到FIFO0
 8000b6a:	4b12      	ldr	r3, [pc, #72]	@ (8000bb4 <MX_FDCAN1_Init+0x11c>)
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	60da      	str	r2, [r3, #12]
	hfdcan1_RX_Filter.FilterID1 = 0x000;                               //32位ID
 8000b70:	4b10      	ldr	r3, [pc, #64]	@ (8000bb4 <MX_FDCAN1_Init+0x11c>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	611a      	str	r2, [r3, #16]
	hfdcan1_RX_Filter.FilterID2 = 0x000; //如果FDCAN配置为传统模式的话，这里�???????32位掩�???????
 8000b76:	4b0f      	ldr	r3, [pc, #60]	@ (8000bb4 <MX_FDCAN1_Init+0x11c>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	615a      	str	r2, [r3, #20]
	HAL_FDCAN_ConfigFilter(&hfdcan1, &hfdcan1_RX_Filter);               //滤波器初始化
 8000b7c:	490d      	ldr	r1, [pc, #52]	@ (8000bb4 <MX_FDCAN1_Init+0x11c>)
 8000b7e:	480b      	ldr	r0, [pc, #44]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000b80:	f003 f92a 	bl	8003dd8 <HAL_FDCAN_ConfigFilter>
	HAL_FDCAN_ConfigGlobalFilter(&hfdcan1, FDCAN_REJECT, FDCAN_REJECT, ENABLE,
 8000b84:	2301      	movs	r3, #1
 8000b86:	9300      	str	r3, [sp, #0]
 8000b88:	2301      	movs	r3, #1
 8000b8a:	2202      	movs	r2, #2
 8000b8c:	2102      	movs	r1, #2
 8000b8e:	4807      	ldr	r0, [pc, #28]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000b90:	f003 f998 	bl	8003ec4 <HAL_FDCAN_ConfigGlobalFilter>
			ENABLE);
	HAL_FDCAN_Start(&hfdcan1);                               //�??启FDCAN
 8000b94:	4805      	ldr	r0, [pc, #20]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000b96:	f003 f9c2 	bl	8003f1e <HAL_FDCAN_Start>
	HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0);
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	2101      	movs	r1, #1
 8000b9e:	4803      	ldr	r0, [pc, #12]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000ba0:	f003 fbb0 	bl	8004304 <HAL_FDCAN_ActivateNotification>
  /* USER CODE END FDCAN1_Init 2 */

}
 8000ba4:	bf00      	nop
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	240002a0 	.word	0x240002a0
 8000bb0:	4000a000 	.word	0x4000a000
 8000bb4:	24000230 	.word	0x24000230

08000bb8 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b0b8      	sub	sp, #224	@ 0xe0
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc0:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	601a      	str	r2, [r3, #0]
 8000bc8:	605a      	str	r2, [r3, #4]
 8000bca:	609a      	str	r2, [r3, #8]
 8000bcc:	60da      	str	r2, [r3, #12]
 8000bce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bd0:	f107 0310 	add.w	r3, r7, #16
 8000bd4:	22b8      	movs	r2, #184	@ 0xb8
 8000bd6:	2100      	movs	r1, #0
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f00e ffde 	bl	800fb9a <memset>
  if(fdcanHandle->Instance==FDCAN1)
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	4a2a      	ldr	r2, [pc, #168]	@ (8000c8c <HAL_FDCAN_MspInit+0xd4>)
 8000be4:	4293      	cmp	r3, r2
 8000be6:	d14c      	bne.n	8000c82 <HAL_FDCAN_MspInit+0xca>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000be8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000bec:	f04f 0300 	mov.w	r3, #0
 8000bf0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bf8:	f107 0310 	add.w	r3, r7, #16
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f005 fa3f 	bl	8006080 <HAL_RCCEx_PeriphCLKConfig>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d001      	beq.n	8000c0c <HAL_FDCAN_MspInit+0x54>
    {
      Error_Handler();
 8000c08:	f000 fd6c 	bl	80016e4 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000c0c:	4b20      	ldr	r3, [pc, #128]	@ (8000c90 <HAL_FDCAN_MspInit+0xd8>)
 8000c0e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8000c12:	4a1f      	ldr	r2, [pc, #124]	@ (8000c90 <HAL_FDCAN_MspInit+0xd8>)
 8000c14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c18:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8000c1c:	4b1c      	ldr	r3, [pc, #112]	@ (8000c90 <HAL_FDCAN_MspInit+0xd8>)
 8000c1e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8000c22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000c26:	60fb      	str	r3, [r7, #12]
 8000c28:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c2a:	4b19      	ldr	r3, [pc, #100]	@ (8000c90 <HAL_FDCAN_MspInit+0xd8>)
 8000c2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c30:	4a17      	ldr	r2, [pc, #92]	@ (8000c90 <HAL_FDCAN_MspInit+0xd8>)
 8000c32:	f043 0308 	orr.w	r3, r3, #8
 8000c36:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c3a:	4b15      	ldr	r3, [pc, #84]	@ (8000c90 <HAL_FDCAN_MspInit+0xd8>)
 8000c3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c40:	f003 0308 	and.w	r3, r3, #8
 8000c44:	60bb      	str	r3, [r7, #8]
 8000c46:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000c48:	2303      	movs	r3, #3
 8000c4a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c4e:	2302      	movs	r3, #2
 8000c50:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c54:	2300      	movs	r3, #0
 8000c56:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000c60:	2309      	movs	r3, #9
 8000c62:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c66:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	4809      	ldr	r0, [pc, #36]	@ (8000c94 <HAL_FDCAN_MspInit+0xdc>)
 8000c6e:	f004 f8bf 	bl	8004df0 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 2, 0);
 8000c72:	2200      	movs	r2, #0
 8000c74:	2102      	movs	r1, #2
 8000c76:	2013      	movs	r0, #19
 8000c78:	f002 f8bf 	bl	8002dfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000c7c:	2013      	movs	r0, #19
 8000c7e:	f002 f8d6 	bl	8002e2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8000c82:	bf00      	nop
 8000c84:	37e0      	adds	r7, #224	@ 0xe0
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	4000a000 	.word	0x4000a000
 8000c90:	58024400 	.word	0x58024400
 8000c94:	58020c00 	.word	0x58020c00

08000c98 <FDCAN_Send_Msg>:
  /* USER CODE END FDCAN1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void FDCAN_Send_Msg(uint8_t *msg, uint32_t len) {
 8000c98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000c9c:	b087      	sub	sp, #28
 8000c9e:	af00      	add	r7, sp, #0
 8000ca0:	6078      	str	r0, [r7, #4]
 8000ca2:	6039      	str	r1, [r7, #0]
 8000ca4:	466b      	mov	r3, sp
 8000ca6:	461e      	mov	r6, r3
	uint8_t i = 0, j = 0, k = 0, l = 0, packNum = 0;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	75fb      	strb	r3, [r7, #23]
 8000cac:	2300      	movs	r3, #0
 8000cae:	753b      	strb	r3, [r7, #20]
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	74fb      	strb	r3, [r7, #19]
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	75bb      	strb	r3, [r7, #22]
 8000cb8:	2300      	movs	r3, #0
 8000cba:	757b      	strb	r3, [r7, #21]
	uint8_t TxData[len];
 8000cbc:	6839      	ldr	r1, [r7, #0]
 8000cbe:	460b      	mov	r3, r1
 8000cc0:	3b01      	subs	r3, #1
 8000cc2:	60fb      	str	r3, [r7, #12]
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	4688      	mov	r8, r1
 8000cc8:	4699      	mov	r9, r3
 8000cca:	f04f 0200 	mov.w	r2, #0
 8000cce:	f04f 0300 	mov.w	r3, #0
 8000cd2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000cd6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000cda:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000cde:	2300      	movs	r3, #0
 8000ce0:	460c      	mov	r4, r1
 8000ce2:	461d      	mov	r5, r3
 8000ce4:	f04f 0200 	mov.w	r2, #0
 8000ce8:	f04f 0300 	mov.w	r3, #0
 8000cec:	00eb      	lsls	r3, r5, #3
 8000cee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000cf2:	00e2      	lsls	r2, r4, #3
 8000cf4:	1dcb      	adds	r3, r1, #7
 8000cf6:	08db      	lsrs	r3, r3, #3
 8000cf8:	00db      	lsls	r3, r3, #3
 8000cfa:	ebad 0d03 	sub.w	sp, sp, r3
 8000cfe:	466b      	mov	r3, sp
 8000d00:	3300      	adds	r3, #0
 8000d02:	60bb      	str	r3, [r7, #8]
	j = len - 2;
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	b2db      	uxtb	r3, r3
 8000d08:	3b02      	subs	r3, #2
 8000d0a:	753b      	strb	r3, [r7, #20]
	// 除去ID地址和功能码后的数据长度
	TxData[0] = msg[1];
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	785a      	ldrb	r2, [r3, #1]
 8000d10:	68bb      	ldr	r3, [r7, #8]
 8000d12:	701a      	strb	r2, [r3, #0]
	// 发�?�数�???????
	while (i < j) {
 8000d14:	e062      	b.n	8000ddc <FDCAN_Send_Msg+0x144>
		// 数据个数
		k = j - i;
 8000d16:	7d3a      	ldrb	r2, [r7, #20]
 8000d18:	7dfb      	ldrb	r3, [r7, #23]
 8000d1a:	1ad3      	subs	r3, r2, r3
 8000d1c:	74fb      	strb	r3, [r7, #19]
		fdcan_TxHeader.Identifier = ((uint32_t) msg[0] << 8)
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	021a      	lsls	r2, r3, #8
				| (uint32_t) packNum;  //32位ID   0x00
 8000d24:	7d7b      	ldrb	r3, [r7, #21]
 8000d26:	4313      	orrs	r3, r2
		fdcan_TxHeader.Identifier = ((uint32_t) msg[0] << 8)
 8000d28:	4a31      	ldr	r2, [pc, #196]	@ (8000df0 <FDCAN_Send_Msg+0x158>)
 8000d2a:	6013      	str	r3, [r2, #0]
		fdcan_TxHeader.IdType = FDCAN_EXTENDED_ID;      //ID   FDCAN_STANDARD_ID
 8000d2c:	4b30      	ldr	r3, [pc, #192]	@ (8000df0 <FDCAN_Send_Msg+0x158>)
 8000d2e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d32:	605a      	str	r2, [r3, #4]
		fdcan_TxHeader.TxFrameType = FDCAN_DATA_FRAME;              //数据�???????
 8000d34:	4b2e      	ldr	r3, [pc, #184]	@ (8000df0 <FDCAN_Send_Msg+0x158>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	609a      	str	r2, [r3, #8]
		//    fdcan_TxHeader.DataLength=len;              //数据长度
		fdcan_TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000d3a:	4b2d      	ldr	r3, [pc, #180]	@ (8000df0 <FDCAN_Send_Msg+0x158>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	611a      	str	r2, [r3, #16]
		fdcan_TxHeader.BitRateSwitch = FDCAN_BRS_OFF;               //关闭速率切换
 8000d40:	4b2b      	ldr	r3, [pc, #172]	@ (8000df0 <FDCAN_Send_Msg+0x158>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	615a      	str	r2, [r3, #20]
		fdcan_TxHeader.FDFormat = FDCAN_CLASSIC_CAN;                //传统的CAN模式
 8000d46:	4b2a      	ldr	r3, [pc, #168]	@ (8000df0 <FDCAN_Send_Msg+0x158>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	619a      	str	r2, [r3, #24]
		fdcan_TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;    //无发送事�???????
 8000d4c:	4b28      	ldr	r3, [pc, #160]	@ (8000df0 <FDCAN_Send_Msg+0x158>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	61da      	str	r2, [r3, #28]
		fdcan_TxHeader.MessageMarker = 0;
 8000d52:	4b27      	ldr	r3, [pc, #156]	@ (8000df0 <FDCAN_Send_Msg+0x158>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	621a      	str	r2, [r3, #32]
		//小于8字节命令
		if (k < 8) {
 8000d58:	7cfb      	ldrb	r3, [r7, #19]
 8000d5a:	2b07      	cmp	r3, #7
 8000d5c:	d81b      	bhi.n	8000d96 <FDCAN_Send_Msg+0xfe>
			for (l = 0; l < k; l++, i++) {
 8000d5e:	2300      	movs	r3, #0
 8000d60:	75bb      	strb	r3, [r7, #22]
 8000d62:	e00e      	b.n	8000d82 <FDCAN_Send_Msg+0xea>
				TxData[l + 1] = msg[i + 2];
 8000d64:	7dfb      	ldrb	r3, [r7, #23]
 8000d66:	3302      	adds	r3, #2
 8000d68:	687a      	ldr	r2, [r7, #4]
 8000d6a:	441a      	add	r2, r3
 8000d6c:	7dbb      	ldrb	r3, [r7, #22]
 8000d6e:	3301      	adds	r3, #1
 8000d70:	7811      	ldrb	r1, [r2, #0]
 8000d72:	68ba      	ldr	r2, [r7, #8]
 8000d74:	54d1      	strb	r1, [r2, r3]
			for (l = 0; l < k; l++, i++) {
 8000d76:	7dbb      	ldrb	r3, [r7, #22]
 8000d78:	3301      	adds	r3, #1
 8000d7a:	75bb      	strb	r3, [r7, #22]
 8000d7c:	7dfb      	ldrb	r3, [r7, #23]
 8000d7e:	3301      	adds	r3, #1
 8000d80:	75fb      	strb	r3, [r7, #23]
 8000d82:	7dba      	ldrb	r2, [r7, #22]
 8000d84:	7cfb      	ldrb	r3, [r7, #19]
 8000d86:	429a      	cmp	r2, r3
 8000d88:	d3ec      	bcc.n	8000d64 <FDCAN_Send_Msg+0xcc>
			}
			fdcan_TxHeader.DataLength = k + 1;
 8000d8a:	7cfb      	ldrb	r3, [r7, #19]
 8000d8c:	3301      	adds	r3, #1
 8000d8e:	461a      	mov	r2, r3
 8000d90:	4b17      	ldr	r3, [pc, #92]	@ (8000df0 <FDCAN_Send_Msg+0x158>)
 8000d92:	60da      	str	r2, [r3, #12]
 8000d94:	e017      	b.n	8000dc6 <FDCAN_Send_Msg+0x12e>
		}
		// 大于8字节命令，分包发送，每包数据�???????多发�???????8个字�???????
		else {
			for (l = 0; l < 7; l++, i++) {
 8000d96:	2300      	movs	r3, #0
 8000d98:	75bb      	strb	r3, [r7, #22]
 8000d9a:	e00e      	b.n	8000dba <FDCAN_Send_Msg+0x122>
				TxData[l + 1] = msg[i + 2];
 8000d9c:	7dfb      	ldrb	r3, [r7, #23]
 8000d9e:	3302      	adds	r3, #2
 8000da0:	687a      	ldr	r2, [r7, #4]
 8000da2:	441a      	add	r2, r3
 8000da4:	7dbb      	ldrb	r3, [r7, #22]
 8000da6:	3301      	adds	r3, #1
 8000da8:	7811      	ldrb	r1, [r2, #0]
 8000daa:	68ba      	ldr	r2, [r7, #8]
 8000dac:	54d1      	strb	r1, [r2, r3]
			for (l = 0; l < 7; l++, i++) {
 8000dae:	7dbb      	ldrb	r3, [r7, #22]
 8000db0:	3301      	adds	r3, #1
 8000db2:	75bb      	strb	r3, [r7, #22]
 8000db4:	7dfb      	ldrb	r3, [r7, #23]
 8000db6:	3301      	adds	r3, #1
 8000db8:	75fb      	strb	r3, [r7, #23]
 8000dba:	7dbb      	ldrb	r3, [r7, #22]
 8000dbc:	2b06      	cmp	r3, #6
 8000dbe:	d9ed      	bls.n	8000d9c <FDCAN_Send_Msg+0x104>
			}
			fdcan_TxHeader.DataLength = 8;
 8000dc0:	4b0b      	ldr	r3, [pc, #44]	@ (8000df0 <FDCAN_Send_Msg+0x158>)
 8000dc2:	2208      	movs	r2, #8
 8000dc4:	60da      	str	r2, [r3, #12]
		}

		// 发�?�数�?????
		HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &fdcan_TxHeader, TxData);
 8000dc6:	68ba      	ldr	r2, [r7, #8]
 8000dc8:	4909      	ldr	r1, [pc, #36]	@ (8000df0 <FDCAN_Send_Msg+0x158>)
 8000dca:	480a      	ldr	r0, [pc, #40]	@ (8000df4 <FDCAN_Send_Msg+0x15c>)
 8000dcc:	f003 f8d2 	bl	8003f74 <HAL_FDCAN_AddMessageToTxFifoQ>
		HAL_Delay(5);  //发第二帧数据的关键，若无延时，不发第二帧数据
 8000dd0:	2005      	movs	r0, #5
 8000dd2:	f001 ff13 	bl	8002bfc <HAL_Delay>
		// 记录发�?�的第几包的数据
		++packNum;
 8000dd6:	7d7b      	ldrb	r3, [r7, #21]
 8000dd8:	3301      	adds	r3, #1
 8000dda:	757b      	strb	r3, [r7, #21]
	while (i < j) {
 8000ddc:	7dfa      	ldrb	r2, [r7, #23]
 8000dde:	7d3b      	ldrb	r3, [r7, #20]
 8000de0:	429a      	cmp	r2, r3
 8000de2:	d398      	bcc.n	8000d16 <FDCAN_Send_Msg+0x7e>
 8000de4:	46b5      	mov	sp, r6
	}
}
 8000de6:	bf00      	nop
 8000de8:	371c      	adds	r7, #28
 8000dea:	46bd      	mov	sp, r7
 8000dec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000df0:	24000250 	.word	0x24000250
 8000df4:	240002a0 	.word	0x240002a0

08000df8 <HAL_FDCAN_RxFifo0Callback>:
// 定义一个u8类型的数组变量rxdata用于存储接收到的数据
uint8_t  rxdata[8];
// 定义一个静态变量RxState，用于记录接收状态
uint8_t RxState = 0;
uint8_t Zero_data;
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs) {
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
 8000e00:	6039      	str	r1, [r7, #0]

	//提取FIFO0中接收到的数据
	HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &fdcan_RxHeader, rxdata);
 8000e02:	4b37      	ldr	r3, [pc, #220]	@ (8000ee0 <HAL_FDCAN_RxFifo0Callback+0xe8>)
 8000e04:	4a37      	ldr	r2, [pc, #220]	@ (8000ee4 <HAL_FDCAN_RxFifo0Callback+0xec>)
 8000e06:	2140      	movs	r1, #64	@ 0x40
 8000e08:	4837      	ldr	r0, [pc, #220]	@ (8000ee8 <HAL_FDCAN_RxFifo0Callback+0xf0>)
 8000e0a:	f003 f90f 	bl	800402c <HAL_FDCAN_GetRxMessage>
//	HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &fdcan_TxHeader, rxdata);
// Emm_mode 为0,清除接收状态
	if (Emm_mode == 0) {
 8000e0e:	4b37      	ldr	r3, [pc, #220]	@ (8000eec <HAL_FDCAN_RxFifo0Callback+0xf4>)
 8000e10:	781b      	ldrb	r3, [r3, #0]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d102      	bne.n	8000e1c <HAL_FDCAN_RxFifo0Callback+0x24>
		RxState = 0;
 8000e16:	4b36      	ldr	r3, [pc, #216]	@ (8000ef0 <HAL_FDCAN_RxFifo0Callback+0xf8>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	701a      	strb	r2, [r3, #0]
	}
// Emm_mode为1，进入接收状态机
	if (Emm_mode == 1) {
 8000e1c:	4b33      	ldr	r3, [pc, #204]	@ (8000eec <HAL_FDCAN_RxFifo0Callback+0xf4>)
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	2b01      	cmp	r3, #1
 8000e22:	d127      	bne.n	8000e74 <HAL_FDCAN_RxFifo0Callback+0x7c>
		if (RxState == 0) {
 8000e24:	4b32      	ldr	r3, [pc, #200]	@ (8000ef0 <HAL_FDCAN_RxFifo0Callback+0xf8>)
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d106      	bne.n	8000e3a <HAL_FDCAN_RxFifo0Callback+0x42>
			if (rxdata[0] == 0xFD) {
 8000e2c:	4b2c      	ldr	r3, [pc, #176]	@ (8000ee0 <HAL_FDCAN_RxFifo0Callback+0xe8>)
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	2bfd      	cmp	r3, #253	@ 0xfd
 8000e32:	d102      	bne.n	8000e3a <HAL_FDCAN_RxFifo0Callback+0x42>
				RxState = 1;
 8000e34:	4b2e      	ldr	r3, [pc, #184]	@ (8000ef0 <HAL_FDCAN_RxFifo0Callback+0xf8>)
 8000e36:	2201      	movs	r2, #1
 8000e38:	701a      	strb	r2, [r3, #0]
			}
		}
		 if (RxState == 1) {
 8000e3a:	4b2d      	ldr	r3, [pc, #180]	@ (8000ef0 <HAL_FDCAN_RxFifo0Callback+0xf8>)
 8000e3c:	781b      	ldrb	r3, [r3, #0]
 8000e3e:	2b01      	cmp	r3, #1
 8000e40:	d106      	bne.n	8000e50 <HAL_FDCAN_RxFifo0Callback+0x58>

			if (rxdata[1] == 0x9F) {
 8000e42:	4b27      	ldr	r3, [pc, #156]	@ (8000ee0 <HAL_FDCAN_RxFifo0Callback+0xe8>)
 8000e44:	785b      	ldrb	r3, [r3, #1]
 8000e46:	2b9f      	cmp	r3, #159	@ 0x9f
 8000e48:	d102      	bne.n	8000e50 <HAL_FDCAN_RxFifo0Callback+0x58>

				RxState = 2;
 8000e4a:	4b29      	ldr	r3, [pc, #164]	@ (8000ef0 <HAL_FDCAN_RxFifo0Callback+0xf8>)
 8000e4c:	2202      	movs	r2, #2
 8000e4e:	701a      	strb	r2, [r3, #0]

			}
		}
		 if (RxState == 2) {
 8000e50:	4b27      	ldr	r3, [pc, #156]	@ (8000ef0 <HAL_FDCAN_RxFifo0Callback+0xf8>)
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	2b02      	cmp	r3, #2
 8000e56:	d13a      	bne.n	8000ece <HAL_FDCAN_RxFifo0Callback+0xd6>
			if (rxdata[2] == 0x6B) {
 8000e58:	4b21      	ldr	r3, [pc, #132]	@ (8000ee0 <HAL_FDCAN_RxFifo0Callback+0xe8>)
 8000e5a:	789b      	ldrb	r3, [r3, #2]
 8000e5c:	2b6b      	cmp	r3, #107	@ 0x6b
 8000e5e:	d136      	bne.n	8000ece <HAL_FDCAN_RxFifo0Callback+0xd6>

				RxFlag = 1;
 8000e60:	4b24      	ldr	r3, [pc, #144]	@ (8000ef4 <HAL_FDCAN_RxFifo0Callback+0xfc>)
 8000e62:	2201      	movs	r2, #1
 8000e64:	701a      	strb	r2, [r3, #0]
				RxState = 0;
 8000e66:	4b22      	ldr	r3, [pc, #136]	@ (8000ef0 <HAL_FDCAN_RxFifo0Callback+0xf8>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	701a      	strb	r2, [r3, #0]
				Emm_mode = 0;
 8000e6c:	4b1f      	ldr	r3, [pc, #124]	@ (8000eec <HAL_FDCAN_RxFifo0Callback+0xf4>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	701a      	strb	r2, [r3, #0]
 8000e72:	e02c      	b.n	8000ece <HAL_FDCAN_RxFifo0Callback+0xd6>
			}
		}
	}
//	进入回零状态回调
	else if(Emm_mode == 2)
 8000e74:	4b1d      	ldr	r3, [pc, #116]	@ (8000eec <HAL_FDCAN_RxFifo0Callback+0xf4>)
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	2b02      	cmp	r3, #2
 8000e7a:	d128      	bne.n	8000ece <HAL_FDCAN_RxFifo0Callback+0xd6>
	{
		if (RxState == 0) {
 8000e7c:	4b1c      	ldr	r3, [pc, #112]	@ (8000ef0 <HAL_FDCAN_RxFifo0Callback+0xf8>)
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d107      	bne.n	8000e94 <HAL_FDCAN_RxFifo0Callback+0x9c>
			if (rxdata[0] == 0x3B) {
 8000e84:	4b16      	ldr	r3, [pc, #88]	@ (8000ee0 <HAL_FDCAN_RxFifo0Callback+0xe8>)
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	2b3b      	cmp	r3, #59	@ 0x3b
 8000e8a:	d120      	bne.n	8000ece <HAL_FDCAN_RxFifo0Callback+0xd6>
				RxState = 1;
 8000e8c:	4b18      	ldr	r3, [pc, #96]	@ (8000ef0 <HAL_FDCAN_RxFifo0Callback+0xf8>)
 8000e8e:	2201      	movs	r2, #1
 8000e90:	701a      	strb	r2, [r3, #0]
 8000e92:	e01c      	b.n	8000ece <HAL_FDCAN_RxFifo0Callback+0xd6>
			}
		}
		else if(RxState == 1)
 8000e94:	4b16      	ldr	r3, [pc, #88]	@ (8000ef0 <HAL_FDCAN_RxFifo0Callback+0xf8>)
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	2b01      	cmp	r3, #1
 8000e9a:	d10a      	bne.n	8000eb2 <HAL_FDCAN_RxFifo0Callback+0xba>
			{
			Zero_data = rxdata[1] & 0x04;
 8000e9c:	4b10      	ldr	r3, [pc, #64]	@ (8000ee0 <HAL_FDCAN_RxFifo0Callback+0xe8>)
 8000e9e:	785b      	ldrb	r3, [r3, #1]
 8000ea0:	f003 0304 	and.w	r3, r3, #4
 8000ea4:	b2da      	uxtb	r2, r3
 8000ea6:	4b14      	ldr	r3, [pc, #80]	@ (8000ef8 <HAL_FDCAN_RxFifo0Callback+0x100>)
 8000ea8:	701a      	strb	r2, [r3, #0]
			RxState = 2;
 8000eaa:	4b11      	ldr	r3, [pc, #68]	@ (8000ef0 <HAL_FDCAN_RxFifo0Callback+0xf8>)
 8000eac:	2202      	movs	r2, #2
 8000eae:	701a      	strb	r2, [r3, #0]
 8000eb0:	e00d      	b.n	8000ece <HAL_FDCAN_RxFifo0Callback+0xd6>
			}
		else if (RxState == 2)
 8000eb2:	4b0f      	ldr	r3, [pc, #60]	@ (8000ef0 <HAL_FDCAN_RxFifo0Callback+0xf8>)
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	2b02      	cmp	r3, #2
 8000eb8:	d109      	bne.n	8000ece <HAL_FDCAN_RxFifo0Callback+0xd6>
		{
			if (rxdata[0] == 0x6B) {
 8000eba:	4b09      	ldr	r3, [pc, #36]	@ (8000ee0 <HAL_FDCAN_RxFifo0Callback+0xe8>)
 8000ebc:	781b      	ldrb	r3, [r3, #0]
 8000ebe:	2b6b      	cmp	r3, #107	@ 0x6b
 8000ec0:	d105      	bne.n	8000ece <HAL_FDCAN_RxFifo0Callback+0xd6>
//				退出状态机
				RxState = 0;
 8000ec2:	4b0b      	ldr	r3, [pc, #44]	@ (8000ef0 <HAL_FDCAN_RxFifo0Callback+0xf8>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	701a      	strb	r2, [r3, #0]
				Emm_mode = 0;
 8000ec8:	4b08      	ldr	r3, [pc, #32]	@ (8000eec <HAL_FDCAN_RxFifo0Callback+0xf4>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	701a      	strb	r2, [r3, #0]
			}
		}
	}
//	memset(rxdata, 0x00, sizeof(rxdata));
	HAL_FDCAN_ActivateNotification(hfdcan,
 8000ece:	2200      	movs	r2, #0
 8000ed0:	2101      	movs	r1, #1
 8000ed2:	6878      	ldr	r0, [r7, #4]
 8000ed4:	f003 fa16 	bl	8004304 <HAL_FDCAN_ActivateNotification>
	FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0);

}
 8000ed8:	bf00      	nop
 8000eda:	3708      	adds	r7, #8
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	24000340 	.word	0x24000340
 8000ee4:	24000274 	.word	0x24000274
 8000ee8:	240002a0 	.word	0x240002a0
 8000eec:	2400029c 	.word	0x2400029c
 8000ef0:	24000348 	.word	0x24000348
 8000ef4:	2400029d 	.word	0x2400029d
 8000ef8:	24000349 	.word	0x24000349

08000efc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b087      	sub	sp, #28
 8000f00:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f02:	4b30      	ldr	r3, [pc, #192]	@ (8000fc4 <MX_GPIO_Init+0xc8>)
 8000f04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f08:	4a2e      	ldr	r2, [pc, #184]	@ (8000fc4 <MX_GPIO_Init+0xc8>)
 8000f0a:	f043 0310 	orr.w	r3, r3, #16
 8000f0e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f12:	4b2c      	ldr	r3, [pc, #176]	@ (8000fc4 <MX_GPIO_Init+0xc8>)
 8000f14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f18:	f003 0310 	and.w	r3, r3, #16
 8000f1c:	617b      	str	r3, [r7, #20]
 8000f1e:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f20:	4b28      	ldr	r3, [pc, #160]	@ (8000fc4 <MX_GPIO_Init+0xc8>)
 8000f22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f26:	4a27      	ldr	r2, [pc, #156]	@ (8000fc4 <MX_GPIO_Init+0xc8>)
 8000f28:	f043 0304 	orr.w	r3, r3, #4
 8000f2c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f30:	4b24      	ldr	r3, [pc, #144]	@ (8000fc4 <MX_GPIO_Init+0xc8>)
 8000f32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f36:	f003 0304 	and.w	r3, r3, #4
 8000f3a:	613b      	str	r3, [r7, #16]
 8000f3c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f3e:	4b21      	ldr	r3, [pc, #132]	@ (8000fc4 <MX_GPIO_Init+0xc8>)
 8000f40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f44:	4a1f      	ldr	r2, [pc, #124]	@ (8000fc4 <MX_GPIO_Init+0xc8>)
 8000f46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f4a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f4e:	4b1d      	ldr	r3, [pc, #116]	@ (8000fc4 <MX_GPIO_Init+0xc8>)
 8000f50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f58:	60fb      	str	r3, [r7, #12]
 8000f5a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f5c:	4b19      	ldr	r3, [pc, #100]	@ (8000fc4 <MX_GPIO_Init+0xc8>)
 8000f5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f62:	4a18      	ldr	r2, [pc, #96]	@ (8000fc4 <MX_GPIO_Init+0xc8>)
 8000f64:	f043 0301 	orr.w	r3, r3, #1
 8000f68:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f6c:	4b15      	ldr	r3, [pc, #84]	@ (8000fc4 <MX_GPIO_Init+0xc8>)
 8000f6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f72:	f003 0301 	and.w	r3, r3, #1
 8000f76:	60bb      	str	r3, [r7, #8]
 8000f78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f7a:	4b12      	ldr	r3, [pc, #72]	@ (8000fc4 <MX_GPIO_Init+0xc8>)
 8000f7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f80:	4a10      	ldr	r2, [pc, #64]	@ (8000fc4 <MX_GPIO_Init+0xc8>)
 8000f82:	f043 0302 	orr.w	r3, r3, #2
 8000f86:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f8a:	4b0e      	ldr	r3, [pc, #56]	@ (8000fc4 <MX_GPIO_Init+0xc8>)
 8000f8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f90:	f003 0302 	and.w	r3, r3, #2
 8000f94:	607b      	str	r3, [r7, #4]
 8000f96:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f98:	4b0a      	ldr	r3, [pc, #40]	@ (8000fc4 <MX_GPIO_Init+0xc8>)
 8000f9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f9e:	4a09      	ldr	r2, [pc, #36]	@ (8000fc4 <MX_GPIO_Init+0xc8>)
 8000fa0:	f043 0308 	orr.w	r3, r3, #8
 8000fa4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fa8:	4b06      	ldr	r3, [pc, #24]	@ (8000fc4 <MX_GPIO_Init+0xc8>)
 8000faa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fae:	f003 0308 	and.w	r3, r3, #8
 8000fb2:	603b      	str	r3, [r7, #0]
 8000fb4:	683b      	ldr	r3, [r7, #0]

}
 8000fb6:	bf00      	nop
 8000fb8:	371c      	adds	r7, #28
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop
 8000fc4:	58024400 	.word	0x58024400

08000fc8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */

	/* USER CODE END 1 */

	/* MPU Configuration--------------------------------------------------------*/
	MPU_Config();
 8000fcc:	f000 fb5e 	bl	800168c <MPU_Config>

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000fd0:	f001 fd82 	bl	8002ad8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000fd4:	f000 f9a0 	bl	8001318 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */
	//  USART10 用于Action串口转发,暂时使用无线串口将数据转发到主机
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000fd8:	f7ff ff90 	bl	8000efc <MX_GPIO_Init>
	MX_FDCAN1_Init();
 8000fdc:	f7ff fd5c 	bl	8000a98 <MX_FDCAN1_Init>
	MX_UART4_Init();
 8000fe0:	f000 fece 	bl	8001d80 <MX_UART4_Init>
	MX_UART5_Init();
 8000fe4:	f000 ff18 	bl	8001e18 <MX_UART5_Init>
	MX_UART9_Init();
 8000fe8:	f000 fffa 	bl	8001fe0 <MX_UART9_Init>
	MX_USART6_UART_Init();
 8000fec:	f001 f916 	bl	800221c <MX_USART6_UART_Init>
	MX_USART10_UART_Init();
 8000ff0:	f001 f960 	bl	80022b4 <MX_USART10_UART_Init>
	MX_TIM2_Init();
 8000ff4:	f000 fd72 	bl	8001adc <MX_TIM2_Init>
	MX_USART3_UART_Init();
 8000ff8:	f001 f8c4 	bl	8002184 <MX_USART3_UART_Init>
	MX_UART7_Init();
 8000ffc:	f000 ff58 	bl	8001eb0 <MX_UART7_Init>
	MX_UART8_Init();
 8001000:	f000 ffa2 	bl	8001f48 <MX_UART8_Init>
	MX_TIM3_Init();
 8001004:	f000 fdb8 	bl	8001b78 <MX_TIM3_Init>
	MX_TIM5_Init();
 8001008:	f000 fe06 	bl	8001c18 <MX_TIM5_Init>
	MX_USART2_UART_Init();
 800100c:	f001 f834 	bl	8002078 <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */

//	清除定时器初始化过程中的更新中断标志，
	__HAL_TIM_CLEAR_IT(&htim2, TIM_IT_UPDATE);
 8001010:	4ba1      	ldr	r3, [pc, #644]	@ (8001298 <main+0x2d0>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f06f 0201 	mvn.w	r2, #1
 8001018:	611a      	str	r2, [r3, #16]
//	使能定时器中断
	HAL_TIM_Base_Start_IT(&htim2);
 800101a:	489f      	ldr	r0, [pc, #636]	@ (8001298 <main+0x2d0>)
 800101c:	f006 fe4a 	bl	8007cb4 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim5);
 8001020:	489e      	ldr	r0, [pc, #632]	@ (800129c <main+0x2d4>)
 8001022:	f006 fe47 	bl	8007cb4 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim3);
 8001026:	489e      	ldr	r0, [pc, #632]	@ (80012a0 <main+0x2d8>)
 8001028:	f006 fe44 	bl	8007cb4 <HAL_TIM_Base_Start_IT>
//	使能串口接收中断
	HAL_UART_Receive_IT(&huart4, &Screen_data, 1);
 800102c:	2201      	movs	r2, #1
 800102e:	499d      	ldr	r1, [pc, #628]	@ (80012a4 <main+0x2dc>)
 8001030:	489d      	ldr	r0, [pc, #628]	@ (80012a8 <main+0x2e0>)
 8001032:	f007 fc9d 	bl	8008970 <HAL_UART_Receive_IT>
//	HWT101预留中断接口
	HAL_UART_Receive_IT(&huart2, &HwtData, 1);
 8001036:	2201      	movs	r2, #1
 8001038:	499c      	ldr	r1, [pc, #624]	@ (80012ac <main+0x2e4>)
 800103a:	489d      	ldr	r0, [pc, #628]	@ (80012b0 <main+0x2e8>)
 800103c:	f007 fc98 	bl	8008970 <HAL_UART_Receive_IT>
//	TX2通信接收中断
	HAL_UART_Receive_IT(&huart10, (uint8_t*) &aRxBuffer, 1);
 8001040:	2201      	movs	r2, #1
 8001042:	499c      	ldr	r1, [pc, #624]	@ (80012b4 <main+0x2ec>)
 8001044:	489c      	ldr	r0, [pc, #624]	@ (80012b8 <main+0x2f0>)
 8001046:	f007 fc93 	bl	8008970 <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart9, &data, 1);
 800104a:	2201      	movs	r2, #1
 800104c:	499b      	ldr	r1, [pc, #620]	@ (80012bc <main+0x2f4>)
 800104e:	489c      	ldr	r0, [pc, #624]	@ (80012c0 <main+0x2f8>)
 8001050:	f007 fc8e 	bl	8008970 <HAL_UART_Receive_IT>
//	HAL_UART_Receive_IT(&huart10, &Joy_data, 1);

	PID_Init();
 8001054:	f00b f812 	bl	800c07c <PID_Init>
//				Check_Joydata();
//				HAL_Delay(100);
//			}
//		}

		if(Ready_Flag == 1)
 8001058:	4b9a      	ldr	r3, [pc, #616]	@ (80012c4 <main+0x2fc>)
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	2b01      	cmp	r3, #1
 800105e:	d104      	bne.n	800106a <main+0xa2>
		{
			Ready_Flag = 0;
 8001060:	4b98      	ldr	r3, [pc, #608]	@ (80012c4 <main+0x2fc>)
 8001062:	2200      	movs	r2, #0
 8001064:	701a      	strb	r2, [r3, #0]
//			整定车身
			Check_Status();
 8001066:	f00c ff47 	bl	800def8 <Check_Status>
		}
		if (System_Flag == 1) {
 800106a:	4b97      	ldr	r3, [pc, #604]	@ (80012c8 <main+0x300>)
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	2b01      	cmp	r3, #1
 8001070:	d1f2      	bne.n	8001058 <main+0x90>
			System_Flag = 0;
 8001072:	4b95      	ldr	r3, [pc, #596]	@ (80012c8 <main+0x300>)
 8001074:	2200      	movs	r2, #0
 8001076:	701a      	strb	r2, [r3, #0]
//			向TX2发送字符串"e1f"
			HAL_UART_Transmit(&huart10, (uint8_t*) "e1f", sizeof("elf") - 1,0x1000);
 8001078:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800107c:	2203      	movs	r2, #3
 800107e:	4993      	ldr	r1, [pc, #588]	@ (80012cc <main+0x304>)
 8001080:	488d      	ldr	r0, [pc, #564]	@ (80012b8 <main+0x2f0>)
 8001082:	f007 fb1f 	bl	80086c4 <HAL_UART_Transmit>

//			Move_Left(50,50,8000);
///////////////////////////////////////////////////////////////////////////////////////////////////////////
			/***********************运行逻辑-状态机*************************/
			while (1) {
				switch (flag) {
 8001086:	4b92      	ldr	r3, [pc, #584]	@ (80012d0 <main+0x308>)
 8001088:	881b      	ldrh	r3, [r3, #0]
 800108a:	2b0d      	cmp	r3, #13
 800108c:	f200 80ff 	bhi.w	800128e <main+0x2c6>
 8001090:	a201      	add	r2, pc, #4	@ (adr r2, 8001098 <main+0xd0>)
 8001092:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001096:	bf00      	nop
 8001098:	080010d1 	.word	0x080010d1
 800109c:	080010d5 	.word	0x080010d5
 80010a0:	0800110d 	.word	0x0800110d
 80010a4:	0800113f 	.word	0x0800113f
 80010a8:	08001161 	.word	0x08001161
 80010ac:	08001181 	.word	0x08001181
 80010b0:	08001195 	.word	0x08001195
 80010b4:	080011c1 	.word	0x080011c1
 80010b8:	080011e1 	.word	0x080011e1
 80010bc:	0800120d 	.word	0x0800120d
 80010c0:	0800122f 	.word	0x0800122f
 80010c4:	0800124f 	.word	0x0800124f
 80010c8:	0800125f 	.word	0x0800125f
 80010cc:	0800127f 	.word	0x0800127f
				case 0:  //发车，进入扫码区
//					X轴建议移动到150左右
//					Move_TO_Saomaqu(2200, 7500);
					Start();    //5400处
 80010d0:	f00a fa92 	bl	800b5f8 <Start>
//					flag = 1;
//					break;
//					Drop_Location_jiang(200, 120, 4000);
				case 1:  //离开扫码区，进入原料区
//					物料理想点位 375
					Move_TO_yuanliaoqu(10500);
 80010d4:	ed9f 0a7f 	vldr	s0, [pc, #508]	@ 80012d4 <main+0x30c>
 80010d8:	f00b fd4a 	bl	800cb70 <Move_TO_yuanliaoqu>
//					X参考150 Y参考1430
					Move_Action_Nopid_Left_Ctrl(150, 1420);  //ACTION调整
 80010dc:	eddf 0a7e 	vldr	s1, [pc, #504]	@ 80012d8 <main+0x310>
 80010e0:	ed9f 0a7e 	vldr	s0, [pc, #504]	@ 80012dc <main+0x314>
 80010e4:	f00b fe1c 	bl	800cd20 <Move_Action_Nopid_Left_Ctrl>
//
					Move_Tx_Pid_Ctrl(tx_target, ty_target); //TX调整
 80010e8:	4b7d      	ldr	r3, [pc, #500]	@ (80012e0 <main+0x318>)
 80010ea:	edd3 7a00 	vldr	s15, [r3]
 80010ee:	4b7d      	ldr	r3, [pc, #500]	@ (80012e4 <main+0x31c>)
 80010f0:	ed93 7a00 	vldr	s14, [r3]
 80010f4:	eef0 0a47 	vmov.f32	s1, s14
 80010f8:	eeb0 0a67 	vmov.f32	s0, s15
 80010fc:	f00c fa30 	bl	800d560 <Move_Tx_Pid_Ctrl>
					Frist_Grab_Wuliao();
 8001100:	f00a fb4c 	bl	800b79c <Frist_Grab_Wuliao>
					flag = 2;
 8001104:	4b72      	ldr	r3, [pc, #456]	@ (80012d0 <main+0x308>)
 8001106:	2202      	movs	r2, #2
 8001108:	801a      	strh	r2, [r3, #0]
					break;
 800110a:	e0c3      	b.n	8001294 <main+0x2cc>

				case 2:

					Move_TO_jianzhi1(4500, 4335);
 800110c:	eddf 0a76 	vldr	s1, [pc, #472]	@ 80012e8 <main+0x320>
 8001110:	ed9f 0a76 	vldr	s0, [pc, #472]	@ 80012ec <main+0x324>
 8001114:	f00b fd42 	bl	800cb9c <Move_TO_jianzhi1>
					Drop_Location_jiang(50, 50, 11000);
 8001118:	f642 22f8 	movw	r2, #11000	@ 0x2af8
 800111c:	2132      	movs	r1, #50	@ 0x32
 800111e:	2032      	movs	r0, #50	@ 0x32
 8001120:	f00b fc88 	bl	800ca34 <Drop_Location_jiang>
					HAL_Delay(50);
 8001124:	2032      	movs	r0, #50	@ 0x32
 8001126:	f001 fd69 	bl	8002bfc <HAL_Delay>
					Move_Action_Nopid_Forward_Ctrl(160, 1070);
 800112a:	eddf 0a71 	vldr	s1, [pc, #452]	@ 80012f0 <main+0x328>
 800112e:	ed9f 0a71 	vldr	s0, [pc, #452]	@ 80012f4 <main+0x32c>
 8001132:	f00b ff55 	bl	800cfe0 <Move_Action_Nopid_Forward_Ctrl>
					flag = 3;
 8001136:	4b66      	ldr	r3, [pc, #408]	@ (80012d0 <main+0x308>)
 8001138:	2203      	movs	r2, #3
 800113a:	801a      	strh	r2, [r3, #0]
					break;
 800113c:	e0aa      	b.n	8001294 <main+0x2cc>
				case 3:    //暂存�?

					Move_TO_zancunqu(22000, 4335);
 800113e:	eddf 0a6a 	vldr	s1, [pc, #424]	@ 80012e8 <main+0x320>
 8001142:	ed9f 0a6d 	vldr	s0, [pc, #436]	@ 80012f8 <main+0x330>
 8001146:	f00b fd4e 	bl	800cbe6 <Move_TO_zancunqu>
					put_wuliao_to_circular_frist();
 800114a:	f00a fb85 	bl	800b858 <put_wuliao_to_circular_frist>
					put_wuliao_to_Car_frist();
 800114e:	f00a fc19 	bl	800b984 <put_wuliao_to_Car_frist>
					HAL_Delay(yanshi);
 8001152:	2032      	movs	r0, #50	@ 0x32
 8001154:	f001 fd52 	bl	8002bfc <HAL_Delay>
					flag = 4;
 8001158:	4b5d      	ldr	r3, [pc, #372]	@ (80012d0 <main+0x308>)
 800115a:	2204      	movs	r2, #4
 800115c:	801a      	strh	r2, [r3, #0]
					break;
 800115e:	e099      	b.n	8001294 <main+0x2cc>
				case 4:
					Move_TO_jianzhi2(9000, 4335);     //ACTION调整
 8001160:	eddf 0a61 	vldr	s1, [pc, #388]	@ 80012e8 <main+0x320>
 8001164:	ed9f 0a65 	vldr	s0, [pc, #404]	@ 80012fc <main+0x334>
 8001168:	f00b fd62 	bl	800cc30 <Move_TO_jianzhi2>
					Move_Action_Nopid_Forward_Ctrl(1870, 1860);
 800116c:	eddf 0a64 	vldr	s1, [pc, #400]	@ 8001300 <main+0x338>
 8001170:	ed9f 0a64 	vldr	s0, [pc, #400]	@ 8001304 <main+0x33c>
 8001174:	f00b ff34 	bl	800cfe0 <Move_Action_Nopid_Forward_Ctrl>
					flag = 5;
 8001178:	4b55      	ldr	r3, [pc, #340]	@ (80012d0 <main+0x308>)
 800117a:	2205      	movs	r2, #5
 800117c:	801a      	strh	r2, [r3, #0]
					break;
 800117e:	e089      	b.n	8001294 <main+0x2cc>
				case 5:       //粗加工区
					Move_TO_cujiagongqu(10000);
 8001180:	ed9f 0a61 	vldr	s0, [pc, #388]	@ 8001308 <main+0x340>
 8001184:	f00b fd79 	bl	800cc7a <Move_TO_cujiagongqu>
					put_wuliao_to_circular_second();
 8001188:	f00a fc92 	bl	800bab0 <put_wuliao_to_circular_second>
					flag = 6;
 800118c:	4b50      	ldr	r3, [pc, #320]	@ (80012d0 <main+0x308>)
 800118e:	2206      	movs	r2, #6
 8001190:	801a      	strh	r2, [r3, #0]
					break;
 8001192:	e07f      	b.n	8001294 <main+0x2cc>
				case 6:
					Move_TO_jianzhi3(9000, 4335);
 8001194:	eddf 0a54 	vldr	s1, [pc, #336]	@ 80012e8 <main+0x320>
 8001198:	ed9f 0a58 	vldr	s0, [pc, #352]	@ 80012fc <main+0x334>
 800119c:	f00b fd83 	bl	800cca6 <Move_TO_jianzhi3>
					Move_Action_Nopid_Left_Ctrl(170, 1860);
 80011a0:	eddf 0a57 	vldr	s1, [pc, #348]	@ 8001300 <main+0x338>
 80011a4:	ed9f 0a59 	vldr	s0, [pc, #356]	@ 800130c <main+0x344>
 80011a8:	f00b fdba 	bl	800cd20 <Move_Action_Nopid_Left_Ctrl>
					Drop_Location_jiang(50, 50, 11000);
 80011ac:	f642 22f8 	movw	r2, #11000	@ 0x2af8
 80011b0:	2132      	movs	r1, #50	@ 0x32
 80011b2:	2032      	movs	r0, #50	@ 0x32
 80011b4:	f00b fc3e 	bl	800ca34 <Drop_Location_jiang>
					flag = 7;
 80011b8:	4b45      	ldr	r3, [pc, #276]	@ (80012d0 <main+0x308>)
 80011ba:	2207      	movs	r2, #7
 80011bc:	801a      	strh	r2, [r3, #0]
					break;
 80011be:	e069      	b.n	8001294 <main+0x2cc>
				case 7:      //原料�?
					Move_TO_fanyuanliaoqu(4000);
 80011c0:	ed9f 0a53 	vldr	s0, [pc, #332]	@ 8001310 <main+0x348>
 80011c4:	f00b fd94 	bl	800ccf0 <Move_TO_fanyuanliaoqu>
					Move_Action_Nopid_Left_Ctrl(160, 1400);      //ACTION调整
 80011c8:	eddf 0a52 	vldr	s1, [pc, #328]	@ 8001314 <main+0x34c>
 80011cc:	ed9f 0a49 	vldr	s0, [pc, #292]	@ 80012f4 <main+0x32c>
 80011d0:	f00b fda6 	bl	800cd20 <Move_Action_Nopid_Left_Ctrl>
					Second_Run_Frist_Grab_Wuliao();
 80011d4:	f00a fd0a 	bl	800bbec <Second_Run_Frist_Grab_Wuliao>
					flag = 8;
 80011d8:	4b3d      	ldr	r3, [pc, #244]	@ (80012d0 <main+0x308>)
 80011da:	2208      	movs	r2, #8
 80011dc:	801a      	strh	r2, [r3, #0]
					break;
 80011de:	e059      	b.n	8001294 <main+0x2cc>
				case 8:
					Move_TO_jianzhi1(4500, 4335);
 80011e0:	eddf 0a41 	vldr	s1, [pc, #260]	@ 80012e8 <main+0x320>
 80011e4:	ed9f 0a41 	vldr	s0, [pc, #260]	@ 80012ec <main+0x324>
 80011e8:	f00b fcd8 	bl	800cb9c <Move_TO_jianzhi1>
					Drop_Location_jiang(50, 50, 11000);
 80011ec:	f642 22f8 	movw	r2, #11000	@ 0x2af8
 80011f0:	2132      	movs	r1, #50	@ 0x32
 80011f2:	2032      	movs	r0, #50	@ 0x32
 80011f4:	f00b fc1e 	bl	800ca34 <Drop_Location_jiang>
					Move_Action_Nopid_Forward_Ctrl(160, 1070);
 80011f8:	eddf 0a3d 	vldr	s1, [pc, #244]	@ 80012f0 <main+0x328>
 80011fc:	ed9f 0a3d 	vldr	s0, [pc, #244]	@ 80012f4 <main+0x32c>
 8001200:	f00b feee 	bl	800cfe0 <Move_Action_Nopid_Forward_Ctrl>
					flag = 9;
 8001204:	4b32      	ldr	r3, [pc, #200]	@ (80012d0 <main+0x308>)
 8001206:	2209      	movs	r2, #9
 8001208:	801a      	strh	r2, [r3, #0]
					break;
 800120a:	e043      	b.n	8001294 <main+0x2cc>
				case 9:    //暂存�?
					Move_TO_zancunqu(22000, 4335);
 800120c:	eddf 0a36 	vldr	s1, [pc, #216]	@ 80012e8 <main+0x320>
 8001210:	ed9f 0a39 	vldr	s0, [pc, #228]	@ 80012f8 <main+0x330>
 8001214:	f00b fce7 	bl	800cbe6 <Move_TO_zancunqu>
					Second_Run_put_wuliao_to_circular_frist();
 8001218:	f00a fdde 	bl	800bdd8 <Second_Run_put_wuliao_to_circular_frist>

					Second_Run_put_wuliao_to_Car_frist();
 800121c:	f00a fd46 	bl	800bcac <Second_Run_put_wuliao_to_Car_frist>
					HAL_Delay(yanshi);
 8001220:	2032      	movs	r0, #50	@ 0x32
 8001222:	f001 fceb 	bl	8002bfc <HAL_Delay>
					flag = 10;
 8001226:	4b2a      	ldr	r3, [pc, #168]	@ (80012d0 <main+0x308>)
 8001228:	220a      	movs	r2, #10
 800122a:	801a      	strh	r2, [r3, #0]
					break;
 800122c:	e032      	b.n	8001294 <main+0x2cc>
				case 10:
					Move_TO_jianzhi2(9000, 4335);     //ACTION调整
 800122e:	eddf 0a2e 	vldr	s1, [pc, #184]	@ 80012e8 <main+0x320>
 8001232:	ed9f 0a32 	vldr	s0, [pc, #200]	@ 80012fc <main+0x334>
 8001236:	f00b fcfb 	bl	800cc30 <Move_TO_jianzhi2>
					Move_Action_Nopid_Forward_Ctrl(1870, 1860);
 800123a:	eddf 0a31 	vldr	s1, [pc, #196]	@ 8001300 <main+0x338>
 800123e:	ed9f 0a31 	vldr	s0, [pc, #196]	@ 8001304 <main+0x33c>
 8001242:	f00b fecd 	bl	800cfe0 <Move_Action_Nopid_Forward_Ctrl>
					flag = 11;
 8001246:	4b22      	ldr	r3, [pc, #136]	@ (80012d0 <main+0x308>)
 8001248:	220b      	movs	r2, #11
 800124a:	801a      	strh	r2, [r3, #0]
					break;
 800124c:	e022      	b.n	8001294 <main+0x2cc>
				case 11:       //粗加工区
					Move_TO_cujiagongqu(10000);
 800124e:	ed9f 0a2e 	vldr	s0, [pc, #184]	@ 8001308 <main+0x340>
 8001252:	f00b fd12 	bl	800cc7a <Move_TO_cujiagongqu>

					flag = 12;
 8001256:	4b1e      	ldr	r3, [pc, #120]	@ (80012d0 <main+0x308>)
 8001258:	220c      	movs	r2, #12
 800125a:	801a      	strh	r2, [r3, #0]
					break;
 800125c:	e01a      	b.n	8001294 <main+0x2cc>
				case 12:
					Move_TO_jianzhi3(9000, 4335);
 800125e:	eddf 0a22 	vldr	s1, [pc, #136]	@ 80012e8 <main+0x320>
 8001262:	ed9f 0a26 	vldr	s0, [pc, #152]	@ 80012fc <main+0x334>
 8001266:	f00b fd1e 	bl	800cca6 <Move_TO_jianzhi3>
					Move_Action_Nopid_Left_Ctrl(170, 1860);
 800126a:	eddf 0a25 	vldr	s1, [pc, #148]	@ 8001300 <main+0x338>
 800126e:	ed9f 0a27 	vldr	s0, [pc, #156]	@ 800130c <main+0x344>
 8001272:	f00b fd55 	bl	800cd20 <Move_Action_Nopid_Left_Ctrl>
					flag = 13;
 8001276:	4b16      	ldr	r3, [pc, #88]	@ (80012d0 <main+0x308>)
 8001278:	220d      	movs	r2, #13
 800127a:	801a      	strh	r2, [r3, #0]
					break;
 800127c:	e00a      	b.n	8001294 <main+0x2cc>
				case 13:      //原料�?
					Move_TO_fanyuanliaoqu(22000);
 800127e:	ed9f 0a1e 	vldr	s0, [pc, #120]	@ 80012f8 <main+0x330>
 8001282:	f00b fd35 	bl	800ccf0 <Move_TO_fanyuanliaoqu>
					flag = 14;
 8001286:	4b12      	ldr	r3, [pc, #72]	@ (80012d0 <main+0x308>)
 8001288:	220e      	movs	r2, #14
 800128a:	801a      	strh	r2, [r3, #0]
					break;
 800128c:	e002      	b.n	8001294 <main+0x2cc>
				default:
					Move_Stop();
 800128e:	f00b fc59 	bl	800cb44 <Move_Stop>
					break;
 8001292:	bf00      	nop
				switch (flag) {
 8001294:	e6f7      	b.n	8001086 <main+0xbe>
 8001296:	bf00      	nop
 8001298:	2400048c 	.word	0x2400048c
 800129c:	24000524 	.word	0x24000524
 80012a0:	240004d8 	.word	0x240004d8
 80012a4:	2400034b 	.word	0x2400034b
 80012a8:	24000570 	.word	0x24000570
 80012ac:	2400034c 	.word	0x2400034c
 80012b0:	24000854 	.word	0x24000854
 80012b4:	2400034d 	.word	0x2400034d
 80012b8:	24000a10 	.word	0x24000a10
 80012bc:	2400034a 	.word	0x2400034a
 80012c0:	240007c0 	.word	0x240007c0
 80012c4:	24000cbf 	.word	0x24000cbf
 80012c8:	24000cbe 	.word	0x24000cbe
 80012cc:	08012d20 	.word	0x08012d20
 80012d0:	24000478 	.word	0x24000478
 80012d4:	46241000 	.word	0x46241000
 80012d8:	44b18000 	.word	0x44b18000
 80012dc:	43160000 	.word	0x43160000
 80012e0:	24000000 	.word	0x24000000
 80012e4:	24000004 	.word	0x24000004
 80012e8:	45877800 	.word	0x45877800
 80012ec:	458ca000 	.word	0x458ca000
 80012f0:	4485c000 	.word	0x4485c000
 80012f4:	43200000 	.word	0x43200000
 80012f8:	46abe000 	.word	0x46abe000
 80012fc:	460ca000 	.word	0x460ca000
 8001300:	44e88000 	.word	0x44e88000
 8001304:	44e9c000 	.word	0x44e9c000
 8001308:	461c4000 	.word	0x461c4000
 800130c:	432a0000 	.word	0x432a0000
 8001310:	457a0000 	.word	0x457a0000
 8001314:	44af0000 	.word	0x44af0000

08001318 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001318:	b580      	push	{r7, lr}
 800131a:	b09c      	sub	sp, #112	@ 0x70
 800131c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800131e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001322:	224c      	movs	r2, #76	@ 0x4c
 8001324:	2100      	movs	r1, #0
 8001326:	4618      	mov	r0, r3
 8001328:	f00e fc37 	bl	800fb9a <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800132c:	1d3b      	adds	r3, r7, #4
 800132e:	2220      	movs	r2, #32
 8001330:	2100      	movs	r1, #0
 8001332:	4618      	mov	r0, r3
 8001334:	f00e fc31 	bl	800fb9a <memset>

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001338:	2002      	movs	r0, #2
 800133a:	f003 ff01 	bl	8005140 <HAL_PWREx_ConfigSupply>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800133e:	2300      	movs	r3, #0
 8001340:	603b      	str	r3, [r7, #0]
 8001342:	4b2b      	ldr	r3, [pc, #172]	@ (80013f0 <SystemClock_Config+0xd8>)
 8001344:	699b      	ldr	r3, [r3, #24]
 8001346:	4a2a      	ldr	r2, [pc, #168]	@ (80013f0 <SystemClock_Config+0xd8>)
 8001348:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800134c:	6193      	str	r3, [r2, #24]
 800134e:	4b28      	ldr	r3, [pc, #160]	@ (80013f0 <SystemClock_Config+0xd8>)
 8001350:	699b      	ldr	r3, [r3, #24]
 8001352:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001356:	603b      	str	r3, [r7, #0]
 8001358:	683b      	ldr	r3, [r7, #0]

	while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {
 800135a:	bf00      	nop
 800135c:	4b24      	ldr	r3, [pc, #144]	@ (80013f0 <SystemClock_Config+0xd8>)
 800135e:	699b      	ldr	r3, [r3, #24]
 8001360:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001364:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001368:	d1f8      	bne.n	800135c <SystemClock_Config+0x44>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800136a:	2301      	movs	r3, #1
 800136c:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800136e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001372:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001374:	2302      	movs	r3, #2
 8001376:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001378:	2302      	movs	r3, #2
 800137a:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLM = 2;
 800137c:	2302      	movs	r3, #2
 800137e:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLN = 44;
 8001380:	232c      	movs	r3, #44	@ 0x2c
 8001382:	657b      	str	r3, [r7, #84]	@ 0x54
	RCC_OscInitStruct.PLL.PLLP = 1;
 8001384:	2301      	movs	r3, #1
 8001386:	65bb      	str	r3, [r7, #88]	@ 0x58
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8001388:	2302      	movs	r3, #2
 800138a:	65fb      	str	r3, [r7, #92]	@ 0x5c
	RCC_OscInitStruct.PLL.PLLR = 2;
 800138c:	2302      	movs	r3, #2
 800138e:	663b      	str	r3, [r7, #96]	@ 0x60
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001390:	230c      	movs	r3, #12
 8001392:	667b      	str	r3, [r7, #100]	@ 0x64
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001394:	2300      	movs	r3, #0
 8001396:	66bb      	str	r3, [r7, #104]	@ 0x68
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001398:	2300      	movs	r3, #0
 800139a:	66fb      	str	r3, [r7, #108]	@ 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800139c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013a0:	4618      	mov	r0, r3
 80013a2:	f003 ff07 	bl	80051b4 <HAL_RCC_OscConfig>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <SystemClock_Config+0x98>
		Error_Handler();
 80013ac:	f000 f99a 	bl	80016e4 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80013b0:	233f      	movs	r3, #63	@ 0x3f
 80013b2:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1
			| RCC_CLOCKTYPE_D1PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013b4:	2303      	movs	r3, #3
 80013b6:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80013b8:	2300      	movs	r3, #0
 80013ba:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80013bc:	2308      	movs	r3, #8
 80013be:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80013c0:	2340      	movs	r3, #64	@ 0x40
 80013c2:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80013c4:	2340      	movs	r3, #64	@ 0x40
 80013c6:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80013c8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80013cc:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80013ce:	2340      	movs	r3, #64	@ 0x40
 80013d0:	623b      	str	r3, [r7, #32]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK) {
 80013d2:	1d3b      	adds	r3, r7, #4
 80013d4:	2103      	movs	r1, #3
 80013d6:	4618      	mov	r0, r3
 80013d8:	f004 fac6 	bl	8005968 <HAL_RCC_ClockConfig>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <SystemClock_Config+0xce>
		Error_Handler();
 80013e2:	f000 f97f 	bl	80016e4 <Error_Handler>
	}
}
 80013e6:	bf00      	nop
 80013e8:	3770      	adds	r7, #112	@ 0x70
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	58024800 	.word	0x58024800

080013f4 <__io_putchar>:

/* USER CODE BEGIN 4 */
PUTCHAR_PROTOTYPE {
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart4, (uint8_t*) &ch, 1, 0xFFFF);
 80013fc:	1d39      	adds	r1, r7, #4
 80013fe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001402:	2201      	movs	r2, #1
 8001404:	4803      	ldr	r0, [pc, #12]	@ (8001414 <__io_putchar+0x20>)
 8001406:	f007 f95d 	bl	80086c4 <HAL_UART_Transmit>
	return ch;
 800140a:	687b      	ldr	r3, [r7, #4]
}
 800140c:	4618      	mov	r0, r3
 800140e:	3708      	adds	r7, #8
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	24000570 	.word	0x24000570

08001418 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001418:	b580      	push	{r7, lr}
 800141a:	b08a      	sub	sp, #40	@ 0x28
 800141c:	af04      	add	r7, sp, #16
 800141e:	6078      	str	r0, [r7, #4]
	if (huart->Instance == UART9)                          // 判断中断源
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a50      	ldr	r2, [pc, #320]	@ (8001568 <HAL_UART_RxCpltCallback+0x150>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d10a      	bne.n	8001440 <HAL_UART_RxCpltCallback+0x28>
	{
		Data_Analyse(data);                                // 处理Action数据
 800142a:	4b50      	ldr	r3, [pc, #320]	@ (800156c <HAL_UART_RxCpltCallback+0x154>)
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	4618      	mov	r0, r3
 8001430:	f009 fef2 	bl	800b218 <Data_Analyse>
		HAL_UART_Receive_IT(&huart9, &data, 1);            // 继续中断回调
 8001434:	2201      	movs	r2, #1
 8001436:	494d      	ldr	r1, [pc, #308]	@ (800156c <HAL_UART_RxCpltCallback+0x154>)
 8001438:	484d      	ldr	r0, [pc, #308]	@ (8001570 <HAL_UART_RxCpltCallback+0x158>)
 800143a:	f007 fa99 	bl	8008970 <HAL_UART_Receive_IT>
 800143e:	e090      	b.n	8001562 <HAL_UART_RxCpltCallback+0x14a>

	} else if (huart->Instance == UART4)                   // 判断中断源
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a4b      	ldr	r2, [pc, #300]	@ (8001574 <HAL_UART_RxCpltCallback+0x15c>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d10a      	bne.n	8001460 <HAL_UART_RxCpltCallback+0x48>
	{
		Check_Flag(Screen_data);                       	   // 处理串口屏数据
 800144a:	4b4b      	ldr	r3, [pc, #300]	@ (8001578 <HAL_UART_RxCpltCallback+0x160>)
 800144c:	781b      	ldrb	r3, [r3, #0]
 800144e:	4618      	mov	r0, r3
 8001450:	f00c fcba 	bl	800ddc8 <Check_Flag>
		HAL_UART_Receive_IT(&huart4, &Screen_data, 1);     // 继续中断回调
 8001454:	2201      	movs	r2, #1
 8001456:	4948      	ldr	r1, [pc, #288]	@ (8001578 <HAL_UART_RxCpltCallback+0x160>)
 8001458:	4848      	ldr	r0, [pc, #288]	@ (800157c <HAL_UART_RxCpltCallback+0x164>)
 800145a:	f007 fa89 	bl	8008970 <HAL_UART_Receive_IT>
 800145e:	e080      	b.n	8001562 <HAL_UART_RxCpltCallback+0x14a>
	}

	else if (huart->Instance == USART10) {
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a46      	ldr	r2, [pc, #280]	@ (8001580 <HAL_UART_RxCpltCallback+0x168>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d17b      	bne.n	8001562 <HAL_UART_RxCpltCallback+0x14a>
		//static uint8_t RxState = 0;

		RxBuffer[Uart10_Rx_Cnt++] = aRxBuffer;
 800146a:	4b46      	ldr	r3, [pc, #280]	@ (8001584 <HAL_UART_RxCpltCallback+0x16c>)
 800146c:	781b      	ldrb	r3, [r3, #0]
 800146e:	1c5a      	adds	r2, r3, #1
 8001470:	b2d1      	uxtb	r1, r2
 8001472:	4a44      	ldr	r2, [pc, #272]	@ (8001584 <HAL_UART_RxCpltCallback+0x16c>)
 8001474:	7011      	strb	r1, [r2, #0]
 8001476:	461a      	mov	r2, r3
 8001478:	4b43      	ldr	r3, [pc, #268]	@ (8001588 <HAL_UART_RxCpltCallback+0x170>)
 800147a:	7819      	ldrb	r1, [r3, #0]
 800147c:	4b43      	ldr	r3, [pc, #268]	@ (800158c <HAL_UART_RxCpltCallback+0x174>)
 800147e:	5499      	strb	r1, [r3, r2]
			memset(RxBuffer, 0, sizeof(RxBuffer));
			Uart10_Rx_Cnt = 0;
			return;
		}

		if (aRxBuffer == 'd') { // 如果包尾是'd'，说明是物料和圆环点位数据
 8001480:	4b41      	ldr	r3, [pc, #260]	@ (8001588 <HAL_UART_RxCpltCallback+0x170>)
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	2b64      	cmp	r3, #100	@ 0x64
 8001486:	d12e      	bne.n	80014e6 <HAL_UART_RxCpltCallback+0xce>
			char *start = strchr(RxBuffer, 'a');
 8001488:	2161      	movs	r1, #97	@ 0x61
 800148a:	4840      	ldr	r0, [pc, #256]	@ (800158c <HAL_UART_RxCpltCallback+0x174>)
 800148c:	f00e fb8d 	bl	800fbaa <strchr>
 8001490:	6178      	str	r0, [r7, #20]
			char *end = strchr(RxBuffer, 'd');
 8001492:	2164      	movs	r1, #100	@ 0x64
 8001494:	483d      	ldr	r0, [pc, #244]	@ (800158c <HAL_UART_RxCpltCallback+0x174>)
 8001496:	f00e fb88 	bl	800fbaa <strchr>
 800149a:	6138      	str	r0, [r7, #16]

			if (start != NULL && end != NULL && end > start) {
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d021      	beq.n	80014e6 <HAL_UART_RxCpltCallback+0xce>
 80014a2:	693b      	ldr	r3, [r7, #16]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d01e      	beq.n	80014e6 <HAL_UART_RxCpltCallback+0xce>
 80014a8:	693a      	ldr	r2, [r7, #16]
 80014aa:	697b      	ldr	r3, [r7, #20]
 80014ac:	429a      	cmp	r2, r3
 80014ae:	d91a      	bls.n	80014e6 <HAL_UART_RxCpltCallback+0xce>
				*end = '\0';
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	2200      	movs	r2, #0
 80014b4:	701a      	strb	r2, [r3, #0]
				if (sscanf(start + 1, "%f,%f,%d", &x, &y, &colour) == 3) {
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	1c58      	adds	r0, r3, #1
 80014ba:	4b35      	ldr	r3, [pc, #212]	@ (8001590 <HAL_UART_RxCpltCallback+0x178>)
 80014bc:	9300      	str	r3, [sp, #0]
 80014be:	4b35      	ldr	r3, [pc, #212]	@ (8001594 <HAL_UART_RxCpltCallback+0x17c>)
 80014c0:	4a35      	ldr	r2, [pc, #212]	@ (8001598 <HAL_UART_RxCpltCallback+0x180>)
 80014c2:	4936      	ldr	r1, [pc, #216]	@ (800159c <HAL_UART_RxCpltCallback+0x184>)
 80014c4:	f00e fafa 	bl	800fabc <siscanf>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b03      	cmp	r3, #3
 80014cc:	d102      	bne.n	80014d4 <HAL_UART_RxCpltCallback+0xbc>
					// 数据解析成功
					Point_Flag = 1;
 80014ce:	4b34      	ldr	r3, [pc, #208]	@ (80015a0 <HAL_UART_RxCpltCallback+0x188>)
 80014d0:	2201      	movs	r2, #1
 80014d2:	701a      	strb	r2, [r3, #0]
				}

				// 清空缓冲区
				memset(RxBuffer, 0, sizeof(RxBuffer));
 80014d4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80014d8:	2100      	movs	r1, #0
 80014da:	482c      	ldr	r0, [pc, #176]	@ (800158c <HAL_UART_RxCpltCallback+0x174>)
 80014dc:	f00e fb5d 	bl	800fb9a <memset>
				Uart10_Rx_Cnt = 0;
 80014e0:	4b28      	ldr	r3, [pc, #160]	@ (8001584 <HAL_UART_RxCpltCallback+0x16c>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	701a      	strb	r2, [r3, #0]
			}
		}

		if (aRxBuffer == 'b') { // 如果包尾是'b'，说明是二维码数据
 80014e6:	4b28      	ldr	r3, [pc, #160]	@ (8001588 <HAL_UART_RxCpltCallback+0x170>)
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	2b62      	cmp	r3, #98	@ 0x62
 80014ec:	d134      	bne.n	8001558 <HAL_UART_RxCpltCallback+0x140>
			char *start = strchr(RxBuffer, 'c');
 80014ee:	2163      	movs	r1, #99	@ 0x63
 80014f0:	4826      	ldr	r0, [pc, #152]	@ (800158c <HAL_UART_RxCpltCallback+0x174>)
 80014f2:	f00e fb5a 	bl	800fbaa <strchr>
 80014f6:	60f8      	str	r0, [r7, #12]
			char *end = strchr(RxBuffer, 'b');
 80014f8:	2162      	movs	r1, #98	@ 0x62
 80014fa:	4824      	ldr	r0, [pc, #144]	@ (800158c <HAL_UART_RxCpltCallback+0x174>)
 80014fc:	f00e fb55 	bl	800fbaa <strchr>
 8001500:	60b8      	str	r0, [r7, #8]

			if (start != NULL && end != NULL && end > start) {
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d027      	beq.n	8001558 <HAL_UART_RxCpltCallback+0x140>
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d024      	beq.n	8001558 <HAL_UART_RxCpltCallback+0x140>
 800150e:	68ba      	ldr	r2, [r7, #8]
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	429a      	cmp	r2, r3
 8001514:	d920      	bls.n	8001558 <HAL_UART_RxCpltCallback+0x140>
				*end = '\0';
 8001516:	68bb      	ldr	r3, [r7, #8]
 8001518:	2200      	movs	r2, #0
 800151a:	701a      	strb	r2, [r3, #0]
//				for (int i = 0; i < 6; i++) {
//					if (sscanf(start +1+ i, "%d", &QR_data[i])) {
				if (sscanf(start + 1, "%d,%d,%d,%d,%d,%d", &QR_data[0],
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	1c58      	adds	r0, r3, #1
 8001520:	4b20      	ldr	r3, [pc, #128]	@ (80015a4 <HAL_UART_RxCpltCallback+0x18c>)
 8001522:	9303      	str	r3, [sp, #12]
 8001524:	4b20      	ldr	r3, [pc, #128]	@ (80015a8 <HAL_UART_RxCpltCallback+0x190>)
 8001526:	9302      	str	r3, [sp, #8]
 8001528:	4b20      	ldr	r3, [pc, #128]	@ (80015ac <HAL_UART_RxCpltCallback+0x194>)
 800152a:	9301      	str	r3, [sp, #4]
 800152c:	4b20      	ldr	r3, [pc, #128]	@ (80015b0 <HAL_UART_RxCpltCallback+0x198>)
 800152e:	9300      	str	r3, [sp, #0]
 8001530:	4b20      	ldr	r3, [pc, #128]	@ (80015b4 <HAL_UART_RxCpltCallback+0x19c>)
 8001532:	4a21      	ldr	r2, [pc, #132]	@ (80015b8 <HAL_UART_RxCpltCallback+0x1a0>)
 8001534:	4921      	ldr	r1, [pc, #132]	@ (80015bc <HAL_UART_RxCpltCallback+0x1a4>)
 8001536:	f00e fac1 	bl	800fabc <siscanf>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d002      	beq.n	8001546 <HAL_UART_RxCpltCallback+0x12e>
						&QR_data[1], &QR_data[2], &QR_data[3], &QR_data[4],
						&QR_data[5])) {
					// 数据解析成功
//						if(i==5) QR_Flag =  1;
					QR_Flag = 1;
 8001540:	4b1f      	ldr	r3, [pc, #124]	@ (80015c0 <HAL_UART_RxCpltCallback+0x1a8>)
 8001542:	2201      	movs	r2, #1
 8001544:	601a      	str	r2, [r3, #0]
				}
//				}
				// 清空缓冲区
				memset(RxBuffer, 0, sizeof(RxBuffer));
 8001546:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800154a:	2100      	movs	r1, #0
 800154c:	480f      	ldr	r0, [pc, #60]	@ (800158c <HAL_UART_RxCpltCallback+0x174>)
 800154e:	f00e fb24 	bl	800fb9a <memset>
				Uart10_Rx_Cnt = 0;
 8001552:	4b0c      	ldr	r3, [pc, #48]	@ (8001584 <HAL_UART_RxCpltCallback+0x16c>)
 8001554:	2200      	movs	r2, #0
 8001556:	701a      	strb	r2, [r3, #0]
			}
		}
		// 重新启动接收
		HAL_UART_Receive_IT(&huart10, (uint8_t*) &aRxBuffer, 1);
 8001558:	2201      	movs	r2, #1
 800155a:	490b      	ldr	r1, [pc, #44]	@ (8001588 <HAL_UART_RxCpltCallback+0x170>)
 800155c:	4819      	ldr	r0, [pc, #100]	@ (80015c4 <HAL_UART_RxCpltCallback+0x1ac>)
 800155e:	f007 fa07 	bl	8008970 <HAL_UART_Receive_IT>
//	else if (huart->Instance == USART10)                            // 判断中断
//	{
//		Recive_Joydata(Joy_data);                             	// 处理Joy_data数据
//		HAL_UART_Receive_IT(&huart10, &Joy_data, 1);       // 继续中断回调
//	}
}
 8001562:	3718      	adds	r7, #24
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	40011800 	.word	0x40011800
 800156c:	2400034a 	.word	0x2400034a
 8001570:	240007c0 	.word	0x240007c0
 8001574:	40004c00 	.word	0x40004c00
 8001578:	2400034b 	.word	0x2400034b
 800157c:	24000570 	.word	0x24000570
 8001580:	40011c00 	.word	0x40011c00
 8001584:	24000450 	.word	0x24000450
 8001588:	2400034d 	.word	0x2400034d
 800158c:	24000350 	.word	0x24000350
 8001590:	2400047c 	.word	0x2400047c
 8001594:	24000458 	.word	0x24000458
 8001598:	24000454 	.word	0x24000454
 800159c:	08012d24 	.word	0x08012d24
 80015a0:	2400045c 	.word	0x2400045c
 80015a4:	24000474 	.word	0x24000474
 80015a8:	24000470 	.word	0x24000470
 80015ac:	2400046c 	.word	0x2400046c
 80015b0:	24000468 	.word	0x24000468
 80015b4:	24000464 	.word	0x24000464
 80015b8:	24000460 	.word	0x24000460
 80015bc:	08012d30 	.word	0x08012d30
 80015c0:	24000484 	.word	0x24000484
 80015c4:	24000a10 	.word	0x24000a10

080015c8 <HAL_TIM_PeriodElapsedCallback>:
extern uint16_t time_tx;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
	if (htim == &htim2) {
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	4a23      	ldr	r2, [pc, #140]	@ (8001660 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d106      	bne.n	80015e6 <HAL_TIM_PeriodElapsedCallback+0x1e>

//		X_out = X_Ctrl(&XPID, x_goal);
//		Y_out = Y_Ctrl(&YPID, y_goal);
//		A_out = A_Ctrl(&APID, a_goal);
		Action_Show();
 80015d8:	f00c fac0 	bl	800db5c <Action_Show>
		QR_Show();
 80015dc:	f00c fb3a 	bl	800dc54 <QR_Show>
		Point_Show();
 80015e0:	f00c fb74 	bl	800dccc <Point_Show>
		if (time5_jiancha != 0)
			time5_jiancha--;


	}
}
 80015e4:	e037      	b.n	8001656 <HAL_TIM_PeriodElapsedCallback+0x8e>
	} else if (htim == &htim3) {
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	4a1e      	ldr	r2, [pc, #120]	@ (8001664 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d126      	bne.n	800163c <HAL_TIM_PeriodElapsedCallback+0x74>
		TX_X_out = Tx_X_Ctrl(&TXPID, tx_target);
 80015ee:	4b1e      	ldr	r3, [pc, #120]	@ (8001668 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80015f0:	edd3 7a00 	vldr	s15, [r3]
 80015f4:	eeb0 0a67 	vmov.f32	s0, s15
 80015f8:	481c      	ldr	r0, [pc, #112]	@ (800166c <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80015fa:	f00a fe33 	bl	800c264 <Tx_X_Ctrl>
 80015fe:	4603      	mov	r3, r0
 8001600:	ee07 3a90 	vmov	s15, r3
 8001604:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001608:	4b19      	ldr	r3, [pc, #100]	@ (8001670 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800160a:	edc3 7a00 	vstr	s15, [r3]
		TX_Y_out = Tx_Y_Ctrl(&TYPID, ty_target);
 800160e:	4b19      	ldr	r3, [pc, #100]	@ (8001674 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001610:	edd3 7a00 	vldr	s15, [r3]
 8001614:	eeb0 0a67 	vmov.f32	s0, s15
 8001618:	4817      	ldr	r0, [pc, #92]	@ (8001678 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 800161a:	f00a fec9 	bl	800c3b0 <Tx_Y_Ctrl>
 800161e:	4603      	mov	r3, r0
 8001620:	ee07 3a90 	vmov	s15, r3
 8001624:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001628:	4b14      	ldr	r3, [pc, #80]	@ (800167c <HAL_TIM_PeriodElapsedCallback+0xb4>)
 800162a:	edc3 7a00 	vstr	s15, [r3]
		time_tx++;
 800162e:	4b14      	ldr	r3, [pc, #80]	@ (8001680 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001630:	881b      	ldrh	r3, [r3, #0]
 8001632:	3301      	adds	r3, #1
 8001634:	b29a      	uxth	r2, r3
 8001636:	4b12      	ldr	r3, [pc, #72]	@ (8001680 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001638:	801a      	strh	r2, [r3, #0]
}
 800163a:	e00c      	b.n	8001656 <HAL_TIM_PeriodElapsedCallback+0x8e>
	} else if (htim == &htim5) {
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	4a11      	ldr	r2, [pc, #68]	@ (8001684 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001640:	4293      	cmp	r3, r2
 8001642:	d108      	bne.n	8001656 <HAL_TIM_PeriodElapsedCallback+0x8e>
		if (time5_jiancha != 0)
 8001644:	4b10      	ldr	r3, [pc, #64]	@ (8001688 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d004      	beq.n	8001656 <HAL_TIM_PeriodElapsedCallback+0x8e>
			time5_jiancha--;
 800164c:	4b0e      	ldr	r3, [pc, #56]	@ (8001688 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	3b01      	subs	r3, #1
 8001652:	4a0d      	ldr	r2, [pc, #52]	@ (8001688 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8001654:	6013      	str	r3, [r2, #0]
}
 8001656:	bf00      	nop
 8001658:	3708      	adds	r7, #8
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	2400048c 	.word	0x2400048c
 8001664:	240004d8 	.word	0x240004d8
 8001668:	24000000 	.word	0x24000000
 800166c:	24000b7c 	.word	0x24000b7c
 8001670:	24000bd4 	.word	0x24000bd4
 8001674:	24000004 	.word	0x24000004
 8001678:	24000ba8 	.word	0x24000ba8
 800167c:	24000bd8 	.word	0x24000bd8
 8001680:	24000be0 	.word	0x24000be0
 8001684:	24000524 	.word	0x24000524
 8001688:	24000bdc 	.word	0x24000bdc

0800168c <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void) {
 800168c:	b580      	push	{r7, lr}
 800168e:	b084      	sub	sp, #16
 8001690:	af00      	add	r7, sp, #0
	MPU_Region_InitTypeDef MPU_InitStruct = { 0 };
 8001692:	463b      	mov	r3, r7
 8001694:	2200      	movs	r2, #0
 8001696:	601a      	str	r2, [r3, #0]
 8001698:	605a      	str	r2, [r3, #4]
 800169a:	609a      	str	r2, [r3, #8]
 800169c:	60da      	str	r2, [r3, #12]

	/* Disables the MPU */
	HAL_MPU_Disable();
 800169e:	f001 fbe1 	bl	8002e64 <HAL_MPU_Disable>

	/** Initializes and configures the Region and the memory to be protected
	 */
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80016a2:	2301      	movs	r3, #1
 80016a4:	703b      	strb	r3, [r7, #0]
	MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80016a6:	2300      	movs	r3, #0
 80016a8:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.BaseAddress = 0x0;
 80016aa:	2300      	movs	r3, #0
 80016ac:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80016ae:	231f      	movs	r3, #31
 80016b0:	723b      	strb	r3, [r7, #8]
	MPU_InitStruct.SubRegionDisable = 0x87;
 80016b2:	2387      	movs	r3, #135	@ 0x87
 80016b4:	727b      	strb	r3, [r7, #9]
	MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80016b6:	2300      	movs	r3, #0
 80016b8:	72bb      	strb	r3, [r7, #10]
	MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80016ba:	2300      	movs	r3, #0
 80016bc:	72fb      	strb	r3, [r7, #11]
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80016be:	2301      	movs	r3, #1
 80016c0:	733b      	strb	r3, [r7, #12]
	MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80016c2:	2301      	movs	r3, #1
 80016c4:	737b      	strb	r3, [r7, #13]
	MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80016c6:	2300      	movs	r3, #0
 80016c8:	73bb      	strb	r3, [r7, #14]
	MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80016ca:	2300      	movs	r3, #0
 80016cc:	73fb      	strb	r3, [r7, #15]

	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80016ce:	463b      	mov	r3, r7
 80016d0:	4618      	mov	r0, r3
 80016d2:	f001 fbff 	bl	8002ed4 <HAL_MPU_ConfigRegion>
	/* Enables the MPU */
	HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80016d6:	2004      	movs	r0, #4
 80016d8:	f001 fbdc 	bl	8002e94 <HAL_MPU_Enable>

}
 80016dc:	bf00      	nop
 80016de:	3710      	adds	r7, #16
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}

080016e4 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016e8:	b672      	cpsid	i
}
 80016ea:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80016ec:	bf00      	nop
 80016ee:	e7fd      	b.n	80016ec <Error_Handler+0x8>

080016f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016f6:	4b0a      	ldr	r3, [pc, #40]	@ (8001720 <HAL_MspInit+0x30>)
 80016f8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80016fc:	4a08      	ldr	r2, [pc, #32]	@ (8001720 <HAL_MspInit+0x30>)
 80016fe:	f043 0302 	orr.w	r3, r3, #2
 8001702:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001706:	4b06      	ldr	r3, [pc, #24]	@ (8001720 <HAL_MspInit+0x30>)
 8001708:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800170c:	f003 0302 	and.w	r3, r3, #2
 8001710:	607b      	str	r3, [r7, #4]
 8001712:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001714:	bf00      	nop
 8001716:	370c      	adds	r7, #12
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr
 8001720:	58024400 	.word	0x58024400

08001724 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 8001728:	bf00      	nop
 800172a:	e7fd      	b.n	8001728 <NMI_Handler+0x4>

0800172c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001730:	bf00      	nop
 8001732:	e7fd      	b.n	8001730 <HardFault_Handler+0x4>

08001734 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001738:	bf00      	nop
 800173a:	e7fd      	b.n	8001738 <MemManage_Handler+0x4>

0800173c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001740:	bf00      	nop
 8001742:	e7fd      	b.n	8001740 <BusFault_Handler+0x4>

08001744 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001748:	bf00      	nop
 800174a:	e7fd      	b.n	8001748 <UsageFault_Handler+0x4>

0800174c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001750:	bf00      	nop
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr

0800175a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800175a:	b480      	push	{r7}
 800175c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800175e:	bf00      	nop
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr

08001768 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800176c:	bf00      	nop
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr

08001776 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001776:	b580      	push	{r7, lr}
 8001778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800177a:	f001 fa1f 	bl	8002bbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800177e:	bf00      	nop
 8001780:	bd80      	pop	{r7, pc}
	...

08001784 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8001788:	4802      	ldr	r0, [pc, #8]	@ (8001794 <FDCAN1_IT0_IRQHandler+0x10>)
 800178a:	f002 fe35 	bl	80043f8 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 800178e:	bf00      	nop
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	240002a0 	.word	0x240002a0

08001798 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800179c:	4802      	ldr	r0, [pc, #8]	@ (80017a8 <TIM2_IRQHandler+0x10>)
 800179e:	f006 fb0f 	bl	8007dc0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80017a2:	bf00      	nop
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	2400048c 	.word	0x2400048c

080017ac <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80017b0:	4802      	ldr	r0, [pc, #8]	@ (80017bc <TIM3_IRQHandler+0x10>)
 80017b2:	f006 fb05 	bl	8007dc0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80017b6:	bf00      	nop
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	240004d8 	.word	0x240004d8

080017c0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80017c4:	4802      	ldr	r0, [pc, #8]	@ (80017d0 <USART2_IRQHandler+0x10>)
 80017c6:	f007 f91f 	bl	8008a08 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80017ca:	bf00      	nop
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	24000854 	.word	0x24000854

080017d4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80017d8:	4802      	ldr	r0, [pc, #8]	@ (80017e4 <USART3_IRQHandler+0x10>)
 80017da:	f007 f915 	bl	8008a08 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80017de:	bf00      	nop
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	240008e8 	.word	0x240008e8

080017e8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80017ec:	4802      	ldr	r0, [pc, #8]	@ (80017f8 <TIM5_IRQHandler+0x10>)
 80017ee:	f006 fae7 	bl	8007dc0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80017f2:	bf00      	nop
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	24000524 	.word	0x24000524

080017fc <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001800:	4802      	ldr	r0, [pc, #8]	@ (800180c <UART4_IRQHandler+0x10>)
 8001802:	f007 f901 	bl	8008a08 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001806:	bf00      	nop
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	24000570 	.word	0x24000570

08001810 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8001814:	4802      	ldr	r0, [pc, #8]	@ (8001820 <UART7_IRQHandler+0x10>)
 8001816:	f007 f8f7 	bl	8008a08 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 800181a:	bf00      	nop
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	24000698 	.word	0x24000698

08001824 <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 8001828:	4802      	ldr	r0, [pc, #8]	@ (8001834 <UART8_IRQHandler+0x10>)
 800182a:	f007 f8ed 	bl	8008a08 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 800182e:	bf00      	nop
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	2400072c 	.word	0x2400072c

08001838 <UART9_IRQHandler>:

/**
  * @brief This function handles UART9 global interrupt.
  */
void UART9_IRQHandler(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART9_IRQn 0 */

  /* USER CODE END UART9_IRQn 0 */
  HAL_UART_IRQHandler(&huart9);
 800183c:	4802      	ldr	r0, [pc, #8]	@ (8001848 <UART9_IRQHandler+0x10>)
 800183e:	f007 f8e3 	bl	8008a08 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART9_IRQn 1 */

  /* USER CODE END UART9_IRQn 1 */
}
 8001842:	bf00      	nop
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	240007c0 	.word	0x240007c0

0800184c <USART10_IRQHandler>:

/**
  * @brief This function handles USART10 global interrupt.
  */
void USART10_IRQHandler(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART10_IRQn 0 */

  /* USER CODE END USART10_IRQn 0 */
  HAL_UART_IRQHandler(&huart10);
 8001850:	4802      	ldr	r0, [pc, #8]	@ (800185c <USART10_IRQHandler+0x10>)
 8001852:	f007 f8d9 	bl	8008a08 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART10_IRQn 1 */

  /* USER CODE END USART10_IRQn 1 */
}
 8001856:	bf00      	nop
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	24000a10 	.word	0x24000a10

08001860 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
	return 1;
 8001864:	2301      	movs	r3, #1
}
 8001866:	4618      	mov	r0, r3
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr

08001870 <_kill>:

int _kill(int pid, int sig)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
 8001878:	6039      	str	r1, [r7, #0]
	(void) pid;
	(void) sig;
	errno = EINVAL;
 800187a:	f00e fa0f 	bl	800fc9c <__errno>
 800187e:	4603      	mov	r3, r0
 8001880:	2216      	movs	r2, #22
 8001882:	601a      	str	r2, [r3, #0]
	return -1;
 8001884:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001888:	4618      	mov	r0, r3
 800188a:	3708      	adds	r7, #8
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}

08001890 <_exit>:

void _exit(int status)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001898:	f04f 31ff 	mov.w	r1, #4294967295
 800189c:	6878      	ldr	r0, [r7, #4]
 800189e:	f7ff ffe7 	bl	8001870 <_kill>
	while (1)
 80018a2:	bf00      	nop
 80018a4:	e7fd      	b.n	80018a2 <_exit+0x12>

080018a6 <_read>:
	{
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018a6:	b580      	push	{r7, lr}
 80018a8:	b086      	sub	sp, #24
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	60f8      	str	r0, [r7, #12]
 80018ae:	60b9      	str	r1, [r7, #8]
 80018b0:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018b2:	2300      	movs	r3, #0
 80018b4:	617b      	str	r3, [r7, #20]
 80018b6:	e00a      	b.n	80018ce <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80018b8:	f3af 8000 	nop.w
 80018bc:	4601      	mov	r1, r0
 80018be:	68bb      	ldr	r3, [r7, #8]
 80018c0:	1c5a      	adds	r2, r3, #1
 80018c2:	60ba      	str	r2, [r7, #8]
 80018c4:	b2ca      	uxtb	r2, r1
 80018c6:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	3301      	adds	r3, #1
 80018cc:	617b      	str	r3, [r7, #20]
 80018ce:	697a      	ldr	r2, [r7, #20]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	429a      	cmp	r2, r3
 80018d4:	dbf0      	blt.n	80018b8 <_read+0x12>
	}

	return len;
 80018d6:	687b      	ldr	r3, [r7, #4]
}
 80018d8:	4618      	mov	r0, r3
 80018da:	3718      	adds	r7, #24
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}

080018e0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b086      	sub	sp, #24
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	60f8      	str	r0, [r7, #12]
 80018e8:	60b9      	str	r1, [r7, #8]
 80018ea:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018ec:	2300      	movs	r3, #0
 80018ee:	617b      	str	r3, [r7, #20]
 80018f0:	e009      	b.n	8001906 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80018f2:	68bb      	ldr	r3, [r7, #8]
 80018f4:	1c5a      	adds	r2, r3, #1
 80018f6:	60ba      	str	r2, [r7, #8]
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	4618      	mov	r0, r3
 80018fc:	f7ff fd7a 	bl	80013f4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	3301      	adds	r3, #1
 8001904:	617b      	str	r3, [r7, #20]
 8001906:	697a      	ldr	r2, [r7, #20]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	429a      	cmp	r2, r3
 800190c:	dbf1      	blt.n	80018f2 <_write+0x12>
	}
	return len;
 800190e:	687b      	ldr	r3, [r7, #4]
}
 8001910:	4618      	mov	r0, r3
 8001912:	3718      	adds	r7, #24
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}

08001918 <_close>:

int _close(int file)
{
 8001918:	b480      	push	{r7}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
	(void) file;
	return -1;
 8001920:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001924:	4618      	mov	r0, r3
 8001926:	370c      	adds	r7, #12
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr

08001930 <_fstat>:

int _fstat(int file, struct stat *st)
{
 8001930:	b480      	push	{r7}
 8001932:	b083      	sub	sp, #12
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	6039      	str	r1, [r7, #0]
	(void) file;
	st->st_mode = S_IFCHR;
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001940:	605a      	str	r2, [r3, #4]
	return 0;
 8001942:	2300      	movs	r3, #0
}
 8001944:	4618      	mov	r0, r3
 8001946:	370c      	adds	r7, #12
 8001948:	46bd      	mov	sp, r7
 800194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194e:	4770      	bx	lr

08001950 <_isatty>:

int _isatty(int file)
{
 8001950:	b480      	push	{r7}
 8001952:	b083      	sub	sp, #12
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
	(void) file;
	return 1;
 8001958:	2301      	movs	r3, #1
}
 800195a:	4618      	mov	r0, r3
 800195c:	370c      	adds	r7, #12
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr

08001966 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001966:	b480      	push	{r7}
 8001968:	b085      	sub	sp, #20
 800196a:	af00      	add	r7, sp, #0
 800196c:	60f8      	str	r0, [r7, #12]
 800196e:	60b9      	str	r1, [r7, #8]
 8001970:	607a      	str	r2, [r7, #4]
	(void) file;
	(void) ptr;
	(void) dir;
	return 0;
 8001972:	2300      	movs	r3, #0
}
 8001974:	4618      	mov	r0, r3
 8001976:	3714      	adds	r7, #20
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr

08001980 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 8001980:	b580      	push	{r7, lr}
 8001982:	b086      	sub	sp, #24
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 8001988:	4a14      	ldr	r2, [pc, #80]	@ (80019dc <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 800198a:	4b15      	ldr	r3, [pc, #84]	@ (80019e0 <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 800198c:	1ad3      	subs	r3, r2, r3
 800198e:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 8001994:	4b13      	ldr	r3, [pc, #76]	@ (80019e4 <_sbrk+0x64>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d102      	bne.n	80019a2 <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 800199c:	4b11      	ldr	r3, [pc, #68]	@ (80019e4 <_sbrk+0x64>)
 800199e:	4a12      	ldr	r2, [pc, #72]	@ (80019e8 <_sbrk+0x68>)
 80019a0:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 80019a2:	4b10      	ldr	r3, [pc, #64]	@ (80019e4 <_sbrk+0x64>)
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	4413      	add	r3, r2
 80019aa:	693a      	ldr	r2, [r7, #16]
 80019ac:	429a      	cmp	r2, r3
 80019ae:	d207      	bcs.n	80019c0 <_sbrk+0x40>
		errno = ENOMEM;
 80019b0:	f00e f974 	bl	800fc9c <__errno>
 80019b4:	4603      	mov	r3, r0
 80019b6:	220c      	movs	r2, #12
 80019b8:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 80019ba:	f04f 33ff 	mov.w	r3, #4294967295
 80019be:	e009      	b.n	80019d4 <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 80019c0:	4b08      	ldr	r3, [pc, #32]	@ (80019e4 <_sbrk+0x64>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 80019c6:	4b07      	ldr	r3, [pc, #28]	@ (80019e4 <_sbrk+0x64>)
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	4413      	add	r3, r2
 80019ce:	4a05      	ldr	r2, [pc, #20]	@ (80019e4 <_sbrk+0x64>)
 80019d0:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 80019d2:	68fb      	ldr	r3, [r7, #12]
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	3718      	adds	r7, #24
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	24050000 	.word	0x24050000
 80019e0:	00000400 	.word	0x00000400
 80019e4:	24000488 	.word	0x24000488
 80019e8:	24000e10 	.word	0x24000e10

080019ec <SystemInit>:
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
 80019f0:	4b32      	ldr	r3, [pc, #200]	@ (8001abc <SystemInit+0xd0>)
 80019f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80019f6:	4a31      	ldr	r2, [pc, #196]	@ (8001abc <SystemInit+0xd0>)
 80019f8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80019fc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
	/* Reset the RCC clock configuration to the default reset state ------------*/

	/* Increasing the CPU frequency */
	if (FLASH_LATENCY_DEFAULT > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001a00:	4b2f      	ldr	r3, [pc, #188]	@ (8001ac0 <SystemInit+0xd4>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f003 030f 	and.w	r3, r3, #15
 8001a08:	2b06      	cmp	r3, #6
 8001a0a:	d807      	bhi.n	8001a1c <SystemInit+0x30>
	{
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 8001a0c:	4b2c      	ldr	r3, [pc, #176]	@ (8001ac0 <SystemInit+0xd4>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f023 030f 	bic.w	r3, r3, #15
 8001a14:	4a2a      	ldr	r2, [pc, #168]	@ (8001ac0 <SystemInit+0xd4>)
 8001a16:	f043 0307 	orr.w	r3, r3, #7
 8001a1a:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

	/* Set HSION bit */
	RCC->CR |= RCC_CR_HSION;
 8001a1c:	4b29      	ldr	r3, [pc, #164]	@ (8001ac4 <SystemInit+0xd8>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a28      	ldr	r2, [pc, #160]	@ (8001ac4 <SystemInit+0xd8>)
 8001a22:	f043 0301 	orr.w	r3, r3, #1
 8001a26:	6013      	str	r3, [r2, #0]

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;
 8001a28:	4b26      	ldr	r3, [pc, #152]	@ (8001ac4 <SystemInit+0xd8>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	611a      	str	r2, [r3, #16]

	/* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
	RCC->CR &= 0xEAF6ED7FU;
 8001a2e:	4b25      	ldr	r3, [pc, #148]	@ (8001ac4 <SystemInit+0xd8>)
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	4924      	ldr	r1, [pc, #144]	@ (8001ac4 <SystemInit+0xd8>)
 8001a34:	4b24      	ldr	r3, [pc, #144]	@ (8001ac8 <SystemInit+0xdc>)
 8001a36:	4013      	ands	r3, r2
 8001a38:	600b      	str	r3, [r1, #0]

	/* Decreasing the number of wait states because of lower CPU frequency */
	if (FLASH_LATENCY_DEFAULT < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001a3a:	4b21      	ldr	r3, [pc, #132]	@ (8001ac0 <SystemInit+0xd4>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f003 0308 	and.w	r3, r3, #8
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d007      	beq.n	8001a56 <SystemInit+0x6a>
	{
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 8001a46:	4b1e      	ldr	r3, [pc, #120]	@ (8001ac0 <SystemInit+0xd4>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f023 030f 	bic.w	r3, r3, #15
 8001a4e:	4a1c      	ldr	r2, [pc, #112]	@ (8001ac0 <SystemInit+0xd4>)
 8001a50:	f043 0307 	orr.w	r3, r3, #7
 8001a54:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

#if defined(D3_SRAM_BASE)
	/* Reset D1CFGR register */
	RCC->D1CFGR = 0x00000000;
 8001a56:	4b1b      	ldr	r3, [pc, #108]	@ (8001ac4 <SystemInit+0xd8>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	619a      	str	r2, [r3, #24]

	/* Reset D2CFGR register */
	RCC->D2CFGR = 0x00000000;
 8001a5c:	4b19      	ldr	r3, [pc, #100]	@ (8001ac4 <SystemInit+0xd8>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	61da      	str	r2, [r3, #28]

	/* Reset D3CFGR register */
	RCC->D3CFGR = 0x00000000;
 8001a62:	4b18      	ldr	r3, [pc, #96]	@ (8001ac4 <SystemInit+0xd8>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	621a      	str	r2, [r3, #32]

	/* Reset SRDCFGR register */
	RCC->SRDCFGR = 0x00000000;
#endif
	/* Reset PLLCKSELR register */
	RCC->PLLCKSELR = 0x02020200;
 8001a68:	4b16      	ldr	r3, [pc, #88]	@ (8001ac4 <SystemInit+0xd8>)
 8001a6a:	4a18      	ldr	r2, [pc, #96]	@ (8001acc <SystemInit+0xe0>)
 8001a6c:	629a      	str	r2, [r3, #40]	@ 0x28

	/* Reset PLLCFGR register */
	RCC->PLLCFGR = 0x01FF0000;
 8001a6e:	4b15      	ldr	r3, [pc, #84]	@ (8001ac4 <SystemInit+0xd8>)
 8001a70:	4a17      	ldr	r2, [pc, #92]	@ (8001ad0 <SystemInit+0xe4>)
 8001a72:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Reset PLL1DIVR register */
	RCC->PLL1DIVR = 0x01010280;
 8001a74:	4b13      	ldr	r3, [pc, #76]	@ (8001ac4 <SystemInit+0xd8>)
 8001a76:	4a17      	ldr	r2, [pc, #92]	@ (8001ad4 <SystemInit+0xe8>)
 8001a78:	631a      	str	r2, [r3, #48]	@ 0x30
	/* Reset PLL1FRACR register */
	RCC->PLL1FRACR = 0x00000000;
 8001a7a:	4b12      	ldr	r3, [pc, #72]	@ (8001ac4 <SystemInit+0xd8>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	635a      	str	r2, [r3, #52]	@ 0x34

	/* Reset PLL2DIVR register */
	RCC->PLL2DIVR = 0x01010280;
 8001a80:	4b10      	ldr	r3, [pc, #64]	@ (8001ac4 <SystemInit+0xd8>)
 8001a82:	4a14      	ldr	r2, [pc, #80]	@ (8001ad4 <SystemInit+0xe8>)
 8001a84:	639a      	str	r2, [r3, #56]	@ 0x38

	/* Reset PLL2FRACR register */

	RCC->PLL2FRACR = 0x00000000;
 8001a86:	4b0f      	ldr	r3, [pc, #60]	@ (8001ac4 <SystemInit+0xd8>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	63da      	str	r2, [r3, #60]	@ 0x3c
	/* Reset PLL3DIVR register */
	RCC->PLL3DIVR = 0x01010280;
 8001a8c:	4b0d      	ldr	r3, [pc, #52]	@ (8001ac4 <SystemInit+0xd8>)
 8001a8e:	4a11      	ldr	r2, [pc, #68]	@ (8001ad4 <SystemInit+0xe8>)
 8001a90:	641a      	str	r2, [r3, #64]	@ 0x40

	/* Reset PLL3FRACR register */
	RCC->PLL3FRACR = 0x00000000;
 8001a92:	4b0c      	ldr	r3, [pc, #48]	@ (8001ac4 <SystemInit+0xd8>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	645a      	str	r2, [r3, #68]	@ 0x44

	/* Reset HSEBYP bit */
	RCC->CR &= 0xFFFBFFFFU;
 8001a98:	4b0a      	ldr	r3, [pc, #40]	@ (8001ac4 <SystemInit+0xd8>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a09      	ldr	r2, [pc, #36]	@ (8001ac4 <SystemInit+0xd8>)
 8001a9e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001aa2:	6013      	str	r3, [r2, #0]

	/* Disable all interrupts */
	RCC->CIER = 0x00000000;
 8001aa4:	4b07      	ldr	r3, [pc, #28]	@ (8001ac4 <SystemInit+0xd8>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	661a      	str	r2, [r3, #96]	@ 0x60
	/*
	 * Disable the FMC bank1 (enabled after reset).
	 * This, prevents CPU speculation access on this bank which blocks the use of FMC during
	 * 24us. During this time the others FMC master (such as LTDC) cannot use it!
	 */
	FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001aaa:	4b0b      	ldr	r3, [pc, #44]	@ (8001ad8 <SystemInit+0xec>)
 8001aac:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001ab0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001ab2:	bf00      	nop
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr
 8001abc:	e000ed00 	.word	0xe000ed00
 8001ac0:	52002000 	.word	0x52002000
 8001ac4:	58024400 	.word	0x58024400
 8001ac8:	eaf6ed7f 	.word	0xeaf6ed7f
 8001acc:	02020200 	.word	0x02020200
 8001ad0:	01ff0000 	.word	0x01ff0000
 8001ad4:	01010280 	.word	0x01010280
 8001ad8:	52004000 	.word	0x52004000

08001adc <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim5;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b088      	sub	sp, #32
 8001ae0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ae2:	f107 0310 	add.w	r3, r7, #16
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	601a      	str	r2, [r3, #0]
 8001aea:	605a      	str	r2, [r3, #4]
 8001aec:	609a      	str	r2, [r3, #8]
 8001aee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001af0:	1d3b      	adds	r3, r7, #4
 8001af2:	2200      	movs	r2, #0
 8001af4:	601a      	str	r2, [r3, #0]
 8001af6:	605a      	str	r2, [r3, #4]
 8001af8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001afa:	4b1e      	ldr	r3, [pc, #120]	@ (8001b74 <MX_TIM2_Init+0x98>)
 8001afc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001b00:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 550-1;
 8001b02:	4b1c      	ldr	r3, [pc, #112]	@ (8001b74 <MX_TIM2_Init+0x98>)
 8001b04:	f240 2225 	movw	r2, #549	@ 0x225
 8001b08:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b0a:	4b1a      	ldr	r3, [pc, #104]	@ (8001b74 <MX_TIM2_Init+0x98>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000-1;
 8001b10:	4b18      	ldr	r3, [pc, #96]	@ (8001b74 <MX_TIM2_Init+0x98>)
 8001b12:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8001b16:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b18:	4b16      	ldr	r3, [pc, #88]	@ (8001b74 <MX_TIM2_Init+0x98>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001b1e:	4b15      	ldr	r3, [pc, #84]	@ (8001b74 <MX_TIM2_Init+0x98>)
 8001b20:	2280      	movs	r2, #128	@ 0x80
 8001b22:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001b24:	4813      	ldr	r0, [pc, #76]	@ (8001b74 <MX_TIM2_Init+0x98>)
 8001b26:	f006 f86d 	bl	8007c04 <HAL_TIM_Base_Init>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d001      	beq.n	8001b34 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8001b30:	f7ff fdd8 	bl	80016e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b34:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b38:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b3a:	f107 0310 	add.w	r3, r7, #16
 8001b3e:	4619      	mov	r1, r3
 8001b40:	480c      	ldr	r0, [pc, #48]	@ (8001b74 <MX_TIM2_Init+0x98>)
 8001b42:	f006 fa45 	bl	8007fd0 <HAL_TIM_ConfigClockSource>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d001      	beq.n	8001b50 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8001b4c:	f7ff fdca 	bl	80016e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b50:	2300      	movs	r3, #0
 8001b52:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b54:	2300      	movs	r3, #0
 8001b56:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b58:	1d3b      	adds	r3, r7, #4
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	4805      	ldr	r0, [pc, #20]	@ (8001b74 <MX_TIM2_Init+0x98>)
 8001b5e:	f006 fca7 	bl	80084b0 <HAL_TIMEx_MasterConfigSynchronization>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d001      	beq.n	8001b6c <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8001b68:	f7ff fdbc 	bl	80016e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001b6c:	bf00      	nop
 8001b6e:	3720      	adds	r7, #32
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	2400048c 	.word	0x2400048c

08001b78 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b088      	sub	sp, #32
 8001b7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b7e:	f107 0310 	add.w	r3, r7, #16
 8001b82:	2200      	movs	r2, #0
 8001b84:	601a      	str	r2, [r3, #0]
 8001b86:	605a      	str	r2, [r3, #4]
 8001b88:	609a      	str	r2, [r3, #8]
 8001b8a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b8c:	1d3b      	adds	r3, r7, #4
 8001b8e:	2200      	movs	r2, #0
 8001b90:	601a      	str	r2, [r3, #0]
 8001b92:	605a      	str	r2, [r3, #4]
 8001b94:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001b96:	4b1e      	ldr	r3, [pc, #120]	@ (8001c10 <MX_TIM3_Init+0x98>)
 8001b98:	4a1e      	ldr	r2, [pc, #120]	@ (8001c14 <MX_TIM3_Init+0x9c>)
 8001b9a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 550-1;
 8001b9c:	4b1c      	ldr	r3, [pc, #112]	@ (8001c10 <MX_TIM3_Init+0x98>)
 8001b9e:	f240 2225 	movw	r2, #549	@ 0x225
 8001ba2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ba4:	4b1a      	ldr	r3, [pc, #104]	@ (8001c10 <MX_TIM3_Init+0x98>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000-1;
 8001baa:	4b19      	ldr	r3, [pc, #100]	@ (8001c10 <MX_TIM3_Init+0x98>)
 8001bac:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8001bb0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bb2:	4b17      	ldr	r3, [pc, #92]	@ (8001c10 <MX_TIM3_Init+0x98>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bb8:	4b15      	ldr	r3, [pc, #84]	@ (8001c10 <MX_TIM3_Init+0x98>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001bbe:	4814      	ldr	r0, [pc, #80]	@ (8001c10 <MX_TIM3_Init+0x98>)
 8001bc0:	f006 f820 	bl	8007c04 <HAL_TIM_Base_Init>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d001      	beq.n	8001bce <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8001bca:	f7ff fd8b 	bl	80016e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001bd2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001bd4:	f107 0310 	add.w	r3, r7, #16
 8001bd8:	4619      	mov	r1, r3
 8001bda:	480d      	ldr	r0, [pc, #52]	@ (8001c10 <MX_TIM3_Init+0x98>)
 8001bdc:	f006 f9f8 	bl	8007fd0 <HAL_TIM_ConfigClockSource>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d001      	beq.n	8001bea <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8001be6:	f7ff fd7d 	bl	80016e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bea:	2300      	movs	r3, #0
 8001bec:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001bf2:	1d3b      	adds	r3, r7, #4
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	4806      	ldr	r0, [pc, #24]	@ (8001c10 <MX_TIM3_Init+0x98>)
 8001bf8:	f006 fc5a 	bl	80084b0 <HAL_TIMEx_MasterConfigSynchronization>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d001      	beq.n	8001c06 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8001c02:	f7ff fd6f 	bl	80016e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001c06:	bf00      	nop
 8001c08:	3720      	adds	r7, #32
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	240004d8 	.word	0x240004d8
 8001c14:	40000400 	.word	0x40000400

08001c18 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b088      	sub	sp, #32
 8001c1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c1e:	f107 0310 	add.w	r3, r7, #16
 8001c22:	2200      	movs	r2, #0
 8001c24:	601a      	str	r2, [r3, #0]
 8001c26:	605a      	str	r2, [r3, #4]
 8001c28:	609a      	str	r2, [r3, #8]
 8001c2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c2c:	1d3b      	adds	r3, r7, #4
 8001c2e:	2200      	movs	r2, #0
 8001c30:	601a      	str	r2, [r3, #0]
 8001c32:	605a      	str	r2, [r3, #4]
 8001c34:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001c36:	4b1e      	ldr	r3, [pc, #120]	@ (8001cb0 <MX_TIM5_Init+0x98>)
 8001c38:	4a1e      	ldr	r2, [pc, #120]	@ (8001cb4 <MX_TIM5_Init+0x9c>)
 8001c3a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 550-1;
 8001c3c:	4b1c      	ldr	r3, [pc, #112]	@ (8001cb0 <MX_TIM5_Init+0x98>)
 8001c3e:	f240 2225 	movw	r2, #549	@ 0x225
 8001c42:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c44:	4b1a      	ldr	r3, [pc, #104]	@ (8001cb0 <MX_TIM5_Init+0x98>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 10000-1;
 8001c4a:	4b19      	ldr	r3, [pc, #100]	@ (8001cb0 <MX_TIM5_Init+0x98>)
 8001c4c:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001c50:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c52:	4b17      	ldr	r3, [pc, #92]	@ (8001cb0 <MX_TIM5_Init+0x98>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c58:	4b15      	ldr	r3, [pc, #84]	@ (8001cb0 <MX_TIM5_Init+0x98>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001c5e:	4814      	ldr	r0, [pc, #80]	@ (8001cb0 <MX_TIM5_Init+0x98>)
 8001c60:	f005 ffd0 	bl	8007c04 <HAL_TIM_Base_Init>
 8001c64:	4603      	mov	r3, r0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d001      	beq.n	8001c6e <MX_TIM5_Init+0x56>
  {
    Error_Handler();
 8001c6a:	f7ff fd3b 	bl	80016e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c6e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c72:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001c74:	f107 0310 	add.w	r3, r7, #16
 8001c78:	4619      	mov	r1, r3
 8001c7a:	480d      	ldr	r0, [pc, #52]	@ (8001cb0 <MX_TIM5_Init+0x98>)
 8001c7c:	f006 f9a8 	bl	8007fd0 <HAL_TIM_ConfigClockSource>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d001      	beq.n	8001c8a <MX_TIM5_Init+0x72>
  {
    Error_Handler();
 8001c86:	f7ff fd2d 	bl	80016e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001c92:	1d3b      	adds	r3, r7, #4
 8001c94:	4619      	mov	r1, r3
 8001c96:	4806      	ldr	r0, [pc, #24]	@ (8001cb0 <MX_TIM5_Init+0x98>)
 8001c98:	f006 fc0a 	bl	80084b0 <HAL_TIMEx_MasterConfigSynchronization>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d001      	beq.n	8001ca6 <MX_TIM5_Init+0x8e>
  {
    Error_Handler();
 8001ca2:	f7ff fd1f 	bl	80016e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001ca6:	bf00      	nop
 8001ca8:	3720      	adds	r7, #32
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	24000524 	.word	0x24000524
 8001cb4:	40000c00 	.word	0x40000c00

08001cb8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b086      	sub	sp, #24
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001cc8:	d117      	bne.n	8001cfa <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001cca:	4b2a      	ldr	r3, [pc, #168]	@ (8001d74 <HAL_TIM_Base_MspInit+0xbc>)
 8001ccc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001cd0:	4a28      	ldr	r2, [pc, #160]	@ (8001d74 <HAL_TIM_Base_MspInit+0xbc>)
 8001cd2:	f043 0301 	orr.w	r3, r3, #1
 8001cd6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001cda:	4b26      	ldr	r3, [pc, #152]	@ (8001d74 <HAL_TIM_Base_MspInit+0xbc>)
 8001cdc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001ce0:	f003 0301 	and.w	r3, r3, #1
 8001ce4:	617b      	str	r3, [r7, #20]
 8001ce6:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 11, 0);
 8001ce8:	2200      	movs	r2, #0
 8001cea:	210b      	movs	r1, #11
 8001cec:	201c      	movs	r0, #28
 8001cee:	f001 f884 	bl	8002dfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001cf2:	201c      	movs	r0, #28
 8001cf4:	f001 f89b 	bl	8002e2e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8001cf8:	e038      	b.n	8001d6c <HAL_TIM_Base_MspInit+0xb4>
  else if(tim_baseHandle->Instance==TIM3)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a1e      	ldr	r2, [pc, #120]	@ (8001d78 <HAL_TIM_Base_MspInit+0xc0>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d117      	bne.n	8001d34 <HAL_TIM_Base_MspInit+0x7c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d04:	4b1b      	ldr	r3, [pc, #108]	@ (8001d74 <HAL_TIM_Base_MspInit+0xbc>)
 8001d06:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001d0a:	4a1a      	ldr	r2, [pc, #104]	@ (8001d74 <HAL_TIM_Base_MspInit+0xbc>)
 8001d0c:	f043 0302 	orr.w	r3, r3, #2
 8001d10:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001d14:	4b17      	ldr	r3, [pc, #92]	@ (8001d74 <HAL_TIM_Base_MspInit+0xbc>)
 8001d16:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001d1a:	f003 0302 	and.w	r3, r3, #2
 8001d1e:	613b      	str	r3, [r7, #16]
 8001d20:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 2, 0);
 8001d22:	2200      	movs	r2, #0
 8001d24:	2102      	movs	r1, #2
 8001d26:	201d      	movs	r0, #29
 8001d28:	f001 f867 	bl	8002dfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001d2c:	201d      	movs	r0, #29
 8001d2e:	f001 f87e 	bl	8002e2e <HAL_NVIC_EnableIRQ>
}
 8001d32:	e01b      	b.n	8001d6c <HAL_TIM_Base_MspInit+0xb4>
  else if(tim_baseHandle->Instance==TIM5)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a10      	ldr	r2, [pc, #64]	@ (8001d7c <HAL_TIM_Base_MspInit+0xc4>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d116      	bne.n	8001d6c <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001d3e:	4b0d      	ldr	r3, [pc, #52]	@ (8001d74 <HAL_TIM_Base_MspInit+0xbc>)
 8001d40:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001d44:	4a0b      	ldr	r2, [pc, #44]	@ (8001d74 <HAL_TIM_Base_MspInit+0xbc>)
 8001d46:	f043 0308 	orr.w	r3, r3, #8
 8001d4a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001d4e:	4b09      	ldr	r3, [pc, #36]	@ (8001d74 <HAL_TIM_Base_MspInit+0xbc>)
 8001d50:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001d54:	f003 0308 	and.w	r3, r3, #8
 8001d58:	60fb      	str	r3, [r7, #12]
 8001d5a:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 13, 0);
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	210d      	movs	r1, #13
 8001d60:	2032      	movs	r0, #50	@ 0x32
 8001d62:	f001 f84a 	bl	8002dfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001d66:	2032      	movs	r0, #50	@ 0x32
 8001d68:	f001 f861 	bl	8002e2e <HAL_NVIC_EnableIRQ>
}
 8001d6c:	bf00      	nop
 8001d6e:	3718      	adds	r7, #24
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	58024400 	.word	0x58024400
 8001d78:	40000400 	.word	0x40000400
 8001d7c:	40000c00 	.word	0x40000c00

08001d80 <MX_UART4_Init>:
UART_HandleTypeDef huart6;
UART_HandleTypeDef huart10;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001d84:	4b22      	ldr	r3, [pc, #136]	@ (8001e10 <MX_UART4_Init+0x90>)
 8001d86:	4a23      	ldr	r2, [pc, #140]	@ (8001e14 <MX_UART4_Init+0x94>)
 8001d88:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001d8a:	4b21      	ldr	r3, [pc, #132]	@ (8001e10 <MX_UART4_Init+0x90>)
 8001d8c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001d90:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001d92:	4b1f      	ldr	r3, [pc, #124]	@ (8001e10 <MX_UART4_Init+0x90>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001d98:	4b1d      	ldr	r3, [pc, #116]	@ (8001e10 <MX_UART4_Init+0x90>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001d9e:	4b1c      	ldr	r3, [pc, #112]	@ (8001e10 <MX_UART4_Init+0x90>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001da4:	4b1a      	ldr	r3, [pc, #104]	@ (8001e10 <MX_UART4_Init+0x90>)
 8001da6:	220c      	movs	r2, #12
 8001da8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001daa:	4b19      	ldr	r3, [pc, #100]	@ (8001e10 <MX_UART4_Init+0x90>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001db0:	4b17      	ldr	r3, [pc, #92]	@ (8001e10 <MX_UART4_Init+0x90>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001db6:	4b16      	ldr	r3, [pc, #88]	@ (8001e10 <MX_UART4_Init+0x90>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001dbc:	4b14      	ldr	r3, [pc, #80]	@ (8001e10 <MX_UART4_Init+0x90>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001dc2:	4b13      	ldr	r3, [pc, #76]	@ (8001e10 <MX_UART4_Init+0x90>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001dc8:	4811      	ldr	r0, [pc, #68]	@ (8001e10 <MX_UART4_Init+0x90>)
 8001dca:	f006 fc2b 	bl	8008624 <HAL_UART_Init>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d001      	beq.n	8001dd8 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8001dd4:	f7ff fc86 	bl	80016e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001dd8:	2100      	movs	r1, #0
 8001dda:	480d      	ldr	r0, [pc, #52]	@ (8001e10 <MX_UART4_Init+0x90>)
 8001ddc:	f009 f951 	bl	800b082 <HAL_UARTEx_SetTxFifoThreshold>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d001      	beq.n	8001dea <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8001de6:	f7ff fc7d 	bl	80016e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001dea:	2100      	movs	r1, #0
 8001dec:	4808      	ldr	r0, [pc, #32]	@ (8001e10 <MX_UART4_Init+0x90>)
 8001dee:	f009 f986 	bl	800b0fe <HAL_UARTEx_SetRxFifoThreshold>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d001      	beq.n	8001dfc <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8001df8:	f7ff fc74 	bl	80016e4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001dfc:	4804      	ldr	r0, [pc, #16]	@ (8001e10 <MX_UART4_Init+0x90>)
 8001dfe:	f009 f907 	bl	800b010 <HAL_UARTEx_DisableFifoMode>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d001      	beq.n	8001e0c <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8001e08:	f7ff fc6c 	bl	80016e4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001e0c:	bf00      	nop
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	24000570 	.word	0x24000570
 8001e14:	40004c00 	.word	0x40004c00

08001e18 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001e1c:	4b22      	ldr	r3, [pc, #136]	@ (8001ea8 <MX_UART5_Init+0x90>)
 8001e1e:	4a23      	ldr	r2, [pc, #140]	@ (8001eac <MX_UART5_Init+0x94>)
 8001e20:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 8001e22:	4b21      	ldr	r3, [pc, #132]	@ (8001ea8 <MX_UART5_Init+0x90>)
 8001e24:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001e28:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001e2a:	4b1f      	ldr	r3, [pc, #124]	@ (8001ea8 <MX_UART5_Init+0x90>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001e30:	4b1d      	ldr	r3, [pc, #116]	@ (8001ea8 <MX_UART5_Init+0x90>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001e36:	4b1c      	ldr	r3, [pc, #112]	@ (8001ea8 <MX_UART5_Init+0x90>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001e3c:	4b1a      	ldr	r3, [pc, #104]	@ (8001ea8 <MX_UART5_Init+0x90>)
 8001e3e:	220c      	movs	r2, #12
 8001e40:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e42:	4b19      	ldr	r3, [pc, #100]	@ (8001ea8 <MX_UART5_Init+0x90>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e48:	4b17      	ldr	r3, [pc, #92]	@ (8001ea8 <MX_UART5_Init+0x90>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e4e:	4b16      	ldr	r3, [pc, #88]	@ (8001ea8 <MX_UART5_Init+0x90>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001e54:	4b14      	ldr	r3, [pc, #80]	@ (8001ea8 <MX_UART5_Init+0x90>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	625a      	str	r2, [r3, #36]	@ 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e5a:	4b13      	ldr	r3, [pc, #76]	@ (8001ea8 <MX_UART5_Init+0x90>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001e60:	4811      	ldr	r0, [pc, #68]	@ (8001ea8 <MX_UART5_Init+0x90>)
 8001e62:	f006 fbdf 	bl	8008624 <HAL_UART_Init>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d001      	beq.n	8001e70 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 8001e6c:	f7ff fc3a 	bl	80016e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e70:	2100      	movs	r1, #0
 8001e72:	480d      	ldr	r0, [pc, #52]	@ (8001ea8 <MX_UART5_Init+0x90>)
 8001e74:	f009 f905 	bl	800b082 <HAL_UARTEx_SetTxFifoThreshold>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d001      	beq.n	8001e82 <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 8001e7e:	f7ff fc31 	bl	80016e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e82:	2100      	movs	r1, #0
 8001e84:	4808      	ldr	r0, [pc, #32]	@ (8001ea8 <MX_UART5_Init+0x90>)
 8001e86:	f009 f93a 	bl	800b0fe <HAL_UARTEx_SetRxFifoThreshold>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d001      	beq.n	8001e94 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 8001e90:	f7ff fc28 	bl	80016e4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8001e94:	4804      	ldr	r0, [pc, #16]	@ (8001ea8 <MX_UART5_Init+0x90>)
 8001e96:	f009 f8bb 	bl	800b010 <HAL_UARTEx_DisableFifoMode>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d001      	beq.n	8001ea4 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 8001ea0:	f7ff fc20 	bl	80016e4 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001ea4:	bf00      	nop
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	24000604 	.word	0x24000604
 8001eac:	40005000 	.word	0x40005000

08001eb0 <MX_UART7_Init>:
/* UART7 init function */
void MX_UART7_Init(void)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8001eb4:	4b22      	ldr	r3, [pc, #136]	@ (8001f40 <MX_UART7_Init+0x90>)
 8001eb6:	4a23      	ldr	r2, [pc, #140]	@ (8001f44 <MX_UART7_Init+0x94>)
 8001eb8:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8001eba:	4b21      	ldr	r3, [pc, #132]	@ (8001f40 <MX_UART7_Init+0x90>)
 8001ebc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001ec0:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8001ec2:	4b1f      	ldr	r3, [pc, #124]	@ (8001f40 <MX_UART7_Init+0x90>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8001ec8:	4b1d      	ldr	r3, [pc, #116]	@ (8001f40 <MX_UART7_Init+0x90>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8001ece:	4b1c      	ldr	r3, [pc, #112]	@ (8001f40 <MX_UART7_Init+0x90>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8001ed4:	4b1a      	ldr	r3, [pc, #104]	@ (8001f40 <MX_UART7_Init+0x90>)
 8001ed6:	220c      	movs	r2, #12
 8001ed8:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001eda:	4b19      	ldr	r3, [pc, #100]	@ (8001f40 <MX_UART7_Init+0x90>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ee0:	4b17      	ldr	r3, [pc, #92]	@ (8001f40 <MX_UART7_Init+0x90>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ee6:	4b16      	ldr	r3, [pc, #88]	@ (8001f40 <MX_UART7_Init+0x90>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001eec:	4b14      	ldr	r3, [pc, #80]	@ (8001f40 <MX_UART7_Init+0x90>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ef2:	4b13      	ldr	r3, [pc, #76]	@ (8001f40 <MX_UART7_Init+0x90>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8001ef8:	4811      	ldr	r0, [pc, #68]	@ (8001f40 <MX_UART7_Init+0x90>)
 8001efa:	f006 fb93 	bl	8008624 <HAL_UART_Init>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d001      	beq.n	8001f08 <MX_UART7_Init+0x58>
  {
    Error_Handler();
 8001f04:	f7ff fbee 	bl	80016e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f08:	2100      	movs	r1, #0
 8001f0a:	480d      	ldr	r0, [pc, #52]	@ (8001f40 <MX_UART7_Init+0x90>)
 8001f0c:	f009 f8b9 	bl	800b082 <HAL_UARTEx_SetTxFifoThreshold>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d001      	beq.n	8001f1a <MX_UART7_Init+0x6a>
  {
    Error_Handler();
 8001f16:	f7ff fbe5 	bl	80016e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f1a:	2100      	movs	r1, #0
 8001f1c:	4808      	ldr	r0, [pc, #32]	@ (8001f40 <MX_UART7_Init+0x90>)
 8001f1e:	f009 f8ee 	bl	800b0fe <HAL_UARTEx_SetRxFifoThreshold>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d001      	beq.n	8001f2c <MX_UART7_Init+0x7c>
  {
    Error_Handler();
 8001f28:	f7ff fbdc 	bl	80016e4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 8001f2c:	4804      	ldr	r0, [pc, #16]	@ (8001f40 <MX_UART7_Init+0x90>)
 8001f2e:	f009 f86f 	bl	800b010 <HAL_UARTEx_DisableFifoMode>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d001      	beq.n	8001f3c <MX_UART7_Init+0x8c>
  {
    Error_Handler();
 8001f38:	f7ff fbd4 	bl	80016e4 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8001f3c:	bf00      	nop
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	24000698 	.word	0x24000698
 8001f44:	40007800 	.word	0x40007800

08001f48 <MX_UART8_Init>:
/* UART8 init function */
void MX_UART8_Init(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8001f4c:	4b22      	ldr	r3, [pc, #136]	@ (8001fd8 <MX_UART8_Init+0x90>)
 8001f4e:	4a23      	ldr	r2, [pc, #140]	@ (8001fdc <MX_UART8_Init+0x94>)
 8001f50:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 8001f52:	4b21      	ldr	r3, [pc, #132]	@ (8001fd8 <MX_UART8_Init+0x90>)
 8001f54:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001f58:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8001f5a:	4b1f      	ldr	r3, [pc, #124]	@ (8001fd8 <MX_UART8_Init+0x90>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8001f60:	4b1d      	ldr	r3, [pc, #116]	@ (8001fd8 <MX_UART8_Init+0x90>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8001f66:	4b1c      	ldr	r3, [pc, #112]	@ (8001fd8 <MX_UART8_Init+0x90>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8001f6c:	4b1a      	ldr	r3, [pc, #104]	@ (8001fd8 <MX_UART8_Init+0x90>)
 8001f6e:	220c      	movs	r2, #12
 8001f70:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f72:	4b19      	ldr	r3, [pc, #100]	@ (8001fd8 <MX_UART8_Init+0x90>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f78:	4b17      	ldr	r3, [pc, #92]	@ (8001fd8 <MX_UART8_Init+0x90>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f7e:	4b16      	ldr	r3, [pc, #88]	@ (8001fd8 <MX_UART8_Init+0x90>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001f84:	4b14      	ldr	r3, [pc, #80]	@ (8001fd8 <MX_UART8_Init+0x90>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	625a      	str	r2, [r3, #36]	@ 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f8a:	4b13      	ldr	r3, [pc, #76]	@ (8001fd8 <MX_UART8_Init+0x90>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8001f90:	4811      	ldr	r0, [pc, #68]	@ (8001fd8 <MX_UART8_Init+0x90>)
 8001f92:	f006 fb47 	bl	8008624 <HAL_UART_Init>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d001      	beq.n	8001fa0 <MX_UART8_Init+0x58>
  {
    Error_Handler();
 8001f9c:	f7ff fba2 	bl	80016e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001fa0:	2100      	movs	r1, #0
 8001fa2:	480d      	ldr	r0, [pc, #52]	@ (8001fd8 <MX_UART8_Init+0x90>)
 8001fa4:	f009 f86d 	bl	800b082 <HAL_UARTEx_SetTxFifoThreshold>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d001      	beq.n	8001fb2 <MX_UART8_Init+0x6a>
  {
    Error_Handler();
 8001fae:	f7ff fb99 	bl	80016e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001fb2:	2100      	movs	r1, #0
 8001fb4:	4808      	ldr	r0, [pc, #32]	@ (8001fd8 <MX_UART8_Init+0x90>)
 8001fb6:	f009 f8a2 	bl	800b0fe <HAL_UARTEx_SetRxFifoThreshold>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d001      	beq.n	8001fc4 <MX_UART8_Init+0x7c>
  {
    Error_Handler();
 8001fc0:	f7ff fb90 	bl	80016e4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 8001fc4:	4804      	ldr	r0, [pc, #16]	@ (8001fd8 <MX_UART8_Init+0x90>)
 8001fc6:	f009 f823 	bl	800b010 <HAL_UARTEx_DisableFifoMode>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d001      	beq.n	8001fd4 <MX_UART8_Init+0x8c>
  {
    Error_Handler();
 8001fd0:	f7ff fb88 	bl	80016e4 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8001fd4:	bf00      	nop
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	2400072c 	.word	0x2400072c
 8001fdc:	40007c00 	.word	0x40007c00

08001fe0 <MX_UART9_Init>:
/* UART9 init function */
void MX_UART9_Init(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	af00      	add	r7, sp, #0
  /* USER CODE END UART9_Init 0 */

  /* USER CODE BEGIN UART9_Init 1 */

  /* USER CODE END UART9_Init 1 */
  huart9.Instance = UART9;
 8001fe4:	4b22      	ldr	r3, [pc, #136]	@ (8002070 <MX_UART9_Init+0x90>)
 8001fe6:	4a23      	ldr	r2, [pc, #140]	@ (8002074 <MX_UART9_Init+0x94>)
 8001fe8:	601a      	str	r2, [r3, #0]
  huart9.Init.BaudRate = 115200;
 8001fea:	4b21      	ldr	r3, [pc, #132]	@ (8002070 <MX_UART9_Init+0x90>)
 8001fec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001ff0:	605a      	str	r2, [r3, #4]
  huart9.Init.WordLength = UART_WORDLENGTH_8B;
 8001ff2:	4b1f      	ldr	r3, [pc, #124]	@ (8002070 <MX_UART9_Init+0x90>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	609a      	str	r2, [r3, #8]
  huart9.Init.StopBits = UART_STOPBITS_1;
 8001ff8:	4b1d      	ldr	r3, [pc, #116]	@ (8002070 <MX_UART9_Init+0x90>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	60da      	str	r2, [r3, #12]
  huart9.Init.Parity = UART_PARITY_NONE;
 8001ffe:	4b1c      	ldr	r3, [pc, #112]	@ (8002070 <MX_UART9_Init+0x90>)
 8002000:	2200      	movs	r2, #0
 8002002:	611a      	str	r2, [r3, #16]
  huart9.Init.Mode = UART_MODE_TX_RX;
 8002004:	4b1a      	ldr	r3, [pc, #104]	@ (8002070 <MX_UART9_Init+0x90>)
 8002006:	220c      	movs	r2, #12
 8002008:	615a      	str	r2, [r3, #20]
  huart9.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800200a:	4b19      	ldr	r3, [pc, #100]	@ (8002070 <MX_UART9_Init+0x90>)
 800200c:	2200      	movs	r2, #0
 800200e:	619a      	str	r2, [r3, #24]
  huart9.Init.OverSampling = UART_OVERSAMPLING_16;
 8002010:	4b17      	ldr	r3, [pc, #92]	@ (8002070 <MX_UART9_Init+0x90>)
 8002012:	2200      	movs	r2, #0
 8002014:	61da      	str	r2, [r3, #28]
  huart9.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002016:	4b16      	ldr	r3, [pc, #88]	@ (8002070 <MX_UART9_Init+0x90>)
 8002018:	2200      	movs	r2, #0
 800201a:	621a      	str	r2, [r3, #32]
  huart9.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800201c:	4b14      	ldr	r3, [pc, #80]	@ (8002070 <MX_UART9_Init+0x90>)
 800201e:	2200      	movs	r2, #0
 8002020:	625a      	str	r2, [r3, #36]	@ 0x24
  huart9.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002022:	4b13      	ldr	r3, [pc, #76]	@ (8002070 <MX_UART9_Init+0x90>)
 8002024:	2200      	movs	r2, #0
 8002026:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart9) != HAL_OK)
 8002028:	4811      	ldr	r0, [pc, #68]	@ (8002070 <MX_UART9_Init+0x90>)
 800202a:	f006 fafb 	bl	8008624 <HAL_UART_Init>
 800202e:	4603      	mov	r3, r0
 8002030:	2b00      	cmp	r3, #0
 8002032:	d001      	beq.n	8002038 <MX_UART9_Init+0x58>
  {
    Error_Handler();
 8002034:	f7ff fb56 	bl	80016e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart9, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002038:	2100      	movs	r1, #0
 800203a:	480d      	ldr	r0, [pc, #52]	@ (8002070 <MX_UART9_Init+0x90>)
 800203c:	f009 f821 	bl	800b082 <HAL_UARTEx_SetTxFifoThreshold>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d001      	beq.n	800204a <MX_UART9_Init+0x6a>
  {
    Error_Handler();
 8002046:	f7ff fb4d 	bl	80016e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart9, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800204a:	2100      	movs	r1, #0
 800204c:	4808      	ldr	r0, [pc, #32]	@ (8002070 <MX_UART9_Init+0x90>)
 800204e:	f009 f856 	bl	800b0fe <HAL_UARTEx_SetRxFifoThreshold>
 8002052:	4603      	mov	r3, r0
 8002054:	2b00      	cmp	r3, #0
 8002056:	d001      	beq.n	800205c <MX_UART9_Init+0x7c>
  {
    Error_Handler();
 8002058:	f7ff fb44 	bl	80016e4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart9) != HAL_OK)
 800205c:	4804      	ldr	r0, [pc, #16]	@ (8002070 <MX_UART9_Init+0x90>)
 800205e:	f008 ffd7 	bl	800b010 <HAL_UARTEx_DisableFifoMode>
 8002062:	4603      	mov	r3, r0
 8002064:	2b00      	cmp	r3, #0
 8002066:	d001      	beq.n	800206c <MX_UART9_Init+0x8c>
  {
    Error_Handler();
 8002068:	f7ff fb3c 	bl	80016e4 <Error_Handler>
  }
  /* USER CODE BEGIN UART9_Init 2 */

  /* USER CODE END UART9_Init 2 */

}
 800206c:	bf00      	nop
 800206e:	bd80      	pop	{r7, pc}
 8002070:	240007c0 	.word	0x240007c0
 8002074:	40011800 	.word	0x40011800

08002078 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800207c:	4b39      	ldr	r3, [pc, #228]	@ (8002164 <MX_USART2_UART_Init+0xec>)
 800207e:	4a3a      	ldr	r2, [pc, #232]	@ (8002168 <MX_USART2_UART_Init+0xf0>)
 8002080:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002082:	4b38      	ldr	r3, [pc, #224]	@ (8002164 <MX_USART2_UART_Init+0xec>)
 8002084:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002088:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800208a:	4b36      	ldr	r3, [pc, #216]	@ (8002164 <MX_USART2_UART_Init+0xec>)
 800208c:	2200      	movs	r2, #0
 800208e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002090:	4b34      	ldr	r3, [pc, #208]	@ (8002164 <MX_USART2_UART_Init+0xec>)
 8002092:	2200      	movs	r2, #0
 8002094:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002096:	4b33      	ldr	r3, [pc, #204]	@ (8002164 <MX_USART2_UART_Init+0xec>)
 8002098:	2200      	movs	r2, #0
 800209a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800209c:	4b31      	ldr	r3, [pc, #196]	@ (8002164 <MX_USART2_UART_Init+0xec>)
 800209e:	220c      	movs	r2, #12
 80020a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020a2:	4b30      	ldr	r3, [pc, #192]	@ (8002164 <MX_USART2_UART_Init+0xec>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80020a8:	4b2e      	ldr	r3, [pc, #184]	@ (8002164 <MX_USART2_UART_Init+0xec>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80020ae:	4b2d      	ldr	r3, [pc, #180]	@ (8002164 <MX_USART2_UART_Init+0xec>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80020b4:	4b2b      	ldr	r3, [pc, #172]	@ (8002164 <MX_USART2_UART_Init+0xec>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80020ba:	4b2a      	ldr	r3, [pc, #168]	@ (8002164 <MX_USART2_UART_Init+0xec>)
 80020bc:	2200      	movs	r2, #0
 80020be:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80020c0:	4828      	ldr	r0, [pc, #160]	@ (8002164 <MX_USART2_UART_Init+0xec>)
 80020c2:	f006 faaf 	bl	8008624 <HAL_UART_Init>
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d001      	beq.n	80020d0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80020cc:	f7ff fb0a 	bl	80016e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80020d0:	2100      	movs	r1, #0
 80020d2:	4824      	ldr	r0, [pc, #144]	@ (8002164 <MX_USART2_UART_Init+0xec>)
 80020d4:	f008 ffd5 	bl	800b082 <HAL_UARTEx_SetTxFifoThreshold>
 80020d8:	4603      	mov	r3, r0
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d001      	beq.n	80020e2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80020de:	f7ff fb01 	bl	80016e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80020e2:	2100      	movs	r1, #0
 80020e4:	481f      	ldr	r0, [pc, #124]	@ (8002164 <MX_USART2_UART_Init+0xec>)
 80020e6:	f009 f80a 	bl	800b0fe <HAL_UARTEx_SetRxFifoThreshold>
 80020ea:	4603      	mov	r3, r0
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d001      	beq.n	80020f4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80020f0:	f7ff faf8 	bl	80016e4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80020f4:	481b      	ldr	r0, [pc, #108]	@ (8002164 <MX_USART2_UART_Init+0xec>)
 80020f6:	f008 ff8b 	bl	800b010 <HAL_UARTEx_DisableFifoMode>
 80020fa:	4603      	mov	r3, r0
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d001      	beq.n	8002104 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002100:	f7ff faf0 	bl	80016e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  HAL_UART_Transmit(&huart2,unlock_register, sizeof(unlock_register),1000);
 8002104:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002108:	2205      	movs	r2, #5
 800210a:	4918      	ldr	r1, [pc, #96]	@ (800216c <MX_USART2_UART_Init+0xf4>)
 800210c:	4815      	ldr	r0, [pc, #84]	@ (8002164 <MX_USART2_UART_Init+0xec>)
 800210e:	f006 fad9 	bl	80086c4 <HAL_UART_Transmit>
  HAL_Delay(5);
 8002112:	2005      	movs	r0, #5
 8002114:	f000 fd72 	bl	8002bfc <HAL_Delay>
  HAL_UART_Transmit(&huart2,reset_z_axis, sizeof(reset_z_axis),1000);
 8002118:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800211c:	2205      	movs	r2, #5
 800211e:	4914      	ldr	r1, [pc, #80]	@ (8002170 <MX_USART2_UART_Init+0xf8>)
 8002120:	4810      	ldr	r0, [pc, #64]	@ (8002164 <MX_USART2_UART_Init+0xec>)
 8002122:	f006 facf 	bl	80086c4 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart2,set_output_200Hz, sizeof(set_output_200Hz),1000);
 8002126:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800212a:	2205      	movs	r2, #5
 800212c:	4911      	ldr	r1, [pc, #68]	@ (8002174 <MX_USART2_UART_Init+0xfc>)
 800212e:	480d      	ldr	r0, [pc, #52]	@ (8002164 <MX_USART2_UART_Init+0xec>)
 8002130:	f006 fac8 	bl	80086c4 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart2,set_baudrate_115200, sizeof(set_baudrate_115200),1000);
 8002134:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002138:	2205      	movs	r2, #5
 800213a:	490f      	ldr	r1, [pc, #60]	@ (8002178 <MX_USART2_UART_Init+0x100>)
 800213c:	4809      	ldr	r0, [pc, #36]	@ (8002164 <MX_USART2_UART_Init+0xec>)
 800213e:	f006 fac1 	bl	80086c4 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart2,save_settings, sizeof(save_settings),1000);
 8002142:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002146:	2205      	movs	r2, #5
 8002148:	490c      	ldr	r1, [pc, #48]	@ (800217c <MX_USART2_UART_Init+0x104>)
 800214a:	4806      	ldr	r0, [pc, #24]	@ (8002164 <MX_USART2_UART_Init+0xec>)
 800214c:	f006 faba 	bl	80086c4 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart2,restart_device, sizeof(restart_device),1000);
 8002150:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002154:	2205      	movs	r2, #5
 8002156:	490a      	ldr	r1, [pc, #40]	@ (8002180 <MX_USART2_UART_Init+0x108>)
 8002158:	4802      	ldr	r0, [pc, #8]	@ (8002164 <MX_USART2_UART_Init+0xec>)
 800215a:	f006 fab3 	bl	80086c4 <HAL_UART_Transmit>


  /* USER CODE END USART2_Init 2 */

}
 800215e:	bf00      	nop
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	24000854 	.word	0x24000854
 8002168:	40004400 	.word	0x40004400
 800216c:	24000010 	.word	0x24000010
 8002170:	24000018 	.word	0x24000018
 8002174:	24000020 	.word	0x24000020
 8002178:	24000028 	.word	0x24000028
 800217c:	24000030 	.word	0x24000030
 8002180:	24000038 	.word	0x24000038

08002184 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002188:	4b22      	ldr	r3, [pc, #136]	@ (8002214 <MX_USART3_UART_Init+0x90>)
 800218a:	4a23      	ldr	r2, [pc, #140]	@ (8002218 <MX_USART3_UART_Init+0x94>)
 800218c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800218e:	4b21      	ldr	r3, [pc, #132]	@ (8002214 <MX_USART3_UART_Init+0x90>)
 8002190:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002194:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002196:	4b1f      	ldr	r3, [pc, #124]	@ (8002214 <MX_USART3_UART_Init+0x90>)
 8002198:	2200      	movs	r2, #0
 800219a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800219c:	4b1d      	ldr	r3, [pc, #116]	@ (8002214 <MX_USART3_UART_Init+0x90>)
 800219e:	2200      	movs	r2, #0
 80021a0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80021a2:	4b1c      	ldr	r3, [pc, #112]	@ (8002214 <MX_USART3_UART_Init+0x90>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80021a8:	4b1a      	ldr	r3, [pc, #104]	@ (8002214 <MX_USART3_UART_Init+0x90>)
 80021aa:	220c      	movs	r2, #12
 80021ac:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021ae:	4b19      	ldr	r3, [pc, #100]	@ (8002214 <MX_USART3_UART_Init+0x90>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80021b4:	4b17      	ldr	r3, [pc, #92]	@ (8002214 <MX_USART3_UART_Init+0x90>)
 80021b6:	2200      	movs	r2, #0
 80021b8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80021ba:	4b16      	ldr	r3, [pc, #88]	@ (8002214 <MX_USART3_UART_Init+0x90>)
 80021bc:	2200      	movs	r2, #0
 80021be:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80021c0:	4b14      	ldr	r3, [pc, #80]	@ (8002214 <MX_USART3_UART_Init+0x90>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80021c6:	4b13      	ldr	r3, [pc, #76]	@ (8002214 <MX_USART3_UART_Init+0x90>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80021cc:	4811      	ldr	r0, [pc, #68]	@ (8002214 <MX_USART3_UART_Init+0x90>)
 80021ce:	f006 fa29 	bl	8008624 <HAL_UART_Init>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d001      	beq.n	80021dc <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80021d8:	f7ff fa84 	bl	80016e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80021dc:	2100      	movs	r1, #0
 80021de:	480d      	ldr	r0, [pc, #52]	@ (8002214 <MX_USART3_UART_Init+0x90>)
 80021e0:	f008 ff4f 	bl	800b082 <HAL_UARTEx_SetTxFifoThreshold>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d001      	beq.n	80021ee <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80021ea:	f7ff fa7b 	bl	80016e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80021ee:	2100      	movs	r1, #0
 80021f0:	4808      	ldr	r0, [pc, #32]	@ (8002214 <MX_USART3_UART_Init+0x90>)
 80021f2:	f008 ff84 	bl	800b0fe <HAL_UARTEx_SetRxFifoThreshold>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d001      	beq.n	8002200 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80021fc:	f7ff fa72 	bl	80016e4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002200:	4804      	ldr	r0, [pc, #16]	@ (8002214 <MX_USART3_UART_Init+0x90>)
 8002202:	f008 ff05 	bl	800b010 <HAL_UARTEx_DisableFifoMode>
 8002206:	4603      	mov	r3, r0
 8002208:	2b00      	cmp	r3, #0
 800220a:	d001      	beq.n	8002210 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800220c:	f7ff fa6a 	bl	80016e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002210:	bf00      	nop
 8002212:	bd80      	pop	{r7, pc}
 8002214:	240008e8 	.word	0x240008e8
 8002218:	40004800 	.word	0x40004800

0800221c <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002220:	4b22      	ldr	r3, [pc, #136]	@ (80022ac <MX_USART6_UART_Init+0x90>)
 8002222:	4a23      	ldr	r2, [pc, #140]	@ (80022b0 <MX_USART6_UART_Init+0x94>)
 8002224:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8002226:	4b21      	ldr	r3, [pc, #132]	@ (80022ac <MX_USART6_UART_Init+0x90>)
 8002228:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800222c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800222e:	4b1f      	ldr	r3, [pc, #124]	@ (80022ac <MX_USART6_UART_Init+0x90>)
 8002230:	2200      	movs	r2, #0
 8002232:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002234:	4b1d      	ldr	r3, [pc, #116]	@ (80022ac <MX_USART6_UART_Init+0x90>)
 8002236:	2200      	movs	r2, #0
 8002238:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800223a:	4b1c      	ldr	r3, [pc, #112]	@ (80022ac <MX_USART6_UART_Init+0x90>)
 800223c:	2200      	movs	r2, #0
 800223e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002240:	4b1a      	ldr	r3, [pc, #104]	@ (80022ac <MX_USART6_UART_Init+0x90>)
 8002242:	220c      	movs	r2, #12
 8002244:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002246:	4b19      	ldr	r3, [pc, #100]	@ (80022ac <MX_USART6_UART_Init+0x90>)
 8002248:	2200      	movs	r2, #0
 800224a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800224c:	4b17      	ldr	r3, [pc, #92]	@ (80022ac <MX_USART6_UART_Init+0x90>)
 800224e:	2200      	movs	r2, #0
 8002250:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002252:	4b16      	ldr	r3, [pc, #88]	@ (80022ac <MX_USART6_UART_Init+0x90>)
 8002254:	2200      	movs	r2, #0
 8002256:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002258:	4b14      	ldr	r3, [pc, #80]	@ (80022ac <MX_USART6_UART_Init+0x90>)
 800225a:	2200      	movs	r2, #0
 800225c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800225e:	4b13      	ldr	r3, [pc, #76]	@ (80022ac <MX_USART6_UART_Init+0x90>)
 8002260:	2200      	movs	r2, #0
 8002262:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002264:	4811      	ldr	r0, [pc, #68]	@ (80022ac <MX_USART6_UART_Init+0x90>)
 8002266:	f006 f9dd 	bl	8008624 <HAL_UART_Init>
 800226a:	4603      	mov	r3, r0
 800226c:	2b00      	cmp	r3, #0
 800226e:	d001      	beq.n	8002274 <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 8002270:	f7ff fa38 	bl	80016e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002274:	2100      	movs	r1, #0
 8002276:	480d      	ldr	r0, [pc, #52]	@ (80022ac <MX_USART6_UART_Init+0x90>)
 8002278:	f008 ff03 	bl	800b082 <HAL_UARTEx_SetTxFifoThreshold>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	d001      	beq.n	8002286 <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 8002282:	f7ff fa2f 	bl	80016e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002286:	2100      	movs	r1, #0
 8002288:	4808      	ldr	r0, [pc, #32]	@ (80022ac <MX_USART6_UART_Init+0x90>)
 800228a:	f008 ff38 	bl	800b0fe <HAL_UARTEx_SetRxFifoThreshold>
 800228e:	4603      	mov	r3, r0
 8002290:	2b00      	cmp	r3, #0
 8002292:	d001      	beq.n	8002298 <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 8002294:	f7ff fa26 	bl	80016e4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 8002298:	4804      	ldr	r0, [pc, #16]	@ (80022ac <MX_USART6_UART_Init+0x90>)
 800229a:	f008 feb9 	bl	800b010 <HAL_UARTEx_DisableFifoMode>
 800229e:	4603      	mov	r3, r0
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d001      	beq.n	80022a8 <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 80022a4:	f7ff fa1e 	bl	80016e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80022a8:	bf00      	nop
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	2400097c 	.word	0x2400097c
 80022b0:	40011400 	.word	0x40011400

080022b4 <MX_USART10_UART_Init>:
/* USART10 init function */

void MX_USART10_UART_Init(void)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART10_Init 0 */

  /* USER CODE BEGIN USART10_Init 1 */

  /* USER CODE END USART10_Init 1 */
  huart10.Instance = USART10;
 80022b8:	4b22      	ldr	r3, [pc, #136]	@ (8002344 <MX_USART10_UART_Init+0x90>)
 80022ba:	4a23      	ldr	r2, [pc, #140]	@ (8002348 <MX_USART10_UART_Init+0x94>)
 80022bc:	601a      	str	r2, [r3, #0]
  huart10.Init.BaudRate = 115200;
 80022be:	4b21      	ldr	r3, [pc, #132]	@ (8002344 <MX_USART10_UART_Init+0x90>)
 80022c0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80022c4:	605a      	str	r2, [r3, #4]
  huart10.Init.WordLength = UART_WORDLENGTH_8B;
 80022c6:	4b1f      	ldr	r3, [pc, #124]	@ (8002344 <MX_USART10_UART_Init+0x90>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	609a      	str	r2, [r3, #8]
  huart10.Init.StopBits = UART_STOPBITS_1;
 80022cc:	4b1d      	ldr	r3, [pc, #116]	@ (8002344 <MX_USART10_UART_Init+0x90>)
 80022ce:	2200      	movs	r2, #0
 80022d0:	60da      	str	r2, [r3, #12]
  huart10.Init.Parity = UART_PARITY_NONE;
 80022d2:	4b1c      	ldr	r3, [pc, #112]	@ (8002344 <MX_USART10_UART_Init+0x90>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	611a      	str	r2, [r3, #16]
  huart10.Init.Mode = UART_MODE_TX_RX;
 80022d8:	4b1a      	ldr	r3, [pc, #104]	@ (8002344 <MX_USART10_UART_Init+0x90>)
 80022da:	220c      	movs	r2, #12
 80022dc:	615a      	str	r2, [r3, #20]
  huart10.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022de:	4b19      	ldr	r3, [pc, #100]	@ (8002344 <MX_USART10_UART_Init+0x90>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	619a      	str	r2, [r3, #24]
  huart10.Init.OverSampling = UART_OVERSAMPLING_16;
 80022e4:	4b17      	ldr	r3, [pc, #92]	@ (8002344 <MX_USART10_UART_Init+0x90>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	61da      	str	r2, [r3, #28]
  huart10.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80022ea:	4b16      	ldr	r3, [pc, #88]	@ (8002344 <MX_USART10_UART_Init+0x90>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	621a      	str	r2, [r3, #32]
  huart10.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80022f0:	4b14      	ldr	r3, [pc, #80]	@ (8002344 <MX_USART10_UART_Init+0x90>)
 80022f2:	2200      	movs	r2, #0
 80022f4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart10.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80022f6:	4b13      	ldr	r3, [pc, #76]	@ (8002344 <MX_USART10_UART_Init+0x90>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart10) != HAL_OK)
 80022fc:	4811      	ldr	r0, [pc, #68]	@ (8002344 <MX_USART10_UART_Init+0x90>)
 80022fe:	f006 f991 	bl	8008624 <HAL_UART_Init>
 8002302:	4603      	mov	r3, r0
 8002304:	2b00      	cmp	r3, #0
 8002306:	d001      	beq.n	800230c <MX_USART10_UART_Init+0x58>
  {
    Error_Handler();
 8002308:	f7ff f9ec 	bl	80016e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart10, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800230c:	2100      	movs	r1, #0
 800230e:	480d      	ldr	r0, [pc, #52]	@ (8002344 <MX_USART10_UART_Init+0x90>)
 8002310:	f008 feb7 	bl	800b082 <HAL_UARTEx_SetTxFifoThreshold>
 8002314:	4603      	mov	r3, r0
 8002316:	2b00      	cmp	r3, #0
 8002318:	d001      	beq.n	800231e <MX_USART10_UART_Init+0x6a>
  {
    Error_Handler();
 800231a:	f7ff f9e3 	bl	80016e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart10, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800231e:	2100      	movs	r1, #0
 8002320:	4808      	ldr	r0, [pc, #32]	@ (8002344 <MX_USART10_UART_Init+0x90>)
 8002322:	f008 feec 	bl	800b0fe <HAL_UARTEx_SetRxFifoThreshold>
 8002326:	4603      	mov	r3, r0
 8002328:	2b00      	cmp	r3, #0
 800232a:	d001      	beq.n	8002330 <MX_USART10_UART_Init+0x7c>
  {
    Error_Handler();
 800232c:	f7ff f9da 	bl	80016e4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart10) != HAL_OK)
 8002330:	4804      	ldr	r0, [pc, #16]	@ (8002344 <MX_USART10_UART_Init+0x90>)
 8002332:	f008 fe6d 	bl	800b010 <HAL_UARTEx_DisableFifoMode>
 8002336:	4603      	mov	r3, r0
 8002338:	2b00      	cmp	r3, #0
 800233a:	d001      	beq.n	8002340 <MX_USART10_UART_Init+0x8c>
  {
    Error_Handler();
 800233c:	f7ff f9d2 	bl	80016e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART10_Init 2 */

  /* USER CODE END USART10_Init 2 */

}
 8002340:	bf00      	nop
 8002342:	bd80      	pop	{r7, pc}
 8002344:	24000a10 	.word	0x24000a10
 8002348:	40011c00 	.word	0x40011c00

0800234c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b0c8      	sub	sp, #288	@ 0x120
 8002350:	af00      	add	r7, sp, #0
 8002352:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002356:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800235a:	6018      	str	r0, [r3, #0]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800235c:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8002360:	2200      	movs	r2, #0
 8002362:	601a      	str	r2, [r3, #0]
 8002364:	605a      	str	r2, [r3, #4]
 8002366:	609a      	str	r2, [r3, #8]
 8002368:	60da      	str	r2, [r3, #12]
 800236a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800236c:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002370:	22b8      	movs	r2, #184	@ 0xb8
 8002372:	2100      	movs	r1, #0
 8002374:	4618      	mov	r0, r3
 8002376:	f00d fc10 	bl	800fb9a <memset>
  if(uartHandle->Instance==UART4)
 800237a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800237e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4aaa      	ldr	r2, [pc, #680]	@ (8002630 <HAL_UART_MspInit+0x2e4>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d14e      	bne.n	800242a <HAL_UART_MspInit+0xde>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800238c:	f04f 0202 	mov.w	r2, #2
 8002390:	f04f 0300 	mov.w	r3, #0
 8002394:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002398:	2300      	movs	r3, #0
 800239a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800239e:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80023a2:	4618      	mov	r0, r3
 80023a4:	f003 fe6c 	bl	8006080 <HAL_RCCEx_PeriphCLKConfig>
 80023a8:	4603      	mov	r3, r0
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d001      	beq.n	80023b2 <HAL_UART_MspInit+0x66>
    {
      Error_Handler();
 80023ae:	f7ff f999 	bl	80016e4 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80023b2:	4ba0      	ldr	r3, [pc, #640]	@ (8002634 <HAL_UART_MspInit+0x2e8>)
 80023b4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80023b8:	4a9e      	ldr	r2, [pc, #632]	@ (8002634 <HAL_UART_MspInit+0x2e8>)
 80023ba:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80023be:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80023c2:	4b9c      	ldr	r3, [pc, #624]	@ (8002634 <HAL_UART_MspInit+0x2e8>)
 80023c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80023c8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80023cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80023ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023d0:	4b98      	ldr	r3, [pc, #608]	@ (8002634 <HAL_UART_MspInit+0x2e8>)
 80023d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023d6:	4a97      	ldr	r2, [pc, #604]	@ (8002634 <HAL_UART_MspInit+0x2e8>)
 80023d8:	f043 0301 	orr.w	r3, r3, #1
 80023dc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80023e0:	4b94      	ldr	r3, [pc, #592]	@ (8002634 <HAL_UART_MspInit+0x2e8>)
 80023e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023e6:	f003 0301 	and.w	r3, r3, #1
 80023ea:	64bb      	str	r3, [r7, #72]	@ 0x48
 80023ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80023ee:	2303      	movs	r3, #3
 80023f0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023f4:	2302      	movs	r3, #2
 80023f6:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023fa:	2300      	movs	r3, #0
 80023fc:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002400:	2300      	movs	r3, #0
 8002402:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002406:	2308      	movs	r3, #8
 8002408:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800240c:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8002410:	4619      	mov	r1, r3
 8002412:	4889      	ldr	r0, [pc, #548]	@ (8002638 <HAL_UART_MspInit+0x2ec>)
 8002414:	f002 fcec 	bl	8004df0 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 8, 0);
 8002418:	2200      	movs	r2, #0
 800241a:	2108      	movs	r1, #8
 800241c:	2034      	movs	r0, #52	@ 0x34
 800241e:	f000 fcec 	bl	8002dfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8002422:	2034      	movs	r0, #52	@ 0x34
 8002424:	f000 fd03 	bl	8002e2e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART10_IRQn);
  /* USER CODE BEGIN USART10_MspInit 1 */

  /* USER CODE END USART10_MspInit 1 */
  }
}
 8002428:	e320      	b.n	8002a6c <HAL_UART_MspInit+0x720>
  else if(uartHandle->Instance==UART5)
 800242a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800242e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a81      	ldr	r2, [pc, #516]	@ (800263c <HAL_UART_MspInit+0x2f0>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d147      	bne.n	80024cc <HAL_UART_MspInit+0x180>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 800243c:	f04f 0202 	mov.w	r2, #2
 8002440:	f04f 0300 	mov.w	r3, #0
 8002444:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002448:	2300      	movs	r3, #0
 800244a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800244e:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002452:	4618      	mov	r0, r3
 8002454:	f003 fe14 	bl	8006080 <HAL_RCCEx_PeriphCLKConfig>
 8002458:	4603      	mov	r3, r0
 800245a:	2b00      	cmp	r3, #0
 800245c:	d001      	beq.n	8002462 <HAL_UART_MspInit+0x116>
      Error_Handler();
 800245e:	f7ff f941 	bl	80016e4 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8002462:	4b74      	ldr	r3, [pc, #464]	@ (8002634 <HAL_UART_MspInit+0x2e8>)
 8002464:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002468:	4a72      	ldr	r2, [pc, #456]	@ (8002634 <HAL_UART_MspInit+0x2e8>)
 800246a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800246e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002472:	4b70      	ldr	r3, [pc, #448]	@ (8002634 <HAL_UART_MspInit+0x2e8>)
 8002474:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002478:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800247c:	647b      	str	r3, [r7, #68]	@ 0x44
 800247e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002480:	4b6c      	ldr	r3, [pc, #432]	@ (8002634 <HAL_UART_MspInit+0x2e8>)
 8002482:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002486:	4a6b      	ldr	r2, [pc, #428]	@ (8002634 <HAL_UART_MspInit+0x2e8>)
 8002488:	f043 0302 	orr.w	r3, r3, #2
 800248c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002490:	4b68      	ldr	r3, [pc, #416]	@ (8002634 <HAL_UART_MspInit+0x2e8>)
 8002492:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002496:	f003 0302 	and.w	r3, r3, #2
 800249a:	643b      	str	r3, [r7, #64]	@ 0x40
 800249c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_5;
 800249e:	f242 0320 	movw	r3, #8224	@ 0x2020
 80024a2:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024a6:	2302      	movs	r3, #2
 80024a8:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ac:	2300      	movs	r3, #0
 80024ae:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024b2:	2300      	movs	r3, #0
 80024b4:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 80024b8:	230e      	movs	r3, #14
 80024ba:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024be:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 80024c2:	4619      	mov	r1, r3
 80024c4:	485e      	ldr	r0, [pc, #376]	@ (8002640 <HAL_UART_MspInit+0x2f4>)
 80024c6:	f002 fc93 	bl	8004df0 <HAL_GPIO_Init>
}
 80024ca:	e2cf      	b.n	8002a6c <HAL_UART_MspInit+0x720>
  else if(uartHandle->Instance==UART7)
 80024cc:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80024d0:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a5a      	ldr	r2, [pc, #360]	@ (8002644 <HAL_UART_MspInit+0x2f8>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d14f      	bne.n	800257e <HAL_UART_MspInit+0x232>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 80024de:	f04f 0202 	mov.w	r2, #2
 80024e2:	f04f 0300 	mov.w	r3, #0
 80024e6:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80024ea:	2300      	movs	r3, #0
 80024ec:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80024f0:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80024f4:	4618      	mov	r0, r3
 80024f6:	f003 fdc3 	bl	8006080 <HAL_RCCEx_PeriphCLKConfig>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d001      	beq.n	8002504 <HAL_UART_MspInit+0x1b8>
      Error_Handler();
 8002500:	f7ff f8f0 	bl	80016e4 <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 8002504:	4b4b      	ldr	r3, [pc, #300]	@ (8002634 <HAL_UART_MspInit+0x2e8>)
 8002506:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800250a:	4a4a      	ldr	r2, [pc, #296]	@ (8002634 <HAL_UART_MspInit+0x2e8>)
 800250c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002510:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002514:	4b47      	ldr	r3, [pc, #284]	@ (8002634 <HAL_UART_MspInit+0x2e8>)
 8002516:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800251a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800251e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002520:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002522:	4b44      	ldr	r3, [pc, #272]	@ (8002634 <HAL_UART_MspInit+0x2e8>)
 8002524:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002528:	4a42      	ldr	r2, [pc, #264]	@ (8002634 <HAL_UART_MspInit+0x2e8>)
 800252a:	f043 0310 	orr.w	r3, r3, #16
 800252e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002532:	4b40      	ldr	r3, [pc, #256]	@ (8002634 <HAL_UART_MspInit+0x2e8>)
 8002534:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002538:	f003 0310 	and.w	r3, r3, #16
 800253c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800253e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8002540:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8002544:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002548:	2302      	movs	r3, #2
 800254a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800254e:	2300      	movs	r3, #0
 8002550:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002554:	2300      	movs	r3, #0
 8002556:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 800255a:	2307      	movs	r3, #7
 800255c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002560:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8002564:	4619      	mov	r1, r3
 8002566:	4838      	ldr	r0, [pc, #224]	@ (8002648 <HAL_UART_MspInit+0x2fc>)
 8002568:	f002 fc42 	bl	8004df0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART7_IRQn, 6, 0);
 800256c:	2200      	movs	r2, #0
 800256e:	2106      	movs	r1, #6
 8002570:	2052      	movs	r0, #82	@ 0x52
 8002572:	f000 fc42 	bl	8002dfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8002576:	2052      	movs	r0, #82	@ 0x52
 8002578:	f000 fc59 	bl	8002e2e <HAL_NVIC_EnableIRQ>
}
 800257c:	e276      	b.n	8002a6c <HAL_UART_MspInit+0x720>
  else if(uartHandle->Instance==UART8)
 800257e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002582:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a30      	ldr	r2, [pc, #192]	@ (800264c <HAL_UART_MspInit+0x300>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d15f      	bne.n	8002650 <HAL_UART_MspInit+0x304>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 8002590:	f04f 0202 	mov.w	r2, #2
 8002594:	f04f 0300 	mov.w	r3, #0
 8002598:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800259c:	2300      	movs	r3, #0
 800259e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80025a2:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80025a6:	4618      	mov	r0, r3
 80025a8:	f003 fd6a 	bl	8006080 <HAL_RCCEx_PeriphCLKConfig>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d001      	beq.n	80025b6 <HAL_UART_MspInit+0x26a>
      Error_Handler();
 80025b2:	f7ff f897 	bl	80016e4 <Error_Handler>
    __HAL_RCC_UART8_CLK_ENABLE();
 80025b6:	4b1f      	ldr	r3, [pc, #124]	@ (8002634 <HAL_UART_MspInit+0x2e8>)
 80025b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80025bc:	4a1d      	ldr	r2, [pc, #116]	@ (8002634 <HAL_UART_MspInit+0x2e8>)
 80025be:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80025c2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80025c6:	4b1b      	ldr	r3, [pc, #108]	@ (8002634 <HAL_UART_MspInit+0x2e8>)
 80025c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80025cc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80025d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80025d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80025d4:	4b17      	ldr	r3, [pc, #92]	@ (8002634 <HAL_UART_MspInit+0x2e8>)
 80025d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80025da:	4a16      	ldr	r2, [pc, #88]	@ (8002634 <HAL_UART_MspInit+0x2e8>)
 80025dc:	f043 0310 	orr.w	r3, r3, #16
 80025e0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80025e4:	4b13      	ldr	r3, [pc, #76]	@ (8002634 <HAL_UART_MspInit+0x2e8>)
 80025e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80025ea:	f003 0310 	and.w	r3, r3, #16
 80025ee:	633b      	str	r3, [r7, #48]	@ 0x30
 80025f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80025f2:	2303      	movs	r3, #3
 80025f4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025f8:	2302      	movs	r3, #2
 80025fa:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025fe:	2300      	movs	r3, #0
 8002600:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002604:	2300      	movs	r3, #0
 8002606:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 800260a:	2308      	movs	r3, #8
 800260c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002610:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8002614:	4619      	mov	r1, r3
 8002616:	480c      	ldr	r0, [pc, #48]	@ (8002648 <HAL_UART_MspInit+0x2fc>)
 8002618:	f002 fbea 	bl	8004df0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART8_IRQn, 15, 0);
 800261c:	2200      	movs	r2, #0
 800261e:	210f      	movs	r1, #15
 8002620:	2053      	movs	r0, #83	@ 0x53
 8002622:	f000 fbea 	bl	8002dfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 8002626:	2053      	movs	r0, #83	@ 0x53
 8002628:	f000 fc01 	bl	8002e2e <HAL_NVIC_EnableIRQ>
}
 800262c:	e21e      	b.n	8002a6c <HAL_UART_MspInit+0x720>
 800262e:	bf00      	nop
 8002630:	40004c00 	.word	0x40004c00
 8002634:	58024400 	.word	0x58024400
 8002638:	58020000 	.word	0x58020000
 800263c:	40005000 	.word	0x40005000
 8002640:	58020400 	.word	0x58020400
 8002644:	40007800 	.word	0x40007800
 8002648:	58021000 	.word	0x58021000
 800264c:	40007c00 	.word	0x40007c00
  else if(uartHandle->Instance==UART9)
 8002650:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002654:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4abd      	ldr	r2, [pc, #756]	@ (8002954 <HAL_UART_MspInit+0x608>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d14f      	bne.n	8002702 <HAL_UART_MspInit+0x3b6>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART9;
 8002662:	f04f 0201 	mov.w	r2, #1
 8002666:	f04f 0300 	mov.w	r3, #0
 800266a:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 800266e:	2300      	movs	r3, #0
 8002670:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002674:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002678:	4618      	mov	r0, r3
 800267a:	f003 fd01 	bl	8006080 <HAL_RCCEx_PeriphCLKConfig>
 800267e:	4603      	mov	r3, r0
 8002680:	2b00      	cmp	r3, #0
 8002682:	d001      	beq.n	8002688 <HAL_UART_MspInit+0x33c>
      Error_Handler();
 8002684:	f7ff f82e 	bl	80016e4 <Error_Handler>
    __HAL_RCC_UART9_CLK_ENABLE();
 8002688:	4bb3      	ldr	r3, [pc, #716]	@ (8002958 <HAL_UART_MspInit+0x60c>)
 800268a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800268e:	4ab2      	ldr	r2, [pc, #712]	@ (8002958 <HAL_UART_MspInit+0x60c>)
 8002690:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002694:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002698:	4baf      	ldr	r3, [pc, #700]	@ (8002958 <HAL_UART_MspInit+0x60c>)
 800269a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800269e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80026a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80026a6:	4bac      	ldr	r3, [pc, #688]	@ (8002958 <HAL_UART_MspInit+0x60c>)
 80026a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80026ac:	4aaa      	ldr	r2, [pc, #680]	@ (8002958 <HAL_UART_MspInit+0x60c>)
 80026ae:	f043 0308 	orr.w	r3, r3, #8
 80026b2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80026b6:	4ba8      	ldr	r3, [pc, #672]	@ (8002958 <HAL_UART_MspInit+0x60c>)
 80026b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80026bc:	f003 0308 	and.w	r3, r3, #8
 80026c0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80026c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80026c4:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80026c8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026cc:	2302      	movs	r3, #2
 80026ce:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026d2:	2300      	movs	r3, #0
 80026d4:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026d8:	2300      	movs	r3, #0
 80026da:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF11_UART9;
 80026de:	230b      	movs	r3, #11
 80026e0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80026e4:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 80026e8:	4619      	mov	r1, r3
 80026ea:	489c      	ldr	r0, [pc, #624]	@ (800295c <HAL_UART_MspInit+0x610>)
 80026ec:	f002 fb80 	bl	8004df0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART9_IRQn, 5, 0);
 80026f0:	2200      	movs	r2, #0
 80026f2:	2105      	movs	r1, #5
 80026f4:	209b      	movs	r0, #155	@ 0x9b
 80026f6:	f000 fb80 	bl	8002dfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART9_IRQn);
 80026fa:	209b      	movs	r0, #155	@ 0x9b
 80026fc:	f000 fb97 	bl	8002e2e <HAL_NVIC_EnableIRQ>
}
 8002700:	e1b4      	b.n	8002a6c <HAL_UART_MspInit+0x720>
  else if(uartHandle->Instance==USART2)
 8002702:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002706:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a94      	ldr	r2, [pc, #592]	@ (8002960 <HAL_UART_MspInit+0x614>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d156      	bne.n	80027c2 <HAL_UART_MspInit+0x476>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002714:	f04f 0202 	mov.w	r2, #2
 8002718:	f04f 0300 	mov.w	r3, #0
 800271c:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002720:	2300      	movs	r3, #0
 8002722:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002726:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800272a:	4618      	mov	r0, r3
 800272c:	f003 fca8 	bl	8006080 <HAL_RCCEx_PeriphCLKConfig>
 8002730:	4603      	mov	r3, r0
 8002732:	2b00      	cmp	r3, #0
 8002734:	d001      	beq.n	800273a <HAL_UART_MspInit+0x3ee>
      Error_Handler();
 8002736:	f7fe ffd5 	bl	80016e4 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800273a:	4b87      	ldr	r3, [pc, #540]	@ (8002958 <HAL_UART_MspInit+0x60c>)
 800273c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002740:	4a85      	ldr	r2, [pc, #532]	@ (8002958 <HAL_UART_MspInit+0x60c>)
 8002742:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002746:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800274a:	4b83      	ldr	r3, [pc, #524]	@ (8002958 <HAL_UART_MspInit+0x60c>)
 800274c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002750:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002754:	627b      	str	r3, [r7, #36]	@ 0x24
 8002756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002758:	4b7f      	ldr	r3, [pc, #508]	@ (8002958 <HAL_UART_MspInit+0x60c>)
 800275a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800275e:	4a7e      	ldr	r2, [pc, #504]	@ (8002958 <HAL_UART_MspInit+0x60c>)
 8002760:	f043 0301 	orr.w	r3, r3, #1
 8002764:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002768:	4b7b      	ldr	r3, [pc, #492]	@ (8002958 <HAL_UART_MspInit+0x60c>)
 800276a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800276e:	f003 0201 	and.w	r2, r3, #1
 8002772:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002776:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800277a:	601a      	str	r2, [r3, #0]
 800277c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002780:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002784:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002786:	230c      	movs	r3, #12
 8002788:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800278c:	2302      	movs	r3, #2
 800278e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002792:	2300      	movs	r3, #0
 8002794:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002798:	2300      	movs	r3, #0
 800279a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800279e:	2307      	movs	r3, #7
 80027a0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027a4:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 80027a8:	4619      	mov	r1, r3
 80027aa:	486e      	ldr	r0, [pc, #440]	@ (8002964 <HAL_UART_MspInit+0x618>)
 80027ac:	f002 fb20 	bl	8004df0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 15, 0);
 80027b0:	2200      	movs	r2, #0
 80027b2:	210f      	movs	r1, #15
 80027b4:	2026      	movs	r0, #38	@ 0x26
 80027b6:	f000 fb20 	bl	8002dfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80027ba:	2026      	movs	r0, #38	@ 0x26
 80027bc:	f000 fb37 	bl	8002e2e <HAL_NVIC_EnableIRQ>
}
 80027c0:	e154      	b.n	8002a6c <HAL_UART_MspInit+0x720>
  else if(uartHandle->Instance==USART3)
 80027c2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80027c6:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a66      	ldr	r2, [pc, #408]	@ (8002968 <HAL_UART_MspInit+0x61c>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d15f      	bne.n	8002894 <HAL_UART_MspInit+0x548>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80027d4:	f04f 0202 	mov.w	r2, #2
 80027d8:	f04f 0300 	mov.w	r3, #0
 80027dc:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80027e0:	2300      	movs	r3, #0
 80027e2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80027e6:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80027ea:	4618      	mov	r0, r3
 80027ec:	f003 fc48 	bl	8006080 <HAL_RCCEx_PeriphCLKConfig>
 80027f0:	4603      	mov	r3, r0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d001      	beq.n	80027fa <HAL_UART_MspInit+0x4ae>
      Error_Handler();
 80027f6:	f7fe ff75 	bl	80016e4 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80027fa:	4b57      	ldr	r3, [pc, #348]	@ (8002958 <HAL_UART_MspInit+0x60c>)
 80027fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002800:	4a55      	ldr	r2, [pc, #340]	@ (8002958 <HAL_UART_MspInit+0x60c>)
 8002802:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002806:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800280a:	4b53      	ldr	r3, [pc, #332]	@ (8002958 <HAL_UART_MspInit+0x60c>)
 800280c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002810:	f403 2280 	and.w	r2, r3, #262144	@ 0x40000
 8002814:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002818:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800281c:	601a      	str	r2, [r3, #0]
 800281e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002822:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002826:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002828:	4b4b      	ldr	r3, [pc, #300]	@ (8002958 <HAL_UART_MspInit+0x60c>)
 800282a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800282e:	4a4a      	ldr	r2, [pc, #296]	@ (8002958 <HAL_UART_MspInit+0x60c>)
 8002830:	f043 0308 	orr.w	r3, r3, #8
 8002834:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002838:	4b47      	ldr	r3, [pc, #284]	@ (8002958 <HAL_UART_MspInit+0x60c>)
 800283a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800283e:	f003 0208 	and.w	r2, r3, #8
 8002842:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002846:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800284a:	601a      	str	r2, [r3, #0]
 800284c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002850:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002854:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002856:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800285a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800285e:	2302      	movs	r3, #2
 8002860:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002864:	2300      	movs	r3, #0
 8002866:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800286a:	2300      	movs	r3, #0
 800286c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002870:	2307      	movs	r3, #7
 8002872:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002876:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 800287a:	4619      	mov	r1, r3
 800287c:	4837      	ldr	r0, [pc, #220]	@ (800295c <HAL_UART_MspInit+0x610>)
 800287e:	f002 fab7 	bl	8004df0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 14, 0);
 8002882:	2200      	movs	r2, #0
 8002884:	210e      	movs	r1, #14
 8002886:	2027      	movs	r0, #39	@ 0x27
 8002888:	f000 fab7 	bl	8002dfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800288c:	2027      	movs	r0, #39	@ 0x27
 800288e:	f000 face 	bl	8002e2e <HAL_NVIC_EnableIRQ>
}
 8002892:	e0eb      	b.n	8002a6c <HAL_UART_MspInit+0x720>
  else if(uartHandle->Instance==USART6)
 8002894:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002898:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a32      	ldr	r2, [pc, #200]	@ (800296c <HAL_UART_MspInit+0x620>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d166      	bne.n	8002974 <HAL_UART_MspInit+0x628>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 80028a6:	f04f 0201 	mov.w	r2, #1
 80028aa:	f04f 0300 	mov.w	r3, #0
 80028ae:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 80028b2:	2300      	movs	r3, #0
 80028b4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80028b8:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80028bc:	4618      	mov	r0, r3
 80028be:	f003 fbdf 	bl	8006080 <HAL_RCCEx_PeriphCLKConfig>
 80028c2:	4603      	mov	r3, r0
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d001      	beq.n	80028cc <HAL_UART_MspInit+0x580>
      Error_Handler();
 80028c8:	f7fe ff0c 	bl	80016e4 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 80028cc:	4b22      	ldr	r3, [pc, #136]	@ (8002958 <HAL_UART_MspInit+0x60c>)
 80028ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80028d2:	4a21      	ldr	r2, [pc, #132]	@ (8002958 <HAL_UART_MspInit+0x60c>)
 80028d4:	f043 0320 	orr.w	r3, r3, #32
 80028d8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80028dc:	4b1e      	ldr	r3, [pc, #120]	@ (8002958 <HAL_UART_MspInit+0x60c>)
 80028de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80028e2:	f003 0220 	and.w	r2, r3, #32
 80028e6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80028ea:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80028ee:	601a      	str	r2, [r3, #0]
 80028f0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80028f4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80028f8:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80028fa:	4b17      	ldr	r3, [pc, #92]	@ (8002958 <HAL_UART_MspInit+0x60c>)
 80028fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002900:	4a15      	ldr	r2, [pc, #84]	@ (8002958 <HAL_UART_MspInit+0x60c>)
 8002902:	f043 0304 	orr.w	r3, r3, #4
 8002906:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800290a:	4b13      	ldr	r3, [pc, #76]	@ (8002958 <HAL_UART_MspInit+0x60c>)
 800290c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002910:	f003 0204 	and.w	r2, r3, #4
 8002914:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002918:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800291c:	601a      	str	r2, [r3, #0]
 800291e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002922:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002926:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002928:	23c0      	movs	r3, #192	@ 0xc0
 800292a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800292e:	2302      	movs	r3, #2
 8002930:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002934:	2300      	movs	r3, #0
 8002936:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800293a:	2300      	movs	r3, #0
 800293c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 8002940:	2307      	movs	r3, #7
 8002942:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002946:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 800294a:	4619      	mov	r1, r3
 800294c:	4808      	ldr	r0, [pc, #32]	@ (8002970 <HAL_UART_MspInit+0x624>)
 800294e:	f002 fa4f 	bl	8004df0 <HAL_GPIO_Init>
}
 8002952:	e08b      	b.n	8002a6c <HAL_UART_MspInit+0x720>
 8002954:	40011800 	.word	0x40011800
 8002958:	58024400 	.word	0x58024400
 800295c:	58020c00 	.word	0x58020c00
 8002960:	40004400 	.word	0x40004400
 8002964:	58020000 	.word	0x58020000
 8002968:	40004800 	.word	0x40004800
 800296c:	40011400 	.word	0x40011400
 8002970:	58020800 	.word	0x58020800
  else if(uartHandle->Instance==USART10)
 8002974:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002978:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a3d      	ldr	r2, [pc, #244]	@ (8002a78 <HAL_UART_MspInit+0x72c>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d172      	bne.n	8002a6c <HAL_UART_MspInit+0x720>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART10;
 8002986:	f04f 0201 	mov.w	r2, #1
 800298a:	f04f 0300 	mov.w	r3, #0
 800298e:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8002992:	2300      	movs	r3, #0
 8002994:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002998:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800299c:	4618      	mov	r0, r3
 800299e:	f003 fb6f 	bl	8006080 <HAL_RCCEx_PeriphCLKConfig>
 80029a2:	4603      	mov	r3, r0
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d001      	beq.n	80029ac <HAL_UART_MspInit+0x660>
      Error_Handler();
 80029a8:	f7fe fe9c 	bl	80016e4 <Error_Handler>
    __HAL_RCC_USART10_CLK_ENABLE();
 80029ac:	4b33      	ldr	r3, [pc, #204]	@ (8002a7c <HAL_UART_MspInit+0x730>)
 80029ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80029b2:	4a32      	ldr	r2, [pc, #200]	@ (8002a7c <HAL_UART_MspInit+0x730>)
 80029b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80029b8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80029bc:	4b2f      	ldr	r3, [pc, #188]	@ (8002a7c <HAL_UART_MspInit+0x730>)
 80029be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80029c2:	f003 0280 	and.w	r2, r3, #128	@ 0x80
 80029c6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80029ca:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80029ce:	601a      	str	r2, [r3, #0]
 80029d0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80029d4:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80029d8:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80029da:	4b28      	ldr	r3, [pc, #160]	@ (8002a7c <HAL_UART_MspInit+0x730>)
 80029dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80029e0:	4a26      	ldr	r2, [pc, #152]	@ (8002a7c <HAL_UART_MspInit+0x730>)
 80029e2:	f043 0310 	orr.w	r3, r3, #16
 80029e6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80029ea:	4b24      	ldr	r3, [pc, #144]	@ (8002a7c <HAL_UART_MspInit+0x730>)
 80029ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80029f0:	f003 0210 	and.w	r2, r3, #16
 80029f4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80029f8:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80029fc:	601a      	str	r2, [r3, #0]
 80029fe:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002a02:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002a06:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002a08:	2304      	movs	r3, #4
 8002a0a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a0e:	2302      	movs	r3, #2
 8002a10:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a14:	2300      	movs	r3, #0
 8002a16:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF4_USART10;
 8002a20:	2304      	movs	r3, #4
 8002a22:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002a26:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8002a2a:	4619      	mov	r1, r3
 8002a2c:	4814      	ldr	r0, [pc, #80]	@ (8002a80 <HAL_UART_MspInit+0x734>)
 8002a2e:	f002 f9df 	bl	8004df0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002a32:	2308      	movs	r3, #8
 8002a34:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a38:	2302      	movs	r3, #2
 8002a3a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a44:	2300      	movs	r3, #0
 8002a46:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF11_USART10;
 8002a4a:	230b      	movs	r3, #11
 8002a4c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002a50:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8002a54:	4619      	mov	r1, r3
 8002a56:	480a      	ldr	r0, [pc, #40]	@ (8002a80 <HAL_UART_MspInit+0x734>)
 8002a58:	f002 f9ca 	bl	8004df0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART10_IRQn, 1, 0);
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	2101      	movs	r1, #1
 8002a60:	209c      	movs	r0, #156	@ 0x9c
 8002a62:	f000 f9ca 	bl	8002dfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART10_IRQn);
 8002a66:	209c      	movs	r0, #156	@ 0x9c
 8002a68:	f000 f9e1 	bl	8002e2e <HAL_NVIC_EnableIRQ>
}
 8002a6c:	bf00      	nop
 8002a6e:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	bf00      	nop
 8002a78:	40011c00 	.word	0x40011c00
 8002a7c:	58024400 	.word	0x58024400
 8002a80:	58021000 	.word	0x58021000

08002a84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
     ldr   sp, =_estack      /* set stack pointer */
 8002a84:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002abc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002a88:	f7fe ffb0 	bl	80019ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002a8c:	480c      	ldr	r0, [pc, #48]	@ (8002ac0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002a8e:	490d      	ldr	r1, [pc, #52]	@ (8002ac4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002a90:	4a0d      	ldr	r2, [pc, #52]	@ (8002ac8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002a92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a94:	e002      	b.n	8002a9c <LoopCopyDataInit>

08002a96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a9a:	3304      	adds	r3, #4

08002a9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002aa0:	d3f9      	bcc.n	8002a96 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002aa2:	4a0a      	ldr	r2, [pc, #40]	@ (8002acc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002aa4:	4c0a      	ldr	r4, [pc, #40]	@ (8002ad0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002aa6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002aa8:	e001      	b.n	8002aae <LoopFillZerobss>

08002aaa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002aaa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002aac:	3204      	adds	r2, #4

08002aae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002aae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ab0:	d3fb      	bcc.n	8002aaa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002ab2:	f00d f8f9 	bl	800fca8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002ab6:	f7fe fa87 	bl	8000fc8 <main>
  bx  lr
 8002aba:	4770      	bx	lr
     ldr   sp, =_estack      /* set stack pointer */
 8002abc:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8002ac0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002ac4:	24000214 	.word	0x24000214
  ldr r2, =_sidata
 8002ac8:	080132ac 	.word	0x080132ac
  ldr r2, =_sbss
 8002acc:	24000214 	.word	0x24000214
  ldr r4, =_ebss
 8002ad0:	24000e10 	.word	0x24000e10

08002ad4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ad4:	e7fe      	b.n	8002ad4 <ADC3_IRQHandler>
	...

08002ad8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b082      	sub	sp, #8
 8002adc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ade:	2003      	movs	r0, #3
 8002ae0:	f000 f980 	bl	8002de4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002ae4:	f003 f8f6 	bl	8005cd4 <HAL_RCC_GetSysClockFreq>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	4b15      	ldr	r3, [pc, #84]	@ (8002b40 <HAL_Init+0x68>)
 8002aec:	699b      	ldr	r3, [r3, #24]
 8002aee:	0a1b      	lsrs	r3, r3, #8
 8002af0:	f003 030f 	and.w	r3, r3, #15
 8002af4:	4913      	ldr	r1, [pc, #76]	@ (8002b44 <HAL_Init+0x6c>)
 8002af6:	5ccb      	ldrb	r3, [r1, r3]
 8002af8:	f003 031f 	and.w	r3, r3, #31
 8002afc:	fa22 f303 	lsr.w	r3, r2, r3
 8002b00:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002b02:	4b0f      	ldr	r3, [pc, #60]	@ (8002b40 <HAL_Init+0x68>)
 8002b04:	699b      	ldr	r3, [r3, #24]
 8002b06:	f003 030f 	and.w	r3, r3, #15
 8002b0a:	4a0e      	ldr	r2, [pc, #56]	@ (8002b44 <HAL_Init+0x6c>)
 8002b0c:	5cd3      	ldrb	r3, [r2, r3]
 8002b0e:	f003 031f 	and.w	r3, r3, #31
 8002b12:	687a      	ldr	r2, [r7, #4]
 8002b14:	fa22 f303 	lsr.w	r3, r2, r3
 8002b18:	4a0b      	ldr	r2, [pc, #44]	@ (8002b48 <HAL_Init+0x70>)
 8002b1a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002b1c:	4a0b      	ldr	r2, [pc, #44]	@ (8002b4c <HAL_Init+0x74>)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002b22:	200f      	movs	r0, #15
 8002b24:	f000 f814 	bl	8002b50 <HAL_InitTick>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d001      	beq.n	8002b32 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e002      	b.n	8002b38 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002b32:	f7fe fddd 	bl	80016f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b36:	2300      	movs	r3, #0
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	3708      	adds	r7, #8
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}
 8002b40:	58024400 	.word	0x58024400
 8002b44:	08012e08 	.word	0x08012e08
 8002b48:	2400000c 	.word	0x2400000c
 8002b4c:	24000008 	.word	0x24000008

08002b50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b082      	sub	sp, #8
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002b58:	4b15      	ldr	r3, [pc, #84]	@ (8002bb0 <HAL_InitTick+0x60>)
 8002b5a:	781b      	ldrb	r3, [r3, #0]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d101      	bne.n	8002b64 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	e021      	b.n	8002ba8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002b64:	4b13      	ldr	r3, [pc, #76]	@ (8002bb4 <HAL_InitTick+0x64>)
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	4b11      	ldr	r3, [pc, #68]	@ (8002bb0 <HAL_InitTick+0x60>)
 8002b6a:	781b      	ldrb	r3, [r3, #0]
 8002b6c:	4619      	mov	r1, r3
 8002b6e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002b72:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b76:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f000 f965 	bl	8002e4a <HAL_SYSTICK_Config>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d001      	beq.n	8002b8a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e00e      	b.n	8002ba8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2b0f      	cmp	r3, #15
 8002b8e:	d80a      	bhi.n	8002ba6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b90:	2200      	movs	r2, #0
 8002b92:	6879      	ldr	r1, [r7, #4]
 8002b94:	f04f 30ff 	mov.w	r0, #4294967295
 8002b98:	f000 f92f 	bl	8002dfa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b9c:	4a06      	ldr	r2, [pc, #24]	@ (8002bb8 <HAL_InitTick+0x68>)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	e000      	b.n	8002ba8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	3708      	adds	r7, #8
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}
 8002bb0:	24000044 	.word	0x24000044
 8002bb4:	24000008 	.word	0x24000008
 8002bb8:	24000040 	.word	0x24000040

08002bbc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002bc0:	4b06      	ldr	r3, [pc, #24]	@ (8002bdc <HAL_IncTick+0x20>)
 8002bc2:	781b      	ldrb	r3, [r3, #0]
 8002bc4:	461a      	mov	r2, r3
 8002bc6:	4b06      	ldr	r3, [pc, #24]	@ (8002be0 <HAL_IncTick+0x24>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4413      	add	r3, r2
 8002bcc:	4a04      	ldr	r2, [pc, #16]	@ (8002be0 <HAL_IncTick+0x24>)
 8002bce:	6013      	str	r3, [r2, #0]
}
 8002bd0:	bf00      	nop
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr
 8002bda:	bf00      	nop
 8002bdc:	24000044 	.word	0x24000044
 8002be0:	24000aa4 	.word	0x24000aa4

08002be4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002be4:	b480      	push	{r7}
 8002be6:	af00      	add	r7, sp, #0
  return uwTick;
 8002be8:	4b03      	ldr	r3, [pc, #12]	@ (8002bf8 <HAL_GetTick+0x14>)
 8002bea:	681b      	ldr	r3, [r3, #0]
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr
 8002bf6:	bf00      	nop
 8002bf8:	24000aa4 	.word	0x24000aa4

08002bfc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b084      	sub	sp, #16
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c04:	f7ff ffee 	bl	8002be4 <HAL_GetTick>
 8002c08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c14:	d005      	beq.n	8002c22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c16:	4b0a      	ldr	r3, [pc, #40]	@ (8002c40 <HAL_Delay+0x44>)
 8002c18:	781b      	ldrb	r3, [r3, #0]
 8002c1a:	461a      	mov	r2, r3
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	4413      	add	r3, r2
 8002c20:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002c22:	bf00      	nop
 8002c24:	f7ff ffde 	bl	8002be4 <HAL_GetTick>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	1ad3      	subs	r3, r2, r3
 8002c2e:	68fa      	ldr	r2, [r7, #12]
 8002c30:	429a      	cmp	r2, r3
 8002c32:	d8f7      	bhi.n	8002c24 <HAL_Delay+0x28>
  {
  }
}
 8002c34:	bf00      	nop
 8002c36:	bf00      	nop
 8002c38:	3710      	adds	r7, #16
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	24000044 	.word	0x24000044

08002c44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b085      	sub	sp, #20
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	f003 0307 	and.w	r3, r3, #7
 8002c52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c54:	4b0b      	ldr	r3, [pc, #44]	@ (8002c84 <__NVIC_SetPriorityGrouping+0x40>)
 8002c56:	68db      	ldr	r3, [r3, #12]
 8002c58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c5a:	68ba      	ldr	r2, [r7, #8]
 8002c5c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002c60:	4013      	ands	r3, r2
 8002c62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002c6c:	4b06      	ldr	r3, [pc, #24]	@ (8002c88 <__NVIC_SetPriorityGrouping+0x44>)
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c72:	4a04      	ldr	r2, [pc, #16]	@ (8002c84 <__NVIC_SetPriorityGrouping+0x40>)
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	60d3      	str	r3, [r2, #12]
}
 8002c78:	bf00      	nop
 8002c7a:	3714      	adds	r7, #20
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c82:	4770      	bx	lr
 8002c84:	e000ed00 	.word	0xe000ed00
 8002c88:	05fa0000 	.word	0x05fa0000

08002c8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c90:	4b04      	ldr	r3, [pc, #16]	@ (8002ca4 <__NVIC_GetPriorityGrouping+0x18>)
 8002c92:	68db      	ldr	r3, [r3, #12]
 8002c94:	0a1b      	lsrs	r3, r3, #8
 8002c96:	f003 0307 	and.w	r3, r3, #7
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca2:	4770      	bx	lr
 8002ca4:	e000ed00 	.word	0xe000ed00

08002ca8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b083      	sub	sp, #12
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	4603      	mov	r3, r0
 8002cb0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002cb2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	db0b      	blt.n	8002cd2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002cba:	88fb      	ldrh	r3, [r7, #6]
 8002cbc:	f003 021f 	and.w	r2, r3, #31
 8002cc0:	4907      	ldr	r1, [pc, #28]	@ (8002ce0 <__NVIC_EnableIRQ+0x38>)
 8002cc2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002cc6:	095b      	lsrs	r3, r3, #5
 8002cc8:	2001      	movs	r0, #1
 8002cca:	fa00 f202 	lsl.w	r2, r0, r2
 8002cce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002cd2:	bf00      	nop
 8002cd4:	370c      	adds	r7, #12
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cdc:	4770      	bx	lr
 8002cde:	bf00      	nop
 8002ce0:	e000e100 	.word	0xe000e100

08002ce4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b083      	sub	sp, #12
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	4603      	mov	r3, r0
 8002cec:	6039      	str	r1, [r7, #0]
 8002cee:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002cf0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	db0a      	blt.n	8002d0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	b2da      	uxtb	r2, r3
 8002cfc:	490c      	ldr	r1, [pc, #48]	@ (8002d30 <__NVIC_SetPriority+0x4c>)
 8002cfe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d02:	0112      	lsls	r2, r2, #4
 8002d04:	b2d2      	uxtb	r2, r2
 8002d06:	440b      	add	r3, r1
 8002d08:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d0c:	e00a      	b.n	8002d24 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	b2da      	uxtb	r2, r3
 8002d12:	4908      	ldr	r1, [pc, #32]	@ (8002d34 <__NVIC_SetPriority+0x50>)
 8002d14:	88fb      	ldrh	r3, [r7, #6]
 8002d16:	f003 030f 	and.w	r3, r3, #15
 8002d1a:	3b04      	subs	r3, #4
 8002d1c:	0112      	lsls	r2, r2, #4
 8002d1e:	b2d2      	uxtb	r2, r2
 8002d20:	440b      	add	r3, r1
 8002d22:	761a      	strb	r2, [r3, #24]
}
 8002d24:	bf00      	nop
 8002d26:	370c      	adds	r7, #12
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2e:	4770      	bx	lr
 8002d30:	e000e100 	.word	0xe000e100
 8002d34:	e000ed00 	.word	0xe000ed00

08002d38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b089      	sub	sp, #36	@ 0x24
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	60f8      	str	r0, [r7, #12]
 8002d40:	60b9      	str	r1, [r7, #8]
 8002d42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	f003 0307 	and.w	r3, r3, #7
 8002d4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d4c:	69fb      	ldr	r3, [r7, #28]
 8002d4e:	f1c3 0307 	rsb	r3, r3, #7
 8002d52:	2b04      	cmp	r3, #4
 8002d54:	bf28      	it	cs
 8002d56:	2304      	movcs	r3, #4
 8002d58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d5a:	69fb      	ldr	r3, [r7, #28]
 8002d5c:	3304      	adds	r3, #4
 8002d5e:	2b06      	cmp	r3, #6
 8002d60:	d902      	bls.n	8002d68 <NVIC_EncodePriority+0x30>
 8002d62:	69fb      	ldr	r3, [r7, #28]
 8002d64:	3b03      	subs	r3, #3
 8002d66:	e000      	b.n	8002d6a <NVIC_EncodePriority+0x32>
 8002d68:	2300      	movs	r3, #0
 8002d6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d6c:	f04f 32ff 	mov.w	r2, #4294967295
 8002d70:	69bb      	ldr	r3, [r7, #24]
 8002d72:	fa02 f303 	lsl.w	r3, r2, r3
 8002d76:	43da      	mvns	r2, r3
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	401a      	ands	r2, r3
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d80:	f04f 31ff 	mov.w	r1, #4294967295
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	fa01 f303 	lsl.w	r3, r1, r3
 8002d8a:	43d9      	mvns	r1, r3
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d90:	4313      	orrs	r3, r2
         );
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	3724      	adds	r7, #36	@ 0x24
 8002d96:	46bd      	mov	sp, r7
 8002d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9c:	4770      	bx	lr
	...

08002da0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b082      	sub	sp, #8
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	3b01      	subs	r3, #1
 8002dac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002db0:	d301      	bcc.n	8002db6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002db2:	2301      	movs	r3, #1
 8002db4:	e00f      	b.n	8002dd6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002db6:	4a0a      	ldr	r2, [pc, #40]	@ (8002de0 <SysTick_Config+0x40>)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	3b01      	subs	r3, #1
 8002dbc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002dbe:	210f      	movs	r1, #15
 8002dc0:	f04f 30ff 	mov.w	r0, #4294967295
 8002dc4:	f7ff ff8e 	bl	8002ce4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002dc8:	4b05      	ldr	r3, [pc, #20]	@ (8002de0 <SysTick_Config+0x40>)
 8002dca:	2200      	movs	r2, #0
 8002dcc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002dce:	4b04      	ldr	r3, [pc, #16]	@ (8002de0 <SysTick_Config+0x40>)
 8002dd0:	2207      	movs	r2, #7
 8002dd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002dd4:	2300      	movs	r3, #0
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	3708      	adds	r7, #8
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}
 8002dde:	bf00      	nop
 8002de0:	e000e010 	.word	0xe000e010

08002de4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b082      	sub	sp, #8
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002dec:	6878      	ldr	r0, [r7, #4]
 8002dee:	f7ff ff29 	bl	8002c44 <__NVIC_SetPriorityGrouping>
}
 8002df2:	bf00      	nop
 8002df4:	3708      	adds	r7, #8
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}

08002dfa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002dfa:	b580      	push	{r7, lr}
 8002dfc:	b086      	sub	sp, #24
 8002dfe:	af00      	add	r7, sp, #0
 8002e00:	4603      	mov	r3, r0
 8002e02:	60b9      	str	r1, [r7, #8]
 8002e04:	607a      	str	r2, [r7, #4]
 8002e06:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002e08:	f7ff ff40 	bl	8002c8c <__NVIC_GetPriorityGrouping>
 8002e0c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e0e:	687a      	ldr	r2, [r7, #4]
 8002e10:	68b9      	ldr	r1, [r7, #8]
 8002e12:	6978      	ldr	r0, [r7, #20]
 8002e14:	f7ff ff90 	bl	8002d38 <NVIC_EncodePriority>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002e1e:	4611      	mov	r1, r2
 8002e20:	4618      	mov	r0, r3
 8002e22:	f7ff ff5f 	bl	8002ce4 <__NVIC_SetPriority>
}
 8002e26:	bf00      	nop
 8002e28:	3718      	adds	r7, #24
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}

08002e2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e2e:	b580      	push	{r7, lr}
 8002e30:	b082      	sub	sp, #8
 8002e32:	af00      	add	r7, sp, #0
 8002e34:	4603      	mov	r3, r0
 8002e36:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e38:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f7ff ff33 	bl	8002ca8 <__NVIC_EnableIRQ>
}
 8002e42:	bf00      	nop
 8002e44:	3708      	adds	r7, #8
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}

08002e4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e4a:	b580      	push	{r7, lr}
 8002e4c:	b082      	sub	sp, #8
 8002e4e:	af00      	add	r7, sp, #0
 8002e50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	f7ff ffa4 	bl	8002da0 <SysTick_Config>
 8002e58:	4603      	mov	r3, r0
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	3708      	adds	r7, #8
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}
	...

08002e64 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8002e64:	b480      	push	{r7}
 8002e66:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002e68:	f3bf 8f5f 	dmb	sy
}
 8002e6c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002e6e:	4b07      	ldr	r3, [pc, #28]	@ (8002e8c <HAL_MPU_Disable+0x28>)
 8002e70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e72:	4a06      	ldr	r2, [pc, #24]	@ (8002e8c <HAL_MPU_Disable+0x28>)
 8002e74:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e78:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8002e7a:	4b05      	ldr	r3, [pc, #20]	@ (8002e90 <HAL_MPU_Disable+0x2c>)
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	605a      	str	r2, [r3, #4]
}
 8002e80:	bf00      	nop
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr
 8002e8a:	bf00      	nop
 8002e8c:	e000ed00 	.word	0xe000ed00
 8002e90:	e000ed90 	.word	0xe000ed90

08002e94 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b083      	sub	sp, #12
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002e9c:	4a0b      	ldr	r2, [pc, #44]	@ (8002ecc <HAL_MPU_Enable+0x38>)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	f043 0301 	orr.w	r3, r3, #1
 8002ea4:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002ea6:	4b0a      	ldr	r3, [pc, #40]	@ (8002ed0 <HAL_MPU_Enable+0x3c>)
 8002ea8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eaa:	4a09      	ldr	r2, [pc, #36]	@ (8002ed0 <HAL_MPU_Enable+0x3c>)
 8002eac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002eb0:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002eb2:	f3bf 8f4f 	dsb	sy
}
 8002eb6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002eb8:	f3bf 8f6f 	isb	sy
}
 8002ebc:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8002ebe:	bf00      	nop
 8002ec0:	370c      	adds	r7, #12
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec8:	4770      	bx	lr
 8002eca:	bf00      	nop
 8002ecc:	e000ed90 	.word	0xe000ed90
 8002ed0:	e000ed00 	.word	0xe000ed00

08002ed4 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b083      	sub	sp, #12
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	785a      	ldrb	r2, [r3, #1]
 8002ee0:	4b1b      	ldr	r3, [pc, #108]	@ (8002f50 <HAL_MPU_ConfigRegion+0x7c>)
 8002ee2:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8002ee4:	4b1a      	ldr	r3, [pc, #104]	@ (8002f50 <HAL_MPU_ConfigRegion+0x7c>)
 8002ee6:	691b      	ldr	r3, [r3, #16]
 8002ee8:	4a19      	ldr	r2, [pc, #100]	@ (8002f50 <HAL_MPU_ConfigRegion+0x7c>)
 8002eea:	f023 0301 	bic.w	r3, r3, #1
 8002eee:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8002ef0:	4a17      	ldr	r2, [pc, #92]	@ (8002f50 <HAL_MPU_ConfigRegion+0x7c>)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	7b1b      	ldrb	r3, [r3, #12]
 8002efc:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	7adb      	ldrb	r3, [r3, #11]
 8002f02:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002f04:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	7a9b      	ldrb	r3, [r3, #10]
 8002f0a:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002f0c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	7b5b      	ldrb	r3, [r3, #13]
 8002f12:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002f14:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	7b9b      	ldrb	r3, [r3, #14]
 8002f1a:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002f1c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	7bdb      	ldrb	r3, [r3, #15]
 8002f22:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002f24:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	7a5b      	ldrb	r3, [r3, #9]
 8002f2a:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002f2c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	7a1b      	ldrb	r3, [r3, #8]
 8002f32:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002f34:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8002f36:	687a      	ldr	r2, [r7, #4]
 8002f38:	7812      	ldrb	r2, [r2, #0]
 8002f3a:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002f3c:	4a04      	ldr	r2, [pc, #16]	@ (8002f50 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002f3e:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002f40:	6113      	str	r3, [r2, #16]
}
 8002f42:	bf00      	nop
 8002f44:	370c      	adds	r7, #12
 8002f46:	46bd      	mov	sp, r7
 8002f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4c:	4770      	bx	lr
 8002f4e:	bf00      	nop
 8002f50:	e000ed90 	.word	0xe000ed90

08002f54 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b086      	sub	sp, #24
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002f5c:	f7ff fe42 	bl	8002be4 <HAL_GetTick>
 8002f60:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d101      	bne.n	8002f6c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	e2dc      	b.n	8003526 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002f72:	b2db      	uxtb	r3, r3
 8002f74:	2b02      	cmp	r3, #2
 8002f76:	d008      	beq.n	8002f8a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2280      	movs	r2, #128	@ 0x80
 8002f7c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2200      	movs	r2, #0
 8002f82:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	e2cd      	b.n	8003526 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a76      	ldr	r2, [pc, #472]	@ (8003168 <HAL_DMA_Abort+0x214>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d04a      	beq.n	800302a <HAL_DMA_Abort+0xd6>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a74      	ldr	r2, [pc, #464]	@ (800316c <HAL_DMA_Abort+0x218>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d045      	beq.n	800302a <HAL_DMA_Abort+0xd6>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a73      	ldr	r2, [pc, #460]	@ (8003170 <HAL_DMA_Abort+0x21c>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d040      	beq.n	800302a <HAL_DMA_Abort+0xd6>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a71      	ldr	r2, [pc, #452]	@ (8003174 <HAL_DMA_Abort+0x220>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d03b      	beq.n	800302a <HAL_DMA_Abort+0xd6>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a70      	ldr	r2, [pc, #448]	@ (8003178 <HAL_DMA_Abort+0x224>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d036      	beq.n	800302a <HAL_DMA_Abort+0xd6>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a6e      	ldr	r2, [pc, #440]	@ (800317c <HAL_DMA_Abort+0x228>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d031      	beq.n	800302a <HAL_DMA_Abort+0xd6>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a6d      	ldr	r2, [pc, #436]	@ (8003180 <HAL_DMA_Abort+0x22c>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d02c      	beq.n	800302a <HAL_DMA_Abort+0xd6>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a6b      	ldr	r2, [pc, #428]	@ (8003184 <HAL_DMA_Abort+0x230>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d027      	beq.n	800302a <HAL_DMA_Abort+0xd6>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a6a      	ldr	r2, [pc, #424]	@ (8003188 <HAL_DMA_Abort+0x234>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d022      	beq.n	800302a <HAL_DMA_Abort+0xd6>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a68      	ldr	r2, [pc, #416]	@ (800318c <HAL_DMA_Abort+0x238>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d01d      	beq.n	800302a <HAL_DMA_Abort+0xd6>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a67      	ldr	r2, [pc, #412]	@ (8003190 <HAL_DMA_Abort+0x23c>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d018      	beq.n	800302a <HAL_DMA_Abort+0xd6>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a65      	ldr	r2, [pc, #404]	@ (8003194 <HAL_DMA_Abort+0x240>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d013      	beq.n	800302a <HAL_DMA_Abort+0xd6>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a64      	ldr	r2, [pc, #400]	@ (8003198 <HAL_DMA_Abort+0x244>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d00e      	beq.n	800302a <HAL_DMA_Abort+0xd6>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a62      	ldr	r2, [pc, #392]	@ (800319c <HAL_DMA_Abort+0x248>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d009      	beq.n	800302a <HAL_DMA_Abort+0xd6>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a61      	ldr	r2, [pc, #388]	@ (80031a0 <HAL_DMA_Abort+0x24c>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d004      	beq.n	800302a <HAL_DMA_Abort+0xd6>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a5f      	ldr	r2, [pc, #380]	@ (80031a4 <HAL_DMA_Abort+0x250>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d101      	bne.n	800302e <HAL_DMA_Abort+0xda>
 800302a:	2301      	movs	r3, #1
 800302c:	e000      	b.n	8003030 <HAL_DMA_Abort+0xdc>
 800302e:	2300      	movs	r3, #0
 8003030:	2b00      	cmp	r3, #0
 8003032:	d013      	beq.n	800305c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f022 021e 	bic.w	r2, r2, #30
 8003042:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	695a      	ldr	r2, [r3, #20]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003052:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	617b      	str	r3, [r7, #20]
 800305a:	e00a      	b.n	8003072 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f022 020e 	bic.w	r2, r2, #14
 800306a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a3c      	ldr	r2, [pc, #240]	@ (8003168 <HAL_DMA_Abort+0x214>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d072      	beq.n	8003162 <HAL_DMA_Abort+0x20e>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a3a      	ldr	r2, [pc, #232]	@ (800316c <HAL_DMA_Abort+0x218>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d06d      	beq.n	8003162 <HAL_DMA_Abort+0x20e>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a39      	ldr	r2, [pc, #228]	@ (8003170 <HAL_DMA_Abort+0x21c>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d068      	beq.n	8003162 <HAL_DMA_Abort+0x20e>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a37      	ldr	r2, [pc, #220]	@ (8003174 <HAL_DMA_Abort+0x220>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d063      	beq.n	8003162 <HAL_DMA_Abort+0x20e>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a36      	ldr	r2, [pc, #216]	@ (8003178 <HAL_DMA_Abort+0x224>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d05e      	beq.n	8003162 <HAL_DMA_Abort+0x20e>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a34      	ldr	r2, [pc, #208]	@ (800317c <HAL_DMA_Abort+0x228>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d059      	beq.n	8003162 <HAL_DMA_Abort+0x20e>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a33      	ldr	r2, [pc, #204]	@ (8003180 <HAL_DMA_Abort+0x22c>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d054      	beq.n	8003162 <HAL_DMA_Abort+0x20e>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a31      	ldr	r2, [pc, #196]	@ (8003184 <HAL_DMA_Abort+0x230>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d04f      	beq.n	8003162 <HAL_DMA_Abort+0x20e>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a30      	ldr	r2, [pc, #192]	@ (8003188 <HAL_DMA_Abort+0x234>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d04a      	beq.n	8003162 <HAL_DMA_Abort+0x20e>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a2e      	ldr	r2, [pc, #184]	@ (800318c <HAL_DMA_Abort+0x238>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d045      	beq.n	8003162 <HAL_DMA_Abort+0x20e>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a2d      	ldr	r2, [pc, #180]	@ (8003190 <HAL_DMA_Abort+0x23c>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d040      	beq.n	8003162 <HAL_DMA_Abort+0x20e>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a2b      	ldr	r2, [pc, #172]	@ (8003194 <HAL_DMA_Abort+0x240>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d03b      	beq.n	8003162 <HAL_DMA_Abort+0x20e>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a2a      	ldr	r2, [pc, #168]	@ (8003198 <HAL_DMA_Abort+0x244>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d036      	beq.n	8003162 <HAL_DMA_Abort+0x20e>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a28      	ldr	r2, [pc, #160]	@ (800319c <HAL_DMA_Abort+0x248>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d031      	beq.n	8003162 <HAL_DMA_Abort+0x20e>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a27      	ldr	r2, [pc, #156]	@ (80031a0 <HAL_DMA_Abort+0x24c>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d02c      	beq.n	8003162 <HAL_DMA_Abort+0x20e>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a25      	ldr	r2, [pc, #148]	@ (80031a4 <HAL_DMA_Abort+0x250>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d027      	beq.n	8003162 <HAL_DMA_Abort+0x20e>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a24      	ldr	r2, [pc, #144]	@ (80031a8 <HAL_DMA_Abort+0x254>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d022      	beq.n	8003162 <HAL_DMA_Abort+0x20e>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a22      	ldr	r2, [pc, #136]	@ (80031ac <HAL_DMA_Abort+0x258>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d01d      	beq.n	8003162 <HAL_DMA_Abort+0x20e>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a21      	ldr	r2, [pc, #132]	@ (80031b0 <HAL_DMA_Abort+0x25c>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d018      	beq.n	8003162 <HAL_DMA_Abort+0x20e>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a1f      	ldr	r2, [pc, #124]	@ (80031b4 <HAL_DMA_Abort+0x260>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d013      	beq.n	8003162 <HAL_DMA_Abort+0x20e>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a1e      	ldr	r2, [pc, #120]	@ (80031b8 <HAL_DMA_Abort+0x264>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d00e      	beq.n	8003162 <HAL_DMA_Abort+0x20e>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a1c      	ldr	r2, [pc, #112]	@ (80031bc <HAL_DMA_Abort+0x268>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d009      	beq.n	8003162 <HAL_DMA_Abort+0x20e>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a1b      	ldr	r2, [pc, #108]	@ (80031c0 <HAL_DMA_Abort+0x26c>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d004      	beq.n	8003162 <HAL_DMA_Abort+0x20e>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a19      	ldr	r2, [pc, #100]	@ (80031c4 <HAL_DMA_Abort+0x270>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d132      	bne.n	80031c8 <HAL_DMA_Abort+0x274>
 8003162:	2301      	movs	r3, #1
 8003164:	e031      	b.n	80031ca <HAL_DMA_Abort+0x276>
 8003166:	bf00      	nop
 8003168:	40020010 	.word	0x40020010
 800316c:	40020028 	.word	0x40020028
 8003170:	40020040 	.word	0x40020040
 8003174:	40020058 	.word	0x40020058
 8003178:	40020070 	.word	0x40020070
 800317c:	40020088 	.word	0x40020088
 8003180:	400200a0 	.word	0x400200a0
 8003184:	400200b8 	.word	0x400200b8
 8003188:	40020410 	.word	0x40020410
 800318c:	40020428 	.word	0x40020428
 8003190:	40020440 	.word	0x40020440
 8003194:	40020458 	.word	0x40020458
 8003198:	40020470 	.word	0x40020470
 800319c:	40020488 	.word	0x40020488
 80031a0:	400204a0 	.word	0x400204a0
 80031a4:	400204b8 	.word	0x400204b8
 80031a8:	58025408 	.word	0x58025408
 80031ac:	5802541c 	.word	0x5802541c
 80031b0:	58025430 	.word	0x58025430
 80031b4:	58025444 	.word	0x58025444
 80031b8:	58025458 	.word	0x58025458
 80031bc:	5802546c 	.word	0x5802546c
 80031c0:	58025480 	.word	0x58025480
 80031c4:	58025494 	.word	0x58025494
 80031c8:	2300      	movs	r3, #0
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d007      	beq.n	80031de <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031d8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80031dc:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a6d      	ldr	r2, [pc, #436]	@ (8003398 <HAL_DMA_Abort+0x444>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d04a      	beq.n	800327e <HAL_DMA_Abort+0x32a>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a6b      	ldr	r2, [pc, #428]	@ (800339c <HAL_DMA_Abort+0x448>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d045      	beq.n	800327e <HAL_DMA_Abort+0x32a>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a6a      	ldr	r2, [pc, #424]	@ (80033a0 <HAL_DMA_Abort+0x44c>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d040      	beq.n	800327e <HAL_DMA_Abort+0x32a>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a68      	ldr	r2, [pc, #416]	@ (80033a4 <HAL_DMA_Abort+0x450>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d03b      	beq.n	800327e <HAL_DMA_Abort+0x32a>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a67      	ldr	r2, [pc, #412]	@ (80033a8 <HAL_DMA_Abort+0x454>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d036      	beq.n	800327e <HAL_DMA_Abort+0x32a>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a65      	ldr	r2, [pc, #404]	@ (80033ac <HAL_DMA_Abort+0x458>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d031      	beq.n	800327e <HAL_DMA_Abort+0x32a>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a64      	ldr	r2, [pc, #400]	@ (80033b0 <HAL_DMA_Abort+0x45c>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d02c      	beq.n	800327e <HAL_DMA_Abort+0x32a>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a62      	ldr	r2, [pc, #392]	@ (80033b4 <HAL_DMA_Abort+0x460>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d027      	beq.n	800327e <HAL_DMA_Abort+0x32a>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a61      	ldr	r2, [pc, #388]	@ (80033b8 <HAL_DMA_Abort+0x464>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d022      	beq.n	800327e <HAL_DMA_Abort+0x32a>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a5f      	ldr	r2, [pc, #380]	@ (80033bc <HAL_DMA_Abort+0x468>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d01d      	beq.n	800327e <HAL_DMA_Abort+0x32a>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a5e      	ldr	r2, [pc, #376]	@ (80033c0 <HAL_DMA_Abort+0x46c>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d018      	beq.n	800327e <HAL_DMA_Abort+0x32a>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a5c      	ldr	r2, [pc, #368]	@ (80033c4 <HAL_DMA_Abort+0x470>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d013      	beq.n	800327e <HAL_DMA_Abort+0x32a>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a5b      	ldr	r2, [pc, #364]	@ (80033c8 <HAL_DMA_Abort+0x474>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d00e      	beq.n	800327e <HAL_DMA_Abort+0x32a>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a59      	ldr	r2, [pc, #356]	@ (80033cc <HAL_DMA_Abort+0x478>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d009      	beq.n	800327e <HAL_DMA_Abort+0x32a>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a58      	ldr	r2, [pc, #352]	@ (80033d0 <HAL_DMA_Abort+0x47c>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d004      	beq.n	800327e <HAL_DMA_Abort+0x32a>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a56      	ldr	r2, [pc, #344]	@ (80033d4 <HAL_DMA_Abort+0x480>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d108      	bne.n	8003290 <HAL_DMA_Abort+0x33c>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f022 0201 	bic.w	r2, r2, #1
 800328c:	601a      	str	r2, [r3, #0]
 800328e:	e007      	b.n	80032a0 <HAL_DMA_Abort+0x34c>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f022 0201 	bic.w	r2, r2, #1
 800329e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80032a0:	e013      	b.n	80032ca <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80032a2:	f7ff fc9f 	bl	8002be4 <HAL_GetTick>
 80032a6:	4602      	mov	r2, r0
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	1ad3      	subs	r3, r2, r3
 80032ac:	2b05      	cmp	r3, #5
 80032ae:	d90c      	bls.n	80032ca <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2220      	movs	r2, #32
 80032b4:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2203      	movs	r2, #3
 80032ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2200      	movs	r2, #0
 80032c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	e12d      	b.n	8003526 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 0301 	and.w	r3, r3, #1
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d1e5      	bne.n	80032a2 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a2f      	ldr	r2, [pc, #188]	@ (8003398 <HAL_DMA_Abort+0x444>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d04a      	beq.n	8003376 <HAL_DMA_Abort+0x422>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a2d      	ldr	r2, [pc, #180]	@ (800339c <HAL_DMA_Abort+0x448>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d045      	beq.n	8003376 <HAL_DMA_Abort+0x422>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a2c      	ldr	r2, [pc, #176]	@ (80033a0 <HAL_DMA_Abort+0x44c>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d040      	beq.n	8003376 <HAL_DMA_Abort+0x422>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a2a      	ldr	r2, [pc, #168]	@ (80033a4 <HAL_DMA_Abort+0x450>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d03b      	beq.n	8003376 <HAL_DMA_Abort+0x422>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a29      	ldr	r2, [pc, #164]	@ (80033a8 <HAL_DMA_Abort+0x454>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d036      	beq.n	8003376 <HAL_DMA_Abort+0x422>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a27      	ldr	r2, [pc, #156]	@ (80033ac <HAL_DMA_Abort+0x458>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d031      	beq.n	8003376 <HAL_DMA_Abort+0x422>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a26      	ldr	r2, [pc, #152]	@ (80033b0 <HAL_DMA_Abort+0x45c>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d02c      	beq.n	8003376 <HAL_DMA_Abort+0x422>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a24      	ldr	r2, [pc, #144]	@ (80033b4 <HAL_DMA_Abort+0x460>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d027      	beq.n	8003376 <HAL_DMA_Abort+0x422>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a23      	ldr	r2, [pc, #140]	@ (80033b8 <HAL_DMA_Abort+0x464>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d022      	beq.n	8003376 <HAL_DMA_Abort+0x422>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a21      	ldr	r2, [pc, #132]	@ (80033bc <HAL_DMA_Abort+0x468>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d01d      	beq.n	8003376 <HAL_DMA_Abort+0x422>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a20      	ldr	r2, [pc, #128]	@ (80033c0 <HAL_DMA_Abort+0x46c>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d018      	beq.n	8003376 <HAL_DMA_Abort+0x422>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a1e      	ldr	r2, [pc, #120]	@ (80033c4 <HAL_DMA_Abort+0x470>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d013      	beq.n	8003376 <HAL_DMA_Abort+0x422>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a1d      	ldr	r2, [pc, #116]	@ (80033c8 <HAL_DMA_Abort+0x474>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d00e      	beq.n	8003376 <HAL_DMA_Abort+0x422>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a1b      	ldr	r2, [pc, #108]	@ (80033cc <HAL_DMA_Abort+0x478>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d009      	beq.n	8003376 <HAL_DMA_Abort+0x422>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a1a      	ldr	r2, [pc, #104]	@ (80033d0 <HAL_DMA_Abort+0x47c>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d004      	beq.n	8003376 <HAL_DMA_Abort+0x422>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a18      	ldr	r2, [pc, #96]	@ (80033d4 <HAL_DMA_Abort+0x480>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d101      	bne.n	800337a <HAL_DMA_Abort+0x426>
 8003376:	2301      	movs	r3, #1
 8003378:	e000      	b.n	800337c <HAL_DMA_Abort+0x428>
 800337a:	2300      	movs	r3, #0
 800337c:	2b00      	cmp	r3, #0
 800337e:	d02b      	beq.n	80033d8 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003384:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800338a:	f003 031f 	and.w	r3, r3, #31
 800338e:	223f      	movs	r2, #63	@ 0x3f
 8003390:	409a      	lsls	r2, r3
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	609a      	str	r2, [r3, #8]
 8003396:	e02a      	b.n	80033ee <HAL_DMA_Abort+0x49a>
 8003398:	40020010 	.word	0x40020010
 800339c:	40020028 	.word	0x40020028
 80033a0:	40020040 	.word	0x40020040
 80033a4:	40020058 	.word	0x40020058
 80033a8:	40020070 	.word	0x40020070
 80033ac:	40020088 	.word	0x40020088
 80033b0:	400200a0 	.word	0x400200a0
 80033b4:	400200b8 	.word	0x400200b8
 80033b8:	40020410 	.word	0x40020410
 80033bc:	40020428 	.word	0x40020428
 80033c0:	40020440 	.word	0x40020440
 80033c4:	40020458 	.word	0x40020458
 80033c8:	40020470 	.word	0x40020470
 80033cc:	40020488 	.word	0x40020488
 80033d0:	400204a0 	.word	0x400204a0
 80033d4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033dc:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033e2:	f003 031f 	and.w	r3, r3, #31
 80033e6:	2201      	movs	r2, #1
 80033e8:	409a      	lsls	r2, r3
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a4f      	ldr	r2, [pc, #316]	@ (8003530 <HAL_DMA_Abort+0x5dc>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d072      	beq.n	80034de <HAL_DMA_Abort+0x58a>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a4d      	ldr	r2, [pc, #308]	@ (8003534 <HAL_DMA_Abort+0x5e0>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d06d      	beq.n	80034de <HAL_DMA_Abort+0x58a>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a4c      	ldr	r2, [pc, #304]	@ (8003538 <HAL_DMA_Abort+0x5e4>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d068      	beq.n	80034de <HAL_DMA_Abort+0x58a>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a4a      	ldr	r2, [pc, #296]	@ (800353c <HAL_DMA_Abort+0x5e8>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d063      	beq.n	80034de <HAL_DMA_Abort+0x58a>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a49      	ldr	r2, [pc, #292]	@ (8003540 <HAL_DMA_Abort+0x5ec>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d05e      	beq.n	80034de <HAL_DMA_Abort+0x58a>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a47      	ldr	r2, [pc, #284]	@ (8003544 <HAL_DMA_Abort+0x5f0>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d059      	beq.n	80034de <HAL_DMA_Abort+0x58a>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a46      	ldr	r2, [pc, #280]	@ (8003548 <HAL_DMA_Abort+0x5f4>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d054      	beq.n	80034de <HAL_DMA_Abort+0x58a>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a44      	ldr	r2, [pc, #272]	@ (800354c <HAL_DMA_Abort+0x5f8>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d04f      	beq.n	80034de <HAL_DMA_Abort+0x58a>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a43      	ldr	r2, [pc, #268]	@ (8003550 <HAL_DMA_Abort+0x5fc>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d04a      	beq.n	80034de <HAL_DMA_Abort+0x58a>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a41      	ldr	r2, [pc, #260]	@ (8003554 <HAL_DMA_Abort+0x600>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d045      	beq.n	80034de <HAL_DMA_Abort+0x58a>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a40      	ldr	r2, [pc, #256]	@ (8003558 <HAL_DMA_Abort+0x604>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d040      	beq.n	80034de <HAL_DMA_Abort+0x58a>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a3e      	ldr	r2, [pc, #248]	@ (800355c <HAL_DMA_Abort+0x608>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d03b      	beq.n	80034de <HAL_DMA_Abort+0x58a>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a3d      	ldr	r2, [pc, #244]	@ (8003560 <HAL_DMA_Abort+0x60c>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d036      	beq.n	80034de <HAL_DMA_Abort+0x58a>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a3b      	ldr	r2, [pc, #236]	@ (8003564 <HAL_DMA_Abort+0x610>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d031      	beq.n	80034de <HAL_DMA_Abort+0x58a>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a3a      	ldr	r2, [pc, #232]	@ (8003568 <HAL_DMA_Abort+0x614>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d02c      	beq.n	80034de <HAL_DMA_Abort+0x58a>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a38      	ldr	r2, [pc, #224]	@ (800356c <HAL_DMA_Abort+0x618>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d027      	beq.n	80034de <HAL_DMA_Abort+0x58a>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a37      	ldr	r2, [pc, #220]	@ (8003570 <HAL_DMA_Abort+0x61c>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d022      	beq.n	80034de <HAL_DMA_Abort+0x58a>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a35      	ldr	r2, [pc, #212]	@ (8003574 <HAL_DMA_Abort+0x620>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d01d      	beq.n	80034de <HAL_DMA_Abort+0x58a>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a34      	ldr	r2, [pc, #208]	@ (8003578 <HAL_DMA_Abort+0x624>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d018      	beq.n	80034de <HAL_DMA_Abort+0x58a>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a32      	ldr	r2, [pc, #200]	@ (800357c <HAL_DMA_Abort+0x628>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d013      	beq.n	80034de <HAL_DMA_Abort+0x58a>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a31      	ldr	r2, [pc, #196]	@ (8003580 <HAL_DMA_Abort+0x62c>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d00e      	beq.n	80034de <HAL_DMA_Abort+0x58a>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a2f      	ldr	r2, [pc, #188]	@ (8003584 <HAL_DMA_Abort+0x630>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d009      	beq.n	80034de <HAL_DMA_Abort+0x58a>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a2e      	ldr	r2, [pc, #184]	@ (8003588 <HAL_DMA_Abort+0x634>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d004      	beq.n	80034de <HAL_DMA_Abort+0x58a>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a2c      	ldr	r2, [pc, #176]	@ (800358c <HAL_DMA_Abort+0x638>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d101      	bne.n	80034e2 <HAL_DMA_Abort+0x58e>
 80034de:	2301      	movs	r3, #1
 80034e0:	e000      	b.n	80034e4 <HAL_DMA_Abort+0x590>
 80034e2:	2300      	movs	r3, #0
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d015      	beq.n	8003514 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80034ec:	687a      	ldr	r2, [r7, #4]
 80034ee:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80034f0:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d00c      	beq.n	8003514 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003504:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003508:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800350e:	687a      	ldr	r2, [r7, #4]
 8003510:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003512:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2201      	movs	r2, #1
 8003518:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2200      	movs	r2, #0
 8003520:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8003524:	2300      	movs	r3, #0
}
 8003526:	4618      	mov	r0, r3
 8003528:	3718      	adds	r7, #24
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}
 800352e:	bf00      	nop
 8003530:	40020010 	.word	0x40020010
 8003534:	40020028 	.word	0x40020028
 8003538:	40020040 	.word	0x40020040
 800353c:	40020058 	.word	0x40020058
 8003540:	40020070 	.word	0x40020070
 8003544:	40020088 	.word	0x40020088
 8003548:	400200a0 	.word	0x400200a0
 800354c:	400200b8 	.word	0x400200b8
 8003550:	40020410 	.word	0x40020410
 8003554:	40020428 	.word	0x40020428
 8003558:	40020440 	.word	0x40020440
 800355c:	40020458 	.word	0x40020458
 8003560:	40020470 	.word	0x40020470
 8003564:	40020488 	.word	0x40020488
 8003568:	400204a0 	.word	0x400204a0
 800356c:	400204b8 	.word	0x400204b8
 8003570:	58025408 	.word	0x58025408
 8003574:	5802541c 	.word	0x5802541c
 8003578:	58025430 	.word	0x58025430
 800357c:	58025444 	.word	0x58025444
 8003580:	58025458 	.word	0x58025458
 8003584:	5802546c 	.word	0x5802546c
 8003588:	58025480 	.word	0x58025480
 800358c:	58025494 	.word	0x58025494

08003590 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b084      	sub	sp, #16
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d101      	bne.n	80035a2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e237      	b.n	8003a12 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	2b02      	cmp	r3, #2
 80035ac:	d004      	beq.n	80035b8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2280      	movs	r2, #128	@ 0x80
 80035b2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	e22c      	b.n	8003a12 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a5c      	ldr	r2, [pc, #368]	@ (8003730 <HAL_DMA_Abort_IT+0x1a0>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d04a      	beq.n	8003658 <HAL_DMA_Abort_IT+0xc8>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a5b      	ldr	r2, [pc, #364]	@ (8003734 <HAL_DMA_Abort_IT+0x1a4>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d045      	beq.n	8003658 <HAL_DMA_Abort_IT+0xc8>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a59      	ldr	r2, [pc, #356]	@ (8003738 <HAL_DMA_Abort_IT+0x1a8>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d040      	beq.n	8003658 <HAL_DMA_Abort_IT+0xc8>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a58      	ldr	r2, [pc, #352]	@ (800373c <HAL_DMA_Abort_IT+0x1ac>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d03b      	beq.n	8003658 <HAL_DMA_Abort_IT+0xc8>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a56      	ldr	r2, [pc, #344]	@ (8003740 <HAL_DMA_Abort_IT+0x1b0>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d036      	beq.n	8003658 <HAL_DMA_Abort_IT+0xc8>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a55      	ldr	r2, [pc, #340]	@ (8003744 <HAL_DMA_Abort_IT+0x1b4>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d031      	beq.n	8003658 <HAL_DMA_Abort_IT+0xc8>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a53      	ldr	r2, [pc, #332]	@ (8003748 <HAL_DMA_Abort_IT+0x1b8>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d02c      	beq.n	8003658 <HAL_DMA_Abort_IT+0xc8>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a52      	ldr	r2, [pc, #328]	@ (800374c <HAL_DMA_Abort_IT+0x1bc>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d027      	beq.n	8003658 <HAL_DMA_Abort_IT+0xc8>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a50      	ldr	r2, [pc, #320]	@ (8003750 <HAL_DMA_Abort_IT+0x1c0>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d022      	beq.n	8003658 <HAL_DMA_Abort_IT+0xc8>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a4f      	ldr	r2, [pc, #316]	@ (8003754 <HAL_DMA_Abort_IT+0x1c4>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d01d      	beq.n	8003658 <HAL_DMA_Abort_IT+0xc8>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a4d      	ldr	r2, [pc, #308]	@ (8003758 <HAL_DMA_Abort_IT+0x1c8>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d018      	beq.n	8003658 <HAL_DMA_Abort_IT+0xc8>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a4c      	ldr	r2, [pc, #304]	@ (800375c <HAL_DMA_Abort_IT+0x1cc>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d013      	beq.n	8003658 <HAL_DMA_Abort_IT+0xc8>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a4a      	ldr	r2, [pc, #296]	@ (8003760 <HAL_DMA_Abort_IT+0x1d0>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d00e      	beq.n	8003658 <HAL_DMA_Abort_IT+0xc8>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a49      	ldr	r2, [pc, #292]	@ (8003764 <HAL_DMA_Abort_IT+0x1d4>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d009      	beq.n	8003658 <HAL_DMA_Abort_IT+0xc8>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a47      	ldr	r2, [pc, #284]	@ (8003768 <HAL_DMA_Abort_IT+0x1d8>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d004      	beq.n	8003658 <HAL_DMA_Abort_IT+0xc8>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a46      	ldr	r2, [pc, #280]	@ (800376c <HAL_DMA_Abort_IT+0x1dc>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d101      	bne.n	800365c <HAL_DMA_Abort_IT+0xcc>
 8003658:	2301      	movs	r3, #1
 800365a:	e000      	b.n	800365e <HAL_DMA_Abort_IT+0xce>
 800365c:	2300      	movs	r3, #0
 800365e:	2b00      	cmp	r3, #0
 8003660:	f000 8086 	beq.w	8003770 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2204      	movs	r2, #4
 8003668:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a2f      	ldr	r2, [pc, #188]	@ (8003730 <HAL_DMA_Abort_IT+0x1a0>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d04a      	beq.n	800370c <HAL_DMA_Abort_IT+0x17c>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a2e      	ldr	r2, [pc, #184]	@ (8003734 <HAL_DMA_Abort_IT+0x1a4>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d045      	beq.n	800370c <HAL_DMA_Abort_IT+0x17c>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a2c      	ldr	r2, [pc, #176]	@ (8003738 <HAL_DMA_Abort_IT+0x1a8>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d040      	beq.n	800370c <HAL_DMA_Abort_IT+0x17c>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a2b      	ldr	r2, [pc, #172]	@ (800373c <HAL_DMA_Abort_IT+0x1ac>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d03b      	beq.n	800370c <HAL_DMA_Abort_IT+0x17c>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a29      	ldr	r2, [pc, #164]	@ (8003740 <HAL_DMA_Abort_IT+0x1b0>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d036      	beq.n	800370c <HAL_DMA_Abort_IT+0x17c>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a28      	ldr	r2, [pc, #160]	@ (8003744 <HAL_DMA_Abort_IT+0x1b4>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d031      	beq.n	800370c <HAL_DMA_Abort_IT+0x17c>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a26      	ldr	r2, [pc, #152]	@ (8003748 <HAL_DMA_Abort_IT+0x1b8>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d02c      	beq.n	800370c <HAL_DMA_Abort_IT+0x17c>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a25      	ldr	r2, [pc, #148]	@ (800374c <HAL_DMA_Abort_IT+0x1bc>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d027      	beq.n	800370c <HAL_DMA_Abort_IT+0x17c>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a23      	ldr	r2, [pc, #140]	@ (8003750 <HAL_DMA_Abort_IT+0x1c0>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d022      	beq.n	800370c <HAL_DMA_Abort_IT+0x17c>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a22      	ldr	r2, [pc, #136]	@ (8003754 <HAL_DMA_Abort_IT+0x1c4>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d01d      	beq.n	800370c <HAL_DMA_Abort_IT+0x17c>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a20      	ldr	r2, [pc, #128]	@ (8003758 <HAL_DMA_Abort_IT+0x1c8>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d018      	beq.n	800370c <HAL_DMA_Abort_IT+0x17c>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a1f      	ldr	r2, [pc, #124]	@ (800375c <HAL_DMA_Abort_IT+0x1cc>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d013      	beq.n	800370c <HAL_DMA_Abort_IT+0x17c>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a1d      	ldr	r2, [pc, #116]	@ (8003760 <HAL_DMA_Abort_IT+0x1d0>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d00e      	beq.n	800370c <HAL_DMA_Abort_IT+0x17c>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a1c      	ldr	r2, [pc, #112]	@ (8003764 <HAL_DMA_Abort_IT+0x1d4>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d009      	beq.n	800370c <HAL_DMA_Abort_IT+0x17c>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a1a      	ldr	r2, [pc, #104]	@ (8003768 <HAL_DMA_Abort_IT+0x1d8>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d004      	beq.n	800370c <HAL_DMA_Abort_IT+0x17c>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a19      	ldr	r2, [pc, #100]	@ (800376c <HAL_DMA_Abort_IT+0x1dc>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d108      	bne.n	800371e <HAL_DMA_Abort_IT+0x18e>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	681a      	ldr	r2, [r3, #0]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f022 0201 	bic.w	r2, r2, #1
 800371a:	601a      	str	r2, [r3, #0]
 800371c:	e178      	b.n	8003a10 <HAL_DMA_Abort_IT+0x480>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f022 0201 	bic.w	r2, r2, #1
 800372c:	601a      	str	r2, [r3, #0]
 800372e:	e16f      	b.n	8003a10 <HAL_DMA_Abort_IT+0x480>
 8003730:	40020010 	.word	0x40020010
 8003734:	40020028 	.word	0x40020028
 8003738:	40020040 	.word	0x40020040
 800373c:	40020058 	.word	0x40020058
 8003740:	40020070 	.word	0x40020070
 8003744:	40020088 	.word	0x40020088
 8003748:	400200a0 	.word	0x400200a0
 800374c:	400200b8 	.word	0x400200b8
 8003750:	40020410 	.word	0x40020410
 8003754:	40020428 	.word	0x40020428
 8003758:	40020440 	.word	0x40020440
 800375c:	40020458 	.word	0x40020458
 8003760:	40020470 	.word	0x40020470
 8003764:	40020488 	.word	0x40020488
 8003768:	400204a0 	.word	0x400204a0
 800376c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	681a      	ldr	r2, [r3, #0]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f022 020e 	bic.w	r2, r2, #14
 800377e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a6c      	ldr	r2, [pc, #432]	@ (8003938 <HAL_DMA_Abort_IT+0x3a8>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d04a      	beq.n	8003820 <HAL_DMA_Abort_IT+0x290>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a6b      	ldr	r2, [pc, #428]	@ (800393c <HAL_DMA_Abort_IT+0x3ac>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d045      	beq.n	8003820 <HAL_DMA_Abort_IT+0x290>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a69      	ldr	r2, [pc, #420]	@ (8003940 <HAL_DMA_Abort_IT+0x3b0>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d040      	beq.n	8003820 <HAL_DMA_Abort_IT+0x290>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a68      	ldr	r2, [pc, #416]	@ (8003944 <HAL_DMA_Abort_IT+0x3b4>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d03b      	beq.n	8003820 <HAL_DMA_Abort_IT+0x290>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a66      	ldr	r2, [pc, #408]	@ (8003948 <HAL_DMA_Abort_IT+0x3b8>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d036      	beq.n	8003820 <HAL_DMA_Abort_IT+0x290>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a65      	ldr	r2, [pc, #404]	@ (800394c <HAL_DMA_Abort_IT+0x3bc>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d031      	beq.n	8003820 <HAL_DMA_Abort_IT+0x290>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a63      	ldr	r2, [pc, #396]	@ (8003950 <HAL_DMA_Abort_IT+0x3c0>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d02c      	beq.n	8003820 <HAL_DMA_Abort_IT+0x290>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a62      	ldr	r2, [pc, #392]	@ (8003954 <HAL_DMA_Abort_IT+0x3c4>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d027      	beq.n	8003820 <HAL_DMA_Abort_IT+0x290>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a60      	ldr	r2, [pc, #384]	@ (8003958 <HAL_DMA_Abort_IT+0x3c8>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d022      	beq.n	8003820 <HAL_DMA_Abort_IT+0x290>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a5f      	ldr	r2, [pc, #380]	@ (800395c <HAL_DMA_Abort_IT+0x3cc>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d01d      	beq.n	8003820 <HAL_DMA_Abort_IT+0x290>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a5d      	ldr	r2, [pc, #372]	@ (8003960 <HAL_DMA_Abort_IT+0x3d0>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d018      	beq.n	8003820 <HAL_DMA_Abort_IT+0x290>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a5c      	ldr	r2, [pc, #368]	@ (8003964 <HAL_DMA_Abort_IT+0x3d4>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d013      	beq.n	8003820 <HAL_DMA_Abort_IT+0x290>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a5a      	ldr	r2, [pc, #360]	@ (8003968 <HAL_DMA_Abort_IT+0x3d8>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d00e      	beq.n	8003820 <HAL_DMA_Abort_IT+0x290>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a59      	ldr	r2, [pc, #356]	@ (800396c <HAL_DMA_Abort_IT+0x3dc>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d009      	beq.n	8003820 <HAL_DMA_Abort_IT+0x290>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a57      	ldr	r2, [pc, #348]	@ (8003970 <HAL_DMA_Abort_IT+0x3e0>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d004      	beq.n	8003820 <HAL_DMA_Abort_IT+0x290>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a56      	ldr	r2, [pc, #344]	@ (8003974 <HAL_DMA_Abort_IT+0x3e4>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d108      	bne.n	8003832 <HAL_DMA_Abort_IT+0x2a2>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f022 0201 	bic.w	r2, r2, #1
 800382e:	601a      	str	r2, [r3, #0]
 8003830:	e007      	b.n	8003842 <HAL_DMA_Abort_IT+0x2b2>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f022 0201 	bic.w	r2, r2, #1
 8003840:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a3c      	ldr	r2, [pc, #240]	@ (8003938 <HAL_DMA_Abort_IT+0x3a8>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d072      	beq.n	8003932 <HAL_DMA_Abort_IT+0x3a2>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a3a      	ldr	r2, [pc, #232]	@ (800393c <HAL_DMA_Abort_IT+0x3ac>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d06d      	beq.n	8003932 <HAL_DMA_Abort_IT+0x3a2>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a39      	ldr	r2, [pc, #228]	@ (8003940 <HAL_DMA_Abort_IT+0x3b0>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d068      	beq.n	8003932 <HAL_DMA_Abort_IT+0x3a2>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a37      	ldr	r2, [pc, #220]	@ (8003944 <HAL_DMA_Abort_IT+0x3b4>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d063      	beq.n	8003932 <HAL_DMA_Abort_IT+0x3a2>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a36      	ldr	r2, [pc, #216]	@ (8003948 <HAL_DMA_Abort_IT+0x3b8>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d05e      	beq.n	8003932 <HAL_DMA_Abort_IT+0x3a2>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a34      	ldr	r2, [pc, #208]	@ (800394c <HAL_DMA_Abort_IT+0x3bc>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d059      	beq.n	8003932 <HAL_DMA_Abort_IT+0x3a2>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a33      	ldr	r2, [pc, #204]	@ (8003950 <HAL_DMA_Abort_IT+0x3c0>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d054      	beq.n	8003932 <HAL_DMA_Abort_IT+0x3a2>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a31      	ldr	r2, [pc, #196]	@ (8003954 <HAL_DMA_Abort_IT+0x3c4>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d04f      	beq.n	8003932 <HAL_DMA_Abort_IT+0x3a2>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a30      	ldr	r2, [pc, #192]	@ (8003958 <HAL_DMA_Abort_IT+0x3c8>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d04a      	beq.n	8003932 <HAL_DMA_Abort_IT+0x3a2>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a2e      	ldr	r2, [pc, #184]	@ (800395c <HAL_DMA_Abort_IT+0x3cc>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d045      	beq.n	8003932 <HAL_DMA_Abort_IT+0x3a2>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a2d      	ldr	r2, [pc, #180]	@ (8003960 <HAL_DMA_Abort_IT+0x3d0>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d040      	beq.n	8003932 <HAL_DMA_Abort_IT+0x3a2>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a2b      	ldr	r2, [pc, #172]	@ (8003964 <HAL_DMA_Abort_IT+0x3d4>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d03b      	beq.n	8003932 <HAL_DMA_Abort_IT+0x3a2>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a2a      	ldr	r2, [pc, #168]	@ (8003968 <HAL_DMA_Abort_IT+0x3d8>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d036      	beq.n	8003932 <HAL_DMA_Abort_IT+0x3a2>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a28      	ldr	r2, [pc, #160]	@ (800396c <HAL_DMA_Abort_IT+0x3dc>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d031      	beq.n	8003932 <HAL_DMA_Abort_IT+0x3a2>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a27      	ldr	r2, [pc, #156]	@ (8003970 <HAL_DMA_Abort_IT+0x3e0>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d02c      	beq.n	8003932 <HAL_DMA_Abort_IT+0x3a2>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a25      	ldr	r2, [pc, #148]	@ (8003974 <HAL_DMA_Abort_IT+0x3e4>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d027      	beq.n	8003932 <HAL_DMA_Abort_IT+0x3a2>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a24      	ldr	r2, [pc, #144]	@ (8003978 <HAL_DMA_Abort_IT+0x3e8>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d022      	beq.n	8003932 <HAL_DMA_Abort_IT+0x3a2>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a22      	ldr	r2, [pc, #136]	@ (800397c <HAL_DMA_Abort_IT+0x3ec>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d01d      	beq.n	8003932 <HAL_DMA_Abort_IT+0x3a2>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a21      	ldr	r2, [pc, #132]	@ (8003980 <HAL_DMA_Abort_IT+0x3f0>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d018      	beq.n	8003932 <HAL_DMA_Abort_IT+0x3a2>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a1f      	ldr	r2, [pc, #124]	@ (8003984 <HAL_DMA_Abort_IT+0x3f4>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d013      	beq.n	8003932 <HAL_DMA_Abort_IT+0x3a2>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a1e      	ldr	r2, [pc, #120]	@ (8003988 <HAL_DMA_Abort_IT+0x3f8>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d00e      	beq.n	8003932 <HAL_DMA_Abort_IT+0x3a2>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a1c      	ldr	r2, [pc, #112]	@ (800398c <HAL_DMA_Abort_IT+0x3fc>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d009      	beq.n	8003932 <HAL_DMA_Abort_IT+0x3a2>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a1b      	ldr	r2, [pc, #108]	@ (8003990 <HAL_DMA_Abort_IT+0x400>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d004      	beq.n	8003932 <HAL_DMA_Abort_IT+0x3a2>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a19      	ldr	r2, [pc, #100]	@ (8003994 <HAL_DMA_Abort_IT+0x404>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d132      	bne.n	8003998 <HAL_DMA_Abort_IT+0x408>
 8003932:	2301      	movs	r3, #1
 8003934:	e031      	b.n	800399a <HAL_DMA_Abort_IT+0x40a>
 8003936:	bf00      	nop
 8003938:	40020010 	.word	0x40020010
 800393c:	40020028 	.word	0x40020028
 8003940:	40020040 	.word	0x40020040
 8003944:	40020058 	.word	0x40020058
 8003948:	40020070 	.word	0x40020070
 800394c:	40020088 	.word	0x40020088
 8003950:	400200a0 	.word	0x400200a0
 8003954:	400200b8 	.word	0x400200b8
 8003958:	40020410 	.word	0x40020410
 800395c:	40020428 	.word	0x40020428
 8003960:	40020440 	.word	0x40020440
 8003964:	40020458 	.word	0x40020458
 8003968:	40020470 	.word	0x40020470
 800396c:	40020488 	.word	0x40020488
 8003970:	400204a0 	.word	0x400204a0
 8003974:	400204b8 	.word	0x400204b8
 8003978:	58025408 	.word	0x58025408
 800397c:	5802541c 	.word	0x5802541c
 8003980:	58025430 	.word	0x58025430
 8003984:	58025444 	.word	0x58025444
 8003988:	58025458 	.word	0x58025458
 800398c:	5802546c 	.word	0x5802546c
 8003990:	58025480 	.word	0x58025480
 8003994:	58025494 	.word	0x58025494
 8003998:	2300      	movs	r3, #0
 800399a:	2b00      	cmp	r3, #0
 800399c:	d028      	beq.n	80039f0 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039a2:	681a      	ldr	r2, [r3, #0]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039a8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80039ac:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039b2:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039b8:	f003 031f 	and.w	r3, r3, #31
 80039bc:	2201      	movs	r2, #1
 80039be:	409a      	lsls	r2, r3
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80039c8:	687a      	ldr	r2, [r7, #4]
 80039ca:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80039cc:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d00c      	beq.n	80039f0 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80039e0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80039e4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039ea:	687a      	ldr	r2, [r7, #4]
 80039ec:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80039ee:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2201      	movs	r2, #1
 80039f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2200      	movs	r2, #0
 80039fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d003      	beq.n	8003a10 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a0c:	6878      	ldr	r0, [r7, #4]
 8003a0e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003a10:	2300      	movs	r3, #0
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	3710      	adds	r7, #16
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}
 8003a1a:	bf00      	nop

08003a1c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b098      	sub	sp, #96	@ 0x60
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8003a24:	4a84      	ldr	r2, [pc, #528]	@ (8003c38 <HAL_FDCAN_Init+0x21c>)
 8003a26:	f107 030c 	add.w	r3, r7, #12
 8003a2a:	4611      	mov	r1, r2
 8003a2c:	224c      	movs	r2, #76	@ 0x4c
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f00c f961 	bl	800fcf6 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d101      	bne.n	8003a3e <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e1c6      	b.n	8003dcc <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a7e      	ldr	r2, [pc, #504]	@ (8003c3c <HAL_FDCAN_Init+0x220>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d106      	bne.n	8003a56 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8003a50:	461a      	mov	r2, r3
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8003a5c:	b2db      	uxtb	r3, r3
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d106      	bne.n	8003a70 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2200      	movs	r2, #0
 8003a66:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f7fd f8a4 	bl	8000bb8 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	699a      	ldr	r2, [r3, #24]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f022 0210 	bic.w	r2, r2, #16
 8003a7e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003a80:	f7ff f8b0 	bl	8002be4 <HAL_GetTick>
 8003a84:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003a86:	e014      	b.n	8003ab2 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003a88:	f7ff f8ac 	bl	8002be4 <HAL_GetTick>
 8003a8c:	4602      	mov	r2, r0
 8003a8e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003a90:	1ad3      	subs	r3, r2, r3
 8003a92:	2b0a      	cmp	r3, #10
 8003a94:	d90d      	bls.n	8003ab2 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003a9c:	f043 0201 	orr.w	r2, r3, #1
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2203      	movs	r2, #3
 8003aaa:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e18c      	b.n	8003dcc <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	699b      	ldr	r3, [r3, #24]
 8003ab8:	f003 0308 	and.w	r3, r3, #8
 8003abc:	2b08      	cmp	r3, #8
 8003abe:	d0e3      	beq.n	8003a88 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	699a      	ldr	r2, [r3, #24]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f042 0201 	orr.w	r2, r2, #1
 8003ace:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003ad0:	f7ff f888 	bl	8002be4 <HAL_GetTick>
 8003ad4:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003ad6:	e014      	b.n	8003b02 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003ad8:	f7ff f884 	bl	8002be4 <HAL_GetTick>
 8003adc:	4602      	mov	r2, r0
 8003ade:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003ae0:	1ad3      	subs	r3, r2, r3
 8003ae2:	2b0a      	cmp	r3, #10
 8003ae4:	d90d      	bls.n	8003b02 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003aec:	f043 0201 	orr.w	r2, r3, #1
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2203      	movs	r2, #3
 8003afa:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	e164      	b.n	8003dcc <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	699b      	ldr	r3, [r3, #24]
 8003b08:	f003 0301 	and.w	r3, r3, #1
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d0e3      	beq.n	8003ad8 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	699a      	ldr	r2, [r3, #24]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f042 0202 	orr.w	r2, r2, #2
 8003b1e:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	7c1b      	ldrb	r3, [r3, #16]
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	d108      	bne.n	8003b3a <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	699a      	ldr	r2, [r3, #24]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003b36:	619a      	str	r2, [r3, #24]
 8003b38:	e007      	b.n	8003b4a <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	699a      	ldr	r2, [r3, #24]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003b48:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	7c5b      	ldrb	r3, [r3, #17]
 8003b4e:	2b01      	cmp	r3, #1
 8003b50:	d108      	bne.n	8003b64 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	699a      	ldr	r2, [r3, #24]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003b60:	619a      	str	r2, [r3, #24]
 8003b62:	e007      	b.n	8003b74 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	699a      	ldr	r2, [r3, #24]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003b72:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	7c9b      	ldrb	r3, [r3, #18]
 8003b78:	2b01      	cmp	r3, #1
 8003b7a:	d108      	bne.n	8003b8e <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	699a      	ldr	r2, [r3, #24]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003b8a:	619a      	str	r2, [r3, #24]
 8003b8c:	e007      	b.n	8003b9e <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	699a      	ldr	r2, [r3, #24]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003b9c:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	699b      	ldr	r3, [r3, #24]
 8003ba4:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	689a      	ldr	r2, [r3, #8]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	430a      	orrs	r2, r1
 8003bb2:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	699a      	ldr	r2, [r3, #24]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8003bc2:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	691a      	ldr	r2, [r3, #16]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f022 0210 	bic.w	r2, r2, #16
 8003bd2:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	68db      	ldr	r3, [r3, #12]
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	d108      	bne.n	8003bee <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	699a      	ldr	r2, [r3, #24]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f042 0204 	orr.w	r2, r2, #4
 8003bea:	619a      	str	r2, [r3, #24]
 8003bec:	e030      	b.n	8003c50 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	68db      	ldr	r3, [r3, #12]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d02c      	beq.n	8003c50 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	68db      	ldr	r3, [r3, #12]
 8003bfa:	2b02      	cmp	r3, #2
 8003bfc:	d020      	beq.n	8003c40 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	699a      	ldr	r2, [r3, #24]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003c0c:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	691a      	ldr	r2, [r3, #16]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f042 0210 	orr.w	r2, r2, #16
 8003c1c:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	68db      	ldr	r3, [r3, #12]
 8003c22:	2b03      	cmp	r3, #3
 8003c24:	d114      	bne.n	8003c50 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	699a      	ldr	r2, [r3, #24]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f042 0220 	orr.w	r2, r2, #32
 8003c34:	619a      	str	r2, [r3, #24]
 8003c36:	e00b      	b.n	8003c50 <HAL_FDCAN_Init+0x234>
 8003c38:	08012d44 	.word	0x08012d44
 8003c3c:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	699a      	ldr	r2, [r3, #24]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f042 0220 	orr.w	r2, r2, #32
 8003c4e:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	699b      	ldr	r3, [r3, #24]
 8003c54:	3b01      	subs	r3, #1
 8003c56:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	69db      	ldr	r3, [r3, #28]
 8003c5c:	3b01      	subs	r3, #1
 8003c5e:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003c60:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6a1b      	ldr	r3, [r3, #32]
 8003c66:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003c68:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	695b      	ldr	r3, [r3, #20]
 8003c70:	3b01      	subs	r3, #1
 8003c72:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003c78:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003c7a:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003c84:	d115      	bne.n	8003cb2 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c8a:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c90:	3b01      	subs	r3, #1
 8003c92:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003c94:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c9a:	3b01      	subs	r3, #1
 8003c9c:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8003c9e:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ca6:	3b01      	subs	r3, #1
 8003ca8:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003cae:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003cb0:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d00a      	beq.n	8003cd0 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	430a      	orrs	r2, r1
 8003ccc:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cd8:	4413      	add	r3, r2
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d011      	beq.n	8003d02 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8003ce6:	f023 0107 	bic.w	r1, r3, #7
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003cee:	009b      	lsls	r3, r3, #2
 8003cf0:	3360      	adds	r3, #96	@ 0x60
 8003cf2:	443b      	add	r3, r7
 8003cf4:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	430a      	orrs	r2, r1
 8003cfe:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d011      	beq.n	8003d2e <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8003d12:	f023 0107 	bic.w	r1, r3, #7
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d1a:	009b      	lsls	r3, r3, #2
 8003d1c:	3360      	adds	r3, #96	@ 0x60
 8003d1e:	443b      	add	r3, r7
 8003d20:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	430a      	orrs	r2, r1
 8003d2a:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d012      	beq.n	8003d5c <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8003d3e:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d46:	009b      	lsls	r3, r3, #2
 8003d48:	3360      	adds	r3, #96	@ 0x60
 8003d4a:	443b      	add	r3, r7
 8003d4c:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8003d50:	011a      	lsls	r2, r3, #4
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	430a      	orrs	r2, r1
 8003d58:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d012      	beq.n	8003d8a <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8003d6c:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d74:	009b      	lsls	r3, r3, #2
 8003d76:	3360      	adds	r3, #96	@ 0x60
 8003d78:	443b      	add	r3, r7
 8003d7a:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8003d7e:	021a      	lsls	r2, r3, #8
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	430a      	orrs	r2, r1
 8003d86:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a11      	ldr	r2, [pc, #68]	@ (8003dd4 <HAL_FDCAN_Init+0x3b8>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d107      	bne.n	8003da4 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	689a      	ldr	r2, [r3, #8]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	f022 0203 	bic.w	r2, r2, #3
 8003da2:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2200      	movs	r2, #0
 8003da8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2200      	movs	r2, #0
 8003db0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2201      	movs	r2, #1
 8003db8:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8003dbc:	6878      	ldr	r0, [r7, #4]
 8003dbe:	f000 fe13 	bl	80049e8 <FDCAN_CalcultateRamBlockAddresses>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 8003dc8:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 8003dcc:	4618      	mov	r0, r3
 8003dce:	3760      	adds	r7, #96	@ 0x60
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bd80      	pop	{r7, pc}
 8003dd4:	4000a000 	.word	0x4000a000

08003dd8 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b087      	sub	sp, #28
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
 8003de0:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8003de8:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8003dea:	7bfb      	ldrb	r3, [r7, #15]
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	d002      	beq.n	8003df6 <HAL_FDCAN_ConfigFilter+0x1e>
 8003df0:	7bfb      	ldrb	r3, [r7, #15]
 8003df2:	2b02      	cmp	r3, #2
 8003df4:	d157      	bne.n	8003ea6 <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d12b      	bne.n	8003e56 <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	68db      	ldr	r3, [r3, #12]
 8003e02:	2b07      	cmp	r3, #7
 8003e04:	d10d      	bne.n	8003e22 <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	691b      	ldr	r3, [r3, #16]
 8003e0a:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	69db      	ldr	r3, [r3, #28]
 8003e10:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 8003e12:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8003e18:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 8003e1a:	f043 5360 	orr.w	r3, r3, #939524096	@ 0x38000000
 8003e1e:	617b      	str	r3, [r7, #20]
 8003e20:	e00e      	b.n	8003e40 <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	689b      	ldr	r3, [r3, #8]
 8003e26:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	68db      	ldr	r3, [r3, #12]
 8003e2c:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8003e2e:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	691b      	ldr	r3, [r3, #16]
 8003e34:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 8003e36:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	009b      	lsls	r3, r3, #2
 8003e4a:	4413      	add	r3, r2
 8003e4c:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	697a      	ldr	r2, [r7, #20]
 8003e52:	601a      	str	r2, [r3, #0]
 8003e54:	e025      	b.n	8003ea2 <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	68db      	ldr	r3, [r3, #12]
 8003e5a:	075a      	lsls	r2, r3, #29
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	691b      	ldr	r3, [r3, #16]
 8003e60:	4313      	orrs	r3, r2
 8003e62:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	68db      	ldr	r3, [r3, #12]
 8003e68:	2b07      	cmp	r3, #7
 8003e6a:	d103      	bne.n	8003e74 <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	699b      	ldr	r3, [r3, #24]
 8003e70:	613b      	str	r3, [r7, #16]
 8003e72:	e006      	b.n	8003e82 <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	079a      	lsls	r2, r3, #30
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	695b      	ldr	r3, [r3, #20]
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	00db      	lsls	r3, r3, #3
 8003e8c:	4413      	add	r3, r2
 8003e8e:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	697a      	ldr	r2, [r7, #20]
 8003e94:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	3304      	adds	r3, #4
 8003e9a:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	693a      	ldr	r2, [r7, #16]
 8003ea0:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	e008      	b.n	8003eb8 <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003eac:	f043 0202 	orr.w	r2, r3, #2
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
  }
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	371c      	adds	r7, #28
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec2:	4770      	bx	lr

08003ec4 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b085      	sub	sp, #20
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	60f8      	str	r0, [r7, #12]
 8003ecc:	60b9      	str	r1, [r7, #8]
 8003ece:	607a      	str	r2, [r7, #4]
 8003ed0:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8003ed8:	b2db      	uxtb	r3, r3
 8003eda:	2b01      	cmp	r3, #1
 8003edc:	d110      	bne.n	8003f00 <HAL_FDCAN_ConfigGlobalFilter+0x3c>
  {
    /* Configure global filter */
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	011a      	lsls	r2, r3, #4
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	009b      	lsls	r3, r3, #2
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8003ee6:	431a      	orrs	r2, r3
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	005b      	lsls	r3, r3, #1
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 8003eec:	ea42 0103 	orr.w	r1, r2, r3
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 8003ef4:	69ba      	ldr	r2, [r7, #24]
 8003ef6:	430a      	orrs	r2, r1
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8003ef8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
                             (RejectRemoteExt << FDCAN_GFC_RRFE_Pos));

    /* Return function status */
    return HAL_OK;
 8003efc:	2300      	movs	r3, #0
 8003efe:	e008      	b.n	8003f12 <HAL_FDCAN_ConfigGlobalFilter+0x4e>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003f06:	f043 0204 	orr.w	r2, r3, #4
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8003f10:	2301      	movs	r3, #1
  }
}
 8003f12:	4618      	mov	r0, r3
 8003f14:	3714      	adds	r7, #20
 8003f16:	46bd      	mov	sp, r7
 8003f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1c:	4770      	bx	lr

08003f1e <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8003f1e:	b480      	push	{r7}
 8003f20:	b083      	sub	sp, #12
 8003f22:	af00      	add	r7, sp, #0
 8003f24:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8003f2c:	b2db      	uxtb	r3, r3
 8003f2e:	2b01      	cmp	r3, #1
 8003f30:	d111      	bne.n	8003f56 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2202      	movs	r2, #2
 8003f36:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	699a      	ldr	r2, [r3, #24]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f022 0201 	bic.w	r2, r2, #1
 8003f48:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Return function status */
    return HAL_OK;
 8003f52:	2300      	movs	r3, #0
 8003f54:	e008      	b.n	8003f68 <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003f5c:	f043 0204 	orr.w	r2, r3, #4
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
  }
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	370c      	adds	r7, #12
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f72:	4770      	bx	lr

08003f74 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b086      	sub	sp, #24
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	60f8      	str	r0, [r7, #12]
 8003f7c:	60b9      	str	r1, [r7, #8]
 8003f7e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8003f86:	b2db      	uxtb	r3, r3
 8003f88:	2b02      	cmp	r3, #2
 8003f8a:	d141      	bne.n	8004010 <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003f94:	f003 537c 	and.w	r3, r3, #1056964608	@ 0x3f000000
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d109      	bne.n	8003fb0 <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003fa2:	f043 0220 	orr.w	r2, r3, #32
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 8003fac:	2301      	movs	r3, #1
 8003fae:	e038      	b.n	8004022 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8003fb8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d009      	beq.n	8003fd4 <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003fc6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	e026      	b.n	8004022 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8003fdc:	0c1b      	lsrs	r3, r3, #16
 8003fde:	f003 031f 	and.w	r3, r3, #31
 8003fe2:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8003fe4:	697b      	ldr	r3, [r7, #20]
 8003fe6:	687a      	ldr	r2, [r7, #4]
 8003fe8:	68b9      	ldr	r1, [r7, #8]
 8003fea:	68f8      	ldr	r0, [r7, #12]
 8003fec:	f000 fe82 	bl	8004cf4 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	2101      	movs	r1, #1
 8003ff6:	697a      	ldr	r2, [r7, #20]
 8003ff8:	fa01 f202 	lsl.w	r2, r1, r2
 8003ffc:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8004000:	2201      	movs	r2, #1
 8004002:	697b      	ldr	r3, [r7, #20]
 8004004:	409a      	lsls	r2, r3
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    }

    /* Return function status */
    return HAL_OK;
 800400c:	2300      	movs	r3, #0
 800400e:	e008      	b.n	8004022 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004016:	f043 0208 	orr.w	r2, r3, #8
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8004020:	2301      	movs	r3, #1
  }
}
 8004022:	4618      	mov	r0, r3
 8004024:	3718      	adds	r7, #24
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}
	...

0800402c <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 800402c:	b480      	push	{r7}
 800402e:	b08b      	sub	sp, #44	@ 0x2c
 8004030:	af00      	add	r7, sp, #0
 8004032:	60f8      	str	r0, [r7, #12]
 8004034:	60b9      	str	r1, [r7, #8]
 8004036:	607a      	str	r2, [r7, #4]
 8004038:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 800403a:	2300      	movs	r3, #0
 800403c:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8004044:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 8004046:	7efb      	ldrb	r3, [r7, #27]
 8004048:	2b02      	cmp	r3, #2
 800404a:	f040 8149 	bne.w	80042e0 <HAL_FDCAN_GetRxMessage+0x2b4>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	2b40      	cmp	r3, #64	@ 0x40
 8004052:	d14c      	bne.n	80040ee <HAL_FDCAN_GetRxMessage+0xc2>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800405c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004060:	2b00      	cmp	r3, #0
 8004062:	d109      	bne.n	8004078 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800406a:	f043 0220 	orr.w	r2, r3, #32
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8004074:	2301      	movs	r3, #1
 8004076:	e13c      	b.n	80042f2 <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004080:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004084:	2b00      	cmp	r3, #0
 8004086:	d109      	bne.n	800409c <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800408e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	e12a      	b.n	80042f2 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80040a4:	0e1b      	lsrs	r3, r3, #24
 80040a6:	f003 0301 	and.w	r3, r3, #1
 80040aa:	2b01      	cmp	r3, #1
 80040ac:	d10a      	bne.n	80040c4 <HAL_FDCAN_GetRxMessage+0x98>
        {
          if (((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80040b6:	0fdb      	lsrs	r3, r3, #31
 80040b8:	f003 0301 	and.w	r3, r3, #1
 80040bc:	2b01      	cmp	r3, #1
 80040be:	d101      	bne.n	80040c4 <HAL_FDCAN_GetRxMessage+0x98>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80040c0:	2301      	movs	r3, #1
 80040c2:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80040cc:	0a1b      	lsrs	r3, r3, #8
 80040ce:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80040d2:	69fa      	ldr	r2, [r7, #28]
 80040d4:	4413      	add	r3, r2
 80040d6:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040e0:	69f9      	ldr	r1, [r7, #28]
 80040e2:	fb01 f303 	mul.w	r3, r1, r3
 80040e6:	009b      	lsls	r3, r3, #2
 80040e8:	4413      	add	r3, r2
 80040ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80040ec:	e068      	b.n	80041c0 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	2b41      	cmp	r3, #65	@ 0x41
 80040f2:	d14c      	bne.n	800418e <HAL_FDCAN_GetRxMessage+0x162>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80040fc:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004100:	2b00      	cmp	r3, #0
 8004102:	d109      	bne.n	8004118 <HAL_FDCAN_GetRxMessage+0xec>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800410a:	f043 0220 	orr.w	r2, r3, #32
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8004114:	2301      	movs	r3, #1
 8004116:	e0ec      	b.n	80042f2 <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004120:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004124:	2b00      	cmp	r3, #0
 8004126:	d109      	bne.n	800413c <HAL_FDCAN_GetRxMessage+0x110>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800412e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8004138:	2301      	movs	r3, #1
 800413a:	e0da      	b.n	80042f2 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004144:	0e1b      	lsrs	r3, r3, #24
 8004146:	f003 0301 	and.w	r3, r3, #1
 800414a:	2b01      	cmp	r3, #1
 800414c:	d10a      	bne.n	8004164 <HAL_FDCAN_GetRxMessage+0x138>
        {
          if (((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004156:	0fdb      	lsrs	r3, r3, #31
 8004158:	f003 0301 	and.w	r3, r3, #1
 800415c:	2b01      	cmp	r3, #1
 800415e:	d101      	bne.n	8004164 <HAL_FDCAN_GetRxMessage+0x138>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8004160:	2301      	movs	r3, #1
 8004162:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800416c:	0a1b      	lsrs	r3, r3, #8
 800416e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004172:	69fa      	ldr	r2, [r7, #28]
 8004174:	4413      	add	r3, r2
 8004176:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004180:	69f9      	ldr	r1, [r7, #28]
 8004182:	fb01 f303 	mul.w	r3, r1, r3
 8004186:	009b      	lsls	r3, r3, #2
 8004188:	4413      	add	r3, r2
 800418a:	627b      	str	r3, [r7, #36]	@ 0x24
 800418c:	e018      	b.n	80041c0 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004192:	68ba      	ldr	r2, [r7, #8]
 8004194:	429a      	cmp	r2, r3
 8004196:	d309      	bcc.n	80041ac <HAL_FDCAN_GetRxMessage+0x180>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800419e:	f043 0220 	orr.w	r2, r3, #32
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 80041a8:	2301      	movs	r3, #1
 80041aa:	e0a2      	b.n	80042f2 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041b4:	68b9      	ldr	r1, [r7, #8]
 80041b6:	fb01 f303 	mul.w	r3, r1, r3
 80041ba:	009b      	lsls	r3, r3, #2
 80041bc:	4413      	add	r3, r2
 80041be:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 80041c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d107      	bne.n	80041e4 <HAL_FDCAN_GetRxMessage+0x1b8>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 80041d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	0c9b      	lsrs	r3, r3, #18
 80041da:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	601a      	str	r2, [r3, #0]
 80041e2:	e005      	b.n	80041f0 <HAL_FDCAN_GetRxMessage+0x1c4>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80041e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80041f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80041fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8004208:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800420a:	3304      	adds	r3, #4
 800420c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 800420e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	b29a      	uxth	r2, r3
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8004218:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	0c1b      	lsrs	r3, r3, #16
 800421e:	f003 020f 	and.w	r2, r3, #15
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8004226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8004232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 800423e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	0e1b      	lsrs	r3, r3, #24
 8004244:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 800424c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	0fda      	lsrs	r2, r3, #31
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8004256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004258:	3304      	adds	r3, #4
 800425a:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 800425c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800425e:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8004260:	2300      	movs	r3, #0
 8004262:	623b      	str	r3, [r7, #32]
 8004264:	e00a      	b.n	800427c <HAL_FDCAN_GetRxMessage+0x250>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8004266:	697a      	ldr	r2, [r7, #20]
 8004268:	6a3b      	ldr	r3, [r7, #32]
 800426a:	441a      	add	r2, r3
 800426c:	6839      	ldr	r1, [r7, #0]
 800426e:	6a3b      	ldr	r3, [r7, #32]
 8004270:	440b      	add	r3, r1
 8004272:	7812      	ldrb	r2, [r2, #0]
 8004274:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8004276:	6a3b      	ldr	r3, [r7, #32]
 8004278:	3301      	adds	r3, #1
 800427a:	623b      	str	r3, [r7, #32]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	68db      	ldr	r3, [r3, #12]
 8004280:	4a1f      	ldr	r2, [pc, #124]	@ (8004300 <HAL_FDCAN_GetRxMessage+0x2d4>)
 8004282:	5cd3      	ldrb	r3, [r2, r3]
 8004284:	461a      	mov	r2, r3
 8004286:	6a3b      	ldr	r3, [r7, #32]
 8004288:	4293      	cmp	r3, r2
 800428a:	d3ec      	bcc.n	8004266 <HAL_FDCAN_GetRxMessage+0x23a>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	2b40      	cmp	r3, #64	@ 0x40
 8004290:	d105      	bne.n	800429e <HAL_FDCAN_GetRxMessage+0x272>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	69fa      	ldr	r2, [r7, #28]
 8004298:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
 800429c:	e01e      	b.n	80042dc <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	2b41      	cmp	r3, #65	@ 0x41
 80042a2:	d105      	bne.n	80042b0 <HAL_FDCAN_GetRxMessage+0x284>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	69fa      	ldr	r2, [r7, #28]
 80042aa:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
 80042ae:	e015      	b.n	80042dc <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	2b1f      	cmp	r3, #31
 80042b4:	d808      	bhi.n	80042c8 <HAL_FDCAN_GetRxMessage+0x29c>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1U << RxLocation);
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	2101      	movs	r1, #1
 80042bc:	68ba      	ldr	r2, [r7, #8]
 80042be:	fa01 f202 	lsl.w	r2, r1, r2
 80042c2:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 80042c6:	e009      	b.n	80042dc <HAL_FDCAN_GetRxMessage+0x2b0>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1U << (RxLocation & 0x1FU));
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	f003 021f 	and.w	r2, r3, #31
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	2101      	movs	r1, #1
 80042d4:	fa01 f202 	lsl.w	r2, r1, r2
 80042d8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 80042dc:	2300      	movs	r3, #0
 80042de:	e008      	b.n	80042f2 <HAL_FDCAN_GetRxMessage+0x2c6>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80042e6:	f043 0208 	orr.w	r2, r3, #8
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 80042f0:	2301      	movs	r3, #1
  }
}
 80042f2:	4618      	mov	r0, r3
 80042f4:	372c      	adds	r7, #44	@ 0x2c
 80042f6:	46bd      	mov	sp, r7
 80042f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fc:	4770      	bx	lr
 80042fe:	bf00      	nop
 8004300:	08012e18 	.word	0x08012e18

08004304 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8004304:	b480      	push	{r7}
 8004306:	b087      	sub	sp, #28
 8004308:	af00      	add	r7, sp, #0
 800430a:	60f8      	str	r0, [r7, #12]
 800430c:	60b9      	str	r1, [r7, #8]
 800430e:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8004316:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8004318:	7dfb      	ldrb	r3, [r7, #23]
 800431a:	2b01      	cmp	r3, #1
 800431c:	d002      	beq.n	8004324 <HAL_FDCAN_ActivateNotification+0x20>
 800431e:	7dfb      	ldrb	r3, [r7, #23]
 8004320:	2b02      	cmp	r3, #2
 8004322:	d155      	bne.n	80043d0 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	4013      	ands	r3, r2
 800432e:	2b00      	cmp	r3, #0
 8004330:	d108      	bne.n	8004344 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f042 0201 	orr.w	r2, r2, #1
 8004340:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004342:	e014      	b.n	800436e <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	4013      	ands	r3, r2
 800434e:	68ba      	ldr	r2, [r7, #8]
 8004350:	429a      	cmp	r2, r3
 8004352:	d108      	bne.n	8004366 <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f042 0202 	orr.w	r2, r2, #2
 8004362:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004364:	e003      	b.n	800436e <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	2203      	movs	r2, #3
 800436c:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004374:	2b00      	cmp	r3, #0
 8004376:	d009      	beq.n	800438c <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	687a      	ldr	r2, [r7, #4]
 8004386:	430a      	orrs	r2, r1
 8004388:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004392:	2b00      	cmp	r3, #0
 8004394:	d009      	beq.n	80043aa <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f8d3 10e4 	ldr.w	r1, [r3, #228]	@ 0xe4
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	687a      	ldr	r2, [r7, #4]
 80043a4:	430a      	orrs	r2, r1
 80043a6:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80043b0:	68ba      	ldr	r2, [r7, #8]
 80043b2:	4b0f      	ldr	r3, [pc, #60]	@ (80043f0 <HAL_FDCAN_ActivateNotification+0xec>)
 80043b4:	4013      	ands	r3, r2
 80043b6:	68fa      	ldr	r2, [r7, #12]
 80043b8:	6812      	ldr	r2, [r2, #0]
 80043ba:	430b      	orrs	r3, r1
 80043bc:	6553      	str	r3, [r2, #84]	@ 0x54
 80043be:	4b0d      	ldr	r3, [pc, #52]	@ (80043f4 <HAL_FDCAN_ActivateNotification+0xf0>)
 80043c0:	695a      	ldr	r2, [r3, #20]
 80043c2:	68bb      	ldr	r3, [r7, #8]
 80043c4:	0f9b      	lsrs	r3, r3, #30
 80043c6:	490b      	ldr	r1, [pc, #44]	@ (80043f4 <HAL_FDCAN_ActivateNotification+0xf0>)
 80043c8:	4313      	orrs	r3, r2
 80043ca:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 80043cc:	2300      	movs	r3, #0
 80043ce:	e008      	b.n	80043e2 <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80043d6:	f043 0202 	orr.w	r2, r3, #2
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 80043e0:	2301      	movs	r3, #1
  }
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	371c      	adds	r7, #28
 80043e6:	46bd      	mov	sp, r7
 80043e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ec:	4770      	bx	lr
 80043ee:	bf00      	nop
 80043f0:	3fcfffff 	.word	0x3fcfffff
 80043f4:	4000a800 	.word	0x4000a800

080043f8 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b096      	sub	sp, #88	@ 0x58
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8004400:	4b95      	ldr	r3, [pc, #596]	@ (8004658 <HAL_FDCAN_IRQHandler+0x260>)
 8004402:	691b      	ldr	r3, [r3, #16]
 8004404:	079b      	lsls	r3, r3, #30
 8004406:	657b      	str	r3, [r7, #84]	@ 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8004408:	4b93      	ldr	r3, [pc, #588]	@ (8004658 <HAL_FDCAN_IRQHandler+0x260>)
 800440a:	695b      	ldr	r3, [r3, #20]
 800440c:	079b      	lsls	r3, r3, #30
 800440e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004410:	4013      	ands	r3, r2
 8004412:	657b      	str	r3, [r7, #84]	@ 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800441a:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800441e:	653b      	str	r3, [r7, #80]	@ 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004426:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004428:	4013      	ands	r3, r2
 800442a:	653b      	str	r3, [r7, #80]	@ 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004432:	f003 030f 	and.w	r3, r3, #15
 8004436:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800443e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004440:	4013      	ands	r3, r2
 8004442:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800444a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800444e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004456:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004458:	4013      	ands	r3, r2
 800445a:	64bb      	str	r3, [r7, #72]	@ 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004462:	f003 5371 	and.w	r3, r3, #1010827264	@ 0x3c400000
 8004466:	647b      	str	r3, [r7, #68]	@ 0x44
  Errors &= hfdcan->Instance->IE;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800446e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004470:	4013      	ands	r3, r2
 8004472:	647b      	str	r3, [r7, #68]	@ 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800447a:	f003 7360 	and.w	r3, r3, #58720256	@ 0x3800000
 800447e:	643b      	str	r3, [r7, #64]	@ 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004486:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004488:	4013      	ands	r3, r2
 800448a:	643b      	str	r3, [r7, #64]	@ 0x40
  itsourceIE = hfdcan->Instance->IE;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004492:	63fb      	str	r3, [r7, #60]	@ 0x3c
  itflagIR = hfdcan->Instance->IR;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800449a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 800449c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800449e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d00f      	beq.n	80044c6 <HAL_FDCAN_IRQHandler+0xce>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 80044a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d00a      	beq.n	80044c6 <HAL_FDCAN_IRQHandler+0xce>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80044b8:	651a      	str	r2, [r3, #80]	@ 0x50
 80044ba:	4b67      	ldr	r3, [pc, #412]	@ (8004658 <HAL_FDCAN_IRQHandler+0x260>)
 80044bc:	2200      	movs	r2, #0
 80044be:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80044c0:	6878      	ldr	r0, [r7, #4]
 80044c2:	f000 fa44 	bl	800494e <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 80044c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80044c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d01c      	beq.n	800450a <HAL_FDCAN_IRQHandler+0x112>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 80044d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d017      	beq.n	800450a <HAL_FDCAN_IRQHandler+0x112>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80044e2:	637b      	str	r3, [r7, #52]	@ 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80044ec:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80044ee:	4013      	ands	r3, r2
 80044f0:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80044fa:	651a      	str	r2, [r3, #80]	@ 0x50
 80044fc:	4b56      	ldr	r3, [pc, #344]	@ (8004658 <HAL_FDCAN_IRQHandler+0x260>)
 80044fe:	2200      	movs	r2, #0
 8004500:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8004502:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8004504:	6878      	ldr	r0, [r7, #4]
 8004506:	f000 f9f9 	bl	80048fc <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 800450a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800450c:	2b00      	cmp	r3, #0
 800450e:	d00d      	beq.n	800452c <HAL_FDCAN_IRQHandler+0x134>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681a      	ldr	r2, [r3, #0]
 8004514:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004516:	4b51      	ldr	r3, [pc, #324]	@ (800465c <HAL_FDCAN_IRQHandler+0x264>)
 8004518:	400b      	ands	r3, r1
 800451a:	6513      	str	r3, [r2, #80]	@ 0x50
 800451c:	4a4e      	ldr	r2, [pc, #312]	@ (8004658 <HAL_FDCAN_IRQHandler+0x260>)
 800451e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004520:	0f9b      	lsrs	r3, r3, #30
 8004522:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8004524:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004526:	6878      	ldr	r0, [r7, #4]
 8004528:	f000 f9b2 	bl	8004890 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 800452c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800452e:	2b00      	cmp	r3, #0
 8004530:	d00d      	beq.n	800454e <HAL_FDCAN_IRQHandler+0x156>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681a      	ldr	r2, [r3, #0]
 8004536:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004538:	4b48      	ldr	r3, [pc, #288]	@ (800465c <HAL_FDCAN_IRQHandler+0x264>)
 800453a:	400b      	ands	r3, r1
 800453c:	6513      	str	r3, [r2, #80]	@ 0x50
 800453e:	4a46      	ldr	r2, [pc, #280]	@ (8004658 <HAL_FDCAN_IRQHandler+0x260>)
 8004540:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004542:	0f9b      	lsrs	r3, r3, #30
 8004544:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8004546:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004548:	6878      	ldr	r0, [r7, #4]
 800454a:	f000 f9ac 	bl	80048a6 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 800454e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004550:	2b00      	cmp	r3, #0
 8004552:	d00d      	beq.n	8004570 <HAL_FDCAN_IRQHandler+0x178>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681a      	ldr	r2, [r3, #0]
 8004558:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800455a:	4b40      	ldr	r3, [pc, #256]	@ (800465c <HAL_FDCAN_IRQHandler+0x264>)
 800455c:	400b      	ands	r3, r1
 800455e:	6513      	str	r3, [r2, #80]	@ 0x50
 8004560:	4a3d      	ldr	r2, [pc, #244]	@ (8004658 <HAL_FDCAN_IRQHandler+0x260>)
 8004562:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004564:	0f9b      	lsrs	r3, r3, #30
 8004566:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8004568:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800456a:	6878      	ldr	r0, [r7, #4]
 800456c:	f7fc fc44 	bl	8000df8 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8004570:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004572:	2b00      	cmp	r3, #0
 8004574:	d00d      	beq.n	8004592 <HAL_FDCAN_IRQHandler+0x19a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681a      	ldr	r2, [r3, #0]
 800457a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800457c:	4b37      	ldr	r3, [pc, #220]	@ (800465c <HAL_FDCAN_IRQHandler+0x264>)
 800457e:	400b      	ands	r3, r1
 8004580:	6513      	str	r3, [r2, #80]	@ 0x50
 8004582:	4a35      	ldr	r2, [pc, #212]	@ (8004658 <HAL_FDCAN_IRQHandler+0x260>)
 8004584:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004586:	0f9b      	lsrs	r3, r3, #30
 8004588:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 800458a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800458c:	6878      	ldr	r0, [r7, #4]
 800458e:	f000 f995 	bl	80048bc <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8004592:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004594:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004598:	2b00      	cmp	r3, #0
 800459a:	d00f      	beq.n	80045bc <HAL_FDCAN_IRQHandler+0x1c4>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 800459c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800459e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d00a      	beq.n	80045bc <HAL_FDCAN_IRQHandler+0x1c4>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80045ae:	651a      	str	r2, [r3, #80]	@ 0x50
 80045b0:	4b29      	ldr	r3, [pc, #164]	@ (8004658 <HAL_FDCAN_IRQHandler+0x260>)
 80045b2:	2200      	movs	r2, #0
 80045b4:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 80045b6:	6878      	ldr	r0, [r7, #4]
 80045b8:	f000 f98b 	bl	80048d2 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 80045bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80045be:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d01c      	beq.n	8004600 <HAL_FDCAN_IRQHandler+0x208>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 80045c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045c8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d017      	beq.n	8004600 <HAL_FDCAN_IRQHandler+0x208>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80045d8:	633b      	str	r3, [r7, #48]	@ 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80045e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80045e4:	4013      	ands	r3, r2
 80045e6:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80045f0:	651a      	str	r2, [r3, #80]	@ 0x50
 80045f2:	4b19      	ldr	r3, [pc, #100]	@ (8004658 <HAL_FDCAN_IRQHandler+0x260>)
 80045f4:	2200      	movs	r2, #0
 80045f6:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 80045f8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	f000 f973 	bl	80048e6 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 8004600:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004602:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004606:	2b00      	cmp	r3, #0
 8004608:	d00f      	beq.n	800462a <HAL_FDCAN_IRQHandler+0x232>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 800460a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800460c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004610:	2b00      	cmp	r3, #0
 8004612:	d00a      	beq.n	800462a <HAL_FDCAN_IRQHandler+0x232>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800461c:	651a      	str	r2, [r3, #80]	@ 0x50
 800461e:	4b0e      	ldr	r3, [pc, #56]	@ (8004658 <HAL_FDCAN_IRQHandler+0x260>)
 8004620:	2200      	movs	r2, #0
 8004622:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8004624:	6878      	ldr	r0, [r7, #4]
 8004626:	f000 f974 	bl	8004912 <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 800462a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800462c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004630:	2b00      	cmp	r3, #0
 8004632:	d015      	beq.n	8004660 <HAL_FDCAN_IRQHandler+0x268>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8004634:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004636:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800463a:	2b00      	cmp	r3, #0
 800463c:	d010      	beq.n	8004660 <HAL_FDCAN_IRQHandler+0x268>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8004646:	651a      	str	r2, [r3, #80]	@ 0x50
 8004648:	4b03      	ldr	r3, [pc, #12]	@ (8004658 <HAL_FDCAN_IRQHandler+0x260>)
 800464a:	2200      	movs	r2, #0
 800464c:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	f000 f969 	bl	8004926 <HAL_FDCAN_TimestampWraparoundCallback>
 8004654:	e004      	b.n	8004660 <HAL_FDCAN_IRQHandler+0x268>
 8004656:	bf00      	nop
 8004658:	4000a800 	.word	0x4000a800
 800465c:	3fcfffff 	.word	0x3fcfffff
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8004660:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004662:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004666:	2b00      	cmp	r3, #0
 8004668:	d00f      	beq.n	800468a <HAL_FDCAN_IRQHandler+0x292>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 800466a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800466c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004670:	2b00      	cmp	r3, #0
 8004672:	d00a      	beq.n	800468a <HAL_FDCAN_IRQHandler+0x292>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800467c:	651a      	str	r2, [r3, #80]	@ 0x50
 800467e:	4b81      	ldr	r3, [pc, #516]	@ (8004884 <HAL_FDCAN_IRQHandler+0x48c>)
 8004680:	2200      	movs	r2, #0
 8004682:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8004684:	6878      	ldr	r0, [r7, #4]
 8004686:	f000 f958 	bl	800493a <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 800468a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800468c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004690:	2b00      	cmp	r3, #0
 8004692:	d014      	beq.n	80046be <HAL_FDCAN_IRQHandler+0x2c6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8004694:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004696:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800469a:	2b00      	cmp	r3, #0
 800469c:	d00f      	beq.n	80046be <HAL_FDCAN_IRQHandler+0x2c6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80046a6:	651a      	str	r2, [r3, #80]	@ 0x50
 80046a8:	4b76      	ldr	r3, [pc, #472]	@ (8004884 <HAL_FDCAN_IRQHandler+0x48c>)
 80046aa:	2200      	movs	r2, #0
 80046ac:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80046b4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 80046be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d00d      	beq.n	80046e0 <HAL_FDCAN_IRQHandler+0x2e8>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681a      	ldr	r2, [r3, #0]
 80046c8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80046ca:	4b6f      	ldr	r3, [pc, #444]	@ (8004888 <HAL_FDCAN_IRQHandler+0x490>)
 80046cc:	400b      	ands	r3, r1
 80046ce:	6513      	str	r3, [r2, #80]	@ 0x50
 80046d0:	4a6c      	ldr	r2, [pc, #432]	@ (8004884 <HAL_FDCAN_IRQHandler+0x48c>)
 80046d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80046d4:	0f9b      	lsrs	r3, r3, #30
 80046d6:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 80046d8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80046da:	6878      	ldr	r0, [r7, #4]
 80046dc:	f000 f94b 	bl	8004976 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 80046e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d011      	beq.n	800470a <HAL_FDCAN_IRQHandler+0x312>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681a      	ldr	r2, [r3, #0]
 80046ea:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80046ec:	4b66      	ldr	r3, [pc, #408]	@ (8004888 <HAL_FDCAN_IRQHandler+0x490>)
 80046ee:	400b      	ands	r3, r1
 80046f0:	6513      	str	r3, [r2, #80]	@ 0x50
 80046f2:	4a64      	ldr	r2, [pc, #400]	@ (8004884 <HAL_FDCAN_IRQHandler+0x48c>)
 80046f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80046f6:	0f9b      	lsrs	r3, r3, #30
 80046f8:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8004700:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004702:	431a      	orrs	r2, r3
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a5f      	ldr	r2, [pc, #380]	@ (800488c <HAL_FDCAN_IRQHandler+0x494>)
 8004710:	4293      	cmp	r3, r2
 8004712:	f040 80aa 	bne.w	800486a <HAL_FDCAN_IRQHandler+0x472>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	689b      	ldr	r3, [r3, #8]
 800471c:	f003 0303 	and.w	r3, r3, #3
 8004720:	2b00      	cmp	r3, #0
 8004722:	f000 80a2 	beq.w	800486a <HAL_FDCAN_IRQHandler+0x472>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	6a1b      	ldr	r3, [r3, #32]
 800472c:	f003 030f 	and.w	r3, r3, #15
 8004730:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004738:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800473a:	4013      	ands	r3, r2
 800473c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	6a1b      	ldr	r3, [r3, #32]
 8004744:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004748:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004750:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004752:	4013      	ands	r3, r2
 8004754:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	6a1b      	ldr	r3, [r3, #32]
 800475c:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8004760:	627b      	str	r3, [r7, #36]	@ 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004768:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800476a:	4013      	ands	r3, r2
 800476c:	627b      	str	r3, [r7, #36]	@ 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	6a1b      	ldr	r3, [r3, #32]
 8004774:	f403 43fc 	and.w	r3, r3, #32256	@ 0x7e00
 8004778:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004780:	6a3a      	ldr	r2, [r7, #32]
 8004782:	4013      	ands	r3, r2
 8004784:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	6a1b      	ldr	r3, [r3, #32]
 800478c:	f403 23f0 	and.w	r3, r3, #491520	@ 0x78000
 8004790:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004798:	69fa      	ldr	r2, [r7, #28]
 800479a:	4013      	ands	r3, r2
 800479c:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047a4:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	6a1b      	ldr	r3, [r3, #32]
 80047ac:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 80047ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d007      	beq.n	80047c4 <HAL_FDCAN_IRQHandler+0x3cc>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80047ba:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 80047bc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80047be:	6878      	ldr	r0, [r7, #4]
 80047c0:	f000 f8e4 	bl	800498c <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 80047c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d007      	beq.n	80047da <HAL_FDCAN_IRQHandler+0x3e2>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80047d0:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 80047d2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80047d4:	6878      	ldr	r0, [r7, #4]
 80047d6:	f000 f8e4 	bl	80049a2 <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 80047da:	69bb      	ldr	r3, [r7, #24]
 80047dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d019      	beq.n	8004818 <HAL_FDCAN_IRQHandler+0x420>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 80047e4:	697b      	ldr	r3, [r7, #20]
 80047e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d014      	beq.n	8004818 <HAL_FDCAN_IRQHandler+0x420>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047f4:	0c1b      	lsrs	r3, r3, #16
 80047f6:	b29b      	uxth	r3, r3
 80047f8:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004800:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004804:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	2240      	movs	r2, #64	@ 0x40
 800480c:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 800480e:	68fa      	ldr	r2, [r7, #12]
 8004810:	6939      	ldr	r1, [r7, #16]
 8004812:	6878      	ldr	r0, [r7, #4]
 8004814:	f000 f8d0 	bl	80049b8 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8004818:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800481a:	2b00      	cmp	r3, #0
 800481c:	d007      	beq.n	800482e <HAL_FDCAN_IRQHandler+0x436>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004824:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8004826:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004828:	6878      	ldr	r0, [r7, #4]
 800482a:	f000 f8d1 	bl	80049d0 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 800482e:	6a3b      	ldr	r3, [r7, #32]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d00b      	beq.n	800484c <HAL_FDCAN_IRQHandler+0x454>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	6a3a      	ldr	r2, [r7, #32]
 800483a:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8004842:	6a3b      	ldr	r3, [r7, #32]
 8004844:	431a      	orrs	r2, r3
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 800484c:	69fb      	ldr	r3, [r7, #28]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d00b      	beq.n	800486a <HAL_FDCAN_IRQHandler+0x472>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	69fa      	ldr	r2, [r7, #28]
 8004858:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8004860:	69fb      	ldr	r3, [r7, #28]
 8004862:	431a      	orrs	r2, r3
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004870:	2b00      	cmp	r3, #0
 8004872:	d002      	beq.n	800487a <HAL_FDCAN_IRQHandler+0x482>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8004874:	6878      	ldr	r0, [r7, #4]
 8004876:	f000 f874 	bl	8004962 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 800487a:	bf00      	nop
 800487c:	3758      	adds	r7, #88	@ 0x58
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}
 8004882:	bf00      	nop
 8004884:	4000a800 	.word	0x4000a800
 8004888:	3fcfffff 	.word	0x3fcfffff
 800488c:	4000a000 	.word	0x4000a000

08004890 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8004890:	b480      	push	{r7}
 8004892:	b083      	sub	sp, #12
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
 8004898:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 800489a:	bf00      	nop
 800489c:	370c      	adds	r7, #12
 800489e:	46bd      	mov	sp, r7
 80048a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a4:	4770      	bx	lr

080048a6 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 80048a6:	b480      	push	{r7}
 80048a8:	b083      	sub	sp, #12
 80048aa:	af00      	add	r7, sp, #0
 80048ac:	6078      	str	r0, [r7, #4]
 80048ae:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 80048b0:	bf00      	nop
 80048b2:	370c      	adds	r7, #12
 80048b4:	46bd      	mov	sp, r7
 80048b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ba:	4770      	bx	lr

080048bc <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 80048bc:	b480      	push	{r7}
 80048be:	b083      	sub	sp, #12
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
 80048c4:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 80048c6:	bf00      	nop
 80048c8:	370c      	adds	r7, #12
 80048ca:	46bd      	mov	sp, r7
 80048cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d0:	4770      	bx	lr

080048d2 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80048d2:	b480      	push	{r7}
 80048d4:	b083      	sub	sp, #12
 80048d6:	af00      	add	r7, sp, #0
 80048d8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 80048da:	bf00      	nop
 80048dc:	370c      	adds	r7, #12
 80048de:	46bd      	mov	sp, r7
 80048e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e4:	4770      	bx	lr

080048e6 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80048e6:	b480      	push	{r7}
 80048e8:	b083      	sub	sp, #12
 80048ea:	af00      	add	r7, sp, #0
 80048ec:	6078      	str	r0, [r7, #4]
 80048ee:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 80048f0:	bf00      	nop
 80048f2:	370c      	adds	r7, #12
 80048f4:	46bd      	mov	sp, r7
 80048f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fa:	4770      	bx	lr

080048fc <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80048fc:	b480      	push	{r7}
 80048fe:	b083      	sub	sp, #12
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
 8004904:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8004906:	bf00      	nop
 8004908:	370c      	adds	r7, #12
 800490a:	46bd      	mov	sp, r7
 800490c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004910:	4770      	bx	lr

08004912 <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004912:	b480      	push	{r7}
 8004914:	b083      	sub	sp, #12
 8004916:	af00      	add	r7, sp, #0
 8004918:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 800491a:	bf00      	nop
 800491c:	370c      	adds	r7, #12
 800491e:	46bd      	mov	sp, r7
 8004920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004924:	4770      	bx	lr

08004926 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004926:	b480      	push	{r7}
 8004928:	b083      	sub	sp, #12
 800492a:	af00      	add	r7, sp, #0
 800492c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 800492e:	bf00      	nop
 8004930:	370c      	adds	r7, #12
 8004932:	46bd      	mov	sp, r7
 8004934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004938:	4770      	bx	lr

0800493a <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800493a:	b480      	push	{r7}
 800493c:	b083      	sub	sp, #12
 800493e:	af00      	add	r7, sp, #0
 8004940:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8004942:	bf00      	nop
 8004944:	370c      	adds	r7, #12
 8004946:	46bd      	mov	sp, r7
 8004948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494c:	4770      	bx	lr

0800494e <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800494e:	b480      	push	{r7}
 8004950:	b083      	sub	sp, #12
 8004952:	af00      	add	r7, sp, #0
 8004954:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8004956:	bf00      	nop
 8004958:	370c      	adds	r7, #12
 800495a:	46bd      	mov	sp, r7
 800495c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004960:	4770      	bx	lr

08004962 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004962:	b480      	push	{r7}
 8004964:	b083      	sub	sp, #12
 8004966:	af00      	add	r7, sp, #0
 8004968:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 800496a:	bf00      	nop
 800496c:	370c      	adds	r7, #12
 800496e:	46bd      	mov	sp, r7
 8004970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004974:	4770      	bx	lr

08004976 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8004976:	b480      	push	{r7}
 8004978:	b083      	sub	sp, #12
 800497a:	af00      	add	r7, sp, #0
 800497c:	6078      	str	r0, [r7, #4]
 800497e:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8004980:	bf00      	nop
 8004982:	370c      	adds	r7, #12
 8004984:	46bd      	mov	sp, r7
 8004986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498a:	4770      	bx	lr

0800498c <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 800498c:	b480      	push	{r7}
 800498e:	b083      	sub	sp, #12
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
 8004994:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 8004996:	bf00      	nop
 8004998:	370c      	adds	r7, #12
 800499a:	46bd      	mov	sp, r7
 800499c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a0:	4770      	bx	lr

080049a2 <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 80049a2:	b480      	push	{r7}
 80049a4:	b083      	sub	sp, #12
 80049a6:	af00      	add	r7, sp, #0
 80049a8:	6078      	str	r0, [r7, #4]
 80049aa:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 80049ac:	bf00      	nop
 80049ae:	370c      	adds	r7, #12
 80049b0:	46bd      	mov	sp, r7
 80049b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b6:	4770      	bx	lr

080049b8 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 80049b8:	b480      	push	{r7}
 80049ba:	b085      	sub	sp, #20
 80049bc:	af00      	add	r7, sp, #0
 80049be:	60f8      	str	r0, [r7, #12]
 80049c0:	60b9      	str	r1, [r7, #8]
 80049c2:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 80049c4:	bf00      	nop
 80049c6:	3714      	adds	r7, #20
 80049c8:	46bd      	mov	sp, r7
 80049ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ce:	4770      	bx	lr

080049d0 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 80049d0:	b480      	push	{r7}
 80049d2:	b083      	sub	sp, #12
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
 80049d8:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 80049da:	bf00      	nop
 80049dc:	370c      	adds	r7, #12
 80049de:	46bd      	mov	sp, r7
 80049e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e4:	4770      	bx	lr
	...

080049e8 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b085      	sub	sp, #20
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049f4:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80049fe:	4ba7      	ldr	r3, [pc, #668]	@ (8004c9c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004a00:	4013      	ands	r3, r2
 8004a02:	68ba      	ldr	r2, [r7, #8]
 8004a04:	0091      	lsls	r1, r2, #2
 8004a06:	687a      	ldr	r2, [r7, #4]
 8004a08:	6812      	ldr	r2, [r2, #0]
 8004a0a:	430b      	orrs	r3, r1
 8004a0c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004a18:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a20:	041a      	lsls	r2, r3, #16
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	430a      	orrs	r2, r1
 8004a28:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a30:	68ba      	ldr	r2, [r7, #8]
 8004a32:	4413      	add	r3, r2
 8004a34:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004a3e:	4b97      	ldr	r3, [pc, #604]	@ (8004c9c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004a40:	4013      	ands	r3, r2
 8004a42:	68ba      	ldr	r2, [r7, #8]
 8004a44:	0091      	lsls	r1, r2, #2
 8004a46:	687a      	ldr	r2, [r7, #4]
 8004a48:	6812      	ldr	r2, [r2, #0]
 8004a4a:	430b      	orrs	r3, r1
 8004a4c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a58:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a60:	041a      	lsls	r2, r3, #16
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	430a      	orrs	r2, r1
 8004a68:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a70:	005b      	lsls	r3, r3, #1
 8004a72:	68ba      	ldr	r2, [r7, #8]
 8004a74:	4413      	add	r3, r2
 8004a76:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8004a80:	4b86      	ldr	r3, [pc, #536]	@ (8004c9c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004a82:	4013      	ands	r3, r2
 8004a84:	68ba      	ldr	r2, [r7, #8]
 8004a86:	0091      	lsls	r1, r2, #2
 8004a88:	687a      	ldr	r2, [r7, #4]
 8004a8a:	6812      	ldr	r2, [r2, #0]
 8004a8c:	430b      	orrs	r3, r1
 8004a8e:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004a9a:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aa2:	041a      	lsls	r2, r3, #16
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	430a      	orrs	r2, r1
 8004aaa:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ab2:	687a      	ldr	r2, [r7, #4]
 8004ab4:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8004ab6:	fb02 f303 	mul.w	r3, r2, r3
 8004aba:	68ba      	ldr	r2, [r7, #8]
 8004abc:	4413      	add	r3, r2
 8004abe:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8004ac8:	4b74      	ldr	r3, [pc, #464]	@ (8004c9c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004aca:	4013      	ands	r3, r2
 8004acc:	68ba      	ldr	r2, [r7, #8]
 8004ace:	0091      	lsls	r1, r2, #2
 8004ad0:	687a      	ldr	r2, [r7, #4]
 8004ad2:	6812      	ldr	r2, [r2, #0]
 8004ad4:	430b      	orrs	r3, r1
 8004ad6:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004ae2:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004aea:	041a      	lsls	r2, r3, #16
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	430a      	orrs	r2, r1
 8004af2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004afa:	687a      	ldr	r2, [r7, #4]
 8004afc:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8004afe:	fb02 f303 	mul.w	r3, r2, r3
 8004b02:	68ba      	ldr	r2, [r7, #8]
 8004b04:	4413      	add	r3, r2
 8004b06:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 8004b10:	4b62      	ldr	r3, [pc, #392]	@ (8004c9c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004b12:	4013      	ands	r3, r2
 8004b14:	68ba      	ldr	r2, [r7, #8]
 8004b16:	0091      	lsls	r1, r2, #2
 8004b18:	687a      	ldr	r2, [r7, #4]
 8004b1a:	6812      	ldr	r2, [r2, #0]
 8004b1c:	430b      	orrs	r3, r1
 8004b1e:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b26:	687a      	ldr	r2, [r7, #4]
 8004b28:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8004b2a:	fb02 f303 	mul.w	r3, r2, r3
 8004b2e:	68ba      	ldr	r2, [r7, #8]
 8004b30:	4413      	add	r3, r2
 8004b32:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8004b3c:	4b57      	ldr	r3, [pc, #348]	@ (8004c9c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004b3e:	4013      	ands	r3, r2
 8004b40:	68ba      	ldr	r2, [r7, #8]
 8004b42:	0091      	lsls	r1, r2, #2
 8004b44:	687a      	ldr	r2, [r7, #4]
 8004b46:	6812      	ldr	r2, [r2, #0]
 8004b48:	430b      	orrs	r3, r1
 8004b4a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004b56:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b5e:	041a      	lsls	r2, r3, #16
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	430a      	orrs	r2, r1
 8004b66:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b6e:	005b      	lsls	r3, r3, #1
 8004b70:	68ba      	ldr	r2, [r7, #8]
 8004b72:	4413      	add	r3, r2
 8004b74:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8004b7e:	4b47      	ldr	r3, [pc, #284]	@ (8004c9c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004b80:	4013      	ands	r3, r2
 8004b82:	68ba      	ldr	r2, [r7, #8]
 8004b84:	0091      	lsls	r1, r2, #2
 8004b86:	687a      	ldr	r2, [r7, #4]
 8004b88:	6812      	ldr	r2, [r2, #0]
 8004b8a:	430b      	orrs	r3, r1
 8004b8c:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004b98:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ba0:	041a      	lsls	r2, r3, #16
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	430a      	orrs	r2, r1
 8004ba8:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004bb4:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004bbc:	061a      	lsls	r2, r3, #24
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	430a      	orrs	r2, r1
 8004bc4:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004bcc:	4b34      	ldr	r3, [pc, #208]	@ (8004ca0 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8004bce:	4413      	add	r3, r2
 8004bd0:	009a      	lsls	r2, r3, #2
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bde:	009b      	lsls	r3, r3, #2
 8004be0:	441a      	add	r2, r3
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bee:	00db      	lsls	r3, r3, #3
 8004bf0:	441a      	add	r2, r3
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bfe:	6879      	ldr	r1, [r7, #4]
 8004c00:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 8004c02:	fb01 f303 	mul.w	r3, r1, r3
 8004c06:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8004c08:	441a      	add	r2, r3
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c16:	6879      	ldr	r1, [r7, #4]
 8004c18:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 8004c1a:	fb01 f303 	mul.w	r3, r1, r3
 8004c1e:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8004c20:	441a      	add	r2, r3
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c2e:	6879      	ldr	r1, [r7, #4]
 8004c30:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 8004c32:	fb01 f303 	mul.w	r3, r1, r3
 8004c36:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8004c38:	441a      	add	r2, r3
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c4a:	00db      	lsls	r3, r3, #3
 8004c4c:	441a      	add	r2, r3
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c5e:	6879      	ldr	r1, [r7, #4]
 8004c60:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8004c62:	fb01 f303 	mul.w	r3, r1, r3
 8004c66:	009b      	lsls	r3, r3, #2
 8004c68:	441a      	add	r2, r3
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c7a:	6879      	ldr	r1, [r7, #4]
 8004c7c:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8004c7e:	fb01 f303 	mul.w	r3, r1, r3
 8004c82:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8004c84:	441a      	add	r2, r3
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c92:	4a04      	ldr	r2, [pc, #16]	@ (8004ca4 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d915      	bls.n	8004cc4 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8004c98:	e006      	b.n	8004ca8 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8004c9a:	bf00      	nop
 8004c9c:	ffff0003 	.word	0xffff0003
 8004ca0:	10002b00 	.word	0x10002b00
 8004ca4:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004cae:	f043 0220 	orr.w	r2, r3, #32
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2203      	movs	r2, #3
 8004cbc:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	e010      	b.n	8004ce6 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004cc8:	60fb      	str	r3, [r7, #12]
 8004cca:	e005      	b.n	8004cd8 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	3304      	adds	r3, #4
 8004cd6:	60fb      	str	r3, [r7, #12]
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cde:	68fa      	ldr	r2, [r7, #12]
 8004ce0:	429a      	cmp	r2, r3
 8004ce2:	d3f3      	bcc.n	8004ccc <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8004ce4:	2300      	movs	r3, #0
}
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	3714      	adds	r7, #20
 8004cea:	46bd      	mov	sp, r7
 8004cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf0:	4770      	bx	lr
 8004cf2:	bf00      	nop

08004cf4 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b089      	sub	sp, #36	@ 0x24
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	60f8      	str	r0, [r7, #12]
 8004cfc:	60b9      	str	r1, [r7, #8]
 8004cfe:	607a      	str	r2, [r7, #4]
 8004d00:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d10a      	bne.n	8004d20 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8004d12:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	61fb      	str	r3, [r7, #28]
 8004d1e:	e00a      	b.n	8004d36 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8004d28:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8004d2e:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004d30:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004d34:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	6a1b      	ldr	r3, [r3, #32]
 8004d3a:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8004d40:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8004d46:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8004d4c:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	68db      	ldr	r3, [r3, #12]
 8004d52:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8004d54:	4313      	orrs	r3, r2
 8004d56:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004d62:	6839      	ldr	r1, [r7, #0]
 8004d64:	fb01 f303 	mul.w	r3, r1, r3
 8004d68:	009b      	lsls	r3, r3, #2
 8004d6a:	4413      	add	r3, r2
 8004d6c:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8004d6e:	69bb      	ldr	r3, [r7, #24]
 8004d70:	69fa      	ldr	r2, [r7, #28]
 8004d72:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8004d74:	69bb      	ldr	r3, [r7, #24]
 8004d76:	3304      	adds	r3, #4
 8004d78:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8004d7a:	69bb      	ldr	r3, [r7, #24]
 8004d7c:	693a      	ldr	r2, [r7, #16]
 8004d7e:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8004d80:	69bb      	ldr	r3, [r7, #24]
 8004d82:	3304      	adds	r3, #4
 8004d84:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8004d86:	2300      	movs	r3, #0
 8004d88:	617b      	str	r3, [r7, #20]
 8004d8a:	e020      	b.n	8004dce <FDCAN_CopyMessageToRAM+0xda>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	3303      	adds	r3, #3
 8004d90:	687a      	ldr	r2, [r7, #4]
 8004d92:	4413      	add	r3, r2
 8004d94:	781b      	ldrb	r3, [r3, #0]
 8004d96:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8004d98:	697b      	ldr	r3, [r7, #20]
 8004d9a:	3302      	adds	r3, #2
 8004d9c:	6879      	ldr	r1, [r7, #4]
 8004d9e:	440b      	add	r3, r1
 8004da0:	781b      	ldrb	r3, [r3, #0]
 8004da2:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8004da4:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	3301      	adds	r3, #1
 8004daa:	6879      	ldr	r1, [r7, #4]
 8004dac:	440b      	add	r3, r1
 8004dae:	781b      	ldrb	r3, [r3, #0]
 8004db0:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8004db2:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8004db4:	6879      	ldr	r1, [r7, #4]
 8004db6:	697a      	ldr	r2, [r7, #20]
 8004db8:	440a      	add	r2, r1
 8004dba:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8004dbc:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8004dbe:	69bb      	ldr	r3, [r7, #24]
 8004dc0:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8004dc2:	69bb      	ldr	r3, [r7, #24]
 8004dc4:	3304      	adds	r3, #4
 8004dc6:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8004dc8:	697b      	ldr	r3, [r7, #20]
 8004dca:	3304      	adds	r3, #4
 8004dcc:	617b      	str	r3, [r7, #20]
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	68db      	ldr	r3, [r3, #12]
 8004dd2:	4a06      	ldr	r2, [pc, #24]	@ (8004dec <FDCAN_CopyMessageToRAM+0xf8>)
 8004dd4:	5cd3      	ldrb	r3, [r2, r3]
 8004dd6:	461a      	mov	r2, r3
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d3d6      	bcc.n	8004d8c <FDCAN_CopyMessageToRAM+0x98>
  }
}
 8004dde:	bf00      	nop
 8004de0:	bf00      	nop
 8004de2:	3724      	adds	r7, #36	@ 0x24
 8004de4:	46bd      	mov	sp, r7
 8004de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dea:	4770      	bx	lr
 8004dec:	08012e18 	.word	0x08012e18

08004df0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004df0:	b480      	push	{r7}
 8004df2:	b089      	sub	sp, #36	@ 0x24
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
 8004df8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004dfe:	4b86      	ldr	r3, [pc, #536]	@ (8005018 <HAL_GPIO_Init+0x228>)
 8004e00:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004e02:	e18c      	b.n	800511e <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	681a      	ldr	r2, [r3, #0]
 8004e08:	2101      	movs	r1, #1
 8004e0a:	69fb      	ldr	r3, [r7, #28]
 8004e0c:	fa01 f303 	lsl.w	r3, r1, r3
 8004e10:	4013      	ands	r3, r2
 8004e12:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004e14:	693b      	ldr	r3, [r7, #16]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	f000 817e 	beq.w	8005118 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	f003 0303 	and.w	r3, r3, #3
 8004e24:	2b01      	cmp	r3, #1
 8004e26:	d005      	beq.n	8004e34 <HAL_GPIO_Init+0x44>
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	f003 0303 	and.w	r3, r3, #3
 8004e30:	2b02      	cmp	r3, #2
 8004e32:	d130      	bne.n	8004e96 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	689b      	ldr	r3, [r3, #8]
 8004e38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004e3a:	69fb      	ldr	r3, [r7, #28]
 8004e3c:	005b      	lsls	r3, r3, #1
 8004e3e:	2203      	movs	r2, #3
 8004e40:	fa02 f303 	lsl.w	r3, r2, r3
 8004e44:	43db      	mvns	r3, r3
 8004e46:	69ba      	ldr	r2, [r7, #24]
 8004e48:	4013      	ands	r3, r2
 8004e4a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	68da      	ldr	r2, [r3, #12]
 8004e50:	69fb      	ldr	r3, [r7, #28]
 8004e52:	005b      	lsls	r3, r3, #1
 8004e54:	fa02 f303 	lsl.w	r3, r2, r3
 8004e58:	69ba      	ldr	r2, [r7, #24]
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	69ba      	ldr	r2, [r7, #24]
 8004e62:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	69fb      	ldr	r3, [r7, #28]
 8004e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e72:	43db      	mvns	r3, r3
 8004e74:	69ba      	ldr	r2, [r7, #24]
 8004e76:	4013      	ands	r3, r2
 8004e78:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	091b      	lsrs	r3, r3, #4
 8004e80:	f003 0201 	and.w	r2, r3, #1
 8004e84:	69fb      	ldr	r3, [r7, #28]
 8004e86:	fa02 f303 	lsl.w	r3, r2, r3
 8004e8a:	69ba      	ldr	r2, [r7, #24]
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	69ba      	ldr	r2, [r7, #24]
 8004e94:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	f003 0303 	and.w	r3, r3, #3
 8004e9e:	2b03      	cmp	r3, #3
 8004ea0:	d017      	beq.n	8004ed2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	68db      	ldr	r3, [r3, #12]
 8004ea6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004ea8:	69fb      	ldr	r3, [r7, #28]
 8004eaa:	005b      	lsls	r3, r3, #1
 8004eac:	2203      	movs	r2, #3
 8004eae:	fa02 f303 	lsl.w	r3, r2, r3
 8004eb2:	43db      	mvns	r3, r3
 8004eb4:	69ba      	ldr	r2, [r7, #24]
 8004eb6:	4013      	ands	r3, r2
 8004eb8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	689a      	ldr	r2, [r3, #8]
 8004ebe:	69fb      	ldr	r3, [r7, #28]
 8004ec0:	005b      	lsls	r3, r3, #1
 8004ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ec6:	69ba      	ldr	r2, [r7, #24]
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	69ba      	ldr	r2, [r7, #24]
 8004ed0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	f003 0303 	and.w	r3, r3, #3
 8004eda:	2b02      	cmp	r3, #2
 8004edc:	d123      	bne.n	8004f26 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004ede:	69fb      	ldr	r3, [r7, #28]
 8004ee0:	08da      	lsrs	r2, r3, #3
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	3208      	adds	r2, #8
 8004ee6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004eea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004eec:	69fb      	ldr	r3, [r7, #28]
 8004eee:	f003 0307 	and.w	r3, r3, #7
 8004ef2:	009b      	lsls	r3, r3, #2
 8004ef4:	220f      	movs	r2, #15
 8004ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8004efa:	43db      	mvns	r3, r3
 8004efc:	69ba      	ldr	r2, [r7, #24]
 8004efe:	4013      	ands	r3, r2
 8004f00:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	691a      	ldr	r2, [r3, #16]
 8004f06:	69fb      	ldr	r3, [r7, #28]
 8004f08:	f003 0307 	and.w	r3, r3, #7
 8004f0c:	009b      	lsls	r3, r3, #2
 8004f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f12:	69ba      	ldr	r2, [r7, #24]
 8004f14:	4313      	orrs	r3, r2
 8004f16:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004f18:	69fb      	ldr	r3, [r7, #28]
 8004f1a:	08da      	lsrs	r2, r3, #3
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	3208      	adds	r2, #8
 8004f20:	69b9      	ldr	r1, [r7, #24]
 8004f22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004f2c:	69fb      	ldr	r3, [r7, #28]
 8004f2e:	005b      	lsls	r3, r3, #1
 8004f30:	2203      	movs	r2, #3
 8004f32:	fa02 f303 	lsl.w	r3, r2, r3
 8004f36:	43db      	mvns	r3, r3
 8004f38:	69ba      	ldr	r2, [r7, #24]
 8004f3a:	4013      	ands	r3, r2
 8004f3c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	f003 0203 	and.w	r2, r3, #3
 8004f46:	69fb      	ldr	r3, [r7, #28]
 8004f48:	005b      	lsls	r3, r3, #1
 8004f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f4e:	69ba      	ldr	r2, [r7, #24]
 8004f50:	4313      	orrs	r3, r2
 8004f52:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	69ba      	ldr	r2, [r7, #24]
 8004f58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	f000 80d8 	beq.w	8005118 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f68:	4b2c      	ldr	r3, [pc, #176]	@ (800501c <HAL_GPIO_Init+0x22c>)
 8004f6a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004f6e:	4a2b      	ldr	r2, [pc, #172]	@ (800501c <HAL_GPIO_Init+0x22c>)
 8004f70:	f043 0302 	orr.w	r3, r3, #2
 8004f74:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8004f78:	4b28      	ldr	r3, [pc, #160]	@ (800501c <HAL_GPIO_Init+0x22c>)
 8004f7a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004f7e:	f003 0302 	and.w	r3, r3, #2
 8004f82:	60fb      	str	r3, [r7, #12]
 8004f84:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004f86:	4a26      	ldr	r2, [pc, #152]	@ (8005020 <HAL_GPIO_Init+0x230>)
 8004f88:	69fb      	ldr	r3, [r7, #28]
 8004f8a:	089b      	lsrs	r3, r3, #2
 8004f8c:	3302      	adds	r3, #2
 8004f8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f92:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004f94:	69fb      	ldr	r3, [r7, #28]
 8004f96:	f003 0303 	and.w	r3, r3, #3
 8004f9a:	009b      	lsls	r3, r3, #2
 8004f9c:	220f      	movs	r2, #15
 8004f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8004fa2:	43db      	mvns	r3, r3
 8004fa4:	69ba      	ldr	r2, [r7, #24]
 8004fa6:	4013      	ands	r3, r2
 8004fa8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	4a1d      	ldr	r2, [pc, #116]	@ (8005024 <HAL_GPIO_Init+0x234>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d04a      	beq.n	8005048 <HAL_GPIO_Init+0x258>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	4a1c      	ldr	r2, [pc, #112]	@ (8005028 <HAL_GPIO_Init+0x238>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d02b      	beq.n	8005012 <HAL_GPIO_Init+0x222>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	4a1b      	ldr	r2, [pc, #108]	@ (800502c <HAL_GPIO_Init+0x23c>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d025      	beq.n	800500e <HAL_GPIO_Init+0x21e>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	4a1a      	ldr	r2, [pc, #104]	@ (8005030 <HAL_GPIO_Init+0x240>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d01f      	beq.n	800500a <HAL_GPIO_Init+0x21a>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	4a19      	ldr	r2, [pc, #100]	@ (8005034 <HAL_GPIO_Init+0x244>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d019      	beq.n	8005006 <HAL_GPIO_Init+0x216>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	4a18      	ldr	r2, [pc, #96]	@ (8005038 <HAL_GPIO_Init+0x248>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d013      	beq.n	8005002 <HAL_GPIO_Init+0x212>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	4a17      	ldr	r2, [pc, #92]	@ (800503c <HAL_GPIO_Init+0x24c>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d00d      	beq.n	8004ffe <HAL_GPIO_Init+0x20e>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	4a16      	ldr	r2, [pc, #88]	@ (8005040 <HAL_GPIO_Init+0x250>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d007      	beq.n	8004ffa <HAL_GPIO_Init+0x20a>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	4a15      	ldr	r2, [pc, #84]	@ (8005044 <HAL_GPIO_Init+0x254>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d101      	bne.n	8004ff6 <HAL_GPIO_Init+0x206>
 8004ff2:	2309      	movs	r3, #9
 8004ff4:	e029      	b.n	800504a <HAL_GPIO_Init+0x25a>
 8004ff6:	230a      	movs	r3, #10
 8004ff8:	e027      	b.n	800504a <HAL_GPIO_Init+0x25a>
 8004ffa:	2307      	movs	r3, #7
 8004ffc:	e025      	b.n	800504a <HAL_GPIO_Init+0x25a>
 8004ffe:	2306      	movs	r3, #6
 8005000:	e023      	b.n	800504a <HAL_GPIO_Init+0x25a>
 8005002:	2305      	movs	r3, #5
 8005004:	e021      	b.n	800504a <HAL_GPIO_Init+0x25a>
 8005006:	2304      	movs	r3, #4
 8005008:	e01f      	b.n	800504a <HAL_GPIO_Init+0x25a>
 800500a:	2303      	movs	r3, #3
 800500c:	e01d      	b.n	800504a <HAL_GPIO_Init+0x25a>
 800500e:	2302      	movs	r3, #2
 8005010:	e01b      	b.n	800504a <HAL_GPIO_Init+0x25a>
 8005012:	2301      	movs	r3, #1
 8005014:	e019      	b.n	800504a <HAL_GPIO_Init+0x25a>
 8005016:	bf00      	nop
 8005018:	58000080 	.word	0x58000080
 800501c:	58024400 	.word	0x58024400
 8005020:	58000400 	.word	0x58000400
 8005024:	58020000 	.word	0x58020000
 8005028:	58020400 	.word	0x58020400
 800502c:	58020800 	.word	0x58020800
 8005030:	58020c00 	.word	0x58020c00
 8005034:	58021000 	.word	0x58021000
 8005038:	58021400 	.word	0x58021400
 800503c:	58021800 	.word	0x58021800
 8005040:	58021c00 	.word	0x58021c00
 8005044:	58022400 	.word	0x58022400
 8005048:	2300      	movs	r3, #0
 800504a:	69fa      	ldr	r2, [r7, #28]
 800504c:	f002 0203 	and.w	r2, r2, #3
 8005050:	0092      	lsls	r2, r2, #2
 8005052:	4093      	lsls	r3, r2
 8005054:	69ba      	ldr	r2, [r7, #24]
 8005056:	4313      	orrs	r3, r2
 8005058:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800505a:	4938      	ldr	r1, [pc, #224]	@ (800513c <HAL_GPIO_Init+0x34c>)
 800505c:	69fb      	ldr	r3, [r7, #28]
 800505e:	089b      	lsrs	r3, r3, #2
 8005060:	3302      	adds	r3, #2
 8005062:	69ba      	ldr	r2, [r7, #24]
 8005064:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005068:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005070:	693b      	ldr	r3, [r7, #16]
 8005072:	43db      	mvns	r3, r3
 8005074:	69ba      	ldr	r2, [r7, #24]
 8005076:	4013      	ands	r3, r2
 8005078:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005082:	2b00      	cmp	r3, #0
 8005084:	d003      	beq.n	800508e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8005086:	69ba      	ldr	r2, [r7, #24]
 8005088:	693b      	ldr	r3, [r7, #16]
 800508a:	4313      	orrs	r3, r2
 800508c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800508e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005092:	69bb      	ldr	r3, [r7, #24]
 8005094:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005096:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800509e:	693b      	ldr	r3, [r7, #16]
 80050a0:	43db      	mvns	r3, r3
 80050a2:	69ba      	ldr	r2, [r7, #24]
 80050a4:	4013      	ands	r3, r2
 80050a6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	685b      	ldr	r3, [r3, #4]
 80050ac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d003      	beq.n	80050bc <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80050b4:	69ba      	ldr	r2, [r7, #24]
 80050b6:	693b      	ldr	r3, [r7, #16]
 80050b8:	4313      	orrs	r3, r2
 80050ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80050bc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80050c0:	69bb      	ldr	r3, [r7, #24]
 80050c2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80050ca:	693b      	ldr	r3, [r7, #16]
 80050cc:	43db      	mvns	r3, r3
 80050ce:	69ba      	ldr	r2, [r7, #24]
 80050d0:	4013      	ands	r3, r2
 80050d2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	685b      	ldr	r3, [r3, #4]
 80050d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d003      	beq.n	80050e8 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80050e0:	69ba      	ldr	r2, [r7, #24]
 80050e2:	693b      	ldr	r3, [r7, #16]
 80050e4:	4313      	orrs	r3, r2
 80050e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80050e8:	697b      	ldr	r3, [r7, #20]
 80050ea:	69ba      	ldr	r2, [r7, #24]
 80050ec:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80050f4:	693b      	ldr	r3, [r7, #16]
 80050f6:	43db      	mvns	r3, r3
 80050f8:	69ba      	ldr	r2, [r7, #24]
 80050fa:	4013      	ands	r3, r2
 80050fc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005106:	2b00      	cmp	r3, #0
 8005108:	d003      	beq.n	8005112 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800510a:	69ba      	ldr	r2, [r7, #24]
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	4313      	orrs	r3, r2
 8005110:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	69ba      	ldr	r2, [r7, #24]
 8005116:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005118:	69fb      	ldr	r3, [r7, #28]
 800511a:	3301      	adds	r3, #1
 800511c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	681a      	ldr	r2, [r3, #0]
 8005122:	69fb      	ldr	r3, [r7, #28]
 8005124:	fa22 f303 	lsr.w	r3, r2, r3
 8005128:	2b00      	cmp	r3, #0
 800512a:	f47f ae6b 	bne.w	8004e04 <HAL_GPIO_Init+0x14>
  }
}
 800512e:	bf00      	nop
 8005130:	bf00      	nop
 8005132:	3724      	adds	r7, #36	@ 0x24
 8005134:	46bd      	mov	sp, r7
 8005136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513a:	4770      	bx	lr
 800513c:	58000400 	.word	0x58000400

08005140 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b084      	sub	sp, #16
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005148:	4b19      	ldr	r3, [pc, #100]	@ (80051b0 <HAL_PWREx_ConfigSupply+0x70>)
 800514a:	68db      	ldr	r3, [r3, #12]
 800514c:	f003 0304 	and.w	r3, r3, #4
 8005150:	2b04      	cmp	r3, #4
 8005152:	d00a      	beq.n	800516a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005154:	4b16      	ldr	r3, [pc, #88]	@ (80051b0 <HAL_PWREx_ConfigSupply+0x70>)
 8005156:	68db      	ldr	r3, [r3, #12]
 8005158:	f003 0307 	and.w	r3, r3, #7
 800515c:	687a      	ldr	r2, [r7, #4]
 800515e:	429a      	cmp	r2, r3
 8005160:	d001      	beq.n	8005166 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005162:	2301      	movs	r3, #1
 8005164:	e01f      	b.n	80051a6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005166:	2300      	movs	r3, #0
 8005168:	e01d      	b.n	80051a6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800516a:	4b11      	ldr	r3, [pc, #68]	@ (80051b0 <HAL_PWREx_ConfigSupply+0x70>)
 800516c:	68db      	ldr	r3, [r3, #12]
 800516e:	f023 0207 	bic.w	r2, r3, #7
 8005172:	490f      	ldr	r1, [pc, #60]	@ (80051b0 <HAL_PWREx_ConfigSupply+0x70>)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	4313      	orrs	r3, r2
 8005178:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800517a:	f7fd fd33 	bl	8002be4 <HAL_GetTick>
 800517e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005180:	e009      	b.n	8005196 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005182:	f7fd fd2f 	bl	8002be4 <HAL_GetTick>
 8005186:	4602      	mov	r2, r0
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	1ad3      	subs	r3, r2, r3
 800518c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005190:	d901      	bls.n	8005196 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005192:	2301      	movs	r3, #1
 8005194:	e007      	b.n	80051a6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005196:	4b06      	ldr	r3, [pc, #24]	@ (80051b0 <HAL_PWREx_ConfigSupply+0x70>)
 8005198:	685b      	ldr	r3, [r3, #4]
 800519a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800519e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80051a2:	d1ee      	bne.n	8005182 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80051a4:	2300      	movs	r3, #0
}
 80051a6:	4618      	mov	r0, r3
 80051a8:	3710      	adds	r7, #16
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bd80      	pop	{r7, pc}
 80051ae:	bf00      	nop
 80051b0:	58024800 	.word	0x58024800

080051b4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b08c      	sub	sp, #48	@ 0x30
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d101      	bne.n	80051c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80051c2:	2301      	movs	r3, #1
 80051c4:	e3c8      	b.n	8005958 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f003 0301 	and.w	r3, r3, #1
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	f000 8087 	beq.w	80052e2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80051d4:	4b88      	ldr	r3, [pc, #544]	@ (80053f8 <HAL_RCC_OscConfig+0x244>)
 80051d6:	691b      	ldr	r3, [r3, #16]
 80051d8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80051dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80051de:	4b86      	ldr	r3, [pc, #536]	@ (80053f8 <HAL_RCC_OscConfig+0x244>)
 80051e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051e2:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80051e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051e6:	2b10      	cmp	r3, #16
 80051e8:	d007      	beq.n	80051fa <HAL_RCC_OscConfig+0x46>
 80051ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051ec:	2b18      	cmp	r3, #24
 80051ee:	d110      	bne.n	8005212 <HAL_RCC_OscConfig+0x5e>
 80051f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051f2:	f003 0303 	and.w	r3, r3, #3
 80051f6:	2b02      	cmp	r3, #2
 80051f8:	d10b      	bne.n	8005212 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051fa:	4b7f      	ldr	r3, [pc, #508]	@ (80053f8 <HAL_RCC_OscConfig+0x244>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005202:	2b00      	cmp	r3, #0
 8005204:	d06c      	beq.n	80052e0 <HAL_RCC_OscConfig+0x12c>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	685b      	ldr	r3, [r3, #4]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d168      	bne.n	80052e0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800520e:	2301      	movs	r3, #1
 8005210:	e3a2      	b.n	8005958 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800521a:	d106      	bne.n	800522a <HAL_RCC_OscConfig+0x76>
 800521c:	4b76      	ldr	r3, [pc, #472]	@ (80053f8 <HAL_RCC_OscConfig+0x244>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a75      	ldr	r2, [pc, #468]	@ (80053f8 <HAL_RCC_OscConfig+0x244>)
 8005222:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005226:	6013      	str	r3, [r2, #0]
 8005228:	e02e      	b.n	8005288 <HAL_RCC_OscConfig+0xd4>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d10c      	bne.n	800524c <HAL_RCC_OscConfig+0x98>
 8005232:	4b71      	ldr	r3, [pc, #452]	@ (80053f8 <HAL_RCC_OscConfig+0x244>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4a70      	ldr	r2, [pc, #448]	@ (80053f8 <HAL_RCC_OscConfig+0x244>)
 8005238:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800523c:	6013      	str	r3, [r2, #0]
 800523e:	4b6e      	ldr	r3, [pc, #440]	@ (80053f8 <HAL_RCC_OscConfig+0x244>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a6d      	ldr	r2, [pc, #436]	@ (80053f8 <HAL_RCC_OscConfig+0x244>)
 8005244:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005248:	6013      	str	r3, [r2, #0]
 800524a:	e01d      	b.n	8005288 <HAL_RCC_OscConfig+0xd4>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005254:	d10c      	bne.n	8005270 <HAL_RCC_OscConfig+0xbc>
 8005256:	4b68      	ldr	r3, [pc, #416]	@ (80053f8 <HAL_RCC_OscConfig+0x244>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4a67      	ldr	r2, [pc, #412]	@ (80053f8 <HAL_RCC_OscConfig+0x244>)
 800525c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005260:	6013      	str	r3, [r2, #0]
 8005262:	4b65      	ldr	r3, [pc, #404]	@ (80053f8 <HAL_RCC_OscConfig+0x244>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4a64      	ldr	r2, [pc, #400]	@ (80053f8 <HAL_RCC_OscConfig+0x244>)
 8005268:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800526c:	6013      	str	r3, [r2, #0]
 800526e:	e00b      	b.n	8005288 <HAL_RCC_OscConfig+0xd4>
 8005270:	4b61      	ldr	r3, [pc, #388]	@ (80053f8 <HAL_RCC_OscConfig+0x244>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a60      	ldr	r2, [pc, #384]	@ (80053f8 <HAL_RCC_OscConfig+0x244>)
 8005276:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800527a:	6013      	str	r3, [r2, #0]
 800527c:	4b5e      	ldr	r3, [pc, #376]	@ (80053f8 <HAL_RCC_OscConfig+0x244>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a5d      	ldr	r2, [pc, #372]	@ (80053f8 <HAL_RCC_OscConfig+0x244>)
 8005282:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005286:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d013      	beq.n	80052b8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005290:	f7fd fca8 	bl	8002be4 <HAL_GetTick>
 8005294:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005296:	e008      	b.n	80052aa <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005298:	f7fd fca4 	bl	8002be4 <HAL_GetTick>
 800529c:	4602      	mov	r2, r0
 800529e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052a0:	1ad3      	subs	r3, r2, r3
 80052a2:	2b64      	cmp	r3, #100	@ 0x64
 80052a4:	d901      	bls.n	80052aa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80052a6:	2303      	movs	r3, #3
 80052a8:	e356      	b.n	8005958 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80052aa:	4b53      	ldr	r3, [pc, #332]	@ (80053f8 <HAL_RCC_OscConfig+0x244>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d0f0      	beq.n	8005298 <HAL_RCC_OscConfig+0xe4>
 80052b6:	e014      	b.n	80052e2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052b8:	f7fd fc94 	bl	8002be4 <HAL_GetTick>
 80052bc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80052be:	e008      	b.n	80052d2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80052c0:	f7fd fc90 	bl	8002be4 <HAL_GetTick>
 80052c4:	4602      	mov	r2, r0
 80052c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052c8:	1ad3      	subs	r3, r2, r3
 80052ca:	2b64      	cmp	r3, #100	@ 0x64
 80052cc:	d901      	bls.n	80052d2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80052ce:	2303      	movs	r3, #3
 80052d0:	e342      	b.n	8005958 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80052d2:	4b49      	ldr	r3, [pc, #292]	@ (80053f8 <HAL_RCC_OscConfig+0x244>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d1f0      	bne.n	80052c0 <HAL_RCC_OscConfig+0x10c>
 80052de:	e000      	b.n	80052e2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f003 0302 	and.w	r3, r3, #2
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	f000 808c 	beq.w	8005408 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80052f0:	4b41      	ldr	r3, [pc, #260]	@ (80053f8 <HAL_RCC_OscConfig+0x244>)
 80052f2:	691b      	ldr	r3, [r3, #16]
 80052f4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80052f8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80052fa:	4b3f      	ldr	r3, [pc, #252]	@ (80053f8 <HAL_RCC_OscConfig+0x244>)
 80052fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052fe:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005300:	6a3b      	ldr	r3, [r7, #32]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d007      	beq.n	8005316 <HAL_RCC_OscConfig+0x162>
 8005306:	6a3b      	ldr	r3, [r7, #32]
 8005308:	2b18      	cmp	r3, #24
 800530a:	d137      	bne.n	800537c <HAL_RCC_OscConfig+0x1c8>
 800530c:	69fb      	ldr	r3, [r7, #28]
 800530e:	f003 0303 	and.w	r3, r3, #3
 8005312:	2b00      	cmp	r3, #0
 8005314:	d132      	bne.n	800537c <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005316:	4b38      	ldr	r3, [pc, #224]	@ (80053f8 <HAL_RCC_OscConfig+0x244>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f003 0304 	and.w	r3, r3, #4
 800531e:	2b00      	cmp	r3, #0
 8005320:	d005      	beq.n	800532e <HAL_RCC_OscConfig+0x17a>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	68db      	ldr	r3, [r3, #12]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d101      	bne.n	800532e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800532a:	2301      	movs	r3, #1
 800532c:	e314      	b.n	8005958 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800532e:	4b32      	ldr	r3, [pc, #200]	@ (80053f8 <HAL_RCC_OscConfig+0x244>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f023 0219 	bic.w	r2, r3, #25
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	68db      	ldr	r3, [r3, #12]
 800533a:	492f      	ldr	r1, [pc, #188]	@ (80053f8 <HAL_RCC_OscConfig+0x244>)
 800533c:	4313      	orrs	r3, r2
 800533e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005340:	f7fd fc50 	bl	8002be4 <HAL_GetTick>
 8005344:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005346:	e008      	b.n	800535a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005348:	f7fd fc4c 	bl	8002be4 <HAL_GetTick>
 800534c:	4602      	mov	r2, r0
 800534e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005350:	1ad3      	subs	r3, r2, r3
 8005352:	2b02      	cmp	r3, #2
 8005354:	d901      	bls.n	800535a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8005356:	2303      	movs	r3, #3
 8005358:	e2fe      	b.n	8005958 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800535a:	4b27      	ldr	r3, [pc, #156]	@ (80053f8 <HAL_RCC_OscConfig+0x244>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f003 0304 	and.w	r3, r3, #4
 8005362:	2b00      	cmp	r3, #0
 8005364:	d0f0      	beq.n	8005348 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005366:	4b24      	ldr	r3, [pc, #144]	@ (80053f8 <HAL_RCC_OscConfig+0x244>)
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	691b      	ldr	r3, [r3, #16]
 8005372:	061b      	lsls	r3, r3, #24
 8005374:	4920      	ldr	r1, [pc, #128]	@ (80053f8 <HAL_RCC_OscConfig+0x244>)
 8005376:	4313      	orrs	r3, r2
 8005378:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800537a:	e045      	b.n	8005408 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	68db      	ldr	r3, [r3, #12]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d026      	beq.n	80053d2 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005384:	4b1c      	ldr	r3, [pc, #112]	@ (80053f8 <HAL_RCC_OscConfig+0x244>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f023 0219 	bic.w	r2, r3, #25
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	68db      	ldr	r3, [r3, #12]
 8005390:	4919      	ldr	r1, [pc, #100]	@ (80053f8 <HAL_RCC_OscConfig+0x244>)
 8005392:	4313      	orrs	r3, r2
 8005394:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005396:	f7fd fc25 	bl	8002be4 <HAL_GetTick>
 800539a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800539c:	e008      	b.n	80053b0 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800539e:	f7fd fc21 	bl	8002be4 <HAL_GetTick>
 80053a2:	4602      	mov	r2, r0
 80053a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053a6:	1ad3      	subs	r3, r2, r3
 80053a8:	2b02      	cmp	r3, #2
 80053aa:	d901      	bls.n	80053b0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80053ac:	2303      	movs	r3, #3
 80053ae:	e2d3      	b.n	8005958 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80053b0:	4b11      	ldr	r3, [pc, #68]	@ (80053f8 <HAL_RCC_OscConfig+0x244>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f003 0304 	and.w	r3, r3, #4
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d0f0      	beq.n	800539e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053bc:	4b0e      	ldr	r3, [pc, #56]	@ (80053f8 <HAL_RCC_OscConfig+0x244>)
 80053be:	685b      	ldr	r3, [r3, #4]
 80053c0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	691b      	ldr	r3, [r3, #16]
 80053c8:	061b      	lsls	r3, r3, #24
 80053ca:	490b      	ldr	r1, [pc, #44]	@ (80053f8 <HAL_RCC_OscConfig+0x244>)
 80053cc:	4313      	orrs	r3, r2
 80053ce:	604b      	str	r3, [r1, #4]
 80053d0:	e01a      	b.n	8005408 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80053d2:	4b09      	ldr	r3, [pc, #36]	@ (80053f8 <HAL_RCC_OscConfig+0x244>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a08      	ldr	r2, [pc, #32]	@ (80053f8 <HAL_RCC_OscConfig+0x244>)
 80053d8:	f023 0301 	bic.w	r3, r3, #1
 80053dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053de:	f7fd fc01 	bl	8002be4 <HAL_GetTick>
 80053e2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80053e4:	e00a      	b.n	80053fc <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80053e6:	f7fd fbfd 	bl	8002be4 <HAL_GetTick>
 80053ea:	4602      	mov	r2, r0
 80053ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053ee:	1ad3      	subs	r3, r2, r3
 80053f0:	2b02      	cmp	r3, #2
 80053f2:	d903      	bls.n	80053fc <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80053f4:	2303      	movs	r3, #3
 80053f6:	e2af      	b.n	8005958 <HAL_RCC_OscConfig+0x7a4>
 80053f8:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80053fc:	4b96      	ldr	r3, [pc, #600]	@ (8005658 <HAL_RCC_OscConfig+0x4a4>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f003 0304 	and.w	r3, r3, #4
 8005404:	2b00      	cmp	r3, #0
 8005406:	d1ee      	bne.n	80053e6 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f003 0310 	and.w	r3, r3, #16
 8005410:	2b00      	cmp	r3, #0
 8005412:	d06a      	beq.n	80054ea <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005414:	4b90      	ldr	r3, [pc, #576]	@ (8005658 <HAL_RCC_OscConfig+0x4a4>)
 8005416:	691b      	ldr	r3, [r3, #16]
 8005418:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800541c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800541e:	4b8e      	ldr	r3, [pc, #568]	@ (8005658 <HAL_RCC_OscConfig+0x4a4>)
 8005420:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005422:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005424:	69bb      	ldr	r3, [r7, #24]
 8005426:	2b08      	cmp	r3, #8
 8005428:	d007      	beq.n	800543a <HAL_RCC_OscConfig+0x286>
 800542a:	69bb      	ldr	r3, [r7, #24]
 800542c:	2b18      	cmp	r3, #24
 800542e:	d11b      	bne.n	8005468 <HAL_RCC_OscConfig+0x2b4>
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	f003 0303 	and.w	r3, r3, #3
 8005436:	2b01      	cmp	r3, #1
 8005438:	d116      	bne.n	8005468 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800543a:	4b87      	ldr	r3, [pc, #540]	@ (8005658 <HAL_RCC_OscConfig+0x4a4>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005442:	2b00      	cmp	r3, #0
 8005444:	d005      	beq.n	8005452 <HAL_RCC_OscConfig+0x29e>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	69db      	ldr	r3, [r3, #28]
 800544a:	2b80      	cmp	r3, #128	@ 0x80
 800544c:	d001      	beq.n	8005452 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800544e:	2301      	movs	r3, #1
 8005450:	e282      	b.n	8005958 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005452:	4b81      	ldr	r3, [pc, #516]	@ (8005658 <HAL_RCC_OscConfig+0x4a4>)
 8005454:	68db      	ldr	r3, [r3, #12]
 8005456:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6a1b      	ldr	r3, [r3, #32]
 800545e:	061b      	lsls	r3, r3, #24
 8005460:	497d      	ldr	r1, [pc, #500]	@ (8005658 <HAL_RCC_OscConfig+0x4a4>)
 8005462:	4313      	orrs	r3, r2
 8005464:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005466:	e040      	b.n	80054ea <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	69db      	ldr	r3, [r3, #28]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d023      	beq.n	80054b8 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005470:	4b79      	ldr	r3, [pc, #484]	@ (8005658 <HAL_RCC_OscConfig+0x4a4>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a78      	ldr	r2, [pc, #480]	@ (8005658 <HAL_RCC_OscConfig+0x4a4>)
 8005476:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800547a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800547c:	f7fd fbb2 	bl	8002be4 <HAL_GetTick>
 8005480:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005482:	e008      	b.n	8005496 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005484:	f7fd fbae 	bl	8002be4 <HAL_GetTick>
 8005488:	4602      	mov	r2, r0
 800548a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800548c:	1ad3      	subs	r3, r2, r3
 800548e:	2b02      	cmp	r3, #2
 8005490:	d901      	bls.n	8005496 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005492:	2303      	movs	r3, #3
 8005494:	e260      	b.n	8005958 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005496:	4b70      	ldr	r3, [pc, #448]	@ (8005658 <HAL_RCC_OscConfig+0x4a4>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d0f0      	beq.n	8005484 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80054a2:	4b6d      	ldr	r3, [pc, #436]	@ (8005658 <HAL_RCC_OscConfig+0x4a4>)
 80054a4:	68db      	ldr	r3, [r3, #12]
 80054a6:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6a1b      	ldr	r3, [r3, #32]
 80054ae:	061b      	lsls	r3, r3, #24
 80054b0:	4969      	ldr	r1, [pc, #420]	@ (8005658 <HAL_RCC_OscConfig+0x4a4>)
 80054b2:	4313      	orrs	r3, r2
 80054b4:	60cb      	str	r3, [r1, #12]
 80054b6:	e018      	b.n	80054ea <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80054b8:	4b67      	ldr	r3, [pc, #412]	@ (8005658 <HAL_RCC_OscConfig+0x4a4>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4a66      	ldr	r2, [pc, #408]	@ (8005658 <HAL_RCC_OscConfig+0x4a4>)
 80054be:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80054c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054c4:	f7fd fb8e 	bl	8002be4 <HAL_GetTick>
 80054c8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80054ca:	e008      	b.n	80054de <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80054cc:	f7fd fb8a 	bl	8002be4 <HAL_GetTick>
 80054d0:	4602      	mov	r2, r0
 80054d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054d4:	1ad3      	subs	r3, r2, r3
 80054d6:	2b02      	cmp	r3, #2
 80054d8:	d901      	bls.n	80054de <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 80054da:	2303      	movs	r3, #3
 80054dc:	e23c      	b.n	8005958 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80054de:	4b5e      	ldr	r3, [pc, #376]	@ (8005658 <HAL_RCC_OscConfig+0x4a4>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d1f0      	bne.n	80054cc <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f003 0308 	and.w	r3, r3, #8
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d036      	beq.n	8005564 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	695b      	ldr	r3, [r3, #20]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d019      	beq.n	8005532 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80054fe:	4b56      	ldr	r3, [pc, #344]	@ (8005658 <HAL_RCC_OscConfig+0x4a4>)
 8005500:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005502:	4a55      	ldr	r2, [pc, #340]	@ (8005658 <HAL_RCC_OscConfig+0x4a4>)
 8005504:	f043 0301 	orr.w	r3, r3, #1
 8005508:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800550a:	f7fd fb6b 	bl	8002be4 <HAL_GetTick>
 800550e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005510:	e008      	b.n	8005524 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005512:	f7fd fb67 	bl	8002be4 <HAL_GetTick>
 8005516:	4602      	mov	r2, r0
 8005518:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800551a:	1ad3      	subs	r3, r2, r3
 800551c:	2b02      	cmp	r3, #2
 800551e:	d901      	bls.n	8005524 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8005520:	2303      	movs	r3, #3
 8005522:	e219      	b.n	8005958 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005524:	4b4c      	ldr	r3, [pc, #304]	@ (8005658 <HAL_RCC_OscConfig+0x4a4>)
 8005526:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005528:	f003 0302 	and.w	r3, r3, #2
 800552c:	2b00      	cmp	r3, #0
 800552e:	d0f0      	beq.n	8005512 <HAL_RCC_OscConfig+0x35e>
 8005530:	e018      	b.n	8005564 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005532:	4b49      	ldr	r3, [pc, #292]	@ (8005658 <HAL_RCC_OscConfig+0x4a4>)
 8005534:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005536:	4a48      	ldr	r2, [pc, #288]	@ (8005658 <HAL_RCC_OscConfig+0x4a4>)
 8005538:	f023 0301 	bic.w	r3, r3, #1
 800553c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800553e:	f7fd fb51 	bl	8002be4 <HAL_GetTick>
 8005542:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005544:	e008      	b.n	8005558 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005546:	f7fd fb4d 	bl	8002be4 <HAL_GetTick>
 800554a:	4602      	mov	r2, r0
 800554c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800554e:	1ad3      	subs	r3, r2, r3
 8005550:	2b02      	cmp	r3, #2
 8005552:	d901      	bls.n	8005558 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8005554:	2303      	movs	r3, #3
 8005556:	e1ff      	b.n	8005958 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005558:	4b3f      	ldr	r3, [pc, #252]	@ (8005658 <HAL_RCC_OscConfig+0x4a4>)
 800555a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800555c:	f003 0302 	and.w	r3, r3, #2
 8005560:	2b00      	cmp	r3, #0
 8005562:	d1f0      	bne.n	8005546 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f003 0320 	and.w	r3, r3, #32
 800556c:	2b00      	cmp	r3, #0
 800556e:	d036      	beq.n	80055de <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	699b      	ldr	r3, [r3, #24]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d019      	beq.n	80055ac <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005578:	4b37      	ldr	r3, [pc, #220]	@ (8005658 <HAL_RCC_OscConfig+0x4a4>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4a36      	ldr	r2, [pc, #216]	@ (8005658 <HAL_RCC_OscConfig+0x4a4>)
 800557e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005582:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005584:	f7fd fb2e 	bl	8002be4 <HAL_GetTick>
 8005588:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800558a:	e008      	b.n	800559e <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800558c:	f7fd fb2a 	bl	8002be4 <HAL_GetTick>
 8005590:	4602      	mov	r2, r0
 8005592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005594:	1ad3      	subs	r3, r2, r3
 8005596:	2b02      	cmp	r3, #2
 8005598:	d901      	bls.n	800559e <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800559a:	2303      	movs	r3, #3
 800559c:	e1dc      	b.n	8005958 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800559e:	4b2e      	ldr	r3, [pc, #184]	@ (8005658 <HAL_RCC_OscConfig+0x4a4>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d0f0      	beq.n	800558c <HAL_RCC_OscConfig+0x3d8>
 80055aa:	e018      	b.n	80055de <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80055ac:	4b2a      	ldr	r3, [pc, #168]	@ (8005658 <HAL_RCC_OscConfig+0x4a4>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a29      	ldr	r2, [pc, #164]	@ (8005658 <HAL_RCC_OscConfig+0x4a4>)
 80055b2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80055b6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80055b8:	f7fd fb14 	bl	8002be4 <HAL_GetTick>
 80055bc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80055be:	e008      	b.n	80055d2 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80055c0:	f7fd fb10 	bl	8002be4 <HAL_GetTick>
 80055c4:	4602      	mov	r2, r0
 80055c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055c8:	1ad3      	subs	r3, r2, r3
 80055ca:	2b02      	cmp	r3, #2
 80055cc:	d901      	bls.n	80055d2 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 80055ce:	2303      	movs	r3, #3
 80055d0:	e1c2      	b.n	8005958 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80055d2:	4b21      	ldr	r3, [pc, #132]	@ (8005658 <HAL_RCC_OscConfig+0x4a4>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d1f0      	bne.n	80055c0 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f003 0304 	and.w	r3, r3, #4
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	f000 8086 	beq.w	80056f8 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80055ec:	4b1b      	ldr	r3, [pc, #108]	@ (800565c <HAL_RCC_OscConfig+0x4a8>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4a1a      	ldr	r2, [pc, #104]	@ (800565c <HAL_RCC_OscConfig+0x4a8>)
 80055f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80055f6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80055f8:	f7fd faf4 	bl	8002be4 <HAL_GetTick>
 80055fc:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80055fe:	e008      	b.n	8005612 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005600:	f7fd faf0 	bl	8002be4 <HAL_GetTick>
 8005604:	4602      	mov	r2, r0
 8005606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005608:	1ad3      	subs	r3, r2, r3
 800560a:	2b64      	cmp	r3, #100	@ 0x64
 800560c:	d901      	bls.n	8005612 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800560e:	2303      	movs	r3, #3
 8005610:	e1a2      	b.n	8005958 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005612:	4b12      	ldr	r3, [pc, #72]	@ (800565c <HAL_RCC_OscConfig+0x4a8>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800561a:	2b00      	cmp	r3, #0
 800561c:	d0f0      	beq.n	8005600 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	689b      	ldr	r3, [r3, #8]
 8005622:	2b01      	cmp	r3, #1
 8005624:	d106      	bne.n	8005634 <HAL_RCC_OscConfig+0x480>
 8005626:	4b0c      	ldr	r3, [pc, #48]	@ (8005658 <HAL_RCC_OscConfig+0x4a4>)
 8005628:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800562a:	4a0b      	ldr	r2, [pc, #44]	@ (8005658 <HAL_RCC_OscConfig+0x4a4>)
 800562c:	f043 0301 	orr.w	r3, r3, #1
 8005630:	6713      	str	r3, [r2, #112]	@ 0x70
 8005632:	e032      	b.n	800569a <HAL_RCC_OscConfig+0x4e6>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	689b      	ldr	r3, [r3, #8]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d111      	bne.n	8005660 <HAL_RCC_OscConfig+0x4ac>
 800563c:	4b06      	ldr	r3, [pc, #24]	@ (8005658 <HAL_RCC_OscConfig+0x4a4>)
 800563e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005640:	4a05      	ldr	r2, [pc, #20]	@ (8005658 <HAL_RCC_OscConfig+0x4a4>)
 8005642:	f023 0301 	bic.w	r3, r3, #1
 8005646:	6713      	str	r3, [r2, #112]	@ 0x70
 8005648:	4b03      	ldr	r3, [pc, #12]	@ (8005658 <HAL_RCC_OscConfig+0x4a4>)
 800564a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800564c:	4a02      	ldr	r2, [pc, #8]	@ (8005658 <HAL_RCC_OscConfig+0x4a4>)
 800564e:	f023 0304 	bic.w	r3, r3, #4
 8005652:	6713      	str	r3, [r2, #112]	@ 0x70
 8005654:	e021      	b.n	800569a <HAL_RCC_OscConfig+0x4e6>
 8005656:	bf00      	nop
 8005658:	58024400 	.word	0x58024400
 800565c:	58024800 	.word	0x58024800
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	689b      	ldr	r3, [r3, #8]
 8005664:	2b05      	cmp	r3, #5
 8005666:	d10c      	bne.n	8005682 <HAL_RCC_OscConfig+0x4ce>
 8005668:	4b83      	ldr	r3, [pc, #524]	@ (8005878 <HAL_RCC_OscConfig+0x6c4>)
 800566a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800566c:	4a82      	ldr	r2, [pc, #520]	@ (8005878 <HAL_RCC_OscConfig+0x6c4>)
 800566e:	f043 0304 	orr.w	r3, r3, #4
 8005672:	6713      	str	r3, [r2, #112]	@ 0x70
 8005674:	4b80      	ldr	r3, [pc, #512]	@ (8005878 <HAL_RCC_OscConfig+0x6c4>)
 8005676:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005678:	4a7f      	ldr	r2, [pc, #508]	@ (8005878 <HAL_RCC_OscConfig+0x6c4>)
 800567a:	f043 0301 	orr.w	r3, r3, #1
 800567e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005680:	e00b      	b.n	800569a <HAL_RCC_OscConfig+0x4e6>
 8005682:	4b7d      	ldr	r3, [pc, #500]	@ (8005878 <HAL_RCC_OscConfig+0x6c4>)
 8005684:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005686:	4a7c      	ldr	r2, [pc, #496]	@ (8005878 <HAL_RCC_OscConfig+0x6c4>)
 8005688:	f023 0301 	bic.w	r3, r3, #1
 800568c:	6713      	str	r3, [r2, #112]	@ 0x70
 800568e:	4b7a      	ldr	r3, [pc, #488]	@ (8005878 <HAL_RCC_OscConfig+0x6c4>)
 8005690:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005692:	4a79      	ldr	r2, [pc, #484]	@ (8005878 <HAL_RCC_OscConfig+0x6c4>)
 8005694:	f023 0304 	bic.w	r3, r3, #4
 8005698:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	689b      	ldr	r3, [r3, #8]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d015      	beq.n	80056ce <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056a2:	f7fd fa9f 	bl	8002be4 <HAL_GetTick>
 80056a6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80056a8:	e00a      	b.n	80056c0 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056aa:	f7fd fa9b 	bl	8002be4 <HAL_GetTick>
 80056ae:	4602      	mov	r2, r0
 80056b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056b2:	1ad3      	subs	r3, r2, r3
 80056b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d901      	bls.n	80056c0 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 80056bc:	2303      	movs	r3, #3
 80056be:	e14b      	b.n	8005958 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80056c0:	4b6d      	ldr	r3, [pc, #436]	@ (8005878 <HAL_RCC_OscConfig+0x6c4>)
 80056c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056c4:	f003 0302 	and.w	r3, r3, #2
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d0ee      	beq.n	80056aa <HAL_RCC_OscConfig+0x4f6>
 80056cc:	e014      	b.n	80056f8 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056ce:	f7fd fa89 	bl	8002be4 <HAL_GetTick>
 80056d2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80056d4:	e00a      	b.n	80056ec <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056d6:	f7fd fa85 	bl	8002be4 <HAL_GetTick>
 80056da:	4602      	mov	r2, r0
 80056dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056de:	1ad3      	subs	r3, r2, r3
 80056e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d901      	bls.n	80056ec <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80056e8:	2303      	movs	r3, #3
 80056ea:	e135      	b.n	8005958 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80056ec:	4b62      	ldr	r3, [pc, #392]	@ (8005878 <HAL_RCC_OscConfig+0x6c4>)
 80056ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056f0:	f003 0302 	and.w	r3, r3, #2
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d1ee      	bne.n	80056d6 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	f000 812a 	beq.w	8005956 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005702:	4b5d      	ldr	r3, [pc, #372]	@ (8005878 <HAL_RCC_OscConfig+0x6c4>)
 8005704:	691b      	ldr	r3, [r3, #16]
 8005706:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800570a:	2b18      	cmp	r3, #24
 800570c:	f000 80ba 	beq.w	8005884 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005714:	2b02      	cmp	r3, #2
 8005716:	f040 8095 	bne.w	8005844 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800571a:	4b57      	ldr	r3, [pc, #348]	@ (8005878 <HAL_RCC_OscConfig+0x6c4>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4a56      	ldr	r2, [pc, #344]	@ (8005878 <HAL_RCC_OscConfig+0x6c4>)
 8005720:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005724:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005726:	f7fd fa5d 	bl	8002be4 <HAL_GetTick>
 800572a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800572c:	e008      	b.n	8005740 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800572e:	f7fd fa59 	bl	8002be4 <HAL_GetTick>
 8005732:	4602      	mov	r2, r0
 8005734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005736:	1ad3      	subs	r3, r2, r3
 8005738:	2b02      	cmp	r3, #2
 800573a:	d901      	bls.n	8005740 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 800573c:	2303      	movs	r3, #3
 800573e:	e10b      	b.n	8005958 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005740:	4b4d      	ldr	r3, [pc, #308]	@ (8005878 <HAL_RCC_OscConfig+0x6c4>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005748:	2b00      	cmp	r3, #0
 800574a:	d1f0      	bne.n	800572e <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800574c:	4b4a      	ldr	r3, [pc, #296]	@ (8005878 <HAL_RCC_OscConfig+0x6c4>)
 800574e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005750:	4b4a      	ldr	r3, [pc, #296]	@ (800587c <HAL_RCC_OscConfig+0x6c8>)
 8005752:	4013      	ands	r3, r2
 8005754:	687a      	ldr	r2, [r7, #4]
 8005756:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8005758:	687a      	ldr	r2, [r7, #4]
 800575a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800575c:	0112      	lsls	r2, r2, #4
 800575e:	430a      	orrs	r2, r1
 8005760:	4945      	ldr	r1, [pc, #276]	@ (8005878 <HAL_RCC_OscConfig+0x6c4>)
 8005762:	4313      	orrs	r3, r2
 8005764:	628b      	str	r3, [r1, #40]	@ 0x28
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800576a:	3b01      	subs	r3, #1
 800576c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005774:	3b01      	subs	r3, #1
 8005776:	025b      	lsls	r3, r3, #9
 8005778:	b29b      	uxth	r3, r3
 800577a:	431a      	orrs	r2, r3
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005780:	3b01      	subs	r3, #1
 8005782:	041b      	lsls	r3, r3, #16
 8005784:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005788:	431a      	orrs	r2, r3
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800578e:	3b01      	subs	r3, #1
 8005790:	061b      	lsls	r3, r3, #24
 8005792:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005796:	4938      	ldr	r1, [pc, #224]	@ (8005878 <HAL_RCC_OscConfig+0x6c4>)
 8005798:	4313      	orrs	r3, r2
 800579a:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800579c:	4b36      	ldr	r3, [pc, #216]	@ (8005878 <HAL_RCC_OscConfig+0x6c4>)
 800579e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057a0:	4a35      	ldr	r2, [pc, #212]	@ (8005878 <HAL_RCC_OscConfig+0x6c4>)
 80057a2:	f023 0301 	bic.w	r3, r3, #1
 80057a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80057a8:	4b33      	ldr	r3, [pc, #204]	@ (8005878 <HAL_RCC_OscConfig+0x6c4>)
 80057aa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80057ac:	4b34      	ldr	r3, [pc, #208]	@ (8005880 <HAL_RCC_OscConfig+0x6cc>)
 80057ae:	4013      	ands	r3, r2
 80057b0:	687a      	ldr	r2, [r7, #4]
 80057b2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80057b4:	00d2      	lsls	r2, r2, #3
 80057b6:	4930      	ldr	r1, [pc, #192]	@ (8005878 <HAL_RCC_OscConfig+0x6c4>)
 80057b8:	4313      	orrs	r3, r2
 80057ba:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80057bc:	4b2e      	ldr	r3, [pc, #184]	@ (8005878 <HAL_RCC_OscConfig+0x6c4>)
 80057be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057c0:	f023 020c 	bic.w	r2, r3, #12
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057c8:	492b      	ldr	r1, [pc, #172]	@ (8005878 <HAL_RCC_OscConfig+0x6c4>)
 80057ca:	4313      	orrs	r3, r2
 80057cc:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80057ce:	4b2a      	ldr	r3, [pc, #168]	@ (8005878 <HAL_RCC_OscConfig+0x6c4>)
 80057d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057d2:	f023 0202 	bic.w	r2, r3, #2
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057da:	4927      	ldr	r1, [pc, #156]	@ (8005878 <HAL_RCC_OscConfig+0x6c4>)
 80057dc:	4313      	orrs	r3, r2
 80057de:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80057e0:	4b25      	ldr	r3, [pc, #148]	@ (8005878 <HAL_RCC_OscConfig+0x6c4>)
 80057e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057e4:	4a24      	ldr	r2, [pc, #144]	@ (8005878 <HAL_RCC_OscConfig+0x6c4>)
 80057e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80057ea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057ec:	4b22      	ldr	r3, [pc, #136]	@ (8005878 <HAL_RCC_OscConfig+0x6c4>)
 80057ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057f0:	4a21      	ldr	r2, [pc, #132]	@ (8005878 <HAL_RCC_OscConfig+0x6c4>)
 80057f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80057f6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80057f8:	4b1f      	ldr	r3, [pc, #124]	@ (8005878 <HAL_RCC_OscConfig+0x6c4>)
 80057fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057fc:	4a1e      	ldr	r2, [pc, #120]	@ (8005878 <HAL_RCC_OscConfig+0x6c4>)
 80057fe:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005802:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8005804:	4b1c      	ldr	r3, [pc, #112]	@ (8005878 <HAL_RCC_OscConfig+0x6c4>)
 8005806:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005808:	4a1b      	ldr	r2, [pc, #108]	@ (8005878 <HAL_RCC_OscConfig+0x6c4>)
 800580a:	f043 0301 	orr.w	r3, r3, #1
 800580e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005810:	4b19      	ldr	r3, [pc, #100]	@ (8005878 <HAL_RCC_OscConfig+0x6c4>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4a18      	ldr	r2, [pc, #96]	@ (8005878 <HAL_RCC_OscConfig+0x6c4>)
 8005816:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800581a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800581c:	f7fd f9e2 	bl	8002be4 <HAL_GetTick>
 8005820:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005822:	e008      	b.n	8005836 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005824:	f7fd f9de 	bl	8002be4 <HAL_GetTick>
 8005828:	4602      	mov	r2, r0
 800582a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800582c:	1ad3      	subs	r3, r2, r3
 800582e:	2b02      	cmp	r3, #2
 8005830:	d901      	bls.n	8005836 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8005832:	2303      	movs	r3, #3
 8005834:	e090      	b.n	8005958 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005836:	4b10      	ldr	r3, [pc, #64]	@ (8005878 <HAL_RCC_OscConfig+0x6c4>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800583e:	2b00      	cmp	r3, #0
 8005840:	d0f0      	beq.n	8005824 <HAL_RCC_OscConfig+0x670>
 8005842:	e088      	b.n	8005956 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005844:	4b0c      	ldr	r3, [pc, #48]	@ (8005878 <HAL_RCC_OscConfig+0x6c4>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a0b      	ldr	r2, [pc, #44]	@ (8005878 <HAL_RCC_OscConfig+0x6c4>)
 800584a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800584e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005850:	f7fd f9c8 	bl	8002be4 <HAL_GetTick>
 8005854:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005856:	e008      	b.n	800586a <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005858:	f7fd f9c4 	bl	8002be4 <HAL_GetTick>
 800585c:	4602      	mov	r2, r0
 800585e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005860:	1ad3      	subs	r3, r2, r3
 8005862:	2b02      	cmp	r3, #2
 8005864:	d901      	bls.n	800586a <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8005866:	2303      	movs	r3, #3
 8005868:	e076      	b.n	8005958 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800586a:	4b03      	ldr	r3, [pc, #12]	@ (8005878 <HAL_RCC_OscConfig+0x6c4>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005872:	2b00      	cmp	r3, #0
 8005874:	d1f0      	bne.n	8005858 <HAL_RCC_OscConfig+0x6a4>
 8005876:	e06e      	b.n	8005956 <HAL_RCC_OscConfig+0x7a2>
 8005878:	58024400 	.word	0x58024400
 800587c:	fffffc0c 	.word	0xfffffc0c
 8005880:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005884:	4b36      	ldr	r3, [pc, #216]	@ (8005960 <HAL_RCC_OscConfig+0x7ac>)
 8005886:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005888:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800588a:	4b35      	ldr	r3, [pc, #212]	@ (8005960 <HAL_RCC_OscConfig+0x7ac>)
 800588c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800588e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005894:	2b01      	cmp	r3, #1
 8005896:	d031      	beq.n	80058fc <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005898:	693b      	ldr	r3, [r7, #16]
 800589a:	f003 0203 	and.w	r2, r3, #3
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80058a2:	429a      	cmp	r2, r3
 80058a4:	d12a      	bne.n	80058fc <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80058a6:	693b      	ldr	r3, [r7, #16]
 80058a8:	091b      	lsrs	r3, r3, #4
 80058aa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058b2:	429a      	cmp	r2, r3
 80058b4:	d122      	bne.n	80058fc <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058c0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80058c2:	429a      	cmp	r2, r3
 80058c4:	d11a      	bne.n	80058fc <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	0a5b      	lsrs	r3, r3, #9
 80058ca:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058d2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80058d4:	429a      	cmp	r2, r3
 80058d6:	d111      	bne.n	80058fc <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	0c1b      	lsrs	r3, r3, #16
 80058dc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058e4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80058e6:	429a      	cmp	r2, r3
 80058e8:	d108      	bne.n	80058fc <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	0e1b      	lsrs	r3, r3, #24
 80058ee:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058f6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80058f8:	429a      	cmp	r2, r3
 80058fa:	d001      	beq.n	8005900 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 80058fc:	2301      	movs	r3, #1
 80058fe:	e02b      	b.n	8005958 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8005900:	4b17      	ldr	r3, [pc, #92]	@ (8005960 <HAL_RCC_OscConfig+0x7ac>)
 8005902:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005904:	08db      	lsrs	r3, r3, #3
 8005906:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800590a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005910:	693a      	ldr	r2, [r7, #16]
 8005912:	429a      	cmp	r2, r3
 8005914:	d01f      	beq.n	8005956 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8005916:	4b12      	ldr	r3, [pc, #72]	@ (8005960 <HAL_RCC_OscConfig+0x7ac>)
 8005918:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800591a:	4a11      	ldr	r2, [pc, #68]	@ (8005960 <HAL_RCC_OscConfig+0x7ac>)
 800591c:	f023 0301 	bic.w	r3, r3, #1
 8005920:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005922:	f7fd f95f 	bl	8002be4 <HAL_GetTick>
 8005926:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005928:	bf00      	nop
 800592a:	f7fd f95b 	bl	8002be4 <HAL_GetTick>
 800592e:	4602      	mov	r2, r0
 8005930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005932:	4293      	cmp	r3, r2
 8005934:	d0f9      	beq.n	800592a <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005936:	4b0a      	ldr	r3, [pc, #40]	@ (8005960 <HAL_RCC_OscConfig+0x7ac>)
 8005938:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800593a:	4b0a      	ldr	r3, [pc, #40]	@ (8005964 <HAL_RCC_OscConfig+0x7b0>)
 800593c:	4013      	ands	r3, r2
 800593e:	687a      	ldr	r2, [r7, #4]
 8005940:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005942:	00d2      	lsls	r2, r2, #3
 8005944:	4906      	ldr	r1, [pc, #24]	@ (8005960 <HAL_RCC_OscConfig+0x7ac>)
 8005946:	4313      	orrs	r3, r2
 8005948:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800594a:	4b05      	ldr	r3, [pc, #20]	@ (8005960 <HAL_RCC_OscConfig+0x7ac>)
 800594c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800594e:	4a04      	ldr	r2, [pc, #16]	@ (8005960 <HAL_RCC_OscConfig+0x7ac>)
 8005950:	f043 0301 	orr.w	r3, r3, #1
 8005954:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8005956:	2300      	movs	r3, #0
}
 8005958:	4618      	mov	r0, r3
 800595a:	3730      	adds	r7, #48	@ 0x30
 800595c:	46bd      	mov	sp, r7
 800595e:	bd80      	pop	{r7, pc}
 8005960:	58024400 	.word	0x58024400
 8005964:	ffff0007 	.word	0xffff0007

08005968 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b086      	sub	sp, #24
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
 8005970:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d101      	bne.n	800597c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005978:	2301      	movs	r3, #1
 800597a:	e19c      	b.n	8005cb6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800597c:	4b8a      	ldr	r3, [pc, #552]	@ (8005ba8 <HAL_RCC_ClockConfig+0x240>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f003 030f 	and.w	r3, r3, #15
 8005984:	683a      	ldr	r2, [r7, #0]
 8005986:	429a      	cmp	r2, r3
 8005988:	d910      	bls.n	80059ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800598a:	4b87      	ldr	r3, [pc, #540]	@ (8005ba8 <HAL_RCC_ClockConfig+0x240>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f023 020f 	bic.w	r2, r3, #15
 8005992:	4985      	ldr	r1, [pc, #532]	@ (8005ba8 <HAL_RCC_ClockConfig+0x240>)
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	4313      	orrs	r3, r2
 8005998:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800599a:	4b83      	ldr	r3, [pc, #524]	@ (8005ba8 <HAL_RCC_ClockConfig+0x240>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f003 030f 	and.w	r3, r3, #15
 80059a2:	683a      	ldr	r2, [r7, #0]
 80059a4:	429a      	cmp	r2, r3
 80059a6:	d001      	beq.n	80059ac <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80059a8:	2301      	movs	r3, #1
 80059aa:	e184      	b.n	8005cb6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f003 0304 	and.w	r3, r3, #4
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d010      	beq.n	80059da <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	691a      	ldr	r2, [r3, #16]
 80059bc:	4b7b      	ldr	r3, [pc, #492]	@ (8005bac <HAL_RCC_ClockConfig+0x244>)
 80059be:	699b      	ldr	r3, [r3, #24]
 80059c0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80059c4:	429a      	cmp	r2, r3
 80059c6:	d908      	bls.n	80059da <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80059c8:	4b78      	ldr	r3, [pc, #480]	@ (8005bac <HAL_RCC_ClockConfig+0x244>)
 80059ca:	699b      	ldr	r3, [r3, #24]
 80059cc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	691b      	ldr	r3, [r3, #16]
 80059d4:	4975      	ldr	r1, [pc, #468]	@ (8005bac <HAL_RCC_ClockConfig+0x244>)
 80059d6:	4313      	orrs	r3, r2
 80059d8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f003 0308 	and.w	r3, r3, #8
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d010      	beq.n	8005a08 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	695a      	ldr	r2, [r3, #20]
 80059ea:	4b70      	ldr	r3, [pc, #448]	@ (8005bac <HAL_RCC_ClockConfig+0x244>)
 80059ec:	69db      	ldr	r3, [r3, #28]
 80059ee:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80059f2:	429a      	cmp	r2, r3
 80059f4:	d908      	bls.n	8005a08 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80059f6:	4b6d      	ldr	r3, [pc, #436]	@ (8005bac <HAL_RCC_ClockConfig+0x244>)
 80059f8:	69db      	ldr	r3, [r3, #28]
 80059fa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	695b      	ldr	r3, [r3, #20]
 8005a02:	496a      	ldr	r1, [pc, #424]	@ (8005bac <HAL_RCC_ClockConfig+0x244>)
 8005a04:	4313      	orrs	r3, r2
 8005a06:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f003 0310 	and.w	r3, r3, #16
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d010      	beq.n	8005a36 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	699a      	ldr	r2, [r3, #24]
 8005a18:	4b64      	ldr	r3, [pc, #400]	@ (8005bac <HAL_RCC_ClockConfig+0x244>)
 8005a1a:	69db      	ldr	r3, [r3, #28]
 8005a1c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005a20:	429a      	cmp	r2, r3
 8005a22:	d908      	bls.n	8005a36 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005a24:	4b61      	ldr	r3, [pc, #388]	@ (8005bac <HAL_RCC_ClockConfig+0x244>)
 8005a26:	69db      	ldr	r3, [r3, #28]
 8005a28:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	699b      	ldr	r3, [r3, #24]
 8005a30:	495e      	ldr	r1, [pc, #376]	@ (8005bac <HAL_RCC_ClockConfig+0x244>)
 8005a32:	4313      	orrs	r3, r2
 8005a34:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f003 0320 	and.w	r3, r3, #32
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d010      	beq.n	8005a64 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	69da      	ldr	r2, [r3, #28]
 8005a46:	4b59      	ldr	r3, [pc, #356]	@ (8005bac <HAL_RCC_ClockConfig+0x244>)
 8005a48:	6a1b      	ldr	r3, [r3, #32]
 8005a4a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005a4e:	429a      	cmp	r2, r3
 8005a50:	d908      	bls.n	8005a64 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005a52:	4b56      	ldr	r3, [pc, #344]	@ (8005bac <HAL_RCC_ClockConfig+0x244>)
 8005a54:	6a1b      	ldr	r3, [r3, #32]
 8005a56:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	69db      	ldr	r3, [r3, #28]
 8005a5e:	4953      	ldr	r1, [pc, #332]	@ (8005bac <HAL_RCC_ClockConfig+0x244>)
 8005a60:	4313      	orrs	r3, r2
 8005a62:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f003 0302 	and.w	r3, r3, #2
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d010      	beq.n	8005a92 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	68da      	ldr	r2, [r3, #12]
 8005a74:	4b4d      	ldr	r3, [pc, #308]	@ (8005bac <HAL_RCC_ClockConfig+0x244>)
 8005a76:	699b      	ldr	r3, [r3, #24]
 8005a78:	f003 030f 	and.w	r3, r3, #15
 8005a7c:	429a      	cmp	r2, r3
 8005a7e:	d908      	bls.n	8005a92 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a80:	4b4a      	ldr	r3, [pc, #296]	@ (8005bac <HAL_RCC_ClockConfig+0x244>)
 8005a82:	699b      	ldr	r3, [r3, #24]
 8005a84:	f023 020f 	bic.w	r2, r3, #15
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	68db      	ldr	r3, [r3, #12]
 8005a8c:	4947      	ldr	r1, [pc, #284]	@ (8005bac <HAL_RCC_ClockConfig+0x244>)
 8005a8e:	4313      	orrs	r3, r2
 8005a90:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f003 0301 	and.w	r3, r3, #1
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d055      	beq.n	8005b4a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005a9e:	4b43      	ldr	r3, [pc, #268]	@ (8005bac <HAL_RCC_ClockConfig+0x244>)
 8005aa0:	699b      	ldr	r3, [r3, #24]
 8005aa2:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	689b      	ldr	r3, [r3, #8]
 8005aaa:	4940      	ldr	r1, [pc, #256]	@ (8005bac <HAL_RCC_ClockConfig+0x244>)
 8005aac:	4313      	orrs	r3, r2
 8005aae:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	685b      	ldr	r3, [r3, #4]
 8005ab4:	2b02      	cmp	r3, #2
 8005ab6:	d107      	bne.n	8005ac8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005ab8:	4b3c      	ldr	r3, [pc, #240]	@ (8005bac <HAL_RCC_ClockConfig+0x244>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d121      	bne.n	8005b08 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005ac4:	2301      	movs	r3, #1
 8005ac6:	e0f6      	b.n	8005cb6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	685b      	ldr	r3, [r3, #4]
 8005acc:	2b03      	cmp	r3, #3
 8005ace:	d107      	bne.n	8005ae0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005ad0:	4b36      	ldr	r3, [pc, #216]	@ (8005bac <HAL_RCC_ClockConfig+0x244>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d115      	bne.n	8005b08 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005adc:	2301      	movs	r3, #1
 8005ade:	e0ea      	b.n	8005cb6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	685b      	ldr	r3, [r3, #4]
 8005ae4:	2b01      	cmp	r3, #1
 8005ae6:	d107      	bne.n	8005af8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005ae8:	4b30      	ldr	r3, [pc, #192]	@ (8005bac <HAL_RCC_ClockConfig+0x244>)
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d109      	bne.n	8005b08 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005af4:	2301      	movs	r3, #1
 8005af6:	e0de      	b.n	8005cb6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005af8:	4b2c      	ldr	r3, [pc, #176]	@ (8005bac <HAL_RCC_ClockConfig+0x244>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f003 0304 	and.w	r3, r3, #4
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d101      	bne.n	8005b08 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005b04:	2301      	movs	r3, #1
 8005b06:	e0d6      	b.n	8005cb6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005b08:	4b28      	ldr	r3, [pc, #160]	@ (8005bac <HAL_RCC_ClockConfig+0x244>)
 8005b0a:	691b      	ldr	r3, [r3, #16]
 8005b0c:	f023 0207 	bic.w	r2, r3, #7
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	685b      	ldr	r3, [r3, #4]
 8005b14:	4925      	ldr	r1, [pc, #148]	@ (8005bac <HAL_RCC_ClockConfig+0x244>)
 8005b16:	4313      	orrs	r3, r2
 8005b18:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b1a:	f7fd f863 	bl	8002be4 <HAL_GetTick>
 8005b1e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b20:	e00a      	b.n	8005b38 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b22:	f7fd f85f 	bl	8002be4 <HAL_GetTick>
 8005b26:	4602      	mov	r2, r0
 8005b28:	697b      	ldr	r3, [r7, #20]
 8005b2a:	1ad3      	subs	r3, r2, r3
 8005b2c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d901      	bls.n	8005b38 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005b34:	2303      	movs	r3, #3
 8005b36:	e0be      	b.n	8005cb6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b38:	4b1c      	ldr	r3, [pc, #112]	@ (8005bac <HAL_RCC_ClockConfig+0x244>)
 8005b3a:	691b      	ldr	r3, [r3, #16]
 8005b3c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	685b      	ldr	r3, [r3, #4]
 8005b44:	00db      	lsls	r3, r3, #3
 8005b46:	429a      	cmp	r2, r3
 8005b48:	d1eb      	bne.n	8005b22 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f003 0302 	and.w	r3, r3, #2
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d010      	beq.n	8005b78 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	68da      	ldr	r2, [r3, #12]
 8005b5a:	4b14      	ldr	r3, [pc, #80]	@ (8005bac <HAL_RCC_ClockConfig+0x244>)
 8005b5c:	699b      	ldr	r3, [r3, #24]
 8005b5e:	f003 030f 	and.w	r3, r3, #15
 8005b62:	429a      	cmp	r2, r3
 8005b64:	d208      	bcs.n	8005b78 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b66:	4b11      	ldr	r3, [pc, #68]	@ (8005bac <HAL_RCC_ClockConfig+0x244>)
 8005b68:	699b      	ldr	r3, [r3, #24]
 8005b6a:	f023 020f 	bic.w	r2, r3, #15
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	68db      	ldr	r3, [r3, #12]
 8005b72:	490e      	ldr	r1, [pc, #56]	@ (8005bac <HAL_RCC_ClockConfig+0x244>)
 8005b74:	4313      	orrs	r3, r2
 8005b76:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005b78:	4b0b      	ldr	r3, [pc, #44]	@ (8005ba8 <HAL_RCC_ClockConfig+0x240>)
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f003 030f 	and.w	r3, r3, #15
 8005b80:	683a      	ldr	r2, [r7, #0]
 8005b82:	429a      	cmp	r2, r3
 8005b84:	d214      	bcs.n	8005bb0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b86:	4b08      	ldr	r3, [pc, #32]	@ (8005ba8 <HAL_RCC_ClockConfig+0x240>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f023 020f 	bic.w	r2, r3, #15
 8005b8e:	4906      	ldr	r1, [pc, #24]	@ (8005ba8 <HAL_RCC_ClockConfig+0x240>)
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	4313      	orrs	r3, r2
 8005b94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b96:	4b04      	ldr	r3, [pc, #16]	@ (8005ba8 <HAL_RCC_ClockConfig+0x240>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f003 030f 	and.w	r3, r3, #15
 8005b9e:	683a      	ldr	r2, [r7, #0]
 8005ba0:	429a      	cmp	r2, r3
 8005ba2:	d005      	beq.n	8005bb0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	e086      	b.n	8005cb6 <HAL_RCC_ClockConfig+0x34e>
 8005ba8:	52002000 	.word	0x52002000
 8005bac:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f003 0304 	and.w	r3, r3, #4
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d010      	beq.n	8005bde <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	691a      	ldr	r2, [r3, #16]
 8005bc0:	4b3f      	ldr	r3, [pc, #252]	@ (8005cc0 <HAL_RCC_ClockConfig+0x358>)
 8005bc2:	699b      	ldr	r3, [r3, #24]
 8005bc4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005bc8:	429a      	cmp	r2, r3
 8005bca:	d208      	bcs.n	8005bde <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005bcc:	4b3c      	ldr	r3, [pc, #240]	@ (8005cc0 <HAL_RCC_ClockConfig+0x358>)
 8005bce:	699b      	ldr	r3, [r3, #24]
 8005bd0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	691b      	ldr	r3, [r3, #16]
 8005bd8:	4939      	ldr	r1, [pc, #228]	@ (8005cc0 <HAL_RCC_ClockConfig+0x358>)
 8005bda:	4313      	orrs	r3, r2
 8005bdc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f003 0308 	and.w	r3, r3, #8
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d010      	beq.n	8005c0c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	695a      	ldr	r2, [r3, #20]
 8005bee:	4b34      	ldr	r3, [pc, #208]	@ (8005cc0 <HAL_RCC_ClockConfig+0x358>)
 8005bf0:	69db      	ldr	r3, [r3, #28]
 8005bf2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005bf6:	429a      	cmp	r2, r3
 8005bf8:	d208      	bcs.n	8005c0c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005bfa:	4b31      	ldr	r3, [pc, #196]	@ (8005cc0 <HAL_RCC_ClockConfig+0x358>)
 8005bfc:	69db      	ldr	r3, [r3, #28]
 8005bfe:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	695b      	ldr	r3, [r3, #20]
 8005c06:	492e      	ldr	r1, [pc, #184]	@ (8005cc0 <HAL_RCC_ClockConfig+0x358>)
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f003 0310 	and.w	r3, r3, #16
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d010      	beq.n	8005c3a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	699a      	ldr	r2, [r3, #24]
 8005c1c:	4b28      	ldr	r3, [pc, #160]	@ (8005cc0 <HAL_RCC_ClockConfig+0x358>)
 8005c1e:	69db      	ldr	r3, [r3, #28]
 8005c20:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005c24:	429a      	cmp	r2, r3
 8005c26:	d208      	bcs.n	8005c3a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005c28:	4b25      	ldr	r3, [pc, #148]	@ (8005cc0 <HAL_RCC_ClockConfig+0x358>)
 8005c2a:	69db      	ldr	r3, [r3, #28]
 8005c2c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	699b      	ldr	r3, [r3, #24]
 8005c34:	4922      	ldr	r1, [pc, #136]	@ (8005cc0 <HAL_RCC_ClockConfig+0x358>)
 8005c36:	4313      	orrs	r3, r2
 8005c38:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f003 0320 	and.w	r3, r3, #32
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d010      	beq.n	8005c68 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	69da      	ldr	r2, [r3, #28]
 8005c4a:	4b1d      	ldr	r3, [pc, #116]	@ (8005cc0 <HAL_RCC_ClockConfig+0x358>)
 8005c4c:	6a1b      	ldr	r3, [r3, #32]
 8005c4e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005c52:	429a      	cmp	r2, r3
 8005c54:	d208      	bcs.n	8005c68 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005c56:	4b1a      	ldr	r3, [pc, #104]	@ (8005cc0 <HAL_RCC_ClockConfig+0x358>)
 8005c58:	6a1b      	ldr	r3, [r3, #32]
 8005c5a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	69db      	ldr	r3, [r3, #28]
 8005c62:	4917      	ldr	r1, [pc, #92]	@ (8005cc0 <HAL_RCC_ClockConfig+0x358>)
 8005c64:	4313      	orrs	r3, r2
 8005c66:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005c68:	f000 f834 	bl	8005cd4 <HAL_RCC_GetSysClockFreq>
 8005c6c:	4602      	mov	r2, r0
 8005c6e:	4b14      	ldr	r3, [pc, #80]	@ (8005cc0 <HAL_RCC_ClockConfig+0x358>)
 8005c70:	699b      	ldr	r3, [r3, #24]
 8005c72:	0a1b      	lsrs	r3, r3, #8
 8005c74:	f003 030f 	and.w	r3, r3, #15
 8005c78:	4912      	ldr	r1, [pc, #72]	@ (8005cc4 <HAL_RCC_ClockConfig+0x35c>)
 8005c7a:	5ccb      	ldrb	r3, [r1, r3]
 8005c7c:	f003 031f 	and.w	r3, r3, #31
 8005c80:	fa22 f303 	lsr.w	r3, r2, r3
 8005c84:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005c86:	4b0e      	ldr	r3, [pc, #56]	@ (8005cc0 <HAL_RCC_ClockConfig+0x358>)
 8005c88:	699b      	ldr	r3, [r3, #24]
 8005c8a:	f003 030f 	and.w	r3, r3, #15
 8005c8e:	4a0d      	ldr	r2, [pc, #52]	@ (8005cc4 <HAL_RCC_ClockConfig+0x35c>)
 8005c90:	5cd3      	ldrb	r3, [r2, r3]
 8005c92:	f003 031f 	and.w	r3, r3, #31
 8005c96:	693a      	ldr	r2, [r7, #16]
 8005c98:	fa22 f303 	lsr.w	r3, r2, r3
 8005c9c:	4a0a      	ldr	r2, [pc, #40]	@ (8005cc8 <HAL_RCC_ClockConfig+0x360>)
 8005c9e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005ca0:	4a0a      	ldr	r2, [pc, #40]	@ (8005ccc <HAL_RCC_ClockConfig+0x364>)
 8005ca2:	693b      	ldr	r3, [r7, #16]
 8005ca4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005ca6:	4b0a      	ldr	r3, [pc, #40]	@ (8005cd0 <HAL_RCC_ClockConfig+0x368>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	4618      	mov	r0, r3
 8005cac:	f7fc ff50 	bl	8002b50 <HAL_InitTick>
 8005cb0:	4603      	mov	r3, r0
 8005cb2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005cb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	3718      	adds	r7, #24
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bd80      	pop	{r7, pc}
 8005cbe:	bf00      	nop
 8005cc0:	58024400 	.word	0x58024400
 8005cc4:	08012e08 	.word	0x08012e08
 8005cc8:	2400000c 	.word	0x2400000c
 8005ccc:	24000008 	.word	0x24000008
 8005cd0:	24000040 	.word	0x24000040

08005cd4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	b089      	sub	sp, #36	@ 0x24
 8005cd8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005cda:	4bb3      	ldr	r3, [pc, #716]	@ (8005fa8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005cdc:	691b      	ldr	r3, [r3, #16]
 8005cde:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005ce2:	2b18      	cmp	r3, #24
 8005ce4:	f200 8155 	bhi.w	8005f92 <HAL_RCC_GetSysClockFreq+0x2be>
 8005ce8:	a201      	add	r2, pc, #4	@ (adr r2, 8005cf0 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005cea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cee:	bf00      	nop
 8005cf0:	08005d55 	.word	0x08005d55
 8005cf4:	08005f93 	.word	0x08005f93
 8005cf8:	08005f93 	.word	0x08005f93
 8005cfc:	08005f93 	.word	0x08005f93
 8005d00:	08005f93 	.word	0x08005f93
 8005d04:	08005f93 	.word	0x08005f93
 8005d08:	08005f93 	.word	0x08005f93
 8005d0c:	08005f93 	.word	0x08005f93
 8005d10:	08005d7b 	.word	0x08005d7b
 8005d14:	08005f93 	.word	0x08005f93
 8005d18:	08005f93 	.word	0x08005f93
 8005d1c:	08005f93 	.word	0x08005f93
 8005d20:	08005f93 	.word	0x08005f93
 8005d24:	08005f93 	.word	0x08005f93
 8005d28:	08005f93 	.word	0x08005f93
 8005d2c:	08005f93 	.word	0x08005f93
 8005d30:	08005d81 	.word	0x08005d81
 8005d34:	08005f93 	.word	0x08005f93
 8005d38:	08005f93 	.word	0x08005f93
 8005d3c:	08005f93 	.word	0x08005f93
 8005d40:	08005f93 	.word	0x08005f93
 8005d44:	08005f93 	.word	0x08005f93
 8005d48:	08005f93 	.word	0x08005f93
 8005d4c:	08005f93 	.word	0x08005f93
 8005d50:	08005d87 	.word	0x08005d87
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005d54:	4b94      	ldr	r3, [pc, #592]	@ (8005fa8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f003 0320 	and.w	r3, r3, #32
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d009      	beq.n	8005d74 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005d60:	4b91      	ldr	r3, [pc, #580]	@ (8005fa8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	08db      	lsrs	r3, r3, #3
 8005d66:	f003 0303 	and.w	r3, r3, #3
 8005d6a:	4a90      	ldr	r2, [pc, #576]	@ (8005fac <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005d6c:	fa22 f303 	lsr.w	r3, r2, r3
 8005d70:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8005d72:	e111      	b.n	8005f98 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005d74:	4b8d      	ldr	r3, [pc, #564]	@ (8005fac <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005d76:	61bb      	str	r3, [r7, #24]
      break;
 8005d78:	e10e      	b.n	8005f98 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8005d7a:	4b8d      	ldr	r3, [pc, #564]	@ (8005fb0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005d7c:	61bb      	str	r3, [r7, #24]
      break;
 8005d7e:	e10b      	b.n	8005f98 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005d80:	4b8c      	ldr	r3, [pc, #560]	@ (8005fb4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005d82:	61bb      	str	r3, [r7, #24]
      break;
 8005d84:	e108      	b.n	8005f98 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005d86:	4b88      	ldr	r3, [pc, #544]	@ (8005fa8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d8a:	f003 0303 	and.w	r3, r3, #3
 8005d8e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005d90:	4b85      	ldr	r3, [pc, #532]	@ (8005fa8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d94:	091b      	lsrs	r3, r3, #4
 8005d96:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005d9a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005d9c:	4b82      	ldr	r3, [pc, #520]	@ (8005fa8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005da0:	f003 0301 	and.w	r3, r3, #1
 8005da4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005da6:	4b80      	ldr	r3, [pc, #512]	@ (8005fa8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005da8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005daa:	08db      	lsrs	r3, r3, #3
 8005dac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005db0:	68fa      	ldr	r2, [r7, #12]
 8005db2:	fb02 f303 	mul.w	r3, r2, r3
 8005db6:	ee07 3a90 	vmov	s15, r3
 8005dba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dbe:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8005dc2:	693b      	ldr	r3, [r7, #16]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	f000 80e1 	beq.w	8005f8c <HAL_RCC_GetSysClockFreq+0x2b8>
 8005dca:	697b      	ldr	r3, [r7, #20]
 8005dcc:	2b02      	cmp	r3, #2
 8005dce:	f000 8083 	beq.w	8005ed8 <HAL_RCC_GetSysClockFreq+0x204>
 8005dd2:	697b      	ldr	r3, [r7, #20]
 8005dd4:	2b02      	cmp	r3, #2
 8005dd6:	f200 80a1 	bhi.w	8005f1c <HAL_RCC_GetSysClockFreq+0x248>
 8005dda:	697b      	ldr	r3, [r7, #20]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d003      	beq.n	8005de8 <HAL_RCC_GetSysClockFreq+0x114>
 8005de0:	697b      	ldr	r3, [r7, #20]
 8005de2:	2b01      	cmp	r3, #1
 8005de4:	d056      	beq.n	8005e94 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005de6:	e099      	b.n	8005f1c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005de8:	4b6f      	ldr	r3, [pc, #444]	@ (8005fa8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f003 0320 	and.w	r3, r3, #32
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d02d      	beq.n	8005e50 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005df4:	4b6c      	ldr	r3, [pc, #432]	@ (8005fa8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	08db      	lsrs	r3, r3, #3
 8005dfa:	f003 0303 	and.w	r3, r3, #3
 8005dfe:	4a6b      	ldr	r2, [pc, #428]	@ (8005fac <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005e00:	fa22 f303 	lsr.w	r3, r2, r3
 8005e04:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	ee07 3a90 	vmov	s15, r3
 8005e0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e10:	693b      	ldr	r3, [r7, #16]
 8005e12:	ee07 3a90 	vmov	s15, r3
 8005e16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e1e:	4b62      	ldr	r3, [pc, #392]	@ (8005fa8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e26:	ee07 3a90 	vmov	s15, r3
 8005e2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e2e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005e32:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8005fb8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005e36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e3e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005e42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e4a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8005e4e:	e087      	b.n	8005f60 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005e50:	693b      	ldr	r3, [r7, #16]
 8005e52:	ee07 3a90 	vmov	s15, r3
 8005e56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e5a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8005fbc <HAL_RCC_GetSysClockFreq+0x2e8>
 8005e5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e62:	4b51      	ldr	r3, [pc, #324]	@ (8005fa8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e6a:	ee07 3a90 	vmov	s15, r3
 8005e6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e72:	ed97 6a02 	vldr	s12, [r7, #8]
 8005e76:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8005fb8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005e7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e82:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005e86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e8e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005e92:	e065      	b.n	8005f60 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005e94:	693b      	ldr	r3, [r7, #16]
 8005e96:	ee07 3a90 	vmov	s15, r3
 8005e9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e9e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8005fc0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005ea2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ea6:	4b40      	ldr	r3, [pc, #256]	@ (8005fa8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ea8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005eaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005eae:	ee07 3a90 	vmov	s15, r3
 8005eb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005eb6:	ed97 6a02 	vldr	s12, [r7, #8]
 8005eba:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8005fb8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005ebe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ec2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ec6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005eca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ece:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ed2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005ed6:	e043      	b.n	8005f60 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005ed8:	693b      	ldr	r3, [r7, #16]
 8005eda:	ee07 3a90 	vmov	s15, r3
 8005ede:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ee2:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8005fc4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005ee6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005eea:	4b2f      	ldr	r3, [pc, #188]	@ (8005fa8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005eec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005eee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ef2:	ee07 3a90 	vmov	s15, r3
 8005ef6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005efa:	ed97 6a02 	vldr	s12, [r7, #8]
 8005efe:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8005fb8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005f02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f0a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005f0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f16:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005f1a:	e021      	b.n	8005f60 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005f1c:	693b      	ldr	r3, [r7, #16]
 8005f1e:	ee07 3a90 	vmov	s15, r3
 8005f22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f26:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8005fc0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005f2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f2e:	4b1e      	ldr	r3, [pc, #120]	@ (8005fa8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f36:	ee07 3a90 	vmov	s15, r3
 8005f3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f3e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005f42:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8005fb8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005f46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f4e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005f52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f5a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005f5e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005f60:	4b11      	ldr	r3, [pc, #68]	@ (8005fa8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f64:	0a5b      	lsrs	r3, r3, #9
 8005f66:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005f6a:	3301      	adds	r3, #1
 8005f6c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	ee07 3a90 	vmov	s15, r3
 8005f74:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005f78:	edd7 6a07 	vldr	s13, [r7, #28]
 8005f7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f84:	ee17 3a90 	vmov	r3, s15
 8005f88:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005f8a:	e005      	b.n	8005f98 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	61bb      	str	r3, [r7, #24]
      break;
 8005f90:	e002      	b.n	8005f98 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005f92:	4b07      	ldr	r3, [pc, #28]	@ (8005fb0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005f94:	61bb      	str	r3, [r7, #24]
      break;
 8005f96:	bf00      	nop
  }

  return sysclockfreq;
 8005f98:	69bb      	ldr	r3, [r7, #24]
}
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	3724      	adds	r7, #36	@ 0x24
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa4:	4770      	bx	lr
 8005fa6:	bf00      	nop
 8005fa8:	58024400 	.word	0x58024400
 8005fac:	03d09000 	.word	0x03d09000
 8005fb0:	003d0900 	.word	0x003d0900
 8005fb4:	017d7840 	.word	0x017d7840
 8005fb8:	46000000 	.word	0x46000000
 8005fbc:	4c742400 	.word	0x4c742400
 8005fc0:	4a742400 	.word	0x4a742400
 8005fc4:	4bbebc20 	.word	0x4bbebc20

08005fc8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b082      	sub	sp, #8
 8005fcc:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005fce:	f7ff fe81 	bl	8005cd4 <HAL_RCC_GetSysClockFreq>
 8005fd2:	4602      	mov	r2, r0
 8005fd4:	4b10      	ldr	r3, [pc, #64]	@ (8006018 <HAL_RCC_GetHCLKFreq+0x50>)
 8005fd6:	699b      	ldr	r3, [r3, #24]
 8005fd8:	0a1b      	lsrs	r3, r3, #8
 8005fda:	f003 030f 	and.w	r3, r3, #15
 8005fde:	490f      	ldr	r1, [pc, #60]	@ (800601c <HAL_RCC_GetHCLKFreq+0x54>)
 8005fe0:	5ccb      	ldrb	r3, [r1, r3]
 8005fe2:	f003 031f 	and.w	r3, r3, #31
 8005fe6:	fa22 f303 	lsr.w	r3, r2, r3
 8005fea:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005fec:	4b0a      	ldr	r3, [pc, #40]	@ (8006018 <HAL_RCC_GetHCLKFreq+0x50>)
 8005fee:	699b      	ldr	r3, [r3, #24]
 8005ff0:	f003 030f 	and.w	r3, r3, #15
 8005ff4:	4a09      	ldr	r2, [pc, #36]	@ (800601c <HAL_RCC_GetHCLKFreq+0x54>)
 8005ff6:	5cd3      	ldrb	r3, [r2, r3]
 8005ff8:	f003 031f 	and.w	r3, r3, #31
 8005ffc:	687a      	ldr	r2, [r7, #4]
 8005ffe:	fa22 f303 	lsr.w	r3, r2, r3
 8006002:	4a07      	ldr	r2, [pc, #28]	@ (8006020 <HAL_RCC_GetHCLKFreq+0x58>)
 8006004:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006006:	4a07      	ldr	r2, [pc, #28]	@ (8006024 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800600c:	4b04      	ldr	r3, [pc, #16]	@ (8006020 <HAL_RCC_GetHCLKFreq+0x58>)
 800600e:	681b      	ldr	r3, [r3, #0]
}
 8006010:	4618      	mov	r0, r3
 8006012:	3708      	adds	r7, #8
 8006014:	46bd      	mov	sp, r7
 8006016:	bd80      	pop	{r7, pc}
 8006018:	58024400 	.word	0x58024400
 800601c:	08012e08 	.word	0x08012e08
 8006020:	2400000c 	.word	0x2400000c
 8006024:	24000008 	.word	0x24000008

08006028 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800602c:	f7ff ffcc 	bl	8005fc8 <HAL_RCC_GetHCLKFreq>
 8006030:	4602      	mov	r2, r0
 8006032:	4b06      	ldr	r3, [pc, #24]	@ (800604c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006034:	69db      	ldr	r3, [r3, #28]
 8006036:	091b      	lsrs	r3, r3, #4
 8006038:	f003 0307 	and.w	r3, r3, #7
 800603c:	4904      	ldr	r1, [pc, #16]	@ (8006050 <HAL_RCC_GetPCLK1Freq+0x28>)
 800603e:	5ccb      	ldrb	r3, [r1, r3]
 8006040:	f003 031f 	and.w	r3, r3, #31
 8006044:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006048:	4618      	mov	r0, r3
 800604a:	bd80      	pop	{r7, pc}
 800604c:	58024400 	.word	0x58024400
 8006050:	08012e08 	.word	0x08012e08

08006054 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006058:	f7ff ffb6 	bl	8005fc8 <HAL_RCC_GetHCLKFreq>
 800605c:	4602      	mov	r2, r0
 800605e:	4b06      	ldr	r3, [pc, #24]	@ (8006078 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006060:	69db      	ldr	r3, [r3, #28]
 8006062:	0a1b      	lsrs	r3, r3, #8
 8006064:	f003 0307 	and.w	r3, r3, #7
 8006068:	4904      	ldr	r1, [pc, #16]	@ (800607c <HAL_RCC_GetPCLK2Freq+0x28>)
 800606a:	5ccb      	ldrb	r3, [r1, r3]
 800606c:	f003 031f 	and.w	r3, r3, #31
 8006070:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006074:	4618      	mov	r0, r3
 8006076:	bd80      	pop	{r7, pc}
 8006078:	58024400 	.word	0x58024400
 800607c:	08012e08 	.word	0x08012e08

08006080 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006080:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006084:	b0c6      	sub	sp, #280	@ 0x118
 8006086:	af00      	add	r7, sp, #0
 8006088:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800608c:	2300      	movs	r3, #0
 800608e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006092:	2300      	movs	r3, #0
 8006094:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006098:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800609c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060a0:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80060a4:	2500      	movs	r5, #0
 80060a6:	ea54 0305 	orrs.w	r3, r4, r5
 80060aa:	d049      	beq.n	8006140 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80060ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060b0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80060b2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80060b6:	d02f      	beq.n	8006118 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80060b8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80060bc:	d828      	bhi.n	8006110 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80060be:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80060c2:	d01a      	beq.n	80060fa <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80060c4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80060c8:	d822      	bhi.n	8006110 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d003      	beq.n	80060d6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80060ce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80060d2:	d007      	beq.n	80060e4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80060d4:	e01c      	b.n	8006110 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80060d6:	4bab      	ldr	r3, [pc, #684]	@ (8006384 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80060d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060da:	4aaa      	ldr	r2, [pc, #680]	@ (8006384 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80060dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80060e0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80060e2:	e01a      	b.n	800611a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80060e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060e8:	3308      	adds	r3, #8
 80060ea:	2102      	movs	r1, #2
 80060ec:	4618      	mov	r0, r3
 80060ee:	f001 fc25 	bl	800793c <RCCEx_PLL2_Config>
 80060f2:	4603      	mov	r3, r0
 80060f4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80060f8:	e00f      	b.n	800611a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80060fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060fe:	3328      	adds	r3, #40	@ 0x28
 8006100:	2102      	movs	r1, #2
 8006102:	4618      	mov	r0, r3
 8006104:	f001 fccc 	bl	8007aa0 <RCCEx_PLL3_Config>
 8006108:	4603      	mov	r3, r0
 800610a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800610e:	e004      	b.n	800611a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006110:	2301      	movs	r3, #1
 8006112:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006116:	e000      	b.n	800611a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8006118:	bf00      	nop
    }

    if (ret == HAL_OK)
 800611a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800611e:	2b00      	cmp	r3, #0
 8006120:	d10a      	bne.n	8006138 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006122:	4b98      	ldr	r3, [pc, #608]	@ (8006384 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006124:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006126:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800612a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800612e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006130:	4a94      	ldr	r2, [pc, #592]	@ (8006384 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006132:	430b      	orrs	r3, r1
 8006134:	6513      	str	r3, [r2, #80]	@ 0x50
 8006136:	e003      	b.n	8006140 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006138:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800613c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006140:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006148:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800614c:	f04f 0900 	mov.w	r9, #0
 8006150:	ea58 0309 	orrs.w	r3, r8, r9
 8006154:	d047      	beq.n	80061e6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8006156:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800615a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800615c:	2b04      	cmp	r3, #4
 800615e:	d82a      	bhi.n	80061b6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8006160:	a201      	add	r2, pc, #4	@ (adr r2, 8006168 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8006162:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006166:	bf00      	nop
 8006168:	0800617d 	.word	0x0800617d
 800616c:	0800618b 	.word	0x0800618b
 8006170:	080061a1 	.word	0x080061a1
 8006174:	080061bf 	.word	0x080061bf
 8006178:	080061bf 	.word	0x080061bf
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800617c:	4b81      	ldr	r3, [pc, #516]	@ (8006384 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800617e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006180:	4a80      	ldr	r2, [pc, #512]	@ (8006384 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006182:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006186:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006188:	e01a      	b.n	80061c0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800618a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800618e:	3308      	adds	r3, #8
 8006190:	2100      	movs	r1, #0
 8006192:	4618      	mov	r0, r3
 8006194:	f001 fbd2 	bl	800793c <RCCEx_PLL2_Config>
 8006198:	4603      	mov	r3, r0
 800619a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800619e:	e00f      	b.n	80061c0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80061a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061a4:	3328      	adds	r3, #40	@ 0x28
 80061a6:	2100      	movs	r1, #0
 80061a8:	4618      	mov	r0, r3
 80061aa:	f001 fc79 	bl	8007aa0 <RCCEx_PLL3_Config>
 80061ae:	4603      	mov	r3, r0
 80061b0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80061b4:	e004      	b.n	80061c0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80061b6:	2301      	movs	r3, #1
 80061b8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80061bc:	e000      	b.n	80061c0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80061be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061c0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d10a      	bne.n	80061de <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80061c8:	4b6e      	ldr	r3, [pc, #440]	@ (8006384 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80061ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80061cc:	f023 0107 	bic.w	r1, r3, #7
 80061d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061d6:	4a6b      	ldr	r2, [pc, #428]	@ (8006384 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80061d8:	430b      	orrs	r3, r1
 80061da:	6513      	str	r3, [r2, #80]	@ 0x50
 80061dc:	e003      	b.n	80061e6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061de:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80061e2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80061e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061ee:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 80061f2:	f04f 0b00 	mov.w	fp, #0
 80061f6:	ea5a 030b 	orrs.w	r3, sl, fp
 80061fa:	d05b      	beq.n	80062b4 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80061fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006200:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006204:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8006208:	d03b      	beq.n	8006282 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800620a:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800620e:	d834      	bhi.n	800627a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006210:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006214:	d037      	beq.n	8006286 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8006216:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800621a:	d82e      	bhi.n	800627a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800621c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006220:	d033      	beq.n	800628a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8006222:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006226:	d828      	bhi.n	800627a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006228:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800622c:	d01a      	beq.n	8006264 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800622e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006232:	d822      	bhi.n	800627a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006234:	2b00      	cmp	r3, #0
 8006236:	d003      	beq.n	8006240 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8006238:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800623c:	d007      	beq.n	800624e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800623e:	e01c      	b.n	800627a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006240:	4b50      	ldr	r3, [pc, #320]	@ (8006384 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006242:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006244:	4a4f      	ldr	r2, [pc, #316]	@ (8006384 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006246:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800624a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800624c:	e01e      	b.n	800628c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800624e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006252:	3308      	adds	r3, #8
 8006254:	2100      	movs	r1, #0
 8006256:	4618      	mov	r0, r3
 8006258:	f001 fb70 	bl	800793c <RCCEx_PLL2_Config>
 800625c:	4603      	mov	r3, r0
 800625e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006262:	e013      	b.n	800628c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006264:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006268:	3328      	adds	r3, #40	@ 0x28
 800626a:	2100      	movs	r1, #0
 800626c:	4618      	mov	r0, r3
 800626e:	f001 fc17 	bl	8007aa0 <RCCEx_PLL3_Config>
 8006272:	4603      	mov	r3, r0
 8006274:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006278:	e008      	b.n	800628c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800627a:	2301      	movs	r3, #1
 800627c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006280:	e004      	b.n	800628c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8006282:	bf00      	nop
 8006284:	e002      	b.n	800628c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8006286:	bf00      	nop
 8006288:	e000      	b.n	800628c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800628a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800628c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006290:	2b00      	cmp	r3, #0
 8006292:	d10b      	bne.n	80062ac <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006294:	4b3b      	ldr	r3, [pc, #236]	@ (8006384 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006296:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006298:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800629c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062a0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80062a4:	4a37      	ldr	r2, [pc, #220]	@ (8006384 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80062a6:	430b      	orrs	r3, r1
 80062a8:	6593      	str	r3, [r2, #88]	@ 0x58
 80062aa:	e003      	b.n	80062b4 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062ac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80062b0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80062b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062bc:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80062c0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80062c4:	2300      	movs	r3, #0
 80062c6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80062ca:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80062ce:	460b      	mov	r3, r1
 80062d0:	4313      	orrs	r3, r2
 80062d2:	d05d      	beq.n	8006390 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80062d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062d8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80062dc:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80062e0:	d03b      	beq.n	800635a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80062e2:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80062e6:	d834      	bhi.n	8006352 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80062e8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80062ec:	d037      	beq.n	800635e <HAL_RCCEx_PeriphCLKConfig+0x2de>
 80062ee:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80062f2:	d82e      	bhi.n	8006352 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80062f4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80062f8:	d033      	beq.n	8006362 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 80062fa:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80062fe:	d828      	bhi.n	8006352 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006300:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006304:	d01a      	beq.n	800633c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8006306:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800630a:	d822      	bhi.n	8006352 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800630c:	2b00      	cmp	r3, #0
 800630e:	d003      	beq.n	8006318 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006310:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006314:	d007      	beq.n	8006326 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8006316:	e01c      	b.n	8006352 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006318:	4b1a      	ldr	r3, [pc, #104]	@ (8006384 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800631a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800631c:	4a19      	ldr	r2, [pc, #100]	@ (8006384 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800631e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006322:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006324:	e01e      	b.n	8006364 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006326:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800632a:	3308      	adds	r3, #8
 800632c:	2100      	movs	r1, #0
 800632e:	4618      	mov	r0, r3
 8006330:	f001 fb04 	bl	800793c <RCCEx_PLL2_Config>
 8006334:	4603      	mov	r3, r0
 8006336:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800633a:	e013      	b.n	8006364 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800633c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006340:	3328      	adds	r3, #40	@ 0x28
 8006342:	2100      	movs	r1, #0
 8006344:	4618      	mov	r0, r3
 8006346:	f001 fbab 	bl	8007aa0 <RCCEx_PLL3_Config>
 800634a:	4603      	mov	r3, r0
 800634c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006350:	e008      	b.n	8006364 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006352:	2301      	movs	r3, #1
 8006354:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006358:	e004      	b.n	8006364 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800635a:	bf00      	nop
 800635c:	e002      	b.n	8006364 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800635e:	bf00      	nop
 8006360:	e000      	b.n	8006364 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8006362:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006364:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006368:	2b00      	cmp	r3, #0
 800636a:	d10d      	bne.n	8006388 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800636c:	4b05      	ldr	r3, [pc, #20]	@ (8006384 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800636e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006370:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8006374:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006378:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800637c:	4a01      	ldr	r2, [pc, #4]	@ (8006384 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800637e:	430b      	orrs	r3, r1
 8006380:	6593      	str	r3, [r2, #88]	@ 0x58
 8006382:	e005      	b.n	8006390 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8006384:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006388:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800638c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006390:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006398:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800639c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80063a0:	2300      	movs	r3, #0
 80063a2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80063a6:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80063aa:	460b      	mov	r3, r1
 80063ac:	4313      	orrs	r3, r2
 80063ae:	d03a      	beq.n	8006426 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80063b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80063b6:	2b30      	cmp	r3, #48	@ 0x30
 80063b8:	d01f      	beq.n	80063fa <HAL_RCCEx_PeriphCLKConfig+0x37a>
 80063ba:	2b30      	cmp	r3, #48	@ 0x30
 80063bc:	d819      	bhi.n	80063f2 <HAL_RCCEx_PeriphCLKConfig+0x372>
 80063be:	2b20      	cmp	r3, #32
 80063c0:	d00c      	beq.n	80063dc <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80063c2:	2b20      	cmp	r3, #32
 80063c4:	d815      	bhi.n	80063f2 <HAL_RCCEx_PeriphCLKConfig+0x372>
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d019      	beq.n	80063fe <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80063ca:	2b10      	cmp	r3, #16
 80063cc:	d111      	bne.n	80063f2 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80063ce:	4baa      	ldr	r3, [pc, #680]	@ (8006678 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80063d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063d2:	4aa9      	ldr	r2, [pc, #676]	@ (8006678 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80063d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80063d8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80063da:	e011      	b.n	8006400 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80063dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063e0:	3308      	adds	r3, #8
 80063e2:	2102      	movs	r1, #2
 80063e4:	4618      	mov	r0, r3
 80063e6:	f001 faa9 	bl	800793c <RCCEx_PLL2_Config>
 80063ea:	4603      	mov	r3, r0
 80063ec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80063f0:	e006      	b.n	8006400 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80063f2:	2301      	movs	r3, #1
 80063f4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80063f8:	e002      	b.n	8006400 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80063fa:	bf00      	nop
 80063fc:	e000      	b.n	8006400 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80063fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006400:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006404:	2b00      	cmp	r3, #0
 8006406:	d10a      	bne.n	800641e <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8006408:	4b9b      	ldr	r3, [pc, #620]	@ (8006678 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800640a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800640c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8006410:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006414:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006416:	4a98      	ldr	r2, [pc, #608]	@ (8006678 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006418:	430b      	orrs	r3, r1
 800641a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800641c:	e003      	b.n	8006426 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800641e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006422:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006426:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800642a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800642e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8006432:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006436:	2300      	movs	r3, #0
 8006438:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800643c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8006440:	460b      	mov	r3, r1
 8006442:	4313      	orrs	r3, r2
 8006444:	d051      	beq.n	80064ea <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8006446:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800644a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800644c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006450:	d035      	beq.n	80064be <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8006452:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006456:	d82e      	bhi.n	80064b6 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8006458:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800645c:	d031      	beq.n	80064c2 <HAL_RCCEx_PeriphCLKConfig+0x442>
 800645e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006462:	d828      	bhi.n	80064b6 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8006464:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006468:	d01a      	beq.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800646a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800646e:	d822      	bhi.n	80064b6 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8006470:	2b00      	cmp	r3, #0
 8006472:	d003      	beq.n	800647c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8006474:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006478:	d007      	beq.n	800648a <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800647a:	e01c      	b.n	80064b6 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800647c:	4b7e      	ldr	r3, [pc, #504]	@ (8006678 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800647e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006480:	4a7d      	ldr	r2, [pc, #500]	@ (8006678 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006482:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006486:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006488:	e01c      	b.n	80064c4 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800648a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800648e:	3308      	adds	r3, #8
 8006490:	2100      	movs	r1, #0
 8006492:	4618      	mov	r0, r3
 8006494:	f001 fa52 	bl	800793c <RCCEx_PLL2_Config>
 8006498:	4603      	mov	r3, r0
 800649a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800649e:	e011      	b.n	80064c4 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80064a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064a4:	3328      	adds	r3, #40	@ 0x28
 80064a6:	2100      	movs	r1, #0
 80064a8:	4618      	mov	r0, r3
 80064aa:	f001 faf9 	bl	8007aa0 <RCCEx_PLL3_Config>
 80064ae:	4603      	mov	r3, r0
 80064b0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80064b4:	e006      	b.n	80064c4 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80064b6:	2301      	movs	r3, #1
 80064b8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80064bc:	e002      	b.n	80064c4 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80064be:	bf00      	nop
 80064c0:	e000      	b.n	80064c4 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80064c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064c4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d10a      	bne.n	80064e2 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80064cc:	4b6a      	ldr	r3, [pc, #424]	@ (8006678 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80064ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80064d0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80064d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80064da:	4a67      	ldr	r2, [pc, #412]	@ (8006678 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80064dc:	430b      	orrs	r3, r1
 80064de:	6513      	str	r3, [r2, #80]	@ 0x50
 80064e0:	e003      	b.n	80064ea <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064e2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80064e6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80064ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064f2:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80064f6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80064fa:	2300      	movs	r3, #0
 80064fc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006500:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8006504:	460b      	mov	r3, r1
 8006506:	4313      	orrs	r3, r2
 8006508:	d053      	beq.n	80065b2 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800650a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800650e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006510:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006514:	d033      	beq.n	800657e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8006516:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800651a:	d82c      	bhi.n	8006576 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800651c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006520:	d02f      	beq.n	8006582 <HAL_RCCEx_PeriphCLKConfig+0x502>
 8006522:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006526:	d826      	bhi.n	8006576 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006528:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800652c:	d02b      	beq.n	8006586 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800652e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006532:	d820      	bhi.n	8006576 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006534:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006538:	d012      	beq.n	8006560 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800653a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800653e:	d81a      	bhi.n	8006576 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006540:	2b00      	cmp	r3, #0
 8006542:	d022      	beq.n	800658a <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8006544:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006548:	d115      	bne.n	8006576 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800654a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800654e:	3308      	adds	r3, #8
 8006550:	2101      	movs	r1, #1
 8006552:	4618      	mov	r0, r3
 8006554:	f001 f9f2 	bl	800793c <RCCEx_PLL2_Config>
 8006558:	4603      	mov	r3, r0
 800655a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800655e:	e015      	b.n	800658c <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006560:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006564:	3328      	adds	r3, #40	@ 0x28
 8006566:	2101      	movs	r1, #1
 8006568:	4618      	mov	r0, r3
 800656a:	f001 fa99 	bl	8007aa0 <RCCEx_PLL3_Config>
 800656e:	4603      	mov	r3, r0
 8006570:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006574:	e00a      	b.n	800658c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006576:	2301      	movs	r3, #1
 8006578:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800657c:	e006      	b.n	800658c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800657e:	bf00      	nop
 8006580:	e004      	b.n	800658c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006582:	bf00      	nop
 8006584:	e002      	b.n	800658c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006586:	bf00      	nop
 8006588:	e000      	b.n	800658c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800658a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800658c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006590:	2b00      	cmp	r3, #0
 8006592:	d10a      	bne.n	80065aa <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006594:	4b38      	ldr	r3, [pc, #224]	@ (8006678 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006596:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006598:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800659c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80065a2:	4a35      	ldr	r2, [pc, #212]	@ (8006678 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80065a4:	430b      	orrs	r3, r1
 80065a6:	6513      	str	r3, [r2, #80]	@ 0x50
 80065a8:	e003      	b.n	80065b2 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065aa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80065ae:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80065b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ba:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80065be:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80065c2:	2300      	movs	r3, #0
 80065c4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80065c8:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80065cc:	460b      	mov	r3, r1
 80065ce:	4313      	orrs	r3, r2
 80065d0:	d058      	beq.n	8006684 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80065d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065d6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80065da:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80065de:	d033      	beq.n	8006648 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80065e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80065e4:	d82c      	bhi.n	8006640 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80065e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065ea:	d02f      	beq.n	800664c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80065ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065f0:	d826      	bhi.n	8006640 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80065f2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80065f6:	d02b      	beq.n	8006650 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 80065f8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80065fc:	d820      	bhi.n	8006640 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80065fe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006602:	d012      	beq.n	800662a <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8006604:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006608:	d81a      	bhi.n	8006640 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800660a:	2b00      	cmp	r3, #0
 800660c:	d022      	beq.n	8006654 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800660e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006612:	d115      	bne.n	8006640 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006614:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006618:	3308      	adds	r3, #8
 800661a:	2101      	movs	r1, #1
 800661c:	4618      	mov	r0, r3
 800661e:	f001 f98d 	bl	800793c <RCCEx_PLL2_Config>
 8006622:	4603      	mov	r3, r0
 8006624:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006628:	e015      	b.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800662a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800662e:	3328      	adds	r3, #40	@ 0x28
 8006630:	2101      	movs	r1, #1
 8006632:	4618      	mov	r0, r3
 8006634:	f001 fa34 	bl	8007aa0 <RCCEx_PLL3_Config>
 8006638:	4603      	mov	r3, r0
 800663a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800663e:	e00a      	b.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8006640:	2301      	movs	r3, #1
 8006642:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006646:	e006      	b.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006648:	bf00      	nop
 800664a:	e004      	b.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800664c:	bf00      	nop
 800664e:	e002      	b.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006650:	bf00      	nop
 8006652:	e000      	b.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006654:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006656:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800665a:	2b00      	cmp	r3, #0
 800665c:	d10e      	bne.n	800667c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800665e:	4b06      	ldr	r3, [pc, #24]	@ (8006678 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006660:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006662:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006666:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800666a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800666e:	4a02      	ldr	r2, [pc, #8]	@ (8006678 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006670:	430b      	orrs	r3, r1
 8006672:	6593      	str	r3, [r2, #88]	@ 0x58
 8006674:	e006      	b.n	8006684 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8006676:	bf00      	nop
 8006678:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800667c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006680:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006684:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800668c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8006690:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006694:	2300      	movs	r3, #0
 8006696:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800669a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800669e:	460b      	mov	r3, r1
 80066a0:	4313      	orrs	r3, r2
 80066a2:	d037      	beq.n	8006714 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80066a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80066aa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80066ae:	d00e      	beq.n	80066ce <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80066b0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80066b4:	d816      	bhi.n	80066e4 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d018      	beq.n	80066ec <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80066ba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80066be:	d111      	bne.n	80066e4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80066c0:	4bc4      	ldr	r3, [pc, #784]	@ (80069d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80066c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066c4:	4ac3      	ldr	r2, [pc, #780]	@ (80069d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80066c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80066ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80066cc:	e00f      	b.n	80066ee <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80066ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066d2:	3308      	adds	r3, #8
 80066d4:	2101      	movs	r1, #1
 80066d6:	4618      	mov	r0, r3
 80066d8:	f001 f930 	bl	800793c <RCCEx_PLL2_Config>
 80066dc:	4603      	mov	r3, r0
 80066de:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80066e2:	e004      	b.n	80066ee <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80066e4:	2301      	movs	r3, #1
 80066e6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80066ea:	e000      	b.n	80066ee <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 80066ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80066ee:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d10a      	bne.n	800670c <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80066f6:	4bb7      	ldr	r3, [pc, #732]	@ (80069d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80066f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80066fa:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80066fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006702:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006704:	4ab3      	ldr	r2, [pc, #716]	@ (80069d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006706:	430b      	orrs	r3, r1
 8006708:	6513      	str	r3, [r2, #80]	@ 0x50
 800670a:	e003      	b.n	8006714 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800670c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006710:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006714:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800671c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8006720:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006724:	2300      	movs	r3, #0
 8006726:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800672a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800672e:	460b      	mov	r3, r1
 8006730:	4313      	orrs	r3, r2
 8006732:	d039      	beq.n	80067a8 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8006734:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006738:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800673a:	2b03      	cmp	r3, #3
 800673c:	d81c      	bhi.n	8006778 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800673e:	a201      	add	r2, pc, #4	@ (adr r2, 8006744 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8006740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006744:	08006781 	.word	0x08006781
 8006748:	08006755 	.word	0x08006755
 800674c:	08006763 	.word	0x08006763
 8006750:	08006781 	.word	0x08006781
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006754:	4b9f      	ldr	r3, [pc, #636]	@ (80069d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006756:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006758:	4a9e      	ldr	r2, [pc, #632]	@ (80069d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800675a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800675e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006760:	e00f      	b.n	8006782 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006762:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006766:	3308      	adds	r3, #8
 8006768:	2102      	movs	r1, #2
 800676a:	4618      	mov	r0, r3
 800676c:	f001 f8e6 	bl	800793c <RCCEx_PLL2_Config>
 8006770:	4603      	mov	r3, r0
 8006772:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006776:	e004      	b.n	8006782 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006778:	2301      	movs	r3, #1
 800677a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800677e:	e000      	b.n	8006782 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8006780:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006782:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006786:	2b00      	cmp	r3, #0
 8006788:	d10a      	bne.n	80067a0 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800678a:	4b92      	ldr	r3, [pc, #584]	@ (80069d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800678c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800678e:	f023 0103 	bic.w	r1, r3, #3
 8006792:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006796:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006798:	4a8e      	ldr	r2, [pc, #568]	@ (80069d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800679a:	430b      	orrs	r3, r1
 800679c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800679e:	e003      	b.n	80067a8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067a0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80067a4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80067a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067b0:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80067b4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80067b8:	2300      	movs	r3, #0
 80067ba:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80067be:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80067c2:	460b      	mov	r3, r1
 80067c4:	4313      	orrs	r3, r2
 80067c6:	f000 8099 	beq.w	80068fc <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80067ca:	4b83      	ldr	r3, [pc, #524]	@ (80069d8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	4a82      	ldr	r2, [pc, #520]	@ (80069d8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80067d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80067d4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80067d6:	f7fc fa05 	bl	8002be4 <HAL_GetTick>
 80067da:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80067de:	e00b      	b.n	80067f8 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80067e0:	f7fc fa00 	bl	8002be4 <HAL_GetTick>
 80067e4:	4602      	mov	r2, r0
 80067e6:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80067ea:	1ad3      	subs	r3, r2, r3
 80067ec:	2b64      	cmp	r3, #100	@ 0x64
 80067ee:	d903      	bls.n	80067f8 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 80067f0:	2303      	movs	r3, #3
 80067f2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80067f6:	e005      	b.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80067f8:	4b77      	ldr	r3, [pc, #476]	@ (80069d8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006800:	2b00      	cmp	r3, #0
 8006802:	d0ed      	beq.n	80067e0 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8006804:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006808:	2b00      	cmp	r3, #0
 800680a:	d173      	bne.n	80068f4 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800680c:	4b71      	ldr	r3, [pc, #452]	@ (80069d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800680e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006810:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006814:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006818:	4053      	eors	r3, r2
 800681a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800681e:	2b00      	cmp	r3, #0
 8006820:	d015      	beq.n	800684e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006822:	4b6c      	ldr	r3, [pc, #432]	@ (80069d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006824:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006826:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800682a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800682e:	4b69      	ldr	r3, [pc, #420]	@ (80069d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006830:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006832:	4a68      	ldr	r2, [pc, #416]	@ (80069d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006834:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006838:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800683a:	4b66      	ldr	r3, [pc, #408]	@ (80069d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800683c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800683e:	4a65      	ldr	r2, [pc, #404]	@ (80069d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006840:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006844:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006846:	4a63      	ldr	r2, [pc, #396]	@ (80069d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006848:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800684c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800684e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006852:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006856:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800685a:	d118      	bne.n	800688e <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800685c:	f7fc f9c2 	bl	8002be4 <HAL_GetTick>
 8006860:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006864:	e00d      	b.n	8006882 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006866:	f7fc f9bd 	bl	8002be4 <HAL_GetTick>
 800686a:	4602      	mov	r2, r0
 800686c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8006870:	1ad2      	subs	r2, r2, r3
 8006872:	f241 3388 	movw	r3, #5000	@ 0x1388
 8006876:	429a      	cmp	r2, r3
 8006878:	d903      	bls.n	8006882 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800687a:	2303      	movs	r3, #3
 800687c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8006880:	e005      	b.n	800688e <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006882:	4b54      	ldr	r3, [pc, #336]	@ (80069d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006884:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006886:	f003 0302 	and.w	r3, r3, #2
 800688a:	2b00      	cmp	r3, #0
 800688c:	d0eb      	beq.n	8006866 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800688e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006892:	2b00      	cmp	r3, #0
 8006894:	d129      	bne.n	80068ea <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006896:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800689a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800689e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80068a2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80068a6:	d10e      	bne.n	80068c6 <HAL_RCCEx_PeriphCLKConfig+0x846>
 80068a8:	4b4a      	ldr	r3, [pc, #296]	@ (80069d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80068aa:	691b      	ldr	r3, [r3, #16]
 80068ac:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80068b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068b4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80068b8:	091a      	lsrs	r2, r3, #4
 80068ba:	4b48      	ldr	r3, [pc, #288]	@ (80069dc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80068bc:	4013      	ands	r3, r2
 80068be:	4a45      	ldr	r2, [pc, #276]	@ (80069d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80068c0:	430b      	orrs	r3, r1
 80068c2:	6113      	str	r3, [r2, #16]
 80068c4:	e005      	b.n	80068d2 <HAL_RCCEx_PeriphCLKConfig+0x852>
 80068c6:	4b43      	ldr	r3, [pc, #268]	@ (80069d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80068c8:	691b      	ldr	r3, [r3, #16]
 80068ca:	4a42      	ldr	r2, [pc, #264]	@ (80069d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80068cc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80068d0:	6113      	str	r3, [r2, #16]
 80068d2:	4b40      	ldr	r3, [pc, #256]	@ (80069d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80068d4:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80068d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068da:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80068de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80068e2:	4a3c      	ldr	r2, [pc, #240]	@ (80069d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80068e4:	430b      	orrs	r3, r1
 80068e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80068e8:	e008      	b.n	80068fc <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80068ea:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80068ee:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 80068f2:	e003      	b.n	80068fc <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068f4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80068f8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80068fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006904:	f002 0301 	and.w	r3, r2, #1
 8006908:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800690c:	2300      	movs	r3, #0
 800690e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006912:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8006916:	460b      	mov	r3, r1
 8006918:	4313      	orrs	r3, r2
 800691a:	f000 808f 	beq.w	8006a3c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800691e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006922:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006924:	2b28      	cmp	r3, #40	@ 0x28
 8006926:	d871      	bhi.n	8006a0c <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8006928:	a201      	add	r2, pc, #4	@ (adr r2, 8006930 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800692a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800692e:	bf00      	nop
 8006930:	08006a15 	.word	0x08006a15
 8006934:	08006a0d 	.word	0x08006a0d
 8006938:	08006a0d 	.word	0x08006a0d
 800693c:	08006a0d 	.word	0x08006a0d
 8006940:	08006a0d 	.word	0x08006a0d
 8006944:	08006a0d 	.word	0x08006a0d
 8006948:	08006a0d 	.word	0x08006a0d
 800694c:	08006a0d 	.word	0x08006a0d
 8006950:	080069e1 	.word	0x080069e1
 8006954:	08006a0d 	.word	0x08006a0d
 8006958:	08006a0d 	.word	0x08006a0d
 800695c:	08006a0d 	.word	0x08006a0d
 8006960:	08006a0d 	.word	0x08006a0d
 8006964:	08006a0d 	.word	0x08006a0d
 8006968:	08006a0d 	.word	0x08006a0d
 800696c:	08006a0d 	.word	0x08006a0d
 8006970:	080069f7 	.word	0x080069f7
 8006974:	08006a0d 	.word	0x08006a0d
 8006978:	08006a0d 	.word	0x08006a0d
 800697c:	08006a0d 	.word	0x08006a0d
 8006980:	08006a0d 	.word	0x08006a0d
 8006984:	08006a0d 	.word	0x08006a0d
 8006988:	08006a0d 	.word	0x08006a0d
 800698c:	08006a0d 	.word	0x08006a0d
 8006990:	08006a15 	.word	0x08006a15
 8006994:	08006a0d 	.word	0x08006a0d
 8006998:	08006a0d 	.word	0x08006a0d
 800699c:	08006a0d 	.word	0x08006a0d
 80069a0:	08006a0d 	.word	0x08006a0d
 80069a4:	08006a0d 	.word	0x08006a0d
 80069a8:	08006a0d 	.word	0x08006a0d
 80069ac:	08006a0d 	.word	0x08006a0d
 80069b0:	08006a15 	.word	0x08006a15
 80069b4:	08006a0d 	.word	0x08006a0d
 80069b8:	08006a0d 	.word	0x08006a0d
 80069bc:	08006a0d 	.word	0x08006a0d
 80069c0:	08006a0d 	.word	0x08006a0d
 80069c4:	08006a0d 	.word	0x08006a0d
 80069c8:	08006a0d 	.word	0x08006a0d
 80069cc:	08006a0d 	.word	0x08006a0d
 80069d0:	08006a15 	.word	0x08006a15
 80069d4:	58024400 	.word	0x58024400
 80069d8:	58024800 	.word	0x58024800
 80069dc:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80069e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069e4:	3308      	adds	r3, #8
 80069e6:	2101      	movs	r1, #1
 80069e8:	4618      	mov	r0, r3
 80069ea:	f000 ffa7 	bl	800793c <RCCEx_PLL2_Config>
 80069ee:	4603      	mov	r3, r0
 80069f0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80069f4:	e00f      	b.n	8006a16 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80069f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069fa:	3328      	adds	r3, #40	@ 0x28
 80069fc:	2101      	movs	r1, #1
 80069fe:	4618      	mov	r0, r3
 8006a00:	f001 f84e 	bl	8007aa0 <RCCEx_PLL3_Config>
 8006a04:	4603      	mov	r3, r0
 8006a06:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006a0a:	e004      	b.n	8006a16 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006a0c:	2301      	movs	r3, #1
 8006a0e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006a12:	e000      	b.n	8006a16 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8006a14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a16:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d10a      	bne.n	8006a34 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006a1e:	4bbf      	ldr	r3, [pc, #764]	@ (8006d1c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006a20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a22:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8006a26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a2a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006a2c:	4abb      	ldr	r2, [pc, #748]	@ (8006d1c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006a2e:	430b      	orrs	r3, r1
 8006a30:	6553      	str	r3, [r2, #84]	@ 0x54
 8006a32:	e003      	b.n	8006a3c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a34:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006a38:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006a3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a44:	f002 0302 	and.w	r3, r2, #2
 8006a48:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006a52:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8006a56:	460b      	mov	r3, r1
 8006a58:	4313      	orrs	r3, r2
 8006a5a:	d041      	beq.n	8006ae0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006a5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a62:	2b05      	cmp	r3, #5
 8006a64:	d824      	bhi.n	8006ab0 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8006a66:	a201      	add	r2, pc, #4	@ (adr r2, 8006a6c <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8006a68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a6c:	08006ab9 	.word	0x08006ab9
 8006a70:	08006a85 	.word	0x08006a85
 8006a74:	08006a9b 	.word	0x08006a9b
 8006a78:	08006ab9 	.word	0x08006ab9
 8006a7c:	08006ab9 	.word	0x08006ab9
 8006a80:	08006ab9 	.word	0x08006ab9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006a84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a88:	3308      	adds	r3, #8
 8006a8a:	2101      	movs	r1, #1
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	f000 ff55 	bl	800793c <RCCEx_PLL2_Config>
 8006a92:	4603      	mov	r3, r0
 8006a94:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006a98:	e00f      	b.n	8006aba <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006a9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a9e:	3328      	adds	r3, #40	@ 0x28
 8006aa0:	2101      	movs	r1, #1
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	f000 fffc 	bl	8007aa0 <RCCEx_PLL3_Config>
 8006aa8:	4603      	mov	r3, r0
 8006aaa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006aae:	e004      	b.n	8006aba <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ab0:	2301      	movs	r3, #1
 8006ab2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006ab6:	e000      	b.n	8006aba <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8006ab8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006aba:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d10a      	bne.n	8006ad8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006ac2:	4b96      	ldr	r3, [pc, #600]	@ (8006d1c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006ac4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ac6:	f023 0107 	bic.w	r1, r3, #7
 8006aca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ace:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006ad0:	4a92      	ldr	r2, [pc, #584]	@ (8006d1c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006ad2:	430b      	orrs	r3, r1
 8006ad4:	6553      	str	r3, [r2, #84]	@ 0x54
 8006ad6:	e003      	b.n	8006ae0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ad8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006adc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006ae0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ae8:	f002 0304 	and.w	r3, r2, #4
 8006aec:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006af0:	2300      	movs	r3, #0
 8006af2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006af6:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006afa:	460b      	mov	r3, r1
 8006afc:	4313      	orrs	r3, r2
 8006afe:	d044      	beq.n	8006b8a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006b00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b08:	2b05      	cmp	r3, #5
 8006b0a:	d825      	bhi.n	8006b58 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8006b0c:	a201      	add	r2, pc, #4	@ (adr r2, 8006b14 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8006b0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b12:	bf00      	nop
 8006b14:	08006b61 	.word	0x08006b61
 8006b18:	08006b2d 	.word	0x08006b2d
 8006b1c:	08006b43 	.word	0x08006b43
 8006b20:	08006b61 	.word	0x08006b61
 8006b24:	08006b61 	.word	0x08006b61
 8006b28:	08006b61 	.word	0x08006b61
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006b2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b30:	3308      	adds	r3, #8
 8006b32:	2101      	movs	r1, #1
 8006b34:	4618      	mov	r0, r3
 8006b36:	f000 ff01 	bl	800793c <RCCEx_PLL2_Config>
 8006b3a:	4603      	mov	r3, r0
 8006b3c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006b40:	e00f      	b.n	8006b62 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006b42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b46:	3328      	adds	r3, #40	@ 0x28
 8006b48:	2101      	movs	r1, #1
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	f000 ffa8 	bl	8007aa0 <RCCEx_PLL3_Config>
 8006b50:	4603      	mov	r3, r0
 8006b52:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006b56:	e004      	b.n	8006b62 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b58:	2301      	movs	r3, #1
 8006b5a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006b5e:	e000      	b.n	8006b62 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8006b60:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b62:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d10b      	bne.n	8006b82 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006b6a:	4b6c      	ldr	r3, [pc, #432]	@ (8006d1c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006b6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b6e:	f023 0107 	bic.w	r1, r3, #7
 8006b72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b7a:	4a68      	ldr	r2, [pc, #416]	@ (8006d1c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006b7c:	430b      	orrs	r3, r1
 8006b7e:	6593      	str	r3, [r2, #88]	@ 0x58
 8006b80:	e003      	b.n	8006b8a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b82:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006b86:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006b8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b92:	f002 0320 	and.w	r3, r2, #32
 8006b96:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006ba0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8006ba4:	460b      	mov	r3, r1
 8006ba6:	4313      	orrs	r3, r2
 8006ba8:	d055      	beq.n	8006c56 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006baa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006bb2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006bb6:	d033      	beq.n	8006c20 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8006bb8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006bbc:	d82c      	bhi.n	8006c18 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006bbe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006bc2:	d02f      	beq.n	8006c24 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8006bc4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006bc8:	d826      	bhi.n	8006c18 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006bca:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006bce:	d02b      	beq.n	8006c28 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8006bd0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006bd4:	d820      	bhi.n	8006c18 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006bd6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006bda:	d012      	beq.n	8006c02 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8006bdc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006be0:	d81a      	bhi.n	8006c18 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d022      	beq.n	8006c2c <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8006be6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006bea:	d115      	bne.n	8006c18 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006bec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bf0:	3308      	adds	r3, #8
 8006bf2:	2100      	movs	r1, #0
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	f000 fea1 	bl	800793c <RCCEx_PLL2_Config>
 8006bfa:	4603      	mov	r3, r0
 8006bfc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006c00:	e015      	b.n	8006c2e <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006c02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c06:	3328      	adds	r3, #40	@ 0x28
 8006c08:	2102      	movs	r1, #2
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	f000 ff48 	bl	8007aa0 <RCCEx_PLL3_Config>
 8006c10:	4603      	mov	r3, r0
 8006c12:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006c16:	e00a      	b.n	8006c2e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c18:	2301      	movs	r3, #1
 8006c1a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006c1e:	e006      	b.n	8006c2e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006c20:	bf00      	nop
 8006c22:	e004      	b.n	8006c2e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006c24:	bf00      	nop
 8006c26:	e002      	b.n	8006c2e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006c28:	bf00      	nop
 8006c2a:	e000      	b.n	8006c2e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006c2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c2e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d10b      	bne.n	8006c4e <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006c36:	4b39      	ldr	r3, [pc, #228]	@ (8006d1c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006c38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c3a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006c3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c42:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006c46:	4a35      	ldr	r2, [pc, #212]	@ (8006d1c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006c48:	430b      	orrs	r3, r1
 8006c4a:	6553      	str	r3, [r2, #84]	@ 0x54
 8006c4c:	e003      	b.n	8006c56 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c4e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006c52:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006c56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c5e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8006c62:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006c66:	2300      	movs	r3, #0
 8006c68:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006c6c:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8006c70:	460b      	mov	r3, r1
 8006c72:	4313      	orrs	r3, r2
 8006c74:	d058      	beq.n	8006d28 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006c76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c7a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006c7e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006c82:	d033      	beq.n	8006cec <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8006c84:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006c88:	d82c      	bhi.n	8006ce4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006c8a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c8e:	d02f      	beq.n	8006cf0 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8006c90:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c94:	d826      	bhi.n	8006ce4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006c96:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006c9a:	d02b      	beq.n	8006cf4 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8006c9c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006ca0:	d820      	bhi.n	8006ce4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006ca2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006ca6:	d012      	beq.n	8006cce <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8006ca8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006cac:	d81a      	bhi.n	8006ce4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d022      	beq.n	8006cf8 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8006cb2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006cb6:	d115      	bne.n	8006ce4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006cb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cbc:	3308      	adds	r3, #8
 8006cbe:	2100      	movs	r1, #0
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	f000 fe3b 	bl	800793c <RCCEx_PLL2_Config>
 8006cc6:	4603      	mov	r3, r0
 8006cc8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006ccc:	e015      	b.n	8006cfa <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006cce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cd2:	3328      	adds	r3, #40	@ 0x28
 8006cd4:	2102      	movs	r1, #2
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	f000 fee2 	bl	8007aa0 <RCCEx_PLL3_Config>
 8006cdc:	4603      	mov	r3, r0
 8006cde:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006ce2:	e00a      	b.n	8006cfa <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ce4:	2301      	movs	r3, #1
 8006ce6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006cea:	e006      	b.n	8006cfa <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006cec:	bf00      	nop
 8006cee:	e004      	b.n	8006cfa <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006cf0:	bf00      	nop
 8006cf2:	e002      	b.n	8006cfa <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006cf4:	bf00      	nop
 8006cf6:	e000      	b.n	8006cfa <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006cf8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006cfa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d10e      	bne.n	8006d20 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006d02:	4b06      	ldr	r3, [pc, #24]	@ (8006d1c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006d04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d06:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8006d0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d0e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006d12:	4a02      	ldr	r2, [pc, #8]	@ (8006d1c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006d14:	430b      	orrs	r3, r1
 8006d16:	6593      	str	r3, [r2, #88]	@ 0x58
 8006d18:	e006      	b.n	8006d28 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8006d1a:	bf00      	nop
 8006d1c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d20:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006d24:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006d28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d30:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8006d34:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006d38:	2300      	movs	r3, #0
 8006d3a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006d3e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8006d42:	460b      	mov	r3, r1
 8006d44:	4313      	orrs	r3, r2
 8006d46:	d055      	beq.n	8006df4 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006d48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d4c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006d50:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006d54:	d033      	beq.n	8006dbe <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8006d56:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006d5a:	d82c      	bhi.n	8006db6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006d5c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006d60:	d02f      	beq.n	8006dc2 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8006d62:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006d66:	d826      	bhi.n	8006db6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006d68:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006d6c:	d02b      	beq.n	8006dc6 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8006d6e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006d72:	d820      	bhi.n	8006db6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006d74:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006d78:	d012      	beq.n	8006da0 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8006d7a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006d7e:	d81a      	bhi.n	8006db6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d022      	beq.n	8006dca <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8006d84:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006d88:	d115      	bne.n	8006db6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006d8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d8e:	3308      	adds	r3, #8
 8006d90:	2100      	movs	r1, #0
 8006d92:	4618      	mov	r0, r3
 8006d94:	f000 fdd2 	bl	800793c <RCCEx_PLL2_Config>
 8006d98:	4603      	mov	r3, r0
 8006d9a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006d9e:	e015      	b.n	8006dcc <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006da0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006da4:	3328      	adds	r3, #40	@ 0x28
 8006da6:	2102      	movs	r1, #2
 8006da8:	4618      	mov	r0, r3
 8006daa:	f000 fe79 	bl	8007aa0 <RCCEx_PLL3_Config>
 8006dae:	4603      	mov	r3, r0
 8006db0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006db4:	e00a      	b.n	8006dcc <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006db6:	2301      	movs	r3, #1
 8006db8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006dbc:	e006      	b.n	8006dcc <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006dbe:	bf00      	nop
 8006dc0:	e004      	b.n	8006dcc <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006dc2:	bf00      	nop
 8006dc4:	e002      	b.n	8006dcc <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006dc6:	bf00      	nop
 8006dc8:	e000      	b.n	8006dcc <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006dca:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006dcc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d10b      	bne.n	8006dec <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006dd4:	4ba0      	ldr	r3, [pc, #640]	@ (8007058 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006dd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006dd8:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8006ddc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006de0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006de4:	4a9c      	ldr	r2, [pc, #624]	@ (8007058 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006de6:	430b      	orrs	r3, r1
 8006de8:	6593      	str	r3, [r2, #88]	@ 0x58
 8006dea:	e003      	b.n	8006df4 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006df0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8006df4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dfc:	f002 0308 	and.w	r3, r2, #8
 8006e00:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006e04:	2300      	movs	r3, #0
 8006e06:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006e0a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8006e0e:	460b      	mov	r3, r1
 8006e10:	4313      	orrs	r3, r2
 8006e12:	d01e      	beq.n	8006e52 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8006e14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e18:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006e1c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e20:	d10c      	bne.n	8006e3c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006e22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e26:	3328      	adds	r3, #40	@ 0x28
 8006e28:	2102      	movs	r1, #2
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	f000 fe38 	bl	8007aa0 <RCCEx_PLL3_Config>
 8006e30:	4603      	mov	r3, r0
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d002      	beq.n	8006e3c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8006e36:	2301      	movs	r3, #1
 8006e38:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8006e3c:	4b86      	ldr	r3, [pc, #536]	@ (8007058 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006e3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e40:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006e44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e48:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006e4c:	4a82      	ldr	r2, [pc, #520]	@ (8007058 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006e4e:	430b      	orrs	r3, r1
 8006e50:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006e52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e5a:	f002 0310 	and.w	r3, r2, #16
 8006e5e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006e62:	2300      	movs	r3, #0
 8006e64:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006e68:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8006e6c:	460b      	mov	r3, r1
 8006e6e:	4313      	orrs	r3, r2
 8006e70:	d01e      	beq.n	8006eb0 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006e72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e76:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006e7a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006e7e:	d10c      	bne.n	8006e9a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006e80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e84:	3328      	adds	r3, #40	@ 0x28
 8006e86:	2102      	movs	r1, #2
 8006e88:	4618      	mov	r0, r3
 8006e8a:	f000 fe09 	bl	8007aa0 <RCCEx_PLL3_Config>
 8006e8e:	4603      	mov	r3, r0
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d002      	beq.n	8006e9a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8006e94:	2301      	movs	r3, #1
 8006e96:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006e9a:	4b6f      	ldr	r3, [pc, #444]	@ (8007058 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006e9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e9e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006ea2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ea6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006eaa:	4a6b      	ldr	r2, [pc, #428]	@ (8007058 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006eac:	430b      	orrs	r3, r1
 8006eae:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006eb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eb8:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8006ebc:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006ec2:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8006ec6:	460b      	mov	r3, r1
 8006ec8:	4313      	orrs	r3, r2
 8006eca:	d03e      	beq.n	8006f4a <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006ecc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ed0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006ed4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006ed8:	d022      	beq.n	8006f20 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8006eda:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006ede:	d81b      	bhi.n	8006f18 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d003      	beq.n	8006eec <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8006ee4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ee8:	d00b      	beq.n	8006f02 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8006eea:	e015      	b.n	8006f18 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006eec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ef0:	3308      	adds	r3, #8
 8006ef2:	2100      	movs	r1, #0
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	f000 fd21 	bl	800793c <RCCEx_PLL2_Config>
 8006efa:	4603      	mov	r3, r0
 8006efc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006f00:	e00f      	b.n	8006f22 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006f02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f06:	3328      	adds	r3, #40	@ 0x28
 8006f08:	2102      	movs	r1, #2
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	f000 fdc8 	bl	8007aa0 <RCCEx_PLL3_Config>
 8006f10:	4603      	mov	r3, r0
 8006f12:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006f16:	e004      	b.n	8006f22 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f18:	2301      	movs	r3, #1
 8006f1a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006f1e:	e000      	b.n	8006f22 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8006f20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f22:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d10b      	bne.n	8006f42 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006f2a:	4b4b      	ldr	r3, [pc, #300]	@ (8007058 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006f2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f2e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8006f32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f36:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006f3a:	4a47      	ldr	r2, [pc, #284]	@ (8007058 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006f3c:	430b      	orrs	r3, r1
 8006f3e:	6593      	str	r3, [r2, #88]	@ 0x58
 8006f40:	e003      	b.n	8006f4a <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f42:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006f46:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006f4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f52:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8006f56:	673b      	str	r3, [r7, #112]	@ 0x70
 8006f58:	2300      	movs	r3, #0
 8006f5a:	677b      	str	r3, [r7, #116]	@ 0x74
 8006f5c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8006f60:	460b      	mov	r3, r1
 8006f62:	4313      	orrs	r3, r2
 8006f64:	d03b      	beq.n	8006fde <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8006f66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006f6e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006f72:	d01f      	beq.n	8006fb4 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8006f74:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006f78:	d818      	bhi.n	8006fac <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8006f7a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006f7e:	d003      	beq.n	8006f88 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8006f80:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006f84:	d007      	beq.n	8006f96 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8006f86:	e011      	b.n	8006fac <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f88:	4b33      	ldr	r3, [pc, #204]	@ (8007058 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006f8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f8c:	4a32      	ldr	r2, [pc, #200]	@ (8007058 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006f8e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006f92:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006f94:	e00f      	b.n	8006fb6 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006f96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f9a:	3328      	adds	r3, #40	@ 0x28
 8006f9c:	2101      	movs	r1, #1
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	f000 fd7e 	bl	8007aa0 <RCCEx_PLL3_Config>
 8006fa4:	4603      	mov	r3, r0
 8006fa6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8006faa:	e004      	b.n	8006fb6 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006fac:	2301      	movs	r3, #1
 8006fae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006fb2:	e000      	b.n	8006fb6 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8006fb4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006fb6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d10b      	bne.n	8006fd6 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006fbe:	4b26      	ldr	r3, [pc, #152]	@ (8007058 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006fc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006fc2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006fc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006fce:	4a22      	ldr	r2, [pc, #136]	@ (8007058 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006fd0:	430b      	orrs	r3, r1
 8006fd2:	6553      	str	r3, [r2, #84]	@ 0x54
 8006fd4:	e003      	b.n	8006fde <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fd6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006fda:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006fde:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fe6:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8006fea:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006fec:	2300      	movs	r3, #0
 8006fee:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006ff0:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8006ff4:	460b      	mov	r3, r1
 8006ff6:	4313      	orrs	r3, r2
 8006ff8:	d034      	beq.n	8007064 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006ffa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ffe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007000:	2b00      	cmp	r3, #0
 8007002:	d003      	beq.n	800700c <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8007004:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007008:	d007      	beq.n	800701a <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800700a:	e011      	b.n	8007030 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800700c:	4b12      	ldr	r3, [pc, #72]	@ (8007058 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800700e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007010:	4a11      	ldr	r2, [pc, #68]	@ (8007058 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007012:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007016:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007018:	e00e      	b.n	8007038 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800701a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800701e:	3308      	adds	r3, #8
 8007020:	2102      	movs	r1, #2
 8007022:	4618      	mov	r0, r3
 8007024:	f000 fc8a 	bl	800793c <RCCEx_PLL2_Config>
 8007028:	4603      	mov	r3, r0
 800702a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800702e:	e003      	b.n	8007038 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8007030:	2301      	movs	r3, #1
 8007032:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007036:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007038:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800703c:	2b00      	cmp	r3, #0
 800703e:	d10d      	bne.n	800705c <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007040:	4b05      	ldr	r3, [pc, #20]	@ (8007058 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007042:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007044:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007048:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800704c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800704e:	4a02      	ldr	r2, [pc, #8]	@ (8007058 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007050:	430b      	orrs	r3, r1
 8007052:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007054:	e006      	b.n	8007064 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8007056:	bf00      	nop
 8007058:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800705c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007060:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007064:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800706c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8007070:	663b      	str	r3, [r7, #96]	@ 0x60
 8007072:	2300      	movs	r3, #0
 8007074:	667b      	str	r3, [r7, #100]	@ 0x64
 8007076:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800707a:	460b      	mov	r3, r1
 800707c:	4313      	orrs	r3, r2
 800707e:	d00c      	beq.n	800709a <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007080:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007084:	3328      	adds	r3, #40	@ 0x28
 8007086:	2102      	movs	r1, #2
 8007088:	4618      	mov	r0, r3
 800708a:	f000 fd09 	bl	8007aa0 <RCCEx_PLL3_Config>
 800708e:	4603      	mov	r3, r0
 8007090:	2b00      	cmp	r3, #0
 8007092:	d002      	beq.n	800709a <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8007094:	2301      	movs	r3, #1
 8007096:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800709a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800709e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070a2:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80070a6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80070a8:	2300      	movs	r3, #0
 80070aa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80070ac:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80070b0:	460b      	mov	r3, r1
 80070b2:	4313      	orrs	r3, r2
 80070b4:	d036      	beq.n	8007124 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 80070b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070ba:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80070bc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80070c0:	d018      	beq.n	80070f4 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 80070c2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80070c6:	d811      	bhi.n	80070ec <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80070c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80070cc:	d014      	beq.n	80070f8 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 80070ce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80070d2:	d80b      	bhi.n	80070ec <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d011      	beq.n	80070fc <HAL_RCCEx_PeriphCLKConfig+0x107c>
 80070d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80070dc:	d106      	bne.n	80070ec <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80070de:	4bb7      	ldr	r3, [pc, #732]	@ (80073bc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80070e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070e2:	4ab6      	ldr	r2, [pc, #728]	@ (80073bc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80070e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80070e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80070ea:	e008      	b.n	80070fe <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80070ec:	2301      	movs	r3, #1
 80070ee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80070f2:	e004      	b.n	80070fe <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80070f4:	bf00      	nop
 80070f6:	e002      	b.n	80070fe <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80070f8:	bf00      	nop
 80070fa:	e000      	b.n	80070fe <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80070fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80070fe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007102:	2b00      	cmp	r3, #0
 8007104:	d10a      	bne.n	800711c <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007106:	4bad      	ldr	r3, [pc, #692]	@ (80073bc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007108:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800710a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800710e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007112:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007114:	4aa9      	ldr	r2, [pc, #676]	@ (80073bc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007116:	430b      	orrs	r3, r1
 8007118:	6553      	str	r3, [r2, #84]	@ 0x54
 800711a:	e003      	b.n	8007124 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800711c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007120:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007124:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800712c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8007130:	653b      	str	r3, [r7, #80]	@ 0x50
 8007132:	2300      	movs	r3, #0
 8007134:	657b      	str	r3, [r7, #84]	@ 0x54
 8007136:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800713a:	460b      	mov	r3, r1
 800713c:	4313      	orrs	r3, r2
 800713e:	d009      	beq.n	8007154 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007140:	4b9e      	ldr	r3, [pc, #632]	@ (80073bc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007142:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007144:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007148:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800714c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800714e:	4a9b      	ldr	r2, [pc, #620]	@ (80073bc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007150:	430b      	orrs	r3, r1
 8007152:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007154:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800715c:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8007160:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007162:	2300      	movs	r3, #0
 8007164:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007166:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800716a:	460b      	mov	r3, r1
 800716c:	4313      	orrs	r3, r2
 800716e:	d009      	beq.n	8007184 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007170:	4b92      	ldr	r3, [pc, #584]	@ (80073bc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007172:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007174:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8007178:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800717c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800717e:	4a8f      	ldr	r2, [pc, #572]	@ (80073bc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007180:	430b      	orrs	r3, r1
 8007182:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007184:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800718c:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8007190:	643b      	str	r3, [r7, #64]	@ 0x40
 8007192:	2300      	movs	r3, #0
 8007194:	647b      	str	r3, [r7, #68]	@ 0x44
 8007196:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800719a:	460b      	mov	r3, r1
 800719c:	4313      	orrs	r3, r2
 800719e:	d00e      	beq.n	80071be <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80071a0:	4b86      	ldr	r3, [pc, #536]	@ (80073bc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80071a2:	691b      	ldr	r3, [r3, #16]
 80071a4:	4a85      	ldr	r2, [pc, #532]	@ (80073bc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80071a6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80071aa:	6113      	str	r3, [r2, #16]
 80071ac:	4b83      	ldr	r3, [pc, #524]	@ (80073bc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80071ae:	6919      	ldr	r1, [r3, #16]
 80071b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071b4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80071b8:	4a80      	ldr	r2, [pc, #512]	@ (80073bc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80071ba:	430b      	orrs	r3, r1
 80071bc:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80071be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071c6:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80071ca:	63bb      	str	r3, [r7, #56]	@ 0x38
 80071cc:	2300      	movs	r3, #0
 80071ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80071d0:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80071d4:	460b      	mov	r3, r1
 80071d6:	4313      	orrs	r3, r2
 80071d8:	d009      	beq.n	80071ee <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80071da:	4b78      	ldr	r3, [pc, #480]	@ (80073bc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80071dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80071de:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80071e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80071e8:	4a74      	ldr	r2, [pc, #464]	@ (80073bc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80071ea:	430b      	orrs	r3, r1
 80071ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80071ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071f6:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80071fa:	633b      	str	r3, [r7, #48]	@ 0x30
 80071fc:	2300      	movs	r3, #0
 80071fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8007200:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8007204:	460b      	mov	r3, r1
 8007206:	4313      	orrs	r3, r2
 8007208:	d00a      	beq.n	8007220 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800720a:	4b6c      	ldr	r3, [pc, #432]	@ (80073bc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800720c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800720e:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8007212:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007216:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800721a:	4a68      	ldr	r2, [pc, #416]	@ (80073bc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800721c:	430b      	orrs	r3, r1
 800721e:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8007220:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007228:	2100      	movs	r1, #0
 800722a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800722c:	f003 0301 	and.w	r3, r3, #1
 8007230:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007232:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8007236:	460b      	mov	r3, r1
 8007238:	4313      	orrs	r3, r2
 800723a:	d011      	beq.n	8007260 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800723c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007240:	3308      	adds	r3, #8
 8007242:	2100      	movs	r1, #0
 8007244:	4618      	mov	r0, r3
 8007246:	f000 fb79 	bl	800793c <RCCEx_PLL2_Config>
 800724a:	4603      	mov	r3, r0
 800724c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8007250:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007254:	2b00      	cmp	r3, #0
 8007256:	d003      	beq.n	8007260 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007258:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800725c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8007260:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007268:	2100      	movs	r1, #0
 800726a:	6239      	str	r1, [r7, #32]
 800726c:	f003 0302 	and.w	r3, r3, #2
 8007270:	627b      	str	r3, [r7, #36]	@ 0x24
 8007272:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007276:	460b      	mov	r3, r1
 8007278:	4313      	orrs	r3, r2
 800727a:	d011      	beq.n	80072a0 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800727c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007280:	3308      	adds	r3, #8
 8007282:	2101      	movs	r1, #1
 8007284:	4618      	mov	r0, r3
 8007286:	f000 fb59 	bl	800793c <RCCEx_PLL2_Config>
 800728a:	4603      	mov	r3, r0
 800728c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8007290:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007294:	2b00      	cmp	r3, #0
 8007296:	d003      	beq.n	80072a0 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007298:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800729c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80072a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072a8:	2100      	movs	r1, #0
 80072aa:	61b9      	str	r1, [r7, #24]
 80072ac:	f003 0304 	and.w	r3, r3, #4
 80072b0:	61fb      	str	r3, [r7, #28]
 80072b2:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80072b6:	460b      	mov	r3, r1
 80072b8:	4313      	orrs	r3, r2
 80072ba:	d011      	beq.n	80072e0 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80072bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072c0:	3308      	adds	r3, #8
 80072c2:	2102      	movs	r1, #2
 80072c4:	4618      	mov	r0, r3
 80072c6:	f000 fb39 	bl	800793c <RCCEx_PLL2_Config>
 80072ca:	4603      	mov	r3, r0
 80072cc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80072d0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d003      	beq.n	80072e0 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072d8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80072dc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80072e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072e8:	2100      	movs	r1, #0
 80072ea:	6139      	str	r1, [r7, #16]
 80072ec:	f003 0308 	and.w	r3, r3, #8
 80072f0:	617b      	str	r3, [r7, #20]
 80072f2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80072f6:	460b      	mov	r3, r1
 80072f8:	4313      	orrs	r3, r2
 80072fa:	d011      	beq.n	8007320 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80072fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007300:	3328      	adds	r3, #40	@ 0x28
 8007302:	2100      	movs	r1, #0
 8007304:	4618      	mov	r0, r3
 8007306:	f000 fbcb 	bl	8007aa0 <RCCEx_PLL3_Config>
 800730a:	4603      	mov	r3, r0
 800730c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8007310:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007314:	2b00      	cmp	r3, #0
 8007316:	d003      	beq.n	8007320 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007318:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800731c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8007320:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007328:	2100      	movs	r1, #0
 800732a:	60b9      	str	r1, [r7, #8]
 800732c:	f003 0310 	and.w	r3, r3, #16
 8007330:	60fb      	str	r3, [r7, #12]
 8007332:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007336:	460b      	mov	r3, r1
 8007338:	4313      	orrs	r3, r2
 800733a:	d011      	beq.n	8007360 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800733c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007340:	3328      	adds	r3, #40	@ 0x28
 8007342:	2101      	movs	r1, #1
 8007344:	4618      	mov	r0, r3
 8007346:	f000 fbab 	bl	8007aa0 <RCCEx_PLL3_Config>
 800734a:	4603      	mov	r3, r0
 800734c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8007350:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007354:	2b00      	cmp	r3, #0
 8007356:	d003      	beq.n	8007360 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007358:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800735c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8007360:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007368:	2100      	movs	r1, #0
 800736a:	6039      	str	r1, [r7, #0]
 800736c:	f003 0320 	and.w	r3, r3, #32
 8007370:	607b      	str	r3, [r7, #4]
 8007372:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007376:	460b      	mov	r3, r1
 8007378:	4313      	orrs	r3, r2
 800737a:	d011      	beq.n	80073a0 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800737c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007380:	3328      	adds	r3, #40	@ 0x28
 8007382:	2102      	movs	r1, #2
 8007384:	4618      	mov	r0, r3
 8007386:	f000 fb8b 	bl	8007aa0 <RCCEx_PLL3_Config>
 800738a:	4603      	mov	r3, r0
 800738c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8007390:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007394:	2b00      	cmp	r3, #0
 8007396:	d003      	beq.n	80073a0 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007398:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800739c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 80073a0:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d101      	bne.n	80073ac <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 80073a8:	2300      	movs	r3, #0
 80073aa:	e000      	b.n	80073ae <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 80073ac:	2301      	movs	r3, #1
}
 80073ae:	4618      	mov	r0, r3
 80073b0:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 80073b4:	46bd      	mov	sp, r7
 80073b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80073ba:	bf00      	nop
 80073bc:	58024400 	.word	0x58024400

080073c0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80073c4:	f7fe fe00 	bl	8005fc8 <HAL_RCC_GetHCLKFreq>
 80073c8:	4602      	mov	r2, r0
 80073ca:	4b06      	ldr	r3, [pc, #24]	@ (80073e4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80073cc:	6a1b      	ldr	r3, [r3, #32]
 80073ce:	091b      	lsrs	r3, r3, #4
 80073d0:	f003 0307 	and.w	r3, r3, #7
 80073d4:	4904      	ldr	r1, [pc, #16]	@ (80073e8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80073d6:	5ccb      	ldrb	r3, [r1, r3]
 80073d8:	f003 031f 	and.w	r3, r3, #31
 80073dc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80073e0:	4618      	mov	r0, r3
 80073e2:	bd80      	pop	{r7, pc}
 80073e4:	58024400 	.word	0x58024400
 80073e8:	08012e08 	.word	0x08012e08

080073ec <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80073ec:	b480      	push	{r7}
 80073ee:	b089      	sub	sp, #36	@ 0x24
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80073f4:	4ba1      	ldr	r3, [pc, #644]	@ (800767c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80073f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073f8:	f003 0303 	and.w	r3, r3, #3
 80073fc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80073fe:	4b9f      	ldr	r3, [pc, #636]	@ (800767c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007400:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007402:	0b1b      	lsrs	r3, r3, #12
 8007404:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007408:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800740a:	4b9c      	ldr	r3, [pc, #624]	@ (800767c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800740c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800740e:	091b      	lsrs	r3, r3, #4
 8007410:	f003 0301 	and.w	r3, r3, #1
 8007414:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8007416:	4b99      	ldr	r3, [pc, #612]	@ (800767c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007418:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800741a:	08db      	lsrs	r3, r3, #3
 800741c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007420:	693a      	ldr	r2, [r7, #16]
 8007422:	fb02 f303 	mul.w	r3, r2, r3
 8007426:	ee07 3a90 	vmov	s15, r3
 800742a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800742e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007432:	697b      	ldr	r3, [r7, #20]
 8007434:	2b00      	cmp	r3, #0
 8007436:	f000 8111 	beq.w	800765c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800743a:	69bb      	ldr	r3, [r7, #24]
 800743c:	2b02      	cmp	r3, #2
 800743e:	f000 8083 	beq.w	8007548 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007442:	69bb      	ldr	r3, [r7, #24]
 8007444:	2b02      	cmp	r3, #2
 8007446:	f200 80a1 	bhi.w	800758c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800744a:	69bb      	ldr	r3, [r7, #24]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d003      	beq.n	8007458 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007450:	69bb      	ldr	r3, [r7, #24]
 8007452:	2b01      	cmp	r3, #1
 8007454:	d056      	beq.n	8007504 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007456:	e099      	b.n	800758c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007458:	4b88      	ldr	r3, [pc, #544]	@ (800767c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	f003 0320 	and.w	r3, r3, #32
 8007460:	2b00      	cmp	r3, #0
 8007462:	d02d      	beq.n	80074c0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007464:	4b85      	ldr	r3, [pc, #532]	@ (800767c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	08db      	lsrs	r3, r3, #3
 800746a:	f003 0303 	and.w	r3, r3, #3
 800746e:	4a84      	ldr	r2, [pc, #528]	@ (8007680 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007470:	fa22 f303 	lsr.w	r3, r2, r3
 8007474:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007476:	68bb      	ldr	r3, [r7, #8]
 8007478:	ee07 3a90 	vmov	s15, r3
 800747c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007480:	697b      	ldr	r3, [r7, #20]
 8007482:	ee07 3a90 	vmov	s15, r3
 8007486:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800748a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800748e:	4b7b      	ldr	r3, [pc, #492]	@ (800767c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007490:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007492:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007496:	ee07 3a90 	vmov	s15, r3
 800749a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800749e:	ed97 6a03 	vldr	s12, [r7, #12]
 80074a2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007684 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80074a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80074b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074ba:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80074be:	e087      	b.n	80075d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80074c0:	697b      	ldr	r3, [r7, #20]
 80074c2:	ee07 3a90 	vmov	s15, r3
 80074c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074ca:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007688 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80074ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074d2:	4b6a      	ldr	r3, [pc, #424]	@ (800767c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80074d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074da:	ee07 3a90 	vmov	s15, r3
 80074de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80074e6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007684 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80074ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80074f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007502:	e065      	b.n	80075d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007504:	697b      	ldr	r3, [r7, #20]
 8007506:	ee07 3a90 	vmov	s15, r3
 800750a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800750e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800768c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007512:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007516:	4b59      	ldr	r3, [pc, #356]	@ (800767c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007518:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800751a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800751e:	ee07 3a90 	vmov	s15, r3
 8007522:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007526:	ed97 6a03 	vldr	s12, [r7, #12]
 800752a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007684 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800752e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007532:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007536:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800753a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800753e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007542:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007546:	e043      	b.n	80075d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007548:	697b      	ldr	r3, [r7, #20]
 800754a:	ee07 3a90 	vmov	s15, r3
 800754e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007552:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007690 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007556:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800755a:	4b48      	ldr	r3, [pc, #288]	@ (800767c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800755c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800755e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007562:	ee07 3a90 	vmov	s15, r3
 8007566:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800756a:	ed97 6a03 	vldr	s12, [r7, #12]
 800756e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007684 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007572:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007576:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800757a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800757e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007582:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007586:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800758a:	e021      	b.n	80075d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800758c:	697b      	ldr	r3, [r7, #20]
 800758e:	ee07 3a90 	vmov	s15, r3
 8007592:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007596:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800768c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800759a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800759e:	4b37      	ldr	r3, [pc, #220]	@ (800767c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80075a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075a6:	ee07 3a90 	vmov	s15, r3
 80075aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80075b2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007684 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80075b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80075c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80075ce:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80075d0:	4b2a      	ldr	r3, [pc, #168]	@ (800767c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80075d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075d4:	0a5b      	lsrs	r3, r3, #9
 80075d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80075da:	ee07 3a90 	vmov	s15, r3
 80075de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075e2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80075e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80075ea:	edd7 6a07 	vldr	s13, [r7, #28]
 80075ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80075f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80075f6:	ee17 2a90 	vmov	r2, s15
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80075fe:	4b1f      	ldr	r3, [pc, #124]	@ (800767c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007600:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007602:	0c1b      	lsrs	r3, r3, #16
 8007604:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007608:	ee07 3a90 	vmov	s15, r3
 800760c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007610:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007614:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007618:	edd7 6a07 	vldr	s13, [r7, #28]
 800761c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007620:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007624:	ee17 2a90 	vmov	r2, s15
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800762c:	4b13      	ldr	r3, [pc, #76]	@ (800767c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800762e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007630:	0e1b      	lsrs	r3, r3, #24
 8007632:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007636:	ee07 3a90 	vmov	s15, r3
 800763a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800763e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007642:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007646:	edd7 6a07 	vldr	s13, [r7, #28]
 800764a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800764e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007652:	ee17 2a90 	vmov	r2, s15
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800765a:	e008      	b.n	800766e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2200      	movs	r2, #0
 8007660:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	2200      	movs	r2, #0
 8007666:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2200      	movs	r2, #0
 800766c:	609a      	str	r2, [r3, #8]
}
 800766e:	bf00      	nop
 8007670:	3724      	adds	r7, #36	@ 0x24
 8007672:	46bd      	mov	sp, r7
 8007674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007678:	4770      	bx	lr
 800767a:	bf00      	nop
 800767c:	58024400 	.word	0x58024400
 8007680:	03d09000 	.word	0x03d09000
 8007684:	46000000 	.word	0x46000000
 8007688:	4c742400 	.word	0x4c742400
 800768c:	4a742400 	.word	0x4a742400
 8007690:	4bbebc20 	.word	0x4bbebc20

08007694 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007694:	b480      	push	{r7}
 8007696:	b089      	sub	sp, #36	@ 0x24
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800769c:	4ba1      	ldr	r3, [pc, #644]	@ (8007924 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800769e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076a0:	f003 0303 	and.w	r3, r3, #3
 80076a4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80076a6:	4b9f      	ldr	r3, [pc, #636]	@ (8007924 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80076a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076aa:	0d1b      	lsrs	r3, r3, #20
 80076ac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80076b0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80076b2:	4b9c      	ldr	r3, [pc, #624]	@ (8007924 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80076b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076b6:	0a1b      	lsrs	r3, r3, #8
 80076b8:	f003 0301 	and.w	r3, r3, #1
 80076bc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80076be:	4b99      	ldr	r3, [pc, #612]	@ (8007924 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80076c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80076c2:	08db      	lsrs	r3, r3, #3
 80076c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80076c8:	693a      	ldr	r2, [r7, #16]
 80076ca:	fb02 f303 	mul.w	r3, r2, r3
 80076ce:	ee07 3a90 	vmov	s15, r3
 80076d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076d6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80076da:	697b      	ldr	r3, [r7, #20]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	f000 8111 	beq.w	8007904 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80076e2:	69bb      	ldr	r3, [r7, #24]
 80076e4:	2b02      	cmp	r3, #2
 80076e6:	f000 8083 	beq.w	80077f0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80076ea:	69bb      	ldr	r3, [r7, #24]
 80076ec:	2b02      	cmp	r3, #2
 80076ee:	f200 80a1 	bhi.w	8007834 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80076f2:	69bb      	ldr	r3, [r7, #24]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d003      	beq.n	8007700 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80076f8:	69bb      	ldr	r3, [r7, #24]
 80076fa:	2b01      	cmp	r3, #1
 80076fc:	d056      	beq.n	80077ac <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80076fe:	e099      	b.n	8007834 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007700:	4b88      	ldr	r3, [pc, #544]	@ (8007924 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f003 0320 	and.w	r3, r3, #32
 8007708:	2b00      	cmp	r3, #0
 800770a:	d02d      	beq.n	8007768 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800770c:	4b85      	ldr	r3, [pc, #532]	@ (8007924 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	08db      	lsrs	r3, r3, #3
 8007712:	f003 0303 	and.w	r3, r3, #3
 8007716:	4a84      	ldr	r2, [pc, #528]	@ (8007928 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007718:	fa22 f303 	lsr.w	r3, r2, r3
 800771c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800771e:	68bb      	ldr	r3, [r7, #8]
 8007720:	ee07 3a90 	vmov	s15, r3
 8007724:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007728:	697b      	ldr	r3, [r7, #20]
 800772a:	ee07 3a90 	vmov	s15, r3
 800772e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007732:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007736:	4b7b      	ldr	r3, [pc, #492]	@ (8007924 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007738:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800773a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800773e:	ee07 3a90 	vmov	s15, r3
 8007742:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007746:	ed97 6a03 	vldr	s12, [r7, #12]
 800774a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800792c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800774e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007752:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007756:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800775a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800775e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007762:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007766:	e087      	b.n	8007878 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007768:	697b      	ldr	r3, [r7, #20]
 800776a:	ee07 3a90 	vmov	s15, r3
 800776e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007772:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007930 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007776:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800777a:	4b6a      	ldr	r3, [pc, #424]	@ (8007924 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800777c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800777e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007782:	ee07 3a90 	vmov	s15, r3
 8007786:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800778a:	ed97 6a03 	vldr	s12, [r7, #12]
 800778e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800792c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007792:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007796:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800779a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800779e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80077aa:	e065      	b.n	8007878 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80077ac:	697b      	ldr	r3, [r7, #20]
 80077ae:	ee07 3a90 	vmov	s15, r3
 80077b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077b6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007934 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80077ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80077be:	4b59      	ldr	r3, [pc, #356]	@ (8007924 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80077c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077c6:	ee07 3a90 	vmov	s15, r3
 80077ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80077d2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800792c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80077d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80077da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80077e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80077ee:	e043      	b.n	8007878 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80077f0:	697b      	ldr	r3, [r7, #20]
 80077f2:	ee07 3a90 	vmov	s15, r3
 80077f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077fa:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007938 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80077fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007802:	4b48      	ldr	r3, [pc, #288]	@ (8007924 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007806:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800780a:	ee07 3a90 	vmov	s15, r3
 800780e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007812:	ed97 6a03 	vldr	s12, [r7, #12]
 8007816:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800792c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800781a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800781e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007822:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007826:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800782a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800782e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007832:	e021      	b.n	8007878 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007834:	697b      	ldr	r3, [r7, #20]
 8007836:	ee07 3a90 	vmov	s15, r3
 800783a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800783e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007934 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007842:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007846:	4b37      	ldr	r3, [pc, #220]	@ (8007924 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007848:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800784a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800784e:	ee07 3a90 	vmov	s15, r3
 8007852:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007856:	ed97 6a03 	vldr	s12, [r7, #12]
 800785a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800792c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800785e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007862:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007866:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800786a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800786e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007872:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007876:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8007878:	4b2a      	ldr	r3, [pc, #168]	@ (8007924 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800787a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800787c:	0a5b      	lsrs	r3, r3, #9
 800787e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007882:	ee07 3a90 	vmov	s15, r3
 8007886:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800788a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800788e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007892:	edd7 6a07 	vldr	s13, [r7, #28]
 8007896:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800789a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800789e:	ee17 2a90 	vmov	r2, s15
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80078a6:	4b1f      	ldr	r3, [pc, #124]	@ (8007924 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80078a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078aa:	0c1b      	lsrs	r3, r3, #16
 80078ac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80078b0:	ee07 3a90 	vmov	s15, r3
 80078b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078b8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80078bc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80078c0:	edd7 6a07 	vldr	s13, [r7, #28]
 80078c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80078c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80078cc:	ee17 2a90 	vmov	r2, s15
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80078d4:	4b13      	ldr	r3, [pc, #76]	@ (8007924 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80078d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078d8:	0e1b      	lsrs	r3, r3, #24
 80078da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80078de:	ee07 3a90 	vmov	s15, r3
 80078e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078e6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80078ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 80078ee:	edd7 6a07 	vldr	s13, [r7, #28]
 80078f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80078f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80078fa:	ee17 2a90 	vmov	r2, s15
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007902:	e008      	b.n	8007916 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2200      	movs	r2, #0
 8007908:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	2200      	movs	r2, #0
 800790e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2200      	movs	r2, #0
 8007914:	609a      	str	r2, [r3, #8]
}
 8007916:	bf00      	nop
 8007918:	3724      	adds	r7, #36	@ 0x24
 800791a:	46bd      	mov	sp, r7
 800791c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007920:	4770      	bx	lr
 8007922:	bf00      	nop
 8007924:	58024400 	.word	0x58024400
 8007928:	03d09000 	.word	0x03d09000
 800792c:	46000000 	.word	0x46000000
 8007930:	4c742400 	.word	0x4c742400
 8007934:	4a742400 	.word	0x4a742400
 8007938:	4bbebc20 	.word	0x4bbebc20

0800793c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800793c:	b580      	push	{r7, lr}
 800793e:	b084      	sub	sp, #16
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
 8007944:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007946:	2300      	movs	r3, #0
 8007948:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800794a:	4b53      	ldr	r3, [pc, #332]	@ (8007a98 <RCCEx_PLL2_Config+0x15c>)
 800794c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800794e:	f003 0303 	and.w	r3, r3, #3
 8007952:	2b03      	cmp	r3, #3
 8007954:	d101      	bne.n	800795a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007956:	2301      	movs	r3, #1
 8007958:	e099      	b.n	8007a8e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800795a:	4b4f      	ldr	r3, [pc, #316]	@ (8007a98 <RCCEx_PLL2_Config+0x15c>)
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	4a4e      	ldr	r2, [pc, #312]	@ (8007a98 <RCCEx_PLL2_Config+0x15c>)
 8007960:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007964:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007966:	f7fb f93d 	bl	8002be4 <HAL_GetTick>
 800796a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800796c:	e008      	b.n	8007980 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800796e:	f7fb f939 	bl	8002be4 <HAL_GetTick>
 8007972:	4602      	mov	r2, r0
 8007974:	68bb      	ldr	r3, [r7, #8]
 8007976:	1ad3      	subs	r3, r2, r3
 8007978:	2b02      	cmp	r3, #2
 800797a:	d901      	bls.n	8007980 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800797c:	2303      	movs	r3, #3
 800797e:	e086      	b.n	8007a8e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007980:	4b45      	ldr	r3, [pc, #276]	@ (8007a98 <RCCEx_PLL2_Config+0x15c>)
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007988:	2b00      	cmp	r3, #0
 800798a:	d1f0      	bne.n	800796e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800798c:	4b42      	ldr	r3, [pc, #264]	@ (8007a98 <RCCEx_PLL2_Config+0x15c>)
 800798e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007990:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	031b      	lsls	r3, r3, #12
 800799a:	493f      	ldr	r1, [pc, #252]	@ (8007a98 <RCCEx_PLL2_Config+0x15c>)
 800799c:	4313      	orrs	r3, r2
 800799e:	628b      	str	r3, [r1, #40]	@ 0x28
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	685b      	ldr	r3, [r3, #4]
 80079a4:	3b01      	subs	r3, #1
 80079a6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	689b      	ldr	r3, [r3, #8]
 80079ae:	3b01      	subs	r3, #1
 80079b0:	025b      	lsls	r3, r3, #9
 80079b2:	b29b      	uxth	r3, r3
 80079b4:	431a      	orrs	r2, r3
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	68db      	ldr	r3, [r3, #12]
 80079ba:	3b01      	subs	r3, #1
 80079bc:	041b      	lsls	r3, r3, #16
 80079be:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80079c2:	431a      	orrs	r2, r3
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	691b      	ldr	r3, [r3, #16]
 80079c8:	3b01      	subs	r3, #1
 80079ca:	061b      	lsls	r3, r3, #24
 80079cc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80079d0:	4931      	ldr	r1, [pc, #196]	@ (8007a98 <RCCEx_PLL2_Config+0x15c>)
 80079d2:	4313      	orrs	r3, r2
 80079d4:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80079d6:	4b30      	ldr	r3, [pc, #192]	@ (8007a98 <RCCEx_PLL2_Config+0x15c>)
 80079d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079da:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	695b      	ldr	r3, [r3, #20]
 80079e2:	492d      	ldr	r1, [pc, #180]	@ (8007a98 <RCCEx_PLL2_Config+0x15c>)
 80079e4:	4313      	orrs	r3, r2
 80079e6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80079e8:	4b2b      	ldr	r3, [pc, #172]	@ (8007a98 <RCCEx_PLL2_Config+0x15c>)
 80079ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079ec:	f023 0220 	bic.w	r2, r3, #32
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	699b      	ldr	r3, [r3, #24]
 80079f4:	4928      	ldr	r1, [pc, #160]	@ (8007a98 <RCCEx_PLL2_Config+0x15c>)
 80079f6:	4313      	orrs	r3, r2
 80079f8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80079fa:	4b27      	ldr	r3, [pc, #156]	@ (8007a98 <RCCEx_PLL2_Config+0x15c>)
 80079fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079fe:	4a26      	ldr	r2, [pc, #152]	@ (8007a98 <RCCEx_PLL2_Config+0x15c>)
 8007a00:	f023 0310 	bic.w	r3, r3, #16
 8007a04:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007a06:	4b24      	ldr	r3, [pc, #144]	@ (8007a98 <RCCEx_PLL2_Config+0x15c>)
 8007a08:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007a0a:	4b24      	ldr	r3, [pc, #144]	@ (8007a9c <RCCEx_PLL2_Config+0x160>)
 8007a0c:	4013      	ands	r3, r2
 8007a0e:	687a      	ldr	r2, [r7, #4]
 8007a10:	69d2      	ldr	r2, [r2, #28]
 8007a12:	00d2      	lsls	r2, r2, #3
 8007a14:	4920      	ldr	r1, [pc, #128]	@ (8007a98 <RCCEx_PLL2_Config+0x15c>)
 8007a16:	4313      	orrs	r3, r2
 8007a18:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007a1a:	4b1f      	ldr	r3, [pc, #124]	@ (8007a98 <RCCEx_PLL2_Config+0x15c>)
 8007a1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a1e:	4a1e      	ldr	r2, [pc, #120]	@ (8007a98 <RCCEx_PLL2_Config+0x15c>)
 8007a20:	f043 0310 	orr.w	r3, r3, #16
 8007a24:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d106      	bne.n	8007a3a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007a2c:	4b1a      	ldr	r3, [pc, #104]	@ (8007a98 <RCCEx_PLL2_Config+0x15c>)
 8007a2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a30:	4a19      	ldr	r2, [pc, #100]	@ (8007a98 <RCCEx_PLL2_Config+0x15c>)
 8007a32:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007a36:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007a38:	e00f      	b.n	8007a5a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007a3a:	683b      	ldr	r3, [r7, #0]
 8007a3c:	2b01      	cmp	r3, #1
 8007a3e:	d106      	bne.n	8007a4e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007a40:	4b15      	ldr	r3, [pc, #84]	@ (8007a98 <RCCEx_PLL2_Config+0x15c>)
 8007a42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a44:	4a14      	ldr	r2, [pc, #80]	@ (8007a98 <RCCEx_PLL2_Config+0x15c>)
 8007a46:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007a4a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007a4c:	e005      	b.n	8007a5a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007a4e:	4b12      	ldr	r3, [pc, #72]	@ (8007a98 <RCCEx_PLL2_Config+0x15c>)
 8007a50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a52:	4a11      	ldr	r2, [pc, #68]	@ (8007a98 <RCCEx_PLL2_Config+0x15c>)
 8007a54:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007a58:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007a5a:	4b0f      	ldr	r3, [pc, #60]	@ (8007a98 <RCCEx_PLL2_Config+0x15c>)
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	4a0e      	ldr	r2, [pc, #56]	@ (8007a98 <RCCEx_PLL2_Config+0x15c>)
 8007a60:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007a64:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007a66:	f7fb f8bd 	bl	8002be4 <HAL_GetTick>
 8007a6a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007a6c:	e008      	b.n	8007a80 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007a6e:	f7fb f8b9 	bl	8002be4 <HAL_GetTick>
 8007a72:	4602      	mov	r2, r0
 8007a74:	68bb      	ldr	r3, [r7, #8]
 8007a76:	1ad3      	subs	r3, r2, r3
 8007a78:	2b02      	cmp	r3, #2
 8007a7a:	d901      	bls.n	8007a80 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007a7c:	2303      	movs	r3, #3
 8007a7e:	e006      	b.n	8007a8e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007a80:	4b05      	ldr	r3, [pc, #20]	@ (8007a98 <RCCEx_PLL2_Config+0x15c>)
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d0f0      	beq.n	8007a6e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007a8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a8e:	4618      	mov	r0, r3
 8007a90:	3710      	adds	r7, #16
 8007a92:	46bd      	mov	sp, r7
 8007a94:	bd80      	pop	{r7, pc}
 8007a96:	bf00      	nop
 8007a98:	58024400 	.word	0x58024400
 8007a9c:	ffff0007 	.word	0xffff0007

08007aa0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b084      	sub	sp, #16
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
 8007aa8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007aaa:	2300      	movs	r3, #0
 8007aac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007aae:	4b53      	ldr	r3, [pc, #332]	@ (8007bfc <RCCEx_PLL3_Config+0x15c>)
 8007ab0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ab2:	f003 0303 	and.w	r3, r3, #3
 8007ab6:	2b03      	cmp	r3, #3
 8007ab8:	d101      	bne.n	8007abe <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007aba:	2301      	movs	r3, #1
 8007abc:	e099      	b.n	8007bf2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007abe:	4b4f      	ldr	r3, [pc, #316]	@ (8007bfc <RCCEx_PLL3_Config+0x15c>)
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	4a4e      	ldr	r2, [pc, #312]	@ (8007bfc <RCCEx_PLL3_Config+0x15c>)
 8007ac4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007ac8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007aca:	f7fb f88b 	bl	8002be4 <HAL_GetTick>
 8007ace:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007ad0:	e008      	b.n	8007ae4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007ad2:	f7fb f887 	bl	8002be4 <HAL_GetTick>
 8007ad6:	4602      	mov	r2, r0
 8007ad8:	68bb      	ldr	r3, [r7, #8]
 8007ada:	1ad3      	subs	r3, r2, r3
 8007adc:	2b02      	cmp	r3, #2
 8007ade:	d901      	bls.n	8007ae4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007ae0:	2303      	movs	r3, #3
 8007ae2:	e086      	b.n	8007bf2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007ae4:	4b45      	ldr	r3, [pc, #276]	@ (8007bfc <RCCEx_PLL3_Config+0x15c>)
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d1f0      	bne.n	8007ad2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007af0:	4b42      	ldr	r3, [pc, #264]	@ (8007bfc <RCCEx_PLL3_Config+0x15c>)
 8007af2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007af4:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	051b      	lsls	r3, r3, #20
 8007afe:	493f      	ldr	r1, [pc, #252]	@ (8007bfc <RCCEx_PLL3_Config+0x15c>)
 8007b00:	4313      	orrs	r3, r2
 8007b02:	628b      	str	r3, [r1, #40]	@ 0x28
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	685b      	ldr	r3, [r3, #4]
 8007b08:	3b01      	subs	r3, #1
 8007b0a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	689b      	ldr	r3, [r3, #8]
 8007b12:	3b01      	subs	r3, #1
 8007b14:	025b      	lsls	r3, r3, #9
 8007b16:	b29b      	uxth	r3, r3
 8007b18:	431a      	orrs	r2, r3
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	68db      	ldr	r3, [r3, #12]
 8007b1e:	3b01      	subs	r3, #1
 8007b20:	041b      	lsls	r3, r3, #16
 8007b22:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007b26:	431a      	orrs	r2, r3
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	691b      	ldr	r3, [r3, #16]
 8007b2c:	3b01      	subs	r3, #1
 8007b2e:	061b      	lsls	r3, r3, #24
 8007b30:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007b34:	4931      	ldr	r1, [pc, #196]	@ (8007bfc <RCCEx_PLL3_Config+0x15c>)
 8007b36:	4313      	orrs	r3, r2
 8007b38:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007b3a:	4b30      	ldr	r3, [pc, #192]	@ (8007bfc <RCCEx_PLL3_Config+0x15c>)
 8007b3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b3e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	695b      	ldr	r3, [r3, #20]
 8007b46:	492d      	ldr	r1, [pc, #180]	@ (8007bfc <RCCEx_PLL3_Config+0x15c>)
 8007b48:	4313      	orrs	r3, r2
 8007b4a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007b4c:	4b2b      	ldr	r3, [pc, #172]	@ (8007bfc <RCCEx_PLL3_Config+0x15c>)
 8007b4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b50:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	699b      	ldr	r3, [r3, #24]
 8007b58:	4928      	ldr	r1, [pc, #160]	@ (8007bfc <RCCEx_PLL3_Config+0x15c>)
 8007b5a:	4313      	orrs	r3, r2
 8007b5c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007b5e:	4b27      	ldr	r3, [pc, #156]	@ (8007bfc <RCCEx_PLL3_Config+0x15c>)
 8007b60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b62:	4a26      	ldr	r2, [pc, #152]	@ (8007bfc <RCCEx_PLL3_Config+0x15c>)
 8007b64:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007b68:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007b6a:	4b24      	ldr	r3, [pc, #144]	@ (8007bfc <RCCEx_PLL3_Config+0x15c>)
 8007b6c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007b6e:	4b24      	ldr	r3, [pc, #144]	@ (8007c00 <RCCEx_PLL3_Config+0x160>)
 8007b70:	4013      	ands	r3, r2
 8007b72:	687a      	ldr	r2, [r7, #4]
 8007b74:	69d2      	ldr	r2, [r2, #28]
 8007b76:	00d2      	lsls	r2, r2, #3
 8007b78:	4920      	ldr	r1, [pc, #128]	@ (8007bfc <RCCEx_PLL3_Config+0x15c>)
 8007b7a:	4313      	orrs	r3, r2
 8007b7c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007b7e:	4b1f      	ldr	r3, [pc, #124]	@ (8007bfc <RCCEx_PLL3_Config+0x15c>)
 8007b80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b82:	4a1e      	ldr	r2, [pc, #120]	@ (8007bfc <RCCEx_PLL3_Config+0x15c>)
 8007b84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007b88:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007b8a:	683b      	ldr	r3, [r7, #0]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d106      	bne.n	8007b9e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007b90:	4b1a      	ldr	r3, [pc, #104]	@ (8007bfc <RCCEx_PLL3_Config+0x15c>)
 8007b92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b94:	4a19      	ldr	r2, [pc, #100]	@ (8007bfc <RCCEx_PLL3_Config+0x15c>)
 8007b96:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8007b9a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007b9c:	e00f      	b.n	8007bbe <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007b9e:	683b      	ldr	r3, [r7, #0]
 8007ba0:	2b01      	cmp	r3, #1
 8007ba2:	d106      	bne.n	8007bb2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007ba4:	4b15      	ldr	r3, [pc, #84]	@ (8007bfc <RCCEx_PLL3_Config+0x15c>)
 8007ba6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ba8:	4a14      	ldr	r2, [pc, #80]	@ (8007bfc <RCCEx_PLL3_Config+0x15c>)
 8007baa:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007bae:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007bb0:	e005      	b.n	8007bbe <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007bb2:	4b12      	ldr	r3, [pc, #72]	@ (8007bfc <RCCEx_PLL3_Config+0x15c>)
 8007bb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bb6:	4a11      	ldr	r2, [pc, #68]	@ (8007bfc <RCCEx_PLL3_Config+0x15c>)
 8007bb8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007bbc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007bbe:	4b0f      	ldr	r3, [pc, #60]	@ (8007bfc <RCCEx_PLL3_Config+0x15c>)
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	4a0e      	ldr	r2, [pc, #56]	@ (8007bfc <RCCEx_PLL3_Config+0x15c>)
 8007bc4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007bc8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007bca:	f7fb f80b 	bl	8002be4 <HAL_GetTick>
 8007bce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007bd0:	e008      	b.n	8007be4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007bd2:	f7fb f807 	bl	8002be4 <HAL_GetTick>
 8007bd6:	4602      	mov	r2, r0
 8007bd8:	68bb      	ldr	r3, [r7, #8]
 8007bda:	1ad3      	subs	r3, r2, r3
 8007bdc:	2b02      	cmp	r3, #2
 8007bde:	d901      	bls.n	8007be4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007be0:	2303      	movs	r3, #3
 8007be2:	e006      	b.n	8007bf2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007be4:	4b05      	ldr	r3, [pc, #20]	@ (8007bfc <RCCEx_PLL3_Config+0x15c>)
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d0f0      	beq.n	8007bd2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007bf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	3710      	adds	r7, #16
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	bd80      	pop	{r7, pc}
 8007bfa:	bf00      	nop
 8007bfc:	58024400 	.word	0x58024400
 8007c00:	ffff0007 	.word	0xffff0007

08007c04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b082      	sub	sp, #8
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d101      	bne.n	8007c16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007c12:	2301      	movs	r3, #1
 8007c14:	e049      	b.n	8007caa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007c1c:	b2db      	uxtb	r3, r3
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d106      	bne.n	8007c30 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	2200      	movs	r2, #0
 8007c26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007c2a:	6878      	ldr	r0, [r7, #4]
 8007c2c:	f7fa f844 	bl	8001cb8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2202      	movs	r2, #2
 8007c34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681a      	ldr	r2, [r3, #0]
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	3304      	adds	r3, #4
 8007c40:	4619      	mov	r1, r3
 8007c42:	4610      	mov	r0, r2
 8007c44:	f000 fae4 	bl	8008210 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2201      	movs	r2, #1
 8007c4c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2201      	movs	r2, #1
 8007c54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	2201      	movs	r2, #1
 8007c5c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	2201      	movs	r2, #1
 8007c64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2201      	movs	r2, #1
 8007c6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2201      	movs	r2, #1
 8007c74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2201      	movs	r2, #1
 8007c7c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2201      	movs	r2, #1
 8007c84:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2201      	movs	r2, #1
 8007c8c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2201      	movs	r2, #1
 8007c94:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2201      	movs	r2, #1
 8007c9c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2201      	movs	r2, #1
 8007ca4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007ca8:	2300      	movs	r3, #0
}
 8007caa:	4618      	mov	r0, r3
 8007cac:	3708      	adds	r7, #8
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	bd80      	pop	{r7, pc}
	...

08007cb4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007cb4:	b480      	push	{r7}
 8007cb6:	b085      	sub	sp, #20
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007cc2:	b2db      	uxtb	r3, r3
 8007cc4:	2b01      	cmp	r3, #1
 8007cc6:	d001      	beq.n	8007ccc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007cc8:	2301      	movs	r3, #1
 8007cca:	e05e      	b.n	8007d8a <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2202      	movs	r2, #2
 8007cd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	68da      	ldr	r2, [r3, #12]
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	f042 0201 	orr.w	r2, r2, #1
 8007ce2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	4a2b      	ldr	r2, [pc, #172]	@ (8007d98 <HAL_TIM_Base_Start_IT+0xe4>)
 8007cea:	4293      	cmp	r3, r2
 8007cec:	d02c      	beq.n	8007d48 <HAL_TIM_Base_Start_IT+0x94>
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007cf6:	d027      	beq.n	8007d48 <HAL_TIM_Base_Start_IT+0x94>
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	4a27      	ldr	r2, [pc, #156]	@ (8007d9c <HAL_TIM_Base_Start_IT+0xe8>)
 8007cfe:	4293      	cmp	r3, r2
 8007d00:	d022      	beq.n	8007d48 <HAL_TIM_Base_Start_IT+0x94>
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	4a26      	ldr	r2, [pc, #152]	@ (8007da0 <HAL_TIM_Base_Start_IT+0xec>)
 8007d08:	4293      	cmp	r3, r2
 8007d0a:	d01d      	beq.n	8007d48 <HAL_TIM_Base_Start_IT+0x94>
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	4a24      	ldr	r2, [pc, #144]	@ (8007da4 <HAL_TIM_Base_Start_IT+0xf0>)
 8007d12:	4293      	cmp	r3, r2
 8007d14:	d018      	beq.n	8007d48 <HAL_TIM_Base_Start_IT+0x94>
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	4a23      	ldr	r2, [pc, #140]	@ (8007da8 <HAL_TIM_Base_Start_IT+0xf4>)
 8007d1c:	4293      	cmp	r3, r2
 8007d1e:	d013      	beq.n	8007d48 <HAL_TIM_Base_Start_IT+0x94>
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	4a21      	ldr	r2, [pc, #132]	@ (8007dac <HAL_TIM_Base_Start_IT+0xf8>)
 8007d26:	4293      	cmp	r3, r2
 8007d28:	d00e      	beq.n	8007d48 <HAL_TIM_Base_Start_IT+0x94>
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	4a20      	ldr	r2, [pc, #128]	@ (8007db0 <HAL_TIM_Base_Start_IT+0xfc>)
 8007d30:	4293      	cmp	r3, r2
 8007d32:	d009      	beq.n	8007d48 <HAL_TIM_Base_Start_IT+0x94>
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	4a1e      	ldr	r2, [pc, #120]	@ (8007db4 <HAL_TIM_Base_Start_IT+0x100>)
 8007d3a:	4293      	cmp	r3, r2
 8007d3c:	d004      	beq.n	8007d48 <HAL_TIM_Base_Start_IT+0x94>
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	4a1d      	ldr	r2, [pc, #116]	@ (8007db8 <HAL_TIM_Base_Start_IT+0x104>)
 8007d44:	4293      	cmp	r3, r2
 8007d46:	d115      	bne.n	8007d74 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	689a      	ldr	r2, [r3, #8]
 8007d4e:	4b1b      	ldr	r3, [pc, #108]	@ (8007dbc <HAL_TIM_Base_Start_IT+0x108>)
 8007d50:	4013      	ands	r3, r2
 8007d52:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	2b06      	cmp	r3, #6
 8007d58:	d015      	beq.n	8007d86 <HAL_TIM_Base_Start_IT+0xd2>
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007d60:	d011      	beq.n	8007d86 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	681a      	ldr	r2, [r3, #0]
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	f042 0201 	orr.w	r2, r2, #1
 8007d70:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d72:	e008      	b.n	8007d86 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	681a      	ldr	r2, [r3, #0]
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	f042 0201 	orr.w	r2, r2, #1
 8007d82:	601a      	str	r2, [r3, #0]
 8007d84:	e000      	b.n	8007d88 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d86:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007d88:	2300      	movs	r3, #0
}
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	3714      	adds	r7, #20
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d94:	4770      	bx	lr
 8007d96:	bf00      	nop
 8007d98:	40010000 	.word	0x40010000
 8007d9c:	40000400 	.word	0x40000400
 8007da0:	40000800 	.word	0x40000800
 8007da4:	40000c00 	.word	0x40000c00
 8007da8:	40010400 	.word	0x40010400
 8007dac:	40001800 	.word	0x40001800
 8007db0:	40014000 	.word	0x40014000
 8007db4:	4000e000 	.word	0x4000e000
 8007db8:	4000e400 	.word	0x4000e400
 8007dbc:	00010007 	.word	0x00010007

08007dc0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b084      	sub	sp, #16
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	68db      	ldr	r3, [r3, #12]
 8007dce:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	691b      	ldr	r3, [r3, #16]
 8007dd6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007dd8:	68bb      	ldr	r3, [r7, #8]
 8007dda:	f003 0302 	and.w	r3, r3, #2
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d020      	beq.n	8007e24 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	f003 0302 	and.w	r3, r3, #2
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d01b      	beq.n	8007e24 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	f06f 0202 	mvn.w	r2, #2
 8007df4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	2201      	movs	r2, #1
 8007dfa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	699b      	ldr	r3, [r3, #24]
 8007e02:	f003 0303 	and.w	r3, r3, #3
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d003      	beq.n	8007e12 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007e0a:	6878      	ldr	r0, [r7, #4]
 8007e0c:	f000 f9e2 	bl	80081d4 <HAL_TIM_IC_CaptureCallback>
 8007e10:	e005      	b.n	8007e1e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e12:	6878      	ldr	r0, [r7, #4]
 8007e14:	f000 f9d4 	bl	80081c0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e18:	6878      	ldr	r0, [r7, #4]
 8007e1a:	f000 f9e5 	bl	80081e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2200      	movs	r2, #0
 8007e22:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007e24:	68bb      	ldr	r3, [r7, #8]
 8007e26:	f003 0304 	and.w	r3, r3, #4
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d020      	beq.n	8007e70 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	f003 0304 	and.w	r3, r3, #4
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d01b      	beq.n	8007e70 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	f06f 0204 	mvn.w	r2, #4
 8007e40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	2202      	movs	r2, #2
 8007e46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	699b      	ldr	r3, [r3, #24]
 8007e4e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d003      	beq.n	8007e5e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e56:	6878      	ldr	r0, [r7, #4]
 8007e58:	f000 f9bc 	bl	80081d4 <HAL_TIM_IC_CaptureCallback>
 8007e5c:	e005      	b.n	8007e6a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e5e:	6878      	ldr	r0, [r7, #4]
 8007e60:	f000 f9ae 	bl	80081c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e64:	6878      	ldr	r0, [r7, #4]
 8007e66:	f000 f9bf 	bl	80081e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007e70:	68bb      	ldr	r3, [r7, #8]
 8007e72:	f003 0308 	and.w	r3, r3, #8
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d020      	beq.n	8007ebc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	f003 0308 	and.w	r3, r3, #8
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d01b      	beq.n	8007ebc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	f06f 0208 	mvn.w	r2, #8
 8007e8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	2204      	movs	r2, #4
 8007e92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	69db      	ldr	r3, [r3, #28]
 8007e9a:	f003 0303 	and.w	r3, r3, #3
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d003      	beq.n	8007eaa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ea2:	6878      	ldr	r0, [r7, #4]
 8007ea4:	f000 f996 	bl	80081d4 <HAL_TIM_IC_CaptureCallback>
 8007ea8:	e005      	b.n	8007eb6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007eaa:	6878      	ldr	r0, [r7, #4]
 8007eac:	f000 f988 	bl	80081c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007eb0:	6878      	ldr	r0, [r7, #4]
 8007eb2:	f000 f999 	bl	80081e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	2200      	movs	r2, #0
 8007eba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007ebc:	68bb      	ldr	r3, [r7, #8]
 8007ebe:	f003 0310 	and.w	r3, r3, #16
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d020      	beq.n	8007f08 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	f003 0310 	and.w	r3, r3, #16
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d01b      	beq.n	8007f08 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	f06f 0210 	mvn.w	r2, #16
 8007ed8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	2208      	movs	r2, #8
 8007ede:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	69db      	ldr	r3, [r3, #28]
 8007ee6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d003      	beq.n	8007ef6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007eee:	6878      	ldr	r0, [r7, #4]
 8007ef0:	f000 f970 	bl	80081d4 <HAL_TIM_IC_CaptureCallback>
 8007ef4:	e005      	b.n	8007f02 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ef6:	6878      	ldr	r0, [r7, #4]
 8007ef8:	f000 f962 	bl	80081c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007efc:	6878      	ldr	r0, [r7, #4]
 8007efe:	f000 f973 	bl	80081e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	2200      	movs	r2, #0
 8007f06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007f08:	68bb      	ldr	r3, [r7, #8]
 8007f0a:	f003 0301 	and.w	r3, r3, #1
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d00c      	beq.n	8007f2c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	f003 0301 	and.w	r3, r3, #1
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d007      	beq.n	8007f2c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	f06f 0201 	mvn.w	r2, #1
 8007f24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007f26:	6878      	ldr	r0, [r7, #4]
 8007f28:	f7f9 fb4e 	bl	80015c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007f2c:	68bb      	ldr	r3, [r7, #8]
 8007f2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d104      	bne.n	8007f40 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8007f36:	68bb      	ldr	r3, [r7, #8]
 8007f38:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d00c      	beq.n	8007f5a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d007      	beq.n	8007f5a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8007f52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007f54:	6878      	ldr	r0, [r7, #4]
 8007f56:	f000 fb51 	bl	80085fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007f5a:	68bb      	ldr	r3, [r7, #8]
 8007f5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d00c      	beq.n	8007f7e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d007      	beq.n	8007f7e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007f76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007f78:	6878      	ldr	r0, [r7, #4]
 8007f7a:	f000 fb49 	bl	8008610 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007f7e:	68bb      	ldr	r3, [r7, #8]
 8007f80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d00c      	beq.n	8007fa2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d007      	beq.n	8007fa2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007f9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007f9c:	6878      	ldr	r0, [r7, #4]
 8007f9e:	f000 f92d 	bl	80081fc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007fa2:	68bb      	ldr	r3, [r7, #8]
 8007fa4:	f003 0320 	and.w	r3, r3, #32
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d00c      	beq.n	8007fc6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	f003 0320 	and.w	r3, r3, #32
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d007      	beq.n	8007fc6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	f06f 0220 	mvn.w	r2, #32
 8007fbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007fc0:	6878      	ldr	r0, [r7, #4]
 8007fc2:	f000 fb11 	bl	80085e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007fc6:	bf00      	nop
 8007fc8:	3710      	adds	r7, #16
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	bd80      	pop	{r7, pc}
	...

08007fd0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b084      	sub	sp, #16
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
 8007fd8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007fda:	2300      	movs	r3, #0
 8007fdc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007fe4:	2b01      	cmp	r3, #1
 8007fe6:	d101      	bne.n	8007fec <HAL_TIM_ConfigClockSource+0x1c>
 8007fe8:	2302      	movs	r3, #2
 8007fea:	e0dc      	b.n	80081a6 <HAL_TIM_ConfigClockSource+0x1d6>
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	2201      	movs	r2, #1
 8007ff0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2202      	movs	r2, #2
 8007ff8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	689b      	ldr	r3, [r3, #8]
 8008002:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008004:	68ba      	ldr	r2, [r7, #8]
 8008006:	4b6a      	ldr	r3, [pc, #424]	@ (80081b0 <HAL_TIM_ConfigClockSource+0x1e0>)
 8008008:	4013      	ands	r3, r2
 800800a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800800c:	68bb      	ldr	r3, [r7, #8]
 800800e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008012:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	68ba      	ldr	r2, [r7, #8]
 800801a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	4a64      	ldr	r2, [pc, #400]	@ (80081b4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8008022:	4293      	cmp	r3, r2
 8008024:	f000 80a9 	beq.w	800817a <HAL_TIM_ConfigClockSource+0x1aa>
 8008028:	4a62      	ldr	r2, [pc, #392]	@ (80081b4 <HAL_TIM_ConfigClockSource+0x1e4>)
 800802a:	4293      	cmp	r3, r2
 800802c:	f200 80ae 	bhi.w	800818c <HAL_TIM_ConfigClockSource+0x1bc>
 8008030:	4a61      	ldr	r2, [pc, #388]	@ (80081b8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8008032:	4293      	cmp	r3, r2
 8008034:	f000 80a1 	beq.w	800817a <HAL_TIM_ConfigClockSource+0x1aa>
 8008038:	4a5f      	ldr	r2, [pc, #380]	@ (80081b8 <HAL_TIM_ConfigClockSource+0x1e8>)
 800803a:	4293      	cmp	r3, r2
 800803c:	f200 80a6 	bhi.w	800818c <HAL_TIM_ConfigClockSource+0x1bc>
 8008040:	4a5e      	ldr	r2, [pc, #376]	@ (80081bc <HAL_TIM_ConfigClockSource+0x1ec>)
 8008042:	4293      	cmp	r3, r2
 8008044:	f000 8099 	beq.w	800817a <HAL_TIM_ConfigClockSource+0x1aa>
 8008048:	4a5c      	ldr	r2, [pc, #368]	@ (80081bc <HAL_TIM_ConfigClockSource+0x1ec>)
 800804a:	4293      	cmp	r3, r2
 800804c:	f200 809e 	bhi.w	800818c <HAL_TIM_ConfigClockSource+0x1bc>
 8008050:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008054:	f000 8091 	beq.w	800817a <HAL_TIM_ConfigClockSource+0x1aa>
 8008058:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800805c:	f200 8096 	bhi.w	800818c <HAL_TIM_ConfigClockSource+0x1bc>
 8008060:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008064:	f000 8089 	beq.w	800817a <HAL_TIM_ConfigClockSource+0x1aa>
 8008068:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800806c:	f200 808e 	bhi.w	800818c <HAL_TIM_ConfigClockSource+0x1bc>
 8008070:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008074:	d03e      	beq.n	80080f4 <HAL_TIM_ConfigClockSource+0x124>
 8008076:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800807a:	f200 8087 	bhi.w	800818c <HAL_TIM_ConfigClockSource+0x1bc>
 800807e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008082:	f000 8086 	beq.w	8008192 <HAL_TIM_ConfigClockSource+0x1c2>
 8008086:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800808a:	d87f      	bhi.n	800818c <HAL_TIM_ConfigClockSource+0x1bc>
 800808c:	2b70      	cmp	r3, #112	@ 0x70
 800808e:	d01a      	beq.n	80080c6 <HAL_TIM_ConfigClockSource+0xf6>
 8008090:	2b70      	cmp	r3, #112	@ 0x70
 8008092:	d87b      	bhi.n	800818c <HAL_TIM_ConfigClockSource+0x1bc>
 8008094:	2b60      	cmp	r3, #96	@ 0x60
 8008096:	d050      	beq.n	800813a <HAL_TIM_ConfigClockSource+0x16a>
 8008098:	2b60      	cmp	r3, #96	@ 0x60
 800809a:	d877      	bhi.n	800818c <HAL_TIM_ConfigClockSource+0x1bc>
 800809c:	2b50      	cmp	r3, #80	@ 0x50
 800809e:	d03c      	beq.n	800811a <HAL_TIM_ConfigClockSource+0x14a>
 80080a0:	2b50      	cmp	r3, #80	@ 0x50
 80080a2:	d873      	bhi.n	800818c <HAL_TIM_ConfigClockSource+0x1bc>
 80080a4:	2b40      	cmp	r3, #64	@ 0x40
 80080a6:	d058      	beq.n	800815a <HAL_TIM_ConfigClockSource+0x18a>
 80080a8:	2b40      	cmp	r3, #64	@ 0x40
 80080aa:	d86f      	bhi.n	800818c <HAL_TIM_ConfigClockSource+0x1bc>
 80080ac:	2b30      	cmp	r3, #48	@ 0x30
 80080ae:	d064      	beq.n	800817a <HAL_TIM_ConfigClockSource+0x1aa>
 80080b0:	2b30      	cmp	r3, #48	@ 0x30
 80080b2:	d86b      	bhi.n	800818c <HAL_TIM_ConfigClockSource+0x1bc>
 80080b4:	2b20      	cmp	r3, #32
 80080b6:	d060      	beq.n	800817a <HAL_TIM_ConfigClockSource+0x1aa>
 80080b8:	2b20      	cmp	r3, #32
 80080ba:	d867      	bhi.n	800818c <HAL_TIM_ConfigClockSource+0x1bc>
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d05c      	beq.n	800817a <HAL_TIM_ConfigClockSource+0x1aa>
 80080c0:	2b10      	cmp	r3, #16
 80080c2:	d05a      	beq.n	800817a <HAL_TIM_ConfigClockSource+0x1aa>
 80080c4:	e062      	b.n	800818c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80080ce:	683b      	ldr	r3, [r7, #0]
 80080d0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80080d2:	683b      	ldr	r3, [r7, #0]
 80080d4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80080d6:	f000 f9cb 	bl	8008470 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	689b      	ldr	r3, [r3, #8]
 80080e0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80080e2:	68bb      	ldr	r3, [r7, #8]
 80080e4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80080e8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	68ba      	ldr	r2, [r7, #8]
 80080f0:	609a      	str	r2, [r3, #8]
      break;
 80080f2:	e04f      	b.n	8008194 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80080f8:	683b      	ldr	r3, [r7, #0]
 80080fa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80080fc:	683b      	ldr	r3, [r7, #0]
 80080fe:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008104:	f000 f9b4 	bl	8008470 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	689a      	ldr	r2, [r3, #8]
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008116:	609a      	str	r2, [r3, #8]
      break;
 8008118:	e03c      	b.n	8008194 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800811e:	683b      	ldr	r3, [r7, #0]
 8008120:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008122:	683b      	ldr	r3, [r7, #0]
 8008124:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008126:	461a      	mov	r2, r3
 8008128:	f000 f924 	bl	8008374 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	2150      	movs	r1, #80	@ 0x50
 8008132:	4618      	mov	r0, r3
 8008134:	f000 f97e 	bl	8008434 <TIM_ITRx_SetConfig>
      break;
 8008138:	e02c      	b.n	8008194 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008142:	683b      	ldr	r3, [r7, #0]
 8008144:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008146:	461a      	mov	r2, r3
 8008148:	f000 f943 	bl	80083d2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	2160      	movs	r1, #96	@ 0x60
 8008152:	4618      	mov	r0, r3
 8008154:	f000 f96e 	bl	8008434 <TIM_ITRx_SetConfig>
      break;
 8008158:	e01c      	b.n	8008194 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800815e:	683b      	ldr	r3, [r7, #0]
 8008160:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008162:	683b      	ldr	r3, [r7, #0]
 8008164:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008166:	461a      	mov	r2, r3
 8008168:	f000 f904 	bl	8008374 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	2140      	movs	r1, #64	@ 0x40
 8008172:	4618      	mov	r0, r3
 8008174:	f000 f95e 	bl	8008434 <TIM_ITRx_SetConfig>
      break;
 8008178:	e00c      	b.n	8008194 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681a      	ldr	r2, [r3, #0]
 800817e:	683b      	ldr	r3, [r7, #0]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	4619      	mov	r1, r3
 8008184:	4610      	mov	r0, r2
 8008186:	f000 f955 	bl	8008434 <TIM_ITRx_SetConfig>
      break;
 800818a:	e003      	b.n	8008194 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800818c:	2301      	movs	r3, #1
 800818e:	73fb      	strb	r3, [r7, #15]
      break;
 8008190:	e000      	b.n	8008194 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8008192:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2201      	movs	r2, #1
 8008198:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2200      	movs	r2, #0
 80081a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80081a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80081a6:	4618      	mov	r0, r3
 80081a8:	3710      	adds	r7, #16
 80081aa:	46bd      	mov	sp, r7
 80081ac:	bd80      	pop	{r7, pc}
 80081ae:	bf00      	nop
 80081b0:	ffceff88 	.word	0xffceff88
 80081b4:	00100040 	.word	0x00100040
 80081b8:	00100030 	.word	0x00100030
 80081bc:	00100020 	.word	0x00100020

080081c0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80081c0:	b480      	push	{r7}
 80081c2:	b083      	sub	sp, #12
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80081c8:	bf00      	nop
 80081ca:	370c      	adds	r7, #12
 80081cc:	46bd      	mov	sp, r7
 80081ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d2:	4770      	bx	lr

080081d4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80081d4:	b480      	push	{r7}
 80081d6:	b083      	sub	sp, #12
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80081dc:	bf00      	nop
 80081de:	370c      	adds	r7, #12
 80081e0:	46bd      	mov	sp, r7
 80081e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e6:	4770      	bx	lr

080081e8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80081e8:	b480      	push	{r7}
 80081ea:	b083      	sub	sp, #12
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80081f0:	bf00      	nop
 80081f2:	370c      	adds	r7, #12
 80081f4:	46bd      	mov	sp, r7
 80081f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fa:	4770      	bx	lr

080081fc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80081fc:	b480      	push	{r7}
 80081fe:	b083      	sub	sp, #12
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008204:	bf00      	nop
 8008206:	370c      	adds	r7, #12
 8008208:	46bd      	mov	sp, r7
 800820a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820e:	4770      	bx	lr

08008210 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008210:	b480      	push	{r7}
 8008212:	b085      	sub	sp, #20
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
 8008218:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	4a4a      	ldr	r2, [pc, #296]	@ (800834c <TIM_Base_SetConfig+0x13c>)
 8008224:	4293      	cmp	r3, r2
 8008226:	d013      	beq.n	8008250 <TIM_Base_SetConfig+0x40>
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800822e:	d00f      	beq.n	8008250 <TIM_Base_SetConfig+0x40>
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	4a47      	ldr	r2, [pc, #284]	@ (8008350 <TIM_Base_SetConfig+0x140>)
 8008234:	4293      	cmp	r3, r2
 8008236:	d00b      	beq.n	8008250 <TIM_Base_SetConfig+0x40>
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	4a46      	ldr	r2, [pc, #280]	@ (8008354 <TIM_Base_SetConfig+0x144>)
 800823c:	4293      	cmp	r3, r2
 800823e:	d007      	beq.n	8008250 <TIM_Base_SetConfig+0x40>
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	4a45      	ldr	r2, [pc, #276]	@ (8008358 <TIM_Base_SetConfig+0x148>)
 8008244:	4293      	cmp	r3, r2
 8008246:	d003      	beq.n	8008250 <TIM_Base_SetConfig+0x40>
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	4a44      	ldr	r2, [pc, #272]	@ (800835c <TIM_Base_SetConfig+0x14c>)
 800824c:	4293      	cmp	r3, r2
 800824e:	d108      	bne.n	8008262 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008256:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008258:	683b      	ldr	r3, [r7, #0]
 800825a:	685b      	ldr	r3, [r3, #4]
 800825c:	68fa      	ldr	r2, [r7, #12]
 800825e:	4313      	orrs	r3, r2
 8008260:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	4a39      	ldr	r2, [pc, #228]	@ (800834c <TIM_Base_SetConfig+0x13c>)
 8008266:	4293      	cmp	r3, r2
 8008268:	d027      	beq.n	80082ba <TIM_Base_SetConfig+0xaa>
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008270:	d023      	beq.n	80082ba <TIM_Base_SetConfig+0xaa>
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	4a36      	ldr	r2, [pc, #216]	@ (8008350 <TIM_Base_SetConfig+0x140>)
 8008276:	4293      	cmp	r3, r2
 8008278:	d01f      	beq.n	80082ba <TIM_Base_SetConfig+0xaa>
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	4a35      	ldr	r2, [pc, #212]	@ (8008354 <TIM_Base_SetConfig+0x144>)
 800827e:	4293      	cmp	r3, r2
 8008280:	d01b      	beq.n	80082ba <TIM_Base_SetConfig+0xaa>
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	4a34      	ldr	r2, [pc, #208]	@ (8008358 <TIM_Base_SetConfig+0x148>)
 8008286:	4293      	cmp	r3, r2
 8008288:	d017      	beq.n	80082ba <TIM_Base_SetConfig+0xaa>
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	4a33      	ldr	r2, [pc, #204]	@ (800835c <TIM_Base_SetConfig+0x14c>)
 800828e:	4293      	cmp	r3, r2
 8008290:	d013      	beq.n	80082ba <TIM_Base_SetConfig+0xaa>
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	4a32      	ldr	r2, [pc, #200]	@ (8008360 <TIM_Base_SetConfig+0x150>)
 8008296:	4293      	cmp	r3, r2
 8008298:	d00f      	beq.n	80082ba <TIM_Base_SetConfig+0xaa>
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	4a31      	ldr	r2, [pc, #196]	@ (8008364 <TIM_Base_SetConfig+0x154>)
 800829e:	4293      	cmp	r3, r2
 80082a0:	d00b      	beq.n	80082ba <TIM_Base_SetConfig+0xaa>
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	4a30      	ldr	r2, [pc, #192]	@ (8008368 <TIM_Base_SetConfig+0x158>)
 80082a6:	4293      	cmp	r3, r2
 80082a8:	d007      	beq.n	80082ba <TIM_Base_SetConfig+0xaa>
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	4a2f      	ldr	r2, [pc, #188]	@ (800836c <TIM_Base_SetConfig+0x15c>)
 80082ae:	4293      	cmp	r3, r2
 80082b0:	d003      	beq.n	80082ba <TIM_Base_SetConfig+0xaa>
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	4a2e      	ldr	r2, [pc, #184]	@ (8008370 <TIM_Base_SetConfig+0x160>)
 80082b6:	4293      	cmp	r3, r2
 80082b8:	d108      	bne.n	80082cc <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80082c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80082c2:	683b      	ldr	r3, [r7, #0]
 80082c4:	68db      	ldr	r3, [r3, #12]
 80082c6:	68fa      	ldr	r2, [r7, #12]
 80082c8:	4313      	orrs	r3, r2
 80082ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	695b      	ldr	r3, [r3, #20]
 80082d6:	4313      	orrs	r3, r2
 80082d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	68fa      	ldr	r2, [r7, #12]
 80082de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80082e0:	683b      	ldr	r3, [r7, #0]
 80082e2:	689a      	ldr	r2, [r3, #8]
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80082e8:	683b      	ldr	r3, [r7, #0]
 80082ea:	681a      	ldr	r2, [r3, #0]
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	4a16      	ldr	r2, [pc, #88]	@ (800834c <TIM_Base_SetConfig+0x13c>)
 80082f4:	4293      	cmp	r3, r2
 80082f6:	d00f      	beq.n	8008318 <TIM_Base_SetConfig+0x108>
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	4a18      	ldr	r2, [pc, #96]	@ (800835c <TIM_Base_SetConfig+0x14c>)
 80082fc:	4293      	cmp	r3, r2
 80082fe:	d00b      	beq.n	8008318 <TIM_Base_SetConfig+0x108>
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	4a17      	ldr	r2, [pc, #92]	@ (8008360 <TIM_Base_SetConfig+0x150>)
 8008304:	4293      	cmp	r3, r2
 8008306:	d007      	beq.n	8008318 <TIM_Base_SetConfig+0x108>
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	4a16      	ldr	r2, [pc, #88]	@ (8008364 <TIM_Base_SetConfig+0x154>)
 800830c:	4293      	cmp	r3, r2
 800830e:	d003      	beq.n	8008318 <TIM_Base_SetConfig+0x108>
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	4a15      	ldr	r2, [pc, #84]	@ (8008368 <TIM_Base_SetConfig+0x158>)
 8008314:	4293      	cmp	r3, r2
 8008316:	d103      	bne.n	8008320 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	691a      	ldr	r2, [r3, #16]
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	2201      	movs	r2, #1
 8008324:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	691b      	ldr	r3, [r3, #16]
 800832a:	f003 0301 	and.w	r3, r3, #1
 800832e:	2b01      	cmp	r3, #1
 8008330:	d105      	bne.n	800833e <TIM_Base_SetConfig+0x12e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	691b      	ldr	r3, [r3, #16]
 8008336:	f023 0201 	bic.w	r2, r3, #1
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	611a      	str	r2, [r3, #16]
  }
}
 800833e:	bf00      	nop
 8008340:	3714      	adds	r7, #20
 8008342:	46bd      	mov	sp, r7
 8008344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008348:	4770      	bx	lr
 800834a:	bf00      	nop
 800834c:	40010000 	.word	0x40010000
 8008350:	40000400 	.word	0x40000400
 8008354:	40000800 	.word	0x40000800
 8008358:	40000c00 	.word	0x40000c00
 800835c:	40010400 	.word	0x40010400
 8008360:	40014000 	.word	0x40014000
 8008364:	40014400 	.word	0x40014400
 8008368:	40014800 	.word	0x40014800
 800836c:	4000e000 	.word	0x4000e000
 8008370:	4000e400 	.word	0x4000e400

08008374 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008374:	b480      	push	{r7}
 8008376:	b087      	sub	sp, #28
 8008378:	af00      	add	r7, sp, #0
 800837a:	60f8      	str	r0, [r7, #12]
 800837c:	60b9      	str	r1, [r7, #8]
 800837e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	6a1b      	ldr	r3, [r3, #32]
 8008384:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	6a1b      	ldr	r3, [r3, #32]
 800838a:	f023 0201 	bic.w	r2, r3, #1
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	699b      	ldr	r3, [r3, #24]
 8008396:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008398:	693b      	ldr	r3, [r7, #16]
 800839a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800839e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	011b      	lsls	r3, r3, #4
 80083a4:	693a      	ldr	r2, [r7, #16]
 80083a6:	4313      	orrs	r3, r2
 80083a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80083aa:	697b      	ldr	r3, [r7, #20]
 80083ac:	f023 030a 	bic.w	r3, r3, #10
 80083b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80083b2:	697a      	ldr	r2, [r7, #20]
 80083b4:	68bb      	ldr	r3, [r7, #8]
 80083b6:	4313      	orrs	r3, r2
 80083b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	693a      	ldr	r2, [r7, #16]
 80083be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	697a      	ldr	r2, [r7, #20]
 80083c4:	621a      	str	r2, [r3, #32]
}
 80083c6:	bf00      	nop
 80083c8:	371c      	adds	r7, #28
 80083ca:	46bd      	mov	sp, r7
 80083cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d0:	4770      	bx	lr

080083d2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80083d2:	b480      	push	{r7}
 80083d4:	b087      	sub	sp, #28
 80083d6:	af00      	add	r7, sp, #0
 80083d8:	60f8      	str	r0, [r7, #12]
 80083da:	60b9      	str	r1, [r7, #8]
 80083dc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	6a1b      	ldr	r3, [r3, #32]
 80083e2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	6a1b      	ldr	r3, [r3, #32]
 80083e8:	f023 0210 	bic.w	r2, r3, #16
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	699b      	ldr	r3, [r3, #24]
 80083f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80083f6:	693b      	ldr	r3, [r7, #16]
 80083f8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80083fc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	031b      	lsls	r3, r3, #12
 8008402:	693a      	ldr	r2, [r7, #16]
 8008404:	4313      	orrs	r3, r2
 8008406:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008408:	697b      	ldr	r3, [r7, #20]
 800840a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800840e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008410:	68bb      	ldr	r3, [r7, #8]
 8008412:	011b      	lsls	r3, r3, #4
 8008414:	697a      	ldr	r2, [r7, #20]
 8008416:	4313      	orrs	r3, r2
 8008418:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	693a      	ldr	r2, [r7, #16]
 800841e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	697a      	ldr	r2, [r7, #20]
 8008424:	621a      	str	r2, [r3, #32]
}
 8008426:	bf00      	nop
 8008428:	371c      	adds	r7, #28
 800842a:	46bd      	mov	sp, r7
 800842c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008430:	4770      	bx	lr
	...

08008434 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008434:	b480      	push	{r7}
 8008436:	b085      	sub	sp, #20
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
 800843c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	689b      	ldr	r3, [r3, #8]
 8008442:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008444:	68fa      	ldr	r2, [r7, #12]
 8008446:	4b09      	ldr	r3, [pc, #36]	@ (800846c <TIM_ITRx_SetConfig+0x38>)
 8008448:	4013      	ands	r3, r2
 800844a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800844c:	683a      	ldr	r2, [r7, #0]
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	4313      	orrs	r3, r2
 8008452:	f043 0307 	orr.w	r3, r3, #7
 8008456:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	68fa      	ldr	r2, [r7, #12]
 800845c:	609a      	str	r2, [r3, #8]
}
 800845e:	bf00      	nop
 8008460:	3714      	adds	r7, #20
 8008462:	46bd      	mov	sp, r7
 8008464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008468:	4770      	bx	lr
 800846a:	bf00      	nop
 800846c:	ffcfff8f 	.word	0xffcfff8f

08008470 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008470:	b480      	push	{r7}
 8008472:	b087      	sub	sp, #28
 8008474:	af00      	add	r7, sp, #0
 8008476:	60f8      	str	r0, [r7, #12]
 8008478:	60b9      	str	r1, [r7, #8]
 800847a:	607a      	str	r2, [r7, #4]
 800847c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	689b      	ldr	r3, [r3, #8]
 8008482:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008484:	697b      	ldr	r3, [r7, #20]
 8008486:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800848a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800848c:	683b      	ldr	r3, [r7, #0]
 800848e:	021a      	lsls	r2, r3, #8
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	431a      	orrs	r2, r3
 8008494:	68bb      	ldr	r3, [r7, #8]
 8008496:	4313      	orrs	r3, r2
 8008498:	697a      	ldr	r2, [r7, #20]
 800849a:	4313      	orrs	r3, r2
 800849c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	697a      	ldr	r2, [r7, #20]
 80084a2:	609a      	str	r2, [r3, #8]
}
 80084a4:	bf00      	nop
 80084a6:	371c      	adds	r7, #28
 80084a8:	46bd      	mov	sp, r7
 80084aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ae:	4770      	bx	lr

080084b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80084b0:	b480      	push	{r7}
 80084b2:	b085      	sub	sp, #20
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
 80084b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80084c0:	2b01      	cmp	r3, #1
 80084c2:	d101      	bne.n	80084c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80084c4:	2302      	movs	r3, #2
 80084c6:	e077      	b.n	80085b8 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	2201      	movs	r2, #1
 80084cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	2202      	movs	r2, #2
 80084d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	685b      	ldr	r3, [r3, #4]
 80084de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	689b      	ldr	r3, [r3, #8]
 80084e6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	4a35      	ldr	r2, [pc, #212]	@ (80085c4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80084ee:	4293      	cmp	r3, r2
 80084f0:	d004      	beq.n	80084fc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	4a34      	ldr	r2, [pc, #208]	@ (80085c8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80084f8:	4293      	cmp	r3, r2
 80084fa:	d108      	bne.n	800850e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008502:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008504:	683b      	ldr	r3, [r7, #0]
 8008506:	685b      	ldr	r3, [r3, #4]
 8008508:	68fa      	ldr	r2, [r7, #12]
 800850a:	4313      	orrs	r3, r2
 800850c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008514:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008516:	683b      	ldr	r3, [r7, #0]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	68fa      	ldr	r2, [r7, #12]
 800851c:	4313      	orrs	r3, r2
 800851e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	68fa      	ldr	r2, [r7, #12]
 8008526:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	4a25      	ldr	r2, [pc, #148]	@ (80085c4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800852e:	4293      	cmp	r3, r2
 8008530:	d02c      	beq.n	800858c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800853a:	d027      	beq.n	800858c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	4a22      	ldr	r2, [pc, #136]	@ (80085cc <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8008542:	4293      	cmp	r3, r2
 8008544:	d022      	beq.n	800858c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	4a21      	ldr	r2, [pc, #132]	@ (80085d0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800854c:	4293      	cmp	r3, r2
 800854e:	d01d      	beq.n	800858c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	4a1f      	ldr	r2, [pc, #124]	@ (80085d4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8008556:	4293      	cmp	r3, r2
 8008558:	d018      	beq.n	800858c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	4a1a      	ldr	r2, [pc, #104]	@ (80085c8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008560:	4293      	cmp	r3, r2
 8008562:	d013      	beq.n	800858c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	4a1b      	ldr	r2, [pc, #108]	@ (80085d8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800856a:	4293      	cmp	r3, r2
 800856c:	d00e      	beq.n	800858c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	4a1a      	ldr	r2, [pc, #104]	@ (80085dc <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8008574:	4293      	cmp	r3, r2
 8008576:	d009      	beq.n	800858c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	4a18      	ldr	r2, [pc, #96]	@ (80085e0 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800857e:	4293      	cmp	r3, r2
 8008580:	d004      	beq.n	800858c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	4a17      	ldr	r2, [pc, #92]	@ (80085e4 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8008588:	4293      	cmp	r3, r2
 800858a:	d10c      	bne.n	80085a6 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800858c:	68bb      	ldr	r3, [r7, #8]
 800858e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008592:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008594:	683b      	ldr	r3, [r7, #0]
 8008596:	689b      	ldr	r3, [r3, #8]
 8008598:	68ba      	ldr	r2, [r7, #8]
 800859a:	4313      	orrs	r3, r2
 800859c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	68ba      	ldr	r2, [r7, #8]
 80085a4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	2201      	movs	r2, #1
 80085aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	2200      	movs	r2, #0
 80085b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80085b6:	2300      	movs	r3, #0
}
 80085b8:	4618      	mov	r0, r3
 80085ba:	3714      	adds	r7, #20
 80085bc:	46bd      	mov	sp, r7
 80085be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c2:	4770      	bx	lr
 80085c4:	40010000 	.word	0x40010000
 80085c8:	40010400 	.word	0x40010400
 80085cc:	40000400 	.word	0x40000400
 80085d0:	40000800 	.word	0x40000800
 80085d4:	40000c00 	.word	0x40000c00
 80085d8:	40001800 	.word	0x40001800
 80085dc:	40014000 	.word	0x40014000
 80085e0:	4000e000 	.word	0x4000e000
 80085e4:	4000e400 	.word	0x4000e400

080085e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80085e8:	b480      	push	{r7}
 80085ea:	b083      	sub	sp, #12
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80085f0:	bf00      	nop
 80085f2:	370c      	adds	r7, #12
 80085f4:	46bd      	mov	sp, r7
 80085f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fa:	4770      	bx	lr

080085fc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80085fc:	b480      	push	{r7}
 80085fe:	b083      	sub	sp, #12
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008604:	bf00      	nop
 8008606:	370c      	adds	r7, #12
 8008608:	46bd      	mov	sp, r7
 800860a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860e:	4770      	bx	lr

08008610 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008610:	b480      	push	{r7}
 8008612:	b083      	sub	sp, #12
 8008614:	af00      	add	r7, sp, #0
 8008616:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008618:	bf00      	nop
 800861a:	370c      	adds	r7, #12
 800861c:	46bd      	mov	sp, r7
 800861e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008622:	4770      	bx	lr

08008624 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008624:	b580      	push	{r7, lr}
 8008626:	b082      	sub	sp, #8
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d101      	bne.n	8008636 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008632:	2301      	movs	r3, #1
 8008634:	e042      	b.n	80086bc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800863c:	2b00      	cmp	r3, #0
 800863e:	d106      	bne.n	800864e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	2200      	movs	r2, #0
 8008644:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008648:	6878      	ldr	r0, [r7, #4]
 800864a:	f7f9 fe7f 	bl	800234c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	2224      	movs	r2, #36	@ 0x24
 8008652:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	681a      	ldr	r2, [r3, #0]
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	f022 0201 	bic.w	r2, r2, #1
 8008664:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800866a:	2b00      	cmp	r3, #0
 800866c:	d002      	beq.n	8008674 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800866e:	6878      	ldr	r0, [r7, #4]
 8008670:	f001 fc10 	bl	8009e94 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008674:	6878      	ldr	r0, [r7, #4]
 8008676:	f000 fda1 	bl	80091bc <UART_SetConfig>
 800867a:	4603      	mov	r3, r0
 800867c:	2b01      	cmp	r3, #1
 800867e:	d101      	bne.n	8008684 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008680:	2301      	movs	r3, #1
 8008682:	e01b      	b.n	80086bc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	685a      	ldr	r2, [r3, #4]
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008692:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	689a      	ldr	r2, [r3, #8]
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80086a2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	681a      	ldr	r2, [r3, #0]
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	f042 0201 	orr.w	r2, r2, #1
 80086b2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80086b4:	6878      	ldr	r0, [r7, #4]
 80086b6:	f001 fc8f 	bl	8009fd8 <UART_CheckIdleState>
 80086ba:	4603      	mov	r3, r0
}
 80086bc:	4618      	mov	r0, r3
 80086be:	3708      	adds	r7, #8
 80086c0:	46bd      	mov	sp, r7
 80086c2:	bd80      	pop	{r7, pc}

080086c4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80086c4:	b580      	push	{r7, lr}
 80086c6:	b08a      	sub	sp, #40	@ 0x28
 80086c8:	af02      	add	r7, sp, #8
 80086ca:	60f8      	str	r0, [r7, #12]
 80086cc:	60b9      	str	r1, [r7, #8]
 80086ce:	603b      	str	r3, [r7, #0]
 80086d0:	4613      	mov	r3, r2
 80086d2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80086da:	2b20      	cmp	r3, #32
 80086dc:	d17b      	bne.n	80087d6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80086de:	68bb      	ldr	r3, [r7, #8]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d002      	beq.n	80086ea <HAL_UART_Transmit+0x26>
 80086e4:	88fb      	ldrh	r3, [r7, #6]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d101      	bne.n	80086ee <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80086ea:	2301      	movs	r3, #1
 80086ec:	e074      	b.n	80087d8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	2200      	movs	r2, #0
 80086f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	2221      	movs	r2, #33	@ 0x21
 80086fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80086fe:	f7fa fa71 	bl	8002be4 <HAL_GetTick>
 8008702:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	88fa      	ldrh	r2, [r7, #6]
 8008708:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	88fa      	ldrh	r2, [r7, #6]
 8008710:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	689b      	ldr	r3, [r3, #8]
 8008718:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800871c:	d108      	bne.n	8008730 <HAL_UART_Transmit+0x6c>
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	691b      	ldr	r3, [r3, #16]
 8008722:	2b00      	cmp	r3, #0
 8008724:	d104      	bne.n	8008730 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008726:	2300      	movs	r3, #0
 8008728:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800872a:	68bb      	ldr	r3, [r7, #8]
 800872c:	61bb      	str	r3, [r7, #24]
 800872e:	e003      	b.n	8008738 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008730:	68bb      	ldr	r3, [r7, #8]
 8008732:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008734:	2300      	movs	r3, #0
 8008736:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008738:	e030      	b.n	800879c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	9300      	str	r3, [sp, #0]
 800873e:	697b      	ldr	r3, [r7, #20]
 8008740:	2200      	movs	r2, #0
 8008742:	2180      	movs	r1, #128	@ 0x80
 8008744:	68f8      	ldr	r0, [r7, #12]
 8008746:	f001 fcf1 	bl	800a12c <UART_WaitOnFlagUntilTimeout>
 800874a:	4603      	mov	r3, r0
 800874c:	2b00      	cmp	r3, #0
 800874e:	d005      	beq.n	800875c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	2220      	movs	r2, #32
 8008754:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8008758:	2303      	movs	r3, #3
 800875a:	e03d      	b.n	80087d8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800875c:	69fb      	ldr	r3, [r7, #28]
 800875e:	2b00      	cmp	r3, #0
 8008760:	d10b      	bne.n	800877a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008762:	69bb      	ldr	r3, [r7, #24]
 8008764:	881b      	ldrh	r3, [r3, #0]
 8008766:	461a      	mov	r2, r3
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008770:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8008772:	69bb      	ldr	r3, [r7, #24]
 8008774:	3302      	adds	r3, #2
 8008776:	61bb      	str	r3, [r7, #24]
 8008778:	e007      	b.n	800878a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800877a:	69fb      	ldr	r3, [r7, #28]
 800877c:	781a      	ldrb	r2, [r3, #0]
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8008784:	69fb      	ldr	r3, [r7, #28]
 8008786:	3301      	adds	r3, #1
 8008788:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008790:	b29b      	uxth	r3, r3
 8008792:	3b01      	subs	r3, #1
 8008794:	b29a      	uxth	r2, r3
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80087a2:	b29b      	uxth	r3, r3
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d1c8      	bne.n	800873a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80087a8:	683b      	ldr	r3, [r7, #0]
 80087aa:	9300      	str	r3, [sp, #0]
 80087ac:	697b      	ldr	r3, [r7, #20]
 80087ae:	2200      	movs	r2, #0
 80087b0:	2140      	movs	r1, #64	@ 0x40
 80087b2:	68f8      	ldr	r0, [r7, #12]
 80087b4:	f001 fcba 	bl	800a12c <UART_WaitOnFlagUntilTimeout>
 80087b8:	4603      	mov	r3, r0
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d005      	beq.n	80087ca <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	2220      	movs	r2, #32
 80087c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80087c6:	2303      	movs	r3, #3
 80087c8:	e006      	b.n	80087d8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	2220      	movs	r2, #32
 80087ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80087d2:	2300      	movs	r3, #0
 80087d4:	e000      	b.n	80087d8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80087d6:	2302      	movs	r3, #2
  }
}
 80087d8:	4618      	mov	r0, r3
 80087da:	3720      	adds	r7, #32
 80087dc:	46bd      	mov	sp, r7
 80087de:	bd80      	pop	{r7, pc}

080087e0 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b08a      	sub	sp, #40	@ 0x28
 80087e4:	af02      	add	r7, sp, #8
 80087e6:	60f8      	str	r0, [r7, #12]
 80087e8:	60b9      	str	r1, [r7, #8]
 80087ea:	603b      	str	r3, [r7, #0]
 80087ec:	4613      	mov	r3, r2
 80087ee:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80087f6:	2b20      	cmp	r3, #32
 80087f8:	f040 80b5 	bne.w	8008966 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 80087fc:	68bb      	ldr	r3, [r7, #8]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d002      	beq.n	8008808 <HAL_UART_Receive+0x28>
 8008802:	88fb      	ldrh	r3, [r7, #6]
 8008804:	2b00      	cmp	r3, #0
 8008806:	d101      	bne.n	800880c <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8008808:	2301      	movs	r3, #1
 800880a:	e0ad      	b.n	8008968 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	2200      	movs	r2, #0
 8008810:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	2222      	movs	r2, #34	@ 0x22
 8008818:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	2200      	movs	r2, #0
 8008820:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008822:	f7fa f9df 	bl	8002be4 <HAL_GetTick>
 8008826:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	88fa      	ldrh	r2, [r7, #6]
 800882c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	88fa      	ldrh	r2, [r7, #6]
 8008834:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	689b      	ldr	r3, [r3, #8]
 800883c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008840:	d10e      	bne.n	8008860 <HAL_UART_Receive+0x80>
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	691b      	ldr	r3, [r3, #16]
 8008846:	2b00      	cmp	r3, #0
 8008848:	d105      	bne.n	8008856 <HAL_UART_Receive+0x76>
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8008850:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008854:	e02d      	b.n	80088b2 <HAL_UART_Receive+0xd2>
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	22ff      	movs	r2, #255	@ 0xff
 800885a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800885e:	e028      	b.n	80088b2 <HAL_UART_Receive+0xd2>
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	689b      	ldr	r3, [r3, #8]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d10d      	bne.n	8008884 <HAL_UART_Receive+0xa4>
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	691b      	ldr	r3, [r3, #16]
 800886c:	2b00      	cmp	r3, #0
 800886e:	d104      	bne.n	800887a <HAL_UART_Receive+0x9a>
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	22ff      	movs	r2, #255	@ 0xff
 8008874:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008878:	e01b      	b.n	80088b2 <HAL_UART_Receive+0xd2>
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	227f      	movs	r2, #127	@ 0x7f
 800887e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008882:	e016      	b.n	80088b2 <HAL_UART_Receive+0xd2>
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	689b      	ldr	r3, [r3, #8]
 8008888:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800888c:	d10d      	bne.n	80088aa <HAL_UART_Receive+0xca>
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	691b      	ldr	r3, [r3, #16]
 8008892:	2b00      	cmp	r3, #0
 8008894:	d104      	bne.n	80088a0 <HAL_UART_Receive+0xc0>
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	227f      	movs	r2, #127	@ 0x7f
 800889a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800889e:	e008      	b.n	80088b2 <HAL_UART_Receive+0xd2>
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	223f      	movs	r2, #63	@ 0x3f
 80088a4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80088a8:	e003      	b.n	80088b2 <HAL_UART_Receive+0xd2>
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	2200      	movs	r2, #0
 80088ae:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80088b8:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	689b      	ldr	r3, [r3, #8]
 80088be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80088c2:	d108      	bne.n	80088d6 <HAL_UART_Receive+0xf6>
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	691b      	ldr	r3, [r3, #16]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d104      	bne.n	80088d6 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80088cc:	2300      	movs	r3, #0
 80088ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80088d0:	68bb      	ldr	r3, [r7, #8]
 80088d2:	61bb      	str	r3, [r7, #24]
 80088d4:	e003      	b.n	80088de <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80088d6:	68bb      	ldr	r3, [r7, #8]
 80088d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80088da:	2300      	movs	r3, #0
 80088dc:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80088de:	e036      	b.n	800894e <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80088e0:	683b      	ldr	r3, [r7, #0]
 80088e2:	9300      	str	r3, [sp, #0]
 80088e4:	697b      	ldr	r3, [r7, #20]
 80088e6:	2200      	movs	r2, #0
 80088e8:	2120      	movs	r1, #32
 80088ea:	68f8      	ldr	r0, [r7, #12]
 80088ec:	f001 fc1e 	bl	800a12c <UART_WaitOnFlagUntilTimeout>
 80088f0:	4603      	mov	r3, r0
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d005      	beq.n	8008902 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	2220      	movs	r2, #32
 80088fa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 80088fe:	2303      	movs	r3, #3
 8008900:	e032      	b.n	8008968 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8008902:	69fb      	ldr	r3, [r7, #28]
 8008904:	2b00      	cmp	r3, #0
 8008906:	d10c      	bne.n	8008922 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800890e:	b29a      	uxth	r2, r3
 8008910:	8a7b      	ldrh	r3, [r7, #18]
 8008912:	4013      	ands	r3, r2
 8008914:	b29a      	uxth	r2, r3
 8008916:	69bb      	ldr	r3, [r7, #24]
 8008918:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800891a:	69bb      	ldr	r3, [r7, #24]
 800891c:	3302      	adds	r3, #2
 800891e:	61bb      	str	r3, [r7, #24]
 8008920:	e00c      	b.n	800893c <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008928:	b2da      	uxtb	r2, r3
 800892a:	8a7b      	ldrh	r3, [r7, #18]
 800892c:	b2db      	uxtb	r3, r3
 800892e:	4013      	ands	r3, r2
 8008930:	b2da      	uxtb	r2, r3
 8008932:	69fb      	ldr	r3, [r7, #28]
 8008934:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8008936:	69fb      	ldr	r3, [r7, #28]
 8008938:	3301      	adds	r3, #1
 800893a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008942:	b29b      	uxth	r3, r3
 8008944:	3b01      	subs	r3, #1
 8008946:	b29a      	uxth	r2, r3
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008954:	b29b      	uxth	r3, r3
 8008956:	2b00      	cmp	r3, #0
 8008958:	d1c2      	bne.n	80088e0 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	2220      	movs	r2, #32
 800895e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 8008962:	2300      	movs	r3, #0
 8008964:	e000      	b.n	8008968 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8008966:	2302      	movs	r3, #2
  }
}
 8008968:	4618      	mov	r0, r3
 800896a:	3720      	adds	r7, #32
 800896c:	46bd      	mov	sp, r7
 800896e:	bd80      	pop	{r7, pc}

08008970 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008970:	b580      	push	{r7, lr}
 8008972:	b08a      	sub	sp, #40	@ 0x28
 8008974:	af00      	add	r7, sp, #0
 8008976:	60f8      	str	r0, [r7, #12]
 8008978:	60b9      	str	r1, [r7, #8]
 800897a:	4613      	mov	r3, r2
 800897c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008984:	2b20      	cmp	r3, #32
 8008986:	d137      	bne.n	80089f8 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8008988:	68bb      	ldr	r3, [r7, #8]
 800898a:	2b00      	cmp	r3, #0
 800898c:	d002      	beq.n	8008994 <HAL_UART_Receive_IT+0x24>
 800898e:	88fb      	ldrh	r3, [r7, #6]
 8008990:	2b00      	cmp	r3, #0
 8008992:	d101      	bne.n	8008998 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8008994:	2301      	movs	r3, #1
 8008996:	e030      	b.n	80089fa <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	2200      	movs	r2, #0
 800899c:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	4a18      	ldr	r2, [pc, #96]	@ (8008a04 <HAL_UART_Receive_IT+0x94>)
 80089a4:	4293      	cmp	r3, r2
 80089a6:	d01f      	beq.n	80089e8 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	685b      	ldr	r3, [r3, #4]
 80089ae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d018      	beq.n	80089e8 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089bc:	697b      	ldr	r3, [r7, #20]
 80089be:	e853 3f00 	ldrex	r3, [r3]
 80089c2:	613b      	str	r3, [r7, #16]
   return(result);
 80089c4:	693b      	ldr	r3, [r7, #16]
 80089c6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80089ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	461a      	mov	r2, r3
 80089d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089d4:	623b      	str	r3, [r7, #32]
 80089d6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089d8:	69f9      	ldr	r1, [r7, #28]
 80089da:	6a3a      	ldr	r2, [r7, #32]
 80089dc:	e841 2300 	strex	r3, r2, [r1]
 80089e0:	61bb      	str	r3, [r7, #24]
   return(result);
 80089e2:	69bb      	ldr	r3, [r7, #24]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d1e6      	bne.n	80089b6 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80089e8:	88fb      	ldrh	r3, [r7, #6]
 80089ea:	461a      	mov	r2, r3
 80089ec:	68b9      	ldr	r1, [r7, #8]
 80089ee:	68f8      	ldr	r0, [r7, #12]
 80089f0:	f001 fc0a 	bl	800a208 <UART_Start_Receive_IT>
 80089f4:	4603      	mov	r3, r0
 80089f6:	e000      	b.n	80089fa <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80089f8:	2302      	movs	r3, #2
  }
}
 80089fa:	4618      	mov	r0, r3
 80089fc:	3728      	adds	r7, #40	@ 0x28
 80089fe:	46bd      	mov	sp, r7
 8008a00:	bd80      	pop	{r7, pc}
 8008a02:	bf00      	nop
 8008a04:	58000c00 	.word	0x58000c00

08008a08 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b0ba      	sub	sp, #232	@ 0xe8
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	69db      	ldr	r3, [r3, #28]
 8008a16:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	689b      	ldr	r3, [r3, #8]
 8008a2a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008a2e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8008a32:	f640 030f 	movw	r3, #2063	@ 0x80f
 8008a36:	4013      	ands	r3, r2
 8008a38:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8008a3c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d11b      	bne.n	8008a7c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008a44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a48:	f003 0320 	and.w	r3, r3, #32
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d015      	beq.n	8008a7c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008a50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008a54:	f003 0320 	and.w	r3, r3, #32
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d105      	bne.n	8008a68 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008a5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008a60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d009      	beq.n	8008a7c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	f000 8377 	beq.w	8009160 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008a76:	6878      	ldr	r0, [r7, #4]
 8008a78:	4798      	blx	r3
      }
      return;
 8008a7a:	e371      	b.n	8009160 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008a7c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	f000 8123 	beq.w	8008ccc <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008a86:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008a8a:	4b8d      	ldr	r3, [pc, #564]	@ (8008cc0 <HAL_UART_IRQHandler+0x2b8>)
 8008a8c:	4013      	ands	r3, r2
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d106      	bne.n	8008aa0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008a92:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8008a96:	4b8b      	ldr	r3, [pc, #556]	@ (8008cc4 <HAL_UART_IRQHandler+0x2bc>)
 8008a98:	4013      	ands	r3, r2
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	f000 8116 	beq.w	8008ccc <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008aa0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008aa4:	f003 0301 	and.w	r3, r3, #1
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d011      	beq.n	8008ad0 <HAL_UART_IRQHandler+0xc8>
 8008aac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008ab0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d00b      	beq.n	8008ad0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	2201      	movs	r2, #1
 8008abe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008ac6:	f043 0201 	orr.w	r2, r3, #1
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008ad0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008ad4:	f003 0302 	and.w	r3, r3, #2
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d011      	beq.n	8008b00 <HAL_UART_IRQHandler+0xf8>
 8008adc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008ae0:	f003 0301 	and.w	r3, r3, #1
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d00b      	beq.n	8008b00 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	2202      	movs	r2, #2
 8008aee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008af6:	f043 0204 	orr.w	r2, r3, #4
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008b00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b04:	f003 0304 	and.w	r3, r3, #4
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d011      	beq.n	8008b30 <HAL_UART_IRQHandler+0x128>
 8008b0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008b10:	f003 0301 	and.w	r3, r3, #1
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d00b      	beq.n	8008b30 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	2204      	movs	r2, #4
 8008b1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008b26:	f043 0202 	orr.w	r2, r3, #2
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008b30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b34:	f003 0308 	and.w	r3, r3, #8
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d017      	beq.n	8008b6c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008b3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008b40:	f003 0320 	and.w	r3, r3, #32
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d105      	bne.n	8008b54 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008b48:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008b4c:	4b5c      	ldr	r3, [pc, #368]	@ (8008cc0 <HAL_UART_IRQHandler+0x2b8>)
 8008b4e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d00b      	beq.n	8008b6c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	2208      	movs	r2, #8
 8008b5a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008b62:	f043 0208 	orr.w	r2, r3, #8
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008b6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b70:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d012      	beq.n	8008b9e <HAL_UART_IRQHandler+0x196>
 8008b78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008b7c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d00c      	beq.n	8008b9e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008b8c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008b94:	f043 0220 	orr.w	r2, r3, #32
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	f000 82dd 	beq.w	8009164 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008baa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008bae:	f003 0320 	and.w	r3, r3, #32
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d013      	beq.n	8008bde <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008bb6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008bba:	f003 0320 	and.w	r3, r3, #32
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d105      	bne.n	8008bce <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008bc2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008bc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d007      	beq.n	8008bde <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d003      	beq.n	8008bde <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008bda:	6878      	ldr	r0, [r7, #4]
 8008bdc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008be4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	689b      	ldr	r3, [r3, #8]
 8008bee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008bf2:	2b40      	cmp	r3, #64	@ 0x40
 8008bf4:	d005      	beq.n	8008c02 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008bf6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008bfa:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d054      	beq.n	8008cac <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008c02:	6878      	ldr	r0, [r7, #4]
 8008c04:	f001 fc22 	bl	800a44c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	689b      	ldr	r3, [r3, #8]
 8008c0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c12:	2b40      	cmp	r3, #64	@ 0x40
 8008c14:	d146      	bne.n	8008ca4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	3308      	adds	r3, #8
 8008c1c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c20:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008c24:	e853 3f00 	ldrex	r3, [r3]
 8008c28:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008c2c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008c30:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008c34:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	3308      	adds	r3, #8
 8008c3e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008c42:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008c46:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c4a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008c4e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008c52:	e841 2300 	strex	r3, r2, [r1]
 8008c56:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008c5a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d1d9      	bne.n	8008c16 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d017      	beq.n	8008c9c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008c72:	4a15      	ldr	r2, [pc, #84]	@ (8008cc8 <HAL_UART_IRQHandler+0x2c0>)
 8008c74:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	f7fa fc87 	bl	8003590 <HAL_DMA_Abort_IT>
 8008c82:	4603      	mov	r3, r0
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d019      	beq.n	8008cbc <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008c8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c90:	687a      	ldr	r2, [r7, #4]
 8008c92:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8008c96:	4610      	mov	r0, r2
 8008c98:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c9a:	e00f      	b.n	8008cbc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008c9c:	6878      	ldr	r0, [r7, #4]
 8008c9e:	f000 fa77 	bl	8009190 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ca2:	e00b      	b.n	8008cbc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008ca4:	6878      	ldr	r0, [r7, #4]
 8008ca6:	f000 fa73 	bl	8009190 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008caa:	e007      	b.n	8008cbc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008cac:	6878      	ldr	r0, [r7, #4]
 8008cae:	f000 fa6f 	bl	8009190 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	2200      	movs	r2, #0
 8008cb6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8008cba:	e253      	b.n	8009164 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008cbc:	bf00      	nop
    return;
 8008cbe:	e251      	b.n	8009164 <HAL_UART_IRQHandler+0x75c>
 8008cc0:	10000001 	.word	0x10000001
 8008cc4:	04000120 	.word	0x04000120
 8008cc8:	0800a519 	.word	0x0800a519

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008cd0:	2b01      	cmp	r3, #1
 8008cd2:	f040 81e7 	bne.w	80090a4 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008cd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008cda:	f003 0310 	and.w	r3, r3, #16
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	f000 81e0 	beq.w	80090a4 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008ce4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008ce8:	f003 0310 	and.w	r3, r3, #16
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	f000 81d9 	beq.w	80090a4 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	2210      	movs	r2, #16
 8008cf8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	689b      	ldr	r3, [r3, #8]
 8008d00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d04:	2b40      	cmp	r3, #64	@ 0x40
 8008d06:	f040 8151 	bne.w	8008fac <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	4a96      	ldr	r2, [pc, #600]	@ (8008f6c <HAL_UART_IRQHandler+0x564>)
 8008d14:	4293      	cmp	r3, r2
 8008d16:	d068      	beq.n	8008dea <HAL_UART_IRQHandler+0x3e2>
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	4a93      	ldr	r2, [pc, #588]	@ (8008f70 <HAL_UART_IRQHandler+0x568>)
 8008d22:	4293      	cmp	r3, r2
 8008d24:	d061      	beq.n	8008dea <HAL_UART_IRQHandler+0x3e2>
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	4a91      	ldr	r2, [pc, #580]	@ (8008f74 <HAL_UART_IRQHandler+0x56c>)
 8008d30:	4293      	cmp	r3, r2
 8008d32:	d05a      	beq.n	8008dea <HAL_UART_IRQHandler+0x3e2>
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	4a8e      	ldr	r2, [pc, #568]	@ (8008f78 <HAL_UART_IRQHandler+0x570>)
 8008d3e:	4293      	cmp	r3, r2
 8008d40:	d053      	beq.n	8008dea <HAL_UART_IRQHandler+0x3e2>
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	4a8c      	ldr	r2, [pc, #560]	@ (8008f7c <HAL_UART_IRQHandler+0x574>)
 8008d4c:	4293      	cmp	r3, r2
 8008d4e:	d04c      	beq.n	8008dea <HAL_UART_IRQHandler+0x3e2>
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	4a89      	ldr	r2, [pc, #548]	@ (8008f80 <HAL_UART_IRQHandler+0x578>)
 8008d5a:	4293      	cmp	r3, r2
 8008d5c:	d045      	beq.n	8008dea <HAL_UART_IRQHandler+0x3e2>
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	4a87      	ldr	r2, [pc, #540]	@ (8008f84 <HAL_UART_IRQHandler+0x57c>)
 8008d68:	4293      	cmp	r3, r2
 8008d6a:	d03e      	beq.n	8008dea <HAL_UART_IRQHandler+0x3e2>
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	4a84      	ldr	r2, [pc, #528]	@ (8008f88 <HAL_UART_IRQHandler+0x580>)
 8008d76:	4293      	cmp	r3, r2
 8008d78:	d037      	beq.n	8008dea <HAL_UART_IRQHandler+0x3e2>
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	4a82      	ldr	r2, [pc, #520]	@ (8008f8c <HAL_UART_IRQHandler+0x584>)
 8008d84:	4293      	cmp	r3, r2
 8008d86:	d030      	beq.n	8008dea <HAL_UART_IRQHandler+0x3e2>
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	4a7f      	ldr	r2, [pc, #508]	@ (8008f90 <HAL_UART_IRQHandler+0x588>)
 8008d92:	4293      	cmp	r3, r2
 8008d94:	d029      	beq.n	8008dea <HAL_UART_IRQHandler+0x3e2>
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	4a7d      	ldr	r2, [pc, #500]	@ (8008f94 <HAL_UART_IRQHandler+0x58c>)
 8008da0:	4293      	cmp	r3, r2
 8008da2:	d022      	beq.n	8008dea <HAL_UART_IRQHandler+0x3e2>
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	4a7a      	ldr	r2, [pc, #488]	@ (8008f98 <HAL_UART_IRQHandler+0x590>)
 8008dae:	4293      	cmp	r3, r2
 8008db0:	d01b      	beq.n	8008dea <HAL_UART_IRQHandler+0x3e2>
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	4a78      	ldr	r2, [pc, #480]	@ (8008f9c <HAL_UART_IRQHandler+0x594>)
 8008dbc:	4293      	cmp	r3, r2
 8008dbe:	d014      	beq.n	8008dea <HAL_UART_IRQHandler+0x3e2>
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	4a75      	ldr	r2, [pc, #468]	@ (8008fa0 <HAL_UART_IRQHandler+0x598>)
 8008dca:	4293      	cmp	r3, r2
 8008dcc:	d00d      	beq.n	8008dea <HAL_UART_IRQHandler+0x3e2>
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	4a73      	ldr	r2, [pc, #460]	@ (8008fa4 <HAL_UART_IRQHandler+0x59c>)
 8008dd8:	4293      	cmp	r3, r2
 8008dda:	d006      	beq.n	8008dea <HAL_UART_IRQHandler+0x3e2>
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	4a70      	ldr	r2, [pc, #448]	@ (8008fa8 <HAL_UART_IRQHandler+0x5a0>)
 8008de6:	4293      	cmp	r3, r2
 8008de8:	d106      	bne.n	8008df8 <HAL_UART_IRQHandler+0x3f0>
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	685b      	ldr	r3, [r3, #4]
 8008df4:	b29b      	uxth	r3, r3
 8008df6:	e005      	b.n	8008e04 <HAL_UART_IRQHandler+0x3fc>
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	685b      	ldr	r3, [r3, #4]
 8008e02:	b29b      	uxth	r3, r3
 8008e04:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008e08:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	f000 81ab 	beq.w	8009168 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008e18:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008e1c:	429a      	cmp	r2, r3
 8008e1e:	f080 81a3 	bcs.w	8009168 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008e28:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e32:	69db      	ldr	r3, [r3, #28]
 8008e34:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008e38:	f000 8087 	beq.w	8008f4a <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e44:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008e48:	e853 3f00 	ldrex	r3, [r3]
 8008e4c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008e50:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008e54:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008e58:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	461a      	mov	r2, r3
 8008e62:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008e66:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008e6a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e6e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008e72:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008e76:	e841 2300 	strex	r3, r2, [r1]
 8008e7a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008e7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d1da      	bne.n	8008e3c <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	3308      	adds	r3, #8
 8008e8c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e8e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008e90:	e853 3f00 	ldrex	r3, [r3]
 8008e94:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008e96:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008e98:	f023 0301 	bic.w	r3, r3, #1
 8008e9c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	3308      	adds	r3, #8
 8008ea6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008eaa:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008eae:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eb0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008eb2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008eb6:	e841 2300 	strex	r3, r2, [r1]
 8008eba:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008ebc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d1e1      	bne.n	8008e86 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	3308      	adds	r3, #8
 8008ec8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008ecc:	e853 3f00 	ldrex	r3, [r3]
 8008ed0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008ed2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008ed4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008ed8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	3308      	adds	r3, #8
 8008ee2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008ee6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008ee8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eea:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008eec:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008eee:	e841 2300 	strex	r3, r2, [r1]
 8008ef2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008ef4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d1e3      	bne.n	8008ec2 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	2220      	movs	r2, #32
 8008efe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	2200      	movs	r2, #0
 8008f06:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f0e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008f10:	e853 3f00 	ldrex	r3, [r3]
 8008f14:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008f16:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008f18:	f023 0310 	bic.w	r3, r3, #16
 8008f1c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	461a      	mov	r2, r3
 8008f26:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008f2a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008f2c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f2e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008f30:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008f32:	e841 2300 	strex	r3, r2, [r1]
 8008f36:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008f38:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d1e4      	bne.n	8008f08 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008f44:	4618      	mov	r0, r3
 8008f46:	f7fa f805 	bl	8002f54 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	2202      	movs	r2, #2
 8008f4e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008f5c:	b29b      	uxth	r3, r3
 8008f5e:	1ad3      	subs	r3, r2, r3
 8008f60:	b29b      	uxth	r3, r3
 8008f62:	4619      	mov	r1, r3
 8008f64:	6878      	ldr	r0, [r7, #4]
 8008f66:	f000 f91d 	bl	80091a4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008f6a:	e0fd      	b.n	8009168 <HAL_UART_IRQHandler+0x760>
 8008f6c:	40020010 	.word	0x40020010
 8008f70:	40020028 	.word	0x40020028
 8008f74:	40020040 	.word	0x40020040
 8008f78:	40020058 	.word	0x40020058
 8008f7c:	40020070 	.word	0x40020070
 8008f80:	40020088 	.word	0x40020088
 8008f84:	400200a0 	.word	0x400200a0
 8008f88:	400200b8 	.word	0x400200b8
 8008f8c:	40020410 	.word	0x40020410
 8008f90:	40020428 	.word	0x40020428
 8008f94:	40020440 	.word	0x40020440
 8008f98:	40020458 	.word	0x40020458
 8008f9c:	40020470 	.word	0x40020470
 8008fa0:	40020488 	.word	0x40020488
 8008fa4:	400204a0 	.word	0x400204a0
 8008fa8:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008fb8:	b29b      	uxth	r3, r3
 8008fba:	1ad3      	subs	r3, r2, r3
 8008fbc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008fc6:	b29b      	uxth	r3, r3
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	f000 80cf 	beq.w	800916c <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8008fce:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	f000 80ca 	beq.w	800916c <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fe0:	e853 3f00 	ldrex	r3, [r3]
 8008fe4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008fe6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008fe8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008fec:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	461a      	mov	r2, r3
 8008ff6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008ffa:	647b      	str	r3, [r7, #68]	@ 0x44
 8008ffc:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ffe:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009000:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009002:	e841 2300 	strex	r3, r2, [r1]
 8009006:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009008:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800900a:	2b00      	cmp	r3, #0
 800900c:	d1e4      	bne.n	8008fd8 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	3308      	adds	r3, #8
 8009014:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009018:	e853 3f00 	ldrex	r3, [r3]
 800901c:	623b      	str	r3, [r7, #32]
   return(result);
 800901e:	6a3a      	ldr	r2, [r7, #32]
 8009020:	4b55      	ldr	r3, [pc, #340]	@ (8009178 <HAL_UART_IRQHandler+0x770>)
 8009022:	4013      	ands	r3, r2
 8009024:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	3308      	adds	r3, #8
 800902e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009032:	633a      	str	r2, [r7, #48]	@ 0x30
 8009034:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009036:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009038:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800903a:	e841 2300 	strex	r3, r2, [r1]
 800903e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009040:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009042:	2b00      	cmp	r3, #0
 8009044:	d1e3      	bne.n	800900e <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	2220      	movs	r2, #32
 800904a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	2200      	movs	r2, #0
 8009052:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	2200      	movs	r2, #0
 8009058:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009060:	693b      	ldr	r3, [r7, #16]
 8009062:	e853 3f00 	ldrex	r3, [r3]
 8009066:	60fb      	str	r3, [r7, #12]
   return(result);
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	f023 0310 	bic.w	r3, r3, #16
 800906e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	461a      	mov	r2, r3
 8009078:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800907c:	61fb      	str	r3, [r7, #28]
 800907e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009080:	69b9      	ldr	r1, [r7, #24]
 8009082:	69fa      	ldr	r2, [r7, #28]
 8009084:	e841 2300 	strex	r3, r2, [r1]
 8009088:	617b      	str	r3, [r7, #20]
   return(result);
 800908a:	697b      	ldr	r3, [r7, #20]
 800908c:	2b00      	cmp	r3, #0
 800908e:	d1e4      	bne.n	800905a <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	2202      	movs	r2, #2
 8009094:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009096:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800909a:	4619      	mov	r1, r3
 800909c:	6878      	ldr	r0, [r7, #4]
 800909e:	f000 f881 	bl	80091a4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80090a2:	e063      	b.n	800916c <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80090a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80090a8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d00e      	beq.n	80090ce <HAL_UART_IRQHandler+0x6c6>
 80090b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80090b4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d008      	beq.n	80090ce <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80090c4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80090c6:	6878      	ldr	r0, [r7, #4]
 80090c8:	f001 ff84 	bl	800afd4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80090cc:	e051      	b.n	8009172 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80090ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80090d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d014      	beq.n	8009104 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80090da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80090de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d105      	bne.n	80090f2 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80090e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80090ea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d008      	beq.n	8009104 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d03a      	beq.n	8009170 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80090fe:	6878      	ldr	r0, [r7, #4]
 8009100:	4798      	blx	r3
    }
    return;
 8009102:	e035      	b.n	8009170 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009104:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009108:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800910c:	2b00      	cmp	r3, #0
 800910e:	d009      	beq.n	8009124 <HAL_UART_IRQHandler+0x71c>
 8009110:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009114:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009118:	2b00      	cmp	r3, #0
 800911a:	d003      	beq.n	8009124 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800911c:	6878      	ldr	r0, [r7, #4]
 800911e:	f001 fa11 	bl	800a544 <UART_EndTransmit_IT>
    return;
 8009122:	e026      	b.n	8009172 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009124:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009128:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800912c:	2b00      	cmp	r3, #0
 800912e:	d009      	beq.n	8009144 <HAL_UART_IRQHandler+0x73c>
 8009130:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009134:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009138:	2b00      	cmp	r3, #0
 800913a:	d003      	beq.n	8009144 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800913c:	6878      	ldr	r0, [r7, #4]
 800913e:	f001 ff5d 	bl	800affc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009142:	e016      	b.n	8009172 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009144:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009148:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800914c:	2b00      	cmp	r3, #0
 800914e:	d010      	beq.n	8009172 <HAL_UART_IRQHandler+0x76a>
 8009150:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009154:	2b00      	cmp	r3, #0
 8009156:	da0c      	bge.n	8009172 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009158:	6878      	ldr	r0, [r7, #4]
 800915a:	f001 ff45 	bl	800afe8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800915e:	e008      	b.n	8009172 <HAL_UART_IRQHandler+0x76a>
      return;
 8009160:	bf00      	nop
 8009162:	e006      	b.n	8009172 <HAL_UART_IRQHandler+0x76a>
    return;
 8009164:	bf00      	nop
 8009166:	e004      	b.n	8009172 <HAL_UART_IRQHandler+0x76a>
      return;
 8009168:	bf00      	nop
 800916a:	e002      	b.n	8009172 <HAL_UART_IRQHandler+0x76a>
      return;
 800916c:	bf00      	nop
 800916e:	e000      	b.n	8009172 <HAL_UART_IRQHandler+0x76a>
    return;
 8009170:	bf00      	nop
  }
}
 8009172:	37e8      	adds	r7, #232	@ 0xe8
 8009174:	46bd      	mov	sp, r7
 8009176:	bd80      	pop	{r7, pc}
 8009178:	effffffe 	.word	0xeffffffe

0800917c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800917c:	b480      	push	{r7}
 800917e:	b083      	sub	sp, #12
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009184:	bf00      	nop
 8009186:	370c      	adds	r7, #12
 8009188:	46bd      	mov	sp, r7
 800918a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918e:	4770      	bx	lr

08009190 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009190:	b480      	push	{r7}
 8009192:	b083      	sub	sp, #12
 8009194:	af00      	add	r7, sp, #0
 8009196:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009198:	bf00      	nop
 800919a:	370c      	adds	r7, #12
 800919c:	46bd      	mov	sp, r7
 800919e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a2:	4770      	bx	lr

080091a4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80091a4:	b480      	push	{r7}
 80091a6:	b083      	sub	sp, #12
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	6078      	str	r0, [r7, #4]
 80091ac:	460b      	mov	r3, r1
 80091ae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80091b0:	bf00      	nop
 80091b2:	370c      	adds	r7, #12
 80091b4:	46bd      	mov	sp, r7
 80091b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ba:	4770      	bx	lr

080091bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80091bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80091c0:	b092      	sub	sp, #72	@ 0x48
 80091c2:	af00      	add	r7, sp, #0
 80091c4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80091c6:	2300      	movs	r3, #0
 80091c8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80091cc:	697b      	ldr	r3, [r7, #20]
 80091ce:	689a      	ldr	r2, [r3, #8]
 80091d0:	697b      	ldr	r3, [r7, #20]
 80091d2:	691b      	ldr	r3, [r3, #16]
 80091d4:	431a      	orrs	r2, r3
 80091d6:	697b      	ldr	r3, [r7, #20]
 80091d8:	695b      	ldr	r3, [r3, #20]
 80091da:	431a      	orrs	r2, r3
 80091dc:	697b      	ldr	r3, [r7, #20]
 80091de:	69db      	ldr	r3, [r3, #28]
 80091e0:	4313      	orrs	r3, r2
 80091e2:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80091e4:	697b      	ldr	r3, [r7, #20]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	681a      	ldr	r2, [r3, #0]
 80091ea:	4bbe      	ldr	r3, [pc, #760]	@ (80094e4 <UART_SetConfig+0x328>)
 80091ec:	4013      	ands	r3, r2
 80091ee:	697a      	ldr	r2, [r7, #20]
 80091f0:	6812      	ldr	r2, [r2, #0]
 80091f2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80091f4:	430b      	orrs	r3, r1
 80091f6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80091f8:	697b      	ldr	r3, [r7, #20]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	685b      	ldr	r3, [r3, #4]
 80091fe:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009202:	697b      	ldr	r3, [r7, #20]
 8009204:	68da      	ldr	r2, [r3, #12]
 8009206:	697b      	ldr	r3, [r7, #20]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	430a      	orrs	r2, r1
 800920c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800920e:	697b      	ldr	r3, [r7, #20]
 8009210:	699b      	ldr	r3, [r3, #24]
 8009212:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009214:	697b      	ldr	r3, [r7, #20]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	4ab3      	ldr	r2, [pc, #716]	@ (80094e8 <UART_SetConfig+0x32c>)
 800921a:	4293      	cmp	r3, r2
 800921c:	d004      	beq.n	8009228 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800921e:	697b      	ldr	r3, [r7, #20]
 8009220:	6a1b      	ldr	r3, [r3, #32]
 8009222:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009224:	4313      	orrs	r3, r2
 8009226:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009228:	697b      	ldr	r3, [r7, #20]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	689a      	ldr	r2, [r3, #8]
 800922e:	4baf      	ldr	r3, [pc, #700]	@ (80094ec <UART_SetConfig+0x330>)
 8009230:	4013      	ands	r3, r2
 8009232:	697a      	ldr	r2, [r7, #20]
 8009234:	6812      	ldr	r2, [r2, #0]
 8009236:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009238:	430b      	orrs	r3, r1
 800923a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800923c:	697b      	ldr	r3, [r7, #20]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009242:	f023 010f 	bic.w	r1, r3, #15
 8009246:	697b      	ldr	r3, [r7, #20]
 8009248:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800924a:	697b      	ldr	r3, [r7, #20]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	430a      	orrs	r2, r1
 8009250:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009252:	697b      	ldr	r3, [r7, #20]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	4aa6      	ldr	r2, [pc, #664]	@ (80094f0 <UART_SetConfig+0x334>)
 8009258:	4293      	cmp	r3, r2
 800925a:	d177      	bne.n	800934c <UART_SetConfig+0x190>
 800925c:	4ba5      	ldr	r3, [pc, #660]	@ (80094f4 <UART_SetConfig+0x338>)
 800925e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009260:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009264:	2b28      	cmp	r3, #40	@ 0x28
 8009266:	d86d      	bhi.n	8009344 <UART_SetConfig+0x188>
 8009268:	a201      	add	r2, pc, #4	@ (adr r2, 8009270 <UART_SetConfig+0xb4>)
 800926a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800926e:	bf00      	nop
 8009270:	08009315 	.word	0x08009315
 8009274:	08009345 	.word	0x08009345
 8009278:	08009345 	.word	0x08009345
 800927c:	08009345 	.word	0x08009345
 8009280:	08009345 	.word	0x08009345
 8009284:	08009345 	.word	0x08009345
 8009288:	08009345 	.word	0x08009345
 800928c:	08009345 	.word	0x08009345
 8009290:	0800931d 	.word	0x0800931d
 8009294:	08009345 	.word	0x08009345
 8009298:	08009345 	.word	0x08009345
 800929c:	08009345 	.word	0x08009345
 80092a0:	08009345 	.word	0x08009345
 80092a4:	08009345 	.word	0x08009345
 80092a8:	08009345 	.word	0x08009345
 80092ac:	08009345 	.word	0x08009345
 80092b0:	08009325 	.word	0x08009325
 80092b4:	08009345 	.word	0x08009345
 80092b8:	08009345 	.word	0x08009345
 80092bc:	08009345 	.word	0x08009345
 80092c0:	08009345 	.word	0x08009345
 80092c4:	08009345 	.word	0x08009345
 80092c8:	08009345 	.word	0x08009345
 80092cc:	08009345 	.word	0x08009345
 80092d0:	0800932d 	.word	0x0800932d
 80092d4:	08009345 	.word	0x08009345
 80092d8:	08009345 	.word	0x08009345
 80092dc:	08009345 	.word	0x08009345
 80092e0:	08009345 	.word	0x08009345
 80092e4:	08009345 	.word	0x08009345
 80092e8:	08009345 	.word	0x08009345
 80092ec:	08009345 	.word	0x08009345
 80092f0:	08009335 	.word	0x08009335
 80092f4:	08009345 	.word	0x08009345
 80092f8:	08009345 	.word	0x08009345
 80092fc:	08009345 	.word	0x08009345
 8009300:	08009345 	.word	0x08009345
 8009304:	08009345 	.word	0x08009345
 8009308:	08009345 	.word	0x08009345
 800930c:	08009345 	.word	0x08009345
 8009310:	0800933d 	.word	0x0800933d
 8009314:	2301      	movs	r3, #1
 8009316:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800931a:	e326      	b.n	800996a <UART_SetConfig+0x7ae>
 800931c:	2304      	movs	r3, #4
 800931e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009322:	e322      	b.n	800996a <UART_SetConfig+0x7ae>
 8009324:	2308      	movs	r3, #8
 8009326:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800932a:	e31e      	b.n	800996a <UART_SetConfig+0x7ae>
 800932c:	2310      	movs	r3, #16
 800932e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009332:	e31a      	b.n	800996a <UART_SetConfig+0x7ae>
 8009334:	2320      	movs	r3, #32
 8009336:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800933a:	e316      	b.n	800996a <UART_SetConfig+0x7ae>
 800933c:	2340      	movs	r3, #64	@ 0x40
 800933e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009342:	e312      	b.n	800996a <UART_SetConfig+0x7ae>
 8009344:	2380      	movs	r3, #128	@ 0x80
 8009346:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800934a:	e30e      	b.n	800996a <UART_SetConfig+0x7ae>
 800934c:	697b      	ldr	r3, [r7, #20]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	4a69      	ldr	r2, [pc, #420]	@ (80094f8 <UART_SetConfig+0x33c>)
 8009352:	4293      	cmp	r3, r2
 8009354:	d130      	bne.n	80093b8 <UART_SetConfig+0x1fc>
 8009356:	4b67      	ldr	r3, [pc, #412]	@ (80094f4 <UART_SetConfig+0x338>)
 8009358:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800935a:	f003 0307 	and.w	r3, r3, #7
 800935e:	2b05      	cmp	r3, #5
 8009360:	d826      	bhi.n	80093b0 <UART_SetConfig+0x1f4>
 8009362:	a201      	add	r2, pc, #4	@ (adr r2, 8009368 <UART_SetConfig+0x1ac>)
 8009364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009368:	08009381 	.word	0x08009381
 800936c:	08009389 	.word	0x08009389
 8009370:	08009391 	.word	0x08009391
 8009374:	08009399 	.word	0x08009399
 8009378:	080093a1 	.word	0x080093a1
 800937c:	080093a9 	.word	0x080093a9
 8009380:	2300      	movs	r3, #0
 8009382:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009386:	e2f0      	b.n	800996a <UART_SetConfig+0x7ae>
 8009388:	2304      	movs	r3, #4
 800938a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800938e:	e2ec      	b.n	800996a <UART_SetConfig+0x7ae>
 8009390:	2308      	movs	r3, #8
 8009392:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009396:	e2e8      	b.n	800996a <UART_SetConfig+0x7ae>
 8009398:	2310      	movs	r3, #16
 800939a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800939e:	e2e4      	b.n	800996a <UART_SetConfig+0x7ae>
 80093a0:	2320      	movs	r3, #32
 80093a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093a6:	e2e0      	b.n	800996a <UART_SetConfig+0x7ae>
 80093a8:	2340      	movs	r3, #64	@ 0x40
 80093aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093ae:	e2dc      	b.n	800996a <UART_SetConfig+0x7ae>
 80093b0:	2380      	movs	r3, #128	@ 0x80
 80093b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093b6:	e2d8      	b.n	800996a <UART_SetConfig+0x7ae>
 80093b8:	697b      	ldr	r3, [r7, #20]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	4a4f      	ldr	r2, [pc, #316]	@ (80094fc <UART_SetConfig+0x340>)
 80093be:	4293      	cmp	r3, r2
 80093c0:	d130      	bne.n	8009424 <UART_SetConfig+0x268>
 80093c2:	4b4c      	ldr	r3, [pc, #304]	@ (80094f4 <UART_SetConfig+0x338>)
 80093c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80093c6:	f003 0307 	and.w	r3, r3, #7
 80093ca:	2b05      	cmp	r3, #5
 80093cc:	d826      	bhi.n	800941c <UART_SetConfig+0x260>
 80093ce:	a201      	add	r2, pc, #4	@ (adr r2, 80093d4 <UART_SetConfig+0x218>)
 80093d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093d4:	080093ed 	.word	0x080093ed
 80093d8:	080093f5 	.word	0x080093f5
 80093dc:	080093fd 	.word	0x080093fd
 80093e0:	08009405 	.word	0x08009405
 80093e4:	0800940d 	.word	0x0800940d
 80093e8:	08009415 	.word	0x08009415
 80093ec:	2300      	movs	r3, #0
 80093ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093f2:	e2ba      	b.n	800996a <UART_SetConfig+0x7ae>
 80093f4:	2304      	movs	r3, #4
 80093f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093fa:	e2b6      	b.n	800996a <UART_SetConfig+0x7ae>
 80093fc:	2308      	movs	r3, #8
 80093fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009402:	e2b2      	b.n	800996a <UART_SetConfig+0x7ae>
 8009404:	2310      	movs	r3, #16
 8009406:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800940a:	e2ae      	b.n	800996a <UART_SetConfig+0x7ae>
 800940c:	2320      	movs	r3, #32
 800940e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009412:	e2aa      	b.n	800996a <UART_SetConfig+0x7ae>
 8009414:	2340      	movs	r3, #64	@ 0x40
 8009416:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800941a:	e2a6      	b.n	800996a <UART_SetConfig+0x7ae>
 800941c:	2380      	movs	r3, #128	@ 0x80
 800941e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009422:	e2a2      	b.n	800996a <UART_SetConfig+0x7ae>
 8009424:	697b      	ldr	r3, [r7, #20]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	4a35      	ldr	r2, [pc, #212]	@ (8009500 <UART_SetConfig+0x344>)
 800942a:	4293      	cmp	r3, r2
 800942c:	d130      	bne.n	8009490 <UART_SetConfig+0x2d4>
 800942e:	4b31      	ldr	r3, [pc, #196]	@ (80094f4 <UART_SetConfig+0x338>)
 8009430:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009432:	f003 0307 	and.w	r3, r3, #7
 8009436:	2b05      	cmp	r3, #5
 8009438:	d826      	bhi.n	8009488 <UART_SetConfig+0x2cc>
 800943a:	a201      	add	r2, pc, #4	@ (adr r2, 8009440 <UART_SetConfig+0x284>)
 800943c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009440:	08009459 	.word	0x08009459
 8009444:	08009461 	.word	0x08009461
 8009448:	08009469 	.word	0x08009469
 800944c:	08009471 	.word	0x08009471
 8009450:	08009479 	.word	0x08009479
 8009454:	08009481 	.word	0x08009481
 8009458:	2300      	movs	r3, #0
 800945a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800945e:	e284      	b.n	800996a <UART_SetConfig+0x7ae>
 8009460:	2304      	movs	r3, #4
 8009462:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009466:	e280      	b.n	800996a <UART_SetConfig+0x7ae>
 8009468:	2308      	movs	r3, #8
 800946a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800946e:	e27c      	b.n	800996a <UART_SetConfig+0x7ae>
 8009470:	2310      	movs	r3, #16
 8009472:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009476:	e278      	b.n	800996a <UART_SetConfig+0x7ae>
 8009478:	2320      	movs	r3, #32
 800947a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800947e:	e274      	b.n	800996a <UART_SetConfig+0x7ae>
 8009480:	2340      	movs	r3, #64	@ 0x40
 8009482:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009486:	e270      	b.n	800996a <UART_SetConfig+0x7ae>
 8009488:	2380      	movs	r3, #128	@ 0x80
 800948a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800948e:	e26c      	b.n	800996a <UART_SetConfig+0x7ae>
 8009490:	697b      	ldr	r3, [r7, #20]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	4a1b      	ldr	r2, [pc, #108]	@ (8009504 <UART_SetConfig+0x348>)
 8009496:	4293      	cmp	r3, r2
 8009498:	d142      	bne.n	8009520 <UART_SetConfig+0x364>
 800949a:	4b16      	ldr	r3, [pc, #88]	@ (80094f4 <UART_SetConfig+0x338>)
 800949c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800949e:	f003 0307 	and.w	r3, r3, #7
 80094a2:	2b05      	cmp	r3, #5
 80094a4:	d838      	bhi.n	8009518 <UART_SetConfig+0x35c>
 80094a6:	a201      	add	r2, pc, #4	@ (adr r2, 80094ac <UART_SetConfig+0x2f0>)
 80094a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094ac:	080094c5 	.word	0x080094c5
 80094b0:	080094cd 	.word	0x080094cd
 80094b4:	080094d5 	.word	0x080094d5
 80094b8:	080094dd 	.word	0x080094dd
 80094bc:	08009509 	.word	0x08009509
 80094c0:	08009511 	.word	0x08009511
 80094c4:	2300      	movs	r3, #0
 80094c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094ca:	e24e      	b.n	800996a <UART_SetConfig+0x7ae>
 80094cc:	2304      	movs	r3, #4
 80094ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094d2:	e24a      	b.n	800996a <UART_SetConfig+0x7ae>
 80094d4:	2308      	movs	r3, #8
 80094d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094da:	e246      	b.n	800996a <UART_SetConfig+0x7ae>
 80094dc:	2310      	movs	r3, #16
 80094de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094e2:	e242      	b.n	800996a <UART_SetConfig+0x7ae>
 80094e4:	cfff69f3 	.word	0xcfff69f3
 80094e8:	58000c00 	.word	0x58000c00
 80094ec:	11fff4ff 	.word	0x11fff4ff
 80094f0:	40011000 	.word	0x40011000
 80094f4:	58024400 	.word	0x58024400
 80094f8:	40004400 	.word	0x40004400
 80094fc:	40004800 	.word	0x40004800
 8009500:	40004c00 	.word	0x40004c00
 8009504:	40005000 	.word	0x40005000
 8009508:	2320      	movs	r3, #32
 800950a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800950e:	e22c      	b.n	800996a <UART_SetConfig+0x7ae>
 8009510:	2340      	movs	r3, #64	@ 0x40
 8009512:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009516:	e228      	b.n	800996a <UART_SetConfig+0x7ae>
 8009518:	2380      	movs	r3, #128	@ 0x80
 800951a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800951e:	e224      	b.n	800996a <UART_SetConfig+0x7ae>
 8009520:	697b      	ldr	r3, [r7, #20]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	4ab1      	ldr	r2, [pc, #708]	@ (80097ec <UART_SetConfig+0x630>)
 8009526:	4293      	cmp	r3, r2
 8009528:	d176      	bne.n	8009618 <UART_SetConfig+0x45c>
 800952a:	4bb1      	ldr	r3, [pc, #708]	@ (80097f0 <UART_SetConfig+0x634>)
 800952c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800952e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009532:	2b28      	cmp	r3, #40	@ 0x28
 8009534:	d86c      	bhi.n	8009610 <UART_SetConfig+0x454>
 8009536:	a201      	add	r2, pc, #4	@ (adr r2, 800953c <UART_SetConfig+0x380>)
 8009538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800953c:	080095e1 	.word	0x080095e1
 8009540:	08009611 	.word	0x08009611
 8009544:	08009611 	.word	0x08009611
 8009548:	08009611 	.word	0x08009611
 800954c:	08009611 	.word	0x08009611
 8009550:	08009611 	.word	0x08009611
 8009554:	08009611 	.word	0x08009611
 8009558:	08009611 	.word	0x08009611
 800955c:	080095e9 	.word	0x080095e9
 8009560:	08009611 	.word	0x08009611
 8009564:	08009611 	.word	0x08009611
 8009568:	08009611 	.word	0x08009611
 800956c:	08009611 	.word	0x08009611
 8009570:	08009611 	.word	0x08009611
 8009574:	08009611 	.word	0x08009611
 8009578:	08009611 	.word	0x08009611
 800957c:	080095f1 	.word	0x080095f1
 8009580:	08009611 	.word	0x08009611
 8009584:	08009611 	.word	0x08009611
 8009588:	08009611 	.word	0x08009611
 800958c:	08009611 	.word	0x08009611
 8009590:	08009611 	.word	0x08009611
 8009594:	08009611 	.word	0x08009611
 8009598:	08009611 	.word	0x08009611
 800959c:	080095f9 	.word	0x080095f9
 80095a0:	08009611 	.word	0x08009611
 80095a4:	08009611 	.word	0x08009611
 80095a8:	08009611 	.word	0x08009611
 80095ac:	08009611 	.word	0x08009611
 80095b0:	08009611 	.word	0x08009611
 80095b4:	08009611 	.word	0x08009611
 80095b8:	08009611 	.word	0x08009611
 80095bc:	08009601 	.word	0x08009601
 80095c0:	08009611 	.word	0x08009611
 80095c4:	08009611 	.word	0x08009611
 80095c8:	08009611 	.word	0x08009611
 80095cc:	08009611 	.word	0x08009611
 80095d0:	08009611 	.word	0x08009611
 80095d4:	08009611 	.word	0x08009611
 80095d8:	08009611 	.word	0x08009611
 80095dc:	08009609 	.word	0x08009609
 80095e0:	2301      	movs	r3, #1
 80095e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095e6:	e1c0      	b.n	800996a <UART_SetConfig+0x7ae>
 80095e8:	2304      	movs	r3, #4
 80095ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095ee:	e1bc      	b.n	800996a <UART_SetConfig+0x7ae>
 80095f0:	2308      	movs	r3, #8
 80095f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095f6:	e1b8      	b.n	800996a <UART_SetConfig+0x7ae>
 80095f8:	2310      	movs	r3, #16
 80095fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095fe:	e1b4      	b.n	800996a <UART_SetConfig+0x7ae>
 8009600:	2320      	movs	r3, #32
 8009602:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009606:	e1b0      	b.n	800996a <UART_SetConfig+0x7ae>
 8009608:	2340      	movs	r3, #64	@ 0x40
 800960a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800960e:	e1ac      	b.n	800996a <UART_SetConfig+0x7ae>
 8009610:	2380      	movs	r3, #128	@ 0x80
 8009612:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009616:	e1a8      	b.n	800996a <UART_SetConfig+0x7ae>
 8009618:	697b      	ldr	r3, [r7, #20]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	4a75      	ldr	r2, [pc, #468]	@ (80097f4 <UART_SetConfig+0x638>)
 800961e:	4293      	cmp	r3, r2
 8009620:	d130      	bne.n	8009684 <UART_SetConfig+0x4c8>
 8009622:	4b73      	ldr	r3, [pc, #460]	@ (80097f0 <UART_SetConfig+0x634>)
 8009624:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009626:	f003 0307 	and.w	r3, r3, #7
 800962a:	2b05      	cmp	r3, #5
 800962c:	d826      	bhi.n	800967c <UART_SetConfig+0x4c0>
 800962e:	a201      	add	r2, pc, #4	@ (adr r2, 8009634 <UART_SetConfig+0x478>)
 8009630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009634:	0800964d 	.word	0x0800964d
 8009638:	08009655 	.word	0x08009655
 800963c:	0800965d 	.word	0x0800965d
 8009640:	08009665 	.word	0x08009665
 8009644:	0800966d 	.word	0x0800966d
 8009648:	08009675 	.word	0x08009675
 800964c:	2300      	movs	r3, #0
 800964e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009652:	e18a      	b.n	800996a <UART_SetConfig+0x7ae>
 8009654:	2304      	movs	r3, #4
 8009656:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800965a:	e186      	b.n	800996a <UART_SetConfig+0x7ae>
 800965c:	2308      	movs	r3, #8
 800965e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009662:	e182      	b.n	800996a <UART_SetConfig+0x7ae>
 8009664:	2310      	movs	r3, #16
 8009666:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800966a:	e17e      	b.n	800996a <UART_SetConfig+0x7ae>
 800966c:	2320      	movs	r3, #32
 800966e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009672:	e17a      	b.n	800996a <UART_SetConfig+0x7ae>
 8009674:	2340      	movs	r3, #64	@ 0x40
 8009676:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800967a:	e176      	b.n	800996a <UART_SetConfig+0x7ae>
 800967c:	2380      	movs	r3, #128	@ 0x80
 800967e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009682:	e172      	b.n	800996a <UART_SetConfig+0x7ae>
 8009684:	697b      	ldr	r3, [r7, #20]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	4a5b      	ldr	r2, [pc, #364]	@ (80097f8 <UART_SetConfig+0x63c>)
 800968a:	4293      	cmp	r3, r2
 800968c:	d130      	bne.n	80096f0 <UART_SetConfig+0x534>
 800968e:	4b58      	ldr	r3, [pc, #352]	@ (80097f0 <UART_SetConfig+0x634>)
 8009690:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009692:	f003 0307 	and.w	r3, r3, #7
 8009696:	2b05      	cmp	r3, #5
 8009698:	d826      	bhi.n	80096e8 <UART_SetConfig+0x52c>
 800969a:	a201      	add	r2, pc, #4	@ (adr r2, 80096a0 <UART_SetConfig+0x4e4>)
 800969c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096a0:	080096b9 	.word	0x080096b9
 80096a4:	080096c1 	.word	0x080096c1
 80096a8:	080096c9 	.word	0x080096c9
 80096ac:	080096d1 	.word	0x080096d1
 80096b0:	080096d9 	.word	0x080096d9
 80096b4:	080096e1 	.word	0x080096e1
 80096b8:	2300      	movs	r3, #0
 80096ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096be:	e154      	b.n	800996a <UART_SetConfig+0x7ae>
 80096c0:	2304      	movs	r3, #4
 80096c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096c6:	e150      	b.n	800996a <UART_SetConfig+0x7ae>
 80096c8:	2308      	movs	r3, #8
 80096ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096ce:	e14c      	b.n	800996a <UART_SetConfig+0x7ae>
 80096d0:	2310      	movs	r3, #16
 80096d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096d6:	e148      	b.n	800996a <UART_SetConfig+0x7ae>
 80096d8:	2320      	movs	r3, #32
 80096da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096de:	e144      	b.n	800996a <UART_SetConfig+0x7ae>
 80096e0:	2340      	movs	r3, #64	@ 0x40
 80096e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096e6:	e140      	b.n	800996a <UART_SetConfig+0x7ae>
 80096e8:	2380      	movs	r3, #128	@ 0x80
 80096ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096ee:	e13c      	b.n	800996a <UART_SetConfig+0x7ae>
 80096f0:	697b      	ldr	r3, [r7, #20]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	4a41      	ldr	r2, [pc, #260]	@ (80097fc <UART_SetConfig+0x640>)
 80096f6:	4293      	cmp	r3, r2
 80096f8:	f040 8082 	bne.w	8009800 <UART_SetConfig+0x644>
 80096fc:	4b3c      	ldr	r3, [pc, #240]	@ (80097f0 <UART_SetConfig+0x634>)
 80096fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009700:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009704:	2b28      	cmp	r3, #40	@ 0x28
 8009706:	d86d      	bhi.n	80097e4 <UART_SetConfig+0x628>
 8009708:	a201      	add	r2, pc, #4	@ (adr r2, 8009710 <UART_SetConfig+0x554>)
 800970a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800970e:	bf00      	nop
 8009710:	080097b5 	.word	0x080097b5
 8009714:	080097e5 	.word	0x080097e5
 8009718:	080097e5 	.word	0x080097e5
 800971c:	080097e5 	.word	0x080097e5
 8009720:	080097e5 	.word	0x080097e5
 8009724:	080097e5 	.word	0x080097e5
 8009728:	080097e5 	.word	0x080097e5
 800972c:	080097e5 	.word	0x080097e5
 8009730:	080097bd 	.word	0x080097bd
 8009734:	080097e5 	.word	0x080097e5
 8009738:	080097e5 	.word	0x080097e5
 800973c:	080097e5 	.word	0x080097e5
 8009740:	080097e5 	.word	0x080097e5
 8009744:	080097e5 	.word	0x080097e5
 8009748:	080097e5 	.word	0x080097e5
 800974c:	080097e5 	.word	0x080097e5
 8009750:	080097c5 	.word	0x080097c5
 8009754:	080097e5 	.word	0x080097e5
 8009758:	080097e5 	.word	0x080097e5
 800975c:	080097e5 	.word	0x080097e5
 8009760:	080097e5 	.word	0x080097e5
 8009764:	080097e5 	.word	0x080097e5
 8009768:	080097e5 	.word	0x080097e5
 800976c:	080097e5 	.word	0x080097e5
 8009770:	080097cd 	.word	0x080097cd
 8009774:	080097e5 	.word	0x080097e5
 8009778:	080097e5 	.word	0x080097e5
 800977c:	080097e5 	.word	0x080097e5
 8009780:	080097e5 	.word	0x080097e5
 8009784:	080097e5 	.word	0x080097e5
 8009788:	080097e5 	.word	0x080097e5
 800978c:	080097e5 	.word	0x080097e5
 8009790:	080097d5 	.word	0x080097d5
 8009794:	080097e5 	.word	0x080097e5
 8009798:	080097e5 	.word	0x080097e5
 800979c:	080097e5 	.word	0x080097e5
 80097a0:	080097e5 	.word	0x080097e5
 80097a4:	080097e5 	.word	0x080097e5
 80097a8:	080097e5 	.word	0x080097e5
 80097ac:	080097e5 	.word	0x080097e5
 80097b0:	080097dd 	.word	0x080097dd
 80097b4:	2301      	movs	r3, #1
 80097b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097ba:	e0d6      	b.n	800996a <UART_SetConfig+0x7ae>
 80097bc:	2304      	movs	r3, #4
 80097be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097c2:	e0d2      	b.n	800996a <UART_SetConfig+0x7ae>
 80097c4:	2308      	movs	r3, #8
 80097c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097ca:	e0ce      	b.n	800996a <UART_SetConfig+0x7ae>
 80097cc:	2310      	movs	r3, #16
 80097ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097d2:	e0ca      	b.n	800996a <UART_SetConfig+0x7ae>
 80097d4:	2320      	movs	r3, #32
 80097d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097da:	e0c6      	b.n	800996a <UART_SetConfig+0x7ae>
 80097dc:	2340      	movs	r3, #64	@ 0x40
 80097de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097e2:	e0c2      	b.n	800996a <UART_SetConfig+0x7ae>
 80097e4:	2380      	movs	r3, #128	@ 0x80
 80097e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097ea:	e0be      	b.n	800996a <UART_SetConfig+0x7ae>
 80097ec:	40011400 	.word	0x40011400
 80097f0:	58024400 	.word	0x58024400
 80097f4:	40007800 	.word	0x40007800
 80097f8:	40007c00 	.word	0x40007c00
 80097fc:	40011800 	.word	0x40011800
 8009800:	697b      	ldr	r3, [r7, #20]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	4aad      	ldr	r2, [pc, #692]	@ (8009abc <UART_SetConfig+0x900>)
 8009806:	4293      	cmp	r3, r2
 8009808:	d176      	bne.n	80098f8 <UART_SetConfig+0x73c>
 800980a:	4bad      	ldr	r3, [pc, #692]	@ (8009ac0 <UART_SetConfig+0x904>)
 800980c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800980e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009812:	2b28      	cmp	r3, #40	@ 0x28
 8009814:	d86c      	bhi.n	80098f0 <UART_SetConfig+0x734>
 8009816:	a201      	add	r2, pc, #4	@ (adr r2, 800981c <UART_SetConfig+0x660>)
 8009818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800981c:	080098c1 	.word	0x080098c1
 8009820:	080098f1 	.word	0x080098f1
 8009824:	080098f1 	.word	0x080098f1
 8009828:	080098f1 	.word	0x080098f1
 800982c:	080098f1 	.word	0x080098f1
 8009830:	080098f1 	.word	0x080098f1
 8009834:	080098f1 	.word	0x080098f1
 8009838:	080098f1 	.word	0x080098f1
 800983c:	080098c9 	.word	0x080098c9
 8009840:	080098f1 	.word	0x080098f1
 8009844:	080098f1 	.word	0x080098f1
 8009848:	080098f1 	.word	0x080098f1
 800984c:	080098f1 	.word	0x080098f1
 8009850:	080098f1 	.word	0x080098f1
 8009854:	080098f1 	.word	0x080098f1
 8009858:	080098f1 	.word	0x080098f1
 800985c:	080098d1 	.word	0x080098d1
 8009860:	080098f1 	.word	0x080098f1
 8009864:	080098f1 	.word	0x080098f1
 8009868:	080098f1 	.word	0x080098f1
 800986c:	080098f1 	.word	0x080098f1
 8009870:	080098f1 	.word	0x080098f1
 8009874:	080098f1 	.word	0x080098f1
 8009878:	080098f1 	.word	0x080098f1
 800987c:	080098d9 	.word	0x080098d9
 8009880:	080098f1 	.word	0x080098f1
 8009884:	080098f1 	.word	0x080098f1
 8009888:	080098f1 	.word	0x080098f1
 800988c:	080098f1 	.word	0x080098f1
 8009890:	080098f1 	.word	0x080098f1
 8009894:	080098f1 	.word	0x080098f1
 8009898:	080098f1 	.word	0x080098f1
 800989c:	080098e1 	.word	0x080098e1
 80098a0:	080098f1 	.word	0x080098f1
 80098a4:	080098f1 	.word	0x080098f1
 80098a8:	080098f1 	.word	0x080098f1
 80098ac:	080098f1 	.word	0x080098f1
 80098b0:	080098f1 	.word	0x080098f1
 80098b4:	080098f1 	.word	0x080098f1
 80098b8:	080098f1 	.word	0x080098f1
 80098bc:	080098e9 	.word	0x080098e9
 80098c0:	2301      	movs	r3, #1
 80098c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098c6:	e050      	b.n	800996a <UART_SetConfig+0x7ae>
 80098c8:	2304      	movs	r3, #4
 80098ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098ce:	e04c      	b.n	800996a <UART_SetConfig+0x7ae>
 80098d0:	2308      	movs	r3, #8
 80098d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098d6:	e048      	b.n	800996a <UART_SetConfig+0x7ae>
 80098d8:	2310      	movs	r3, #16
 80098da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098de:	e044      	b.n	800996a <UART_SetConfig+0x7ae>
 80098e0:	2320      	movs	r3, #32
 80098e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098e6:	e040      	b.n	800996a <UART_SetConfig+0x7ae>
 80098e8:	2340      	movs	r3, #64	@ 0x40
 80098ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098ee:	e03c      	b.n	800996a <UART_SetConfig+0x7ae>
 80098f0:	2380      	movs	r3, #128	@ 0x80
 80098f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098f6:	e038      	b.n	800996a <UART_SetConfig+0x7ae>
 80098f8:	697b      	ldr	r3, [r7, #20]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	4a71      	ldr	r2, [pc, #452]	@ (8009ac4 <UART_SetConfig+0x908>)
 80098fe:	4293      	cmp	r3, r2
 8009900:	d130      	bne.n	8009964 <UART_SetConfig+0x7a8>
 8009902:	4b6f      	ldr	r3, [pc, #444]	@ (8009ac0 <UART_SetConfig+0x904>)
 8009904:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009906:	f003 0307 	and.w	r3, r3, #7
 800990a:	2b05      	cmp	r3, #5
 800990c:	d826      	bhi.n	800995c <UART_SetConfig+0x7a0>
 800990e:	a201      	add	r2, pc, #4	@ (adr r2, 8009914 <UART_SetConfig+0x758>)
 8009910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009914:	0800992d 	.word	0x0800992d
 8009918:	08009935 	.word	0x08009935
 800991c:	0800993d 	.word	0x0800993d
 8009920:	08009945 	.word	0x08009945
 8009924:	0800994d 	.word	0x0800994d
 8009928:	08009955 	.word	0x08009955
 800992c:	2302      	movs	r3, #2
 800992e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009932:	e01a      	b.n	800996a <UART_SetConfig+0x7ae>
 8009934:	2304      	movs	r3, #4
 8009936:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800993a:	e016      	b.n	800996a <UART_SetConfig+0x7ae>
 800993c:	2308      	movs	r3, #8
 800993e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009942:	e012      	b.n	800996a <UART_SetConfig+0x7ae>
 8009944:	2310      	movs	r3, #16
 8009946:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800994a:	e00e      	b.n	800996a <UART_SetConfig+0x7ae>
 800994c:	2320      	movs	r3, #32
 800994e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009952:	e00a      	b.n	800996a <UART_SetConfig+0x7ae>
 8009954:	2340      	movs	r3, #64	@ 0x40
 8009956:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800995a:	e006      	b.n	800996a <UART_SetConfig+0x7ae>
 800995c:	2380      	movs	r3, #128	@ 0x80
 800995e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009962:	e002      	b.n	800996a <UART_SetConfig+0x7ae>
 8009964:	2380      	movs	r3, #128	@ 0x80
 8009966:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800996a:	697b      	ldr	r3, [r7, #20]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	4a55      	ldr	r2, [pc, #340]	@ (8009ac4 <UART_SetConfig+0x908>)
 8009970:	4293      	cmp	r3, r2
 8009972:	f040 80f8 	bne.w	8009b66 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009976:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800997a:	2b20      	cmp	r3, #32
 800997c:	dc46      	bgt.n	8009a0c <UART_SetConfig+0x850>
 800997e:	2b02      	cmp	r3, #2
 8009980:	db75      	blt.n	8009a6e <UART_SetConfig+0x8b2>
 8009982:	3b02      	subs	r3, #2
 8009984:	2b1e      	cmp	r3, #30
 8009986:	d872      	bhi.n	8009a6e <UART_SetConfig+0x8b2>
 8009988:	a201      	add	r2, pc, #4	@ (adr r2, 8009990 <UART_SetConfig+0x7d4>)
 800998a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800998e:	bf00      	nop
 8009990:	08009a13 	.word	0x08009a13
 8009994:	08009a6f 	.word	0x08009a6f
 8009998:	08009a1b 	.word	0x08009a1b
 800999c:	08009a6f 	.word	0x08009a6f
 80099a0:	08009a6f 	.word	0x08009a6f
 80099a4:	08009a6f 	.word	0x08009a6f
 80099a8:	08009a2b 	.word	0x08009a2b
 80099ac:	08009a6f 	.word	0x08009a6f
 80099b0:	08009a6f 	.word	0x08009a6f
 80099b4:	08009a6f 	.word	0x08009a6f
 80099b8:	08009a6f 	.word	0x08009a6f
 80099bc:	08009a6f 	.word	0x08009a6f
 80099c0:	08009a6f 	.word	0x08009a6f
 80099c4:	08009a6f 	.word	0x08009a6f
 80099c8:	08009a3b 	.word	0x08009a3b
 80099cc:	08009a6f 	.word	0x08009a6f
 80099d0:	08009a6f 	.word	0x08009a6f
 80099d4:	08009a6f 	.word	0x08009a6f
 80099d8:	08009a6f 	.word	0x08009a6f
 80099dc:	08009a6f 	.word	0x08009a6f
 80099e0:	08009a6f 	.word	0x08009a6f
 80099e4:	08009a6f 	.word	0x08009a6f
 80099e8:	08009a6f 	.word	0x08009a6f
 80099ec:	08009a6f 	.word	0x08009a6f
 80099f0:	08009a6f 	.word	0x08009a6f
 80099f4:	08009a6f 	.word	0x08009a6f
 80099f8:	08009a6f 	.word	0x08009a6f
 80099fc:	08009a6f 	.word	0x08009a6f
 8009a00:	08009a6f 	.word	0x08009a6f
 8009a04:	08009a6f 	.word	0x08009a6f
 8009a08:	08009a61 	.word	0x08009a61
 8009a0c:	2b40      	cmp	r3, #64	@ 0x40
 8009a0e:	d02a      	beq.n	8009a66 <UART_SetConfig+0x8aa>
 8009a10:	e02d      	b.n	8009a6e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009a12:	f7fd fcd5 	bl	80073c0 <HAL_RCCEx_GetD3PCLK1Freq>
 8009a16:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009a18:	e02f      	b.n	8009a7a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009a1a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009a1e:	4618      	mov	r0, r3
 8009a20:	f7fd fce4 	bl	80073ec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009a24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a28:	e027      	b.n	8009a7a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009a2a:	f107 0318 	add.w	r3, r7, #24
 8009a2e:	4618      	mov	r0, r3
 8009a30:	f7fd fe30 	bl	8007694 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009a34:	69fb      	ldr	r3, [r7, #28]
 8009a36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a38:	e01f      	b.n	8009a7a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009a3a:	4b21      	ldr	r3, [pc, #132]	@ (8009ac0 <UART_SetConfig+0x904>)
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	f003 0320 	and.w	r3, r3, #32
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d009      	beq.n	8009a5a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009a46:	4b1e      	ldr	r3, [pc, #120]	@ (8009ac0 <UART_SetConfig+0x904>)
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	08db      	lsrs	r3, r3, #3
 8009a4c:	f003 0303 	and.w	r3, r3, #3
 8009a50:	4a1d      	ldr	r2, [pc, #116]	@ (8009ac8 <UART_SetConfig+0x90c>)
 8009a52:	fa22 f303 	lsr.w	r3, r2, r3
 8009a56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009a58:	e00f      	b.n	8009a7a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8009a5a:	4b1b      	ldr	r3, [pc, #108]	@ (8009ac8 <UART_SetConfig+0x90c>)
 8009a5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a5e:	e00c      	b.n	8009a7a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009a60:	4b1a      	ldr	r3, [pc, #104]	@ (8009acc <UART_SetConfig+0x910>)
 8009a62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a64:	e009      	b.n	8009a7a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009a66:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009a6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a6c:	e005      	b.n	8009a7a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8009a6e:	2300      	movs	r3, #0
 8009a70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009a72:	2301      	movs	r3, #1
 8009a74:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009a78:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009a7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	f000 81ee 	beq.w	8009e5e <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009a82:	697b      	ldr	r3, [r7, #20]
 8009a84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a86:	4a12      	ldr	r2, [pc, #72]	@ (8009ad0 <UART_SetConfig+0x914>)
 8009a88:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009a8c:	461a      	mov	r2, r3
 8009a8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a90:	fbb3 f3f2 	udiv	r3, r3, r2
 8009a94:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009a96:	697b      	ldr	r3, [r7, #20]
 8009a98:	685a      	ldr	r2, [r3, #4]
 8009a9a:	4613      	mov	r3, r2
 8009a9c:	005b      	lsls	r3, r3, #1
 8009a9e:	4413      	add	r3, r2
 8009aa0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009aa2:	429a      	cmp	r2, r3
 8009aa4:	d305      	bcc.n	8009ab2 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009aa6:	697b      	ldr	r3, [r7, #20]
 8009aa8:	685b      	ldr	r3, [r3, #4]
 8009aaa:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009aac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009aae:	429a      	cmp	r2, r3
 8009ab0:	d910      	bls.n	8009ad4 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8009ab2:	2301      	movs	r3, #1
 8009ab4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009ab8:	e1d1      	b.n	8009e5e <UART_SetConfig+0xca2>
 8009aba:	bf00      	nop
 8009abc:	40011c00 	.word	0x40011c00
 8009ac0:	58024400 	.word	0x58024400
 8009ac4:	58000c00 	.word	0x58000c00
 8009ac8:	03d09000 	.word	0x03d09000
 8009acc:	003d0900 	.word	0x003d0900
 8009ad0:	08012e28 	.word	0x08012e28
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009ad4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ad6:	2200      	movs	r2, #0
 8009ad8:	60bb      	str	r3, [r7, #8]
 8009ada:	60fa      	str	r2, [r7, #12]
 8009adc:	697b      	ldr	r3, [r7, #20]
 8009ade:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ae0:	4ac0      	ldr	r2, [pc, #768]	@ (8009de4 <UART_SetConfig+0xc28>)
 8009ae2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009ae6:	b29b      	uxth	r3, r3
 8009ae8:	2200      	movs	r2, #0
 8009aea:	603b      	str	r3, [r7, #0]
 8009aec:	607a      	str	r2, [r7, #4]
 8009aee:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009af2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009af6:	f7f6 fe1f 	bl	8000738 <__aeabi_uldivmod>
 8009afa:	4602      	mov	r2, r0
 8009afc:	460b      	mov	r3, r1
 8009afe:	4610      	mov	r0, r2
 8009b00:	4619      	mov	r1, r3
 8009b02:	f04f 0200 	mov.w	r2, #0
 8009b06:	f04f 0300 	mov.w	r3, #0
 8009b0a:	020b      	lsls	r3, r1, #8
 8009b0c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009b10:	0202      	lsls	r2, r0, #8
 8009b12:	6979      	ldr	r1, [r7, #20]
 8009b14:	6849      	ldr	r1, [r1, #4]
 8009b16:	0849      	lsrs	r1, r1, #1
 8009b18:	2000      	movs	r0, #0
 8009b1a:	460c      	mov	r4, r1
 8009b1c:	4605      	mov	r5, r0
 8009b1e:	eb12 0804 	adds.w	r8, r2, r4
 8009b22:	eb43 0905 	adc.w	r9, r3, r5
 8009b26:	697b      	ldr	r3, [r7, #20]
 8009b28:	685b      	ldr	r3, [r3, #4]
 8009b2a:	2200      	movs	r2, #0
 8009b2c:	469a      	mov	sl, r3
 8009b2e:	4693      	mov	fp, r2
 8009b30:	4652      	mov	r2, sl
 8009b32:	465b      	mov	r3, fp
 8009b34:	4640      	mov	r0, r8
 8009b36:	4649      	mov	r1, r9
 8009b38:	f7f6 fdfe 	bl	8000738 <__aeabi_uldivmod>
 8009b3c:	4602      	mov	r2, r0
 8009b3e:	460b      	mov	r3, r1
 8009b40:	4613      	mov	r3, r2
 8009b42:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009b44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b46:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009b4a:	d308      	bcc.n	8009b5e <UART_SetConfig+0x9a2>
 8009b4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b4e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009b52:	d204      	bcs.n	8009b5e <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8009b54:	697b      	ldr	r3, [r7, #20]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009b5a:	60da      	str	r2, [r3, #12]
 8009b5c:	e17f      	b.n	8009e5e <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8009b5e:	2301      	movs	r3, #1
 8009b60:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009b64:	e17b      	b.n	8009e5e <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009b66:	697b      	ldr	r3, [r7, #20]
 8009b68:	69db      	ldr	r3, [r3, #28]
 8009b6a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009b6e:	f040 80bd 	bne.w	8009cec <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8009b72:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009b76:	2b20      	cmp	r3, #32
 8009b78:	dc48      	bgt.n	8009c0c <UART_SetConfig+0xa50>
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	db7b      	blt.n	8009c76 <UART_SetConfig+0xaba>
 8009b7e:	2b20      	cmp	r3, #32
 8009b80:	d879      	bhi.n	8009c76 <UART_SetConfig+0xaba>
 8009b82:	a201      	add	r2, pc, #4	@ (adr r2, 8009b88 <UART_SetConfig+0x9cc>)
 8009b84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b88:	08009c13 	.word	0x08009c13
 8009b8c:	08009c1b 	.word	0x08009c1b
 8009b90:	08009c77 	.word	0x08009c77
 8009b94:	08009c77 	.word	0x08009c77
 8009b98:	08009c23 	.word	0x08009c23
 8009b9c:	08009c77 	.word	0x08009c77
 8009ba0:	08009c77 	.word	0x08009c77
 8009ba4:	08009c77 	.word	0x08009c77
 8009ba8:	08009c33 	.word	0x08009c33
 8009bac:	08009c77 	.word	0x08009c77
 8009bb0:	08009c77 	.word	0x08009c77
 8009bb4:	08009c77 	.word	0x08009c77
 8009bb8:	08009c77 	.word	0x08009c77
 8009bbc:	08009c77 	.word	0x08009c77
 8009bc0:	08009c77 	.word	0x08009c77
 8009bc4:	08009c77 	.word	0x08009c77
 8009bc8:	08009c43 	.word	0x08009c43
 8009bcc:	08009c77 	.word	0x08009c77
 8009bd0:	08009c77 	.word	0x08009c77
 8009bd4:	08009c77 	.word	0x08009c77
 8009bd8:	08009c77 	.word	0x08009c77
 8009bdc:	08009c77 	.word	0x08009c77
 8009be0:	08009c77 	.word	0x08009c77
 8009be4:	08009c77 	.word	0x08009c77
 8009be8:	08009c77 	.word	0x08009c77
 8009bec:	08009c77 	.word	0x08009c77
 8009bf0:	08009c77 	.word	0x08009c77
 8009bf4:	08009c77 	.word	0x08009c77
 8009bf8:	08009c77 	.word	0x08009c77
 8009bfc:	08009c77 	.word	0x08009c77
 8009c00:	08009c77 	.word	0x08009c77
 8009c04:	08009c77 	.word	0x08009c77
 8009c08:	08009c69 	.word	0x08009c69
 8009c0c:	2b40      	cmp	r3, #64	@ 0x40
 8009c0e:	d02e      	beq.n	8009c6e <UART_SetConfig+0xab2>
 8009c10:	e031      	b.n	8009c76 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009c12:	f7fc fa09 	bl	8006028 <HAL_RCC_GetPCLK1Freq>
 8009c16:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009c18:	e033      	b.n	8009c82 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009c1a:	f7fc fa1b 	bl	8006054 <HAL_RCC_GetPCLK2Freq>
 8009c1e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009c20:	e02f      	b.n	8009c82 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009c22:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009c26:	4618      	mov	r0, r3
 8009c28:	f7fd fbe0 	bl	80073ec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009c2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009c30:	e027      	b.n	8009c82 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009c32:	f107 0318 	add.w	r3, r7, #24
 8009c36:	4618      	mov	r0, r3
 8009c38:	f7fd fd2c 	bl	8007694 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009c3c:	69fb      	ldr	r3, [r7, #28]
 8009c3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009c40:	e01f      	b.n	8009c82 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009c42:	4b69      	ldr	r3, [pc, #420]	@ (8009de8 <UART_SetConfig+0xc2c>)
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	f003 0320 	and.w	r3, r3, #32
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d009      	beq.n	8009c62 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009c4e:	4b66      	ldr	r3, [pc, #408]	@ (8009de8 <UART_SetConfig+0xc2c>)
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	08db      	lsrs	r3, r3, #3
 8009c54:	f003 0303 	and.w	r3, r3, #3
 8009c58:	4a64      	ldr	r2, [pc, #400]	@ (8009dec <UART_SetConfig+0xc30>)
 8009c5a:	fa22 f303 	lsr.w	r3, r2, r3
 8009c5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009c60:	e00f      	b.n	8009c82 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8009c62:	4b62      	ldr	r3, [pc, #392]	@ (8009dec <UART_SetConfig+0xc30>)
 8009c64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009c66:	e00c      	b.n	8009c82 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009c68:	4b61      	ldr	r3, [pc, #388]	@ (8009df0 <UART_SetConfig+0xc34>)
 8009c6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009c6c:	e009      	b.n	8009c82 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009c6e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009c72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009c74:	e005      	b.n	8009c82 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8009c76:	2300      	movs	r3, #0
 8009c78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009c7a:	2301      	movs	r3, #1
 8009c7c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009c80:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009c82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	f000 80ea 	beq.w	8009e5e <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009c8a:	697b      	ldr	r3, [r7, #20]
 8009c8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c8e:	4a55      	ldr	r2, [pc, #340]	@ (8009de4 <UART_SetConfig+0xc28>)
 8009c90:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009c94:	461a      	mov	r2, r3
 8009c96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c98:	fbb3 f3f2 	udiv	r3, r3, r2
 8009c9c:	005a      	lsls	r2, r3, #1
 8009c9e:	697b      	ldr	r3, [r7, #20]
 8009ca0:	685b      	ldr	r3, [r3, #4]
 8009ca2:	085b      	lsrs	r3, r3, #1
 8009ca4:	441a      	add	r2, r3
 8009ca6:	697b      	ldr	r3, [r7, #20]
 8009ca8:	685b      	ldr	r3, [r3, #4]
 8009caa:	fbb2 f3f3 	udiv	r3, r2, r3
 8009cae:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009cb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cb2:	2b0f      	cmp	r3, #15
 8009cb4:	d916      	bls.n	8009ce4 <UART_SetConfig+0xb28>
 8009cb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cb8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009cbc:	d212      	bcs.n	8009ce4 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009cbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cc0:	b29b      	uxth	r3, r3
 8009cc2:	f023 030f 	bic.w	r3, r3, #15
 8009cc6:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009cc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cca:	085b      	lsrs	r3, r3, #1
 8009ccc:	b29b      	uxth	r3, r3
 8009cce:	f003 0307 	and.w	r3, r3, #7
 8009cd2:	b29a      	uxth	r2, r3
 8009cd4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009cd6:	4313      	orrs	r3, r2
 8009cd8:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8009cda:	697b      	ldr	r3, [r7, #20]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8009ce0:	60da      	str	r2, [r3, #12]
 8009ce2:	e0bc      	b.n	8009e5e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8009ce4:	2301      	movs	r3, #1
 8009ce6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009cea:	e0b8      	b.n	8009e5e <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009cec:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009cf0:	2b20      	cmp	r3, #32
 8009cf2:	dc4b      	bgt.n	8009d8c <UART_SetConfig+0xbd0>
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	f2c0 8087 	blt.w	8009e08 <UART_SetConfig+0xc4c>
 8009cfa:	2b20      	cmp	r3, #32
 8009cfc:	f200 8084 	bhi.w	8009e08 <UART_SetConfig+0xc4c>
 8009d00:	a201      	add	r2, pc, #4	@ (adr r2, 8009d08 <UART_SetConfig+0xb4c>)
 8009d02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d06:	bf00      	nop
 8009d08:	08009d93 	.word	0x08009d93
 8009d0c:	08009d9b 	.word	0x08009d9b
 8009d10:	08009e09 	.word	0x08009e09
 8009d14:	08009e09 	.word	0x08009e09
 8009d18:	08009da3 	.word	0x08009da3
 8009d1c:	08009e09 	.word	0x08009e09
 8009d20:	08009e09 	.word	0x08009e09
 8009d24:	08009e09 	.word	0x08009e09
 8009d28:	08009db3 	.word	0x08009db3
 8009d2c:	08009e09 	.word	0x08009e09
 8009d30:	08009e09 	.word	0x08009e09
 8009d34:	08009e09 	.word	0x08009e09
 8009d38:	08009e09 	.word	0x08009e09
 8009d3c:	08009e09 	.word	0x08009e09
 8009d40:	08009e09 	.word	0x08009e09
 8009d44:	08009e09 	.word	0x08009e09
 8009d48:	08009dc3 	.word	0x08009dc3
 8009d4c:	08009e09 	.word	0x08009e09
 8009d50:	08009e09 	.word	0x08009e09
 8009d54:	08009e09 	.word	0x08009e09
 8009d58:	08009e09 	.word	0x08009e09
 8009d5c:	08009e09 	.word	0x08009e09
 8009d60:	08009e09 	.word	0x08009e09
 8009d64:	08009e09 	.word	0x08009e09
 8009d68:	08009e09 	.word	0x08009e09
 8009d6c:	08009e09 	.word	0x08009e09
 8009d70:	08009e09 	.word	0x08009e09
 8009d74:	08009e09 	.word	0x08009e09
 8009d78:	08009e09 	.word	0x08009e09
 8009d7c:	08009e09 	.word	0x08009e09
 8009d80:	08009e09 	.word	0x08009e09
 8009d84:	08009e09 	.word	0x08009e09
 8009d88:	08009dfb 	.word	0x08009dfb
 8009d8c:	2b40      	cmp	r3, #64	@ 0x40
 8009d8e:	d037      	beq.n	8009e00 <UART_SetConfig+0xc44>
 8009d90:	e03a      	b.n	8009e08 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009d92:	f7fc f949 	bl	8006028 <HAL_RCC_GetPCLK1Freq>
 8009d96:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009d98:	e03c      	b.n	8009e14 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009d9a:	f7fc f95b 	bl	8006054 <HAL_RCC_GetPCLK2Freq>
 8009d9e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009da0:	e038      	b.n	8009e14 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009da2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009da6:	4618      	mov	r0, r3
 8009da8:	f7fd fb20 	bl	80073ec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009dac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009dae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009db0:	e030      	b.n	8009e14 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009db2:	f107 0318 	add.w	r3, r7, #24
 8009db6:	4618      	mov	r0, r3
 8009db8:	f7fd fc6c 	bl	8007694 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009dbc:	69fb      	ldr	r3, [r7, #28]
 8009dbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009dc0:	e028      	b.n	8009e14 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009dc2:	4b09      	ldr	r3, [pc, #36]	@ (8009de8 <UART_SetConfig+0xc2c>)
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	f003 0320 	and.w	r3, r3, #32
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d012      	beq.n	8009df4 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009dce:	4b06      	ldr	r3, [pc, #24]	@ (8009de8 <UART_SetConfig+0xc2c>)
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	08db      	lsrs	r3, r3, #3
 8009dd4:	f003 0303 	and.w	r3, r3, #3
 8009dd8:	4a04      	ldr	r2, [pc, #16]	@ (8009dec <UART_SetConfig+0xc30>)
 8009dda:	fa22 f303 	lsr.w	r3, r2, r3
 8009dde:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009de0:	e018      	b.n	8009e14 <UART_SetConfig+0xc58>
 8009de2:	bf00      	nop
 8009de4:	08012e28 	.word	0x08012e28
 8009de8:	58024400 	.word	0x58024400
 8009dec:	03d09000 	.word	0x03d09000
 8009df0:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8009df4:	4b24      	ldr	r3, [pc, #144]	@ (8009e88 <UART_SetConfig+0xccc>)
 8009df6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009df8:	e00c      	b.n	8009e14 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009dfa:	4b24      	ldr	r3, [pc, #144]	@ (8009e8c <UART_SetConfig+0xcd0>)
 8009dfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009dfe:	e009      	b.n	8009e14 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009e00:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009e04:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e06:	e005      	b.n	8009e14 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8009e08:	2300      	movs	r3, #0
 8009e0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009e0c:	2301      	movs	r3, #1
 8009e0e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009e12:	bf00      	nop
    }

    if (pclk != 0U)
 8009e14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d021      	beq.n	8009e5e <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009e1a:	697b      	ldr	r3, [r7, #20]
 8009e1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e1e:	4a1c      	ldr	r2, [pc, #112]	@ (8009e90 <UART_SetConfig+0xcd4>)
 8009e20:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009e24:	461a      	mov	r2, r3
 8009e26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e28:	fbb3 f2f2 	udiv	r2, r3, r2
 8009e2c:	697b      	ldr	r3, [r7, #20]
 8009e2e:	685b      	ldr	r3, [r3, #4]
 8009e30:	085b      	lsrs	r3, r3, #1
 8009e32:	441a      	add	r2, r3
 8009e34:	697b      	ldr	r3, [r7, #20]
 8009e36:	685b      	ldr	r3, [r3, #4]
 8009e38:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e3c:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009e3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e40:	2b0f      	cmp	r3, #15
 8009e42:	d909      	bls.n	8009e58 <UART_SetConfig+0xc9c>
 8009e44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e46:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009e4a:	d205      	bcs.n	8009e58 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009e4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e4e:	b29a      	uxth	r2, r3
 8009e50:	697b      	ldr	r3, [r7, #20]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	60da      	str	r2, [r3, #12]
 8009e56:	e002      	b.n	8009e5e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8009e58:	2301      	movs	r3, #1
 8009e5a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009e5e:	697b      	ldr	r3, [r7, #20]
 8009e60:	2201      	movs	r2, #1
 8009e62:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009e66:	697b      	ldr	r3, [r7, #20]
 8009e68:	2201      	movs	r2, #1
 8009e6a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009e6e:	697b      	ldr	r3, [r7, #20]
 8009e70:	2200      	movs	r2, #0
 8009e72:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009e74:	697b      	ldr	r3, [r7, #20]
 8009e76:	2200      	movs	r2, #0
 8009e78:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009e7a:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8009e7e:	4618      	mov	r0, r3
 8009e80:	3748      	adds	r7, #72	@ 0x48
 8009e82:	46bd      	mov	sp, r7
 8009e84:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009e88:	03d09000 	.word	0x03d09000
 8009e8c:	003d0900 	.word	0x003d0900
 8009e90:	08012e28 	.word	0x08012e28

08009e94 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009e94:	b480      	push	{r7}
 8009e96:	b083      	sub	sp, #12
 8009e98:	af00      	add	r7, sp, #0
 8009e9a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ea0:	f003 0308 	and.w	r3, r3, #8
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d00a      	beq.n	8009ebe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	685b      	ldr	r3, [r3, #4]
 8009eae:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	430a      	orrs	r2, r1
 8009ebc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ec2:	f003 0301 	and.w	r3, r3, #1
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d00a      	beq.n	8009ee0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	685b      	ldr	r3, [r3, #4]
 8009ed0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	430a      	orrs	r2, r1
 8009ede:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ee4:	f003 0302 	and.w	r3, r3, #2
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d00a      	beq.n	8009f02 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	685b      	ldr	r3, [r3, #4]
 8009ef2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	430a      	orrs	r2, r1
 8009f00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f06:	f003 0304 	and.w	r3, r3, #4
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d00a      	beq.n	8009f24 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	685b      	ldr	r3, [r3, #4]
 8009f14:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	430a      	orrs	r2, r1
 8009f22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f28:	f003 0310 	and.w	r3, r3, #16
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d00a      	beq.n	8009f46 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	689b      	ldr	r3, [r3, #8]
 8009f36:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	430a      	orrs	r2, r1
 8009f44:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f4a:	f003 0320 	and.w	r3, r3, #32
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d00a      	beq.n	8009f68 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	689b      	ldr	r3, [r3, #8]
 8009f58:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	430a      	orrs	r2, r1
 8009f66:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d01a      	beq.n	8009faa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	685b      	ldr	r3, [r3, #4]
 8009f7a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	430a      	orrs	r2, r1
 8009f88:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009f8e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009f92:	d10a      	bne.n	8009faa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	685b      	ldr	r3, [r3, #4]
 8009f9a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	430a      	orrs	r2, r1
 8009fa8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d00a      	beq.n	8009fcc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	685b      	ldr	r3, [r3, #4]
 8009fbc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	430a      	orrs	r2, r1
 8009fca:	605a      	str	r2, [r3, #4]
  }
}
 8009fcc:	bf00      	nop
 8009fce:	370c      	adds	r7, #12
 8009fd0:	46bd      	mov	sp, r7
 8009fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd6:	4770      	bx	lr

08009fd8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009fd8:	b580      	push	{r7, lr}
 8009fda:	b098      	sub	sp, #96	@ 0x60
 8009fdc:	af02      	add	r7, sp, #8
 8009fde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	2200      	movs	r2, #0
 8009fe4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009fe8:	f7f8 fdfc 	bl	8002be4 <HAL_GetTick>
 8009fec:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	f003 0308 	and.w	r3, r3, #8
 8009ff8:	2b08      	cmp	r3, #8
 8009ffa:	d12f      	bne.n	800a05c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009ffc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a000:	9300      	str	r3, [sp, #0]
 800a002:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a004:	2200      	movs	r2, #0
 800a006:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a00a:	6878      	ldr	r0, [r7, #4]
 800a00c:	f000 f88e 	bl	800a12c <UART_WaitOnFlagUntilTimeout>
 800a010:	4603      	mov	r3, r0
 800a012:	2b00      	cmp	r3, #0
 800a014:	d022      	beq.n	800a05c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a01c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a01e:	e853 3f00 	ldrex	r3, [r3]
 800a022:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a024:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a026:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a02a:	653b      	str	r3, [r7, #80]	@ 0x50
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	461a      	mov	r2, r3
 800a032:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a034:	647b      	str	r3, [r7, #68]	@ 0x44
 800a036:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a038:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a03a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a03c:	e841 2300 	strex	r3, r2, [r1]
 800a040:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a042:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a044:	2b00      	cmp	r3, #0
 800a046:	d1e6      	bne.n	800a016 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	2220      	movs	r2, #32
 800a04c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	2200      	movs	r2, #0
 800a054:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a058:	2303      	movs	r3, #3
 800a05a:	e063      	b.n	800a124 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	f003 0304 	and.w	r3, r3, #4
 800a066:	2b04      	cmp	r3, #4
 800a068:	d149      	bne.n	800a0fe <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a06a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a06e:	9300      	str	r3, [sp, #0]
 800a070:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a072:	2200      	movs	r2, #0
 800a074:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a078:	6878      	ldr	r0, [r7, #4]
 800a07a:	f000 f857 	bl	800a12c <UART_WaitOnFlagUntilTimeout>
 800a07e:	4603      	mov	r3, r0
 800a080:	2b00      	cmp	r3, #0
 800a082:	d03c      	beq.n	800a0fe <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a08a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a08c:	e853 3f00 	ldrex	r3, [r3]
 800a090:	623b      	str	r3, [r7, #32]
   return(result);
 800a092:	6a3b      	ldr	r3, [r7, #32]
 800a094:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a098:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	461a      	mov	r2, r3
 800a0a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a0a2:	633b      	str	r3, [r7, #48]	@ 0x30
 800a0a4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0a6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a0a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a0aa:	e841 2300 	strex	r3, r2, [r1]
 800a0ae:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a0b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d1e6      	bne.n	800a084 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	3308      	adds	r3, #8
 800a0bc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0be:	693b      	ldr	r3, [r7, #16]
 800a0c0:	e853 3f00 	ldrex	r3, [r3]
 800a0c4:	60fb      	str	r3, [r7, #12]
   return(result);
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	f023 0301 	bic.w	r3, r3, #1
 800a0cc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	3308      	adds	r3, #8
 800a0d4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a0d6:	61fa      	str	r2, [r7, #28]
 800a0d8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0da:	69b9      	ldr	r1, [r7, #24]
 800a0dc:	69fa      	ldr	r2, [r7, #28]
 800a0de:	e841 2300 	strex	r3, r2, [r1]
 800a0e2:	617b      	str	r3, [r7, #20]
   return(result);
 800a0e4:	697b      	ldr	r3, [r7, #20]
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d1e5      	bne.n	800a0b6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	2220      	movs	r2, #32
 800a0ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	2200      	movs	r2, #0
 800a0f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a0fa:	2303      	movs	r3, #3
 800a0fc:	e012      	b.n	800a124 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	2220      	movs	r2, #32
 800a102:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	2220      	movs	r2, #32
 800a10a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	2200      	movs	r2, #0
 800a112:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	2200      	movs	r2, #0
 800a118:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	2200      	movs	r2, #0
 800a11e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a122:	2300      	movs	r3, #0
}
 800a124:	4618      	mov	r0, r3
 800a126:	3758      	adds	r7, #88	@ 0x58
 800a128:	46bd      	mov	sp, r7
 800a12a:	bd80      	pop	{r7, pc}

0800a12c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a12c:	b580      	push	{r7, lr}
 800a12e:	b084      	sub	sp, #16
 800a130:	af00      	add	r7, sp, #0
 800a132:	60f8      	str	r0, [r7, #12]
 800a134:	60b9      	str	r1, [r7, #8]
 800a136:	603b      	str	r3, [r7, #0]
 800a138:	4613      	mov	r3, r2
 800a13a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a13c:	e04f      	b.n	800a1de <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a13e:	69bb      	ldr	r3, [r7, #24]
 800a140:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a144:	d04b      	beq.n	800a1de <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a146:	f7f8 fd4d 	bl	8002be4 <HAL_GetTick>
 800a14a:	4602      	mov	r2, r0
 800a14c:	683b      	ldr	r3, [r7, #0]
 800a14e:	1ad3      	subs	r3, r2, r3
 800a150:	69ba      	ldr	r2, [r7, #24]
 800a152:	429a      	cmp	r2, r3
 800a154:	d302      	bcc.n	800a15c <UART_WaitOnFlagUntilTimeout+0x30>
 800a156:	69bb      	ldr	r3, [r7, #24]
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d101      	bne.n	800a160 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a15c:	2303      	movs	r3, #3
 800a15e:	e04e      	b.n	800a1fe <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	f003 0304 	and.w	r3, r3, #4
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d037      	beq.n	800a1de <UART_WaitOnFlagUntilTimeout+0xb2>
 800a16e:	68bb      	ldr	r3, [r7, #8]
 800a170:	2b80      	cmp	r3, #128	@ 0x80
 800a172:	d034      	beq.n	800a1de <UART_WaitOnFlagUntilTimeout+0xb2>
 800a174:	68bb      	ldr	r3, [r7, #8]
 800a176:	2b40      	cmp	r3, #64	@ 0x40
 800a178:	d031      	beq.n	800a1de <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	69db      	ldr	r3, [r3, #28]
 800a180:	f003 0308 	and.w	r3, r3, #8
 800a184:	2b08      	cmp	r3, #8
 800a186:	d110      	bne.n	800a1aa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	2208      	movs	r2, #8
 800a18e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a190:	68f8      	ldr	r0, [r7, #12]
 800a192:	f000 f95b 	bl	800a44c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	2208      	movs	r2, #8
 800a19a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	2200      	movs	r2, #0
 800a1a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a1a6:	2301      	movs	r3, #1
 800a1a8:	e029      	b.n	800a1fe <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	69db      	ldr	r3, [r3, #28]
 800a1b0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a1b4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a1b8:	d111      	bne.n	800a1de <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a1c2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a1c4:	68f8      	ldr	r0, [r7, #12]
 800a1c6:	f000 f941 	bl	800a44c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	2220      	movs	r2, #32
 800a1ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	2200      	movs	r2, #0
 800a1d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a1da:	2303      	movs	r3, #3
 800a1dc:	e00f      	b.n	800a1fe <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	69da      	ldr	r2, [r3, #28]
 800a1e4:	68bb      	ldr	r3, [r7, #8]
 800a1e6:	4013      	ands	r3, r2
 800a1e8:	68ba      	ldr	r2, [r7, #8]
 800a1ea:	429a      	cmp	r2, r3
 800a1ec:	bf0c      	ite	eq
 800a1ee:	2301      	moveq	r3, #1
 800a1f0:	2300      	movne	r3, #0
 800a1f2:	b2db      	uxtb	r3, r3
 800a1f4:	461a      	mov	r2, r3
 800a1f6:	79fb      	ldrb	r3, [r7, #7]
 800a1f8:	429a      	cmp	r2, r3
 800a1fa:	d0a0      	beq.n	800a13e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a1fc:	2300      	movs	r3, #0
}
 800a1fe:	4618      	mov	r0, r3
 800a200:	3710      	adds	r7, #16
 800a202:	46bd      	mov	sp, r7
 800a204:	bd80      	pop	{r7, pc}
	...

0800a208 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a208:	b480      	push	{r7}
 800a20a:	b0a3      	sub	sp, #140	@ 0x8c
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	60f8      	str	r0, [r7, #12]
 800a210:	60b9      	str	r1, [r7, #8]
 800a212:	4613      	mov	r3, r2
 800a214:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	68ba      	ldr	r2, [r7, #8]
 800a21a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	88fa      	ldrh	r2, [r7, #6]
 800a220:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	88fa      	ldrh	r2, [r7, #6]
 800a228:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	2200      	movs	r2, #0
 800a230:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	689b      	ldr	r3, [r3, #8]
 800a236:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a23a:	d10e      	bne.n	800a25a <UART_Start_Receive_IT+0x52>
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	691b      	ldr	r3, [r3, #16]
 800a240:	2b00      	cmp	r3, #0
 800a242:	d105      	bne.n	800a250 <UART_Start_Receive_IT+0x48>
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800a24a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a24e:	e02d      	b.n	800a2ac <UART_Start_Receive_IT+0xa4>
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	22ff      	movs	r2, #255	@ 0xff
 800a254:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a258:	e028      	b.n	800a2ac <UART_Start_Receive_IT+0xa4>
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	689b      	ldr	r3, [r3, #8]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d10d      	bne.n	800a27e <UART_Start_Receive_IT+0x76>
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	691b      	ldr	r3, [r3, #16]
 800a266:	2b00      	cmp	r3, #0
 800a268:	d104      	bne.n	800a274 <UART_Start_Receive_IT+0x6c>
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	22ff      	movs	r2, #255	@ 0xff
 800a26e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a272:	e01b      	b.n	800a2ac <UART_Start_Receive_IT+0xa4>
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	227f      	movs	r2, #127	@ 0x7f
 800a278:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a27c:	e016      	b.n	800a2ac <UART_Start_Receive_IT+0xa4>
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	689b      	ldr	r3, [r3, #8]
 800a282:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a286:	d10d      	bne.n	800a2a4 <UART_Start_Receive_IT+0x9c>
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	691b      	ldr	r3, [r3, #16]
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d104      	bne.n	800a29a <UART_Start_Receive_IT+0x92>
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	227f      	movs	r2, #127	@ 0x7f
 800a294:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a298:	e008      	b.n	800a2ac <UART_Start_Receive_IT+0xa4>
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	223f      	movs	r2, #63	@ 0x3f
 800a29e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a2a2:	e003      	b.n	800a2ac <UART_Start_Receive_IT+0xa4>
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	2200      	movs	r2, #0
 800a2a8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	2200      	movs	r2, #0
 800a2b0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	2222      	movs	r2, #34	@ 0x22
 800a2b8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	3308      	adds	r3, #8
 800a2c2:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2c4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a2c6:	e853 3f00 	ldrex	r3, [r3]
 800a2ca:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800a2cc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a2ce:	f043 0301 	orr.w	r3, r3, #1
 800a2d2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	3308      	adds	r3, #8
 800a2dc:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800a2e0:	673a      	str	r2, [r7, #112]	@ 0x70
 800a2e2:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2e4:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800a2e6:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800a2e8:	e841 2300 	strex	r3, r2, [r1]
 800a2ec:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800a2ee:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d1e3      	bne.n	800a2bc <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a2f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a2fc:	d14f      	bne.n	800a39e <UART_Start_Receive_IT+0x196>
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800a304:	88fa      	ldrh	r2, [r7, #6]
 800a306:	429a      	cmp	r2, r3
 800a308:	d349      	bcc.n	800a39e <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	689b      	ldr	r3, [r3, #8]
 800a30e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a312:	d107      	bne.n	800a324 <UART_Start_Receive_IT+0x11c>
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	691b      	ldr	r3, [r3, #16]
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d103      	bne.n	800a324 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	4a47      	ldr	r2, [pc, #284]	@ (800a43c <UART_Start_Receive_IT+0x234>)
 800a320:	675a      	str	r2, [r3, #116]	@ 0x74
 800a322:	e002      	b.n	800a32a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	4a46      	ldr	r2, [pc, #280]	@ (800a440 <UART_Start_Receive_IT+0x238>)
 800a328:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	691b      	ldr	r3, [r3, #16]
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d01a      	beq.n	800a368 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a338:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a33a:	e853 3f00 	ldrex	r3, [r3]
 800a33e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800a340:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a342:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a346:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	461a      	mov	r2, r3
 800a350:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a354:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a356:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a358:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800a35a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800a35c:	e841 2300 	strex	r3, r2, [r1]
 800a360:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800a362:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a364:	2b00      	cmp	r3, #0
 800a366:	d1e4      	bne.n	800a332 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	3308      	adds	r3, #8
 800a36e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a370:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a372:	e853 3f00 	ldrex	r3, [r3]
 800a376:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a378:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a37a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a37e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	3308      	adds	r3, #8
 800a386:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800a388:	64ba      	str	r2, [r7, #72]	@ 0x48
 800a38a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a38c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a38e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a390:	e841 2300 	strex	r3, r2, [r1]
 800a394:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800a396:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d1e5      	bne.n	800a368 <UART_Start_Receive_IT+0x160>
 800a39c:	e046      	b.n	800a42c <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	689b      	ldr	r3, [r3, #8]
 800a3a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a3a6:	d107      	bne.n	800a3b8 <UART_Start_Receive_IT+0x1b0>
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	691b      	ldr	r3, [r3, #16]
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d103      	bne.n	800a3b8 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	4a24      	ldr	r2, [pc, #144]	@ (800a444 <UART_Start_Receive_IT+0x23c>)
 800a3b4:	675a      	str	r2, [r3, #116]	@ 0x74
 800a3b6:	e002      	b.n	800a3be <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	4a23      	ldr	r2, [pc, #140]	@ (800a448 <UART_Start_Receive_IT+0x240>)
 800a3bc:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	691b      	ldr	r3, [r3, #16]
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d019      	beq.n	800a3fa <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3ce:	e853 3f00 	ldrex	r3, [r3]
 800a3d2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a3d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3d6:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800a3da:	677b      	str	r3, [r7, #116]	@ 0x74
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	461a      	mov	r2, r3
 800a3e2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a3e4:	637b      	str	r3, [r7, #52]	@ 0x34
 800a3e6:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3e8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a3ea:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a3ec:	e841 2300 	strex	r3, r2, [r1]
 800a3f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800a3f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d1e6      	bne.n	800a3c6 <UART_Start_Receive_IT+0x1be>
 800a3f8:	e018      	b.n	800a42c <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a400:	697b      	ldr	r3, [r7, #20]
 800a402:	e853 3f00 	ldrex	r3, [r3]
 800a406:	613b      	str	r3, [r7, #16]
   return(result);
 800a408:	693b      	ldr	r3, [r7, #16]
 800a40a:	f043 0320 	orr.w	r3, r3, #32
 800a40e:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	461a      	mov	r2, r3
 800a416:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a418:	623b      	str	r3, [r7, #32]
 800a41a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a41c:	69f9      	ldr	r1, [r7, #28]
 800a41e:	6a3a      	ldr	r2, [r7, #32]
 800a420:	e841 2300 	strex	r3, r2, [r1]
 800a424:	61bb      	str	r3, [r7, #24]
   return(result);
 800a426:	69bb      	ldr	r3, [r7, #24]
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d1e6      	bne.n	800a3fa <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800a42c:	2300      	movs	r3, #0
}
 800a42e:	4618      	mov	r0, r3
 800a430:	378c      	adds	r7, #140	@ 0x8c
 800a432:	46bd      	mov	sp, r7
 800a434:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a438:	4770      	bx	lr
 800a43a:	bf00      	nop
 800a43c:	0800ac6d 	.word	0x0800ac6d
 800a440:	0800a90d 	.word	0x0800a90d
 800a444:	0800a755 	.word	0x0800a755
 800a448:	0800a59d 	.word	0x0800a59d

0800a44c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a44c:	b480      	push	{r7}
 800a44e:	b095      	sub	sp, #84	@ 0x54
 800a450:	af00      	add	r7, sp, #0
 800a452:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a45a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a45c:	e853 3f00 	ldrex	r3, [r3]
 800a460:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a462:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a464:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a468:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	461a      	mov	r2, r3
 800a470:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a472:	643b      	str	r3, [r7, #64]	@ 0x40
 800a474:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a476:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a478:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a47a:	e841 2300 	strex	r3, r2, [r1]
 800a47e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a480:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a482:	2b00      	cmp	r3, #0
 800a484:	d1e6      	bne.n	800a454 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	3308      	adds	r3, #8
 800a48c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a48e:	6a3b      	ldr	r3, [r7, #32]
 800a490:	e853 3f00 	ldrex	r3, [r3]
 800a494:	61fb      	str	r3, [r7, #28]
   return(result);
 800a496:	69fa      	ldr	r2, [r7, #28]
 800a498:	4b1e      	ldr	r3, [pc, #120]	@ (800a514 <UART_EndRxTransfer+0xc8>)
 800a49a:	4013      	ands	r3, r2
 800a49c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	3308      	adds	r3, #8
 800a4a4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a4a6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a4a8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4aa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a4ac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a4ae:	e841 2300 	strex	r3, r2, [r1]
 800a4b2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a4b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d1e5      	bne.n	800a486 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a4be:	2b01      	cmp	r3, #1
 800a4c0:	d118      	bne.n	800a4f4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	e853 3f00 	ldrex	r3, [r3]
 800a4ce:	60bb      	str	r3, [r7, #8]
   return(result);
 800a4d0:	68bb      	ldr	r3, [r7, #8]
 800a4d2:	f023 0310 	bic.w	r3, r3, #16
 800a4d6:	647b      	str	r3, [r7, #68]	@ 0x44
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	461a      	mov	r2, r3
 800a4de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a4e0:	61bb      	str	r3, [r7, #24]
 800a4e2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4e4:	6979      	ldr	r1, [r7, #20]
 800a4e6:	69ba      	ldr	r2, [r7, #24]
 800a4e8:	e841 2300 	strex	r3, r2, [r1]
 800a4ec:	613b      	str	r3, [r7, #16]
   return(result);
 800a4ee:	693b      	ldr	r3, [r7, #16]
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d1e6      	bne.n	800a4c2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	2220      	movs	r2, #32
 800a4f8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	2200      	movs	r2, #0
 800a500:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	2200      	movs	r2, #0
 800a506:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a508:	bf00      	nop
 800a50a:	3754      	adds	r7, #84	@ 0x54
 800a50c:	46bd      	mov	sp, r7
 800a50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a512:	4770      	bx	lr
 800a514:	effffffe 	.word	0xeffffffe

0800a518 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a518:	b580      	push	{r7, lr}
 800a51a:	b084      	sub	sp, #16
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a524:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	2200      	movs	r2, #0
 800a52a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	2200      	movs	r2, #0
 800a532:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a536:	68f8      	ldr	r0, [r7, #12]
 800a538:	f7fe fe2a 	bl	8009190 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a53c:	bf00      	nop
 800a53e:	3710      	adds	r7, #16
 800a540:	46bd      	mov	sp, r7
 800a542:	bd80      	pop	{r7, pc}

0800a544 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a544:	b580      	push	{r7, lr}
 800a546:	b088      	sub	sp, #32
 800a548:	af00      	add	r7, sp, #0
 800a54a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	e853 3f00 	ldrex	r3, [r3]
 800a558:	60bb      	str	r3, [r7, #8]
   return(result);
 800a55a:	68bb      	ldr	r3, [r7, #8]
 800a55c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a560:	61fb      	str	r3, [r7, #28]
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	461a      	mov	r2, r3
 800a568:	69fb      	ldr	r3, [r7, #28]
 800a56a:	61bb      	str	r3, [r7, #24]
 800a56c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a56e:	6979      	ldr	r1, [r7, #20]
 800a570:	69ba      	ldr	r2, [r7, #24]
 800a572:	e841 2300 	strex	r3, r2, [r1]
 800a576:	613b      	str	r3, [r7, #16]
   return(result);
 800a578:	693b      	ldr	r3, [r7, #16]
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d1e6      	bne.n	800a54c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	2220      	movs	r2, #32
 800a582:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	2200      	movs	r2, #0
 800a58a:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a58c:	6878      	ldr	r0, [r7, #4]
 800a58e:	f7fe fdf5 	bl	800917c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a592:	bf00      	nop
 800a594:	3720      	adds	r7, #32
 800a596:	46bd      	mov	sp, r7
 800a598:	bd80      	pop	{r7, pc}
	...

0800a59c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800a59c:	b580      	push	{r7, lr}
 800a59e:	b09c      	sub	sp, #112	@ 0x70
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a5aa:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a5b4:	2b22      	cmp	r3, #34	@ 0x22
 800a5b6:	f040 80be 	bne.w	800a736 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5c0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a5c4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800a5c8:	b2d9      	uxtb	r1, r3
 800a5ca:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800a5ce:	b2da      	uxtb	r2, r3
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a5d4:	400a      	ands	r2, r1
 800a5d6:	b2d2      	uxtb	r2, r2
 800a5d8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a5de:	1c5a      	adds	r2, r3, #1
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a5ea:	b29b      	uxth	r3, r3
 800a5ec:	3b01      	subs	r3, #1
 800a5ee:	b29a      	uxth	r2, r3
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a5fc:	b29b      	uxth	r3, r3
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	f040 80a1 	bne.w	800a746 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a60a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a60c:	e853 3f00 	ldrex	r3, [r3]
 800a610:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a612:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a614:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a618:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	461a      	mov	r2, r3
 800a620:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a622:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a624:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a626:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a628:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a62a:	e841 2300 	strex	r3, r2, [r1]
 800a62e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a630:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a632:	2b00      	cmp	r3, #0
 800a634:	d1e6      	bne.n	800a604 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	3308      	adds	r3, #8
 800a63c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a63e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a640:	e853 3f00 	ldrex	r3, [r3]
 800a644:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a646:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a648:	f023 0301 	bic.w	r3, r3, #1
 800a64c:	667b      	str	r3, [r7, #100]	@ 0x64
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	3308      	adds	r3, #8
 800a654:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800a656:	647a      	str	r2, [r7, #68]	@ 0x44
 800a658:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a65a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a65c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a65e:	e841 2300 	strex	r3, r2, [r1]
 800a662:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a664:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a666:	2b00      	cmp	r3, #0
 800a668:	d1e5      	bne.n	800a636 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	2220      	movs	r2, #32
 800a66e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	2200      	movs	r2, #0
 800a676:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	2200      	movs	r2, #0
 800a67c:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	4a33      	ldr	r2, [pc, #204]	@ (800a750 <UART_RxISR_8BIT+0x1b4>)
 800a684:	4293      	cmp	r3, r2
 800a686:	d01f      	beq.n	800a6c8 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	685b      	ldr	r3, [r3, #4]
 800a68e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a692:	2b00      	cmp	r3, #0
 800a694:	d018      	beq.n	800a6c8 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a69c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a69e:	e853 3f00 	ldrex	r3, [r3]
 800a6a2:	623b      	str	r3, [r7, #32]
   return(result);
 800a6a4:	6a3b      	ldr	r3, [r7, #32]
 800a6a6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a6aa:	663b      	str	r3, [r7, #96]	@ 0x60
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	461a      	mov	r2, r3
 800a6b2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a6b4:	633b      	str	r3, [r7, #48]	@ 0x30
 800a6b6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6b8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a6ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a6bc:	e841 2300 	strex	r3, r2, [r1]
 800a6c0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a6c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d1e6      	bne.n	800a696 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a6cc:	2b01      	cmp	r3, #1
 800a6ce:	d12e      	bne.n	800a72e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	2200      	movs	r2, #0
 800a6d4:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6dc:	693b      	ldr	r3, [r7, #16]
 800a6de:	e853 3f00 	ldrex	r3, [r3]
 800a6e2:	60fb      	str	r3, [r7, #12]
   return(result);
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	f023 0310 	bic.w	r3, r3, #16
 800a6ea:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	461a      	mov	r2, r3
 800a6f2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a6f4:	61fb      	str	r3, [r7, #28]
 800a6f6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6f8:	69b9      	ldr	r1, [r7, #24]
 800a6fa:	69fa      	ldr	r2, [r7, #28]
 800a6fc:	e841 2300 	strex	r3, r2, [r1]
 800a700:	617b      	str	r3, [r7, #20]
   return(result);
 800a702:	697b      	ldr	r3, [r7, #20]
 800a704:	2b00      	cmp	r3, #0
 800a706:	d1e6      	bne.n	800a6d6 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	69db      	ldr	r3, [r3, #28]
 800a70e:	f003 0310 	and.w	r3, r3, #16
 800a712:	2b10      	cmp	r3, #16
 800a714:	d103      	bne.n	800a71e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	2210      	movs	r2, #16
 800a71c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a724:	4619      	mov	r1, r3
 800a726:	6878      	ldr	r0, [r7, #4]
 800a728:	f7fe fd3c 	bl	80091a4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a72c:	e00b      	b.n	800a746 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800a72e:	6878      	ldr	r0, [r7, #4]
 800a730:	f7f6 fe72 	bl	8001418 <HAL_UART_RxCpltCallback>
}
 800a734:	e007      	b.n	800a746 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	699a      	ldr	r2, [r3, #24]
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	f042 0208 	orr.w	r2, r2, #8
 800a744:	619a      	str	r2, [r3, #24]
}
 800a746:	bf00      	nop
 800a748:	3770      	adds	r7, #112	@ 0x70
 800a74a:	46bd      	mov	sp, r7
 800a74c:	bd80      	pop	{r7, pc}
 800a74e:	bf00      	nop
 800a750:	58000c00 	.word	0x58000c00

0800a754 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800a754:	b580      	push	{r7, lr}
 800a756:	b09c      	sub	sp, #112	@ 0x70
 800a758:	af00      	add	r7, sp, #0
 800a75a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a762:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a76c:	2b22      	cmp	r3, #34	@ 0x22
 800a76e:	f040 80be 	bne.w	800a8ee <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a778:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a780:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800a782:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800a786:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800a78a:	4013      	ands	r3, r2
 800a78c:	b29a      	uxth	r2, r3
 800a78e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a790:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a796:	1c9a      	adds	r2, r3, #2
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a7a2:	b29b      	uxth	r3, r3
 800a7a4:	3b01      	subs	r3, #1
 800a7a6:	b29a      	uxth	r2, r3
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a7b4:	b29b      	uxth	r3, r3
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	f040 80a1 	bne.w	800a8fe <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a7c4:	e853 3f00 	ldrex	r3, [r3]
 800a7c8:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800a7ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a7cc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a7d0:	667b      	str	r3, [r7, #100]	@ 0x64
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	461a      	mov	r2, r3
 800a7d8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a7da:	657b      	str	r3, [r7, #84]	@ 0x54
 800a7dc:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7de:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a7e0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a7e2:	e841 2300 	strex	r3, r2, [r1]
 800a7e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800a7e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d1e6      	bne.n	800a7bc <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	3308      	adds	r3, #8
 800a7f4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a7f8:	e853 3f00 	ldrex	r3, [r3]
 800a7fc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a7fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a800:	f023 0301 	bic.w	r3, r3, #1
 800a804:	663b      	str	r3, [r7, #96]	@ 0x60
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	3308      	adds	r3, #8
 800a80c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a80e:	643a      	str	r2, [r7, #64]	@ 0x40
 800a810:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a812:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a814:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a816:	e841 2300 	strex	r3, r2, [r1]
 800a81a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a81c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d1e5      	bne.n	800a7ee <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	2220      	movs	r2, #32
 800a826:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	2200      	movs	r2, #0
 800a82e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	2200      	movs	r2, #0
 800a834:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	4a33      	ldr	r2, [pc, #204]	@ (800a908 <UART_RxISR_16BIT+0x1b4>)
 800a83c:	4293      	cmp	r3, r2
 800a83e:	d01f      	beq.n	800a880 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	685b      	ldr	r3, [r3, #4]
 800a846:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d018      	beq.n	800a880 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a854:	6a3b      	ldr	r3, [r7, #32]
 800a856:	e853 3f00 	ldrex	r3, [r3]
 800a85a:	61fb      	str	r3, [r7, #28]
   return(result);
 800a85c:	69fb      	ldr	r3, [r7, #28]
 800a85e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a862:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	461a      	mov	r2, r3
 800a86a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a86c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a86e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a870:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a872:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a874:	e841 2300 	strex	r3, r2, [r1]
 800a878:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a87a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d1e6      	bne.n	800a84e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a884:	2b01      	cmp	r3, #1
 800a886:	d12e      	bne.n	800a8e6 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	2200      	movs	r2, #0
 800a88c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	e853 3f00 	ldrex	r3, [r3]
 800a89a:	60bb      	str	r3, [r7, #8]
   return(result);
 800a89c:	68bb      	ldr	r3, [r7, #8]
 800a89e:	f023 0310 	bic.w	r3, r3, #16
 800a8a2:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	461a      	mov	r2, r3
 800a8aa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a8ac:	61bb      	str	r3, [r7, #24]
 800a8ae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8b0:	6979      	ldr	r1, [r7, #20]
 800a8b2:	69ba      	ldr	r2, [r7, #24]
 800a8b4:	e841 2300 	strex	r3, r2, [r1]
 800a8b8:	613b      	str	r3, [r7, #16]
   return(result);
 800a8ba:	693b      	ldr	r3, [r7, #16]
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d1e6      	bne.n	800a88e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	69db      	ldr	r3, [r3, #28]
 800a8c6:	f003 0310 	and.w	r3, r3, #16
 800a8ca:	2b10      	cmp	r3, #16
 800a8cc:	d103      	bne.n	800a8d6 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	2210      	movs	r2, #16
 800a8d4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a8dc:	4619      	mov	r1, r3
 800a8de:	6878      	ldr	r0, [r7, #4]
 800a8e0:	f7fe fc60 	bl	80091a4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a8e4:	e00b      	b.n	800a8fe <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800a8e6:	6878      	ldr	r0, [r7, #4]
 800a8e8:	f7f6 fd96 	bl	8001418 <HAL_UART_RxCpltCallback>
}
 800a8ec:	e007      	b.n	800a8fe <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	699a      	ldr	r2, [r3, #24]
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	f042 0208 	orr.w	r2, r2, #8
 800a8fc:	619a      	str	r2, [r3, #24]
}
 800a8fe:	bf00      	nop
 800a900:	3770      	adds	r7, #112	@ 0x70
 800a902:	46bd      	mov	sp, r7
 800a904:	bd80      	pop	{r7, pc}
 800a906:	bf00      	nop
 800a908:	58000c00 	.word	0x58000c00

0800a90c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a90c:	b580      	push	{r7, lr}
 800a90e:	b0ac      	sub	sp, #176	@ 0xb0
 800a910:	af00      	add	r7, sp, #0
 800a912:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a91a:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	69db      	ldr	r3, [r3, #28]
 800a924:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	689b      	ldr	r3, [r3, #8]
 800a938:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a942:	2b22      	cmp	r3, #34	@ 0x22
 800a944:	f040 8180 	bne.w	800ac48 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800a94e:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a952:	e123      	b.n	800ab9c <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a95a:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a95e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800a962:	b2d9      	uxtb	r1, r3
 800a964:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800a968:	b2da      	uxtb	r2, r3
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a96e:	400a      	ands	r2, r1
 800a970:	b2d2      	uxtb	r2, r2
 800a972:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a978:	1c5a      	adds	r2, r3, #1
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a984:	b29b      	uxth	r3, r3
 800a986:	3b01      	subs	r3, #1
 800a988:	b29a      	uxth	r2, r3
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	69db      	ldr	r3, [r3, #28]
 800a996:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800a99a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a99e:	f003 0307 	and.w	r3, r3, #7
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d053      	beq.n	800aa4e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a9a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a9aa:	f003 0301 	and.w	r3, r3, #1
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d011      	beq.n	800a9d6 <UART_RxISR_8BIT_FIFOEN+0xca>
 800a9b2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800a9b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d00b      	beq.n	800a9d6 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	2201      	movs	r2, #1
 800a9c4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a9cc:	f043 0201 	orr.w	r2, r3, #1
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a9d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a9da:	f003 0302 	and.w	r3, r3, #2
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d011      	beq.n	800aa06 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800a9e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a9e6:	f003 0301 	and.w	r3, r3, #1
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d00b      	beq.n	800aa06 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	2202      	movs	r2, #2
 800a9f4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a9fc:	f043 0204 	orr.w	r2, r3, #4
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800aa06:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800aa0a:	f003 0304 	and.w	r3, r3, #4
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d011      	beq.n	800aa36 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800aa12:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800aa16:	f003 0301 	and.w	r3, r3, #1
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d00b      	beq.n	800aa36 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	2204      	movs	r2, #4
 800aa24:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aa2c:	f043 0202 	orr.w	r2, r3, #2
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d006      	beq.n	800aa4e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800aa40:	6878      	ldr	r0, [r7, #4]
 800aa42:	f7fe fba5 	bl	8009190 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	2200      	movs	r2, #0
 800aa4a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800aa54:	b29b      	uxth	r3, r3
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	f040 80a0 	bne.w	800ab9c <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa62:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800aa64:	e853 3f00 	ldrex	r3, [r3]
 800aa68:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800aa6a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aa6c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800aa70:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	461a      	mov	r2, r3
 800aa7a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800aa7e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800aa80:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa82:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800aa84:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800aa86:	e841 2300 	strex	r3, r2, [r1]
 800aa8a:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800aa8c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d1e4      	bne.n	800aa5c <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	3308      	adds	r3, #8
 800aa98:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa9a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800aa9c:	e853 3f00 	ldrex	r3, [r3]
 800aaa0:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800aaa2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800aaa4:	4b6e      	ldr	r3, [pc, #440]	@ (800ac60 <UART_RxISR_8BIT_FIFOEN+0x354>)
 800aaa6:	4013      	ands	r3, r2
 800aaa8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	3308      	adds	r3, #8
 800aab2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800aab6:	66ba      	str	r2, [r7, #104]	@ 0x68
 800aab8:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aaba:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800aabc:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800aabe:	e841 2300 	strex	r3, r2, [r1]
 800aac2:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800aac4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d1e3      	bne.n	800aa92 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	2220      	movs	r2, #32
 800aace:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	2200      	movs	r2, #0
 800aad6:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	2200      	movs	r2, #0
 800aadc:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	4a60      	ldr	r2, [pc, #384]	@ (800ac64 <UART_RxISR_8BIT_FIFOEN+0x358>)
 800aae4:	4293      	cmp	r3, r2
 800aae6:	d021      	beq.n	800ab2c <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	685b      	ldr	r3, [r3, #4]
 800aaee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d01a      	beq.n	800ab2c <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aafc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800aafe:	e853 3f00 	ldrex	r3, [r3]
 800ab02:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800ab04:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ab06:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800ab0a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	461a      	mov	r2, r3
 800ab14:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800ab18:	657b      	str	r3, [r7, #84]	@ 0x54
 800ab1a:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab1c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800ab1e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ab20:	e841 2300 	strex	r3, r2, [r1]
 800ab24:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800ab26:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d1e4      	bne.n	800aaf6 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ab30:	2b01      	cmp	r3, #1
 800ab32:	d130      	bne.n	800ab96 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	2200      	movs	r2, #0
 800ab38:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab42:	e853 3f00 	ldrex	r3, [r3]
 800ab46:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ab48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab4a:	f023 0310 	bic.w	r3, r3, #16
 800ab4e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	461a      	mov	r2, r3
 800ab58:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ab5c:	643b      	str	r3, [r7, #64]	@ 0x40
 800ab5e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab60:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ab62:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ab64:	e841 2300 	strex	r3, r2, [r1]
 800ab68:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ab6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d1e4      	bne.n	800ab3a <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	69db      	ldr	r3, [r3, #28]
 800ab76:	f003 0310 	and.w	r3, r3, #16
 800ab7a:	2b10      	cmp	r3, #16
 800ab7c:	d103      	bne.n	800ab86 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	2210      	movs	r2, #16
 800ab84:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ab8c:	4619      	mov	r1, r3
 800ab8e:	6878      	ldr	r0, [r7, #4]
 800ab90:	f7fe fb08 	bl	80091a4 <HAL_UARTEx_RxEventCallback>
 800ab94:	e002      	b.n	800ab9c <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800ab96:	6878      	ldr	r0, [r7, #4]
 800ab98:	f7f6 fc3e 	bl	8001418 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800ab9c:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d006      	beq.n	800abb2 <UART_RxISR_8BIT_FIFOEN+0x2a6>
 800aba4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800aba8:	f003 0320 	and.w	r3, r3, #32
 800abac:	2b00      	cmp	r3, #0
 800abae:	f47f aed1 	bne.w	800a954 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800abb8:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800abbc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d049      	beq.n	800ac58 <UART_RxISR_8BIT_FIFOEN+0x34c>
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800abca:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800abce:	429a      	cmp	r2, r3
 800abd0:	d242      	bcs.n	800ac58 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	3308      	adds	r3, #8
 800abd8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abda:	6a3b      	ldr	r3, [r7, #32]
 800abdc:	e853 3f00 	ldrex	r3, [r3]
 800abe0:	61fb      	str	r3, [r7, #28]
   return(result);
 800abe2:	69fb      	ldr	r3, [r7, #28]
 800abe4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800abe8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	3308      	adds	r3, #8
 800abf2:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800abf6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800abf8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abfa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800abfc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800abfe:	e841 2300 	strex	r3, r2, [r1]
 800ac02:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ac04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d1e3      	bne.n	800abd2 <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	4a16      	ldr	r2, [pc, #88]	@ (800ac68 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800ac0e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	e853 3f00 	ldrex	r3, [r3]
 800ac1c:	60bb      	str	r3, [r7, #8]
   return(result);
 800ac1e:	68bb      	ldr	r3, [r7, #8]
 800ac20:	f043 0320 	orr.w	r3, r3, #32
 800ac24:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	461a      	mov	r2, r3
 800ac2e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800ac32:	61bb      	str	r3, [r7, #24]
 800ac34:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac36:	6979      	ldr	r1, [r7, #20]
 800ac38:	69ba      	ldr	r2, [r7, #24]
 800ac3a:	e841 2300 	strex	r3, r2, [r1]
 800ac3e:	613b      	str	r3, [r7, #16]
   return(result);
 800ac40:	693b      	ldr	r3, [r7, #16]
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d1e4      	bne.n	800ac10 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ac46:	e007      	b.n	800ac58 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	699a      	ldr	r2, [r3, #24]
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	f042 0208 	orr.w	r2, r2, #8
 800ac56:	619a      	str	r2, [r3, #24]
}
 800ac58:	bf00      	nop
 800ac5a:	37b0      	adds	r7, #176	@ 0xb0
 800ac5c:	46bd      	mov	sp, r7
 800ac5e:	bd80      	pop	{r7, pc}
 800ac60:	effffffe 	.word	0xeffffffe
 800ac64:	58000c00 	.word	0x58000c00
 800ac68:	0800a59d 	.word	0x0800a59d

0800ac6c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800ac6c:	b580      	push	{r7, lr}
 800ac6e:	b0ae      	sub	sp, #184	@ 0xb8
 800ac70:	af00      	add	r7, sp, #0
 800ac72:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800ac7a:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	69db      	ldr	r3, [r3, #28]
 800ac84:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	689b      	ldr	r3, [r3, #8]
 800ac98:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800aca2:	2b22      	cmp	r3, #34	@ 0x22
 800aca4:	f040 8184 	bne.w	800afb0 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800acae:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800acb2:	e127      	b.n	800af04 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800acba:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800acc2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800acc6:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800acca:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800acce:	4013      	ands	r3, r2
 800acd0:	b29a      	uxth	r2, r3
 800acd2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800acd6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800acdc:	1c9a      	adds	r2, r3, #2
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ace8:	b29b      	uxth	r3, r3
 800acea:	3b01      	subs	r3, #1
 800acec:	b29a      	uxth	r2, r3
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	69db      	ldr	r3, [r3, #28]
 800acfa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800acfe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ad02:	f003 0307 	and.w	r3, r3, #7
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d053      	beq.n	800adb2 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ad0a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ad0e:	f003 0301 	and.w	r3, r3, #1
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d011      	beq.n	800ad3a <UART_RxISR_16BIT_FIFOEN+0xce>
 800ad16:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ad1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d00b      	beq.n	800ad3a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	2201      	movs	r2, #1
 800ad28:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ad30:	f043 0201 	orr.w	r2, r3, #1
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ad3a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ad3e:	f003 0302 	and.w	r3, r3, #2
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d011      	beq.n	800ad6a <UART_RxISR_16BIT_FIFOEN+0xfe>
 800ad46:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800ad4a:	f003 0301 	and.w	r3, r3, #1
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d00b      	beq.n	800ad6a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	2202      	movs	r2, #2
 800ad58:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ad60:	f043 0204 	orr.w	r2, r3, #4
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ad6a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ad6e:	f003 0304 	and.w	r3, r3, #4
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d011      	beq.n	800ad9a <UART_RxISR_16BIT_FIFOEN+0x12e>
 800ad76:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800ad7a:	f003 0301 	and.w	r3, r3, #1
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d00b      	beq.n	800ad9a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	2204      	movs	r2, #4
 800ad88:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ad90:	f043 0202 	orr.w	r2, r3, #2
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d006      	beq.n	800adb2 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ada4:	6878      	ldr	r0, [r7, #4]
 800ada6:	f7fe f9f3 	bl	8009190 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	2200      	movs	r2, #0
 800adae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800adb8:	b29b      	uxth	r3, r3
 800adba:	2b00      	cmp	r3, #0
 800adbc:	f040 80a2 	bne.w	800af04 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adc6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800adc8:	e853 3f00 	ldrex	r3, [r3]
 800adcc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800adce:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800add0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800add4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	461a      	mov	r2, r3
 800adde:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800ade2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800ade6:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ade8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800adea:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800adee:	e841 2300 	strex	r3, r2, [r1]
 800adf2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800adf4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d1e2      	bne.n	800adc0 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	3308      	adds	r3, #8
 800ae00:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae02:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ae04:	e853 3f00 	ldrex	r3, [r3]
 800ae08:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800ae0a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800ae0c:	4b6e      	ldr	r3, [pc, #440]	@ (800afc8 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 800ae0e:	4013      	ands	r3, r2
 800ae10:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	3308      	adds	r3, #8
 800ae1a:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800ae1e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800ae20:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae22:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800ae24:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800ae26:	e841 2300 	strex	r3, r2, [r1]
 800ae2a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800ae2c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d1e3      	bne.n	800adfa <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	2220      	movs	r2, #32
 800ae36:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	2200      	movs	r2, #0
 800ae3e:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	2200      	movs	r2, #0
 800ae44:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	4a60      	ldr	r2, [pc, #384]	@ (800afcc <UART_RxISR_16BIT_FIFOEN+0x360>)
 800ae4c:	4293      	cmp	r3, r2
 800ae4e:	d021      	beq.n	800ae94 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	685b      	ldr	r3, [r3, #4]
 800ae56:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d01a      	beq.n	800ae94 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae64:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ae66:	e853 3f00 	ldrex	r3, [r3]
 800ae6a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800ae6c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ae6e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800ae72:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	461a      	mov	r2, r3
 800ae7c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800ae80:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ae82:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae84:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800ae86:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ae88:	e841 2300 	strex	r3, r2, [r1]
 800ae8c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800ae8e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d1e4      	bne.n	800ae5e <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ae98:	2b01      	cmp	r3, #1
 800ae9a:	d130      	bne.n	800aefe <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	2200      	movs	r2, #0
 800aea0:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aea8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aeaa:	e853 3f00 	ldrex	r3, [r3]
 800aeae:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800aeb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aeb2:	f023 0310 	bic.w	r3, r3, #16
 800aeb6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	461a      	mov	r2, r3
 800aec0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800aec4:	647b      	str	r3, [r7, #68]	@ 0x44
 800aec6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aec8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800aeca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800aecc:	e841 2300 	strex	r3, r2, [r1]
 800aed0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800aed2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d1e4      	bne.n	800aea2 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	69db      	ldr	r3, [r3, #28]
 800aede:	f003 0310 	and.w	r3, r3, #16
 800aee2:	2b10      	cmp	r3, #16
 800aee4:	d103      	bne.n	800aeee <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	2210      	movs	r2, #16
 800aeec:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800aef4:	4619      	mov	r1, r3
 800aef6:	6878      	ldr	r0, [r7, #4]
 800aef8:	f7fe f954 	bl	80091a4 <HAL_UARTEx_RxEventCallback>
 800aefc:	e002      	b.n	800af04 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800aefe:	6878      	ldr	r0, [r7, #4]
 800af00:	f7f6 fa8a 	bl	8001418 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800af04:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d006      	beq.n	800af1a <UART_RxISR_16BIT_FIFOEN+0x2ae>
 800af0c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800af10:	f003 0320 	and.w	r3, r3, #32
 800af14:	2b00      	cmp	r3, #0
 800af16:	f47f aecd 	bne.w	800acb4 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800af20:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800af24:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d049      	beq.n	800afc0 <UART_RxISR_16BIT_FIFOEN+0x354>
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800af32:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800af36:	429a      	cmp	r2, r3
 800af38:	d242      	bcs.n	800afc0 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	3308      	adds	r3, #8
 800af40:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af44:	e853 3f00 	ldrex	r3, [r3]
 800af48:	623b      	str	r3, [r7, #32]
   return(result);
 800af4a:	6a3b      	ldr	r3, [r7, #32]
 800af4c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800af50:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	3308      	adds	r3, #8
 800af5a:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800af5e:	633a      	str	r2, [r7, #48]	@ 0x30
 800af60:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af62:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800af64:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800af66:	e841 2300 	strex	r3, r2, [r1]
 800af6a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800af6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d1e3      	bne.n	800af3a <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	4a16      	ldr	r2, [pc, #88]	@ (800afd0 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800af76:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af7e:	693b      	ldr	r3, [r7, #16]
 800af80:	e853 3f00 	ldrex	r3, [r3]
 800af84:	60fb      	str	r3, [r7, #12]
   return(result);
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	f043 0320 	orr.w	r3, r3, #32
 800af8c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	461a      	mov	r2, r3
 800af96:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800af9a:	61fb      	str	r3, [r7, #28]
 800af9c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af9e:	69b9      	ldr	r1, [r7, #24]
 800afa0:	69fa      	ldr	r2, [r7, #28]
 800afa2:	e841 2300 	strex	r3, r2, [r1]
 800afa6:	617b      	str	r3, [r7, #20]
   return(result);
 800afa8:	697b      	ldr	r3, [r7, #20]
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d1e4      	bne.n	800af78 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800afae:	e007      	b.n	800afc0 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	699a      	ldr	r2, [r3, #24]
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	f042 0208 	orr.w	r2, r2, #8
 800afbe:	619a      	str	r2, [r3, #24]
}
 800afc0:	bf00      	nop
 800afc2:	37b8      	adds	r7, #184	@ 0xb8
 800afc4:	46bd      	mov	sp, r7
 800afc6:	bd80      	pop	{r7, pc}
 800afc8:	effffffe 	.word	0xeffffffe
 800afcc:	58000c00 	.word	0x58000c00
 800afd0:	0800a755 	.word	0x0800a755

0800afd4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800afd4:	b480      	push	{r7}
 800afd6:	b083      	sub	sp, #12
 800afd8:	af00      	add	r7, sp, #0
 800afda:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800afdc:	bf00      	nop
 800afde:	370c      	adds	r7, #12
 800afe0:	46bd      	mov	sp, r7
 800afe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afe6:	4770      	bx	lr

0800afe8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800afe8:	b480      	push	{r7}
 800afea:	b083      	sub	sp, #12
 800afec:	af00      	add	r7, sp, #0
 800afee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800aff0:	bf00      	nop
 800aff2:	370c      	adds	r7, #12
 800aff4:	46bd      	mov	sp, r7
 800aff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800affa:	4770      	bx	lr

0800affc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800affc:	b480      	push	{r7}
 800affe:	b083      	sub	sp, #12
 800b000:	af00      	add	r7, sp, #0
 800b002:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b004:	bf00      	nop
 800b006:	370c      	adds	r7, #12
 800b008:	46bd      	mov	sp, r7
 800b00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b00e:	4770      	bx	lr

0800b010 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b010:	b480      	push	{r7}
 800b012:	b085      	sub	sp, #20
 800b014:	af00      	add	r7, sp, #0
 800b016:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b01e:	2b01      	cmp	r3, #1
 800b020:	d101      	bne.n	800b026 <HAL_UARTEx_DisableFifoMode+0x16>
 800b022:	2302      	movs	r3, #2
 800b024:	e027      	b.n	800b076 <HAL_UARTEx_DisableFifoMode+0x66>
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	2201      	movs	r2, #1
 800b02a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	2224      	movs	r2, #36	@ 0x24
 800b032:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	681a      	ldr	r2, [r3, #0]
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	f022 0201 	bic.w	r2, r2, #1
 800b04c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b054:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	2200      	movs	r2, #0
 800b05a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	68fa      	ldr	r2, [r7, #12]
 800b062:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	2220      	movs	r2, #32
 800b068:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	2200      	movs	r2, #0
 800b070:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b074:	2300      	movs	r3, #0
}
 800b076:	4618      	mov	r0, r3
 800b078:	3714      	adds	r7, #20
 800b07a:	46bd      	mov	sp, r7
 800b07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b080:	4770      	bx	lr

0800b082 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b082:	b580      	push	{r7, lr}
 800b084:	b084      	sub	sp, #16
 800b086:	af00      	add	r7, sp, #0
 800b088:	6078      	str	r0, [r7, #4]
 800b08a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b092:	2b01      	cmp	r3, #1
 800b094:	d101      	bne.n	800b09a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b096:	2302      	movs	r3, #2
 800b098:	e02d      	b.n	800b0f6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	2201      	movs	r2, #1
 800b09e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	2224      	movs	r2, #36	@ 0x24
 800b0a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	681a      	ldr	r2, [r3, #0]
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	f022 0201 	bic.w	r2, r2, #1
 800b0c0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	689b      	ldr	r3, [r3, #8]
 800b0c8:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	683a      	ldr	r2, [r7, #0]
 800b0d2:	430a      	orrs	r2, r1
 800b0d4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b0d6:	6878      	ldr	r0, [r7, #4]
 800b0d8:	f000 f850 	bl	800b17c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	68fa      	ldr	r2, [r7, #12]
 800b0e2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	2220      	movs	r2, #32
 800b0e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	2200      	movs	r2, #0
 800b0f0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b0f4:	2300      	movs	r3, #0
}
 800b0f6:	4618      	mov	r0, r3
 800b0f8:	3710      	adds	r7, #16
 800b0fa:	46bd      	mov	sp, r7
 800b0fc:	bd80      	pop	{r7, pc}

0800b0fe <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b0fe:	b580      	push	{r7, lr}
 800b100:	b084      	sub	sp, #16
 800b102:	af00      	add	r7, sp, #0
 800b104:	6078      	str	r0, [r7, #4]
 800b106:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b10e:	2b01      	cmp	r3, #1
 800b110:	d101      	bne.n	800b116 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b112:	2302      	movs	r3, #2
 800b114:	e02d      	b.n	800b172 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	2201      	movs	r2, #1
 800b11a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	2224      	movs	r2, #36	@ 0x24
 800b122:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	681a      	ldr	r2, [r3, #0]
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	f022 0201 	bic.w	r2, r2, #1
 800b13c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	689b      	ldr	r3, [r3, #8]
 800b144:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	683a      	ldr	r2, [r7, #0]
 800b14e:	430a      	orrs	r2, r1
 800b150:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b152:	6878      	ldr	r0, [r7, #4]
 800b154:	f000 f812 	bl	800b17c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	68fa      	ldr	r2, [r7, #12]
 800b15e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	2220      	movs	r2, #32
 800b164:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	2200      	movs	r2, #0
 800b16c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b170:	2300      	movs	r3, #0
}
 800b172:	4618      	mov	r0, r3
 800b174:	3710      	adds	r7, #16
 800b176:	46bd      	mov	sp, r7
 800b178:	bd80      	pop	{r7, pc}
	...

0800b17c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b17c:	b480      	push	{r7}
 800b17e:	b085      	sub	sp, #20
 800b180:	af00      	add	r7, sp, #0
 800b182:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d108      	bne.n	800b19e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	2201      	movs	r2, #1
 800b190:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	2201      	movs	r2, #1
 800b198:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b19c:	e031      	b.n	800b202 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b19e:	2310      	movs	r3, #16
 800b1a0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b1a2:	2310      	movs	r3, #16
 800b1a4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	689b      	ldr	r3, [r3, #8]
 800b1ac:	0e5b      	lsrs	r3, r3, #25
 800b1ae:	b2db      	uxtb	r3, r3
 800b1b0:	f003 0307 	and.w	r3, r3, #7
 800b1b4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	689b      	ldr	r3, [r3, #8]
 800b1bc:	0f5b      	lsrs	r3, r3, #29
 800b1be:	b2db      	uxtb	r3, r3
 800b1c0:	f003 0307 	and.w	r3, r3, #7
 800b1c4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b1c6:	7bbb      	ldrb	r3, [r7, #14]
 800b1c8:	7b3a      	ldrb	r2, [r7, #12]
 800b1ca:	4911      	ldr	r1, [pc, #68]	@ (800b210 <UARTEx_SetNbDataToProcess+0x94>)
 800b1cc:	5c8a      	ldrb	r2, [r1, r2]
 800b1ce:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b1d2:	7b3a      	ldrb	r2, [r7, #12]
 800b1d4:	490f      	ldr	r1, [pc, #60]	@ (800b214 <UARTEx_SetNbDataToProcess+0x98>)
 800b1d6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b1d8:	fb93 f3f2 	sdiv	r3, r3, r2
 800b1dc:	b29a      	uxth	r2, r3
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b1e4:	7bfb      	ldrb	r3, [r7, #15]
 800b1e6:	7b7a      	ldrb	r2, [r7, #13]
 800b1e8:	4909      	ldr	r1, [pc, #36]	@ (800b210 <UARTEx_SetNbDataToProcess+0x94>)
 800b1ea:	5c8a      	ldrb	r2, [r1, r2]
 800b1ec:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b1f0:	7b7a      	ldrb	r2, [r7, #13]
 800b1f2:	4908      	ldr	r1, [pc, #32]	@ (800b214 <UARTEx_SetNbDataToProcess+0x98>)
 800b1f4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b1f6:	fb93 f3f2 	sdiv	r3, r3, r2
 800b1fa:	b29a      	uxth	r2, r3
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800b202:	bf00      	nop
 800b204:	3714      	adds	r7, #20
 800b206:	46bd      	mov	sp, r7
 800b208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b20c:	4770      	bx	lr
 800b20e:	bf00      	nop
 800b210:	08012e40 	.word	0x08012e40
 800b214:	08012e48 	.word	0x08012e48

0800b218 <Data_Analyse>:
/**
 * @brief 数据解析函数  如更换MCU平台或更换软件库，只需将串口接收到的值传入该函数即可解析
 * @param  rec 串口接收到的字节数据
 */
void Data_Analyse(uint8_t rec)
{
 800b218:	b480      	push	{r7}
 800b21a:	b083      	sub	sp, #12
 800b21c:	af00      	add	r7, sp, #0
 800b21e:	4603      	mov	r3, r0
 800b220:	71fb      	strb	r3, [r7, #7]
		float ActVal[6];
	} posture;
	static uint8_t count = 0;
	static uint8_t i = 0;

	ch = rec;
 800b222:	4a48      	ldr	r2, [pc, #288]	@ (800b344 <Data_Analyse+0x12c>)
 800b224:	79fb      	ldrb	r3, [r7, #7]
 800b226:	7013      	strb	r3, [r2, #0]
//	HAL_UART_Transmit(&huart10, &ch, 1, 0xff);
//	HAL_UART_Transmit(&huart10, (uint8_t*) ch, 1, 0xff);
	switch (count)
 800b228:	4b47      	ldr	r3, [pc, #284]	@ (800b348 <Data_Analyse+0x130>)
 800b22a:	781b      	ldrb	r3, [r3, #0]
 800b22c:	2b04      	cmp	r3, #4
 800b22e:	d87c      	bhi.n	800b32a <Data_Analyse+0x112>
 800b230:	a201      	add	r2, pc, #4	@ (adr r2, 800b238 <Data_Analyse+0x20>)
 800b232:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b236:	bf00      	nop
 800b238:	0800b24d 	.word	0x0800b24d
 800b23c:	0800b26b 	.word	0x0800b26b
 800b240:	0800b297 	.word	0x0800b297
 800b244:	0800b2cd 	.word	0x0800b2cd
 800b248:	0800b2eb 	.word	0x0800b2eb
	{
	case 0:
		if (ch == 0x0d)
 800b24c:	4b3d      	ldr	r3, [pc, #244]	@ (800b344 <Data_Analyse+0x12c>)
 800b24e:	781b      	ldrb	r3, [r3, #0]
 800b250:	2b0d      	cmp	r3, #13
 800b252:	d106      	bne.n	800b262 <Data_Analyse+0x4a>
			count++;
 800b254:	4b3c      	ldr	r3, [pc, #240]	@ (800b348 <Data_Analyse+0x130>)
 800b256:	781b      	ldrb	r3, [r3, #0]
 800b258:	3301      	adds	r3, #1
 800b25a:	b2da      	uxtb	r2, r3
 800b25c:	4b3a      	ldr	r3, [pc, #232]	@ (800b348 <Data_Analyse+0x130>)
 800b25e:	701a      	strb	r2, [r3, #0]
		else
			count = 0;
		break;
 800b260:	e06a      	b.n	800b338 <Data_Analyse+0x120>
			count = 0;
 800b262:	4b39      	ldr	r3, [pc, #228]	@ (800b348 <Data_Analyse+0x130>)
 800b264:	2200      	movs	r2, #0
 800b266:	701a      	strb	r2, [r3, #0]
		break;
 800b268:	e066      	b.n	800b338 <Data_Analyse+0x120>
	case 1:
		if (ch == 0x0a)
 800b26a:	4b36      	ldr	r3, [pc, #216]	@ (800b344 <Data_Analyse+0x12c>)
 800b26c:	781b      	ldrb	r3, [r3, #0]
 800b26e:	2b0a      	cmp	r3, #10
 800b270:	d109      	bne.n	800b286 <Data_Analyse+0x6e>
		{
			i = 0;
 800b272:	4b36      	ldr	r3, [pc, #216]	@ (800b34c <Data_Analyse+0x134>)
 800b274:	2200      	movs	r2, #0
 800b276:	701a      	strb	r2, [r3, #0]
			count++;
 800b278:	4b33      	ldr	r3, [pc, #204]	@ (800b348 <Data_Analyse+0x130>)
 800b27a:	781b      	ldrb	r3, [r3, #0]
 800b27c:	3301      	adds	r3, #1
 800b27e:	b2da      	uxtb	r2, r3
 800b280:	4b31      	ldr	r3, [pc, #196]	@ (800b348 <Data_Analyse+0x130>)
 800b282:	701a      	strb	r2, [r3, #0]
		}
		else if (ch == 0x0d)
			;
		else
			count = 0;
		break;
 800b284:	e055      	b.n	800b332 <Data_Analyse+0x11a>
		else if (ch == 0x0d)
 800b286:	4b2f      	ldr	r3, [pc, #188]	@ (800b344 <Data_Analyse+0x12c>)
 800b288:	781b      	ldrb	r3, [r3, #0]
 800b28a:	2b0d      	cmp	r3, #13
 800b28c:	d051      	beq.n	800b332 <Data_Analyse+0x11a>
			count = 0;
 800b28e:	4b2e      	ldr	r3, [pc, #184]	@ (800b348 <Data_Analyse+0x130>)
 800b290:	2200      	movs	r2, #0
 800b292:	701a      	strb	r2, [r3, #0]
		break;
 800b294:	e04d      	b.n	800b332 <Data_Analyse+0x11a>
	case 2:
		posture.date[i] = ch;
 800b296:	4b2d      	ldr	r3, [pc, #180]	@ (800b34c <Data_Analyse+0x134>)
 800b298:	781b      	ldrb	r3, [r3, #0]
 800b29a:	461a      	mov	r2, r3
 800b29c:	4b29      	ldr	r3, [pc, #164]	@ (800b344 <Data_Analyse+0x12c>)
 800b29e:	7819      	ldrb	r1, [r3, #0]
 800b2a0:	4b2b      	ldr	r3, [pc, #172]	@ (800b350 <Data_Analyse+0x138>)
 800b2a2:	5499      	strb	r1, [r3, r2]
		i++;
 800b2a4:	4b29      	ldr	r3, [pc, #164]	@ (800b34c <Data_Analyse+0x134>)
 800b2a6:	781b      	ldrb	r3, [r3, #0]
 800b2a8:	3301      	adds	r3, #1
 800b2aa:	b2da      	uxtb	r2, r3
 800b2ac:	4b27      	ldr	r3, [pc, #156]	@ (800b34c <Data_Analyse+0x134>)
 800b2ae:	701a      	strb	r2, [r3, #0]
		if (i >= 24)
 800b2b0:	4b26      	ldr	r3, [pc, #152]	@ (800b34c <Data_Analyse+0x134>)
 800b2b2:	781b      	ldrb	r3, [r3, #0]
 800b2b4:	2b17      	cmp	r3, #23
 800b2b6:	d93e      	bls.n	800b336 <Data_Analyse+0x11e>
		{
			i = 0;
 800b2b8:	4b24      	ldr	r3, [pc, #144]	@ (800b34c <Data_Analyse+0x134>)
 800b2ba:	2200      	movs	r2, #0
 800b2bc:	701a      	strb	r2, [r3, #0]
			count++;
 800b2be:	4b22      	ldr	r3, [pc, #136]	@ (800b348 <Data_Analyse+0x130>)
 800b2c0:	781b      	ldrb	r3, [r3, #0]
 800b2c2:	3301      	adds	r3, #1
 800b2c4:	b2da      	uxtb	r2, r3
 800b2c6:	4b20      	ldr	r3, [pc, #128]	@ (800b348 <Data_Analyse+0x130>)
 800b2c8:	701a      	strb	r2, [r3, #0]
		}
		break;
 800b2ca:	e034      	b.n	800b336 <Data_Analyse+0x11e>
	case 3:
		if (ch == 0x0a)
 800b2cc:	4b1d      	ldr	r3, [pc, #116]	@ (800b344 <Data_Analyse+0x12c>)
 800b2ce:	781b      	ldrb	r3, [r3, #0]
 800b2d0:	2b0a      	cmp	r3, #10
 800b2d2:	d106      	bne.n	800b2e2 <Data_Analyse+0xca>
			count++;
 800b2d4:	4b1c      	ldr	r3, [pc, #112]	@ (800b348 <Data_Analyse+0x130>)
 800b2d6:	781b      	ldrb	r3, [r3, #0]
 800b2d8:	3301      	adds	r3, #1
 800b2da:	b2da      	uxtb	r2, r3
 800b2dc:	4b1a      	ldr	r3, [pc, #104]	@ (800b348 <Data_Analyse+0x130>)
 800b2de:	701a      	strb	r2, [r3, #0]
		else
			count = 0;
		break;
 800b2e0:	e02a      	b.n	800b338 <Data_Analyse+0x120>
			count = 0;
 800b2e2:	4b19      	ldr	r3, [pc, #100]	@ (800b348 <Data_Analyse+0x130>)
 800b2e4:	2200      	movs	r2, #0
 800b2e6:	701a      	strb	r2, [r3, #0]
		break;
 800b2e8:	e026      	b.n	800b338 <Data_Analyse+0x120>
	case 4:
		if (ch == 0x0d)
 800b2ea:	4b16      	ldr	r3, [pc, #88]	@ (800b344 <Data_Analyse+0x12c>)
 800b2ec:	781b      	ldrb	r3, [r3, #0]
 800b2ee:	2b0d      	cmp	r3, #13
 800b2f0:	d117      	bne.n	800b322 <Data_Analyse+0x10a>
		{
			zangle = posture.ActVal[0];
 800b2f2:	4b17      	ldr	r3, [pc, #92]	@ (800b350 <Data_Analyse+0x138>)
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	4a17      	ldr	r2, [pc, #92]	@ (800b354 <Data_Analyse+0x13c>)
 800b2f8:	6013      	str	r3, [r2, #0]
			xangle = posture.ActVal[1];
 800b2fa:	4b15      	ldr	r3, [pc, #84]	@ (800b350 <Data_Analyse+0x138>)
 800b2fc:	685b      	ldr	r3, [r3, #4]
 800b2fe:	4a16      	ldr	r2, [pc, #88]	@ (800b358 <Data_Analyse+0x140>)
 800b300:	6013      	str	r3, [r2, #0]
			yangle = posture.ActVal[2];
 800b302:	4b13      	ldr	r3, [pc, #76]	@ (800b350 <Data_Analyse+0x138>)
 800b304:	689b      	ldr	r3, [r3, #8]
 800b306:	4a15      	ldr	r2, [pc, #84]	@ (800b35c <Data_Analyse+0x144>)
 800b308:	6013      	str	r3, [r2, #0]
			pos_x = posture.ActVal[3];
 800b30a:	4b11      	ldr	r3, [pc, #68]	@ (800b350 <Data_Analyse+0x138>)
 800b30c:	68db      	ldr	r3, [r3, #12]
 800b30e:	4a14      	ldr	r2, [pc, #80]	@ (800b360 <Data_Analyse+0x148>)
 800b310:	6013      	str	r3, [r2, #0]
			pos_y = posture.ActVal[4];
 800b312:	4b0f      	ldr	r3, [pc, #60]	@ (800b350 <Data_Analyse+0x138>)
 800b314:	691b      	ldr	r3, [r3, #16]
 800b316:	4a13      	ldr	r2, [pc, #76]	@ (800b364 <Data_Analyse+0x14c>)
 800b318:	6013      	str	r3, [r2, #0]
			w_z = posture.ActVal[5];
 800b31a:	4b0d      	ldr	r3, [pc, #52]	@ (800b350 <Data_Analyse+0x138>)
 800b31c:	695b      	ldr	r3, [r3, #20]
 800b31e:	4a12      	ldr	r2, [pc, #72]	@ (800b368 <Data_Analyse+0x150>)
 800b320:	6013      	str	r3, [r2, #0]
		}
		count = 0;
 800b322:	4b09      	ldr	r3, [pc, #36]	@ (800b348 <Data_Analyse+0x130>)
 800b324:	2200      	movs	r2, #0
 800b326:	701a      	strb	r2, [r3, #0]
		break;
 800b328:	e006      	b.n	800b338 <Data_Analyse+0x120>
	default:
		count = 0;
 800b32a:	4b07      	ldr	r3, [pc, #28]	@ (800b348 <Data_Analyse+0x130>)
 800b32c:	2200      	movs	r2, #0
 800b32e:	701a      	strb	r2, [r3, #0]
		break;
 800b330:	e002      	b.n	800b338 <Data_Analyse+0x120>
		break;
 800b332:	bf00      	nop
 800b334:	e000      	b.n	800b338 <Data_Analyse+0x120>
		break;
 800b336:	bf00      	nop
	}
}
 800b338:	bf00      	nop
 800b33a:	370c      	adds	r7, #12
 800b33c:	46bd      	mov	sp, r7
 800b33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b342:	4770      	bx	lr
 800b344:	24000ac0 	.word	0x24000ac0
 800b348:	24000ac1 	.word	0x24000ac1
 800b34c:	24000ac2 	.word	0x24000ac2
 800b350:	24000ac4 	.word	0x24000ac4
 800b354:	24000ab0 	.word	0x24000ab0
 800b358:	24000ab4 	.word	0x24000ab4
 800b35c:	24000ab8 	.word	0x24000ab8
 800b360:	24000aa8 	.word	0x24000aa8
 800b364:	24000aac 	.word	0x24000aac
 800b368:	24000abc 	.word	0x24000abc

0800b36c <Move_Arm>:
#define Emm_Speed  50     //步进电机
#define Emm_Acc  50
#define Max_High 12000
//控制单个舵机运动
//参数：sevoID:舵机ID，Position:转动角度（这里以270°为例）,Time:转动时间
void Move_Arm(uint8_t servoID, int16_t Position, uint16_t Time) {
 800b36c:	b580      	push	{r7, lr}
 800b36e:	b086      	sub	sp, #24
 800b370:	af00      	add	r7, sp, #0
 800b372:	4603      	mov	r3, r0
 800b374:	71fb      	strb	r3, [r7, #7]
 800b376:	460b      	mov	r3, r1
 800b378:	80bb      	strh	r3, [r7, #4]
 800b37a:	4613      	mov	r3, r2
 800b37c:	807b      	strh	r3, [r7, #2]
	uint8_t TxBuf[11];
	if (servoID > 31 || !(Time > 0) || Position > 32767) {
 800b37e:	79fb      	ldrb	r3, [r7, #7]
 800b380:	2b1f      	cmp	r3, #31
 800b382:	d82b      	bhi.n	800b3dc <Move_Arm+0x70>
 800b384:	887b      	ldrh	r3, [r7, #2]
 800b386:	2b00      	cmp	r3, #0
 800b388:	d028      	beq.n	800b3dc <Move_Arm+0x70>
		return;
	}
	TxBuf[0] = FRAME_HEADER;
 800b38a:	2355      	movs	r3, #85	@ 0x55
 800b38c:	733b      	strb	r3, [r7, #12]
	TxBuf[1] = FRAME_HEADER;
 800b38e:	2355      	movs	r3, #85	@ 0x55
 800b390:	737b      	strb	r3, [r7, #13]
	TxBuf[2] = 8;
 800b392:	2308      	movs	r3, #8
 800b394:	73bb      	strb	r3, [r7, #14]
	TxBuf[3] = CMD_SERVO_MOVE;
 800b396:	2303      	movs	r3, #3
 800b398:	73fb      	strb	r3, [r7, #15]
	TxBuf[4] = 1;
 800b39a:	2301      	movs	r3, #1
 800b39c:	743b      	strb	r3, [r7, #16]
	TxBuf[5] = (uint8_t) Time;
 800b39e:	887b      	ldrh	r3, [r7, #2]
 800b3a0:	b2db      	uxtb	r3, r3
 800b3a2:	747b      	strb	r3, [r7, #17]
	TxBuf[6] = (uint8_t) (Time >> 8);
 800b3a4:	887b      	ldrh	r3, [r7, #2]
 800b3a6:	0a1b      	lsrs	r3, r3, #8
 800b3a8:	b29b      	uxth	r3, r3
 800b3aa:	b2db      	uxtb	r3, r3
 800b3ac:	74bb      	strb	r3, [r7, #18]
	TxBuf[7] = servoID;
 800b3ae:	79fb      	ldrb	r3, [r7, #7]
 800b3b0:	74fb      	strb	r3, [r7, #19]
	TxBuf[8] = (uint8_t) Position;
 800b3b2:	88bb      	ldrh	r3, [r7, #4]
 800b3b4:	b2db      	uxtb	r3, r3
 800b3b6:	753b      	strb	r3, [r7, #20]
	TxBuf[9] = (uint8_t) (Position >> 8);
 800b3b8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800b3bc:	121b      	asrs	r3, r3, #8
 800b3be:	b21b      	sxth	r3, r3
 800b3c0:	b2db      	uxtb	r3, r3
 800b3c2:	757b      	strb	r3, [r7, #21]

	HAL_UART_Transmit(&jixiebi_usart, TxBuf, 10, 0xffff);
 800b3c4:	f107 010c 	add.w	r1, r7, #12
 800b3c8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b3cc:	220a      	movs	r2, #10
 800b3ce:	4805      	ldr	r0, [pc, #20]	@ (800b3e4 <Move_Arm+0x78>)
 800b3d0:	f7fd f978 	bl	80086c4 <HAL_UART_Transmit>
	HAL_Delay(5);
 800b3d4:	2005      	movs	r0, #5
 800b3d6:	f7f7 fc11 	bl	8002bfc <HAL_Delay>
 800b3da:	e000      	b.n	800b3de <Move_Arm+0x72>
		return;
 800b3dc:	bf00      	nop

}
 800b3de:	3718      	adds	r7, #24
 800b3e0:	46bd      	mov	sp, r7
 800b3e2:	bd80      	pop	{r7, pc}
 800b3e4:	24000604 	.word	0x24000604

0800b3e8 <catch_Frist>:

}
//步进上升1800  下降1800
extern float x, y;
void catch_Frist(uint16_t Pos1, uint16_t Pos2) //5400
{
 800b3e8:	b580      	push	{r7, lr}
 800b3ea:	b082      	sub	sp, #8
 800b3ec:	af00      	add	r7, sp, #0
 800b3ee:	4603      	mov	r3, r0
 800b3f0:	460a      	mov	r2, r1
 800b3f2:	80fb      	strh	r3, [r7, #6]
 800b3f4:	4613      	mov	r3, r2
 800b3f6:	80bb      	strh	r3, [r7, #4]
	WritePosEx(0, Pos1, 500, 50); //物料底盘移动
 800b3f8:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 800b3fc:	2332      	movs	r3, #50	@ 0x32
 800b3fe:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800b402:	2000      	movs	r0, #0
 800b404:	f002 fb60 	bl	800dac8 <WritePosEx>

	Move_Arm(1, Arm_close, time); //爪子闭合
 800b408:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b40c:	2114      	movs	r1, #20
 800b40e:	2001      	movs	r0, #1
 800b410:	f7ff ffac 	bl	800b36c <Move_Arm>
	HAL_Delay(time);
 800b414:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800b418:	f7f7 fbf0 	bl	8002bfc <HAL_Delay>
	Drop_Location_Sheng(Emm_Speed, Emm_Acc, 500);
 800b41c:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800b420:	2132      	movs	r1, #50	@ 0x32
 800b422:	2032      	movs	r0, #50	@ 0x32
 800b424:	f001 fb4a 	bl	800cabc <Drop_Location_Sheng>
//	HAL_Delay(3000);
	WritePosEx(1, Pos2, 500, 50); //爪子底盘向左
 800b428:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800b42c:	2332      	movs	r3, #50	@ 0x32
 800b42e:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800b432:	2001      	movs	r0, #1
 800b434:	f002 fb48 	bl	800dac8 <WritePosEx>
	HAL_Delay(3000);
 800b438:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800b43c:	f7f7 fbde 	bl	8002bfc <HAL_Delay>
//	{
//		WritePosEx(1, 4045, 500, 50); //爪子底盘向左
//		HAL_Delay(1500);
//		Grab_count--;
//	}
	Move_Arm(6, 550, time); //爪子下降
 800b440:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b444:	f240 2126 	movw	r1, #550	@ 0x226
 800b448:	2006      	movs	r0, #6
 800b44a:	f7ff ff8f 	bl	800b36c <Move_Arm>
	Drop_Location_jiang(Emm_Speed, Emm_Acc, 4500);
 800b44e:	f241 1294 	movw	r2, #4500	@ 0x1194
 800b452:	2132      	movs	r1, #50	@ 0x32
 800b454:	2032      	movs	r0, #50	@ 0x32
 800b456:	f001 faed 	bl	800ca34 <Drop_Location_jiang>
	Move_Arm(1, 190, time); //爪子张开
 800b45a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b45e:	21be      	movs	r1, #190	@ 0xbe
 800b460:	2001      	movs	r0, #1
 800b462:	f7ff ff83 	bl	800b36c <Move_Arm>
	HAL_Delay(time);
 800b466:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800b46a:	f7f7 fbc7 	bl	8002bfc <HAL_Delay>
	Move_Arm(6, 1000, time); //爪子上升
 800b46e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b472:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800b476:	2006      	movs	r0, #6
 800b478:	f7ff ff78 	bl	800b36c <Move_Arm>
	Drop_Location_jiang(Emm_Speed, Emm_Acc, 500);
 800b47c:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800b480:	2132      	movs	r1, #50	@ 0x32
 800b482:	2032      	movs	r0, #50	@ 0x32
 800b484:	f001 fad6 	bl	800ca34 <Drop_Location_jiang>

	WritePosEx(1, 4050, 500, 50); //爪子底盘向左
 800b488:	2332      	movs	r3, #50	@ 0x32
 800b48a:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800b48e:	f640 71d2 	movw	r1, #4050	@ 0xfd2
 800b492:	2001      	movs	r0, #1
 800b494:	f002 fb18 	bl	800dac8 <WritePosEx>
	HAL_Delay(1500);
 800b498:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 800b49c:	f7f7 fbae 	bl	8002bfc <HAL_Delay>
	Move_Arm(1, 500, time); //爪子张开
 800b4a0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b4a4:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800b4a8:	2001      	movs	r0, #1
 800b4aa:	f7ff ff5f 	bl	800b36c <Move_Arm>
	Drop_Location_jiang(Emm_Speed, Emm_Acc, 8600);
 800b4ae:	f242 1298 	movw	r2, #8600	@ 0x2198
 800b4b2:	2132      	movs	r1, #50	@ 0x32
 800b4b4:	2032      	movs	r0, #50	@ 0x32
 800b4b6:	f001 fabd 	bl	800ca34 <Drop_Location_jiang>
}
 800b4ba:	bf00      	nop
 800b4bc:	3708      	adds	r7, #8
 800b4be:	46bd      	mov	sp, r7
 800b4c0:	bd80      	pop	{r7, pc}

0800b4c2 <catch_Second>:
//上升1800，下降1800
void catch_Second(uint16_t Pos1, uint16_t Pos2) //从地上抓取到车上
{
 800b4c2:	b580      	push	{r7, lr}
 800b4c4:	b082      	sub	sp, #8
 800b4c6:	af00      	add	r7, sp, #0
 800b4c8:	4603      	mov	r3, r0
 800b4ca:	460a      	mov	r2, r1
 800b4cc:	80fb      	strh	r3, [r7, #6]
 800b4ce:	4613      	mov	r3, r2
 800b4d0:	80bb      	strh	r3, [r7, #4]

	WritePosEx(0, Pos1, 500, 50); //物料底盘移动
 800b4d2:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 800b4d6:	2332      	movs	r3, #50	@ 0x32
 800b4d8:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800b4dc:	2000      	movs	r0, #0
 800b4de:	f002 faf3 	bl	800dac8 <WritePosEx>
	Move_Arm(1, 500, time); //爪子张开
 800b4e2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b4e6:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800b4ea:	2001      	movs	r0, #1
 800b4ec:	f7ff ff3e 	bl	800b36c <Move_Arm>
	HAL_Delay(time);
 800b4f0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800b4f4:	f7f7 fb82 	bl	8002bfc <HAL_Delay>
	Move_Arm(6, 360, time); //爪子下降
 800b4f8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b4fc:	f44f 71b4 	mov.w	r1, #360	@ 0x168
 800b500:	2006      	movs	r0, #6
 800b502:	f7ff ff33 	bl	800b36c <Move_Arm>
	HAL_Delay(time);
 800b506:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800b50a:	f7f7 fb77 	bl	8002bfc <HAL_Delay>

	Move_Arm(1, Arm_close, time); //爪子闭合
 800b50e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b512:	2114      	movs	r1, #20
 800b514:	2001      	movs	r0, #1
 800b516:	f7ff ff29 	bl	800b36c <Move_Arm>
	HAL_Delay(time);
 800b51a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800b51e:	f7f7 fb6d 	bl	8002bfc <HAL_Delay>
	Move_Arm(6, 1000, time); //爪子上升
 800b522:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b526:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800b52a:	2006      	movs	r0, #6
 800b52c:	f7ff ff1e 	bl	800b36c <Move_Arm>
	HAL_Delay(time);
 800b530:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800b534:	f7f7 fb62 	bl	8002bfc <HAL_Delay>
	Drop_Location_jiang(Emm_Speed, Emm_Acc, 1000);
 800b538:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b53c:	2132      	movs	r1, #50	@ 0x32
 800b53e:	2032      	movs	r0, #50	@ 0x32
 800b540:	f001 fa78 	bl	800ca34 <Drop_Location_jiang>
	WritePosEx(1, Pos2, 500, 50); //爪子底盘向左
 800b544:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800b548:	2332      	movs	r3, #50	@ 0x32
 800b54a:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800b54e:	2001      	movs	r0, #1
 800b550:	f002 faba 	bl	800dac8 <WritePosEx>
	HAL_Delay(5000);
 800b554:	f241 3088 	movw	r0, #5000	@ 0x1388
 800b558:	f7f7 fb50 	bl	8002bfc <HAL_Delay>
	Drop_Location_jiang(Emm_Speed, Emm_Acc, 5000);
 800b55c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b560:	2132      	movs	r1, #50	@ 0x32
 800b562:	2032      	movs	r0, #50	@ 0x32
 800b564:	f001 fa66 	bl	800ca34 <Drop_Location_jiang>
	Move_Arm(6, 550, time); //爪子下降
 800b568:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b56c:	f240 2126 	movw	r1, #550	@ 0x226
 800b570:	2006      	movs	r0, #6
 800b572:	f7ff fefb 	bl	800b36c <Move_Arm>
	HAL_Delay(time);
 800b576:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800b57a:	f7f7 fb3f 	bl	8002bfc <HAL_Delay>
	Move_Arm(1, 190, time); //爪子张开
 800b57e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b582:	21be      	movs	r1, #190	@ 0xbe
 800b584:	2001      	movs	r0, #1
 800b586:	f7ff fef1 	bl	800b36c <Move_Arm>
	HAL_Delay(time);
 800b58a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800b58e:	f7f7 fb35 	bl	8002bfc <HAL_Delay>
	Move_Arm(6, 1000, time); //爪子上升
 800b592:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b596:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800b59a:	2006      	movs	r0, #6
 800b59c:	f7ff fee6 	bl	800b36c <Move_Arm>
	HAL_Delay(time);
 800b5a0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800b5a4:	f7f7 fb2a 	bl	8002bfc <HAL_Delay>
	Drop_Location_jiang(Emm_Speed, Emm_Acc, 5000);
 800b5a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b5ac:	2132      	movs	r1, #50	@ 0x32
 800b5ae:	2032      	movs	r0, #50	@ 0x32
 800b5b0:	f001 fa40 	bl	800ca34 <Drop_Location_jiang>
	WritePosEx(1, 4045, 500, 50); //爪子底盘向左
 800b5b4:	2332      	movs	r3, #50	@ 0x32
 800b5b6:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800b5ba:	f640 71cd 	movw	r1, #4045	@ 0xfcd
 800b5be:	2001      	movs	r0, #1
 800b5c0:	f002 fa82 	bl	800dac8 <WritePosEx>
	HAL_Delay(1500);
 800b5c4:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 800b5c8:	f7f7 fb18 	bl	8002bfc <HAL_Delay>
	Move_Arm(1, 500, time); //爪子张开
 800b5cc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b5d0:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800b5d4:	2001      	movs	r0, #1
 800b5d6:	f7ff fec9 	bl	800b36c <Move_Arm>
	HAL_Delay(time);
 800b5da:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800b5de:	f7f7 fb0d 	bl	8002bfc <HAL_Delay>
	Drop_Location_jiang(Emm_Speed, Emm_Acc, 11000);
 800b5e2:	f642 22f8 	movw	r2, #11000	@ 0x2af8
 800b5e6:	2132      	movs	r1, #50	@ 0x32
 800b5e8:	2032      	movs	r0, #50	@ 0x32
 800b5ea:	f001 fa23 	bl	800ca34 <Drop_Location_jiang>

}
 800b5ee:	bf00      	nop
 800b5f0:	3708      	adds	r7, #8
 800b5f2:	46bd      	mov	sp, r7
 800b5f4:	bd80      	pop	{r7, pc}
	...

0800b5f8 <Start>:

extern int QR_Flag;
void Start(void) //下降14000
{
 800b5f8:	b580      	push	{r7, lr}
 800b5fa:	af00      	add	r7, sp, #0
//	先将爪子升起来，避免打到TX2或者物料盘
	Drop_Location_jiang(200, 120, 4000);
 800b5fc:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 800b600:	2178      	movs	r1, #120	@ 0x78
 800b602:	20c8      	movs	r0, #200	@ 0xc8
 800b604:	f001 fa16 	bl	800ca34 <Drop_Location_jiang>
//	将舵机向外转动
	FT_Servo_Orth();
 800b608:	f002 fcb7 	bl	800df7a <FT_Servo_Orth>
//	HAL_Delay(2000);
	Drop_Location_jiang(200, 120, 12000);
 800b60c:	f642 62e0 	movw	r2, #12000	@ 0x2ee0
 800b610:	2178      	movs	r1, #120	@ 0x78
 800b612:	20c8      	movs	r0, #200	@ 0xc8
 800b614:	f001 fa0e 	bl	800ca34 <Drop_Location_jiang>
	Move_Arm(1, 500, 300); //爪子张开
 800b618:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800b61c:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800b620:	2001      	movs	r0, #1
 800b622:	f7ff fea3 	bl	800b36c <Move_Arm>
	while (!QR_Flag)
 800b626:	bf00      	nop
 800b628:	4b05      	ldr	r3, [pc, #20]	@ (800b640 <Start+0x48>)
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d0fb      	beq.n	800b628 <Start+0x30>
		;  //等待扫码完成
	Drop_Location_jiang(200, 120, 8600);
 800b630:	f242 1298 	movw	r2, #8600	@ 0x2198
 800b634:	2178      	movs	r1, #120	@ 0x78
 800b636:	20c8      	movs	r0, #200	@ 0xc8
 800b638:	f001 f9fc 	bl	800ca34 <Drop_Location_jiang>
}
 800b63c:	bf00      	nop
 800b63e:	bd80      	pop	{r7, pc}
 800b640:	24000484 	.word	0x24000484

0800b644 <put>:
void put(uint16_t Pos1, uint16_t Pos2) {
 800b644:	b580      	push	{r7, lr}
 800b646:	b082      	sub	sp, #8
 800b648:	af00      	add	r7, sp, #0
 800b64a:	4603      	mov	r3, r0
 800b64c:	460a      	mov	r2, r1
 800b64e:	80fb      	strh	r3, [r7, #6]
 800b650:	4613      	mov	r3, r2
 800b652:	80bb      	strh	r3, [r7, #4]
	WritePosEx(0, Pos1, 1000, 100); //物料底盘移动
 800b654:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 800b658:	2364      	movs	r3, #100	@ 0x64
 800b65a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b65e:	2000      	movs	r0, #0
 800b660:	f002 fa32 	bl	800dac8 <WritePosEx>
	Move_Arm(6, 1000, time); //爪子上升
 800b664:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b668:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800b66c:	2006      	movs	r0, #6
 800b66e:	f7ff fe7d 	bl	800b36c <Move_Arm>
	Move_Arm(1, 150, time); //爪子张开
 800b672:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b676:	2196      	movs	r1, #150	@ 0x96
 800b678:	2001      	movs	r0, #1
 800b67a:	f7ff fe77 	bl	800b36c <Move_Arm>
	Drop_Location_jiang(Emm_Speed, Emm_Acc, 3500);
 800b67e:	f640 52ac 	movw	r2, #3500	@ 0xdac
 800b682:	2132      	movs	r1, #50	@ 0x32
 800b684:	2032      	movs	r0, #50	@ 0x32
 800b686:	f001 f9d5 	bl	800ca34 <Drop_Location_jiang>
	HAL_Delay(1000);
 800b68a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800b68e:	f7f7 fab5 	bl	8002bfc <HAL_Delay>
	WritePosEx(1, Pos2, 800, 50); //爪子底盘向左
 800b692:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800b696:	2332      	movs	r3, #50	@ 0x32
 800b698:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800b69c:	2001      	movs	r0, #1
 800b69e:	f002 fa13 	bl	800dac8 <WritePosEx>
	HAL_Delay(2000);                                       //延时是为了抓取底盘降下来，防止变转变降
 800b6a2:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800b6a6:	f7f7 faa9 	bl	8002bfc <HAL_Delay>
	Move_Arm(6, 410, time); //爪子下降
 800b6aa:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b6ae:	f44f 71cd 	mov.w	r1, #410	@ 0x19a
 800b6b2:	2006      	movs	r0, #6
 800b6b4:	f7ff fe5a 	bl	800b36c <Move_Arm>
	HAL_Delay(time);
 800b6b8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800b6bc:	f7f7 fa9e 	bl	8002bfc <HAL_Delay>
	Move_Arm(1, Arm_close, time); //爪子闭合
 800b6c0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b6c4:	2114      	movs	r1, #20
 800b6c6:	2001      	movs	r0, #1
 800b6c8:	f7ff fe50 	bl	800b36c <Move_Arm>
	HAL_Delay(time);
 800b6cc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800b6d0:	f7f7 fa94 	bl	8002bfc <HAL_Delay>
	Move_Arm(6, 1000, time); //爪子上升
 800b6d4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b6d8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800b6dc:	2006      	movs	r0, #6
 800b6de:	f7ff fe45 	bl	800b36c <Move_Arm>
	Drop_Location_jiang(Emm_Speed, Emm_Acc, 1000);
 800b6e2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b6e6:	2132      	movs	r1, #50	@ 0x32
 800b6e8:	2032      	movs	r0, #50	@ 0x32
 800b6ea:	f001 f9a3 	bl	800ca34 <Drop_Location_jiang>
	WritePosEx(1, 4100, 800, 50); //抓取底盘向摆放位置
 800b6ee:	2332      	movs	r3, #50	@ 0x32
 800b6f0:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800b6f4:	f241 0104 	movw	r1, #4100	@ 0x1004
 800b6f8:	2001      	movs	r0, #1
 800b6fa:	f002 f9e5 	bl	800dac8 <WritePosEx>
	HAL_Delay(2000);                                        //延时是为了让抓取底盘转过来
 800b6fe:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800b702:	f7f7 fa7b 	bl	8002bfc <HAL_Delay>
	Move_Arm(6, 360, time); //爪子下降
 800b706:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b70a:	f44f 71b4 	mov.w	r1, #360	@ 0x168
 800b70e:	2006      	movs	r0, #6
 800b710:	f7ff fe2c 	bl	800b36c <Move_Arm>
	Drop_Location_jiang(Emm_Speed, Emm_Acc, 11000);
 800b714:	f642 22f8 	movw	r2, #11000	@ 0x2af8
 800b718:	2132      	movs	r1, #50	@ 0x32
 800b71a:	2032      	movs	r0, #50	@ 0x32
 800b71c:	f001 f98a 	bl	800ca34 <Drop_Location_jiang>
	Move_Arm(1, 500, time); //爪子张开
 800b720:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b724:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800b728:	2001      	movs	r0, #1
 800b72a:	f7ff fe1f 	bl	800b36c <Move_Arm>

}
 800b72e:	bf00      	nop
 800b730:	3708      	adds	r7, #8
 800b732:	46bd      	mov	sp, r7
 800b734:	bd80      	pop	{r7, pc}
	...

0800b738 <Realize_Stop>:
	Move_Arm(1, 500, time); //爪子张开
}
//爪子在高5000处，必须搭配一个下降

extern int QR_data[6];
void Realize_Stop() {
 800b738:	b480      	push	{r7}
 800b73a:	b083      	sub	sp, #12
 800b73c:	af00      	add	r7, sp, #0
	float err_x, err_y;

	while (1) {
		err_x = x;
 800b73e:	4b15      	ldr	r3, [pc, #84]	@ (800b794 <Realize_Stop+0x5c>)
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	607b      	str	r3, [r7, #4]
		err_y = y;
 800b744:	4b14      	ldr	r3, [pc, #80]	@ (800b798 <Realize_Stop+0x60>)
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	603b      	str	r3, [r7, #0]
		if (x - err_x <= 5 && y - err_y <= 5) {
 800b74a:	4b12      	ldr	r3, [pc, #72]	@ (800b794 <Realize_Stop+0x5c>)
 800b74c:	ed93 7a00 	vldr	s14, [r3]
 800b750:	edd7 7a01 	vldr	s15, [r7, #4]
 800b754:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b758:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 800b75c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b760:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b764:	d80d      	bhi.n	800b782 <Realize_Stop+0x4a>
 800b766:	4b0c      	ldr	r3, [pc, #48]	@ (800b798 <Realize_Stop+0x60>)
 800b768:	ed93 7a00 	vldr	s14, [r3]
 800b76c:	edd7 7a00 	vldr	s15, [r7]
 800b770:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b774:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 800b778:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b77c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b780:	d900      	bls.n	800b784 <Realize_Stop+0x4c>
		err_x = x;
 800b782:	e7dc      	b.n	800b73e <Realize_Stop+0x6>
			break;
 800b784:	bf00      	nop
		}
	}
}
 800b786:	bf00      	nop
 800b788:	370c      	adds	r7, #12
 800b78a:	46bd      	mov	sp, r7
 800b78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b790:	4770      	bx	lr
 800b792:	bf00      	nop
 800b794:	24000454 	.word	0x24000454
 800b798:	24000458 	.word	0x24000458

0800b79c <Frist_Grab_Wuliao>:

void Frist_Grab_Wuliao(void) {
 800b79c:	b580      	push	{r7, lr}
 800b79e:	af00      	add	r7, sp, #0
	static uint8_t Grab_count = 0;
	while (Grab_count < 3) {
 800b7a0:	e04a      	b.n	800b838 <Frist_Grab_Wuliao+0x9c>
		if (QR_data[0] == colour && wuliao_falg == 0) {
 800b7a2:	4b29      	ldr	r3, [pc, #164]	@ (800b848 <Frist_Grab_Wuliao+0xac>)
 800b7a4:	681a      	ldr	r2, [r3, #0]
 800b7a6:	4b29      	ldr	r3, [pc, #164]	@ (800b84c <Frist_Grab_Wuliao+0xb0>)
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	429a      	cmp	r2, r3
 800b7ac:	d114      	bne.n	800b7d8 <Frist_Grab_Wuliao+0x3c>
 800b7ae:	4b28      	ldr	r3, [pc, #160]	@ (800b850 <Frist_Grab_Wuliao+0xb4>)
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d110      	bne.n	800b7d8 <Frist_Grab_Wuliao+0x3c>
			Realize_Stop();
 800b7b6:	f7ff ffbf 	bl	800b738 <Realize_Stop>
			catch_Frist(860, 2375);
 800b7ba:	f640 1147 	movw	r1, #2375	@ 0x947
 800b7be:	f44f 7057 	mov.w	r0, #860	@ 0x35c
 800b7c2:	f7ff fe11 	bl	800b3e8 <catch_Frist>
			wuliao_falg = 1;
 800b7c6:	4b22      	ldr	r3, [pc, #136]	@ (800b850 <Frist_Grab_Wuliao+0xb4>)
 800b7c8:	2201      	movs	r2, #1
 800b7ca:	601a      	str	r2, [r3, #0]
			Grab_count += 1;
 800b7cc:	4b21      	ldr	r3, [pc, #132]	@ (800b854 <Frist_Grab_Wuliao+0xb8>)
 800b7ce:	781b      	ldrb	r3, [r3, #0]
 800b7d0:	3301      	adds	r3, #1
 800b7d2:	b2da      	uxtb	r2, r3
 800b7d4:	4b1f      	ldr	r3, [pc, #124]	@ (800b854 <Frist_Grab_Wuliao+0xb8>)
 800b7d6:	701a      	strb	r2, [r3, #0]
		}
		if (QR_data[1] == colour && wuliao_falg == 1) {
 800b7d8:	4b1b      	ldr	r3, [pc, #108]	@ (800b848 <Frist_Grab_Wuliao+0xac>)
 800b7da:	685a      	ldr	r2, [r3, #4]
 800b7dc:	4b1b      	ldr	r3, [pc, #108]	@ (800b84c <Frist_Grab_Wuliao+0xb0>)
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	429a      	cmp	r2, r3
 800b7e2:	d114      	bne.n	800b80e <Frist_Grab_Wuliao+0x72>
 800b7e4:	4b1a      	ldr	r3, [pc, #104]	@ (800b850 <Frist_Grab_Wuliao+0xb4>)
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	2b01      	cmp	r3, #1
 800b7ea:	d110      	bne.n	800b80e <Frist_Grab_Wuliao+0x72>
			Realize_Stop();
 800b7ec:	f7ff ffa4 	bl	800b738 <Realize_Stop>
			catch_Frist(1910, 2370);
 800b7f0:	f640 1142 	movw	r1, #2370	@ 0x942
 800b7f4:	f240 7076 	movw	r0, #1910	@ 0x776
 800b7f8:	f7ff fdf6 	bl	800b3e8 <catch_Frist>
			wuliao_falg = 2;
 800b7fc:	4b14      	ldr	r3, [pc, #80]	@ (800b850 <Frist_Grab_Wuliao+0xb4>)
 800b7fe:	2202      	movs	r2, #2
 800b800:	601a      	str	r2, [r3, #0]
			Grab_count += 1;
 800b802:	4b14      	ldr	r3, [pc, #80]	@ (800b854 <Frist_Grab_Wuliao+0xb8>)
 800b804:	781b      	ldrb	r3, [r3, #0]
 800b806:	3301      	adds	r3, #1
 800b808:	b2da      	uxtb	r2, r3
 800b80a:	4b12      	ldr	r3, [pc, #72]	@ (800b854 <Frist_Grab_Wuliao+0xb8>)
 800b80c:	701a      	strb	r2, [r3, #0]
		}
		if (QR_data[2] == colour && wuliao_falg == 2) {
 800b80e:	4b0e      	ldr	r3, [pc, #56]	@ (800b848 <Frist_Grab_Wuliao+0xac>)
 800b810:	689a      	ldr	r2, [r3, #8]
 800b812:	4b0e      	ldr	r3, [pc, #56]	@ (800b84c <Frist_Grab_Wuliao+0xb0>)
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	429a      	cmp	r2, r3
 800b818:	d10e      	bne.n	800b838 <Frist_Grab_Wuliao+0x9c>
 800b81a:	4b0d      	ldr	r3, [pc, #52]	@ (800b850 <Frist_Grab_Wuliao+0xb4>)
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	2b02      	cmp	r3, #2
 800b820:	d10a      	bne.n	800b838 <Frist_Grab_Wuliao+0x9c>
			Realize_Stop();
 800b822:	f7ff ff89 	bl	800b738 <Realize_Stop>


//(2960, 2370);
			wuliao_falg = 0;
 800b826:	4b0a      	ldr	r3, [pc, #40]	@ (800b850 <Frist_Grab_Wuliao+0xb4>)
 800b828:	2200      	movs	r2, #0
 800b82a:	601a      	str	r2, [r3, #0]
			Grab_count += 1;
 800b82c:	4b09      	ldr	r3, [pc, #36]	@ (800b854 <Frist_Grab_Wuliao+0xb8>)
 800b82e:	781b      	ldrb	r3, [r3, #0]
 800b830:	3301      	adds	r3, #1
 800b832:	b2da      	uxtb	r2, r3
 800b834:	4b07      	ldr	r3, [pc, #28]	@ (800b854 <Frist_Grab_Wuliao+0xb8>)
 800b836:	701a      	strb	r2, [r3, #0]
	while (Grab_count < 3) {
 800b838:	4b06      	ldr	r3, [pc, #24]	@ (800b854 <Frist_Grab_Wuliao+0xb8>)
 800b83a:	781b      	ldrb	r3, [r3, #0]
 800b83c:	2b02      	cmp	r3, #2
 800b83e:	d9b0      	bls.n	800b7a2 <Frist_Grab_Wuliao+0x6>
		}

	}
}
 800b840:	bf00      	nop
 800b842:	bf00      	nop
 800b844:	bd80      	pop	{r7, pc}
 800b846:	bf00      	nop
 800b848:	24000460 	.word	0x24000460
 800b84c:	2400047c 	.word	0x2400047c
 800b850:	24000480 	.word	0x24000480
 800b854:	24000adc 	.word	0x24000adc

0800b858 <put_wuliao_to_circular_frist>:

extern int tx_target, ty_target;
void put_wuliao_to_circular_frist(void) {
 800b858:	b580      	push	{r7, lr}
 800b85a:	b082      	sub	sp, #8
 800b85c:	af00      	add	r7, sp, #0

	for (int i = 0; i < 3; i++) {
 800b85e:	2300      	movs	r3, #0
 800b860:	607b      	str	r3, [r7, #4]
 800b862:	e079      	b.n	800b958 <put_wuliao_to_circular_frist+0x100>
		if (QR_data[i] + 3 == 4) {
 800b864:	4a40      	ldr	r2, [pc, #256]	@ (800b968 <put_wuliao_to_circular_frist+0x110>)
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b86c:	2b01      	cmp	r3, #1
 800b86e:	d105      	bne.n	800b87c <put_wuliao_to_circular_frist+0x24>
			Move_Action_Nopid_Right_Ctrl(1850, 1200);
 800b870:	eddf 0a3e 	vldr	s1, [pc, #248]	@ 800b96c <put_wuliao_to_circular_frist+0x114>
 800b874:	ed9f 0a3e 	vldr	s0, [pc, #248]	@ 800b970 <put_wuliao_to_circular_frist+0x118>
 800b878:	f001 fd12 	bl	800d2a0 <Move_Action_Nopid_Right_Ctrl>

		}
		if (QR_data[i] + 3 == 5) {
 800b87c:	4a3a      	ldr	r2, [pc, #232]	@ (800b968 <put_wuliao_to_circular_frist+0x110>)
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b884:	2b02      	cmp	r3, #2
 800b886:	d105      	bne.n	800b894 <put_wuliao_to_circular_frist+0x3c>
			Move_Action_Nopid_Right_Ctrl(1850, 1050);
 800b888:	eddf 0a3a 	vldr	s1, [pc, #232]	@ 800b974 <put_wuliao_to_circular_frist+0x11c>
 800b88c:	ed9f 0a38 	vldr	s0, [pc, #224]	@ 800b970 <put_wuliao_to_circular_frist+0x118>
 800b890:	f001 fd06 	bl	800d2a0 <Move_Action_Nopid_Right_Ctrl>
		}
		if (QR_data[i] + 3 == 6) {
 800b894:	4a34      	ldr	r2, [pc, #208]	@ (800b968 <put_wuliao_to_circular_frist+0x110>)
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b89c:	2b03      	cmp	r3, #3
 800b89e:	d105      	bne.n	800b8ac <put_wuliao_to_circular_frist+0x54>
			Move_Action_Nopid_Right_Ctrl(1850, 885);
 800b8a0:	eddf 0a35 	vldr	s1, [pc, #212]	@ 800b978 <put_wuliao_to_circular_frist+0x120>
 800b8a4:	ed9f 0a32 	vldr	s0, [pc, #200]	@ 800b970 <put_wuliao_to_circular_frist+0x118>
 800b8a8:	f001 fcfa 	bl	800d2a0 <Move_Action_Nopid_Right_Ctrl>
		}
		if (i == 0) {
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d118      	bne.n	800b8e4 <put_wuliao_to_circular_frist+0x8c>
			Move_Tx_Pid_Ctrl(tx_target, ty_target); //TX调整
 800b8b2:	4b32      	ldr	r3, [pc, #200]	@ (800b97c <put_wuliao_to_circular_frist+0x124>)
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	ee07 3a90 	vmov	s15, r3
 800b8ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b8be:	4b30      	ldr	r3, [pc, #192]	@ (800b980 <put_wuliao_to_circular_frist+0x128>)
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	ee07 3a10 	vmov	s14, r3
 800b8c6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b8ca:	eef0 0a47 	vmov.f32	s1, s14
 800b8ce:	eeb0 0a67 	vmov.f32	s0, s15
 800b8d2:	f001 fe45 	bl	800d560 <Move_Tx_Pid_Ctrl>
			put(2150, 2680);
 800b8d6:	f640 2178 	movw	r1, #2680	@ 0xa78
 800b8da:	f640 0066 	movw	r0, #2150	@ 0x866
 800b8de:	f7ff feb1 	bl	800b644 <put>
 800b8e2:	e036      	b.n	800b952 <put_wuliao_to_circular_frist+0xfa>
		} else if (i == 1) {
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	2b01      	cmp	r3, #1
 800b8e8:	d118      	bne.n	800b91c <put_wuliao_to_circular_frist+0xc4>
			Move_Tx_Pid_Ctrl(tx_target, ty_target); //TX调整
 800b8ea:	4b24      	ldr	r3, [pc, #144]	@ (800b97c <put_wuliao_to_circular_frist+0x124>)
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	ee07 3a90 	vmov	s15, r3
 800b8f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b8f6:	4b22      	ldr	r3, [pc, #136]	@ (800b980 <put_wuliao_to_circular_frist+0x128>)
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	ee07 3a10 	vmov	s14, r3
 800b8fe:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b902:	eef0 0a47 	vmov.f32	s1, s14
 800b906:	eeb0 0a67 	vmov.f32	s0, s15
 800b90a:	f001 fe29 	bl	800d560 <Move_Tx_Pid_Ctrl>
			put(3205, 2680);
 800b90e:	f640 2178 	movw	r1, #2680	@ 0xa78
 800b912:	f640 4085 	movw	r0, #3205	@ 0xc85
 800b916:	f7ff fe95 	bl	800b644 <put>
 800b91a:	e01a      	b.n	800b952 <put_wuliao_to_circular_frist+0xfa>
		} else if (i == 2) {
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	2b02      	cmp	r3, #2
 800b920:	d117      	bne.n	800b952 <put_wuliao_to_circular_frist+0xfa>
			Move_Tx_Pid_Ctrl(tx_target, ty_target); //TX调整
 800b922:	4b16      	ldr	r3, [pc, #88]	@ (800b97c <put_wuliao_to_circular_frist+0x124>)
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	ee07 3a90 	vmov	s15, r3
 800b92a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b92e:	4b14      	ldr	r3, [pc, #80]	@ (800b980 <put_wuliao_to_circular_frist+0x128>)
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	ee07 3a10 	vmov	s14, r3
 800b936:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b93a:	eef0 0a47 	vmov.f32	s1, s14
 800b93e:	eeb0 0a67 	vmov.f32	s0, s15
 800b942:	f001 fe0d 	bl	800d560 <Move_Tx_Pid_Ctrl>
			put(2960, 2370);
 800b946:	f640 1142 	movw	r1, #2370	@ 0x942
 800b94a:	f44f 6039 	mov.w	r0, #2960	@ 0xb90
 800b94e:	f7ff fe79 	bl	800b644 <put>
	for (int i = 0; i < 3; i++) {
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	3301      	adds	r3, #1
 800b956:	607b      	str	r3, [r7, #4]
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	2b02      	cmp	r3, #2
 800b95c:	dd82      	ble.n	800b864 <put_wuliao_to_circular_frist+0xc>
		}

	}
}
 800b95e:	bf00      	nop
 800b960:	bf00      	nop
 800b962:	3708      	adds	r7, #8
 800b964:	46bd      	mov	sp, r7
 800b966:	bd80      	pop	{r7, pc}
 800b968:	24000460 	.word	0x24000460
 800b96c:	44960000 	.word	0x44960000
 800b970:	44e74000 	.word	0x44e74000
 800b974:	44834000 	.word	0x44834000
 800b978:	445d4000 	.word	0x445d4000
 800b97c:	24000000 	.word	0x24000000
 800b980:	24000004 	.word	0x24000004

0800b984 <put_wuliao_to_Car_frist>:

void put_wuliao_to_Car_frist(void) {
 800b984:	b580      	push	{r7, lr}
 800b986:	b082      	sub	sp, #8
 800b988:	af00      	add	r7, sp, #0
	for (int i = 0; i < 3; i++) {
 800b98a:	2300      	movs	r3, #0
 800b98c:	607b      	str	r3, [r7, #4]
 800b98e:	e079      	b.n	800ba84 <put_wuliao_to_Car_frist+0x100>
		if (QR_data[i] == 1) {
 800b990:	4a40      	ldr	r2, [pc, #256]	@ (800ba94 <put_wuliao_to_Car_frist+0x110>)
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b998:	2b01      	cmp	r3, #1
 800b99a:	d105      	bne.n	800b9a8 <put_wuliao_to_Car_frist+0x24>
			Move_Action_Nopid_Right_Ctrl(1850, 1200);
 800b99c:	eddf 0a3e 	vldr	s1, [pc, #248]	@ 800ba98 <put_wuliao_to_Car_frist+0x114>
 800b9a0:	ed9f 0a3e 	vldr	s0, [pc, #248]	@ 800ba9c <put_wuliao_to_Car_frist+0x118>
 800b9a4:	f001 fc7c 	bl	800d2a0 <Move_Action_Nopid_Right_Ctrl>
		}
		if (QR_data[i] == 2) {
 800b9a8:	4a3a      	ldr	r2, [pc, #232]	@ (800ba94 <put_wuliao_to_Car_frist+0x110>)
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b9b0:	2b02      	cmp	r3, #2
 800b9b2:	d105      	bne.n	800b9c0 <put_wuliao_to_Car_frist+0x3c>
			Move_Action_Nopid_Right_Ctrl(1850, 1050);
 800b9b4:	eddf 0a3a 	vldr	s1, [pc, #232]	@ 800baa0 <put_wuliao_to_Car_frist+0x11c>
 800b9b8:	ed9f 0a38 	vldr	s0, [pc, #224]	@ 800ba9c <put_wuliao_to_Car_frist+0x118>
 800b9bc:	f001 fc70 	bl	800d2a0 <Move_Action_Nopid_Right_Ctrl>
		}
		if (QR_data[i] == 3) {
 800b9c0:	4a34      	ldr	r2, [pc, #208]	@ (800ba94 <put_wuliao_to_Car_frist+0x110>)
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b9c8:	2b03      	cmp	r3, #3
 800b9ca:	d105      	bne.n	800b9d8 <put_wuliao_to_Car_frist+0x54>
			Move_Action_Nopid_Right_Ctrl(1850, 885);
 800b9cc:	eddf 0a35 	vldr	s1, [pc, #212]	@ 800baa4 <put_wuliao_to_Car_frist+0x120>
 800b9d0:	ed9f 0a32 	vldr	s0, [pc, #200]	@ 800ba9c <put_wuliao_to_Car_frist+0x118>
 800b9d4:	f001 fc64 	bl	800d2a0 <Move_Action_Nopid_Right_Ctrl>
		}
		if (i == 0) {
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d118      	bne.n	800ba10 <put_wuliao_to_Car_frist+0x8c>
			Move_Tx_Pid_Ctrl(tx_target, ty_target); //TX
 800b9de:	4b32      	ldr	r3, [pc, #200]	@ (800baa8 <put_wuliao_to_Car_frist+0x124>)
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	ee07 3a90 	vmov	s15, r3
 800b9e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b9ea:	4b30      	ldr	r3, [pc, #192]	@ (800baac <put_wuliao_to_Car_frist+0x128>)
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	ee07 3a10 	vmov	s14, r3
 800b9f2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b9f6:	eef0 0a47 	vmov.f32	s1, s14
 800b9fa:	eeb0 0a67 	vmov.f32	s0, s15
 800b9fe:	f001 fdaf 	bl	800d560 <Move_Tx_Pid_Ctrl>
			catch_Second(860, 2375);
 800ba02:	f640 1147 	movw	r1, #2375	@ 0x947
 800ba06:	f44f 7057 	mov.w	r0, #860	@ 0x35c
 800ba0a:	f7ff fd5a 	bl	800b4c2 <catch_Second>
 800ba0e:	e036      	b.n	800ba7e <put_wuliao_to_Car_frist+0xfa>

		} else if (i == 1) {
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	2b01      	cmp	r3, #1
 800ba14:	d118      	bne.n	800ba48 <put_wuliao_to_Car_frist+0xc4>
			Move_Tx_Pid_Ctrl(tx_target, ty_target); //TX调整
 800ba16:	4b24      	ldr	r3, [pc, #144]	@ (800baa8 <put_wuliao_to_Car_frist+0x124>)
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	ee07 3a90 	vmov	s15, r3
 800ba1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ba22:	4b22      	ldr	r3, [pc, #136]	@ (800baac <put_wuliao_to_Car_frist+0x128>)
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	ee07 3a10 	vmov	s14, r3
 800ba2a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800ba2e:	eef0 0a47 	vmov.f32	s1, s14
 800ba32:	eeb0 0a67 	vmov.f32	s0, s15
 800ba36:	f001 fd93 	bl	800d560 <Move_Tx_Pid_Ctrl>
			catch_Second(1910, 2370);
 800ba3a:	f640 1142 	movw	r1, #2370	@ 0x942
 800ba3e:	f240 7076 	movw	r0, #1910	@ 0x776
 800ba42:	f7ff fd3e 	bl	800b4c2 <catch_Second>
 800ba46:	e01a      	b.n	800ba7e <put_wuliao_to_Car_frist+0xfa>
		} else if (i == 2) {
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	2b02      	cmp	r3, #2
 800ba4c:	d117      	bne.n	800ba7e <put_wuliao_to_Car_frist+0xfa>
			Move_Tx_Pid_Ctrl(tx_target, ty_target); //TX调整
 800ba4e:	4b16      	ldr	r3, [pc, #88]	@ (800baa8 <put_wuliao_to_Car_frist+0x124>)
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	ee07 3a90 	vmov	s15, r3
 800ba56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ba5a:	4b14      	ldr	r3, [pc, #80]	@ (800baac <put_wuliao_to_Car_frist+0x128>)
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	ee07 3a10 	vmov	s14, r3
 800ba62:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800ba66:	eef0 0a47 	vmov.f32	s1, s14
 800ba6a:	eeb0 0a67 	vmov.f32	s0, s15
 800ba6e:	f001 fd77 	bl	800d560 <Move_Tx_Pid_Ctrl>
			catch_Second(2960, 2370);
 800ba72:	f640 1142 	movw	r1, #2370	@ 0x942
 800ba76:	f44f 6039 	mov.w	r0, #2960	@ 0xb90
 800ba7a:	f7ff fd22 	bl	800b4c2 <catch_Second>
	for (int i = 0; i < 3; i++) {
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	3301      	adds	r3, #1
 800ba82:	607b      	str	r3, [r7, #4]
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	2b02      	cmp	r3, #2
 800ba88:	dd82      	ble.n	800b990 <put_wuliao_to_Car_frist+0xc>
		}

	}
}
 800ba8a:	bf00      	nop
 800ba8c:	bf00      	nop
 800ba8e:	3708      	adds	r7, #8
 800ba90:	46bd      	mov	sp, r7
 800ba92:	bd80      	pop	{r7, pc}
 800ba94:	24000460 	.word	0x24000460
 800ba98:	44960000 	.word	0x44960000
 800ba9c:	44e74000 	.word	0x44e74000
 800baa0:	44834000 	.word	0x44834000
 800baa4:	445d4000 	.word	0x445d4000
 800baa8:	24000000 	.word	0x24000000
 800baac:	24000004 	.word	0x24000004

0800bab0 <put_wuliao_to_circular_second>:

void put_wuliao_to_circular_second(void) {
 800bab0:	b580      	push	{r7, lr}
 800bab2:	b082      	sub	sp, #8
 800bab4:	af00      	add	r7, sp, #0
	for (int i = 0; i < 3; i++) {
 800bab6:	2300      	movs	r3, #0
 800bab8:	607b      	str	r3, [r7, #4]
 800baba:	e079      	b.n	800bbb0 <put_wuliao_to_circular_second+0x100>
		if (QR_data[i] + 3 == 4) {
 800babc:	4a43      	ldr	r2, [pc, #268]	@ (800bbcc <put_wuliao_to_circular_second+0x11c>)
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bac4:	2b01      	cmp	r3, #1
 800bac6:	d105      	bne.n	800bad4 <put_wuliao_to_circular_second+0x24>
			Move_Action_Nopid_Forward_Ctrl(954, 1850);
 800bac8:	eddf 0a41 	vldr	s1, [pc, #260]	@ 800bbd0 <put_wuliao_to_circular_second+0x120>
 800bacc:	ed9f 0a41 	vldr	s0, [pc, #260]	@ 800bbd4 <put_wuliao_to_circular_second+0x124>
 800bad0:	f001 fa86 	bl	800cfe0 <Move_Action_Nopid_Forward_Ctrl>
		}
		if (QR_data[i] + 3 == 5) {
 800bad4:	4a3d      	ldr	r2, [pc, #244]	@ (800bbcc <put_wuliao_to_circular_second+0x11c>)
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800badc:	2b02      	cmp	r3, #2
 800bade:	d105      	bne.n	800baec <put_wuliao_to_circular_second+0x3c>
			Move_Action_Nopid_Forward_Ctrl(1050, 1850);
 800bae0:	eddf 0a3b 	vldr	s1, [pc, #236]	@ 800bbd0 <put_wuliao_to_circular_second+0x120>
 800bae4:	ed9f 0a3c 	vldr	s0, [pc, #240]	@ 800bbd8 <put_wuliao_to_circular_second+0x128>
 800bae8:	f001 fa7a 	bl	800cfe0 <Move_Action_Nopid_Forward_Ctrl>
		}
		if (QR_data[i] + 3 == 6) {
 800baec:	4a37      	ldr	r2, [pc, #220]	@ (800bbcc <put_wuliao_to_circular_second+0x11c>)
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800baf4:	2b03      	cmp	r3, #3
 800baf6:	d105      	bne.n	800bb04 <put_wuliao_to_circular_second+0x54>
			Move_Action_Nopid_Forward_Ctrl(1208, 1850);
 800baf8:	eddf 0a35 	vldr	s1, [pc, #212]	@ 800bbd0 <put_wuliao_to_circular_second+0x120>
 800bafc:	ed9f 0a37 	vldr	s0, [pc, #220]	@ 800bbdc <put_wuliao_to_circular_second+0x12c>
 800bb00:	f001 fa6e 	bl	800cfe0 <Move_Action_Nopid_Forward_Ctrl>
		}
		if (i == 0) {
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d118      	bne.n	800bb3c <put_wuliao_to_circular_second+0x8c>
			Move_Tx_Pid_Ctrl(tx_target, ty_target); //TX
 800bb0a:	4b35      	ldr	r3, [pc, #212]	@ (800bbe0 <put_wuliao_to_circular_second+0x130>)
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	ee07 3a90 	vmov	s15, r3
 800bb12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bb16:	4b33      	ldr	r3, [pc, #204]	@ (800bbe4 <put_wuliao_to_circular_second+0x134>)
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	ee07 3a10 	vmov	s14, r3
 800bb1e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800bb22:	eef0 0a47 	vmov.f32	s1, s14
 800bb26:	eeb0 0a67 	vmov.f32	s0, s15
 800bb2a:	f001 fd19 	bl	800d560 <Move_Tx_Pid_Ctrl>
			put(2150, 2680);
 800bb2e:	f640 2178 	movw	r1, #2680	@ 0xa78
 800bb32:	f640 0066 	movw	r0, #2150	@ 0x866
 800bb36:	f7ff fd85 	bl	800b644 <put>
 800bb3a:	e036      	b.n	800bbaa <put_wuliao_to_circular_second+0xfa>

		} else if (i == 1) {
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	2b01      	cmp	r3, #1
 800bb40:	d118      	bne.n	800bb74 <put_wuliao_to_circular_second+0xc4>

			Move_Tx_Pid_Ctrl(tx_target, ty_target); //TX
 800bb42:	4b27      	ldr	r3, [pc, #156]	@ (800bbe0 <put_wuliao_to_circular_second+0x130>)
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	ee07 3a90 	vmov	s15, r3
 800bb4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bb4e:	4b25      	ldr	r3, [pc, #148]	@ (800bbe4 <put_wuliao_to_circular_second+0x134>)
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	ee07 3a10 	vmov	s14, r3
 800bb56:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800bb5a:	eef0 0a47 	vmov.f32	s1, s14
 800bb5e:	eeb0 0a67 	vmov.f32	s0, s15
 800bb62:	f001 fcfd 	bl	800d560 <Move_Tx_Pid_Ctrl>
			put(3205, 2680);
 800bb66:	f640 2178 	movw	r1, #2680	@ 0xa78
 800bb6a:	f640 4085 	movw	r0, #3205	@ 0xc85
 800bb6e:	f7ff fd69 	bl	800b644 <put>
 800bb72:	e01a      	b.n	800bbaa <put_wuliao_to_circular_second+0xfa>
		} else if (i == 2) {
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	2b02      	cmp	r3, #2
 800bb78:	d117      	bne.n	800bbaa <put_wuliao_to_circular_second+0xfa>
			Move_Tx_Pid_Ctrl(tx_target, ty_target); //TX
 800bb7a:	4b19      	ldr	r3, [pc, #100]	@ (800bbe0 <put_wuliao_to_circular_second+0x130>)
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	ee07 3a90 	vmov	s15, r3
 800bb82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bb86:	4b17      	ldr	r3, [pc, #92]	@ (800bbe4 <put_wuliao_to_circular_second+0x134>)
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	ee07 3a10 	vmov	s14, r3
 800bb8e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800bb92:	eef0 0a47 	vmov.f32	s1, s14
 800bb96:	eeb0 0a67 	vmov.f32	s0, s15
 800bb9a:	f001 fce1 	bl	800d560 <Move_Tx_Pid_Ctrl>
			put(2960, 2370);
 800bb9e:	f640 1142 	movw	r1, #2370	@ 0x942
 800bba2:	f44f 6039 	mov.w	r0, #2960	@ 0xb90
 800bba6:	f7ff fd4d 	bl	800b644 <put>
	for (int i = 0; i < 3; i++) {
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	3301      	adds	r3, #1
 800bbae:	607b      	str	r3, [r7, #4]
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	2b02      	cmp	r3, #2
 800bbb4:	dd82      	ble.n	800babc <put_wuliao_to_circular_second+0xc>
		}

	}
	Move_Action_Nopid_Forward_Ctrl(1000, 1850);
 800bbb6:	eddf 0a06 	vldr	s1, [pc, #24]	@ 800bbd0 <put_wuliao_to_circular_second+0x120>
 800bbba:	ed9f 0a0b 	vldr	s0, [pc, #44]	@ 800bbe8 <put_wuliao_to_circular_second+0x138>
 800bbbe:	f001 fa0f 	bl	800cfe0 <Move_Action_Nopid_Forward_Ctrl>
}
 800bbc2:	bf00      	nop
 800bbc4:	3708      	adds	r7, #8
 800bbc6:	46bd      	mov	sp, r7
 800bbc8:	bd80      	pop	{r7, pc}
 800bbca:	bf00      	nop
 800bbcc:	24000460 	.word	0x24000460
 800bbd0:	44e74000 	.word	0x44e74000
 800bbd4:	446e8000 	.word	0x446e8000
 800bbd8:	44834000 	.word	0x44834000
 800bbdc:	44970000 	.word	0x44970000
 800bbe0:	24000000 	.word	0x24000000
 800bbe4:	24000004 	.word	0x24000004
 800bbe8:	447a0000 	.word	0x447a0000

0800bbec <Second_Run_Frist_Grab_Wuliao>:

/*************************第二次抓取***********************************************/
void Second_Run_Frist_Grab_Wuliao(void) {
 800bbec:	b580      	push	{r7, lr}
 800bbee:	af00      	add	r7, sp, #0
	static uint8_t Grab_count = 0;
	wuliao_falg = 0;
 800bbf0:	4b2a      	ldr	r3, [pc, #168]	@ (800bc9c <Second_Run_Frist_Grab_Wuliao+0xb0>)
 800bbf2:	2200      	movs	r2, #0
 800bbf4:	601a      	str	r2, [r3, #0]
	while (Grab_count < 3) {
 800bbf6:	e04a      	b.n	800bc8e <Second_Run_Frist_Grab_Wuliao+0xa2>
		if (QR_data[3] == colour && wuliao_falg == 0) {
 800bbf8:	4b29      	ldr	r3, [pc, #164]	@ (800bca0 <Second_Run_Frist_Grab_Wuliao+0xb4>)
 800bbfa:	68da      	ldr	r2, [r3, #12]
 800bbfc:	4b29      	ldr	r3, [pc, #164]	@ (800bca4 <Second_Run_Frist_Grab_Wuliao+0xb8>)
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	429a      	cmp	r2, r3
 800bc02:	d112      	bne.n	800bc2a <Second_Run_Frist_Grab_Wuliao+0x3e>
 800bc04:	4b25      	ldr	r3, [pc, #148]	@ (800bc9c <Second_Run_Frist_Grab_Wuliao+0xb0>)
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d10e      	bne.n	800bc2a <Second_Run_Frist_Grab_Wuliao+0x3e>
			catch_Frist(860, 2375);
 800bc0c:	f640 1147 	movw	r1, #2375	@ 0x947
 800bc10:	f44f 7057 	mov.w	r0, #860	@ 0x35c
 800bc14:	f7ff fbe8 	bl	800b3e8 <catch_Frist>
			wuliao_falg = 1;
 800bc18:	4b20      	ldr	r3, [pc, #128]	@ (800bc9c <Second_Run_Frist_Grab_Wuliao+0xb0>)
 800bc1a:	2201      	movs	r2, #1
 800bc1c:	601a      	str	r2, [r3, #0]
			Grab_count += 1;
 800bc1e:	4b22      	ldr	r3, [pc, #136]	@ (800bca8 <Second_Run_Frist_Grab_Wuliao+0xbc>)
 800bc20:	781b      	ldrb	r3, [r3, #0]
 800bc22:	3301      	adds	r3, #1
 800bc24:	b2da      	uxtb	r2, r3
 800bc26:	4b20      	ldr	r3, [pc, #128]	@ (800bca8 <Second_Run_Frist_Grab_Wuliao+0xbc>)
 800bc28:	701a      	strb	r2, [r3, #0]
		}
		if (QR_data[4] == colour && wuliao_falg == 1) {
 800bc2a:	4b1d      	ldr	r3, [pc, #116]	@ (800bca0 <Second_Run_Frist_Grab_Wuliao+0xb4>)
 800bc2c:	691a      	ldr	r2, [r3, #16]
 800bc2e:	4b1d      	ldr	r3, [pc, #116]	@ (800bca4 <Second_Run_Frist_Grab_Wuliao+0xb8>)
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	429a      	cmp	r2, r3
 800bc34:	d112      	bne.n	800bc5c <Second_Run_Frist_Grab_Wuliao+0x70>
 800bc36:	4b19      	ldr	r3, [pc, #100]	@ (800bc9c <Second_Run_Frist_Grab_Wuliao+0xb0>)
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	2b01      	cmp	r3, #1
 800bc3c:	d10e      	bne.n	800bc5c <Second_Run_Frist_Grab_Wuliao+0x70>
			catch_Frist(1910, 2370);
 800bc3e:	f640 1142 	movw	r1, #2370	@ 0x942
 800bc42:	f240 7076 	movw	r0, #1910	@ 0x776
 800bc46:	f7ff fbcf 	bl	800b3e8 <catch_Frist>
			wuliao_falg = 2;
 800bc4a:	4b14      	ldr	r3, [pc, #80]	@ (800bc9c <Second_Run_Frist_Grab_Wuliao+0xb0>)
 800bc4c:	2202      	movs	r2, #2
 800bc4e:	601a      	str	r2, [r3, #0]
			Grab_count += 1;
 800bc50:	4b15      	ldr	r3, [pc, #84]	@ (800bca8 <Second_Run_Frist_Grab_Wuliao+0xbc>)
 800bc52:	781b      	ldrb	r3, [r3, #0]
 800bc54:	3301      	adds	r3, #1
 800bc56:	b2da      	uxtb	r2, r3
 800bc58:	4b13      	ldr	r3, [pc, #76]	@ (800bca8 <Second_Run_Frist_Grab_Wuliao+0xbc>)
 800bc5a:	701a      	strb	r2, [r3, #0]
		}
		if (QR_data[5] == colour && wuliao_falg == 2) {
 800bc5c:	4b10      	ldr	r3, [pc, #64]	@ (800bca0 <Second_Run_Frist_Grab_Wuliao+0xb4>)
 800bc5e:	695a      	ldr	r2, [r3, #20]
 800bc60:	4b10      	ldr	r3, [pc, #64]	@ (800bca4 <Second_Run_Frist_Grab_Wuliao+0xb8>)
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	429a      	cmp	r2, r3
 800bc66:	d112      	bne.n	800bc8e <Second_Run_Frist_Grab_Wuliao+0xa2>
 800bc68:	4b0c      	ldr	r3, [pc, #48]	@ (800bc9c <Second_Run_Frist_Grab_Wuliao+0xb0>)
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	2b02      	cmp	r3, #2
 800bc6e:	d10e      	bne.n	800bc8e <Second_Run_Frist_Grab_Wuliao+0xa2>
			catch_Frist(2960, 2370);
 800bc70:	f640 1142 	movw	r1, #2370	@ 0x942
 800bc74:	f44f 6039 	mov.w	r0, #2960	@ 0xb90
 800bc78:	f7ff fbb6 	bl	800b3e8 <catch_Frist>
			wuliao_falg = 0;
 800bc7c:	4b07      	ldr	r3, [pc, #28]	@ (800bc9c <Second_Run_Frist_Grab_Wuliao+0xb0>)
 800bc7e:	2200      	movs	r2, #0
 800bc80:	601a      	str	r2, [r3, #0]
			Grab_count += 1;
 800bc82:	4b09      	ldr	r3, [pc, #36]	@ (800bca8 <Second_Run_Frist_Grab_Wuliao+0xbc>)
 800bc84:	781b      	ldrb	r3, [r3, #0]
 800bc86:	3301      	adds	r3, #1
 800bc88:	b2da      	uxtb	r2, r3
 800bc8a:	4b07      	ldr	r3, [pc, #28]	@ (800bca8 <Second_Run_Frist_Grab_Wuliao+0xbc>)
 800bc8c:	701a      	strb	r2, [r3, #0]
	while (Grab_count < 3) {
 800bc8e:	4b06      	ldr	r3, [pc, #24]	@ (800bca8 <Second_Run_Frist_Grab_Wuliao+0xbc>)
 800bc90:	781b      	ldrb	r3, [r3, #0]
 800bc92:	2b02      	cmp	r3, #2
 800bc94:	d9b0      	bls.n	800bbf8 <Second_Run_Frist_Grab_Wuliao+0xc>
		}

	}
}
 800bc96:	bf00      	nop
 800bc98:	bf00      	nop
 800bc9a:	bd80      	pop	{r7, pc}
 800bc9c:	24000480 	.word	0x24000480
 800bca0:	24000460 	.word	0x24000460
 800bca4:	2400047c 	.word	0x2400047c
 800bca8:	24000add 	.word	0x24000add

0800bcac <Second_Run_put_wuliao_to_Car_frist>:
void Second_Run_put_wuliao_to_Car_frist(void) {
 800bcac:	b580      	push	{r7, lr}
 800bcae:	b082      	sub	sp, #8
 800bcb0:	af00      	add	r7, sp, #0
	for (int i = 3; i < 6; i++) {
 800bcb2:	2303      	movs	r3, #3
 800bcb4:	607b      	str	r3, [r7, #4]
 800bcb6:	e079      	b.n	800bdac <Second_Run_put_wuliao_to_Car_frist+0x100>
		if (QR_data[i] == 1) {
 800bcb8:	4a40      	ldr	r2, [pc, #256]	@ (800bdbc <Second_Run_put_wuliao_to_Car_frist+0x110>)
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bcc0:	2b01      	cmp	r3, #1
 800bcc2:	d105      	bne.n	800bcd0 <Second_Run_put_wuliao_to_Car_frist+0x24>
			Move_Action_Nopid_Right_Ctrl(1850, 1200);
 800bcc4:	eddf 0a3e 	vldr	s1, [pc, #248]	@ 800bdc0 <Second_Run_put_wuliao_to_Car_frist+0x114>
 800bcc8:	ed9f 0a3e 	vldr	s0, [pc, #248]	@ 800bdc4 <Second_Run_put_wuliao_to_Car_frist+0x118>
 800bccc:	f001 fae8 	bl	800d2a0 <Move_Action_Nopid_Right_Ctrl>
		}
		if (QR_data[i] == 2) {
 800bcd0:	4a3a      	ldr	r2, [pc, #232]	@ (800bdbc <Second_Run_put_wuliao_to_Car_frist+0x110>)
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bcd8:	2b02      	cmp	r3, #2
 800bcda:	d105      	bne.n	800bce8 <Second_Run_put_wuliao_to_Car_frist+0x3c>
			Move_Action_Nopid_Right_Ctrl(1850, 1050);
 800bcdc:	eddf 0a3a 	vldr	s1, [pc, #232]	@ 800bdc8 <Second_Run_put_wuliao_to_Car_frist+0x11c>
 800bce0:	ed9f 0a38 	vldr	s0, [pc, #224]	@ 800bdc4 <Second_Run_put_wuliao_to_Car_frist+0x118>
 800bce4:	f001 fadc 	bl	800d2a0 <Move_Action_Nopid_Right_Ctrl>
		}
		if (QR_data[i] == 3) {
 800bce8:	4a34      	ldr	r2, [pc, #208]	@ (800bdbc <Second_Run_put_wuliao_to_Car_frist+0x110>)
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bcf0:	2b03      	cmp	r3, #3
 800bcf2:	d105      	bne.n	800bd00 <Second_Run_put_wuliao_to_Car_frist+0x54>
			Move_Action_Nopid_Right_Ctrl(1850, 885);
 800bcf4:	eddf 0a35 	vldr	s1, [pc, #212]	@ 800bdcc <Second_Run_put_wuliao_to_Car_frist+0x120>
 800bcf8:	ed9f 0a32 	vldr	s0, [pc, #200]	@ 800bdc4 <Second_Run_put_wuliao_to_Car_frist+0x118>
 800bcfc:	f001 fad0 	bl	800d2a0 <Move_Action_Nopid_Right_Ctrl>
		}
		if (i == 3) {
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	2b03      	cmp	r3, #3
 800bd04:	d118      	bne.n	800bd38 <Second_Run_put_wuliao_to_Car_frist+0x8c>
			Move_Tx_Pid_Ctrl(tx_target, ty_target); //TX
 800bd06:	4b32      	ldr	r3, [pc, #200]	@ (800bdd0 <Second_Run_put_wuliao_to_Car_frist+0x124>)
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	ee07 3a90 	vmov	s15, r3
 800bd0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bd12:	4b30      	ldr	r3, [pc, #192]	@ (800bdd4 <Second_Run_put_wuliao_to_Car_frist+0x128>)
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	ee07 3a10 	vmov	s14, r3
 800bd1a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800bd1e:	eef0 0a47 	vmov.f32	s1, s14
 800bd22:	eeb0 0a67 	vmov.f32	s0, s15
 800bd26:	f001 fc1b 	bl	800d560 <Move_Tx_Pid_Ctrl>
			catch_Second(860, 2375);
 800bd2a:	f640 1147 	movw	r1, #2375	@ 0x947
 800bd2e:	f44f 7057 	mov.w	r0, #860	@ 0x35c
 800bd32:	f7ff fbc6 	bl	800b4c2 <catch_Second>
 800bd36:	e036      	b.n	800bda6 <Second_Run_put_wuliao_to_Car_frist+0xfa>

		} else if (i == 4) {
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	2b04      	cmp	r3, #4
 800bd3c:	d118      	bne.n	800bd70 <Second_Run_put_wuliao_to_Car_frist+0xc4>
			Move_Tx_Pid_Ctrl(tx_target, ty_target); //TX调整
 800bd3e:	4b24      	ldr	r3, [pc, #144]	@ (800bdd0 <Second_Run_put_wuliao_to_Car_frist+0x124>)
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	ee07 3a90 	vmov	s15, r3
 800bd46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bd4a:	4b22      	ldr	r3, [pc, #136]	@ (800bdd4 <Second_Run_put_wuliao_to_Car_frist+0x128>)
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	ee07 3a10 	vmov	s14, r3
 800bd52:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800bd56:	eef0 0a47 	vmov.f32	s1, s14
 800bd5a:	eeb0 0a67 	vmov.f32	s0, s15
 800bd5e:	f001 fbff 	bl	800d560 <Move_Tx_Pid_Ctrl>
			catch_Second(1910, 2370);
 800bd62:	f640 1142 	movw	r1, #2370	@ 0x942
 800bd66:	f240 7076 	movw	r0, #1910	@ 0x776
 800bd6a:	f7ff fbaa 	bl	800b4c2 <catch_Second>
 800bd6e:	e01a      	b.n	800bda6 <Second_Run_put_wuliao_to_Car_frist+0xfa>
		} else if (i == 5) {
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	2b05      	cmp	r3, #5
 800bd74:	d117      	bne.n	800bda6 <Second_Run_put_wuliao_to_Car_frist+0xfa>
			Move_Tx_Pid_Ctrl(tx_target, ty_target); //TX调整
 800bd76:	4b16      	ldr	r3, [pc, #88]	@ (800bdd0 <Second_Run_put_wuliao_to_Car_frist+0x124>)
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	ee07 3a90 	vmov	s15, r3
 800bd7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bd82:	4b14      	ldr	r3, [pc, #80]	@ (800bdd4 <Second_Run_put_wuliao_to_Car_frist+0x128>)
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	ee07 3a10 	vmov	s14, r3
 800bd8a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800bd8e:	eef0 0a47 	vmov.f32	s1, s14
 800bd92:	eeb0 0a67 	vmov.f32	s0, s15
 800bd96:	f001 fbe3 	bl	800d560 <Move_Tx_Pid_Ctrl>
			catch_Second(2960, 2370);
 800bd9a:	f640 1142 	movw	r1, #2370	@ 0x942
 800bd9e:	f44f 6039 	mov.w	r0, #2960	@ 0xb90
 800bda2:	f7ff fb8e 	bl	800b4c2 <catch_Second>
	for (int i = 3; i < 6; i++) {
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	3301      	adds	r3, #1
 800bdaa:	607b      	str	r3, [r7, #4]
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	2b05      	cmp	r3, #5
 800bdb0:	dd82      	ble.n	800bcb8 <Second_Run_put_wuliao_to_Car_frist+0xc>
		}

	}
}
 800bdb2:	bf00      	nop
 800bdb4:	bf00      	nop
 800bdb6:	3708      	adds	r7, #8
 800bdb8:	46bd      	mov	sp, r7
 800bdba:	bd80      	pop	{r7, pc}
 800bdbc:	24000460 	.word	0x24000460
 800bdc0:	44960000 	.word	0x44960000
 800bdc4:	44e74000 	.word	0x44e74000
 800bdc8:	44834000 	.word	0x44834000
 800bdcc:	445d4000 	.word	0x445d4000
 800bdd0:	24000000 	.word	0x24000000
 800bdd4:	24000004 	.word	0x24000004

0800bdd8 <Second_Run_put_wuliao_to_circular_frist>:

void Second_Run_put_wuliao_to_circular_frist(void) {
 800bdd8:	b580      	push	{r7, lr}
 800bdda:	b082      	sub	sp, #8
 800bddc:	af00      	add	r7, sp, #0

	for (int i = 3; i < 6; i++) {
 800bdde:	2303      	movs	r3, #3
 800bde0:	607b      	str	r3, [r7, #4]
 800bde2:	e079      	b.n	800bed8 <Second_Run_put_wuliao_to_circular_frist+0x100>
		if (QR_data[i] == 1) {
 800bde4:	4a40      	ldr	r2, [pc, #256]	@ (800bee8 <Second_Run_put_wuliao_to_circular_frist+0x110>)
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bdec:	2b01      	cmp	r3, #1
 800bdee:	d105      	bne.n	800bdfc <Second_Run_put_wuliao_to_circular_frist+0x24>
			Move_Action_Nopid_Right_Ctrl(910, 1910);
 800bdf0:	eddf 0a3e 	vldr	s1, [pc, #248]	@ 800beec <Second_Run_put_wuliao_to_circular_frist+0x114>
 800bdf4:	ed9f 0a3e 	vldr	s0, [pc, #248]	@ 800bef0 <Second_Run_put_wuliao_to_circular_frist+0x118>
 800bdf8:	f001 fa52 	bl	800d2a0 <Move_Action_Nopid_Right_Ctrl>

		}
		if (QR_data[i] == 2) {
 800bdfc:	4a3a      	ldr	r2, [pc, #232]	@ (800bee8 <Second_Run_put_wuliao_to_circular_frist+0x110>)
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800be04:	2b02      	cmp	r3, #2
 800be06:	d105      	bne.n	800be14 <Second_Run_put_wuliao_to_circular_frist+0x3c>
			Move_Action_Nopid_Right_Ctrl(1060, 1910);
 800be08:	eddf 0a38 	vldr	s1, [pc, #224]	@ 800beec <Second_Run_put_wuliao_to_circular_frist+0x114>
 800be0c:	ed9f 0a39 	vldr	s0, [pc, #228]	@ 800bef4 <Second_Run_put_wuliao_to_circular_frist+0x11c>
 800be10:	f001 fa46 	bl	800d2a0 <Move_Action_Nopid_Right_Ctrl>
		}
		if (QR_data[i] == 3) {
 800be14:	4a34      	ldr	r2, [pc, #208]	@ (800bee8 <Second_Run_put_wuliao_to_circular_frist+0x110>)
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800be1c:	2b03      	cmp	r3, #3
 800be1e:	d105      	bne.n	800be2c <Second_Run_put_wuliao_to_circular_frist+0x54>
			Move_Action_Nopid_Right_Ctrl(1185, 1910);
 800be20:	eddf 0a32 	vldr	s1, [pc, #200]	@ 800beec <Second_Run_put_wuliao_to_circular_frist+0x114>
 800be24:	ed9f 0a34 	vldr	s0, [pc, #208]	@ 800bef8 <Second_Run_put_wuliao_to_circular_frist+0x120>
 800be28:	f001 fa3a 	bl	800d2a0 <Move_Action_Nopid_Right_Ctrl>
		}
		if (i == 3) {
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	2b03      	cmp	r3, #3
 800be30:	d118      	bne.n	800be64 <Second_Run_put_wuliao_to_circular_frist+0x8c>
			Move_Tx_Pid_Ctrl(tx_target, ty_target); //TX调整
 800be32:	4b32      	ldr	r3, [pc, #200]	@ (800befc <Second_Run_put_wuliao_to_circular_frist+0x124>)
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	ee07 3a90 	vmov	s15, r3
 800be3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800be3e:	4b30      	ldr	r3, [pc, #192]	@ (800bf00 <Second_Run_put_wuliao_to_circular_frist+0x128>)
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	ee07 3a10 	vmov	s14, r3
 800be46:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800be4a:	eef0 0a47 	vmov.f32	s1, s14
 800be4e:	eeb0 0a67 	vmov.f32	s0, s15
 800be52:	f001 fb85 	bl	800d560 <Move_Tx_Pid_Ctrl>
			put(2150, 2680);
 800be56:	f640 2178 	movw	r1, #2680	@ 0xa78
 800be5a:	f640 0066 	movw	r0, #2150	@ 0x866
 800be5e:	f7ff fbf1 	bl	800b644 <put>
 800be62:	e036      	b.n	800bed2 <Second_Run_put_wuliao_to_circular_frist+0xfa>
		} else if (i == 4) {
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	2b04      	cmp	r3, #4
 800be68:	d118      	bne.n	800be9c <Second_Run_put_wuliao_to_circular_frist+0xc4>
			Move_Tx_Pid_Ctrl(tx_target, ty_target); //TX调整
 800be6a:	4b24      	ldr	r3, [pc, #144]	@ (800befc <Second_Run_put_wuliao_to_circular_frist+0x124>)
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	ee07 3a90 	vmov	s15, r3
 800be72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800be76:	4b22      	ldr	r3, [pc, #136]	@ (800bf00 <Second_Run_put_wuliao_to_circular_frist+0x128>)
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	ee07 3a10 	vmov	s14, r3
 800be7e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800be82:	eef0 0a47 	vmov.f32	s1, s14
 800be86:	eeb0 0a67 	vmov.f32	s0, s15
 800be8a:	f001 fb69 	bl	800d560 <Move_Tx_Pid_Ctrl>
			put(3205, 2680);
 800be8e:	f640 2178 	movw	r1, #2680	@ 0xa78
 800be92:	f640 4085 	movw	r0, #3205	@ 0xc85
 800be96:	f7ff fbd5 	bl	800b644 <put>
 800be9a:	e01a      	b.n	800bed2 <Second_Run_put_wuliao_to_circular_frist+0xfa>
		} else if (i == 5) {
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	2b05      	cmp	r3, #5
 800bea0:	d117      	bne.n	800bed2 <Second_Run_put_wuliao_to_circular_frist+0xfa>
			Move_Tx_Pid_Ctrl(tx_target, ty_target); //TX调整
 800bea2:	4b16      	ldr	r3, [pc, #88]	@ (800befc <Second_Run_put_wuliao_to_circular_frist+0x124>)
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	ee07 3a90 	vmov	s15, r3
 800beaa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800beae:	4b14      	ldr	r3, [pc, #80]	@ (800bf00 <Second_Run_put_wuliao_to_circular_frist+0x128>)
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	ee07 3a10 	vmov	s14, r3
 800beb6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800beba:	eef0 0a47 	vmov.f32	s1, s14
 800bebe:	eeb0 0a67 	vmov.f32	s0, s15
 800bec2:	f001 fb4d 	bl	800d560 <Move_Tx_Pid_Ctrl>
			put(2960, 2370);
 800bec6:	f640 1142 	movw	r1, #2370	@ 0x942
 800beca:	f44f 6039 	mov.w	r0, #2960	@ 0xb90
 800bece:	f7ff fbb9 	bl	800b644 <put>
	for (int i = 3; i < 6; i++) {
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	3301      	adds	r3, #1
 800bed6:	607b      	str	r3, [r7, #4]
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	2b05      	cmp	r3, #5
 800bedc:	dd82      	ble.n	800bde4 <Second_Run_put_wuliao_to_circular_frist+0xc>
		}

	}
}
 800bede:	bf00      	nop
 800bee0:	bf00      	nop
 800bee2:	3708      	adds	r7, #8
 800bee4:	46bd      	mov	sp, r7
 800bee6:	bd80      	pop	{r7, pc}
 800bee8:	24000460 	.word	0x24000460
 800beec:	44eec000 	.word	0x44eec000
 800bef0:	44638000 	.word	0x44638000
 800bef4:	44848000 	.word	0x44848000
 800bef8:	44942000 	.word	0x44942000
 800befc:	24000000 	.word	0x24000000
 800bf00:	24000004 	.word	0x24000004

0800bf04 <Emm_V5_Pos_Control>:
 * @param    raF ：相位/绝对标志，false为相对运动，true为绝对值运动
 * @param    snF ：多机同步标志 ，false为不启用，true为启用
 * @retval   地址 + 功能码 + 命令状态 + 校验字节
 */
void Emm_V5_Pos_Control(uint8_t addr, uint8_t dir, uint16_t vel, uint8_t acc,
		uint32_t clk, bool raF, bool snF) {
 800bf04:	b590      	push	{r4, r7, lr}
 800bf06:	b083      	sub	sp, #12
 800bf08:	af00      	add	r7, sp, #0
 800bf0a:	4604      	mov	r4, r0
 800bf0c:	4608      	mov	r0, r1
 800bf0e:	4611      	mov	r1, r2
 800bf10:	461a      	mov	r2, r3
 800bf12:	4623      	mov	r3, r4
 800bf14:	71fb      	strb	r3, [r7, #7]
 800bf16:	4603      	mov	r3, r0
 800bf18:	71bb      	strb	r3, [r7, #6]
 800bf1a:	460b      	mov	r3, r1
 800bf1c:	80bb      	strh	r3, [r7, #4]
 800bf1e:	4613      	mov	r3, r2
 800bf20:	70fb      	strb	r3, [r7, #3]

	// 装载命令
	cmd[0] = addr;                      // 地址
 800bf22:	4a20      	ldr	r2, [pc, #128]	@ (800bfa4 <Emm_V5_Pos_Control+0xa0>)
 800bf24:	79fb      	ldrb	r3, [r7, #7]
 800bf26:	7013      	strb	r3, [r2, #0]
	cmd[1] = 0xFD;                      // 功能码
 800bf28:	4b1e      	ldr	r3, [pc, #120]	@ (800bfa4 <Emm_V5_Pos_Control+0xa0>)
 800bf2a:	22fd      	movs	r2, #253	@ 0xfd
 800bf2c:	705a      	strb	r2, [r3, #1]
	cmd[2] = dir;                       // 方向
 800bf2e:	4a1d      	ldr	r2, [pc, #116]	@ (800bfa4 <Emm_V5_Pos_Control+0xa0>)
 800bf30:	79bb      	ldrb	r3, [r7, #6]
 800bf32:	7093      	strb	r3, [r2, #2]
	cmd[3] = (uint8_t) (vel >> 8);       // 速度(RPM)高8位字节
 800bf34:	88bb      	ldrh	r3, [r7, #4]
 800bf36:	0a1b      	lsrs	r3, r3, #8
 800bf38:	b29b      	uxth	r3, r3
 800bf3a:	b2da      	uxtb	r2, r3
 800bf3c:	4b19      	ldr	r3, [pc, #100]	@ (800bfa4 <Emm_V5_Pos_Control+0xa0>)
 800bf3e:	70da      	strb	r2, [r3, #3]
	cmd[4] = (uint8_t) (vel >> 0);       // 速度(RPM)低8位字节
 800bf40:	88bb      	ldrh	r3, [r7, #4]
 800bf42:	b2da      	uxtb	r2, r3
 800bf44:	4b17      	ldr	r3, [pc, #92]	@ (800bfa4 <Emm_V5_Pos_Control+0xa0>)
 800bf46:	711a      	strb	r2, [r3, #4]
	cmd[5] = acc;                       // 加速度，注意：0是直接启动
 800bf48:	4a16      	ldr	r2, [pc, #88]	@ (800bfa4 <Emm_V5_Pos_Control+0xa0>)
 800bf4a:	78fb      	ldrb	r3, [r7, #3]
 800bf4c:	7153      	strb	r3, [r2, #5]
	cmd[6] = (uint8_t) (clk >> 24);      // 脉冲数(bit24 - bit31)
 800bf4e:	69bb      	ldr	r3, [r7, #24]
 800bf50:	0e1b      	lsrs	r3, r3, #24
 800bf52:	b2da      	uxtb	r2, r3
 800bf54:	4b13      	ldr	r3, [pc, #76]	@ (800bfa4 <Emm_V5_Pos_Control+0xa0>)
 800bf56:	719a      	strb	r2, [r3, #6]
	cmd[7] = (uint8_t) (clk >> 16);      // 脉冲数(bit16 - bit23)
 800bf58:	69bb      	ldr	r3, [r7, #24]
 800bf5a:	0c1b      	lsrs	r3, r3, #16
 800bf5c:	b2da      	uxtb	r2, r3
 800bf5e:	4b11      	ldr	r3, [pc, #68]	@ (800bfa4 <Emm_V5_Pos_Control+0xa0>)
 800bf60:	71da      	strb	r2, [r3, #7]
	cmd[8] = (uint8_t) (clk >> 8);       // 脉冲数(bit8  - bit15)
 800bf62:	69bb      	ldr	r3, [r7, #24]
 800bf64:	0a1b      	lsrs	r3, r3, #8
 800bf66:	b2da      	uxtb	r2, r3
 800bf68:	4b0e      	ldr	r3, [pc, #56]	@ (800bfa4 <Emm_V5_Pos_Control+0xa0>)
 800bf6a:	721a      	strb	r2, [r3, #8]
	cmd[9] = (uint8_t) (clk >> 0);       // 脉冲数(bit0  - bit7 )
 800bf6c:	69bb      	ldr	r3, [r7, #24]
 800bf6e:	b2da      	uxtb	r2, r3
 800bf70:	4b0c      	ldr	r3, [pc, #48]	@ (800bfa4 <Emm_V5_Pos_Control+0xa0>)
 800bf72:	725a      	strb	r2, [r3, #9]
	cmd[10] = raF;                       // 相位/绝对标志，false为相对运动，true为绝对值运动
 800bf74:	7f3a      	ldrb	r2, [r7, #28]
 800bf76:	4b0b      	ldr	r3, [pc, #44]	@ (800bfa4 <Emm_V5_Pos_Control+0xa0>)
 800bf78:	729a      	strb	r2, [r3, #10]
	cmd[11] = snF;                       // 多机同步运动标志，false为不启用，true为启用
 800bf7a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800bf7e:	4b09      	ldr	r3, [pc, #36]	@ (800bfa4 <Emm_V5_Pos_Control+0xa0>)
 800bf80:	72da      	strb	r2, [r3, #11]
	cmd[12] = 0x6B;                      // 校验字节
 800bf82:	4b08      	ldr	r3, [pc, #32]	@ (800bfa4 <Emm_V5_Pos_Control+0xa0>)
 800bf84:	226b      	movs	r2, #107	@ 0x6b
 800bf86:	731a      	strb	r2, [r3, #12]

	// 发送命令
	FDCAN_Send_Msg(cmd, 13);
 800bf88:	210d      	movs	r1, #13
 800bf8a:	4806      	ldr	r0, [pc, #24]	@ (800bfa4 <Emm_V5_Pos_Control+0xa0>)
 800bf8c:	f7f4 fe84 	bl	8000c98 <FDCAN_Send_Msg>
	HAL_Delay(10);
 800bf90:	200a      	movs	r0, #10
 800bf92:	f7f6 fe33 	bl	8002bfc <HAL_Delay>
	Emm_mode = 1;
 800bf96:	4b04      	ldr	r3, [pc, #16]	@ (800bfa8 <Emm_V5_Pos_Control+0xa4>)
 800bf98:	2201      	movs	r2, #1
 800bf9a:	701a      	strb	r2, [r3, #0]
}
 800bf9c:	bf00      	nop
 800bf9e:	370c      	adds	r7, #12
 800bfa0:	46bd      	mov	sp, r7
 800bfa2:	bd90      	pop	{r4, r7, pc}
 800bfa4:	24000ae0 	.word	0x24000ae0
 800bfa8:	2400029c 	.word	0x2400029c

0800bfac <Emm_V5_Stop_Now>:
 * @brief    立即停止（所有控制模式都通用）
 * @param    addr  ：电机地址
 * @param    snF   ：多机同步标志，false为不启用，true为启用
 * @retval   地址 + 功能码 + 命令状态 + 校验字节
 */
void Emm_V5_Stop_Now(uint8_t addr, bool snF) {
 800bfac:	b580      	push	{r7, lr}
 800bfae:	b082      	sub	sp, #8
 800bfb0:	af00      	add	r7, sp, #0
 800bfb2:	4603      	mov	r3, r0
 800bfb4:	460a      	mov	r2, r1
 800bfb6:	71fb      	strb	r3, [r7, #7]
 800bfb8:	4613      	mov	r3, r2
 800bfba:	71bb      	strb	r3, [r7, #6]

	// 装载命令
	cmd[0] = addr;                       // 地址
 800bfbc:	4a0b      	ldr	r2, [pc, #44]	@ (800bfec <Emm_V5_Stop_Now+0x40>)
 800bfbe:	79fb      	ldrb	r3, [r7, #7]
 800bfc0:	7013      	strb	r3, [r2, #0]
	cmd[1] = 0xFE;                       // 功能码
 800bfc2:	4b0a      	ldr	r3, [pc, #40]	@ (800bfec <Emm_V5_Stop_Now+0x40>)
 800bfc4:	22fe      	movs	r2, #254	@ 0xfe
 800bfc6:	705a      	strb	r2, [r3, #1]
	cmd[2] = 0x98;                       // 辅助码
 800bfc8:	4b08      	ldr	r3, [pc, #32]	@ (800bfec <Emm_V5_Stop_Now+0x40>)
 800bfca:	2298      	movs	r2, #152	@ 0x98
 800bfcc:	709a      	strb	r2, [r3, #2]
	cmd[3] = snF;                        // 多机同步运动标志
 800bfce:	79ba      	ldrb	r2, [r7, #6]
 800bfd0:	4b06      	ldr	r3, [pc, #24]	@ (800bfec <Emm_V5_Stop_Now+0x40>)
 800bfd2:	70da      	strb	r2, [r3, #3]
	cmd[4] = 0x6B;                       // 校验字节
 800bfd4:	4b05      	ldr	r3, [pc, #20]	@ (800bfec <Emm_V5_Stop_Now+0x40>)
 800bfd6:	226b      	movs	r2, #107	@ 0x6b
 800bfd8:	711a      	strb	r2, [r3, #4]

	// 发送命令
	FDCAN_Send_Msg(cmd, 5);
 800bfda:	2105      	movs	r1, #5
 800bfdc:	4803      	ldr	r0, [pc, #12]	@ (800bfec <Emm_V5_Stop_Now+0x40>)
 800bfde:	f7f4 fe5b 	bl	8000c98 <FDCAN_Send_Msg>
}
 800bfe2:	bf00      	nop
 800bfe4:	3708      	adds	r7, #8
 800bfe6:	46bd      	mov	sp, r7
 800bfe8:	bd80      	pop	{r7, pc}
 800bfea:	bf00      	nop
 800bfec:	24000ae0 	.word	0x24000ae0

0800bff0 <Emm_V5_Synchronous_motion>:
/**
 * @brief    多机同步运动
 * @param    addr  ：电机地址
 * @retval   地址 + 功能码 + 命令状态 + 校验字节
 */
void Emm_V5_Synchronous_motion(void) {
 800bff0:	b580      	push	{r7, lr}
 800bff2:	af00      	add	r7, sp, #0

	// 装载命令
	cmd[0] = 0x00;                       // 地址
 800bff4:	4b0a      	ldr	r3, [pc, #40]	@ (800c020 <Emm_V5_Synchronous_motion+0x30>)
 800bff6:	2200      	movs	r2, #0
 800bff8:	701a      	strb	r2, [r3, #0]
	cmd[1] = 0xFF;                       // 功能码
 800bffa:	4b09      	ldr	r3, [pc, #36]	@ (800c020 <Emm_V5_Synchronous_motion+0x30>)
 800bffc:	22ff      	movs	r2, #255	@ 0xff
 800bffe:	705a      	strb	r2, [r3, #1]
	cmd[2] = 0x66;                       // 辅助码
 800c000:	4b07      	ldr	r3, [pc, #28]	@ (800c020 <Emm_V5_Synchronous_motion+0x30>)
 800c002:	2266      	movs	r2, #102	@ 0x66
 800c004:	709a      	strb	r2, [r3, #2]
	cmd[3] = 0x6B;                       // 校验字节
 800c006:	4b06      	ldr	r3, [pc, #24]	@ (800c020 <Emm_V5_Synchronous_motion+0x30>)
 800c008:	226b      	movs	r2, #107	@ 0x6b
 800c00a:	70da      	strb	r2, [r3, #3]

	// 发送命令
	FDCAN_Send_Msg(cmd, 4);
 800c00c:	2104      	movs	r1, #4
 800c00e:	4804      	ldr	r0, [pc, #16]	@ (800c020 <Emm_V5_Synchronous_motion+0x30>)
 800c010:	f7f4 fe42 	bl	8000c98 <FDCAN_Send_Msg>
	HAL_Delay(5);
 800c014:	2005      	movs	r0, #5
 800c016:	f7f6 fdf1 	bl	8002bfc <HAL_Delay>
}
 800c01a:	bf00      	nop
 800c01c:	bd80      	pop	{r7, pc}
 800c01e:	bf00      	nop
 800c020:	24000ae0 	.word	0x24000ae0

0800c024 <limit>:
float A_out;
float TX_X_out;
float TX_Y_out;

// 输出限幅
float limit(float x, float min, float max) {
 800c024:	b480      	push	{r7}
 800c026:	b085      	sub	sp, #20
 800c028:	af00      	add	r7, sp, #0
 800c02a:	ed87 0a03 	vstr	s0, [r7, #12]
 800c02e:	edc7 0a02 	vstr	s1, [r7, #8]
 800c032:	ed87 1a01 	vstr	s2, [r7, #4]
	x = (x > max) ? max : ((x < min) ? min : x);
 800c036:	ed97 7a03 	vldr	s14, [r7, #12]
 800c03a:	edd7 7a01 	vldr	s15, [r7, #4]
 800c03e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c042:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c046:	dd01      	ble.n	800c04c <limit+0x28>
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	e00b      	b.n	800c064 <limit+0x40>
 800c04c:	ed97 7a03 	vldr	s14, [r7, #12]
 800c050:	edd7 7a02 	vldr	s15, [r7, #8]
 800c054:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c058:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c05c:	d501      	bpl.n	800c062 <limit+0x3e>
 800c05e:	68bb      	ldr	r3, [r7, #8]
 800c060:	e000      	b.n	800c064 <limit+0x40>
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	60fb      	str	r3, [r7, #12]
	return x;
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	ee07 3a90 	vmov	s15, r3
}
 800c06c:	eeb0 0a67 	vmov.f32	s0, s15
 800c070:	3714      	adds	r7, #20
 800c072:	46bd      	mov	sp, r7
 800c074:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c078:	4770      	bx	lr
	...

0800c07c <PID_Init>:
		return in;
	}
}

//	初始化PID结构体
void PID_Init(void) {
 800c07c:	b480      	push	{r7}
 800c07e:	af00      	add	r7, sp, #0
	//======================X=====================//   20   60
	XPID.P = 20;    //0.57    0  0.1
 800c080:	4b69      	ldr	r3, [pc, #420]	@ (800c228 <PID_Init+0x1ac>)
 800c082:	4a6a      	ldr	r2, [pc, #424]	@ (800c22c <PID_Init+0x1b0>)
 800c084:	601a      	str	r2, [r3, #0]
	XPID.I = 0;
 800c086:	4b68      	ldr	r3, [pc, #416]	@ (800c228 <PID_Init+0x1ac>)
 800c088:	f04f 0200 	mov.w	r2, #0
 800c08c:	609a      	str	r2, [r3, #8]
	XPID.D = 60;
 800c08e:	4b66      	ldr	r3, [pc, #408]	@ (800c228 <PID_Init+0x1ac>)
 800c090:	4a67      	ldr	r2, [pc, #412]	@ (800c230 <PID_Init+0x1b4>)
 800c092:	615a      	str	r2, [r3, #20]

	XPID.I_LIMIT = 100.0;
 800c094:	4b64      	ldr	r3, [pc, #400]	@ (800c228 <PID_Init+0x1ac>)
 800c096:	4a67      	ldr	r2, [pc, #412]	@ (800c234 <PID_Init+0x1b8>)
 800c098:	611a      	str	r2, [r3, #16]
	XPID.OUT_LIMIT = 100.0;
 800c09a:	4b63      	ldr	r3, [pc, #396]	@ (800c228 <PID_Init+0x1ac>)
 800c09c:	4a65      	ldr	r2, [pc, #404]	@ (800c234 <PID_Init+0x1b8>)
 800c09e:	621a      	str	r2, [r3, #32]

	XPID.P_OUT = 0.0;
 800c0a0:	4b61      	ldr	r3, [pc, #388]	@ (800c228 <PID_Init+0x1ac>)
 800c0a2:	f04f 0200 	mov.w	r2, #0
 800c0a6:	605a      	str	r2, [r3, #4]
	XPID.I_OUT = 0.0;
 800c0a8:	4b5f      	ldr	r3, [pc, #380]	@ (800c228 <PID_Init+0x1ac>)
 800c0aa:	f04f 0200 	mov.w	r2, #0
 800c0ae:	60da      	str	r2, [r3, #12]
	XPID.D_OUT = 0.0;
 800c0b0:	4b5d      	ldr	r3, [pc, #372]	@ (800c228 <PID_Init+0x1ac>)
 800c0b2:	f04f 0200 	mov.w	r2, #0
 800c0b6:	619a      	str	r2, [r3, #24]

	XPID.OUT = 0.0;
 800c0b8:	4b5b      	ldr	r3, [pc, #364]	@ (800c228 <PID_Init+0x1ac>)
 800c0ba:	f04f 0200 	mov.w	r2, #0
 800c0be:	61da      	str	r2, [r3, #28]

	XPID.err = 0.0;
 800c0c0:	4b59      	ldr	r3, [pc, #356]	@ (800c228 <PID_Init+0x1ac>)
 800c0c2:	2200      	movs	r2, #0
 800c0c4:	849a      	strh	r2, [r3, #36]	@ 0x24
	XPID.err_err = 0.0;
 800c0c6:	4b58      	ldr	r3, [pc, #352]	@ (800c228 <PID_Init+0x1ac>)
 800c0c8:	2200      	movs	r2, #0
 800c0ca:	84da      	strh	r2, [r3, #38]	@ 0x26
	XPID.err_old = 0.0;
 800c0cc:	4b56      	ldr	r3, [pc, #344]	@ (800c228 <PID_Init+0x1ac>)
 800c0ce:	2200      	movs	r2, #0
 800c0d0:	851a      	strh	r2, [r3, #40]	@ 0x28

	//========= =============Y=====================//
	YPID.P = 20;    //0.89                     //0.8 0 0.01
 800c0d2:	4b59      	ldr	r3, [pc, #356]	@ (800c238 <PID_Init+0x1bc>)
 800c0d4:	4a55      	ldr	r2, [pc, #340]	@ (800c22c <PID_Init+0x1b0>)
 800c0d6:	601a      	str	r2, [r3, #0]
	YPID.I = 0;
 800c0d8:	4b57      	ldr	r3, [pc, #348]	@ (800c238 <PID_Init+0x1bc>)
 800c0da:	f04f 0200 	mov.w	r2, #0
 800c0de:	609a      	str	r2, [r3, #8]
	YPID.D = 60;    //60
 800c0e0:	4b55      	ldr	r3, [pc, #340]	@ (800c238 <PID_Init+0x1bc>)
 800c0e2:	4a53      	ldr	r2, [pc, #332]	@ (800c230 <PID_Init+0x1b4>)
 800c0e4:	615a      	str	r2, [r3, #20]
	YPID.I_LIMIT = 100.0;
 800c0e6:	4b54      	ldr	r3, [pc, #336]	@ (800c238 <PID_Init+0x1bc>)
 800c0e8:	4a52      	ldr	r2, [pc, #328]	@ (800c234 <PID_Init+0x1b8>)
 800c0ea:	611a      	str	r2, [r3, #16]
	YPID.OUT_LIMIT = 100.0;
 800c0ec:	4b52      	ldr	r3, [pc, #328]	@ (800c238 <PID_Init+0x1bc>)
 800c0ee:	4a51      	ldr	r2, [pc, #324]	@ (800c234 <PID_Init+0x1b8>)
 800c0f0:	621a      	str	r2, [r3, #32]

	YPID.P_OUT = 0.0;
 800c0f2:	4b51      	ldr	r3, [pc, #324]	@ (800c238 <PID_Init+0x1bc>)
 800c0f4:	f04f 0200 	mov.w	r2, #0
 800c0f8:	605a      	str	r2, [r3, #4]
	YPID.I_OUT = 0.0;
 800c0fa:	4b4f      	ldr	r3, [pc, #316]	@ (800c238 <PID_Init+0x1bc>)
 800c0fc:	f04f 0200 	mov.w	r2, #0
 800c100:	60da      	str	r2, [r3, #12]
	YPID.D_OUT = 0.0;
 800c102:	4b4d      	ldr	r3, [pc, #308]	@ (800c238 <PID_Init+0x1bc>)
 800c104:	f04f 0200 	mov.w	r2, #0
 800c108:	619a      	str	r2, [r3, #24]

	YPID.OUT = 0.0;
 800c10a:	4b4b      	ldr	r3, [pc, #300]	@ (800c238 <PID_Init+0x1bc>)
 800c10c:	f04f 0200 	mov.w	r2, #0
 800c110:	61da      	str	r2, [r3, #28]

	YPID.err = 0.0;
 800c112:	4b49      	ldr	r3, [pc, #292]	@ (800c238 <PID_Init+0x1bc>)
 800c114:	2200      	movs	r2, #0
 800c116:	849a      	strh	r2, [r3, #36]	@ 0x24
	YPID.err_err = 0.0;
 800c118:	4b47      	ldr	r3, [pc, #284]	@ (800c238 <PID_Init+0x1bc>)
 800c11a:	2200      	movs	r2, #0
 800c11c:	84da      	strh	r2, [r3, #38]	@ 0x26
	YPID.err_old = 0.0;
 800c11e:	4b46      	ldr	r3, [pc, #280]	@ (800c238 <PID_Init+0x1bc>)
 800c120:	2200      	movs	r2, #0
 800c122:	851a      	strh	r2, [r3, #40]	@ 0x28

	//======================A=====================//
	APID.P = 0.9;
 800c124:	4b45      	ldr	r3, [pc, #276]	@ (800c23c <PID_Init+0x1c0>)
 800c126:	4a46      	ldr	r2, [pc, #280]	@ (800c240 <PID_Init+0x1c4>)
 800c128:	601a      	str	r2, [r3, #0]
	APID.I = 0.0;
 800c12a:	4b44      	ldr	r3, [pc, #272]	@ (800c23c <PID_Init+0x1c0>)
 800c12c:	f04f 0200 	mov.w	r2, #0
 800c130:	609a      	str	r2, [r3, #8]
	APID.D = 0.0;
 800c132:	4b42      	ldr	r3, [pc, #264]	@ (800c23c <PID_Init+0x1c0>)
 800c134:	f04f 0200 	mov.w	r2, #0
 800c138:	615a      	str	r2, [r3, #20]

	APID.I_LIMIT = 1000.0;
 800c13a:	4b40      	ldr	r3, [pc, #256]	@ (800c23c <PID_Init+0x1c0>)
 800c13c:	4a41      	ldr	r2, [pc, #260]	@ (800c244 <PID_Init+0x1c8>)
 800c13e:	611a      	str	r2, [r3, #16]
	APID.OUT_LIMIT = 2350.0;
 800c140:	4b3e      	ldr	r3, [pc, #248]	@ (800c23c <PID_Init+0x1c0>)
 800c142:	4a41      	ldr	r2, [pc, #260]	@ (800c248 <PID_Init+0x1cc>)
 800c144:	621a      	str	r2, [r3, #32]

	APID.P_OUT = 0.0;
 800c146:	4b3d      	ldr	r3, [pc, #244]	@ (800c23c <PID_Init+0x1c0>)
 800c148:	f04f 0200 	mov.w	r2, #0
 800c14c:	605a      	str	r2, [r3, #4]
	APID.I_OUT = 0.0;
 800c14e:	4b3b      	ldr	r3, [pc, #236]	@ (800c23c <PID_Init+0x1c0>)
 800c150:	f04f 0200 	mov.w	r2, #0
 800c154:	60da      	str	r2, [r3, #12]
	APID.D_OUT = 0.0;
 800c156:	4b39      	ldr	r3, [pc, #228]	@ (800c23c <PID_Init+0x1c0>)
 800c158:	f04f 0200 	mov.w	r2, #0
 800c15c:	619a      	str	r2, [r3, #24]

	APID.OUT = 0.0;
 800c15e:	4b37      	ldr	r3, [pc, #220]	@ (800c23c <PID_Init+0x1c0>)
 800c160:	f04f 0200 	mov.w	r2, #0
 800c164:	61da      	str	r2, [r3, #28]

	APID.err = 0.0;
 800c166:	4b35      	ldr	r3, [pc, #212]	@ (800c23c <PID_Init+0x1c0>)
 800c168:	2200      	movs	r2, #0
 800c16a:	849a      	strh	r2, [r3, #36]	@ 0x24
	APID.err_err = 0.0;
 800c16c:	4b33      	ldr	r3, [pc, #204]	@ (800c23c <PID_Init+0x1c0>)
 800c16e:	2200      	movs	r2, #0
 800c170:	84da      	strh	r2, [r3, #38]	@ 0x26
	APID.err_old = 0.0;
 800c172:	4b32      	ldr	r3, [pc, #200]	@ (800c23c <PID_Init+0x1c0>)
 800c174:	2200      	movs	r2, #0
 800c176:	851a      	strh	r2, [r3, #40]	@ 0x28
	//======================TX=====================//
	TXPID.P = 1;
 800c178:	4b34      	ldr	r3, [pc, #208]	@ (800c24c <PID_Init+0x1d0>)
 800c17a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800c17e:	601a      	str	r2, [r3, #0]
	TXPID.I = 0;
 800c180:	4b32      	ldr	r3, [pc, #200]	@ (800c24c <PID_Init+0x1d0>)
 800c182:	f04f 0200 	mov.w	r2, #0
 800c186:	609a      	str	r2, [r3, #8]
	TXPID.D = 0.3;
 800c188:	4b30      	ldr	r3, [pc, #192]	@ (800c24c <PID_Init+0x1d0>)
 800c18a:	4a31      	ldr	r2, [pc, #196]	@ (800c250 <PID_Init+0x1d4>)
 800c18c:	615a      	str	r2, [r3, #20]

	TXPID.I_LIMIT = 100.0;
 800c18e:	4b2f      	ldr	r3, [pc, #188]	@ (800c24c <PID_Init+0x1d0>)
 800c190:	4a28      	ldr	r2, [pc, #160]	@ (800c234 <PID_Init+0x1b8>)
 800c192:	611a      	str	r2, [r3, #16]
	TXPID.OUT_LIMIT = 300.0;
 800c194:	4b2d      	ldr	r3, [pc, #180]	@ (800c24c <PID_Init+0x1d0>)
 800c196:	4a2f      	ldr	r2, [pc, #188]	@ (800c254 <PID_Init+0x1d8>)
 800c198:	621a      	str	r2, [r3, #32]

	TXPID.P_OUT = 0.0;
 800c19a:	4b2c      	ldr	r3, [pc, #176]	@ (800c24c <PID_Init+0x1d0>)
 800c19c:	f04f 0200 	mov.w	r2, #0
 800c1a0:	605a      	str	r2, [r3, #4]
	TXPID.I_OUT = 0.0;
 800c1a2:	4b2a      	ldr	r3, [pc, #168]	@ (800c24c <PID_Init+0x1d0>)
 800c1a4:	f04f 0200 	mov.w	r2, #0
 800c1a8:	60da      	str	r2, [r3, #12]
	TXPID.D_OUT = 0.0;
 800c1aa:	4b28      	ldr	r3, [pc, #160]	@ (800c24c <PID_Init+0x1d0>)
 800c1ac:	f04f 0200 	mov.w	r2, #0
 800c1b0:	619a      	str	r2, [r3, #24]

	TXPID.OUT = 0.0;
 800c1b2:	4b26      	ldr	r3, [pc, #152]	@ (800c24c <PID_Init+0x1d0>)
 800c1b4:	f04f 0200 	mov.w	r2, #0
 800c1b8:	61da      	str	r2, [r3, #28]

	TXPID.err = 0.0;
 800c1ba:	4b24      	ldr	r3, [pc, #144]	@ (800c24c <PID_Init+0x1d0>)
 800c1bc:	2200      	movs	r2, #0
 800c1be:	849a      	strh	r2, [r3, #36]	@ 0x24
	TXPID.err_err = 0.0;
 800c1c0:	4b22      	ldr	r3, [pc, #136]	@ (800c24c <PID_Init+0x1d0>)
 800c1c2:	2200      	movs	r2, #0
 800c1c4:	84da      	strh	r2, [r3, #38]	@ 0x26
	TXPID.err_old = 0.0;
 800c1c6:	4b21      	ldr	r3, [pc, #132]	@ (800c24c <PID_Init+0x1d0>)
 800c1c8:	2200      	movs	r2, #0
 800c1ca:	851a      	strh	r2, [r3, #40]	@ 0x28

	//======================TY=====================//
	TYPID.P = -1;
 800c1cc:	4b22      	ldr	r3, [pc, #136]	@ (800c258 <PID_Init+0x1dc>)
 800c1ce:	4a23      	ldr	r2, [pc, #140]	@ (800c25c <PID_Init+0x1e0>)
 800c1d0:	601a      	str	r2, [r3, #0]
	TYPID.I = -0;      //0.9  0.01   0.3
 800c1d2:	4b21      	ldr	r3, [pc, #132]	@ (800c258 <PID_Init+0x1dc>)
 800c1d4:	f04f 0200 	mov.w	r2, #0
 800c1d8:	609a      	str	r2, [r3, #8]
	//0.9 0 0.2
	TYPID.D = -0.3;
 800c1da:	4b1f      	ldr	r3, [pc, #124]	@ (800c258 <PID_Init+0x1dc>)
 800c1dc:	4a20      	ldr	r2, [pc, #128]	@ (800c260 <PID_Init+0x1e4>)
 800c1de:	615a      	str	r2, [r3, #20]

	TYPID.I_LIMIT = 100.0;
 800c1e0:	4b1d      	ldr	r3, [pc, #116]	@ (800c258 <PID_Init+0x1dc>)
 800c1e2:	4a14      	ldr	r2, [pc, #80]	@ (800c234 <PID_Init+0x1b8>)
 800c1e4:	611a      	str	r2, [r3, #16]
	TYPID.OUT_LIMIT = 300.0;
 800c1e6:	4b1c      	ldr	r3, [pc, #112]	@ (800c258 <PID_Init+0x1dc>)
 800c1e8:	4a1a      	ldr	r2, [pc, #104]	@ (800c254 <PID_Init+0x1d8>)
 800c1ea:	621a      	str	r2, [r3, #32]

	TYPID.P_OUT = 0.0;
 800c1ec:	4b1a      	ldr	r3, [pc, #104]	@ (800c258 <PID_Init+0x1dc>)
 800c1ee:	f04f 0200 	mov.w	r2, #0
 800c1f2:	605a      	str	r2, [r3, #4]
	TYPID.I_OUT = 0.0;
 800c1f4:	4b18      	ldr	r3, [pc, #96]	@ (800c258 <PID_Init+0x1dc>)
 800c1f6:	f04f 0200 	mov.w	r2, #0
 800c1fa:	60da      	str	r2, [r3, #12]
	TYPID.D_OUT = 0.0;
 800c1fc:	4b16      	ldr	r3, [pc, #88]	@ (800c258 <PID_Init+0x1dc>)
 800c1fe:	f04f 0200 	mov.w	r2, #0
 800c202:	619a      	str	r2, [r3, #24]

	TYPID.OUT = 0.0;
 800c204:	4b14      	ldr	r3, [pc, #80]	@ (800c258 <PID_Init+0x1dc>)
 800c206:	f04f 0200 	mov.w	r2, #0
 800c20a:	61da      	str	r2, [r3, #28]

	TYPID.err = 0.0;
 800c20c:	4b12      	ldr	r3, [pc, #72]	@ (800c258 <PID_Init+0x1dc>)
 800c20e:	2200      	movs	r2, #0
 800c210:	849a      	strh	r2, [r3, #36]	@ 0x24
	TYPID.err_err = 0.0;
 800c212:	4b11      	ldr	r3, [pc, #68]	@ (800c258 <PID_Init+0x1dc>)
 800c214:	2200      	movs	r2, #0
 800c216:	84da      	strh	r2, [r3, #38]	@ 0x26
	TYPID.err_old = 0.0;
 800c218:	4b0f      	ldr	r3, [pc, #60]	@ (800c258 <PID_Init+0x1dc>)
 800c21a:	2200      	movs	r2, #0
 800c21c:	851a      	strh	r2, [r3, #40]	@ 0x28
}
 800c21e:	bf00      	nop
 800c220:	46bd      	mov	sp, r7
 800c222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c226:	4770      	bx	lr
 800c228:	24000af8 	.word	0x24000af8
 800c22c:	41a00000 	.word	0x41a00000
 800c230:	42700000 	.word	0x42700000
 800c234:	42c80000 	.word	0x42c80000
 800c238:	24000b24 	.word	0x24000b24
 800c23c:	24000b50 	.word	0x24000b50
 800c240:	3f666666 	.word	0x3f666666
 800c244:	447a0000 	.word	0x447a0000
 800c248:	4512e000 	.word	0x4512e000
 800c24c:	24000b7c 	.word	0x24000b7c
 800c250:	3e99999a 	.word	0x3e99999a
 800c254:	43960000 	.word	0x43960000
 800c258:	24000ba8 	.word	0x24000ba8
 800c25c:	bf800000 	.word	0xbf800000
 800c260:	be99999a 	.word	0xbe99999a

0800c264 <Tx_X_Ctrl>:
	PID->err_old = PID->err;

	return PID->OUT;
}
/* TX的X轴调整 */
short Tx_X_Ctrl(_PID *PID, float goal) {
 800c264:	b580      	push	{r7, lr}
 800c266:	b082      	sub	sp, #8
 800c268:	af00      	add	r7, sp, #0
 800c26a:	6078      	str	r0, [r7, #4]
 800c26c:	ed87 0a00 	vstr	s0, [r7]
	PID->err = Tx_NOW - goal;
 800c270:	4b4e      	ldr	r3, [pc, #312]	@ (800c3ac <Tx_X_Ctrl+0x148>)
 800c272:	ed93 7a00 	vldr	s14, [r3]
 800c276:	edd7 7a00 	vldr	s15, [r7]
 800c27a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c27e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c282:	ee17 3a90 	vmov	r3, s15
 800c286:	b21a      	sxth	r2, r3
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	849a      	strh	r2, [r3, #36]	@ 0x24

	PID->err_err = PID->err - PID->err_old;
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 800c292:	b29a      	uxth	r2, r3
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	@ 0x28
 800c29a:	b29b      	uxth	r3, r3
 800c29c:	1ad3      	subs	r3, r2, r3
 800c29e:	b29b      	uxth	r3, r3
 800c2a0:	b21a      	sxth	r2, r3
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	84da      	strh	r2, [r3, #38]	@ 0x26

	PID->P_OUT = PID->P * PID->err;
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	ed93 7a00 	vldr	s14, [r3]
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 800c2b2:	ee07 3a90 	vmov	s15, r3
 800c2b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c2ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	edc3 7a01 	vstr	s15, [r3, #4]
	PID->I_OUT += PID->I * PID->err;
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	ed93 7a03 	vldr	s14, [r3, #12]
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	edd3 6a02 	vldr	s13, [r3, #8]
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 800c2d6:	ee07 3a90 	vmov	s15, r3
 800c2da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c2de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c2e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	edc3 7a03 	vstr	s15, [r3, #12]
	PID->D_OUT = PID->D * PID->err_err;
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	ed93 7a05 	vldr	s14, [r3, #20]
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	@ 0x26
 800c2f8:	ee07 3a90 	vmov	s15, r3
 800c2fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c300:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	edc3 7a06 	vstr	s15, [r3, #24]

	PID->I_OUT = limit(PID->I_OUT, -PID->I_LIMIT, PID->I_LIMIT);
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	ed93 7a03 	vldr	s14, [r3, #12]
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	edd3 7a04 	vldr	s15, [r3, #16]
 800c316:	eef1 7a67 	vneg.f32	s15, s15
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	edd3 6a04 	vldr	s13, [r3, #16]
 800c320:	eeb0 1a66 	vmov.f32	s2, s13
 800c324:	eef0 0a67 	vmov.f32	s1, s15
 800c328:	eeb0 0a47 	vmov.f32	s0, s14
 800c32c:	f7ff fe7a 	bl	800c024 <limit>
 800c330:	eef0 7a40 	vmov.f32	s15, s0
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	edc3 7a03 	vstr	s15, [r3, #12]

	PID->OUT = PID->P_OUT + PID->I_OUT + PID->D_OUT;
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	ed93 7a01 	vldr	s14, [r3, #4]
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	edd3 7a03 	vldr	s15, [r3, #12]
 800c346:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	edd3 7a06 	vldr	s15, [r3, #24]
 800c350:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	edc3 7a07 	vstr	s15, [r3, #28]

	PID->OUT = limit(PID->OUT, -PID->OUT_LIMIT, PID->OUT_LIMIT);
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	ed93 7a07 	vldr	s14, [r3, #28]
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	edd3 7a08 	vldr	s15, [r3, #32]
 800c366:	eef1 7a67 	vneg.f32	s15, s15
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	edd3 6a08 	vldr	s13, [r3, #32]
 800c370:	eeb0 1a66 	vmov.f32	s2, s13
 800c374:	eef0 0a67 	vmov.f32	s1, s15
 800c378:	eeb0 0a47 	vmov.f32	s0, s14
 800c37c:	f7ff fe52 	bl	800c024 <limit>
 800c380:	eef0 7a40 	vmov.f32	s15, s0
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	edc3 7a07 	vstr	s15, [r3, #28]

	PID->err_old = PID->err;
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	f9b3 2024 	ldrsh.w	r2, [r3, #36]	@ 0x24
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	851a      	strh	r2, [r3, #40]	@ 0x28

	return PID->OUT;
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	edd3 7a07 	vldr	s15, [r3, #28]
 800c39a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c39e:	ee17 3a90 	vmov	r3, s15
 800c3a2:	b21b      	sxth	r3, r3
}
 800c3a4:	4618      	mov	r0, r3
 800c3a6:	3708      	adds	r7, #8
 800c3a8:	46bd      	mov	sp, r7
 800c3aa:	bd80      	pop	{r7, pc}
 800c3ac:	24000454 	.word	0x24000454

0800c3b0 <Tx_Y_Ctrl>:

/* TX的Y轴调整 */
short Tx_Y_Ctrl(_PID *PID, float goal) {
 800c3b0:	b580      	push	{r7, lr}
 800c3b2:	b082      	sub	sp, #8
 800c3b4:	af00      	add	r7, sp, #0
 800c3b6:	6078      	str	r0, [r7, #4]
 800c3b8:	ed87 0a00 	vstr	s0, [r7]
	PID->err = Ty_NOW - goal;
 800c3bc:	4b4e      	ldr	r3, [pc, #312]	@ (800c4f8 <Tx_Y_Ctrl+0x148>)
 800c3be:	ed93 7a00 	vldr	s14, [r3]
 800c3c2:	edd7 7a00 	vldr	s15, [r7]
 800c3c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c3ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c3ce:	ee17 3a90 	vmov	r3, s15
 800c3d2:	b21a      	sxth	r2, r3
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	849a      	strh	r2, [r3, #36]	@ 0x24

	PID->err_err = PID->err - PID->err_old;
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 800c3de:	b29a      	uxth	r2, r3
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	@ 0x28
 800c3e6:	b29b      	uxth	r3, r3
 800c3e8:	1ad3      	subs	r3, r2, r3
 800c3ea:	b29b      	uxth	r3, r3
 800c3ec:	b21a      	sxth	r2, r3
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	84da      	strh	r2, [r3, #38]	@ 0x26

	PID->P_OUT = PID->P * PID->err;
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	ed93 7a00 	vldr	s14, [r3]
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 800c3fe:	ee07 3a90 	vmov	s15, r3
 800c402:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c406:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	edc3 7a01 	vstr	s15, [r3, #4]
	PID->I_OUT += PID->I * PID->err;
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	ed93 7a03 	vldr	s14, [r3, #12]
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	edd3 6a02 	vldr	s13, [r3, #8]
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 800c422:	ee07 3a90 	vmov	s15, r3
 800c426:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c42a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c42e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	edc3 7a03 	vstr	s15, [r3, #12]
	PID->D_OUT = PID->D * PID->err_err;
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	ed93 7a05 	vldr	s14, [r3, #20]
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	@ 0x26
 800c444:	ee07 3a90 	vmov	s15, r3
 800c448:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c44c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	edc3 7a06 	vstr	s15, [r3, #24]

	PID->I_OUT = limit(PID->I_OUT, -PID->I_LIMIT, PID->I_LIMIT);
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	ed93 7a03 	vldr	s14, [r3, #12]
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	edd3 7a04 	vldr	s15, [r3, #16]
 800c462:	eef1 7a67 	vneg.f32	s15, s15
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	edd3 6a04 	vldr	s13, [r3, #16]
 800c46c:	eeb0 1a66 	vmov.f32	s2, s13
 800c470:	eef0 0a67 	vmov.f32	s1, s15
 800c474:	eeb0 0a47 	vmov.f32	s0, s14
 800c478:	f7ff fdd4 	bl	800c024 <limit>
 800c47c:	eef0 7a40 	vmov.f32	s15, s0
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	edc3 7a03 	vstr	s15, [r3, #12]

	PID->OUT = PID->P_OUT + PID->I_OUT + PID->D_OUT;
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	ed93 7a01 	vldr	s14, [r3, #4]
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	edd3 7a03 	vldr	s15, [r3, #12]
 800c492:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	edd3 7a06 	vldr	s15, [r3, #24]
 800c49c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	edc3 7a07 	vstr	s15, [r3, #28]

	PID->OUT = limit(PID->OUT, -PID->OUT_LIMIT, PID->OUT_LIMIT);
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	ed93 7a07 	vldr	s14, [r3, #28]
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	edd3 7a08 	vldr	s15, [r3, #32]
 800c4b2:	eef1 7a67 	vneg.f32	s15, s15
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	edd3 6a08 	vldr	s13, [r3, #32]
 800c4bc:	eeb0 1a66 	vmov.f32	s2, s13
 800c4c0:	eef0 0a67 	vmov.f32	s1, s15
 800c4c4:	eeb0 0a47 	vmov.f32	s0, s14
 800c4c8:	f7ff fdac 	bl	800c024 <limit>
 800c4cc:	eef0 7a40 	vmov.f32	s15, s0
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	edc3 7a07 	vstr	s15, [r3, #28]

	PID->err_old = PID->err;
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	f9b3 2024 	ldrsh.w	r2, [r3, #36]	@ 0x24
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	851a      	strh	r2, [r3, #40]	@ 0x28

	return PID->OUT;
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	edd3 7a07 	vldr	s15, [r3, #28]
 800c4e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c4ea:	ee17 3a90 	vmov	r3, s15
 800c4ee:	b21b      	sxth	r3, r3
}
 800c4f0:	4618      	mov	r0, r3
 800c4f2:	3708      	adds	r7, #8
 800c4f4:	46bd      	mov	sp, r7
 800c4f6:	bd80      	pop	{r7, pc}
 800c4f8:	24000458 	.word	0x24000458

0800c4fc <GetRxFlag>:
#define RunSpeed 100
#define RunAcc 120

int time5_jiancha = 0;

uint8_t GetRxFlag(void) {
 800c4fc:	b480      	push	{r7}
 800c4fe:	af00      	add	r7, sp, #0
	if (RxFlag == 1) {
 800c500:	4b07      	ldr	r3, [pc, #28]	@ (800c520 <GetRxFlag+0x24>)
 800c502:	781b      	ldrb	r3, [r3, #0]
 800c504:	2b01      	cmp	r3, #1
 800c506:	d104      	bne.n	800c512 <GetRxFlag+0x16>
		RxFlag = 0;
 800c508:	4b05      	ldr	r3, [pc, #20]	@ (800c520 <GetRxFlag+0x24>)
 800c50a:	2200      	movs	r2, #0
 800c50c:	701a      	strb	r2, [r3, #0]
		return 1;
 800c50e:	2301      	movs	r3, #1
 800c510:	e000      	b.n	800c514 <GetRxFlag+0x18>
	}
	return 0;
 800c512:	2300      	movs	r3, #0
}
 800c514:	4618      	mov	r0, r3
 800c516:	46bd      	mov	sp, r7
 800c518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c51c:	4770      	bx	lr
 800c51e:	bf00      	nop
 800c520:	2400029d 	.word	0x2400029d

0800c524 <Move_Line>:
////曲线加减速时间计算公式：t2 - t1 = (256 - acc) * 50(us)，Vt2 = Vt1 + 1(RPM)；
////（注：acc 为加速度档位，Vt1为 t1 时刻的转速，，Vt2为 t2 时刻的转速）
/////////////////////////////////////////////////////////////////////////////////////////////
//后续根据实物再进行调整
void Move_Line(u16 speed, u8 acc, u32 length)  //初始设定130.5个脉冲是一厘米
{
 800c524:	b580      	push	{r7, lr}
 800c526:	b088      	sub	sp, #32
 800c528:	af04      	add	r7, sp, #16
 800c52a:	4603      	mov	r3, r0
 800c52c:	603a      	str	r2, [r7, #0]
 800c52e:	80fb      	strh	r3, [r7, #6]
 800c530:	460b      	mov	r3, r1
 800c532:	717b      	strb	r3, [r7, #5]
	int time;
	time = length / speed * 20;  //毫秒
 800c534:	88fb      	ldrh	r3, [r7, #6]
 800c536:	683a      	ldr	r2, [r7, #0]
 800c538:	fbb2 f2f3 	udiv	r2, r2, r3
 800c53c:	4613      	mov	r3, r2
 800c53e:	009b      	lsls	r3, r3, #2
 800c540:	4413      	add	r3, r2
 800c542:	009b      	lsls	r3, r3, #2
 800c544:	60fb      	str	r3, [r7, #12]
	Emm_V5_Pos_Control(1, 0, speed, acc, length, 0, true);
 800c546:	7979      	ldrb	r1, [r7, #5]
 800c548:	88fa      	ldrh	r2, [r7, #6]
 800c54a:	2301      	movs	r3, #1
 800c54c:	9302      	str	r3, [sp, #8]
 800c54e:	2300      	movs	r3, #0
 800c550:	9301      	str	r3, [sp, #4]
 800c552:	683b      	ldr	r3, [r7, #0]
 800c554:	9300      	str	r3, [sp, #0]
 800c556:	460b      	mov	r3, r1
 800c558:	2100      	movs	r1, #0
 800c55a:	2001      	movs	r0, #1
 800c55c:	f7ff fcd2 	bl	800bf04 <Emm_V5_Pos_Control>
	Emm_V5_Pos_Control(2, 0, speed, acc, length, 0, true);
 800c560:	7979      	ldrb	r1, [r7, #5]
 800c562:	88fa      	ldrh	r2, [r7, #6]
 800c564:	2301      	movs	r3, #1
 800c566:	9302      	str	r3, [sp, #8]
 800c568:	2300      	movs	r3, #0
 800c56a:	9301      	str	r3, [sp, #4]
 800c56c:	683b      	ldr	r3, [r7, #0]
 800c56e:	9300      	str	r3, [sp, #0]
 800c570:	460b      	mov	r3, r1
 800c572:	2100      	movs	r1, #0
 800c574:	2002      	movs	r0, #2
 800c576:	f7ff fcc5 	bl	800bf04 <Emm_V5_Pos_Control>
	Emm_V5_Pos_Control(3, 0, speed, acc, length, 0, true);
 800c57a:	7979      	ldrb	r1, [r7, #5]
 800c57c:	88fa      	ldrh	r2, [r7, #6]
 800c57e:	2301      	movs	r3, #1
 800c580:	9302      	str	r3, [sp, #8]
 800c582:	2300      	movs	r3, #0
 800c584:	9301      	str	r3, [sp, #4]
 800c586:	683b      	ldr	r3, [r7, #0]
 800c588:	9300      	str	r3, [sp, #0]
 800c58a:	460b      	mov	r3, r1
 800c58c:	2100      	movs	r1, #0
 800c58e:	2003      	movs	r0, #3
 800c590:	f7ff fcb8 	bl	800bf04 <Emm_V5_Pos_Control>
	Emm_V5_Pos_Control(4, 0, speed, acc, length, 0, true);
 800c594:	7979      	ldrb	r1, [r7, #5]
 800c596:	88fa      	ldrh	r2, [r7, #6]
 800c598:	2301      	movs	r3, #1
 800c59a:	9302      	str	r3, [sp, #8]
 800c59c:	2300      	movs	r3, #0
 800c59e:	9301      	str	r3, [sp, #4]
 800c5a0:	683b      	ldr	r3, [r7, #0]
 800c5a2:	9300      	str	r3, [sp, #0]
 800c5a4:	460b      	mov	r3, r1
 800c5a6:	2100      	movs	r1, #0
 800c5a8:	2004      	movs	r0, #4
 800c5aa:	f7ff fcab 	bl	800bf04 <Emm_V5_Pos_Control>

	Emm_V5_Synchronous_motion();  // 触发多机同步开始运动
 800c5ae:	f7ff fd1f 	bl	800bff0 <Emm_V5_Synchronous_motion>
	Emm_mode = 1;
 800c5b2:	4b0f      	ldr	r3, [pc, #60]	@ (800c5f0 <Move_Line+0xcc>)
 800c5b4:	2201      	movs	r2, #1
 800c5b6:	701a      	strb	r2, [r3, #0]
	time5_jiancha = (time + 800) / 10;
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	f503 7348 	add.w	r3, r3, #800	@ 0x320
 800c5be:	4a0d      	ldr	r2, [pc, #52]	@ (800c5f4 <Move_Line+0xd0>)
 800c5c0:	fb82 1203 	smull	r1, r2, r2, r3
 800c5c4:	1092      	asrs	r2, r2, #2
 800c5c6:	17db      	asrs	r3, r3, #31
 800c5c8:	1ad3      	subs	r3, r2, r3
 800c5ca:	4a0b      	ldr	r2, [pc, #44]	@ (800c5f8 <Move_Line+0xd4>)
 800c5cc:	6013      	str	r3, [r2, #0]
	while ((GetRxFlag() == 0)&& (time5_jiancha != 0) )
 800c5ce:	bf00      	nop
 800c5d0:	f7ff ff94 	bl	800c4fc <GetRxFlag>
 800c5d4:	4603      	mov	r3, r0
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d103      	bne.n	800c5e2 <Move_Line+0xbe>
 800c5da:	4b07      	ldr	r3, [pc, #28]	@ (800c5f8 <Move_Line+0xd4>)
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d1f6      	bne.n	800c5d0 <Move_Line+0xac>
		;
//	RxFlag = 0;·
	HAL_Delay(30);
 800c5e2:	201e      	movs	r0, #30
 800c5e4:	f7f6 fb0a 	bl	8002bfc <HAL_Delay>
}
 800c5e8:	bf00      	nop
 800c5ea:	3710      	adds	r7, #16
 800c5ec:	46bd      	mov	sp, r7
 800c5ee:	bd80      	pop	{r7, pc}
 800c5f0:	2400029c 	.word	0x2400029c
 800c5f4:	66666667 	.word	0x66666667
 800c5f8:	24000bdc 	.word	0x24000bdc

0800c5fc <Move_Left>:

void Move_Left(u16 speed, u8 acc, u32 length) {
 800c5fc:	b580      	push	{r7, lr}
 800c5fe:	b088      	sub	sp, #32
 800c600:	af04      	add	r7, sp, #16
 800c602:	4603      	mov	r3, r0
 800c604:	603a      	str	r2, [r7, #0]
 800c606:	80fb      	strh	r3, [r7, #6]
 800c608:	460b      	mov	r3, r1
 800c60a:	717b      	strb	r3, [r7, #5]
	int time;
	time = length / speed * 20;  //毫秒
 800c60c:	88fb      	ldrh	r3, [r7, #6]
 800c60e:	683a      	ldr	r2, [r7, #0]
 800c610:	fbb2 f2f3 	udiv	r2, r2, r3
 800c614:	4613      	mov	r3, r2
 800c616:	009b      	lsls	r3, r3, #2
 800c618:	4413      	add	r3, r2
 800c61a:	009b      	lsls	r3, r3, #2
 800c61c:	60fb      	str	r3, [r7, #12]
	Emm_V5_Pos_Control(1, 1, speed, acc, length, 0, true);
 800c61e:	7979      	ldrb	r1, [r7, #5]
 800c620:	88fa      	ldrh	r2, [r7, #6]
 800c622:	2301      	movs	r3, #1
 800c624:	9302      	str	r3, [sp, #8]
 800c626:	2300      	movs	r3, #0
 800c628:	9301      	str	r3, [sp, #4]
 800c62a:	683b      	ldr	r3, [r7, #0]
 800c62c:	9300      	str	r3, [sp, #0]
 800c62e:	460b      	mov	r3, r1
 800c630:	2101      	movs	r1, #1
 800c632:	2001      	movs	r0, #1
 800c634:	f7ff fc66 	bl	800bf04 <Emm_V5_Pos_Control>
	Emm_V5_Pos_Control(2, 0, speed, acc, length, 0, true);
 800c638:	7979      	ldrb	r1, [r7, #5]
 800c63a:	88fa      	ldrh	r2, [r7, #6]
 800c63c:	2301      	movs	r3, #1
 800c63e:	9302      	str	r3, [sp, #8]
 800c640:	2300      	movs	r3, #0
 800c642:	9301      	str	r3, [sp, #4]
 800c644:	683b      	ldr	r3, [r7, #0]
 800c646:	9300      	str	r3, [sp, #0]
 800c648:	460b      	mov	r3, r1
 800c64a:	2100      	movs	r1, #0
 800c64c:	2002      	movs	r0, #2
 800c64e:	f7ff fc59 	bl	800bf04 <Emm_V5_Pos_Control>
	Emm_V5_Pos_Control(3, 1, speed, acc, length, 0, true);
 800c652:	7979      	ldrb	r1, [r7, #5]
 800c654:	88fa      	ldrh	r2, [r7, #6]
 800c656:	2301      	movs	r3, #1
 800c658:	9302      	str	r3, [sp, #8]
 800c65a:	2300      	movs	r3, #0
 800c65c:	9301      	str	r3, [sp, #4]
 800c65e:	683b      	ldr	r3, [r7, #0]
 800c660:	9300      	str	r3, [sp, #0]
 800c662:	460b      	mov	r3, r1
 800c664:	2101      	movs	r1, #1
 800c666:	2003      	movs	r0, #3
 800c668:	f7ff fc4c 	bl	800bf04 <Emm_V5_Pos_Control>
	Emm_V5_Pos_Control(4, 0, speed, acc, length, 0, true);
 800c66c:	7979      	ldrb	r1, [r7, #5]
 800c66e:	88fa      	ldrh	r2, [r7, #6]
 800c670:	2301      	movs	r3, #1
 800c672:	9302      	str	r3, [sp, #8]
 800c674:	2300      	movs	r3, #0
 800c676:	9301      	str	r3, [sp, #4]
 800c678:	683b      	ldr	r3, [r7, #0]
 800c67a:	9300      	str	r3, [sp, #0]
 800c67c:	460b      	mov	r3, r1
 800c67e:	2100      	movs	r1, #0
 800c680:	2004      	movs	r0, #4
 800c682:	f7ff fc3f 	bl	800bf04 <Emm_V5_Pos_Control>

	Emm_V5_Synchronous_motion(); // 触发多机同步开始运动
 800c686:	f7ff fcb3 	bl	800bff0 <Emm_V5_Synchronous_motion>

	Emm_mode = 1;
 800c68a:	4b0f      	ldr	r3, [pc, #60]	@ (800c6c8 <Move_Left+0xcc>)
 800c68c:	2201      	movs	r2, #1
 800c68e:	701a      	strb	r2, [r3, #0]
	time5_jiancha = (time + 800) / 10;
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	f503 7348 	add.w	r3, r3, #800	@ 0x320
 800c696:	4a0d      	ldr	r2, [pc, #52]	@ (800c6cc <Move_Left+0xd0>)
 800c698:	fb82 1203 	smull	r1, r2, r2, r3
 800c69c:	1092      	asrs	r2, r2, #2
 800c69e:	17db      	asrs	r3, r3, #31
 800c6a0:	1ad3      	subs	r3, r2, r3
 800c6a2:	4a0b      	ldr	r2, [pc, #44]	@ (800c6d0 <Move_Left+0xd4>)
 800c6a4:	6013      	str	r3, [r2, #0]
	while ((GetRxFlag() == 0) && (time5_jiancha != 0))
 800c6a6:	bf00      	nop
 800c6a8:	f7ff ff28 	bl	800c4fc <GetRxFlag>
 800c6ac:	4603      	mov	r3, r0
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d103      	bne.n	800c6ba <Move_Left+0xbe>
 800c6b2:	4b07      	ldr	r3, [pc, #28]	@ (800c6d0 <Move_Left+0xd4>)
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d1f6      	bne.n	800c6a8 <Move_Left+0xac>
		;
//	RxFlag = 0;
	HAL_Delay(30);
 800c6ba:	201e      	movs	r0, #30
 800c6bc:	f7f6 fa9e 	bl	8002bfc <HAL_Delay>
}
 800c6c0:	bf00      	nop
 800c6c2:	3710      	adds	r7, #16
 800c6c4:	46bd      	mov	sp, r7
 800c6c6:	bd80      	pop	{r7, pc}
 800c6c8:	2400029c 	.word	0x2400029c
 800c6cc:	66666667 	.word	0x66666667
 800c6d0:	24000bdc 	.word	0x24000bdc

0800c6d4 <Move_Back>:

void Move_Back(u16 speed, u8 acc, u32 length) {
 800c6d4:	b580      	push	{r7, lr}
 800c6d6:	b088      	sub	sp, #32
 800c6d8:	af04      	add	r7, sp, #16
 800c6da:	4603      	mov	r3, r0
 800c6dc:	603a      	str	r2, [r7, #0]
 800c6de:	80fb      	strh	r3, [r7, #6]
 800c6e0:	460b      	mov	r3, r1
 800c6e2:	717b      	strb	r3, [r7, #5]
	int time;
	time = length / speed * 20;  //毫秒
 800c6e4:	88fb      	ldrh	r3, [r7, #6]
 800c6e6:	683a      	ldr	r2, [r7, #0]
 800c6e8:	fbb2 f2f3 	udiv	r2, r2, r3
 800c6ec:	4613      	mov	r3, r2
 800c6ee:	009b      	lsls	r3, r3, #2
 800c6f0:	4413      	add	r3, r2
 800c6f2:	009b      	lsls	r3, r3, #2
 800c6f4:	60fb      	str	r3, [r7, #12]
	Emm_V5_Pos_Control(1, 1, speed, acc, length, 0, true);
 800c6f6:	7979      	ldrb	r1, [r7, #5]
 800c6f8:	88fa      	ldrh	r2, [r7, #6]
 800c6fa:	2301      	movs	r3, #1
 800c6fc:	9302      	str	r3, [sp, #8]
 800c6fe:	2300      	movs	r3, #0
 800c700:	9301      	str	r3, [sp, #4]
 800c702:	683b      	ldr	r3, [r7, #0]
 800c704:	9300      	str	r3, [sp, #0]
 800c706:	460b      	mov	r3, r1
 800c708:	2101      	movs	r1, #1
 800c70a:	2001      	movs	r0, #1
 800c70c:	f7ff fbfa 	bl	800bf04 <Emm_V5_Pos_Control>
	Emm_V5_Pos_Control(2, 1, speed, acc, length, 0, true);
 800c710:	7979      	ldrb	r1, [r7, #5]
 800c712:	88fa      	ldrh	r2, [r7, #6]
 800c714:	2301      	movs	r3, #1
 800c716:	9302      	str	r3, [sp, #8]
 800c718:	2300      	movs	r3, #0
 800c71a:	9301      	str	r3, [sp, #4]
 800c71c:	683b      	ldr	r3, [r7, #0]
 800c71e:	9300      	str	r3, [sp, #0]
 800c720:	460b      	mov	r3, r1
 800c722:	2101      	movs	r1, #1
 800c724:	2002      	movs	r0, #2
 800c726:	f7ff fbed 	bl	800bf04 <Emm_V5_Pos_Control>
	Emm_V5_Pos_Control(3, 1, speed, acc, length, 0, true);
 800c72a:	7979      	ldrb	r1, [r7, #5]
 800c72c:	88fa      	ldrh	r2, [r7, #6]
 800c72e:	2301      	movs	r3, #1
 800c730:	9302      	str	r3, [sp, #8]
 800c732:	2300      	movs	r3, #0
 800c734:	9301      	str	r3, [sp, #4]
 800c736:	683b      	ldr	r3, [r7, #0]
 800c738:	9300      	str	r3, [sp, #0]
 800c73a:	460b      	mov	r3, r1
 800c73c:	2101      	movs	r1, #1
 800c73e:	2003      	movs	r0, #3
 800c740:	f7ff fbe0 	bl	800bf04 <Emm_V5_Pos_Control>
	Emm_V5_Pos_Control(4, 1, speed, acc, length, 0, true);
 800c744:	7979      	ldrb	r1, [r7, #5]
 800c746:	88fa      	ldrh	r2, [r7, #6]
 800c748:	2301      	movs	r3, #1
 800c74a:	9302      	str	r3, [sp, #8]
 800c74c:	2300      	movs	r3, #0
 800c74e:	9301      	str	r3, [sp, #4]
 800c750:	683b      	ldr	r3, [r7, #0]
 800c752:	9300      	str	r3, [sp, #0]
 800c754:	460b      	mov	r3, r1
 800c756:	2101      	movs	r1, #1
 800c758:	2004      	movs	r0, #4
 800c75a:	f7ff fbd3 	bl	800bf04 <Emm_V5_Pos_Control>

	Emm_V5_Synchronous_motion(); // 触发多机同步开始运动
 800c75e:	f7ff fc47 	bl	800bff0 <Emm_V5_Synchronous_motion>


	Emm_mode = 1;
 800c762:	4b0f      	ldr	r3, [pc, #60]	@ (800c7a0 <Move_Back+0xcc>)
 800c764:	2201      	movs	r2, #1
 800c766:	701a      	strb	r2, [r3, #0]
	time5_jiancha = (time + 800) / 10;
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	f503 7348 	add.w	r3, r3, #800	@ 0x320
 800c76e:	4a0d      	ldr	r2, [pc, #52]	@ (800c7a4 <Move_Back+0xd0>)
 800c770:	fb82 1203 	smull	r1, r2, r2, r3
 800c774:	1092      	asrs	r2, r2, #2
 800c776:	17db      	asrs	r3, r3, #31
 800c778:	1ad3      	subs	r3, r2, r3
 800c77a:	4a0b      	ldr	r2, [pc, #44]	@ (800c7a8 <Move_Back+0xd4>)
 800c77c:	6013      	str	r3, [r2, #0]
	while ((GetRxFlag() == 0) && (time5_jiancha != 0))
 800c77e:	bf00      	nop
 800c780:	f7ff febc 	bl	800c4fc <GetRxFlag>
 800c784:	4603      	mov	r3, r0
 800c786:	2b00      	cmp	r3, #0
 800c788:	d103      	bne.n	800c792 <Move_Back+0xbe>
 800c78a:	4b07      	ldr	r3, [pc, #28]	@ (800c7a8 <Move_Back+0xd4>)
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d1f6      	bne.n	800c780 <Move_Back+0xac>
		;
//	RxFlag = 0;
	HAL_Delay(30);
 800c792:	201e      	movs	r0, #30
 800c794:	f7f6 fa32 	bl	8002bfc <HAL_Delay>
}
 800c798:	bf00      	nop
 800c79a:	3710      	adds	r7, #16
 800c79c:	46bd      	mov	sp, r7
 800c79e:	bd80      	pop	{r7, pc}
 800c7a0:	2400029c 	.word	0x2400029c
 800c7a4:	66666667 	.word	0x66666667
 800c7a8:	24000bdc 	.word	0x24000bdc

0800c7ac <Move_Right>:

void Move_Right(u16 speed, u8 acc, u32 length) {
 800c7ac:	b580      	push	{r7, lr}
 800c7ae:	b088      	sub	sp, #32
 800c7b0:	af04      	add	r7, sp, #16
 800c7b2:	4603      	mov	r3, r0
 800c7b4:	603a      	str	r2, [r7, #0]
 800c7b6:	80fb      	strh	r3, [r7, #6]
 800c7b8:	460b      	mov	r3, r1
 800c7ba:	717b      	strb	r3, [r7, #5]
	int time;
	time = length / speed * 20;  //毫秒
 800c7bc:	88fb      	ldrh	r3, [r7, #6]
 800c7be:	683a      	ldr	r2, [r7, #0]
 800c7c0:	fbb2 f2f3 	udiv	r2, r2, r3
 800c7c4:	4613      	mov	r3, r2
 800c7c6:	009b      	lsls	r3, r3, #2
 800c7c8:	4413      	add	r3, r2
 800c7ca:	009b      	lsls	r3, r3, #2
 800c7cc:	60fb      	str	r3, [r7, #12]
	Emm_V5_Pos_Control(1, 0, speed, acc, length, 0, true);
 800c7ce:	7979      	ldrb	r1, [r7, #5]
 800c7d0:	88fa      	ldrh	r2, [r7, #6]
 800c7d2:	2301      	movs	r3, #1
 800c7d4:	9302      	str	r3, [sp, #8]
 800c7d6:	2300      	movs	r3, #0
 800c7d8:	9301      	str	r3, [sp, #4]
 800c7da:	683b      	ldr	r3, [r7, #0]
 800c7dc:	9300      	str	r3, [sp, #0]
 800c7de:	460b      	mov	r3, r1
 800c7e0:	2100      	movs	r1, #0
 800c7e2:	2001      	movs	r0, #1
 800c7e4:	f7ff fb8e 	bl	800bf04 <Emm_V5_Pos_Control>
	Emm_V5_Pos_Control(2, 1, speed, acc, length, 0, true);
 800c7e8:	7979      	ldrb	r1, [r7, #5]
 800c7ea:	88fa      	ldrh	r2, [r7, #6]
 800c7ec:	2301      	movs	r3, #1
 800c7ee:	9302      	str	r3, [sp, #8]
 800c7f0:	2300      	movs	r3, #0
 800c7f2:	9301      	str	r3, [sp, #4]
 800c7f4:	683b      	ldr	r3, [r7, #0]
 800c7f6:	9300      	str	r3, [sp, #0]
 800c7f8:	460b      	mov	r3, r1
 800c7fa:	2101      	movs	r1, #1
 800c7fc:	2002      	movs	r0, #2
 800c7fe:	f7ff fb81 	bl	800bf04 <Emm_V5_Pos_Control>
	Emm_V5_Pos_Control(3, 0, speed, acc, length, 0, true);
 800c802:	7979      	ldrb	r1, [r7, #5]
 800c804:	88fa      	ldrh	r2, [r7, #6]
 800c806:	2301      	movs	r3, #1
 800c808:	9302      	str	r3, [sp, #8]
 800c80a:	2300      	movs	r3, #0
 800c80c:	9301      	str	r3, [sp, #4]
 800c80e:	683b      	ldr	r3, [r7, #0]
 800c810:	9300      	str	r3, [sp, #0]
 800c812:	460b      	mov	r3, r1
 800c814:	2100      	movs	r1, #0
 800c816:	2003      	movs	r0, #3
 800c818:	f7ff fb74 	bl	800bf04 <Emm_V5_Pos_Control>
	Emm_V5_Pos_Control(4, 1, speed, acc, length, 0, true);
 800c81c:	7979      	ldrb	r1, [r7, #5]
 800c81e:	88fa      	ldrh	r2, [r7, #6]
 800c820:	2301      	movs	r3, #1
 800c822:	9302      	str	r3, [sp, #8]
 800c824:	2300      	movs	r3, #0
 800c826:	9301      	str	r3, [sp, #4]
 800c828:	683b      	ldr	r3, [r7, #0]
 800c82a:	9300      	str	r3, [sp, #0]
 800c82c:	460b      	mov	r3, r1
 800c82e:	2101      	movs	r1, #1
 800c830:	2004      	movs	r0, #4
 800c832:	f7ff fb67 	bl	800bf04 <Emm_V5_Pos_Control>

	Emm_V5_Synchronous_motion();
 800c836:	f7ff fbdb 	bl	800bff0 <Emm_V5_Synchronous_motion>


	Emm_mode = 1;
 800c83a:	4b0f      	ldr	r3, [pc, #60]	@ (800c878 <Move_Right+0xcc>)
 800c83c:	2201      	movs	r2, #1
 800c83e:	701a      	strb	r2, [r3, #0]
	time5_jiancha = (time + 800) / 10;
 800c840:	68fb      	ldr	r3, [r7, #12]
 800c842:	f503 7348 	add.w	r3, r3, #800	@ 0x320
 800c846:	4a0d      	ldr	r2, [pc, #52]	@ (800c87c <Move_Right+0xd0>)
 800c848:	fb82 1203 	smull	r1, r2, r2, r3
 800c84c:	1092      	asrs	r2, r2, #2
 800c84e:	17db      	asrs	r3, r3, #31
 800c850:	1ad3      	subs	r3, r2, r3
 800c852:	4a0b      	ldr	r2, [pc, #44]	@ (800c880 <Move_Right+0xd4>)
 800c854:	6013      	str	r3, [r2, #0]
	while ((GetRxFlag() == 0) && (time5_jiancha != 0))
 800c856:	bf00      	nop
 800c858:	f7ff fe50 	bl	800c4fc <GetRxFlag>
 800c85c:	4603      	mov	r3, r0
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d103      	bne.n	800c86a <Move_Right+0xbe>
 800c862:	4b07      	ldr	r3, [pc, #28]	@ (800c880 <Move_Right+0xd4>)
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	2b00      	cmp	r3, #0
 800c868:	d1f6      	bne.n	800c858 <Move_Right+0xac>
		;
//	RxFlag = 0;
	HAL_Delay(30);
 800c86a:	201e      	movs	r0, #30
 800c86c:	f7f6 f9c6 	bl	8002bfc <HAL_Delay>
}
 800c870:	bf00      	nop
 800c872:	3710      	adds	r7, #16
 800c874:	46bd      	mov	sp, r7
 800c876:	bd80      	pop	{r7, pc}
 800c878:	2400029c 	.word	0x2400029c
 800c87c:	66666667 	.word	0x66666667
 800c880:	24000bdc 	.word	0x24000bdc

0800c884 <Move_zhengxuzhuan>:
void Move_zhengxuzhuan(u16 speed, u8 acc, u32 length) {
 800c884:	b580      	push	{r7, lr}
 800c886:	b088      	sub	sp, #32
 800c888:	af04      	add	r7, sp, #16
 800c88a:	4603      	mov	r3, r0
 800c88c:	603a      	str	r2, [r7, #0]
 800c88e:	80fb      	strh	r3, [r7, #6]
 800c890:	460b      	mov	r3, r1
 800c892:	717b      	strb	r3, [r7, #5]
	int time;
	time = length / speed * 20;  //毫秒
 800c894:	88fb      	ldrh	r3, [r7, #6]
 800c896:	683a      	ldr	r2, [r7, #0]
 800c898:	fbb2 f2f3 	udiv	r2, r2, r3
 800c89c:	4613      	mov	r3, r2
 800c89e:	009b      	lsls	r3, r3, #2
 800c8a0:	4413      	add	r3, r2
 800c8a2:	009b      	lsls	r3, r3, #2
 800c8a4:	60fb      	str	r3, [r7, #12]
	Emm_V5_Pos_Control(1, 0, speed, acc, length, 0, true);
 800c8a6:	7979      	ldrb	r1, [r7, #5]
 800c8a8:	88fa      	ldrh	r2, [r7, #6]
 800c8aa:	2301      	movs	r3, #1
 800c8ac:	9302      	str	r3, [sp, #8]
 800c8ae:	2300      	movs	r3, #0
 800c8b0:	9301      	str	r3, [sp, #4]
 800c8b2:	683b      	ldr	r3, [r7, #0]
 800c8b4:	9300      	str	r3, [sp, #0]
 800c8b6:	460b      	mov	r3, r1
 800c8b8:	2100      	movs	r1, #0
 800c8ba:	2001      	movs	r0, #1
 800c8bc:	f7ff fb22 	bl	800bf04 <Emm_V5_Pos_Control>
	Emm_V5_Pos_Control(2, 1, speed, acc, length, 0, true);
 800c8c0:	7979      	ldrb	r1, [r7, #5]
 800c8c2:	88fa      	ldrh	r2, [r7, #6]
 800c8c4:	2301      	movs	r3, #1
 800c8c6:	9302      	str	r3, [sp, #8]
 800c8c8:	2300      	movs	r3, #0
 800c8ca:	9301      	str	r3, [sp, #4]
 800c8cc:	683b      	ldr	r3, [r7, #0]
 800c8ce:	9300      	str	r3, [sp, #0]
 800c8d0:	460b      	mov	r3, r1
 800c8d2:	2101      	movs	r1, #1
 800c8d4:	2002      	movs	r0, #2
 800c8d6:	f7ff fb15 	bl	800bf04 <Emm_V5_Pos_Control>
	Emm_V5_Pos_Control(3, 1, speed, acc, length, 0, true);
 800c8da:	7979      	ldrb	r1, [r7, #5]
 800c8dc:	88fa      	ldrh	r2, [r7, #6]
 800c8de:	2301      	movs	r3, #1
 800c8e0:	9302      	str	r3, [sp, #8]
 800c8e2:	2300      	movs	r3, #0
 800c8e4:	9301      	str	r3, [sp, #4]
 800c8e6:	683b      	ldr	r3, [r7, #0]
 800c8e8:	9300      	str	r3, [sp, #0]
 800c8ea:	460b      	mov	r3, r1
 800c8ec:	2101      	movs	r1, #1
 800c8ee:	2003      	movs	r0, #3
 800c8f0:	f7ff fb08 	bl	800bf04 <Emm_V5_Pos_Control>
	Emm_V5_Pos_Control(4, 0, speed, acc, length, 0, true);
 800c8f4:	7979      	ldrb	r1, [r7, #5]
 800c8f6:	88fa      	ldrh	r2, [r7, #6]
 800c8f8:	2301      	movs	r3, #1
 800c8fa:	9302      	str	r3, [sp, #8]
 800c8fc:	2300      	movs	r3, #0
 800c8fe:	9301      	str	r3, [sp, #4]
 800c900:	683b      	ldr	r3, [r7, #0]
 800c902:	9300      	str	r3, [sp, #0]
 800c904:	460b      	mov	r3, r1
 800c906:	2100      	movs	r1, #0
 800c908:	2004      	movs	r0, #4
 800c90a:	f7ff fafb 	bl	800bf04 <Emm_V5_Pos_Control>

	Emm_V5_Synchronous_motion(); // 触发多机同步开始运动
 800c90e:	f7ff fb6f 	bl	800bff0 <Emm_V5_Synchronous_motion>

	Emm_mode = 1;
 800c912:	4b0f      	ldr	r3, [pc, #60]	@ (800c950 <Move_zhengxuzhuan+0xcc>)
 800c914:	2201      	movs	r2, #1
 800c916:	701a      	strb	r2, [r3, #0]
	time5_jiancha = (time + 800) / 10;
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	f503 7348 	add.w	r3, r3, #800	@ 0x320
 800c91e:	4a0d      	ldr	r2, [pc, #52]	@ (800c954 <Move_zhengxuzhuan+0xd0>)
 800c920:	fb82 1203 	smull	r1, r2, r2, r3
 800c924:	1092      	asrs	r2, r2, #2
 800c926:	17db      	asrs	r3, r3, #31
 800c928:	1ad3      	subs	r3, r2, r3
 800c92a:	4a0b      	ldr	r2, [pc, #44]	@ (800c958 <Move_zhengxuzhuan+0xd4>)
 800c92c:	6013      	str	r3, [r2, #0]
	while ((GetRxFlag() == 0) && (time5_jiancha != 0))
 800c92e:	bf00      	nop
 800c930:	f7ff fde4 	bl	800c4fc <GetRxFlag>
 800c934:	4603      	mov	r3, r0
 800c936:	2b00      	cmp	r3, #0
 800c938:	d103      	bne.n	800c942 <Move_zhengxuzhuan+0xbe>
 800c93a:	4b07      	ldr	r3, [pc, #28]	@ (800c958 <Move_zhengxuzhuan+0xd4>)
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d1f6      	bne.n	800c930 <Move_zhengxuzhuan+0xac>
		;
//	RxFlag = 0;
	HAL_Delay(30);
 800c942:	201e      	movs	r0, #30
 800c944:	f7f6 f95a 	bl	8002bfc <HAL_Delay>
}
 800c948:	bf00      	nop
 800c94a:	3710      	adds	r7, #16
 800c94c:	46bd      	mov	sp, r7
 800c94e:	bd80      	pop	{r7, pc}
 800c950:	2400029c 	.word	0x2400029c
 800c954:	66666667 	.word	0x66666667
 800c958:	24000bdc 	.word	0x24000bdc

0800c95c <Move_fanxuzhuan>:

void Move_fanxuzhuan(u16 speed, u8 acc, u32 length) //4340是90度
{
 800c95c:	b580      	push	{r7, lr}
 800c95e:	b088      	sub	sp, #32
 800c960:	af04      	add	r7, sp, #16
 800c962:	4603      	mov	r3, r0
 800c964:	603a      	str	r2, [r7, #0]
 800c966:	80fb      	strh	r3, [r7, #6]
 800c968:	460b      	mov	r3, r1
 800c96a:	717b      	strb	r3, [r7, #5]
	int time;
	time = length / speed * 20;  //毫秒
 800c96c:	88fb      	ldrh	r3, [r7, #6]
 800c96e:	683a      	ldr	r2, [r7, #0]
 800c970:	fbb2 f2f3 	udiv	r2, r2, r3
 800c974:	4613      	mov	r3, r2
 800c976:	009b      	lsls	r3, r3, #2
 800c978:	4413      	add	r3, r2
 800c97a:	009b      	lsls	r3, r3, #2
 800c97c:	60fb      	str	r3, [r7, #12]

	Emm_V5_Pos_Control(1, 1, speed, acc, length, 0, true);
 800c97e:	7979      	ldrb	r1, [r7, #5]
 800c980:	88fa      	ldrh	r2, [r7, #6]
 800c982:	2301      	movs	r3, #1
 800c984:	9302      	str	r3, [sp, #8]
 800c986:	2300      	movs	r3, #0
 800c988:	9301      	str	r3, [sp, #4]
 800c98a:	683b      	ldr	r3, [r7, #0]
 800c98c:	9300      	str	r3, [sp, #0]
 800c98e:	460b      	mov	r3, r1
 800c990:	2101      	movs	r1, #1
 800c992:	2001      	movs	r0, #1
 800c994:	f7ff fab6 	bl	800bf04 <Emm_V5_Pos_Control>
	Emm_V5_Pos_Control(2, 0, speed, acc, length, 0, true);
 800c998:	7979      	ldrb	r1, [r7, #5]
 800c99a:	88fa      	ldrh	r2, [r7, #6]
 800c99c:	2301      	movs	r3, #1
 800c99e:	9302      	str	r3, [sp, #8]
 800c9a0:	2300      	movs	r3, #0
 800c9a2:	9301      	str	r3, [sp, #4]
 800c9a4:	683b      	ldr	r3, [r7, #0]
 800c9a6:	9300      	str	r3, [sp, #0]
 800c9a8:	460b      	mov	r3, r1
 800c9aa:	2100      	movs	r1, #0
 800c9ac:	2002      	movs	r0, #2
 800c9ae:	f7ff faa9 	bl	800bf04 <Emm_V5_Pos_Control>
	Emm_V5_Pos_Control(3, 0, speed, acc, length, 0, true);
 800c9b2:	7979      	ldrb	r1, [r7, #5]
 800c9b4:	88fa      	ldrh	r2, [r7, #6]
 800c9b6:	2301      	movs	r3, #1
 800c9b8:	9302      	str	r3, [sp, #8]
 800c9ba:	2300      	movs	r3, #0
 800c9bc:	9301      	str	r3, [sp, #4]
 800c9be:	683b      	ldr	r3, [r7, #0]
 800c9c0:	9300      	str	r3, [sp, #0]
 800c9c2:	460b      	mov	r3, r1
 800c9c4:	2100      	movs	r1, #0
 800c9c6:	2003      	movs	r0, #3
 800c9c8:	f7ff fa9c 	bl	800bf04 <Emm_V5_Pos_Control>
	Emm_V5_Pos_Control(4, 1, speed, acc, length, 0, true);
 800c9cc:	7979      	ldrb	r1, [r7, #5]
 800c9ce:	88fa      	ldrh	r2, [r7, #6]
 800c9d0:	2301      	movs	r3, #1
 800c9d2:	9302      	str	r3, [sp, #8]
 800c9d4:	2300      	movs	r3, #0
 800c9d6:	9301      	str	r3, [sp, #4]
 800c9d8:	683b      	ldr	r3, [r7, #0]
 800c9da:	9300      	str	r3, [sp, #0]
 800c9dc:	460b      	mov	r3, r1
 800c9de:	2101      	movs	r1, #1
 800c9e0:	2004      	movs	r0, #4
 800c9e2:	f7ff fa8f 	bl	800bf04 <Emm_V5_Pos_Control>

	Emm_V5_Synchronous_motion(); // 触发多机同步开始运动
 800c9e6:	f7ff fb03 	bl	800bff0 <Emm_V5_Synchronous_motion>


	Emm_mode = 1;
 800c9ea:	4b0f      	ldr	r3, [pc, #60]	@ (800ca28 <Move_fanxuzhuan+0xcc>)
 800c9ec:	2201      	movs	r2, #1
 800c9ee:	701a      	strb	r2, [r3, #0]
	time5_jiancha = (time + 800) / 10;
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	f503 7348 	add.w	r3, r3, #800	@ 0x320
 800c9f6:	4a0d      	ldr	r2, [pc, #52]	@ (800ca2c <Move_fanxuzhuan+0xd0>)
 800c9f8:	fb82 1203 	smull	r1, r2, r2, r3
 800c9fc:	1092      	asrs	r2, r2, #2
 800c9fe:	17db      	asrs	r3, r3, #31
 800ca00:	1ad3      	subs	r3, r2, r3
 800ca02:	4a0b      	ldr	r2, [pc, #44]	@ (800ca30 <Move_fanxuzhuan+0xd4>)
 800ca04:	6013      	str	r3, [r2, #0]
	while ((GetRxFlag() == 0) && (time5_jiancha != 0))
 800ca06:	bf00      	nop
 800ca08:	f7ff fd78 	bl	800c4fc <GetRxFlag>
 800ca0c:	4603      	mov	r3, r0
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d103      	bne.n	800ca1a <Move_fanxuzhuan+0xbe>
 800ca12:	4b07      	ldr	r3, [pc, #28]	@ (800ca30 <Move_fanxuzhuan+0xd4>)
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d1f6      	bne.n	800ca08 <Move_fanxuzhuan+0xac>
		;
//	RxFlag = 0;
	HAL_Delay(30);
 800ca1a:	201e      	movs	r0, #30
 800ca1c:	f7f6 f8ee 	bl	8002bfc <HAL_Delay>
}
 800ca20:	bf00      	nop
 800ca22:	3710      	adds	r7, #16
 800ca24:	46bd      	mov	sp, r7
 800ca26:	bd80      	pop	{r7, pc}
 800ca28:	2400029c 	.word	0x2400029c
 800ca2c:	66666667 	.word	0x66666667
 800ca30:	24000bdc 	.word	0x24000bdc

0800ca34 <Drop_Location_jiang>:
////	RxFlag = 0;
//	if(High_Length>=14000)
//		Emm_V5_Stop_Now(5,0);
//	HAL_Delay(30);
//}
void Drop_Location_jiang(u16 speed, u8 acc, u32 length) {
 800ca34:	b580      	push	{r7, lr}
 800ca36:	b088      	sub	sp, #32
 800ca38:	af04      	add	r7, sp, #16
 800ca3a:	4603      	mov	r3, r0
 800ca3c:	603a      	str	r2, [r7, #0]
 800ca3e:	80fb      	strh	r3, [r7, #6]
 800ca40:	460b      	mov	r3, r1
 800ca42:	717b      	strb	r3, [r7, #5]
	int time;
	time = length / speed * 20;  //毫秒
 800ca44:	88fb      	ldrh	r3, [r7, #6]
 800ca46:	683a      	ldr	r2, [r7, #0]
 800ca48:	fbb2 f2f3 	udiv	r2, r2, r3
 800ca4c:	4613      	mov	r3, r2
 800ca4e:	009b      	lsls	r3, r3, #2
 800ca50:	4413      	add	r3, r2
 800ca52:	009b      	lsls	r3, r3, #2
 800ca54:	60fb      	str	r3, [r7, #12]
	Emm_V5_Pos_Control(5, 1, speed, acc, length, 1, 0);
 800ca56:	7979      	ldrb	r1, [r7, #5]
 800ca58:	88fa      	ldrh	r2, [r7, #6]
 800ca5a:	2300      	movs	r3, #0
 800ca5c:	9302      	str	r3, [sp, #8]
 800ca5e:	2301      	movs	r3, #1
 800ca60:	9301      	str	r3, [sp, #4]
 800ca62:	683b      	ldr	r3, [r7, #0]
 800ca64:	9300      	str	r3, [sp, #0]
 800ca66:	460b      	mov	r3, r1
 800ca68:	2101      	movs	r1, #1
 800ca6a:	2005      	movs	r0, #5
 800ca6c:	f7ff fa4a 	bl	800bf04 <Emm_V5_Pos_Control>
//	检查到位回读
	Emm_mode = 1;
 800ca70:	4b0f      	ldr	r3, [pc, #60]	@ (800cab0 <Drop_Location_jiang+0x7c>)
 800ca72:	2201      	movs	r2, #1
 800ca74:	701a      	strb	r2, [r3, #0]
	time5_jiancha = (time + 800) / 10;
 800ca76:	68fb      	ldr	r3, [r7, #12]
 800ca78:	f503 7348 	add.w	r3, r3, #800	@ 0x320
 800ca7c:	4a0d      	ldr	r2, [pc, #52]	@ (800cab4 <Drop_Location_jiang+0x80>)
 800ca7e:	fb82 1203 	smull	r1, r2, r2, r3
 800ca82:	1092      	asrs	r2, r2, #2
 800ca84:	17db      	asrs	r3, r3, #31
 800ca86:	1ad3      	subs	r3, r2, r3
 800ca88:	4a0b      	ldr	r2, [pc, #44]	@ (800cab8 <Drop_Location_jiang+0x84>)
 800ca8a:	6013      	str	r3, [r2, #0]
	while ((GetRxFlag() == 0) && (time5_jiancha != 0))
 800ca8c:	bf00      	nop
 800ca8e:	f7ff fd35 	bl	800c4fc <GetRxFlag>
 800ca92:	4603      	mov	r3, r0
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d103      	bne.n	800caa0 <Drop_Location_jiang+0x6c>
 800ca98:	4b07      	ldr	r3, [pc, #28]	@ (800cab8 <Drop_Location_jiang+0x84>)
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d1f6      	bne.n	800ca8e <Drop_Location_jiang+0x5a>
		;
	HAL_Delay(30);
 800caa0:	201e      	movs	r0, #30
 800caa2:	f7f6 f8ab 	bl	8002bfc <HAL_Delay>
}
 800caa6:	bf00      	nop
 800caa8:	3710      	adds	r7, #16
 800caaa:	46bd      	mov	sp, r7
 800caac:	bd80      	pop	{r7, pc}
 800caae:	bf00      	nop
 800cab0:	2400029c 	.word	0x2400029c
 800cab4:	66666667 	.word	0x66666667
 800cab8:	24000bdc 	.word	0x24000bdc

0800cabc <Drop_Location_Sheng>:
void Drop_Location_Sheng(u16 speed, u8 acc, u32 length) {
 800cabc:	b580      	push	{r7, lr}
 800cabe:	b088      	sub	sp, #32
 800cac0:	af04      	add	r7, sp, #16
 800cac2:	4603      	mov	r3, r0
 800cac4:	603a      	str	r2, [r7, #0]
 800cac6:	80fb      	strh	r3, [r7, #6]
 800cac8:	460b      	mov	r3, r1
 800caca:	717b      	strb	r3, [r7, #5]
	int time;
	time = length / speed * 20;  //毫秒
 800cacc:	88fb      	ldrh	r3, [r7, #6]
 800cace:	683a      	ldr	r2, [r7, #0]
 800cad0:	fbb2 f2f3 	udiv	r2, r2, r3
 800cad4:	4613      	mov	r3, r2
 800cad6:	009b      	lsls	r3, r3, #2
 800cad8:	4413      	add	r3, r2
 800cada:	009b      	lsls	r3, r3, #2
 800cadc:	60fb      	str	r3, [r7, #12]
	Emm_V5_Pos_Control(5, 1, speed, acc, length, 1, 0);
 800cade:	7979      	ldrb	r1, [r7, #5]
 800cae0:	88fa      	ldrh	r2, [r7, #6]
 800cae2:	2300      	movs	r3, #0
 800cae4:	9302      	str	r3, [sp, #8]
 800cae6:	2301      	movs	r3, #1
 800cae8:	9301      	str	r3, [sp, #4]
 800caea:	683b      	ldr	r3, [r7, #0]
 800caec:	9300      	str	r3, [sp, #0]
 800caee:	460b      	mov	r3, r1
 800caf0:	2101      	movs	r1, #1
 800caf2:	2005      	movs	r0, #5
 800caf4:	f7ff fa06 	bl	800bf04 <Emm_V5_Pos_Control>
	Emm_mode = 1;
 800caf8:	4b0f      	ldr	r3, [pc, #60]	@ (800cb38 <Drop_Location_Sheng+0x7c>)
 800cafa:	2201      	movs	r2, #1
 800cafc:	701a      	strb	r2, [r3, #0]
	time5_jiancha = (time + 800) / 10;
 800cafe:	68fb      	ldr	r3, [r7, #12]
 800cb00:	f503 7348 	add.w	r3, r3, #800	@ 0x320
 800cb04:	4a0d      	ldr	r2, [pc, #52]	@ (800cb3c <Drop_Location_Sheng+0x80>)
 800cb06:	fb82 1203 	smull	r1, r2, r2, r3
 800cb0a:	1092      	asrs	r2, r2, #2
 800cb0c:	17db      	asrs	r3, r3, #31
 800cb0e:	1ad3      	subs	r3, r2, r3
 800cb10:	4a0b      	ldr	r2, [pc, #44]	@ (800cb40 <Drop_Location_Sheng+0x84>)
 800cb12:	6013      	str	r3, [r2, #0]
	while ((GetRxFlag() == 0) && (time5_jiancha != 0))
 800cb14:	bf00      	nop
 800cb16:	f7ff fcf1 	bl	800c4fc <GetRxFlag>
 800cb1a:	4603      	mov	r3, r0
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d103      	bne.n	800cb28 <Drop_Location_Sheng+0x6c>
 800cb20:	4b07      	ldr	r3, [pc, #28]	@ (800cb40 <Drop_Location_Sheng+0x84>)
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d1f6      	bne.n	800cb16 <Drop_Location_Sheng+0x5a>
		;

	HAL_Delay(30);
 800cb28:	201e      	movs	r0, #30
 800cb2a:	f7f6 f867 	bl	8002bfc <HAL_Delay>
}
 800cb2e:	bf00      	nop
 800cb30:	3710      	adds	r7, #16
 800cb32:	46bd      	mov	sp, r7
 800cb34:	bd80      	pop	{r7, pc}
 800cb36:	bf00      	nop
 800cb38:	2400029c 	.word	0x2400029c
 800cb3c:	66666667 	.word	0x66666667
 800cb40:	24000bdc 	.word	0x24000bdc

0800cb44 <Move_Stop>:
	Emm_V5_Synchronous_motion();  // 触发多机同步开始运动

}

void Move_Stop(void)
{
 800cb44:	b580      	push	{r7, lr}
 800cb46:	af00      	add	r7, sp, #0
	Emm_V5_Stop_Now(1,true);
 800cb48:	2101      	movs	r1, #1
 800cb4a:	2001      	movs	r0, #1
 800cb4c:	f7ff fa2e 	bl	800bfac <Emm_V5_Stop_Now>
	Emm_V5_Stop_Now(2,true);
 800cb50:	2101      	movs	r1, #1
 800cb52:	2002      	movs	r0, #2
 800cb54:	f7ff fa2a 	bl	800bfac <Emm_V5_Stop_Now>
	Emm_V5_Stop_Now(3,true);
 800cb58:	2101      	movs	r1, #1
 800cb5a:	2003      	movs	r0, #3
 800cb5c:	f7ff fa26 	bl	800bfac <Emm_V5_Stop_Now>
	Emm_V5_Stop_Now(4,true);
 800cb60:	2101      	movs	r1, #1
 800cb62:	2004      	movs	r0, #4
 800cb64:	f7ff fa22 	bl	800bfac <Emm_V5_Stop_Now>
	Emm_V5_Synchronous_motion();  // 触发多机同步开始运动
 800cb68:	f7ff fa42 	bl	800bff0 <Emm_V5_Synchronous_motion>
}
 800cb6c:	bf00      	nop
 800cb6e:	bd80      	pop	{r7, pc}

0800cb70 <Move_TO_yuanliaoqu>:

	Move_Line(RunSpeed, RunAcc, Lineclk); ////130.5
	HAL_Delay(yanshi);
}
void Move_TO_yuanliaoqu(float Lineclk) //物料区
{
 800cb70:	b580      	push	{r7, lr}
 800cb72:	b082      	sub	sp, #8
 800cb74:	af00      	add	r7, sp, #0
 800cb76:	ed87 0a01 	vstr	s0, [r7, #4]
//	应当先左移
	Move_Line(RunSpeed, RunAcc, Lineclk);
 800cb7a:	edd7 7a01 	vldr	s15, [r7, #4]
 800cb7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cb82:	ee17 2a90 	vmov	r2, s15
 800cb86:	2178      	movs	r1, #120	@ 0x78
 800cb88:	2064      	movs	r0, #100	@ 0x64
 800cb8a:	f7ff fccb 	bl	800c524 <Move_Line>
	HAL_Delay(yanshi);
 800cb8e:	2032      	movs	r0, #50	@ 0x32
 800cb90:	f7f6 f834 	bl	8002bfc <HAL_Delay>
}
 800cb94:	bf00      	nop
 800cb96:	3708      	adds	r7, #8
 800cb98:	46bd      	mov	sp, r7
 800cb9a:	bd80      	pop	{r7, pc}

0800cb9c <Move_TO_jianzhi1>:

void Move_TO_jianzhi1(float Backclk, float fanzhuanclk) //粗加工区
{
 800cb9c:	b580      	push	{r7, lr}
 800cb9e:	b082      	sub	sp, #8
 800cba0:	af00      	add	r7, sp, #0
 800cba2:	ed87 0a01 	vstr	s0, [r7, #4]
 800cba6:	edc7 0a00 	vstr	s1, [r7]
	Move_Back(RunSpeed, RunAcc, Backclk);
 800cbaa:	edd7 7a01 	vldr	s15, [r7, #4]
 800cbae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cbb2:	ee17 2a90 	vmov	r2, s15
 800cbb6:	2178      	movs	r1, #120	@ 0x78
 800cbb8:	2064      	movs	r0, #100	@ 0x64
 800cbba:	f7ff fd8b 	bl	800c6d4 <Move_Back>
	HAL_Delay(yanshi);
 800cbbe:	2032      	movs	r0, #50	@ 0x32
 800cbc0:	f7f6 f81c 	bl	8002bfc <HAL_Delay>
	Move_fanxuzhuan(RunSpeed, RunAcc, fanzhuanclk);
 800cbc4:	edd7 7a00 	vldr	s15, [r7]
 800cbc8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cbcc:	ee17 2a90 	vmov	r2, s15
 800cbd0:	2178      	movs	r1, #120	@ 0x78
 800cbd2:	2064      	movs	r0, #100	@ 0x64
 800cbd4:	f7ff fec2 	bl	800c95c <Move_fanxuzhuan>
	HAL_Delay(yanshi);
 800cbd8:	2032      	movs	r0, #50	@ 0x32
 800cbda:	f7f6 f80f 	bl	8002bfc <HAL_Delay>
}
 800cbde:	bf00      	nop
 800cbe0:	3708      	adds	r7, #8
 800cbe2:	46bd      	mov	sp, r7
 800cbe4:	bd80      	pop	{r7, pc}

0800cbe6 <Move_TO_zancunqu>:

void Move_TO_zancunqu(float Lineclk, float fanzhuanclk) //暂存区
{
 800cbe6:	b580      	push	{r7, lr}
 800cbe8:	b082      	sub	sp, #8
 800cbea:	af00      	add	r7, sp, #0
 800cbec:	ed87 0a01 	vstr	s0, [r7, #4]
 800cbf0:	edc7 0a00 	vstr	s1, [r7]
	Move_Line(RunSpeed, RunAcc, Lineclk);
 800cbf4:	edd7 7a01 	vldr	s15, [r7, #4]
 800cbf8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cbfc:	ee17 2a90 	vmov	r2, s15
 800cc00:	2178      	movs	r1, #120	@ 0x78
 800cc02:	2064      	movs	r0, #100	@ 0x64
 800cc04:	f7ff fc8e 	bl	800c524 <Move_Line>
	HAL_Delay(yanshi);
 800cc08:	2032      	movs	r0, #50	@ 0x32
 800cc0a:	f7f5 fff7 	bl	8002bfc <HAL_Delay>
	Move_fanxuzhuan(RunSpeed, RunAcc, fanzhuanclk);
 800cc0e:	edd7 7a00 	vldr	s15, [r7]
 800cc12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cc16:	ee17 2a90 	vmov	r2, s15
 800cc1a:	2178      	movs	r1, #120	@ 0x78
 800cc1c:	2064      	movs	r0, #100	@ 0x64
 800cc1e:	f7ff fe9d 	bl	800c95c <Move_fanxuzhuan>
	HAL_Delay(yanshi);
 800cc22:	2032      	movs	r0, #50	@ 0x32
 800cc24:	f7f5 ffea 	bl	8002bfc <HAL_Delay>
}
 800cc28:	bf00      	nop
 800cc2a:	3708      	adds	r7, #8
 800cc2c:	46bd      	mov	sp, r7
 800cc2e:	bd80      	pop	{r7, pc}

0800cc30 <Move_TO_jianzhi2>:
void Move_TO_jianzhi2(float Backclk, float Zhengzhuanclk) //从暂存区回到原料区
{
 800cc30:	b580      	push	{r7, lr}
 800cc32:	b082      	sub	sp, #8
 800cc34:	af00      	add	r7, sp, #0
 800cc36:	ed87 0a01 	vstr	s0, [r7, #4]
 800cc3a:	edc7 0a00 	vstr	s1, [r7]
	Move_Back(RunSpeed, RunAcc, Backclk);
 800cc3e:	edd7 7a01 	vldr	s15, [r7, #4]
 800cc42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cc46:	ee17 2a90 	vmov	r2, s15
 800cc4a:	2178      	movs	r1, #120	@ 0x78
 800cc4c:	2064      	movs	r0, #100	@ 0x64
 800cc4e:	f7ff fd41 	bl	800c6d4 <Move_Back>
	HAL_Delay(yanshi);
 800cc52:	2032      	movs	r0, #50	@ 0x32
 800cc54:	f7f5 ffd2 	bl	8002bfc <HAL_Delay>
	Move_zhengxuzhuan(RunSpeed, RunAcc, Zhengzhuanclk);
 800cc58:	edd7 7a00 	vldr	s15, [r7]
 800cc5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cc60:	ee17 2a90 	vmov	r2, s15
 800cc64:	2178      	movs	r1, #120	@ 0x78
 800cc66:	2064      	movs	r0, #100	@ 0x64
 800cc68:	f7ff fe0c 	bl	800c884 <Move_zhengxuzhuan>
	HAL_Delay(yanshi);
 800cc6c:	2032      	movs	r0, #50	@ 0x32
 800cc6e:	f7f5 ffc5 	bl	8002bfc <HAL_Delay>
}
 800cc72:	bf00      	nop
 800cc74:	3708      	adds	r7, #8
 800cc76:	46bd      	mov	sp, r7
 800cc78:	bd80      	pop	{r7, pc}

0800cc7a <Move_TO_cujiagongqu>:
void Move_TO_cujiagongqu(float Backclk) //粗加工区
{
 800cc7a:	b580      	push	{r7, lr}
 800cc7c:	b082      	sub	sp, #8
 800cc7e:	af00      	add	r7, sp, #0
 800cc80:	ed87 0a01 	vstr	s0, [r7, #4]
	Move_Back(RunSpeed, RunAcc, Backclk);
 800cc84:	edd7 7a01 	vldr	s15, [r7, #4]
 800cc88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cc8c:	ee17 2a90 	vmov	r2, s15
 800cc90:	2178      	movs	r1, #120	@ 0x78
 800cc92:	2064      	movs	r0, #100	@ 0x64
 800cc94:	f7ff fd1e 	bl	800c6d4 <Move_Back>
	HAL_Delay(yanshi);
 800cc98:	2032      	movs	r0, #50	@ 0x32
 800cc9a:	f7f5 ffaf 	bl	8002bfc <HAL_Delay>
}
 800cc9e:	bf00      	nop
 800cca0:	3708      	adds	r7, #8
 800cca2:	46bd      	mov	sp, r7
 800cca4:	bd80      	pop	{r7, pc}

0800cca6 <Move_TO_jianzhi3>:
void Move_TO_jianzhi3(float Backclk, float Zhengzhuanclk) //从暂存区回到原料区
{
 800cca6:	b580      	push	{r7, lr}
 800cca8:	b082      	sub	sp, #8
 800ccaa:	af00      	add	r7, sp, #0
 800ccac:	ed87 0a01 	vstr	s0, [r7, #4]
 800ccb0:	edc7 0a00 	vstr	s1, [r7]
	Move_Back(RunSpeed, RunAcc, Backclk);
 800ccb4:	edd7 7a01 	vldr	s15, [r7, #4]
 800ccb8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ccbc:	ee17 2a90 	vmov	r2, s15
 800ccc0:	2178      	movs	r1, #120	@ 0x78
 800ccc2:	2064      	movs	r0, #100	@ 0x64
 800ccc4:	f7ff fd06 	bl	800c6d4 <Move_Back>
	HAL_Delay(yanshi);
 800ccc8:	2032      	movs	r0, #50	@ 0x32
 800ccca:	f7f5 ff97 	bl	8002bfc <HAL_Delay>
	Move_zhengxuzhuan(RunSpeed, RunAcc, Zhengzhuanclk);
 800ccce:	edd7 7a00 	vldr	s15, [r7]
 800ccd2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ccd6:	ee17 2a90 	vmov	r2, s15
 800ccda:	2178      	movs	r1, #120	@ 0x78
 800ccdc:	2064      	movs	r0, #100	@ 0x64
 800ccde:	f7ff fdd1 	bl	800c884 <Move_zhengxuzhuan>
	HAL_Delay(yanshi);
 800cce2:	2032      	movs	r0, #50	@ 0x32
 800cce4:	f7f5 ff8a 	bl	8002bfc <HAL_Delay>
}
 800cce8:	bf00      	nop
 800ccea:	3708      	adds	r7, #8
 800ccec:	46bd      	mov	sp, r7
 800ccee:	bd80      	pop	{r7, pc}

0800ccf0 <Move_TO_fanyuanliaoqu>:
void Move_TO_fanyuanliaoqu(float Lineclk) //物料区
{
 800ccf0:	b580      	push	{r7, lr}
 800ccf2:	b082      	sub	sp, #8
 800ccf4:	af00      	add	r7, sp, #0
 800ccf6:	ed87 0a01 	vstr	s0, [r7, #4]
	Move_Back(RunSpeed, RunAcc, Lineclk);
 800ccfa:	edd7 7a01 	vldr	s15, [r7, #4]
 800ccfe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cd02:	ee17 2a90 	vmov	r2, s15
 800cd06:	2178      	movs	r1, #120	@ 0x78
 800cd08:	2064      	movs	r0, #100	@ 0x64
 800cd0a:	f7ff fce3 	bl	800c6d4 <Move_Back>
	HAL_Delay(20000);
 800cd0e:	f644 6020 	movw	r0, #20000	@ 0x4e20
 800cd12:	f7f5 ff73 	bl	8002bfc <HAL_Delay>
}
 800cd16:	bf00      	nop
 800cd18:	3708      	adds	r7, #8
 800cd1a:	46bd      	mov	sp, r7
 800cd1c:	bd80      	pop	{r7, pc}
	...

0800cd20 <Move_Action_Nopid_Left_Ctrl>:
	} else {
		Move_Line(100, 100, ABS(Y_NOW - y_goal) * 13.8);
		HAL_Delay(yanshi);
	}
}
void Move_Action_Nopid_Left_Ctrl(float x_goal, float y_goal) {
 800cd20:	b580      	push	{r7, lr}
 800cd22:	b082      	sub	sp, #8
 800cd24:	af00      	add	r7, sp, #0
 800cd26:	ed87 0a01 	vstr	s0, [r7, #4]
 800cd2a:	edc7 0a00 	vstr	s1, [r7]
	while (1) {
		if ((X_NOW - x_goal) < 0) {
 800cd2e:	4baa      	ldr	r3, [pc, #680]	@ (800cfd8 <Move_Action_Nopid_Left_Ctrl+0x2b8>)
 800cd30:	ed93 7a00 	vldr	s14, [r3]
 800cd34:	edd7 7a01 	vldr	s15, [r7, #4]
 800cd38:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cd3c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800cd40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd44:	d52e      	bpl.n	800cda4 <Move_Action_Nopid_Left_Ctrl+0x84>
			Move_Left(100, 100, ABS(X_NOW - x_goal) * 13.8);
 800cd46:	4ba4      	ldr	r3, [pc, #656]	@ (800cfd8 <Move_Action_Nopid_Left_Ctrl+0x2b8>)
 800cd48:	ed93 7a00 	vldr	s14, [r3]
 800cd4c:	edd7 7a01 	vldr	s15, [r7, #4]
 800cd50:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cd54:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800cd58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd5c:	dd07      	ble.n	800cd6e <Move_Action_Nopid_Left_Ctrl+0x4e>
 800cd5e:	4b9e      	ldr	r3, [pc, #632]	@ (800cfd8 <Move_Action_Nopid_Left_Ctrl+0x2b8>)
 800cd60:	ed93 7a00 	vldr	s14, [r3]
 800cd64:	edd7 7a01 	vldr	s15, [r7, #4]
 800cd68:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cd6c:	e008      	b.n	800cd80 <Move_Action_Nopid_Left_Ctrl+0x60>
 800cd6e:	4b9a      	ldr	r3, [pc, #616]	@ (800cfd8 <Move_Action_Nopid_Left_Ctrl+0x2b8>)
 800cd70:	ed93 7a00 	vldr	s14, [r3]
 800cd74:	edd7 7a01 	vldr	s15, [r7, #4]
 800cd78:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cd7c:	eef1 7a67 	vneg.f32	s15, s15
 800cd80:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800cd84:	ed9f 6b92 	vldr	d6, [pc, #584]	@ 800cfd0 <Move_Action_Nopid_Left_Ctrl+0x2b0>
 800cd88:	ee27 7b06 	vmul.f64	d7, d7, d6
 800cd8c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800cd90:	ee17 2a90 	vmov	r2, s15
 800cd94:	2164      	movs	r1, #100	@ 0x64
 800cd96:	2064      	movs	r0, #100	@ 0x64
 800cd98:	f7ff fc30 	bl	800c5fc <Move_Left>
			HAL_Delay(yanshi);
 800cd9c:	2032      	movs	r0, #50	@ 0x32
 800cd9e:	f7f5 ff2d 	bl	8002bfc <HAL_Delay>
 800cda2:	e02d      	b.n	800ce00 <Move_Action_Nopid_Left_Ctrl+0xe0>
		} else {
			Move_Right(100, 100, ABS(X_NOW - x_goal) * 13.8);
 800cda4:	4b8c      	ldr	r3, [pc, #560]	@ (800cfd8 <Move_Action_Nopid_Left_Ctrl+0x2b8>)
 800cda6:	ed93 7a00 	vldr	s14, [r3]
 800cdaa:	edd7 7a01 	vldr	s15, [r7, #4]
 800cdae:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cdb2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800cdb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cdba:	dd07      	ble.n	800cdcc <Move_Action_Nopid_Left_Ctrl+0xac>
 800cdbc:	4b86      	ldr	r3, [pc, #536]	@ (800cfd8 <Move_Action_Nopid_Left_Ctrl+0x2b8>)
 800cdbe:	ed93 7a00 	vldr	s14, [r3]
 800cdc2:	edd7 7a01 	vldr	s15, [r7, #4]
 800cdc6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cdca:	e008      	b.n	800cdde <Move_Action_Nopid_Left_Ctrl+0xbe>
 800cdcc:	4b82      	ldr	r3, [pc, #520]	@ (800cfd8 <Move_Action_Nopid_Left_Ctrl+0x2b8>)
 800cdce:	ed93 7a00 	vldr	s14, [r3]
 800cdd2:	edd7 7a01 	vldr	s15, [r7, #4]
 800cdd6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cdda:	eef1 7a67 	vneg.f32	s15, s15
 800cdde:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800cde2:	ed9f 6b7b 	vldr	d6, [pc, #492]	@ 800cfd0 <Move_Action_Nopid_Left_Ctrl+0x2b0>
 800cde6:	ee27 7b06 	vmul.f64	d7, d7, d6
 800cdea:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800cdee:	ee17 2a90 	vmov	r2, s15
 800cdf2:	2164      	movs	r1, #100	@ 0x64
 800cdf4:	2064      	movs	r0, #100	@ 0x64
 800cdf6:	f7ff fcd9 	bl	800c7ac <Move_Right>
			HAL_Delay(yanshi);
 800cdfa:	2032      	movs	r0, #50	@ 0x32
 800cdfc:	f7f5 fefe 	bl	8002bfc <HAL_Delay>
		}
		if (Y_NOW - y_goal < 0) {
 800ce00:	4b76      	ldr	r3, [pc, #472]	@ (800cfdc <Move_Action_Nopid_Left_Ctrl+0x2bc>)
 800ce02:	edd3 7a00 	vldr	s15, [r3]
 800ce06:	eeb1 7a67 	vneg.f32	s14, s15
 800ce0a:	edd7 7a00 	vldr	s15, [r7]
 800ce0e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ce12:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800ce16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce1a:	d534      	bpl.n	800ce86 <Move_Action_Nopid_Left_Ctrl+0x166>
			Move_Line(100, 100, ABS(Y_NOW - y_goal) * 13.8);
 800ce1c:	4b6f      	ldr	r3, [pc, #444]	@ (800cfdc <Move_Action_Nopid_Left_Ctrl+0x2bc>)
 800ce1e:	edd3 7a00 	vldr	s15, [r3]
 800ce22:	eeb1 7a67 	vneg.f32	s14, s15
 800ce26:	edd7 7a00 	vldr	s15, [r7]
 800ce2a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ce2e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800ce32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce36:	dd09      	ble.n	800ce4c <Move_Action_Nopid_Left_Ctrl+0x12c>
 800ce38:	4b68      	ldr	r3, [pc, #416]	@ (800cfdc <Move_Action_Nopid_Left_Ctrl+0x2bc>)
 800ce3a:	edd3 7a00 	vldr	s15, [r3]
 800ce3e:	eeb1 7a67 	vneg.f32	s14, s15
 800ce42:	edd7 7a00 	vldr	s15, [r7]
 800ce46:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ce4a:	e00a      	b.n	800ce62 <Move_Action_Nopid_Left_Ctrl+0x142>
 800ce4c:	4b63      	ldr	r3, [pc, #396]	@ (800cfdc <Move_Action_Nopid_Left_Ctrl+0x2bc>)
 800ce4e:	edd3 7a00 	vldr	s15, [r3]
 800ce52:	eeb1 7a67 	vneg.f32	s14, s15
 800ce56:	edd7 7a00 	vldr	s15, [r7]
 800ce5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ce5e:	eef1 7a67 	vneg.f32	s15, s15
 800ce62:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800ce66:	ed9f 6b5a 	vldr	d6, [pc, #360]	@ 800cfd0 <Move_Action_Nopid_Left_Ctrl+0x2b0>
 800ce6a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ce6e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800ce72:	ee17 2a90 	vmov	r2, s15
 800ce76:	2164      	movs	r1, #100	@ 0x64
 800ce78:	2064      	movs	r0, #100	@ 0x64
 800ce7a:	f7ff fb53 	bl	800c524 <Move_Line>
			HAL_Delay(yanshi);
 800ce7e:	2032      	movs	r0, #50	@ 0x32
 800ce80:	f7f5 febc 	bl	8002bfc <HAL_Delay>
 800ce84:	e033      	b.n	800ceee <Move_Action_Nopid_Left_Ctrl+0x1ce>
		} else {
			Move_Back(100, 100, ABS(Y_NOW - y_goal) * 13.8);
 800ce86:	4b55      	ldr	r3, [pc, #340]	@ (800cfdc <Move_Action_Nopid_Left_Ctrl+0x2bc>)
 800ce88:	edd3 7a00 	vldr	s15, [r3]
 800ce8c:	eeb1 7a67 	vneg.f32	s14, s15
 800ce90:	edd7 7a00 	vldr	s15, [r7]
 800ce94:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ce98:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800ce9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cea0:	dd09      	ble.n	800ceb6 <Move_Action_Nopid_Left_Ctrl+0x196>
 800cea2:	4b4e      	ldr	r3, [pc, #312]	@ (800cfdc <Move_Action_Nopid_Left_Ctrl+0x2bc>)
 800cea4:	edd3 7a00 	vldr	s15, [r3]
 800cea8:	eeb1 7a67 	vneg.f32	s14, s15
 800ceac:	edd7 7a00 	vldr	s15, [r7]
 800ceb0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ceb4:	e00a      	b.n	800cecc <Move_Action_Nopid_Left_Ctrl+0x1ac>
 800ceb6:	4b49      	ldr	r3, [pc, #292]	@ (800cfdc <Move_Action_Nopid_Left_Ctrl+0x2bc>)
 800ceb8:	edd3 7a00 	vldr	s15, [r3]
 800cebc:	eeb1 7a67 	vneg.f32	s14, s15
 800cec0:	edd7 7a00 	vldr	s15, [r7]
 800cec4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cec8:	eef1 7a67 	vneg.f32	s15, s15
 800cecc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800ced0:	ed9f 6b3f 	vldr	d6, [pc, #252]	@ 800cfd0 <Move_Action_Nopid_Left_Ctrl+0x2b0>
 800ced4:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ced8:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800cedc:	ee17 2a90 	vmov	r2, s15
 800cee0:	2164      	movs	r1, #100	@ 0x64
 800cee2:	2064      	movs	r0, #100	@ 0x64
 800cee4:	f7ff fbf6 	bl	800c6d4 <Move_Back>
			HAL_Delay(yanshi);
 800cee8:	2032      	movs	r0, #50	@ 0x32
 800ceea:	f7f5 fe87 	bl	8002bfc <HAL_Delay>
		}
		if ( ABS(X_NOW - x_goal) < 2 && ABS(Y_NOW - y_goal) < 2) {
 800ceee:	4b3a      	ldr	r3, [pc, #232]	@ (800cfd8 <Move_Action_Nopid_Left_Ctrl+0x2b8>)
 800cef0:	ed93 7a00 	vldr	s14, [r3]
 800cef4:	edd7 7a01 	vldr	s15, [r7, #4]
 800cef8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cefc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800cf00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf04:	dd11      	ble.n	800cf2a <Move_Action_Nopid_Left_Ctrl+0x20a>
 800cf06:	4b34      	ldr	r3, [pc, #208]	@ (800cfd8 <Move_Action_Nopid_Left_Ctrl+0x2b8>)
 800cf08:	ed93 7a00 	vldr	s14, [r3]
 800cf0c:	edd7 7a01 	vldr	s15, [r7, #4]
 800cf10:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cf14:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800cf18:	eef4 7ac7 	vcmpe.f32	s15, s14
 800cf1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf20:	bf4c      	ite	mi
 800cf22:	2301      	movmi	r3, #1
 800cf24:	2300      	movpl	r3, #0
 800cf26:	b2db      	uxtb	r3, r3
 800cf28:	e010      	b.n	800cf4c <Move_Action_Nopid_Left_Ctrl+0x22c>
 800cf2a:	4b2b      	ldr	r3, [pc, #172]	@ (800cfd8 <Move_Action_Nopid_Left_Ctrl+0x2b8>)
 800cf2c:	ed93 7a00 	vldr	s14, [r3]
 800cf30:	edd7 7a01 	vldr	s15, [r7, #4]
 800cf34:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cf38:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 800cf3c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800cf40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf44:	bfcc      	ite	gt
 800cf46:	2301      	movgt	r3, #1
 800cf48:	2300      	movle	r3, #0
 800cf4a:	b2db      	uxtb	r3, r3
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	f43f aeee 	beq.w	800cd2e <Move_Action_Nopid_Left_Ctrl+0xe>
 800cf52:	4b22      	ldr	r3, [pc, #136]	@ (800cfdc <Move_Action_Nopid_Left_Ctrl+0x2bc>)
 800cf54:	edd3 7a00 	vldr	s15, [r3]
 800cf58:	eeb1 7a67 	vneg.f32	s14, s15
 800cf5c:	edd7 7a00 	vldr	s15, [r7]
 800cf60:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cf64:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800cf68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf6c:	dd13      	ble.n	800cf96 <Move_Action_Nopid_Left_Ctrl+0x276>
 800cf6e:	4b1b      	ldr	r3, [pc, #108]	@ (800cfdc <Move_Action_Nopid_Left_Ctrl+0x2bc>)
 800cf70:	edd3 7a00 	vldr	s15, [r3]
 800cf74:	eeb1 7a67 	vneg.f32	s14, s15
 800cf78:	edd7 7a00 	vldr	s15, [r7]
 800cf7c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cf80:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800cf84:	eef4 7ac7 	vcmpe.f32	s15, s14
 800cf88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf8c:	bf4c      	ite	mi
 800cf8e:	2301      	movmi	r3, #1
 800cf90:	2300      	movpl	r3, #0
 800cf92:	b2db      	uxtb	r3, r3
 800cf94:	e012      	b.n	800cfbc <Move_Action_Nopid_Left_Ctrl+0x29c>
 800cf96:	4b11      	ldr	r3, [pc, #68]	@ (800cfdc <Move_Action_Nopid_Left_Ctrl+0x2bc>)
 800cf98:	edd3 7a00 	vldr	s15, [r3]
 800cf9c:	eeb1 7a67 	vneg.f32	s14, s15
 800cfa0:	edd7 7a00 	vldr	s15, [r7]
 800cfa4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cfa8:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 800cfac:	eef4 7ac7 	vcmpe.f32	s15, s14
 800cfb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cfb4:	bfcc      	ite	gt
 800cfb6:	2301      	movgt	r3, #1
 800cfb8:	2300      	movle	r3, #0
 800cfba:	b2db      	uxtb	r3, r3
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d100      	bne.n	800cfc2 <Move_Action_Nopid_Left_Ctrl+0x2a2>
		if ((X_NOW - x_goal) < 0) {
 800cfc0:	e6b5      	b.n	800cd2e <Move_Action_Nopid_Left_Ctrl+0xe>
			break; /* 到达目标 */
 800cfc2:	bf00      	nop
		}
	}
}
 800cfc4:	bf00      	nop
 800cfc6:	3708      	adds	r7, #8
 800cfc8:	46bd      	mov	sp, r7
 800cfca:	bd80      	pop	{r7, pc}
 800cfcc:	f3af 8000 	nop.w
 800cfd0:	9999999a 	.word	0x9999999a
 800cfd4:	402b9999 	.word	0x402b9999
 800cfd8:	24000aa8 	.word	0x24000aa8
 800cfdc:	24000aac 	.word	0x24000aac

0800cfe0 <Move_Action_Nopid_Forward_Ctrl>:
void Move_Action_Nopid_Forward_Ctrl(float x_goal, float y_goal) {
 800cfe0:	b580      	push	{r7, lr}
 800cfe2:	b082      	sub	sp, #8
 800cfe4:	af00      	add	r7, sp, #0
 800cfe6:	ed87 0a01 	vstr	s0, [r7, #4]
 800cfea:	edc7 0a00 	vstr	s1, [r7]
	//ACTION调整
	while (1) {

		if ((X_NOW - x_goal) < 0) {
 800cfee:	4baa      	ldr	r3, [pc, #680]	@ (800d298 <Move_Action_Nopid_Forward_Ctrl+0x2b8>)
 800cff0:	ed93 7a00 	vldr	s14, [r3]
 800cff4:	edd7 7a01 	vldr	s15, [r7, #4]
 800cff8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cffc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d000:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d004:	d52e      	bpl.n	800d064 <Move_Action_Nopid_Forward_Ctrl+0x84>
			Move_Line(100, 100, ABS(X_NOW - x_goal) * 13.8);
 800d006:	4ba4      	ldr	r3, [pc, #656]	@ (800d298 <Move_Action_Nopid_Forward_Ctrl+0x2b8>)
 800d008:	ed93 7a00 	vldr	s14, [r3]
 800d00c:	edd7 7a01 	vldr	s15, [r7, #4]
 800d010:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d014:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d018:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d01c:	dd07      	ble.n	800d02e <Move_Action_Nopid_Forward_Ctrl+0x4e>
 800d01e:	4b9e      	ldr	r3, [pc, #632]	@ (800d298 <Move_Action_Nopid_Forward_Ctrl+0x2b8>)
 800d020:	ed93 7a00 	vldr	s14, [r3]
 800d024:	edd7 7a01 	vldr	s15, [r7, #4]
 800d028:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d02c:	e008      	b.n	800d040 <Move_Action_Nopid_Forward_Ctrl+0x60>
 800d02e:	4b9a      	ldr	r3, [pc, #616]	@ (800d298 <Move_Action_Nopid_Forward_Ctrl+0x2b8>)
 800d030:	ed93 7a00 	vldr	s14, [r3]
 800d034:	edd7 7a01 	vldr	s15, [r7, #4]
 800d038:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d03c:	eef1 7a67 	vneg.f32	s15, s15
 800d040:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800d044:	ed9f 6b92 	vldr	d6, [pc, #584]	@ 800d290 <Move_Action_Nopid_Forward_Ctrl+0x2b0>
 800d048:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d04c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800d050:	ee17 2a90 	vmov	r2, s15
 800d054:	2164      	movs	r1, #100	@ 0x64
 800d056:	2064      	movs	r0, #100	@ 0x64
 800d058:	f7ff fa64 	bl	800c524 <Move_Line>
			HAL_Delay(yanshi);
 800d05c:	2032      	movs	r0, #50	@ 0x32
 800d05e:	f7f5 fdcd 	bl	8002bfc <HAL_Delay>
 800d062:	e02d      	b.n	800d0c0 <Move_Action_Nopid_Forward_Ctrl+0xe0>
		} else {
			Move_Back(100, 100, ABS(X_NOW - x_goal) * 13.8);
 800d064:	4b8c      	ldr	r3, [pc, #560]	@ (800d298 <Move_Action_Nopid_Forward_Ctrl+0x2b8>)
 800d066:	ed93 7a00 	vldr	s14, [r3]
 800d06a:	edd7 7a01 	vldr	s15, [r7, #4]
 800d06e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d072:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d076:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d07a:	dd07      	ble.n	800d08c <Move_Action_Nopid_Forward_Ctrl+0xac>
 800d07c:	4b86      	ldr	r3, [pc, #536]	@ (800d298 <Move_Action_Nopid_Forward_Ctrl+0x2b8>)
 800d07e:	ed93 7a00 	vldr	s14, [r3]
 800d082:	edd7 7a01 	vldr	s15, [r7, #4]
 800d086:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d08a:	e008      	b.n	800d09e <Move_Action_Nopid_Forward_Ctrl+0xbe>
 800d08c:	4b82      	ldr	r3, [pc, #520]	@ (800d298 <Move_Action_Nopid_Forward_Ctrl+0x2b8>)
 800d08e:	ed93 7a00 	vldr	s14, [r3]
 800d092:	edd7 7a01 	vldr	s15, [r7, #4]
 800d096:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d09a:	eef1 7a67 	vneg.f32	s15, s15
 800d09e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800d0a2:	ed9f 6b7b 	vldr	d6, [pc, #492]	@ 800d290 <Move_Action_Nopid_Forward_Ctrl+0x2b0>
 800d0a6:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d0aa:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800d0ae:	ee17 2a90 	vmov	r2, s15
 800d0b2:	2164      	movs	r1, #100	@ 0x64
 800d0b4:	2064      	movs	r0, #100	@ 0x64
 800d0b6:	f7ff fb0d 	bl	800c6d4 <Move_Back>
			HAL_Delay(yanshi);
 800d0ba:	2032      	movs	r0, #50	@ 0x32
 800d0bc:	f7f5 fd9e 	bl	8002bfc <HAL_Delay>
		}
		if ((Y_NOW - y_goal) < 0) {
 800d0c0:	4b76      	ldr	r3, [pc, #472]	@ (800d29c <Move_Action_Nopid_Forward_Ctrl+0x2bc>)
 800d0c2:	edd3 7a00 	vldr	s15, [r3]
 800d0c6:	eeb1 7a67 	vneg.f32	s14, s15
 800d0ca:	edd7 7a00 	vldr	s15, [r7]
 800d0ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d0d2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d0d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d0da:	d534      	bpl.n	800d146 <Move_Action_Nopid_Forward_Ctrl+0x166>
			Move_Right(100, 100, ABS(Y_NOW - y_goal) * 13.8);
 800d0dc:	4b6f      	ldr	r3, [pc, #444]	@ (800d29c <Move_Action_Nopid_Forward_Ctrl+0x2bc>)
 800d0de:	edd3 7a00 	vldr	s15, [r3]
 800d0e2:	eeb1 7a67 	vneg.f32	s14, s15
 800d0e6:	edd7 7a00 	vldr	s15, [r7]
 800d0ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d0ee:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d0f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d0f6:	dd09      	ble.n	800d10c <Move_Action_Nopid_Forward_Ctrl+0x12c>
 800d0f8:	4b68      	ldr	r3, [pc, #416]	@ (800d29c <Move_Action_Nopid_Forward_Ctrl+0x2bc>)
 800d0fa:	edd3 7a00 	vldr	s15, [r3]
 800d0fe:	eeb1 7a67 	vneg.f32	s14, s15
 800d102:	edd7 7a00 	vldr	s15, [r7]
 800d106:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d10a:	e00a      	b.n	800d122 <Move_Action_Nopid_Forward_Ctrl+0x142>
 800d10c:	4b63      	ldr	r3, [pc, #396]	@ (800d29c <Move_Action_Nopid_Forward_Ctrl+0x2bc>)
 800d10e:	edd3 7a00 	vldr	s15, [r3]
 800d112:	eeb1 7a67 	vneg.f32	s14, s15
 800d116:	edd7 7a00 	vldr	s15, [r7]
 800d11a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d11e:	eef1 7a67 	vneg.f32	s15, s15
 800d122:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800d126:	ed9f 6b5a 	vldr	d6, [pc, #360]	@ 800d290 <Move_Action_Nopid_Forward_Ctrl+0x2b0>
 800d12a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d12e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800d132:	ee17 2a90 	vmov	r2, s15
 800d136:	2164      	movs	r1, #100	@ 0x64
 800d138:	2064      	movs	r0, #100	@ 0x64
 800d13a:	f7ff fb37 	bl	800c7ac <Move_Right>
			HAL_Delay(yanshi);
 800d13e:	2032      	movs	r0, #50	@ 0x32
 800d140:	f7f5 fd5c 	bl	8002bfc <HAL_Delay>
 800d144:	e033      	b.n	800d1ae <Move_Action_Nopid_Forward_Ctrl+0x1ce>
		} else {
			Move_Left(100, 100, ABS(Y_NOW - y_goal) * 13.8);
 800d146:	4b55      	ldr	r3, [pc, #340]	@ (800d29c <Move_Action_Nopid_Forward_Ctrl+0x2bc>)
 800d148:	edd3 7a00 	vldr	s15, [r3]
 800d14c:	eeb1 7a67 	vneg.f32	s14, s15
 800d150:	edd7 7a00 	vldr	s15, [r7]
 800d154:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d158:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d15c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d160:	dd09      	ble.n	800d176 <Move_Action_Nopid_Forward_Ctrl+0x196>
 800d162:	4b4e      	ldr	r3, [pc, #312]	@ (800d29c <Move_Action_Nopid_Forward_Ctrl+0x2bc>)
 800d164:	edd3 7a00 	vldr	s15, [r3]
 800d168:	eeb1 7a67 	vneg.f32	s14, s15
 800d16c:	edd7 7a00 	vldr	s15, [r7]
 800d170:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d174:	e00a      	b.n	800d18c <Move_Action_Nopid_Forward_Ctrl+0x1ac>
 800d176:	4b49      	ldr	r3, [pc, #292]	@ (800d29c <Move_Action_Nopid_Forward_Ctrl+0x2bc>)
 800d178:	edd3 7a00 	vldr	s15, [r3]
 800d17c:	eeb1 7a67 	vneg.f32	s14, s15
 800d180:	edd7 7a00 	vldr	s15, [r7]
 800d184:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d188:	eef1 7a67 	vneg.f32	s15, s15
 800d18c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800d190:	ed9f 6b3f 	vldr	d6, [pc, #252]	@ 800d290 <Move_Action_Nopid_Forward_Ctrl+0x2b0>
 800d194:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d198:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800d19c:	ee17 2a90 	vmov	r2, s15
 800d1a0:	2164      	movs	r1, #100	@ 0x64
 800d1a2:	2064      	movs	r0, #100	@ 0x64
 800d1a4:	f7ff fa2a 	bl	800c5fc <Move_Left>
			HAL_Delay(yanshi);
 800d1a8:	2032      	movs	r0, #50	@ 0x32
 800d1aa:	f7f5 fd27 	bl	8002bfc <HAL_Delay>
		}
		if ( ABS(X_NOW - x_goal) < 5 && ABS(Y_NOW - y_goal) < 5) {
 800d1ae:	4b3a      	ldr	r3, [pc, #232]	@ (800d298 <Move_Action_Nopid_Forward_Ctrl+0x2b8>)
 800d1b0:	ed93 7a00 	vldr	s14, [r3]
 800d1b4:	edd7 7a01 	vldr	s15, [r7, #4]
 800d1b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d1bc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d1c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d1c4:	dd11      	ble.n	800d1ea <Move_Action_Nopid_Forward_Ctrl+0x20a>
 800d1c6:	4b34      	ldr	r3, [pc, #208]	@ (800d298 <Move_Action_Nopid_Forward_Ctrl+0x2b8>)
 800d1c8:	ed93 7a00 	vldr	s14, [r3]
 800d1cc:	edd7 7a01 	vldr	s15, [r7, #4]
 800d1d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d1d4:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 800d1d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d1dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d1e0:	bf4c      	ite	mi
 800d1e2:	2301      	movmi	r3, #1
 800d1e4:	2300      	movpl	r3, #0
 800d1e6:	b2db      	uxtb	r3, r3
 800d1e8:	e010      	b.n	800d20c <Move_Action_Nopid_Forward_Ctrl+0x22c>
 800d1ea:	4b2b      	ldr	r3, [pc, #172]	@ (800d298 <Move_Action_Nopid_Forward_Ctrl+0x2b8>)
 800d1ec:	ed93 7a00 	vldr	s14, [r3]
 800d1f0:	edd7 7a01 	vldr	s15, [r7, #4]
 800d1f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d1f8:	eeb9 7a04 	vmov.f32	s14, #148	@ 0xc0a00000 -5.0
 800d1fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d200:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d204:	bfcc      	ite	gt
 800d206:	2301      	movgt	r3, #1
 800d208:	2300      	movle	r3, #0
 800d20a:	b2db      	uxtb	r3, r3
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	f43f aeee 	beq.w	800cfee <Move_Action_Nopid_Forward_Ctrl+0xe>
 800d212:	4b22      	ldr	r3, [pc, #136]	@ (800d29c <Move_Action_Nopid_Forward_Ctrl+0x2bc>)
 800d214:	edd3 7a00 	vldr	s15, [r3]
 800d218:	eeb1 7a67 	vneg.f32	s14, s15
 800d21c:	edd7 7a00 	vldr	s15, [r7]
 800d220:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d224:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d228:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d22c:	dd13      	ble.n	800d256 <Move_Action_Nopid_Forward_Ctrl+0x276>
 800d22e:	4b1b      	ldr	r3, [pc, #108]	@ (800d29c <Move_Action_Nopid_Forward_Ctrl+0x2bc>)
 800d230:	edd3 7a00 	vldr	s15, [r3]
 800d234:	eeb1 7a67 	vneg.f32	s14, s15
 800d238:	edd7 7a00 	vldr	s15, [r7]
 800d23c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d240:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 800d244:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d248:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d24c:	bf4c      	ite	mi
 800d24e:	2301      	movmi	r3, #1
 800d250:	2300      	movpl	r3, #0
 800d252:	b2db      	uxtb	r3, r3
 800d254:	e012      	b.n	800d27c <Move_Action_Nopid_Forward_Ctrl+0x29c>
 800d256:	4b11      	ldr	r3, [pc, #68]	@ (800d29c <Move_Action_Nopid_Forward_Ctrl+0x2bc>)
 800d258:	edd3 7a00 	vldr	s15, [r3]
 800d25c:	eeb1 7a67 	vneg.f32	s14, s15
 800d260:	edd7 7a00 	vldr	s15, [r7]
 800d264:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d268:	eeb9 7a04 	vmov.f32	s14, #148	@ 0xc0a00000 -5.0
 800d26c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d270:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d274:	bfcc      	ite	gt
 800d276:	2301      	movgt	r3, #1
 800d278:	2300      	movle	r3, #0
 800d27a:	b2db      	uxtb	r3, r3
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	d100      	bne.n	800d282 <Move_Action_Nopid_Forward_Ctrl+0x2a2>
		if ((X_NOW - x_goal) < 0) {
 800d280:	e6b5      	b.n	800cfee <Move_Action_Nopid_Forward_Ctrl+0xe>
			break; /* 到达目标 */
 800d282:	bf00      	nop
		}
	}
}
 800d284:	bf00      	nop
 800d286:	3708      	adds	r7, #8
 800d288:	46bd      	mov	sp, r7
 800d28a:	bd80      	pop	{r7, pc}
 800d28c:	f3af 8000 	nop.w
 800d290:	9999999a 	.word	0x9999999a
 800d294:	402b9999 	.word	0x402b9999
 800d298:	24000aa8 	.word	0x24000aa8
 800d29c:	24000aac 	.word	0x24000aac

0800d2a0 <Move_Action_Nopid_Right_Ctrl>:

void Move_Action_Nopid_Right_Ctrl(float x_goal, float y_goal) {
 800d2a0:	b580      	push	{r7, lr}
 800d2a2:	b082      	sub	sp, #8
 800d2a4:	af00      	add	r7, sp, #0
 800d2a6:	ed87 0a01 	vstr	s0, [r7, #4]
 800d2aa:	edc7 0a00 	vstr	s1, [r7]
	while (1) {
		if ((X_NOW - x_goal) < 0) {
 800d2ae:	4baa      	ldr	r3, [pc, #680]	@ (800d558 <Move_Action_Nopid_Right_Ctrl+0x2b8>)
 800d2b0:	ed93 7a00 	vldr	s14, [r3]
 800d2b4:	edd7 7a01 	vldr	s15, [r7, #4]
 800d2b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d2bc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d2c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d2c4:	d52e      	bpl.n	800d324 <Move_Action_Nopid_Right_Ctrl+0x84>

			Move_Right(100, 100, ABS(X_NOW - x_goal) * 13.8);
 800d2c6:	4ba4      	ldr	r3, [pc, #656]	@ (800d558 <Move_Action_Nopid_Right_Ctrl+0x2b8>)
 800d2c8:	ed93 7a00 	vldr	s14, [r3]
 800d2cc:	edd7 7a01 	vldr	s15, [r7, #4]
 800d2d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d2d4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d2d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d2dc:	dd07      	ble.n	800d2ee <Move_Action_Nopid_Right_Ctrl+0x4e>
 800d2de:	4b9e      	ldr	r3, [pc, #632]	@ (800d558 <Move_Action_Nopid_Right_Ctrl+0x2b8>)
 800d2e0:	ed93 7a00 	vldr	s14, [r3]
 800d2e4:	edd7 7a01 	vldr	s15, [r7, #4]
 800d2e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d2ec:	e008      	b.n	800d300 <Move_Action_Nopid_Right_Ctrl+0x60>
 800d2ee:	4b9a      	ldr	r3, [pc, #616]	@ (800d558 <Move_Action_Nopid_Right_Ctrl+0x2b8>)
 800d2f0:	ed93 7a00 	vldr	s14, [r3]
 800d2f4:	edd7 7a01 	vldr	s15, [r7, #4]
 800d2f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d2fc:	eef1 7a67 	vneg.f32	s15, s15
 800d300:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800d304:	ed9f 6b92 	vldr	d6, [pc, #584]	@ 800d550 <Move_Action_Nopid_Right_Ctrl+0x2b0>
 800d308:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d30c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800d310:	ee17 2a90 	vmov	r2, s15
 800d314:	2164      	movs	r1, #100	@ 0x64
 800d316:	2064      	movs	r0, #100	@ 0x64
 800d318:	f7ff fa48 	bl	800c7ac <Move_Right>
			HAL_Delay(yanshi);
 800d31c:	2032      	movs	r0, #50	@ 0x32
 800d31e:	f7f5 fc6d 	bl	8002bfc <HAL_Delay>
 800d322:	e02d      	b.n	800d380 <Move_Action_Nopid_Right_Ctrl+0xe0>
		} else {
			Move_Left(100, 100, ABS(X_NOW - x_goal) * 13.8);
 800d324:	4b8c      	ldr	r3, [pc, #560]	@ (800d558 <Move_Action_Nopid_Right_Ctrl+0x2b8>)
 800d326:	ed93 7a00 	vldr	s14, [r3]
 800d32a:	edd7 7a01 	vldr	s15, [r7, #4]
 800d32e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d332:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d336:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d33a:	dd07      	ble.n	800d34c <Move_Action_Nopid_Right_Ctrl+0xac>
 800d33c:	4b86      	ldr	r3, [pc, #536]	@ (800d558 <Move_Action_Nopid_Right_Ctrl+0x2b8>)
 800d33e:	ed93 7a00 	vldr	s14, [r3]
 800d342:	edd7 7a01 	vldr	s15, [r7, #4]
 800d346:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d34a:	e008      	b.n	800d35e <Move_Action_Nopid_Right_Ctrl+0xbe>
 800d34c:	4b82      	ldr	r3, [pc, #520]	@ (800d558 <Move_Action_Nopid_Right_Ctrl+0x2b8>)
 800d34e:	ed93 7a00 	vldr	s14, [r3]
 800d352:	edd7 7a01 	vldr	s15, [r7, #4]
 800d356:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d35a:	eef1 7a67 	vneg.f32	s15, s15
 800d35e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800d362:	ed9f 6b7b 	vldr	d6, [pc, #492]	@ 800d550 <Move_Action_Nopid_Right_Ctrl+0x2b0>
 800d366:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d36a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800d36e:	ee17 2a90 	vmov	r2, s15
 800d372:	2164      	movs	r1, #100	@ 0x64
 800d374:	2064      	movs	r0, #100	@ 0x64
 800d376:	f7ff f941 	bl	800c5fc <Move_Left>
			HAL_Delay(yanshi);
 800d37a:	2032      	movs	r0, #50	@ 0x32
 800d37c:	f7f5 fc3e 	bl	8002bfc <HAL_Delay>
		}
		if ((Y_NOW - y_goal) < 0) {
 800d380:	4b76      	ldr	r3, [pc, #472]	@ (800d55c <Move_Action_Nopid_Right_Ctrl+0x2bc>)
 800d382:	edd3 7a00 	vldr	s15, [r3]
 800d386:	eeb1 7a67 	vneg.f32	s14, s15
 800d38a:	edd7 7a00 	vldr	s15, [r7]
 800d38e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d392:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d396:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d39a:	d534      	bpl.n	800d406 <Move_Action_Nopid_Right_Ctrl+0x166>
			Move_Back(100, 100, ABS(Y_NOW - y_goal) * 13.8);
 800d39c:	4b6f      	ldr	r3, [pc, #444]	@ (800d55c <Move_Action_Nopid_Right_Ctrl+0x2bc>)
 800d39e:	edd3 7a00 	vldr	s15, [r3]
 800d3a2:	eeb1 7a67 	vneg.f32	s14, s15
 800d3a6:	edd7 7a00 	vldr	s15, [r7]
 800d3aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d3ae:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d3b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d3b6:	dd09      	ble.n	800d3cc <Move_Action_Nopid_Right_Ctrl+0x12c>
 800d3b8:	4b68      	ldr	r3, [pc, #416]	@ (800d55c <Move_Action_Nopid_Right_Ctrl+0x2bc>)
 800d3ba:	edd3 7a00 	vldr	s15, [r3]
 800d3be:	eeb1 7a67 	vneg.f32	s14, s15
 800d3c2:	edd7 7a00 	vldr	s15, [r7]
 800d3c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d3ca:	e00a      	b.n	800d3e2 <Move_Action_Nopid_Right_Ctrl+0x142>
 800d3cc:	4b63      	ldr	r3, [pc, #396]	@ (800d55c <Move_Action_Nopid_Right_Ctrl+0x2bc>)
 800d3ce:	edd3 7a00 	vldr	s15, [r3]
 800d3d2:	eeb1 7a67 	vneg.f32	s14, s15
 800d3d6:	edd7 7a00 	vldr	s15, [r7]
 800d3da:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d3de:	eef1 7a67 	vneg.f32	s15, s15
 800d3e2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800d3e6:	ed9f 6b5a 	vldr	d6, [pc, #360]	@ 800d550 <Move_Action_Nopid_Right_Ctrl+0x2b0>
 800d3ea:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d3ee:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800d3f2:	ee17 2a90 	vmov	r2, s15
 800d3f6:	2164      	movs	r1, #100	@ 0x64
 800d3f8:	2064      	movs	r0, #100	@ 0x64
 800d3fa:	f7ff f96b 	bl	800c6d4 <Move_Back>
			HAL_Delay(yanshi);
 800d3fe:	2032      	movs	r0, #50	@ 0x32
 800d400:	f7f5 fbfc 	bl	8002bfc <HAL_Delay>
 800d404:	e033      	b.n	800d46e <Move_Action_Nopid_Right_Ctrl+0x1ce>
		} else {
			Move_Line(100, 100, ABS(Y_NOW - y_goal) * 13.8);
 800d406:	4b55      	ldr	r3, [pc, #340]	@ (800d55c <Move_Action_Nopid_Right_Ctrl+0x2bc>)
 800d408:	edd3 7a00 	vldr	s15, [r3]
 800d40c:	eeb1 7a67 	vneg.f32	s14, s15
 800d410:	edd7 7a00 	vldr	s15, [r7]
 800d414:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d418:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d41c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d420:	dd09      	ble.n	800d436 <Move_Action_Nopid_Right_Ctrl+0x196>
 800d422:	4b4e      	ldr	r3, [pc, #312]	@ (800d55c <Move_Action_Nopid_Right_Ctrl+0x2bc>)
 800d424:	edd3 7a00 	vldr	s15, [r3]
 800d428:	eeb1 7a67 	vneg.f32	s14, s15
 800d42c:	edd7 7a00 	vldr	s15, [r7]
 800d430:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d434:	e00a      	b.n	800d44c <Move_Action_Nopid_Right_Ctrl+0x1ac>
 800d436:	4b49      	ldr	r3, [pc, #292]	@ (800d55c <Move_Action_Nopid_Right_Ctrl+0x2bc>)
 800d438:	edd3 7a00 	vldr	s15, [r3]
 800d43c:	eeb1 7a67 	vneg.f32	s14, s15
 800d440:	edd7 7a00 	vldr	s15, [r7]
 800d444:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d448:	eef1 7a67 	vneg.f32	s15, s15
 800d44c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800d450:	ed9f 6b3f 	vldr	d6, [pc, #252]	@ 800d550 <Move_Action_Nopid_Right_Ctrl+0x2b0>
 800d454:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d458:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800d45c:	ee17 2a90 	vmov	r2, s15
 800d460:	2164      	movs	r1, #100	@ 0x64
 800d462:	2064      	movs	r0, #100	@ 0x64
 800d464:	f7ff f85e 	bl	800c524 <Move_Line>
			HAL_Delay(yanshi);
 800d468:	2032      	movs	r0, #50	@ 0x32
 800d46a:	f7f5 fbc7 	bl	8002bfc <HAL_Delay>
		}
		if ( ABS(X_NOW - x_goal) < 5 && ABS(Y_NOW - y_goal) < 5) {
 800d46e:	4b3a      	ldr	r3, [pc, #232]	@ (800d558 <Move_Action_Nopid_Right_Ctrl+0x2b8>)
 800d470:	ed93 7a00 	vldr	s14, [r3]
 800d474:	edd7 7a01 	vldr	s15, [r7, #4]
 800d478:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d47c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d480:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d484:	dd11      	ble.n	800d4aa <Move_Action_Nopid_Right_Ctrl+0x20a>
 800d486:	4b34      	ldr	r3, [pc, #208]	@ (800d558 <Move_Action_Nopid_Right_Ctrl+0x2b8>)
 800d488:	ed93 7a00 	vldr	s14, [r3]
 800d48c:	edd7 7a01 	vldr	s15, [r7, #4]
 800d490:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d494:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 800d498:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d49c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d4a0:	bf4c      	ite	mi
 800d4a2:	2301      	movmi	r3, #1
 800d4a4:	2300      	movpl	r3, #0
 800d4a6:	b2db      	uxtb	r3, r3
 800d4a8:	e010      	b.n	800d4cc <Move_Action_Nopid_Right_Ctrl+0x22c>
 800d4aa:	4b2b      	ldr	r3, [pc, #172]	@ (800d558 <Move_Action_Nopid_Right_Ctrl+0x2b8>)
 800d4ac:	ed93 7a00 	vldr	s14, [r3]
 800d4b0:	edd7 7a01 	vldr	s15, [r7, #4]
 800d4b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d4b8:	eeb9 7a04 	vmov.f32	s14, #148	@ 0xc0a00000 -5.0
 800d4bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d4c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d4c4:	bfcc      	ite	gt
 800d4c6:	2301      	movgt	r3, #1
 800d4c8:	2300      	movle	r3, #0
 800d4ca:	b2db      	uxtb	r3, r3
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	f43f aeee 	beq.w	800d2ae <Move_Action_Nopid_Right_Ctrl+0xe>
 800d4d2:	4b22      	ldr	r3, [pc, #136]	@ (800d55c <Move_Action_Nopid_Right_Ctrl+0x2bc>)
 800d4d4:	edd3 7a00 	vldr	s15, [r3]
 800d4d8:	eeb1 7a67 	vneg.f32	s14, s15
 800d4dc:	edd7 7a00 	vldr	s15, [r7]
 800d4e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d4e4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d4e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d4ec:	dd13      	ble.n	800d516 <Move_Action_Nopid_Right_Ctrl+0x276>
 800d4ee:	4b1b      	ldr	r3, [pc, #108]	@ (800d55c <Move_Action_Nopid_Right_Ctrl+0x2bc>)
 800d4f0:	edd3 7a00 	vldr	s15, [r3]
 800d4f4:	eeb1 7a67 	vneg.f32	s14, s15
 800d4f8:	edd7 7a00 	vldr	s15, [r7]
 800d4fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d500:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 800d504:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d508:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d50c:	bf4c      	ite	mi
 800d50e:	2301      	movmi	r3, #1
 800d510:	2300      	movpl	r3, #0
 800d512:	b2db      	uxtb	r3, r3
 800d514:	e012      	b.n	800d53c <Move_Action_Nopid_Right_Ctrl+0x29c>
 800d516:	4b11      	ldr	r3, [pc, #68]	@ (800d55c <Move_Action_Nopid_Right_Ctrl+0x2bc>)
 800d518:	edd3 7a00 	vldr	s15, [r3]
 800d51c:	eeb1 7a67 	vneg.f32	s14, s15
 800d520:	edd7 7a00 	vldr	s15, [r7]
 800d524:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d528:	eeb9 7a04 	vmov.f32	s14, #148	@ 0xc0a00000 -5.0
 800d52c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d530:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d534:	bfcc      	ite	gt
 800d536:	2301      	movgt	r3, #1
 800d538:	2300      	movle	r3, #0
 800d53a:	b2db      	uxtb	r3, r3
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d100      	bne.n	800d542 <Move_Action_Nopid_Right_Ctrl+0x2a2>
		if ((X_NOW - x_goal) < 0) {
 800d540:	e6b5      	b.n	800d2ae <Move_Action_Nopid_Right_Ctrl+0xe>
			break; /* 到达目标 */
 800d542:	bf00      	nop
		}
	}
}
 800d544:	bf00      	nop
 800d546:	3708      	adds	r7, #8
 800d548:	46bd      	mov	sp, r7
 800d54a:	bd80      	pop	{r7, pc}
 800d54c:	f3af 8000 	nop.w
 800d550:	9999999a 	.word	0x9999999a
 800d554:	402b9999 	.word	0x402b9999
 800d558:	24000aa8 	.word	0x24000aa8
 800d55c:	24000aac 	.word	0x24000aac

0800d560 <Move_Tx_Pid_Ctrl>:

/* Tx姿态调整 */
uint16_t time_tx=0;
void Move_Tx_Pid_Ctrl(float TX_X_Goal,float TX_Y_Goal) {
 800d560:	b580      	push	{r7, lr}
 800d562:	b082      	sub	sp, #8
 800d564:	af00      	add	r7, sp, #0
 800d566:	ed87 0a01 	vstr	s0, [r7, #4]
 800d56a:	edc7 0a00 	vstr	s1, [r7]

	while (1) {
	if (TX_Y_out >= 0) {
 800d56e:	4b72      	ldr	r3, [pc, #456]	@ (800d738 <Move_Tx_Pid_Ctrl+0x1d8>)
 800d570:	edd3 7a00 	vldr	s15, [r3]
 800d574:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d578:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d57c:	db12      	blt.n	800d5a4 <Move_Tx_Pid_Ctrl+0x44>
			Move_Right(80, 80, TX_Y_out * 5);
 800d57e:	4b6e      	ldr	r3, [pc, #440]	@ (800d738 <Move_Tx_Pid_Ctrl+0x1d8>)
 800d580:	edd3 7a00 	vldr	s15, [r3]
 800d584:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 800d588:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d58c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d590:	ee17 2a90 	vmov	r2, s15
 800d594:	2150      	movs	r1, #80	@ 0x50
 800d596:	2050      	movs	r0, #80	@ 0x50
 800d598:	f7ff f908 	bl	800c7ac <Move_Right>
			HAL_Delay(5);
 800d59c:	2005      	movs	r0, #5
 800d59e:	f7f5 fb2d 	bl	8002bfc <HAL_Delay>
 800d5a2:	e013      	b.n	800d5cc <Move_Tx_Pid_Ctrl+0x6c>
		} else {
			Move_Left(80, 80, -TX_Y_out * 5);
 800d5a4:	4b64      	ldr	r3, [pc, #400]	@ (800d738 <Move_Tx_Pid_Ctrl+0x1d8>)
 800d5a6:	edd3 7a00 	vldr	s15, [r3]
 800d5aa:	eef1 7a67 	vneg.f32	s15, s15
 800d5ae:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 800d5b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d5b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d5ba:	ee17 2a90 	vmov	r2, s15
 800d5be:	2150      	movs	r1, #80	@ 0x50
 800d5c0:	2050      	movs	r0, #80	@ 0x50
 800d5c2:	f7ff f81b 	bl	800c5fc <Move_Left>
			HAL_Delay(5);
 800d5c6:	2005      	movs	r0, #5
 800d5c8:	f7f5 fb18 	bl	8002bfc <HAL_Delay>
		}

		if (TX_X_out >= 0) {
 800d5cc:	4b5b      	ldr	r3, [pc, #364]	@ (800d73c <Move_Tx_Pid_Ctrl+0x1dc>)
 800d5ce:	edd3 7a00 	vldr	s15, [r3]
 800d5d2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d5d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d5da:	db12      	blt.n	800d602 <Move_Tx_Pid_Ctrl+0xa2>
			Move_Back(80, 80, TX_X_out * 5);
 800d5dc:	4b57      	ldr	r3, [pc, #348]	@ (800d73c <Move_Tx_Pid_Ctrl+0x1dc>)
 800d5de:	edd3 7a00 	vldr	s15, [r3]
 800d5e2:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 800d5e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d5ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d5ee:	ee17 2a90 	vmov	r2, s15
 800d5f2:	2150      	movs	r1, #80	@ 0x50
 800d5f4:	2050      	movs	r0, #80	@ 0x50
 800d5f6:	f7ff f86d 	bl	800c6d4 <Move_Back>
			HAL_Delay(5);
 800d5fa:	2005      	movs	r0, #5
 800d5fc:	f7f5 fafe 	bl	8002bfc <HAL_Delay>
 800d600:	e013      	b.n	800d62a <Move_Tx_Pid_Ctrl+0xca>
		} else {
			Move_Line(80, 80, -TX_X_out * 5);
 800d602:	4b4e      	ldr	r3, [pc, #312]	@ (800d73c <Move_Tx_Pid_Ctrl+0x1dc>)
 800d604:	edd3 7a00 	vldr	s15, [r3]
 800d608:	eef1 7a67 	vneg.f32	s15, s15
 800d60c:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 800d610:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d614:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d618:	ee17 2a90 	vmov	r2, s15
 800d61c:	2150      	movs	r1, #80	@ 0x50
 800d61e:	2050      	movs	r0, #80	@ 0x50
 800d620:	f7fe ff80 	bl	800c524 <Move_Line>
			HAL_Delay(5);
 800d624:	2005      	movs	r0, #5
 800d626:	f7f5 fae9 	bl	8002bfc <HAL_Delay>
		}

		if (ABS(Tx_NOW - 370.5) < 5 && ABS(Ty_NOW -230.5) < 5) {
 800d62a:	4b45      	ldr	r3, [pc, #276]	@ (800d740 <Move_Tx_Pid_Ctrl+0x1e0>)
 800d62c:	edd3 7a00 	vldr	s15, [r3]
 800d630:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800d634:	ed9f 6b3c 	vldr	d6, [pc, #240]	@ 800d728 <Move_Tx_Pid_Ctrl+0x1c8>
 800d638:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d63c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800d640:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d644:	dd13      	ble.n	800d66e <Move_Tx_Pid_Ctrl+0x10e>
 800d646:	4b3e      	ldr	r3, [pc, #248]	@ (800d740 <Move_Tx_Pid_Ctrl+0x1e0>)
 800d648:	edd3 7a00 	vldr	s15, [r3]
 800d64c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800d650:	ed9f 6b35 	vldr	d6, [pc, #212]	@ 800d728 <Move_Tx_Pid_Ctrl+0x1c8>
 800d654:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d658:	eeb1 6b04 	vmov.f64	d6, #20	@ 0x40a00000  5.0
 800d65c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800d660:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d664:	bf4c      	ite	mi
 800d666:	2301      	movmi	r3, #1
 800d668:	2300      	movpl	r3, #0
 800d66a:	b2db      	uxtb	r3, r3
 800d66c:	e012      	b.n	800d694 <Move_Tx_Pid_Ctrl+0x134>
 800d66e:	4b34      	ldr	r3, [pc, #208]	@ (800d740 <Move_Tx_Pid_Ctrl+0x1e0>)
 800d670:	edd3 7a00 	vldr	s15, [r3]
 800d674:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800d678:	ed9f 6b2b 	vldr	d6, [pc, #172]	@ 800d728 <Move_Tx_Pid_Ctrl+0x1c8>
 800d67c:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d680:	eeb9 6b04 	vmov.f64	d6, #148	@ 0xc0a00000 -5.0
 800d684:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800d688:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d68c:	bfcc      	ite	gt
 800d68e:	2301      	movgt	r3, #1
 800d690:	2300      	movle	r3, #0
 800d692:	b2db      	uxtb	r3, r3
 800d694:	2b00      	cmp	r3, #0
 800d696:	d036      	beq.n	800d706 <Move_Tx_Pid_Ctrl+0x1a6>
 800d698:	4b2a      	ldr	r3, [pc, #168]	@ (800d744 <Move_Tx_Pid_Ctrl+0x1e4>)
 800d69a:	edd3 7a00 	vldr	s15, [r3]
 800d69e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800d6a2:	ed9f 6b23 	vldr	d6, [pc, #140]	@ 800d730 <Move_Tx_Pid_Ctrl+0x1d0>
 800d6a6:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d6aa:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800d6ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d6b2:	dd13      	ble.n	800d6dc <Move_Tx_Pid_Ctrl+0x17c>
 800d6b4:	4b23      	ldr	r3, [pc, #140]	@ (800d744 <Move_Tx_Pid_Ctrl+0x1e4>)
 800d6b6:	edd3 7a00 	vldr	s15, [r3]
 800d6ba:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800d6be:	ed9f 6b1c 	vldr	d6, [pc, #112]	@ 800d730 <Move_Tx_Pid_Ctrl+0x1d0>
 800d6c2:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d6c6:	eeb1 6b04 	vmov.f64	d6, #20	@ 0x40a00000  5.0
 800d6ca:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800d6ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d6d2:	bf4c      	ite	mi
 800d6d4:	2301      	movmi	r3, #1
 800d6d6:	2300      	movpl	r3, #0
 800d6d8:	b2db      	uxtb	r3, r3
 800d6da:	e012      	b.n	800d702 <Move_Tx_Pid_Ctrl+0x1a2>
 800d6dc:	4b19      	ldr	r3, [pc, #100]	@ (800d744 <Move_Tx_Pid_Ctrl+0x1e4>)
 800d6de:	edd3 7a00 	vldr	s15, [r3]
 800d6e2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800d6e6:	ed9f 6b12 	vldr	d6, [pc, #72]	@ 800d730 <Move_Tx_Pid_Ctrl+0x1d0>
 800d6ea:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d6ee:	eeb9 6b04 	vmov.f64	d6, #148	@ 0xc0a00000 -5.0
 800d6f2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800d6f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d6fa:	bfcc      	ite	gt
 800d6fc:	2301      	movgt	r3, #1
 800d6fe:	2300      	movle	r3, #0
 800d700:	b2db      	uxtb	r3, r3
 800d702:	2b00      	cmp	r3, #0
 800d704:	d108      	bne.n	800d718 <Move_Tx_Pid_Ctrl+0x1b8>
			break;
		}
		if(time_tx>=250)
 800d706:	4b10      	ldr	r3, [pc, #64]	@ (800d748 <Move_Tx_Pid_Ctrl+0x1e8>)
 800d708:	881b      	ldrh	r3, [r3, #0]
 800d70a:	2bf9      	cmp	r3, #249	@ 0xf9
 800d70c:	f67f af2f 	bls.w	800d56e <Move_Tx_Pid_Ctrl+0xe>
		{time_tx=0;
 800d710:	4b0d      	ldr	r3, [pc, #52]	@ (800d748 <Move_Tx_Pid_Ctrl+0x1e8>)
 800d712:	2200      	movs	r2, #0
 800d714:	801a      	strh	r2, [r3, #0]
			break;
 800d716:	e000      	b.n	800d71a <Move_Tx_Pid_Ctrl+0x1ba>
			break;
 800d718:	bf00      	nop
		}
	}

}
 800d71a:	bf00      	nop
 800d71c:	3708      	adds	r7, #8
 800d71e:	46bd      	mov	sp, r7
 800d720:	bd80      	pop	{r7, pc}
 800d722:	bf00      	nop
 800d724:	f3af 8000 	nop.w
 800d728:	00000000 	.word	0x00000000
 800d72c:	40772800 	.word	0x40772800
 800d730:	00000000 	.word	0x00000000
 800d734:	406cd000 	.word	0x406cd000
 800d738:	24000bd8 	.word	0x24000bd8
 800d73c:	24000bd4 	.word	0x24000bd4
 800d740:	24000454 	.word	0x24000454
 800d744:	24000458 	.word	0x24000458
 800d748:	24000be0 	.word	0x24000be0

0800d74c <Host2SCS>:
}

//1个16位数拆分为2个8位数
//DataL为低位，DataH为高位
void Host2SCS(uint8_t *DataL, uint8_t *DataH, int Data)
{
 800d74c:	b480      	push	{r7}
 800d74e:	b085      	sub	sp, #20
 800d750:	af00      	add	r7, sp, #0
 800d752:	60f8      	str	r0, [r7, #12]
 800d754:	60b9      	str	r1, [r7, #8]
 800d756:	607a      	str	r2, [r7, #4]
	if (End)
 800d758:	4b0e      	ldr	r3, [pc, #56]	@ (800d794 <Host2SCS+0x48>)
 800d75a:	781b      	ldrb	r3, [r3, #0]
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d009      	beq.n	800d774 <Host2SCS+0x28>
	{
		*DataL = (Data >> 8);
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	121b      	asrs	r3, r3, #8
 800d764:	b2da      	uxtb	r2, r3
 800d766:	68fb      	ldr	r3, [r7, #12]
 800d768:	701a      	strb	r2, [r3, #0]
		*DataH = (Data & 0xff);
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	b2da      	uxtb	r2, r3
 800d76e:	68bb      	ldr	r3, [r7, #8]
 800d770:	701a      	strb	r2, [r3, #0]
	else
	{
		*DataH = (Data >> 8);
		*DataL = (Data & 0xff);
	}
}
 800d772:	e008      	b.n	800d786 <Host2SCS+0x3a>
		*DataH = (Data >> 8);
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	121b      	asrs	r3, r3, #8
 800d778:	b2da      	uxtb	r2, r3
 800d77a:	68bb      	ldr	r3, [r7, #8]
 800d77c:	701a      	strb	r2, [r3, #0]
		*DataL = (Data & 0xff);
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	b2da      	uxtb	r2, r3
 800d782:	68fb      	ldr	r3, [r7, #12]
 800d784:	701a      	strb	r2, [r3, #0]
}
 800d786:	bf00      	nop
 800d788:	3714      	adds	r7, #20
 800d78a:	46bd      	mov	sp, r7
 800d78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d790:	4770      	bx	lr
 800d792:	bf00      	nop
 800d794:	24000be2 	.word	0x24000be2

0800d798 <writeBuf>:
	return Data;
}

void writeBuf(uint8_t ID, uint8_t MemAddr, uint8_t *nDat, uint8_t nLen,
		uint8_t Fun)
{
 800d798:	b580      	push	{r7, lr}
 800d79a:	b086      	sub	sp, #24
 800d79c:	af00      	add	r7, sp, #0
 800d79e:	603a      	str	r2, [r7, #0]
 800d7a0:	461a      	mov	r2, r3
 800d7a2:	4603      	mov	r3, r0
 800d7a4:	71fb      	strb	r3, [r7, #7]
 800d7a6:	460b      	mov	r3, r1
 800d7a8:	71bb      	strb	r3, [r7, #6]
 800d7aa:	4613      	mov	r3, r2
 800d7ac:	717b      	strb	r3, [r7, #5]
	uint8_t i;
	uint8_t msgLen = 2;
 800d7ae:	2302      	movs	r3, #2
 800d7b0:	75bb      	strb	r3, [r7, #22]
	uint8_t bBuf[6];
	uint8_t CheckSum = 0;
 800d7b2:	2300      	movs	r3, #0
 800d7b4:	73fb      	strb	r3, [r7, #15]
	bBuf[0] = 0xff;
 800d7b6:	23ff      	movs	r3, #255	@ 0xff
 800d7b8:	743b      	strb	r3, [r7, #16]
	bBuf[1] = 0xff;
 800d7ba:	23ff      	movs	r3, #255	@ 0xff
 800d7bc:	747b      	strb	r3, [r7, #17]
	bBuf[2] = ID;
 800d7be:	79fb      	ldrb	r3, [r7, #7]
 800d7c0:	74bb      	strb	r3, [r7, #18]
	bBuf[4] = Fun;
 800d7c2:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d7c6:	753b      	strb	r3, [r7, #20]
	if (nDat)
 800d7c8:	683b      	ldr	r3, [r7, #0]
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d010      	beq.n	800d7f0 <writeBuf+0x58>
	{
		msgLen += nLen + 1;
 800d7ce:	797a      	ldrb	r2, [r7, #5]
 800d7d0:	7dbb      	ldrb	r3, [r7, #22]
 800d7d2:	4413      	add	r3, r2
 800d7d4:	b2db      	uxtb	r3, r3
 800d7d6:	3301      	adds	r3, #1
 800d7d8:	75bb      	strb	r3, [r7, #22]
		bBuf[3] = msgLen;
 800d7da:	7dbb      	ldrb	r3, [r7, #22]
 800d7dc:	74fb      	strb	r3, [r7, #19]
		bBuf[5] = MemAddr;
 800d7de:	79bb      	ldrb	r3, [r7, #6]
 800d7e0:	757b      	strb	r3, [r7, #21]
		writeSCS(bBuf, 6);
 800d7e2:	f107 0310 	add.w	r3, r7, #16
 800d7e6:	2106      	movs	r1, #6
 800d7e8:	4618      	mov	r0, r3
 800d7ea:	f000 f911 	bl	800da10 <writeSCS>
 800d7ee:	e007      	b.n	800d800 <writeBuf+0x68>

	}
	else
	{
		bBuf[3] = msgLen;
 800d7f0:	7dbb      	ldrb	r3, [r7, #22]
 800d7f2:	74fb      	strb	r3, [r7, #19]
		writeSCS(bBuf, 5);
 800d7f4:	f107 0310 	add.w	r3, r7, #16
 800d7f8:	2105      	movs	r1, #5
 800d7fa:	4618      	mov	r0, r3
 800d7fc:	f000 f908 	bl	800da10 <writeSCS>
	}
	CheckSum = ID + msgLen + Fun + MemAddr;
 800d800:	79fa      	ldrb	r2, [r7, #7]
 800d802:	7dbb      	ldrb	r3, [r7, #22]
 800d804:	4413      	add	r3, r2
 800d806:	b2da      	uxtb	r2, r3
 800d808:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d80c:	4413      	add	r3, r2
 800d80e:	b2da      	uxtb	r2, r3
 800d810:	79bb      	ldrb	r3, [r7, #6]
 800d812:	4413      	add	r3, r2
 800d814:	b2db      	uxtb	r3, r3
 800d816:	73fb      	strb	r3, [r7, #15]
	if (nDat)
 800d818:	683b      	ldr	r3, [r7, #0]
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d016      	beq.n	800d84c <writeBuf+0xb4>
	{
		for (i = 0; i < nLen; i++)
 800d81e:	2300      	movs	r3, #0
 800d820:	75fb      	strb	r3, [r7, #23]
 800d822:	e00a      	b.n	800d83a <writeBuf+0xa2>
		{
			CheckSum += nDat[i];
 800d824:	7dfb      	ldrb	r3, [r7, #23]
 800d826:	683a      	ldr	r2, [r7, #0]
 800d828:	4413      	add	r3, r2
 800d82a:	781a      	ldrb	r2, [r3, #0]
 800d82c:	7bfb      	ldrb	r3, [r7, #15]
 800d82e:	4413      	add	r3, r2
 800d830:	b2db      	uxtb	r3, r3
 800d832:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < nLen; i++)
 800d834:	7dfb      	ldrb	r3, [r7, #23]
 800d836:	3301      	adds	r3, #1
 800d838:	75fb      	strb	r3, [r7, #23]
 800d83a:	7dfa      	ldrb	r2, [r7, #23]
 800d83c:	797b      	ldrb	r3, [r7, #5]
 800d83e:	429a      	cmp	r2, r3
 800d840:	d3f0      	bcc.n	800d824 <writeBuf+0x8c>
		}
		writeSCS(nDat, nLen);
 800d842:	797b      	ldrb	r3, [r7, #5]
 800d844:	4619      	mov	r1, r3
 800d846:	6838      	ldr	r0, [r7, #0]
 800d848:	f000 f8e2 	bl	800da10 <writeSCS>
	}
	CheckSum = ~CheckSum;
 800d84c:	7bfb      	ldrb	r3, [r7, #15]
 800d84e:	43db      	mvns	r3, r3
 800d850:	b2db      	uxtb	r3, r3
 800d852:	73fb      	strb	r3, [r7, #15]
	writeSCS(&CheckSum, 1);
 800d854:	f107 030f 	add.w	r3, r7, #15
 800d858:	2101      	movs	r1, #1
 800d85a:	4618      	mov	r0, r3
 800d85c:	f000 f8d8 	bl	800da10 <writeSCS>
}
 800d860:	bf00      	nop
 800d862:	3718      	adds	r7, #24
 800d864:	46bd      	mov	sp, r7
 800d866:	bd80      	pop	{r7, pc}

0800d868 <genWrite>:

//普通写指令
//舵机ID，MemAddr内存表地址，写入数据，写入长度
int genWrite(uint8_t ID, uint8_t MemAddr, uint8_t *nDat, uint8_t nLen)
{
 800d868:	b580      	push	{r7, lr}
 800d86a:	b084      	sub	sp, #16
 800d86c:	af02      	add	r7, sp, #8
 800d86e:	603a      	str	r2, [r7, #0]
 800d870:	461a      	mov	r2, r3
 800d872:	4603      	mov	r3, r0
 800d874:	71fb      	strb	r3, [r7, #7]
 800d876:	460b      	mov	r3, r1
 800d878:	71bb      	strb	r3, [r7, #6]
 800d87a:	4613      	mov	r3, r2
 800d87c:	717b      	strb	r3, [r7, #5]
	rFlushSCS();
 800d87e:	f000 f906 	bl	800da8e <rFlushSCS>
	writeBuf(ID, MemAddr, nDat, nLen, INST_WRITE);
 800d882:	797b      	ldrb	r3, [r7, #5]
 800d884:	79b9      	ldrb	r1, [r7, #6]
 800d886:	79f8      	ldrb	r0, [r7, #7]
 800d888:	2203      	movs	r2, #3
 800d88a:	9200      	str	r2, [sp, #0]
 800d88c:	683a      	ldr	r2, [r7, #0]
 800d88e:	f7ff ff83 	bl	800d798 <writeBuf>
	wFlushSCS();
 800d892:	f000 f903 	bl	800da9c <wFlushSCS>
	return Ack(ID);
 800d896:	79fb      	ldrb	r3, [r7, #7]
 800d898:	4618      	mov	r0, r3
 800d89a:	f000 f82f 	bl	800d8fc <Ack>
 800d89e:	4603      	mov	r3, r0
}
 800d8a0:	4618      	mov	r0, r3
 800d8a2:	3708      	adds	r7, #8
 800d8a4:	46bd      	mov	sp, r7
 800d8a6:	bd80      	pop	{r7, pc}

0800d8a8 <checkHead>:
	Error = bBuf[2];
	return bBuf[0];
}

int checkHead(void)
{
 800d8a8:	b580      	push	{r7, lr}
 800d8aa:	b082      	sub	sp, #8
 800d8ac:	af00      	add	r7, sp, #0
	uint8_t bDat;
	uint8_t bBuf[2] =
 800d8ae:	2300      	movs	r3, #0
 800d8b0:	80bb      	strh	r3, [r7, #4]
	{ 0, 0 };
	uint8_t Cnt = 0;
 800d8b2:	2300      	movs	r3, #0
 800d8b4:	71fb      	strb	r3, [r7, #7]
	while (1)
	{
		if (!readSCS(&bDat, 1))
 800d8b6:	1dbb      	adds	r3, r7, #6
 800d8b8:	2101      	movs	r1, #1
 800d8ba:	4618      	mov	r0, r3
 800d8bc:	f000 f894 	bl	800d9e8 <readSCS>
 800d8c0:	4603      	mov	r3, r0
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	d101      	bne.n	800d8ca <checkHead+0x22>
		{
			return 0;
 800d8c6:	2300      	movs	r3, #0
 800d8c8:	e013      	b.n	800d8f2 <checkHead+0x4a>
		}
		bBuf[1] = bBuf[0];
 800d8ca:	793b      	ldrb	r3, [r7, #4]
 800d8cc:	717b      	strb	r3, [r7, #5]
		bBuf[0] = bDat;
 800d8ce:	79bb      	ldrb	r3, [r7, #6]
 800d8d0:	713b      	strb	r3, [r7, #4]
		if (bBuf[0] == 0xff && bBuf[1] == 0xff)
 800d8d2:	793b      	ldrb	r3, [r7, #4]
 800d8d4:	2bff      	cmp	r3, #255	@ 0xff
 800d8d6:	d102      	bne.n	800d8de <checkHead+0x36>
 800d8d8:	797b      	ldrb	r3, [r7, #5]
 800d8da:	2bff      	cmp	r3, #255	@ 0xff
 800d8dc:	d007      	beq.n	800d8ee <checkHead+0x46>
		{
			break;
		}
		Cnt++;
 800d8de:	79fb      	ldrb	r3, [r7, #7]
 800d8e0:	3301      	adds	r3, #1
 800d8e2:	71fb      	strb	r3, [r7, #7]
		if (Cnt > 10)
 800d8e4:	79fb      	ldrb	r3, [r7, #7]
 800d8e6:	2b0a      	cmp	r3, #10
 800d8e8:	d9e5      	bls.n	800d8b6 <checkHead+0xe>
		{
			return 0;
 800d8ea:	2300      	movs	r3, #0
 800d8ec:	e001      	b.n	800d8f2 <checkHead+0x4a>
			break;
 800d8ee:	bf00      	nop
		}
	}
	return 1;
 800d8f0:	2301      	movs	r3, #1
}
 800d8f2:	4618      	mov	r0, r3
 800d8f4:	3708      	adds	r7, #8
 800d8f6:	46bd      	mov	sp, r7
 800d8f8:	bd80      	pop	{r7, pc}
	...

0800d8fc <Ack>:

//指令应答
int Ack(uint8_t ID)
{
 800d8fc:	b580      	push	{r7, lr}
 800d8fe:	b084      	sub	sp, #16
 800d900:	af00      	add	r7, sp, #0
 800d902:	4603      	mov	r3, r0
 800d904:	71fb      	strb	r3, [r7, #7]
	uint8_t bBuf[4];
	uint8_t calSum;
	Error = 0;
 800d906:	4b1f      	ldr	r3, [pc, #124]	@ (800d984 <Ack+0x88>)
 800d908:	2200      	movs	r2, #0
 800d90a:	701a      	strb	r2, [r3, #0]
	if (ID != 0xfe && Level)
 800d90c:	79fb      	ldrb	r3, [r7, #7]
 800d90e:	2bfe      	cmp	r3, #254	@ 0xfe
 800d910:	d032      	beq.n	800d978 <Ack+0x7c>
 800d912:	4b1d      	ldr	r3, [pc, #116]	@ (800d988 <Ack+0x8c>)
 800d914:	781b      	ldrb	r3, [r3, #0]
 800d916:	2b00      	cmp	r3, #0
 800d918:	d02e      	beq.n	800d978 <Ack+0x7c>
	{
		if (!checkHead())
 800d91a:	f7ff ffc5 	bl	800d8a8 <checkHead>
 800d91e:	4603      	mov	r3, r0
 800d920:	2b00      	cmp	r3, #0
 800d922:	d101      	bne.n	800d928 <Ack+0x2c>
		{
			return 0;
 800d924:	2300      	movs	r3, #0
 800d926:	e028      	b.n	800d97a <Ack+0x7e>
		}
		if (readSCS(bBuf, 4) != 4)
 800d928:	f107 0308 	add.w	r3, r7, #8
 800d92c:	2104      	movs	r1, #4
 800d92e:	4618      	mov	r0, r3
 800d930:	f000 f85a 	bl	800d9e8 <readSCS>
 800d934:	4603      	mov	r3, r0
 800d936:	2b04      	cmp	r3, #4
 800d938:	d001      	beq.n	800d93e <Ack+0x42>
		{
			return 0;
 800d93a:	2300      	movs	r3, #0
 800d93c:	e01d      	b.n	800d97a <Ack+0x7e>
		}
		if (bBuf[0] != ID)
 800d93e:	7a3b      	ldrb	r3, [r7, #8]
 800d940:	79fa      	ldrb	r2, [r7, #7]
 800d942:	429a      	cmp	r2, r3
 800d944:	d001      	beq.n	800d94a <Ack+0x4e>
		{
			return 0;
 800d946:	2300      	movs	r3, #0
 800d948:	e017      	b.n	800d97a <Ack+0x7e>
		}
		if (bBuf[1] != 2)
 800d94a:	7a7b      	ldrb	r3, [r7, #9]
 800d94c:	2b02      	cmp	r3, #2
 800d94e:	d001      	beq.n	800d954 <Ack+0x58>
		{
			return 0;
 800d950:	2300      	movs	r3, #0
 800d952:	e012      	b.n	800d97a <Ack+0x7e>
		}
		calSum = ~(bBuf[0] + bBuf[1] + bBuf[2]);
 800d954:	7a3a      	ldrb	r2, [r7, #8]
 800d956:	7a7b      	ldrb	r3, [r7, #9]
 800d958:	4413      	add	r3, r2
 800d95a:	b2da      	uxtb	r2, r3
 800d95c:	7abb      	ldrb	r3, [r7, #10]
 800d95e:	4413      	add	r3, r2
 800d960:	b2db      	uxtb	r3, r3
 800d962:	43db      	mvns	r3, r3
 800d964:	73fb      	strb	r3, [r7, #15]
		if (calSum != bBuf[3])
 800d966:	7afb      	ldrb	r3, [r7, #11]
 800d968:	7bfa      	ldrb	r2, [r7, #15]
 800d96a:	429a      	cmp	r2, r3
 800d96c:	d001      	beq.n	800d972 <Ack+0x76>
		{
			return 0;
 800d96e:	2300      	movs	r3, #0
 800d970:	e003      	b.n	800d97a <Ack+0x7e>
		}
		Error = bBuf[2];
 800d972:	7aba      	ldrb	r2, [r7, #10]
 800d974:	4b03      	ldr	r3, [pc, #12]	@ (800d984 <Ack+0x88>)
 800d976:	701a      	strb	r2, [r3, #0]
	}
	return 1;
 800d978:	2301      	movs	r3, #1
}
 800d97a:	4618      	mov	r0, r3
 800d97c:	3710      	adds	r7, #16
 800d97e:	46bd      	mov	sp, r7
 800d980:	bd80      	pop	{r7, pc}
 800d982:	bf00      	nop
 800d984:	24000be3 	.word	0x24000be3
 800d988:	24000045 	.word	0x24000045

0800d98c <Uart_Send>:
#include "stm32h7xx_hal.h"
#include "SCS_Uart.h"
#include "usart.h"

void Uart_Send(uint8_t *buf, uint16_t len)
{
 800d98c:	b580      	push	{r7, lr}
 800d98e:	b082      	sub	sp, #8
 800d990:	af00      	add	r7, sp, #0
 800d992:	6078      	str	r0, [r7, #4]
 800d994:	460b      	mov	r3, r1
 800d996:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&huart6, buf, len, HAL_MAX_DELAY);
 800d998:	887a      	ldrh	r2, [r7, #2]
 800d99a:	f04f 33ff 	mov.w	r3, #4294967295
 800d99e:	6879      	ldr	r1, [r7, #4]
 800d9a0:	4803      	ldr	r0, [pc, #12]	@ (800d9b0 <Uart_Send+0x24>)
 800d9a2:	f7fa fe8f 	bl	80086c4 <HAL_UART_Transmit>
}
 800d9a6:	bf00      	nop
 800d9a8:	3708      	adds	r7, #8
 800d9aa:	46bd      	mov	sp, r7
 800d9ac:	bd80      	pop	{r7, pc}
 800d9ae:	bf00      	nop
 800d9b0:	2400097c 	.word	0x2400097c

0800d9b4 <Uart_Read>:

int16_t Uart_Read(uint8_t *buf, uint16_t len, uint32_t timeout)
{
 800d9b4:	b580      	push	{r7, lr}
 800d9b6:	b084      	sub	sp, #16
 800d9b8:	af00      	add	r7, sp, #0
 800d9ba:	60f8      	str	r0, [r7, #12]
 800d9bc:	460b      	mov	r3, r1
 800d9be:	607a      	str	r2, [r7, #4]
 800d9c0:	817b      	strh	r3, [r7, #10]
	if (HAL_UART_Receive(&huart6, buf, len, timeout) == HAL_OK)
 800d9c2:	897a      	ldrh	r2, [r7, #10]
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	68f9      	ldr	r1, [r7, #12]
 800d9c8:	4806      	ldr	r0, [pc, #24]	@ (800d9e4 <Uart_Read+0x30>)
 800d9ca:	f7fa ff09 	bl	80087e0 <HAL_UART_Receive>
 800d9ce:	4603      	mov	r3, r0
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	d102      	bne.n	800d9da <Uart_Read+0x26>
	{
		return len;
 800d9d4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800d9d8:	e000      	b.n	800d9dc <Uart_Read+0x28>
	}
	else
	{
		return 0;
 800d9da:	2300      	movs	r3, #0
	}
}
 800d9dc:	4618      	mov	r0, r3
 800d9de:	3710      	adds	r7, #16
 800d9e0:	46bd      	mov	sp, r7
 800d9e2:	bd80      	pop	{r7, pc}
 800d9e4:	2400097c 	.word	0x2400097c

0800d9e8 <readSCS>:
uint8_t wBuf[128];
uint8_t wLen = 0;

//UART 接收数据接口
int readSCS(unsigned char *nDat, int nLen)
{
 800d9e8:	b580      	push	{r7, lr}
 800d9ea:	b082      	sub	sp, #8
 800d9ec:	af00      	add	r7, sp, #0
 800d9ee:	6078      	str	r0, [r7, #4]
 800d9f0:	6039      	str	r1, [r7, #0]
	return Uart_Read(nDat, nLen, IOTimeOut);
 800d9f2:	683b      	ldr	r3, [r7, #0]
 800d9f4:	b29b      	uxth	r3, r3
 800d9f6:	4a05      	ldr	r2, [pc, #20]	@ (800da0c <readSCS+0x24>)
 800d9f8:	6812      	ldr	r2, [r2, #0]
 800d9fa:	4619      	mov	r1, r3
 800d9fc:	6878      	ldr	r0, [r7, #4]
 800d9fe:	f7ff ffd9 	bl	800d9b4 <Uart_Read>
 800da02:	4603      	mov	r3, r0
}
 800da04:	4618      	mov	r0, r3
 800da06:	3708      	adds	r7, #8
 800da08:	46bd      	mov	sp, r7
 800da0a:	bd80      	pop	{r7, pc}
 800da0c:	24000048 	.word	0x24000048

0800da10 <writeSCS>:

//UART 发送数据接口
int writeSCS(unsigned char *nDat, int nLen)
{
 800da10:	b480      	push	{r7}
 800da12:	b083      	sub	sp, #12
 800da14:	af00      	add	r7, sp, #0
 800da16:	6078      	str	r0, [r7, #4]
 800da18:	6039      	str	r1, [r7, #0]
	while (nLen--)
 800da1a:	e014      	b.n	800da46 <writeSCS+0x36>
	{
		if (wLen < sizeof(wBuf))
 800da1c:	4b10      	ldr	r3, [pc, #64]	@ (800da60 <writeSCS+0x50>)
 800da1e:	781b      	ldrb	r3, [r3, #0]
 800da20:	b25b      	sxtb	r3, r3
 800da22:	2b00      	cmp	r3, #0
 800da24:	db0f      	blt.n	800da46 <writeSCS+0x36>
		{
			wBuf[wLen] = *nDat;
 800da26:	4b0e      	ldr	r3, [pc, #56]	@ (800da60 <writeSCS+0x50>)
 800da28:	781b      	ldrb	r3, [r3, #0]
 800da2a:	461a      	mov	r2, r3
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	7819      	ldrb	r1, [r3, #0]
 800da30:	4b0c      	ldr	r3, [pc, #48]	@ (800da64 <writeSCS+0x54>)
 800da32:	5499      	strb	r1, [r3, r2]
			wLen++;
 800da34:	4b0a      	ldr	r3, [pc, #40]	@ (800da60 <writeSCS+0x50>)
 800da36:	781b      	ldrb	r3, [r3, #0]
 800da38:	3301      	adds	r3, #1
 800da3a:	b2da      	uxtb	r2, r3
 800da3c:	4b08      	ldr	r3, [pc, #32]	@ (800da60 <writeSCS+0x50>)
 800da3e:	701a      	strb	r2, [r3, #0]
			nDat++;
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	3301      	adds	r3, #1
 800da44:	607b      	str	r3, [r7, #4]
	while (nLen--)
 800da46:	683b      	ldr	r3, [r7, #0]
 800da48:	1e5a      	subs	r2, r3, #1
 800da4a:	603a      	str	r2, [r7, #0]
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d1e5      	bne.n	800da1c <writeSCS+0xc>
		}
	}
	return wLen;
 800da50:	4b03      	ldr	r3, [pc, #12]	@ (800da60 <writeSCS+0x50>)
 800da52:	781b      	ldrb	r3, [r3, #0]
}
 800da54:	4618      	mov	r0, r3
 800da56:	370c      	adds	r7, #12
 800da58:	46bd      	mov	sp, r7
 800da5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da5e:	4770      	bx	lr
 800da60:	24000c64 	.word	0x24000c64
 800da64:	24000be4 	.word	0x24000be4

0800da68 <nopDelay>:
	return wLen;
}

//等待舵机总线切换(约8us)
void nopDelay(void)
{
 800da68:	b480      	push	{r7}
 800da6a:	b083      	sub	sp, #12
 800da6c:	af00      	add	r7, sp, #0
	uint16_t i = 500;
 800da6e:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800da72:	80fb      	strh	r3, [r7, #6]
	while (i--)
 800da74:	bf00      	nop
 800da76:	88fb      	ldrh	r3, [r7, #6]
 800da78:	1e5a      	subs	r2, r3, #1
 800da7a:	80fa      	strh	r2, [r7, #6]
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	d1fa      	bne.n	800da76 <nopDelay+0xe>
		;
}
 800da80:	bf00      	nop
 800da82:	bf00      	nop
 800da84:	370c      	adds	r7, #12
 800da86:	46bd      	mov	sp, r7
 800da88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da8c:	4770      	bx	lr

0800da8e <rFlushSCS>:

//接收缓冲区刷新
void rFlushSCS()
{
 800da8e:	b580      	push	{r7, lr}
 800da90:	af00      	add	r7, sp, #0
	nopDelay();
 800da92:	f7ff ffe9 	bl	800da68 <nopDelay>
}
 800da96:	bf00      	nop
 800da98:	bd80      	pop	{r7, pc}
	...

0800da9c <wFlushSCS>:

//发送缓冲区刷新
void wFlushSCS()
{
 800da9c:	b580      	push	{r7, lr}
 800da9e:	af00      	add	r7, sp, #0
	if (wLen)
 800daa0:	4b07      	ldr	r3, [pc, #28]	@ (800dac0 <wFlushSCS+0x24>)
 800daa2:	781b      	ldrb	r3, [r3, #0]
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d008      	beq.n	800daba <wFlushSCS+0x1e>
	{
		Uart_Send(wBuf, wLen);
 800daa8:	4b05      	ldr	r3, [pc, #20]	@ (800dac0 <wFlushSCS+0x24>)
 800daaa:	781b      	ldrb	r3, [r3, #0]
 800daac:	4619      	mov	r1, r3
 800daae:	4805      	ldr	r0, [pc, #20]	@ (800dac4 <wFlushSCS+0x28>)
 800dab0:	f7ff ff6c 	bl	800d98c <Uart_Send>
		wLen = 0;
 800dab4:	4b02      	ldr	r3, [pc, #8]	@ (800dac0 <wFlushSCS+0x24>)
 800dab6:	2200      	movs	r2, #0
 800dab8:	701a      	strb	r2, [r3, #0]
	}
}
 800daba:	bf00      	nop
 800dabc:	bd80      	pop	{r7, pc}
 800dabe:	bf00      	nop
 800dac0:	24000c64 	.word	0x24000c64
 800dac4:	24000be4 	.word	0x24000be4

0800dac8 <WritePosEx>:
{
	return Err;
}

int WritePosEx(uint8_t ID, int16_t Position, uint16_t Speed, uint8_t ACC)
{
 800dac8:	b590      	push	{r4, r7, lr}
 800daca:	b085      	sub	sp, #20
 800dacc:	af00      	add	r7, sp, #0
 800dace:	4604      	mov	r4, r0
 800dad0:	4608      	mov	r0, r1
 800dad2:	4611      	mov	r1, r2
 800dad4:	461a      	mov	r2, r3
 800dad6:	4623      	mov	r3, r4
 800dad8:	71fb      	strb	r3, [r7, #7]
 800dada:	4603      	mov	r3, r0
 800dadc:	80bb      	strh	r3, [r7, #4]
 800dade:	460b      	mov	r3, r1
 800dae0:	807b      	strh	r3, [r7, #2]
 800dae2:	4613      	mov	r3, r2
 800dae4:	71bb      	strb	r3, [r7, #6]
	uint8_t bBuf[7];
	if (Position < 0)
 800dae6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800daea:	2b00      	cmp	r3, #0
 800daec:	da09      	bge.n	800db02 <WritePosEx+0x3a>
	{
		Position = -Position;
 800daee:	88bb      	ldrh	r3, [r7, #4]
 800daf0:	425b      	negs	r3, r3
 800daf2:	b29b      	uxth	r3, r3
 800daf4:	80bb      	strh	r3, [r7, #4]
		Position |= (1 << 15);
 800daf6:	88bb      	ldrh	r3, [r7, #4]
 800daf8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800dafc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800db00:	80bb      	strh	r3, [r7, #4]
	}

	bBuf[0] = ACC;
 800db02:	79bb      	ldrb	r3, [r7, #6]
 800db04:	723b      	strb	r3, [r7, #8]
	Host2SCS(bBuf + 1, bBuf + 2, Position);
 800db06:	f107 0308 	add.w	r3, r7, #8
 800db0a:	3301      	adds	r3, #1
 800db0c:	f107 0108 	add.w	r1, r7, #8
 800db10:	3102      	adds	r1, #2
 800db12:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800db16:	4618      	mov	r0, r3
 800db18:	f7ff fe18 	bl	800d74c <Host2SCS>
	Host2SCS(bBuf + 3, bBuf + 4, 0);
 800db1c:	f107 0308 	add.w	r3, r7, #8
 800db20:	3303      	adds	r3, #3
 800db22:	f107 0108 	add.w	r1, r7, #8
 800db26:	3104      	adds	r1, #4
 800db28:	2200      	movs	r2, #0
 800db2a:	4618      	mov	r0, r3
 800db2c:	f7ff fe0e 	bl	800d74c <Host2SCS>
	Host2SCS(bBuf + 5, bBuf + 6, Speed);
 800db30:	f107 0308 	add.w	r3, r7, #8
 800db34:	3305      	adds	r3, #5
 800db36:	f107 0108 	add.w	r1, r7, #8
 800db3a:	3106      	adds	r1, #6
 800db3c:	887a      	ldrh	r2, [r7, #2]
 800db3e:	4618      	mov	r0, r3
 800db40:	f7ff fe04 	bl	800d74c <Host2SCS>

	return genWrite(ID, SMS_STS_ACC, bBuf, 7);
 800db44:	f107 0208 	add.w	r2, r7, #8
 800db48:	79f8      	ldrb	r0, [r7, #7]
 800db4a:	2307      	movs	r3, #7
 800db4c:	2129      	movs	r1, #41	@ 0x29
 800db4e:	f7ff fe8b 	bl	800d868 <genWrite>
 800db52:	4603      	mov	r3, r0
}
 800db54:	4618      	mov	r0, r3
 800db56:	3714      	adds	r7, #20
 800db58:	46bd      	mov	sp, r7
 800db5a:	bd90      	pop	{r4, r7, pc}

0800db5c <Action_Show>:
extern float x;
extern float y;
extern int colour;
extern char Point_Flag;

void Action_Show(void) {
 800db5c:	b580      	push	{r7, lr}
 800db5e:	af00      	add	r7, sp, #0
	sprintf(Z_str, "%.2f", zangle);
 800db60:	4b30      	ldr	r3, [pc, #192]	@ (800dc24 <Action_Show+0xc8>)
 800db62:	edd3 7a00 	vldr	s15, [r3]
 800db66:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800db6a:	ec53 2b17 	vmov	r2, r3, d7
 800db6e:	492e      	ldr	r1, [pc, #184]	@ (800dc28 <Action_Show+0xcc>)
 800db70:	482e      	ldr	r0, [pc, #184]	@ (800dc2c <Action_Show+0xd0>)
 800db72:	f001 ff83 	bl	800fa7c <siprintf>
	sprintf(X_srt, "%.2f", pos_x);
 800db76:	4b2e      	ldr	r3, [pc, #184]	@ (800dc30 <Action_Show+0xd4>)
 800db78:	edd3 7a00 	vldr	s15, [r3]
 800db7c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800db80:	ec53 2b17 	vmov	r2, r3, d7
 800db84:	4928      	ldr	r1, [pc, #160]	@ (800dc28 <Action_Show+0xcc>)
 800db86:	482b      	ldr	r0, [pc, #172]	@ (800dc34 <Action_Show+0xd8>)
 800db88:	f001 ff78 	bl	800fa7c <siprintf>
	sprintf(Y_srt, "%.2f", pos_y);
 800db8c:	4b2a      	ldr	r3, [pc, #168]	@ (800dc38 <Action_Show+0xdc>)
 800db8e:	edd3 7a00 	vldr	s15, [r3]
 800db92:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800db96:	ec53 2b17 	vmov	r2, r3, d7
 800db9a:	4923      	ldr	r1, [pc, #140]	@ (800dc28 <Action_Show+0xcc>)
 800db9c:	4827      	ldr	r0, [pc, #156]	@ (800dc3c <Action_Show+0xe0>)
 800db9e:	f001 ff6d 	bl	800fa7c <siprintf>
	HAL_UART_Transmit(&huart4, (uint8_t*) "Z_Angle.txt=\"",
 800dba2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800dba6:	220d      	movs	r2, #13
 800dba8:	4925      	ldr	r1, [pc, #148]	@ (800dc40 <Action_Show+0xe4>)
 800dbaa:	4826      	ldr	r0, [pc, #152]	@ (800dc44 <Action_Show+0xe8>)
 800dbac:	f7fa fd8a 	bl	80086c4 <HAL_UART_Transmit>
			sizeof("Z_Angle.txt=\"") - 1, 0xffff);
	HAL_UART_Transmit(&huart4, (uint8_t*) Z_str, sizeof(X_srt) - 1, 0xffff);
 800dbb0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800dbb4:	2213      	movs	r2, #19
 800dbb6:	491d      	ldr	r1, [pc, #116]	@ (800dc2c <Action_Show+0xd0>)
 800dbb8:	4822      	ldr	r0, [pc, #136]	@ (800dc44 <Action_Show+0xe8>)
 800dbba:	f7fa fd83 	bl	80086c4 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart4, (uint8_t*) "\"\xff\xff\xff",
 800dbbe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800dbc2:	2204      	movs	r2, #4
 800dbc4:	4920      	ldr	r1, [pc, #128]	@ (800dc48 <Action_Show+0xec>)
 800dbc6:	481f      	ldr	r0, [pc, #124]	@ (800dc44 <Action_Show+0xe8>)
 800dbc8:	f7fa fd7c 	bl	80086c4 <HAL_UART_Transmit>
			sizeof("\"\xff\xff\xff") - 1, 0xffff);

	HAL_UART_Transmit(&huart4, (uint8_t*) "X_Point.txt=\"",
 800dbcc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800dbd0:	220d      	movs	r2, #13
 800dbd2:	491e      	ldr	r1, [pc, #120]	@ (800dc4c <Action_Show+0xf0>)
 800dbd4:	481b      	ldr	r0, [pc, #108]	@ (800dc44 <Action_Show+0xe8>)
 800dbd6:	f7fa fd75 	bl	80086c4 <HAL_UART_Transmit>
			sizeof("X_Point.txt=\"") - 1, 0xffff);
	HAL_UART_Transmit(&huart4, (uint8_t*) X_srt, sizeof(X_srt) - 1, 0xffff);
 800dbda:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800dbde:	2213      	movs	r2, #19
 800dbe0:	4914      	ldr	r1, [pc, #80]	@ (800dc34 <Action_Show+0xd8>)
 800dbe2:	4818      	ldr	r0, [pc, #96]	@ (800dc44 <Action_Show+0xe8>)
 800dbe4:	f7fa fd6e 	bl	80086c4 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart4, (uint8_t*) "\"\xff\xff\xff",
 800dbe8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800dbec:	2204      	movs	r2, #4
 800dbee:	4916      	ldr	r1, [pc, #88]	@ (800dc48 <Action_Show+0xec>)
 800dbf0:	4814      	ldr	r0, [pc, #80]	@ (800dc44 <Action_Show+0xe8>)
 800dbf2:	f7fa fd67 	bl	80086c4 <HAL_UART_Transmit>
			sizeof("\"\xff\xff\xff") - 1, 0xffff);

	HAL_UART_Transmit(&huart4, (uint8_t*) "Y_Point.txt=\"",
 800dbf6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800dbfa:	220d      	movs	r2, #13
 800dbfc:	4914      	ldr	r1, [pc, #80]	@ (800dc50 <Action_Show+0xf4>)
 800dbfe:	4811      	ldr	r0, [pc, #68]	@ (800dc44 <Action_Show+0xe8>)
 800dc00:	f7fa fd60 	bl	80086c4 <HAL_UART_Transmit>
			sizeof("Y_Point.txt=\"") - 1, 0xffff);
	HAL_UART_Transmit(&huart4, (uint8_t*) Y_srt, sizeof(X_srt) - 1, 0xffff);
 800dc04:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800dc08:	2213      	movs	r2, #19
 800dc0a:	490c      	ldr	r1, [pc, #48]	@ (800dc3c <Action_Show+0xe0>)
 800dc0c:	480d      	ldr	r0, [pc, #52]	@ (800dc44 <Action_Show+0xe8>)
 800dc0e:	f7fa fd59 	bl	80086c4 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart4, (uint8_t*) "\"\xff\xff\xff",
 800dc12:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800dc16:	2204      	movs	r2, #4
 800dc18:	490b      	ldr	r1, [pc, #44]	@ (800dc48 <Action_Show+0xec>)
 800dc1a:	480a      	ldr	r0, [pc, #40]	@ (800dc44 <Action_Show+0xe8>)
 800dc1c:	f7fa fd52 	bl	80086c4 <HAL_UART_Transmit>
			sizeof("\"\xff\xff\xff") - 1, 0xffff);
}
 800dc20:	bf00      	nop
 800dc22:	bd80      	pop	{r7, pc}
 800dc24:	24000ab0 	.word	0x24000ab0
 800dc28:	08012d90 	.word	0x08012d90
 800dc2c:	24000c68 	.word	0x24000c68
 800dc30:	24000aa8 	.word	0x24000aa8
 800dc34:	24000c70 	.word	0x24000c70
 800dc38:	24000aac 	.word	0x24000aac
 800dc3c:	24000c84 	.word	0x24000c84
 800dc40:	08012d98 	.word	0x08012d98
 800dc44:	24000570 	.word	0x24000570
 800dc48:	08012da8 	.word	0x08012da8
 800dc4c:	08012db0 	.word	0x08012db0
 800dc50:	08012dc0 	.word	0x08012dc0

0800dc54 <QR_Show>:
extern int QR_data[6];
void QR_Show(void) {
 800dc54:	b580      	push	{r7, lr}
 800dc56:	b082      	sub	sp, #8
 800dc58:	af00      	add	r7, sp, #0
	for (int i = 0; i < 6; i++) {
 800dc5a:	2300      	movs	r3, #0
 800dc5c:	607b      	str	r3, [r7, #4]
 800dc5e:	e00d      	b.n	800dc7c <QR_Show+0x28>
		sprintf(&Y_pid[i], "%d", QR_data[i]);
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	4a14      	ldr	r2, [pc, #80]	@ (800dcb4 <QR_Show+0x60>)
 800dc64:	1898      	adds	r0, r3, r2
 800dc66:	4a14      	ldr	r2, [pc, #80]	@ (800dcb8 <QR_Show+0x64>)
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dc6e:	461a      	mov	r2, r3
 800dc70:	4912      	ldr	r1, [pc, #72]	@ (800dcbc <QR_Show+0x68>)
 800dc72:	f001 ff03 	bl	800fa7c <siprintf>
	for (int i = 0; i < 6; i++) {
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	3301      	adds	r3, #1
 800dc7a:	607b      	str	r3, [r7, #4]
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	2b05      	cmp	r3, #5
 800dc80:	ddee      	ble.n	800dc60 <QR_Show+0xc>
	}
	HAL_UART_Transmit(&huart4, (uint8_t*) "QR.txt=\"", sizeof("QR.txt=\"") - 1,
 800dc82:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800dc86:	2208      	movs	r2, #8
 800dc88:	490d      	ldr	r1, [pc, #52]	@ (800dcc0 <QR_Show+0x6c>)
 800dc8a:	480e      	ldr	r0, [pc, #56]	@ (800dcc4 <QR_Show+0x70>)
 800dc8c:	f7fa fd1a 	bl	80086c4 <HAL_UART_Transmit>
			0xffff);
	HAL_UART_Transmit(&huart4, (uint8_t*) Y_pid, sizeof(Y_pid) - 1, 0xffff);
 800dc90:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800dc94:	2213      	movs	r2, #19
 800dc96:	4907      	ldr	r1, [pc, #28]	@ (800dcb4 <QR_Show+0x60>)
 800dc98:	480a      	ldr	r0, [pc, #40]	@ (800dcc4 <QR_Show+0x70>)
 800dc9a:	f7fa fd13 	bl	80086c4 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart4, (uint8_t*) "\"\xff\xff\xff",
 800dc9e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800dca2:	2204      	movs	r2, #4
 800dca4:	4908      	ldr	r1, [pc, #32]	@ (800dcc8 <QR_Show+0x74>)
 800dca6:	4807      	ldr	r0, [pc, #28]	@ (800dcc4 <QR_Show+0x70>)
 800dca8:	f7fa fd0c 	bl	80086c4 <HAL_UART_Transmit>
	 HAL_UART_Transmit(&huart4, (uint8_t*) QR_data, sizeof(QR_data) - 1, 0xffff);
	 HAL_UART_Transmit(&huart4, (uint8_t*) "\"\xff\xff\xff",
	 sizeof("\"\xff\xff\xff") - 1, 0xffff);
	 */

}
 800dcac:	bf00      	nop
 800dcae:	3708      	adds	r7, #8
 800dcb0:	46bd      	mov	sp, r7
 800dcb2:	bd80      	pop	{r7, pc}
 800dcb4:	24000c98 	.word	0x24000c98
 800dcb8:	24000460 	.word	0x24000460
 800dcbc:	08012dd0 	.word	0x08012dd0
 800dcc0:	08012dd4 	.word	0x08012dd4
 800dcc4:	24000570 	.word	0x24000570
 800dcc8:	08012da8 	.word	0x08012da8

0800dccc <Point_Show>:
//}



// TODO：屏幕缺失字符"+",暂时判断为编码格式问题，需要通过串口助手确定编码格式
void Point_Show(void) {
 800dccc:	b580      	push	{r7, lr}
 800dcce:	af00      	add	r7, sp, #0
	if(Point_Flag == 0)
 800dcd0:	4b2f      	ldr	r3, [pc, #188]	@ (800dd90 <Point_Show+0xc4>)
 800dcd2:	781b      	ldrb	r3, [r3, #0]
 800dcd4:	2b00      	cmp	r3, #0
 800dcd6:	d058      	beq.n	800dd8a <Point_Show+0xbe>
	{
//		TX2点位数据还未接收，结束该函数
		return ;
	}
	Point_Flag = 0;
 800dcd8:	4b2d      	ldr	r3, [pc, #180]	@ (800dd90 <Point_Show+0xc4>)
 800dcda:	2200      	movs	r2, #0
 800dcdc:	701a      	strb	r2, [r3, #0]
	sprintf(TX2_X_Point, "%.2f", x);
 800dcde:	4b2d      	ldr	r3, [pc, #180]	@ (800dd94 <Point_Show+0xc8>)
 800dce0:	edd3 7a00 	vldr	s15, [r3]
 800dce4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800dce8:	ec53 2b17 	vmov	r2, r3, d7
 800dcec:	492a      	ldr	r1, [pc, #168]	@ (800dd98 <Point_Show+0xcc>)
 800dcee:	482b      	ldr	r0, [pc, #172]	@ (800dd9c <Point_Show+0xd0>)
 800dcf0:	f001 fec4 	bl	800fa7c <siprintf>
	sprintf(TX2_Y_Point, "%.2f", y);
 800dcf4:	4b2a      	ldr	r3, [pc, #168]	@ (800dda0 <Point_Show+0xd4>)
 800dcf6:	edd3 7a00 	vldr	s15, [r3]
 800dcfa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800dcfe:	ec53 2b17 	vmov	r2, r3, d7
 800dd02:	4925      	ldr	r1, [pc, #148]	@ (800dd98 <Point_Show+0xcc>)
 800dd04:	4827      	ldr	r0, [pc, #156]	@ (800dda4 <Point_Show+0xd8>)
 800dd06:	f001 feb9 	bl	800fa7c <siprintf>
	sprintf(TX2_Color, "%d", colour);
 800dd0a:	4b27      	ldr	r3, [pc, #156]	@ (800dda8 <Point_Show+0xdc>)
 800dd0c:	681b      	ldr	r3, [r3, #0]
 800dd0e:	461a      	mov	r2, r3
 800dd10:	4926      	ldr	r1, [pc, #152]	@ (800ddac <Point_Show+0xe0>)
 800dd12:	4827      	ldr	r0, [pc, #156]	@ (800ddb0 <Point_Show+0xe4>)
 800dd14:	f001 feb2 	bl	800fa7c <siprintf>
//	开始发送一帧点位数据
	HAL_UART_Transmit(&huart4, (uint8_t*) "Point.txt=\"",sizeof("Point.txt=\"") - 1, 0xffff);
 800dd18:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800dd1c:	220b      	movs	r2, #11
 800dd1e:	4925      	ldr	r1, [pc, #148]	@ (800ddb4 <Point_Show+0xe8>)
 800dd20:	4825      	ldr	r0, [pc, #148]	@ (800ddb8 <Point_Show+0xec>)
 800dd22:	f7fa fccf 	bl	80086c4 <HAL_UART_Transmit>

	HAL_UART_Transmit(&huart4, (uint8_t*) TX2_X_Point, sizeof(TX2_X_Point) - 2, 0xffff);
 800dd26:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800dd2a:	2206      	movs	r2, #6
 800dd2c:	491b      	ldr	r1, [pc, #108]	@ (800dd9c <Point_Show+0xd0>)
 800dd2e:	4822      	ldr	r0, [pc, #136]	@ (800ddb8 <Point_Show+0xec>)
 800dd30:	f7fa fcc8 	bl	80086c4 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart4, (uint8_t*) "+", sizeof("+")-2, 0xffff);
 800dd34:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800dd38:	2200      	movs	r2, #0
 800dd3a:	4920      	ldr	r1, [pc, #128]	@ (800ddbc <Point_Show+0xf0>)
 800dd3c:	481e      	ldr	r0, [pc, #120]	@ (800ddb8 <Point_Show+0xec>)
 800dd3e:	f7fa fcc1 	bl	80086c4 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart4, (uint8_t*) TX2_Y_Point, sizeof(TX2_Y_Point) - 1, 0xffff);
 800dd42:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800dd46:	2207      	movs	r2, #7
 800dd48:	4916      	ldr	r1, [pc, #88]	@ (800dda4 <Point_Show+0xd8>)
 800dd4a:	481b      	ldr	r0, [pc, #108]	@ (800ddb8 <Point_Show+0xec>)
 800dd4c:	f7fa fcba 	bl	80086c4 <HAL_UART_Transmit>
//	结束发送一帧点位数据
	HAL_UART_Transmit(&huart4, (uint8_t*) "\"\xff\xff\xff",sizeof("\"\xff\xff\xff") - 1, 0xffff);
 800dd50:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800dd54:	2204      	movs	r2, #4
 800dd56:	491a      	ldr	r1, [pc, #104]	@ (800ddc0 <Point_Show+0xf4>)
 800dd58:	4817      	ldr	r0, [pc, #92]	@ (800ddb8 <Point_Show+0xec>)
 800dd5a:	f7fa fcb3 	bl	80086c4 <HAL_UART_Transmit>

//	开始发送一帧颜色数据
	HAL_UART_Transmit(&huart4, (uint8_t*) "Color.txt=\"",sizeof("Color.txt=\"") - 1, 0xffff);
 800dd5e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800dd62:	220b      	movs	r2, #11
 800dd64:	4917      	ldr	r1, [pc, #92]	@ (800ddc4 <Point_Show+0xf8>)
 800dd66:	4814      	ldr	r0, [pc, #80]	@ (800ddb8 <Point_Show+0xec>)
 800dd68:	f7fa fcac 	bl	80086c4 <HAL_UART_Transmit>

	HAL_UART_Transmit(&huart4, (uint8_t*) TX2_Color, sizeof(TX2_Color)-1 , 0xffff);
 800dd6c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800dd70:	2201      	movs	r2, #1
 800dd72:	490f      	ldr	r1, [pc, #60]	@ (800ddb0 <Point_Show+0xe4>)
 800dd74:	4810      	ldr	r0, [pc, #64]	@ (800ddb8 <Point_Show+0xec>)
 800dd76:	f7fa fca5 	bl	80086c4 <HAL_UART_Transmit>

//	结束发送一帧颜色数据
	HAL_UART_Transmit(&huart4, (uint8_t*) "\"\xff\xff\xff",sizeof("\"\xff\xff\xff") - 1, 0xffff);
 800dd7a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800dd7e:	2204      	movs	r2, #4
 800dd80:	490f      	ldr	r1, [pc, #60]	@ (800ddc0 <Point_Show+0xf4>)
 800dd82:	480d      	ldr	r0, [pc, #52]	@ (800ddb8 <Point_Show+0xec>)
 800dd84:	f7fa fc9e 	bl	80086c4 <HAL_UART_Transmit>
 800dd88:	e000      	b.n	800dd8c <Point_Show+0xc0>
		return ;
 800dd8a:	bf00      	nop
}
 800dd8c:	bd80      	pop	{r7, pc}
 800dd8e:	bf00      	nop
 800dd90:	2400045c 	.word	0x2400045c
 800dd94:	24000454 	.word	0x24000454
 800dd98:	08012d90 	.word	0x08012d90
 800dd9c:	24000cac 	.word	0x24000cac
 800dda0:	24000458 	.word	0x24000458
 800dda4:	24000cb4 	.word	0x24000cb4
 800dda8:	2400047c 	.word	0x2400047c
 800ddac:	08012dd0 	.word	0x08012dd0
 800ddb0:	24000cbc 	.word	0x24000cbc
 800ddb4:	08012de0 	.word	0x08012de0
 800ddb8:	24000570 	.word	0x24000570
 800ddbc:	08012dec 	.word	0x08012dec
 800ddc0:	08012da8 	.word	0x08012da8
 800ddc4:	08012df0 	.word	0x08012df0

0800ddc8 <Check_Flag>:

void Check_Flag(uint8_t rec) {
 800ddc8:	b480      	push	{r7}
 800ddca:	b083      	sub	sp, #12
 800ddcc:	af00      	add	r7, sp, #0
 800ddce:	4603      	mov	r3, r0
 800ddd0:	71fb      	strb	r3, [r7, #7]
	static uint8_t ch;
	static uint8_t count = 0;

	ch = rec;
 800ddd2:	4a45      	ldr	r2, [pc, #276]	@ (800dee8 <Check_Flag+0x120>)
 800ddd4:	79fb      	ldrb	r3, [r7, #7]
 800ddd6:	7013      	strb	r3, [r2, #0]

	switch (count) {
 800ddd8:	4b44      	ldr	r3, [pc, #272]	@ (800deec <Check_Flag+0x124>)
 800ddda:	781b      	ldrb	r3, [r3, #0]
 800dddc:	2b05      	cmp	r3, #5
 800ddde:	d876      	bhi.n	800dece <Check_Flag+0x106>
 800dde0:	a201      	add	r2, pc, #4	@ (adr r2, 800dde8 <Check_Flag+0x20>)
 800dde2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dde6:	bf00      	nop
 800dde8:	0800de01 	.word	0x0800de01
 800ddec:	0800de39 	.word	0x0800de39
 800ddf0:	0800de5f 	.word	0x0800de5f
 800ddf4:	0800de7d 	.word	0x0800de7d
 800ddf8:	0800de9b 	.word	0x0800de9b
 800ddfc:	0800deb9 	.word	0x0800deb9
	case 0:
		if (ch == 'G')
 800de00:	4b39      	ldr	r3, [pc, #228]	@ (800dee8 <Check_Flag+0x120>)
 800de02:	781b      	ldrb	r3, [r3, #0]
 800de04:	2b47      	cmp	r3, #71	@ 0x47
 800de06:	d103      	bne.n	800de10 <Check_Flag+0x48>
			count = 1;
 800de08:	4b38      	ldr	r3, [pc, #224]	@ (800deec <Check_Flag+0x124>)
 800de0a:	2201      	movs	r2, #1
 800de0c:	701a      	strb	r2, [r3, #0]
			count = 2;
		else if (ch == 'M')
			count = 4;
		else
			count = 0;
		break;
 800de0e:	e065      	b.n	800dedc <Check_Flag+0x114>
		else if (ch == 'R')
 800de10:	4b35      	ldr	r3, [pc, #212]	@ (800dee8 <Check_Flag+0x120>)
 800de12:	781b      	ldrb	r3, [r3, #0]
 800de14:	2b52      	cmp	r3, #82	@ 0x52
 800de16:	d103      	bne.n	800de20 <Check_Flag+0x58>
			count = 2;
 800de18:	4b34      	ldr	r3, [pc, #208]	@ (800deec <Check_Flag+0x124>)
 800de1a:	2202      	movs	r2, #2
 800de1c:	701a      	strb	r2, [r3, #0]
		break;
 800de1e:	e05d      	b.n	800dedc <Check_Flag+0x114>
		else if (ch == 'M')
 800de20:	4b31      	ldr	r3, [pc, #196]	@ (800dee8 <Check_Flag+0x120>)
 800de22:	781b      	ldrb	r3, [r3, #0]
 800de24:	2b4d      	cmp	r3, #77	@ 0x4d
 800de26:	d103      	bne.n	800de30 <Check_Flag+0x68>
			count = 4;
 800de28:	4b30      	ldr	r3, [pc, #192]	@ (800deec <Check_Flag+0x124>)
 800de2a:	2204      	movs	r2, #4
 800de2c:	701a      	strb	r2, [r3, #0]
		break;
 800de2e:	e055      	b.n	800dedc <Check_Flag+0x114>
			count = 0;
 800de30:	4b2e      	ldr	r3, [pc, #184]	@ (800deec <Check_Flag+0x124>)
 800de32:	2200      	movs	r2, #0
 800de34:	701a      	strb	r2, [r3, #0]
		break;
 800de36:	e051      	b.n	800dedc <Check_Flag+0x114>
	case 1:
		if (ch == 'o') {
 800de38:	4b2b      	ldr	r3, [pc, #172]	@ (800dee8 <Check_Flag+0x120>)
 800de3a:	781b      	ldrb	r3, [r3, #0]
 800de3c:	2b6f      	cmp	r3, #111	@ 0x6f
 800de3e:	d106      	bne.n	800de4e <Check_Flag+0x86>
			System_Flag = 1;
 800de40:	4b2b      	ldr	r3, [pc, #172]	@ (800def0 <Check_Flag+0x128>)
 800de42:	2201      	movs	r2, #1
 800de44:	701a      	strb	r2, [r3, #0]
			count = 0;
 800de46:	4b29      	ldr	r3, [pc, #164]	@ (800deec <Check_Flag+0x124>)
 800de48:	2200      	movs	r2, #0
 800de4a:	701a      	strb	r2, [r3, #0]
		} else if (ch == 'G')
			;
		else
			count = 0;
		break;
 800de4c:	e043      	b.n	800ded6 <Check_Flag+0x10e>
		} else if (ch == 'G')
 800de4e:	4b26      	ldr	r3, [pc, #152]	@ (800dee8 <Check_Flag+0x120>)
 800de50:	781b      	ldrb	r3, [r3, #0]
 800de52:	2b47      	cmp	r3, #71	@ 0x47
 800de54:	d03f      	beq.n	800ded6 <Check_Flag+0x10e>
			count = 0;
 800de56:	4b25      	ldr	r3, [pc, #148]	@ (800deec <Check_Flag+0x124>)
 800de58:	2200      	movs	r2, #0
 800de5a:	701a      	strb	r2, [r3, #0]
		break;
 800de5c:	e03b      	b.n	800ded6 <Check_Flag+0x10e>
	case 2:
//		此处用于判断是否进入准备模式，调整车身姿态
		if (ch == 'e')
 800de5e:	4b22      	ldr	r3, [pc, #136]	@ (800dee8 <Check_Flag+0x120>)
 800de60:	781b      	ldrb	r3, [r3, #0]
 800de62:	2b65      	cmp	r3, #101	@ 0x65
 800de64:	d106      	bne.n	800de74 <Check_Flag+0xac>
			count++;
 800de66:	4b21      	ldr	r3, [pc, #132]	@ (800deec <Check_Flag+0x124>)
 800de68:	781b      	ldrb	r3, [r3, #0]
 800de6a:	3301      	adds	r3, #1
 800de6c:	b2da      	uxtb	r2, r3
 800de6e:	4b1f      	ldr	r3, [pc, #124]	@ (800deec <Check_Flag+0x124>)
 800de70:	701a      	strb	r2, [r3, #0]
		else
			count = 0;
		break;
 800de72:	e033      	b.n	800dedc <Check_Flag+0x114>
			count = 0;
 800de74:	4b1d      	ldr	r3, [pc, #116]	@ (800deec <Check_Flag+0x124>)
 800de76:	2200      	movs	r2, #0
 800de78:	701a      	strb	r2, [r3, #0]
		break;
 800de7a:	e02f      	b.n	800dedc <Check_Flag+0x114>
	case 3:
		if (ch == 'a') {
 800de7c:	4b1a      	ldr	r3, [pc, #104]	@ (800dee8 <Check_Flag+0x120>)
 800de7e:	781b      	ldrb	r3, [r3, #0]
 800de80:	2b61      	cmp	r3, #97	@ 0x61
 800de82:	d106      	bne.n	800de92 <Check_Flag+0xca>
			Ready_Flag = 1;
 800de84:	4b1b      	ldr	r3, [pc, #108]	@ (800def4 <Check_Flag+0x12c>)
 800de86:	2201      	movs	r2, #1
 800de88:	701a      	strb	r2, [r3, #0]
			count = 0;
 800de8a:	4b18      	ldr	r3, [pc, #96]	@ (800deec <Check_Flag+0x124>)
 800de8c:	2200      	movs	r2, #0
 800de8e:	701a      	strb	r2, [r3, #0]
		} else
			count = 0;
		break;
 800de90:	e024      	b.n	800dedc <Check_Flag+0x114>
			count = 0;
 800de92:	4b16      	ldr	r3, [pc, #88]	@ (800deec <Check_Flag+0x124>)
 800de94:	2200      	movs	r2, #0
 800de96:	701a      	strb	r2, [r3, #0]
		break;
 800de98:	e020      	b.n	800dedc <Check_Flag+0x114>
	case 4:
		if (ch == 'a')
 800de9a:	4b13      	ldr	r3, [pc, #76]	@ (800dee8 <Check_Flag+0x120>)
 800de9c:	781b      	ldrb	r3, [r3, #0]
 800de9e:	2b61      	cmp	r3, #97	@ 0x61
 800dea0:	d106      	bne.n	800deb0 <Check_Flag+0xe8>
			count++;
 800dea2:	4b12      	ldr	r3, [pc, #72]	@ (800deec <Check_Flag+0x124>)
 800dea4:	781b      	ldrb	r3, [r3, #0]
 800dea6:	3301      	adds	r3, #1
 800dea8:	b2da      	uxtb	r2, r3
 800deaa:	4b10      	ldr	r3, [pc, #64]	@ (800deec <Check_Flag+0x124>)
 800deac:	701a      	strb	r2, [r3, #0]
		else
			count = 0;
		break;
 800deae:	e015      	b.n	800dedc <Check_Flag+0x114>
			count = 0;
 800deb0:	4b0e      	ldr	r3, [pc, #56]	@ (800deec <Check_Flag+0x124>)
 800deb2:	2200      	movs	r2, #0
 800deb4:	701a      	strb	r2, [r3, #0]
		break;
 800deb6:	e011      	b.n	800dedc <Check_Flag+0x114>
	case 5:
		if (ch == 't') {
 800deb8:	4b0b      	ldr	r3, [pc, #44]	@ (800dee8 <Check_Flag+0x120>)
 800deba:	781b      	ldrb	r3, [r3, #0]
 800debc:	2b74      	cmp	r3, #116	@ 0x74
 800debe:	d10c      	bne.n	800deda <Check_Flag+0x112>
			System_Flag = 1;
 800dec0:	4b0b      	ldr	r3, [pc, #44]	@ (800def0 <Check_Flag+0x128>)
 800dec2:	2201      	movs	r2, #1
 800dec4:	701a      	strb	r2, [r3, #0]
			count = 0;
 800dec6:	4b09      	ldr	r3, [pc, #36]	@ (800deec <Check_Flag+0x124>)
 800dec8:	2200      	movs	r2, #0
 800deca:	701a      	strb	r2, [r3, #0]
		}
		break;
 800decc:	e005      	b.n	800deda <Check_Flag+0x112>
	default:
		count = 0;
 800dece:	4b07      	ldr	r3, [pc, #28]	@ (800deec <Check_Flag+0x124>)
 800ded0:	2200      	movs	r2, #0
 800ded2:	701a      	strb	r2, [r3, #0]
		break;
 800ded4:	e002      	b.n	800dedc <Check_Flag+0x114>
		break;
 800ded6:	bf00      	nop
 800ded8:	e000      	b.n	800dedc <Check_Flag+0x114>
		break;
 800deda:	bf00      	nop
	}

}
 800dedc:	bf00      	nop
 800dede:	370c      	adds	r7, #12
 800dee0:	46bd      	mov	sp, r7
 800dee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dee6:	4770      	bx	lr
 800dee8:	24000cc0 	.word	0x24000cc0
 800deec:	24000cc1 	.word	0x24000cc1
 800def0:	24000cbe 	.word	0x24000cbe
 800def4:	24000cbf 	.word	0x24000cbf

0800def8 <Check_Status>:
	首先，在步进电机上电以后，需要进行调零，找到一个零位用来确定后面一切操作的参考点，因此5号步进电机设置为上电回零
	但是在比赛过程中，要求车身及其垂直投影部分在未发车前全部处于发车区域，这就要求爪子在发车前是在车体内侧的，同时爪子不能处于太高处，否则违规
	因此在Check_Status()函数用于在回零操作已完成后进行调整，以满足发车条件，
*/
uint8_t Check_Status(void)
{
 800def8:	b580      	push	{r7, lr}
 800defa:	af00      	add	r7, sp, #0
//  首先控制步进电机,回到零点
	Drop_Location_jiang(200, 120, 0);
 800defc:	2200      	movs	r2, #0
 800defe:	2178      	movs	r1, #120	@ 0x78
 800df00:	20c8      	movs	r0, #200	@ 0xc8
 800df02:	f7fe fd97 	bl	800ca34 <Drop_Location_jiang>
	Move_Arm(1, 50, 300);
 800df06:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800df0a:	2132      	movs	r1, #50	@ 0x32
 800df0c:	2001      	movs	r0, #1
 800df0e:	f7fd fa2d 	bl	800b36c <Move_Arm>
//  6号舵机900
	Move_Arm(6, 900, 300);
 800df12:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800df16:	f44f 7161 	mov.w	r1, #900	@ 0x384
 800df1a:	2006      	movs	r0, #6
 800df1c:	f7fd fa26 	bl	800b36c <Move_Arm>
//  旋转物料结构的支撑舵机
	FT_Servo_Zero(0);
 800df20:	2000      	movs	r0, #0
 800df22:	f000 f80c 	bl	800df3e <FT_Servo_Zero>
//  旋转爪子结构的支撑舵机
	FT_Servo_Zero(1);
 800df26:	2001      	movs	r0, #1
 800df28:	f000 f809 	bl	800df3e <FT_Servo_Zero>
//  步进电机下降,将位置调整为最最低点
	Drop_Location_jiang(200, 120, 9000);
 800df2c:	f242 3228 	movw	r2, #9000	@ 0x2328
 800df30:	2178      	movs	r1, #120	@ 0x78
 800df32:	20c8      	movs	r0, #200	@ 0xc8
 800df34:	f7fe fd7e 	bl	800ca34 <Drop_Location_jiang>
	return 1;
 800df38:	2301      	movs	r3, #1
}
 800df3a:	4618      	mov	r0, r3
 800df3c:	bd80      	pop	{r7, pc}

0800df3e <FT_Servo_Zero>:

// 将目标舵机回零
uint8_t FT_Servo_Zero(uint8_t Number)
{
 800df3e:	b580      	push	{r7, lr}
 800df40:	b082      	sub	sp, #8
 800df42:	af00      	add	r7, sp, #0
 800df44:	4603      	mov	r3, r0
 800df46:	71fb      	strb	r3, [r7, #7]
	if(Number == 0)
 800df48:	79fb      	ldrb	r3, [r7, #7]
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	d106      	bne.n	800df5c <FT_Servo_Zero+0x1e>
		WritePosEx(0, 0, 0, 0);
 800df4e:	2300      	movs	r3, #0
 800df50:	2200      	movs	r2, #0
 800df52:	2100      	movs	r1, #0
 800df54:	2000      	movs	r0, #0
 800df56:	f7ff fdb7 	bl	800dac8 <WritePosEx>
 800df5a:	e009      	b.n	800df70 <FT_Servo_Zero+0x32>
	else if (Number == 1)
 800df5c:	79fb      	ldrb	r3, [r7, #7]
 800df5e:	2b01      	cmp	r3, #1
 800df60:	d106      	bne.n	800df70 <FT_Servo_Zero+0x32>
		WritePosEx(1, 1020, 0, 0);
 800df62:	2300      	movs	r3, #0
 800df64:	2200      	movs	r2, #0
 800df66:	f44f 717f 	mov.w	r1, #1020	@ 0x3fc
 800df6a:	2001      	movs	r0, #1
 800df6c:	f7ff fdac 	bl	800dac8 <WritePosEx>
	return 1;
 800df70:	2301      	movs	r3, #1
}
 800df72:	4618      	mov	r0, r3
 800df74:	3708      	adds	r7, #8
 800df76:	46bd      	mov	sp, r7
 800df78:	bd80      	pop	{r7, pc}

0800df7a <FT_Servo_Orth>:

// 将爪子处飞特舵机调整为向外，正交于车身
uint8_t FT_Servo_Orth(void)
{
 800df7a:	b580      	push	{r7, lr}
 800df7c:	af00      	add	r7, sp, #0
	WritePosEx(1, 3087, 0, 0);
 800df7e:	2300      	movs	r3, #0
 800df80:	2200      	movs	r2, #0
 800df82:	f640 410f 	movw	r1, #3087	@ 0xc0f
 800df86:	2001      	movs	r0, #1
 800df88:	f7ff fd9e 	bl	800dac8 <WritePosEx>
	return 1;
 800df8c:	2301      	movs	r3, #1
}
 800df8e:	4618      	mov	r0, r3
 800df90:	bd80      	pop	{r7, pc}
	...

0800df94 <malloc>:
 800df94:	4b02      	ldr	r3, [pc, #8]	@ (800dfa0 <malloc+0xc>)
 800df96:	4601      	mov	r1, r0
 800df98:	6818      	ldr	r0, [r3, #0]
 800df9a:	f000 b825 	b.w	800dfe8 <_malloc_r>
 800df9e:	bf00      	nop
 800dfa0:	240001c4 	.word	0x240001c4

0800dfa4 <sbrk_aligned>:
 800dfa4:	b570      	push	{r4, r5, r6, lr}
 800dfa6:	4e0f      	ldr	r6, [pc, #60]	@ (800dfe4 <sbrk_aligned+0x40>)
 800dfa8:	460c      	mov	r4, r1
 800dfaa:	6831      	ldr	r1, [r6, #0]
 800dfac:	4605      	mov	r5, r0
 800dfae:	b911      	cbnz	r1, 800dfb6 <sbrk_aligned+0x12>
 800dfb0:	f001 fe52 	bl	800fc58 <_sbrk_r>
 800dfb4:	6030      	str	r0, [r6, #0]
 800dfb6:	4621      	mov	r1, r4
 800dfb8:	4628      	mov	r0, r5
 800dfba:	f001 fe4d 	bl	800fc58 <_sbrk_r>
 800dfbe:	1c43      	adds	r3, r0, #1
 800dfc0:	d103      	bne.n	800dfca <sbrk_aligned+0x26>
 800dfc2:	f04f 34ff 	mov.w	r4, #4294967295
 800dfc6:	4620      	mov	r0, r4
 800dfc8:	bd70      	pop	{r4, r5, r6, pc}
 800dfca:	1cc4      	adds	r4, r0, #3
 800dfcc:	f024 0403 	bic.w	r4, r4, #3
 800dfd0:	42a0      	cmp	r0, r4
 800dfd2:	d0f8      	beq.n	800dfc6 <sbrk_aligned+0x22>
 800dfd4:	1a21      	subs	r1, r4, r0
 800dfd6:	4628      	mov	r0, r5
 800dfd8:	f001 fe3e 	bl	800fc58 <_sbrk_r>
 800dfdc:	3001      	adds	r0, #1
 800dfde:	d1f2      	bne.n	800dfc6 <sbrk_aligned+0x22>
 800dfe0:	e7ef      	b.n	800dfc2 <sbrk_aligned+0x1e>
 800dfe2:	bf00      	nop
 800dfe4:	24000cc4 	.word	0x24000cc4

0800dfe8 <_malloc_r>:
 800dfe8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dfec:	1ccd      	adds	r5, r1, #3
 800dfee:	f025 0503 	bic.w	r5, r5, #3
 800dff2:	3508      	adds	r5, #8
 800dff4:	2d0c      	cmp	r5, #12
 800dff6:	bf38      	it	cc
 800dff8:	250c      	movcc	r5, #12
 800dffa:	2d00      	cmp	r5, #0
 800dffc:	4606      	mov	r6, r0
 800dffe:	db01      	blt.n	800e004 <_malloc_r+0x1c>
 800e000:	42a9      	cmp	r1, r5
 800e002:	d904      	bls.n	800e00e <_malloc_r+0x26>
 800e004:	230c      	movs	r3, #12
 800e006:	6033      	str	r3, [r6, #0]
 800e008:	2000      	movs	r0, #0
 800e00a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e00e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e0e4 <_malloc_r+0xfc>
 800e012:	f000 f869 	bl	800e0e8 <__malloc_lock>
 800e016:	f8d8 3000 	ldr.w	r3, [r8]
 800e01a:	461c      	mov	r4, r3
 800e01c:	bb44      	cbnz	r4, 800e070 <_malloc_r+0x88>
 800e01e:	4629      	mov	r1, r5
 800e020:	4630      	mov	r0, r6
 800e022:	f7ff ffbf 	bl	800dfa4 <sbrk_aligned>
 800e026:	1c43      	adds	r3, r0, #1
 800e028:	4604      	mov	r4, r0
 800e02a:	d158      	bne.n	800e0de <_malloc_r+0xf6>
 800e02c:	f8d8 4000 	ldr.w	r4, [r8]
 800e030:	4627      	mov	r7, r4
 800e032:	2f00      	cmp	r7, #0
 800e034:	d143      	bne.n	800e0be <_malloc_r+0xd6>
 800e036:	2c00      	cmp	r4, #0
 800e038:	d04b      	beq.n	800e0d2 <_malloc_r+0xea>
 800e03a:	6823      	ldr	r3, [r4, #0]
 800e03c:	4639      	mov	r1, r7
 800e03e:	4630      	mov	r0, r6
 800e040:	eb04 0903 	add.w	r9, r4, r3
 800e044:	f001 fe08 	bl	800fc58 <_sbrk_r>
 800e048:	4581      	cmp	r9, r0
 800e04a:	d142      	bne.n	800e0d2 <_malloc_r+0xea>
 800e04c:	6821      	ldr	r1, [r4, #0]
 800e04e:	1a6d      	subs	r5, r5, r1
 800e050:	4629      	mov	r1, r5
 800e052:	4630      	mov	r0, r6
 800e054:	f7ff ffa6 	bl	800dfa4 <sbrk_aligned>
 800e058:	3001      	adds	r0, #1
 800e05a:	d03a      	beq.n	800e0d2 <_malloc_r+0xea>
 800e05c:	6823      	ldr	r3, [r4, #0]
 800e05e:	442b      	add	r3, r5
 800e060:	6023      	str	r3, [r4, #0]
 800e062:	f8d8 3000 	ldr.w	r3, [r8]
 800e066:	685a      	ldr	r2, [r3, #4]
 800e068:	bb62      	cbnz	r2, 800e0c4 <_malloc_r+0xdc>
 800e06a:	f8c8 7000 	str.w	r7, [r8]
 800e06e:	e00f      	b.n	800e090 <_malloc_r+0xa8>
 800e070:	6822      	ldr	r2, [r4, #0]
 800e072:	1b52      	subs	r2, r2, r5
 800e074:	d420      	bmi.n	800e0b8 <_malloc_r+0xd0>
 800e076:	2a0b      	cmp	r2, #11
 800e078:	d917      	bls.n	800e0aa <_malloc_r+0xc2>
 800e07a:	1961      	adds	r1, r4, r5
 800e07c:	42a3      	cmp	r3, r4
 800e07e:	6025      	str	r5, [r4, #0]
 800e080:	bf18      	it	ne
 800e082:	6059      	strne	r1, [r3, #4]
 800e084:	6863      	ldr	r3, [r4, #4]
 800e086:	bf08      	it	eq
 800e088:	f8c8 1000 	streq.w	r1, [r8]
 800e08c:	5162      	str	r2, [r4, r5]
 800e08e:	604b      	str	r3, [r1, #4]
 800e090:	4630      	mov	r0, r6
 800e092:	f000 f82f 	bl	800e0f4 <__malloc_unlock>
 800e096:	f104 000b 	add.w	r0, r4, #11
 800e09a:	1d23      	adds	r3, r4, #4
 800e09c:	f020 0007 	bic.w	r0, r0, #7
 800e0a0:	1ac2      	subs	r2, r0, r3
 800e0a2:	bf1c      	itt	ne
 800e0a4:	1a1b      	subne	r3, r3, r0
 800e0a6:	50a3      	strne	r3, [r4, r2]
 800e0a8:	e7af      	b.n	800e00a <_malloc_r+0x22>
 800e0aa:	6862      	ldr	r2, [r4, #4]
 800e0ac:	42a3      	cmp	r3, r4
 800e0ae:	bf0c      	ite	eq
 800e0b0:	f8c8 2000 	streq.w	r2, [r8]
 800e0b4:	605a      	strne	r2, [r3, #4]
 800e0b6:	e7eb      	b.n	800e090 <_malloc_r+0xa8>
 800e0b8:	4623      	mov	r3, r4
 800e0ba:	6864      	ldr	r4, [r4, #4]
 800e0bc:	e7ae      	b.n	800e01c <_malloc_r+0x34>
 800e0be:	463c      	mov	r4, r7
 800e0c0:	687f      	ldr	r7, [r7, #4]
 800e0c2:	e7b6      	b.n	800e032 <_malloc_r+0x4a>
 800e0c4:	461a      	mov	r2, r3
 800e0c6:	685b      	ldr	r3, [r3, #4]
 800e0c8:	42a3      	cmp	r3, r4
 800e0ca:	d1fb      	bne.n	800e0c4 <_malloc_r+0xdc>
 800e0cc:	2300      	movs	r3, #0
 800e0ce:	6053      	str	r3, [r2, #4]
 800e0d0:	e7de      	b.n	800e090 <_malloc_r+0xa8>
 800e0d2:	230c      	movs	r3, #12
 800e0d4:	6033      	str	r3, [r6, #0]
 800e0d6:	4630      	mov	r0, r6
 800e0d8:	f000 f80c 	bl	800e0f4 <__malloc_unlock>
 800e0dc:	e794      	b.n	800e008 <_malloc_r+0x20>
 800e0de:	6005      	str	r5, [r0, #0]
 800e0e0:	e7d6      	b.n	800e090 <_malloc_r+0xa8>
 800e0e2:	bf00      	nop
 800e0e4:	24000cc8 	.word	0x24000cc8

0800e0e8 <__malloc_lock>:
 800e0e8:	4801      	ldr	r0, [pc, #4]	@ (800e0f0 <__malloc_lock+0x8>)
 800e0ea:	f001 be02 	b.w	800fcf2 <__retarget_lock_acquire_recursive>
 800e0ee:	bf00      	nop
 800e0f0:	24000e0c 	.word	0x24000e0c

0800e0f4 <__malloc_unlock>:
 800e0f4:	4801      	ldr	r0, [pc, #4]	@ (800e0fc <__malloc_unlock+0x8>)
 800e0f6:	f001 bdfd 	b.w	800fcf4 <__retarget_lock_release_recursive>
 800e0fa:	bf00      	nop
 800e0fc:	24000e0c 	.word	0x24000e0c

0800e100 <sulp>:
 800e100:	b570      	push	{r4, r5, r6, lr}
 800e102:	4604      	mov	r4, r0
 800e104:	460d      	mov	r5, r1
 800e106:	4616      	mov	r6, r2
 800e108:	ec45 4b10 	vmov	d0, r4, r5
 800e10c:	f003 fafc 	bl	8011708 <__ulp>
 800e110:	b17e      	cbz	r6, 800e132 <sulp+0x32>
 800e112:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800e116:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800e11a:	2b00      	cmp	r3, #0
 800e11c:	dd09      	ble.n	800e132 <sulp+0x32>
 800e11e:	051b      	lsls	r3, r3, #20
 800e120:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 800e124:	2000      	movs	r0, #0
 800e126:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 800e12a:	ec41 0b17 	vmov	d7, r0, r1
 800e12e:	ee20 0b07 	vmul.f64	d0, d0, d7
 800e132:	bd70      	pop	{r4, r5, r6, pc}
 800e134:	0000      	movs	r0, r0
	...

0800e138 <_strtod_l>:
 800e138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e13c:	ed2d 8b0a 	vpush	{d8-d12}
 800e140:	b097      	sub	sp, #92	@ 0x5c
 800e142:	4688      	mov	r8, r1
 800e144:	920e      	str	r2, [sp, #56]	@ 0x38
 800e146:	2200      	movs	r2, #0
 800e148:	9212      	str	r2, [sp, #72]	@ 0x48
 800e14a:	9005      	str	r0, [sp, #20]
 800e14c:	f04f 0a00 	mov.w	sl, #0
 800e150:	f04f 0b00 	mov.w	fp, #0
 800e154:	460a      	mov	r2, r1
 800e156:	9211      	str	r2, [sp, #68]	@ 0x44
 800e158:	7811      	ldrb	r1, [r2, #0]
 800e15a:	292b      	cmp	r1, #43	@ 0x2b
 800e15c:	d04c      	beq.n	800e1f8 <_strtod_l+0xc0>
 800e15e:	d839      	bhi.n	800e1d4 <_strtod_l+0x9c>
 800e160:	290d      	cmp	r1, #13
 800e162:	d833      	bhi.n	800e1cc <_strtod_l+0x94>
 800e164:	2908      	cmp	r1, #8
 800e166:	d833      	bhi.n	800e1d0 <_strtod_l+0x98>
 800e168:	2900      	cmp	r1, #0
 800e16a:	d03c      	beq.n	800e1e6 <_strtod_l+0xae>
 800e16c:	2200      	movs	r2, #0
 800e16e:	9208      	str	r2, [sp, #32]
 800e170:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 800e172:	782a      	ldrb	r2, [r5, #0]
 800e174:	2a30      	cmp	r2, #48	@ 0x30
 800e176:	f040 80b5 	bne.w	800e2e4 <_strtod_l+0x1ac>
 800e17a:	786a      	ldrb	r2, [r5, #1]
 800e17c:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800e180:	2a58      	cmp	r2, #88	@ 0x58
 800e182:	d170      	bne.n	800e266 <_strtod_l+0x12e>
 800e184:	9302      	str	r3, [sp, #8]
 800e186:	9b08      	ldr	r3, [sp, #32]
 800e188:	9301      	str	r3, [sp, #4]
 800e18a:	ab12      	add	r3, sp, #72	@ 0x48
 800e18c:	9300      	str	r3, [sp, #0]
 800e18e:	4a8b      	ldr	r2, [pc, #556]	@ (800e3bc <_strtod_l+0x284>)
 800e190:	9805      	ldr	r0, [sp, #20]
 800e192:	ab13      	add	r3, sp, #76	@ 0x4c
 800e194:	a911      	add	r1, sp, #68	@ 0x44
 800e196:	f002 fc5f 	bl	8010a58 <__gethex>
 800e19a:	f010 060f 	ands.w	r6, r0, #15
 800e19e:	4604      	mov	r4, r0
 800e1a0:	d005      	beq.n	800e1ae <_strtod_l+0x76>
 800e1a2:	2e06      	cmp	r6, #6
 800e1a4:	d12a      	bne.n	800e1fc <_strtod_l+0xc4>
 800e1a6:	3501      	adds	r5, #1
 800e1a8:	2300      	movs	r3, #0
 800e1aa:	9511      	str	r5, [sp, #68]	@ 0x44
 800e1ac:	9308      	str	r3, [sp, #32]
 800e1ae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	f040 852f 	bne.w	800ec14 <_strtod_l+0xadc>
 800e1b6:	9b08      	ldr	r3, [sp, #32]
 800e1b8:	ec4b ab10 	vmov	d0, sl, fp
 800e1bc:	b1cb      	cbz	r3, 800e1f2 <_strtod_l+0xba>
 800e1be:	eeb1 0b40 	vneg.f64	d0, d0
 800e1c2:	b017      	add	sp, #92	@ 0x5c
 800e1c4:	ecbd 8b0a 	vpop	{d8-d12}
 800e1c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e1cc:	2920      	cmp	r1, #32
 800e1ce:	d1cd      	bne.n	800e16c <_strtod_l+0x34>
 800e1d0:	3201      	adds	r2, #1
 800e1d2:	e7c0      	b.n	800e156 <_strtod_l+0x1e>
 800e1d4:	292d      	cmp	r1, #45	@ 0x2d
 800e1d6:	d1c9      	bne.n	800e16c <_strtod_l+0x34>
 800e1d8:	2101      	movs	r1, #1
 800e1da:	9108      	str	r1, [sp, #32]
 800e1dc:	1c51      	adds	r1, r2, #1
 800e1de:	9111      	str	r1, [sp, #68]	@ 0x44
 800e1e0:	7852      	ldrb	r2, [r2, #1]
 800e1e2:	2a00      	cmp	r2, #0
 800e1e4:	d1c4      	bne.n	800e170 <_strtod_l+0x38>
 800e1e6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e1e8:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	f040 850f 	bne.w	800ec10 <_strtod_l+0xad8>
 800e1f2:	ec4b ab10 	vmov	d0, sl, fp
 800e1f6:	e7e4      	b.n	800e1c2 <_strtod_l+0x8a>
 800e1f8:	2100      	movs	r1, #0
 800e1fa:	e7ee      	b.n	800e1da <_strtod_l+0xa2>
 800e1fc:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800e1fe:	b13a      	cbz	r2, 800e210 <_strtod_l+0xd8>
 800e200:	2135      	movs	r1, #53	@ 0x35
 800e202:	a814      	add	r0, sp, #80	@ 0x50
 800e204:	f003 fb77 	bl	80118f6 <__copybits>
 800e208:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800e20a:	9805      	ldr	r0, [sp, #20]
 800e20c:	f002 ff48 	bl	80110a0 <_Bfree>
 800e210:	1e73      	subs	r3, r6, #1
 800e212:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800e214:	2b04      	cmp	r3, #4
 800e216:	d806      	bhi.n	800e226 <_strtod_l+0xee>
 800e218:	e8df f003 	tbb	[pc, r3]
 800e21c:	201d0314 	.word	0x201d0314
 800e220:	14          	.byte	0x14
 800e221:	00          	.byte	0x00
 800e222:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 800e226:	05e3      	lsls	r3, r4, #23
 800e228:	bf48      	it	mi
 800e22a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800e22e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e232:	0d1b      	lsrs	r3, r3, #20
 800e234:	051b      	lsls	r3, r3, #20
 800e236:	2b00      	cmp	r3, #0
 800e238:	d1b9      	bne.n	800e1ae <_strtod_l+0x76>
 800e23a:	f001 fd2f 	bl	800fc9c <__errno>
 800e23e:	2322      	movs	r3, #34	@ 0x22
 800e240:	6003      	str	r3, [r0, #0]
 800e242:	e7b4      	b.n	800e1ae <_strtod_l+0x76>
 800e244:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 800e248:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800e24c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800e250:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800e254:	e7e7      	b.n	800e226 <_strtod_l+0xee>
 800e256:	f8df b16c 	ldr.w	fp, [pc, #364]	@ 800e3c4 <_strtod_l+0x28c>
 800e25a:	e7e4      	b.n	800e226 <_strtod_l+0xee>
 800e25c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800e260:	f04f 3aff 	mov.w	sl, #4294967295
 800e264:	e7df      	b.n	800e226 <_strtod_l+0xee>
 800e266:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e268:	1c5a      	adds	r2, r3, #1
 800e26a:	9211      	str	r2, [sp, #68]	@ 0x44
 800e26c:	785b      	ldrb	r3, [r3, #1]
 800e26e:	2b30      	cmp	r3, #48	@ 0x30
 800e270:	d0f9      	beq.n	800e266 <_strtod_l+0x12e>
 800e272:	2b00      	cmp	r3, #0
 800e274:	d09b      	beq.n	800e1ae <_strtod_l+0x76>
 800e276:	2301      	movs	r3, #1
 800e278:	2600      	movs	r6, #0
 800e27a:	9307      	str	r3, [sp, #28]
 800e27c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e27e:	930a      	str	r3, [sp, #40]	@ 0x28
 800e280:	46b1      	mov	r9, r6
 800e282:	4635      	mov	r5, r6
 800e284:	220a      	movs	r2, #10
 800e286:	9811      	ldr	r0, [sp, #68]	@ 0x44
 800e288:	7804      	ldrb	r4, [r0, #0]
 800e28a:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 800e28e:	b2d9      	uxtb	r1, r3
 800e290:	2909      	cmp	r1, #9
 800e292:	d929      	bls.n	800e2e8 <_strtod_l+0x1b0>
 800e294:	494a      	ldr	r1, [pc, #296]	@ (800e3c0 <_strtod_l+0x288>)
 800e296:	2201      	movs	r2, #1
 800e298:	f001 fc94 	bl	800fbc4 <strncmp>
 800e29c:	b378      	cbz	r0, 800e2fe <_strtod_l+0x1c6>
 800e29e:	2000      	movs	r0, #0
 800e2a0:	4622      	mov	r2, r4
 800e2a2:	462b      	mov	r3, r5
 800e2a4:	4607      	mov	r7, r0
 800e2a6:	9006      	str	r0, [sp, #24]
 800e2a8:	2a65      	cmp	r2, #101	@ 0x65
 800e2aa:	d001      	beq.n	800e2b0 <_strtod_l+0x178>
 800e2ac:	2a45      	cmp	r2, #69	@ 0x45
 800e2ae:	d117      	bne.n	800e2e0 <_strtod_l+0x1a8>
 800e2b0:	b91b      	cbnz	r3, 800e2ba <_strtod_l+0x182>
 800e2b2:	9b07      	ldr	r3, [sp, #28]
 800e2b4:	4303      	orrs	r3, r0
 800e2b6:	d096      	beq.n	800e1e6 <_strtod_l+0xae>
 800e2b8:	2300      	movs	r3, #0
 800e2ba:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 800e2be:	f108 0201 	add.w	r2, r8, #1
 800e2c2:	9211      	str	r2, [sp, #68]	@ 0x44
 800e2c4:	f898 2001 	ldrb.w	r2, [r8, #1]
 800e2c8:	2a2b      	cmp	r2, #43	@ 0x2b
 800e2ca:	d06b      	beq.n	800e3a4 <_strtod_l+0x26c>
 800e2cc:	2a2d      	cmp	r2, #45	@ 0x2d
 800e2ce:	d071      	beq.n	800e3b4 <_strtod_l+0x27c>
 800e2d0:	f04f 0e00 	mov.w	lr, #0
 800e2d4:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 800e2d8:	2c09      	cmp	r4, #9
 800e2da:	d979      	bls.n	800e3d0 <_strtod_l+0x298>
 800e2dc:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 800e2e0:	2400      	movs	r4, #0
 800e2e2:	e094      	b.n	800e40e <_strtod_l+0x2d6>
 800e2e4:	2300      	movs	r3, #0
 800e2e6:	e7c7      	b.n	800e278 <_strtod_l+0x140>
 800e2e8:	2d08      	cmp	r5, #8
 800e2ea:	f100 0001 	add.w	r0, r0, #1
 800e2ee:	bfd4      	ite	le
 800e2f0:	fb02 3909 	mlale	r9, r2, r9, r3
 800e2f4:	fb02 3606 	mlagt	r6, r2, r6, r3
 800e2f8:	3501      	adds	r5, #1
 800e2fa:	9011      	str	r0, [sp, #68]	@ 0x44
 800e2fc:	e7c3      	b.n	800e286 <_strtod_l+0x14e>
 800e2fe:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e300:	1c5a      	adds	r2, r3, #1
 800e302:	9211      	str	r2, [sp, #68]	@ 0x44
 800e304:	785a      	ldrb	r2, [r3, #1]
 800e306:	b375      	cbz	r5, 800e366 <_strtod_l+0x22e>
 800e308:	4607      	mov	r7, r0
 800e30a:	462b      	mov	r3, r5
 800e30c:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800e310:	2909      	cmp	r1, #9
 800e312:	d913      	bls.n	800e33c <_strtod_l+0x204>
 800e314:	2101      	movs	r1, #1
 800e316:	9106      	str	r1, [sp, #24]
 800e318:	e7c6      	b.n	800e2a8 <_strtod_l+0x170>
 800e31a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e31c:	1c5a      	adds	r2, r3, #1
 800e31e:	9211      	str	r2, [sp, #68]	@ 0x44
 800e320:	785a      	ldrb	r2, [r3, #1]
 800e322:	3001      	adds	r0, #1
 800e324:	2a30      	cmp	r2, #48	@ 0x30
 800e326:	d0f8      	beq.n	800e31a <_strtod_l+0x1e2>
 800e328:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800e32c:	2b08      	cmp	r3, #8
 800e32e:	f200 8476 	bhi.w	800ec1e <_strtod_l+0xae6>
 800e332:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e334:	930a      	str	r3, [sp, #40]	@ 0x28
 800e336:	4607      	mov	r7, r0
 800e338:	2000      	movs	r0, #0
 800e33a:	4603      	mov	r3, r0
 800e33c:	3a30      	subs	r2, #48	@ 0x30
 800e33e:	f100 0101 	add.w	r1, r0, #1
 800e342:	d023      	beq.n	800e38c <_strtod_l+0x254>
 800e344:	440f      	add	r7, r1
 800e346:	eb00 0c03 	add.w	ip, r0, r3
 800e34a:	4619      	mov	r1, r3
 800e34c:	240a      	movs	r4, #10
 800e34e:	4561      	cmp	r1, ip
 800e350:	d10b      	bne.n	800e36a <_strtod_l+0x232>
 800e352:	1c5c      	adds	r4, r3, #1
 800e354:	4403      	add	r3, r0
 800e356:	2b08      	cmp	r3, #8
 800e358:	4404      	add	r4, r0
 800e35a:	dc11      	bgt.n	800e380 <_strtod_l+0x248>
 800e35c:	230a      	movs	r3, #10
 800e35e:	fb03 2909 	mla	r9, r3, r9, r2
 800e362:	2100      	movs	r1, #0
 800e364:	e013      	b.n	800e38e <_strtod_l+0x256>
 800e366:	4628      	mov	r0, r5
 800e368:	e7dc      	b.n	800e324 <_strtod_l+0x1ec>
 800e36a:	2908      	cmp	r1, #8
 800e36c:	f101 0101 	add.w	r1, r1, #1
 800e370:	dc02      	bgt.n	800e378 <_strtod_l+0x240>
 800e372:	fb04 f909 	mul.w	r9, r4, r9
 800e376:	e7ea      	b.n	800e34e <_strtod_l+0x216>
 800e378:	2910      	cmp	r1, #16
 800e37a:	bfd8      	it	le
 800e37c:	4366      	mulle	r6, r4
 800e37e:	e7e6      	b.n	800e34e <_strtod_l+0x216>
 800e380:	2b0f      	cmp	r3, #15
 800e382:	dcee      	bgt.n	800e362 <_strtod_l+0x22a>
 800e384:	230a      	movs	r3, #10
 800e386:	fb03 2606 	mla	r6, r3, r6, r2
 800e38a:	e7ea      	b.n	800e362 <_strtod_l+0x22a>
 800e38c:	461c      	mov	r4, r3
 800e38e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e390:	1c5a      	adds	r2, r3, #1
 800e392:	9211      	str	r2, [sp, #68]	@ 0x44
 800e394:	785a      	ldrb	r2, [r3, #1]
 800e396:	4608      	mov	r0, r1
 800e398:	4623      	mov	r3, r4
 800e39a:	e7b7      	b.n	800e30c <_strtod_l+0x1d4>
 800e39c:	2301      	movs	r3, #1
 800e39e:	2700      	movs	r7, #0
 800e3a0:	9306      	str	r3, [sp, #24]
 800e3a2:	e786      	b.n	800e2b2 <_strtod_l+0x17a>
 800e3a4:	f04f 0e00 	mov.w	lr, #0
 800e3a8:	f108 0202 	add.w	r2, r8, #2
 800e3ac:	9211      	str	r2, [sp, #68]	@ 0x44
 800e3ae:	f898 2002 	ldrb.w	r2, [r8, #2]
 800e3b2:	e78f      	b.n	800e2d4 <_strtod_l+0x19c>
 800e3b4:	f04f 0e01 	mov.w	lr, #1
 800e3b8:	e7f6      	b.n	800e3a8 <_strtod_l+0x270>
 800e3ba:	bf00      	nop
 800e3bc:	08012e68 	.word	0x08012e68
 800e3c0:	08012e50 	.word	0x08012e50
 800e3c4:	7ff00000 	.word	0x7ff00000
 800e3c8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800e3ca:	1c54      	adds	r4, r2, #1
 800e3cc:	9411      	str	r4, [sp, #68]	@ 0x44
 800e3ce:	7852      	ldrb	r2, [r2, #1]
 800e3d0:	2a30      	cmp	r2, #48	@ 0x30
 800e3d2:	d0f9      	beq.n	800e3c8 <_strtod_l+0x290>
 800e3d4:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 800e3d8:	2c08      	cmp	r4, #8
 800e3da:	d881      	bhi.n	800e2e0 <_strtod_l+0x1a8>
 800e3dc:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 800e3e0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800e3e2:	9209      	str	r2, [sp, #36]	@ 0x24
 800e3e4:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800e3e6:	1c51      	adds	r1, r2, #1
 800e3e8:	9111      	str	r1, [sp, #68]	@ 0x44
 800e3ea:	7852      	ldrb	r2, [r2, #1]
 800e3ec:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 800e3f0:	2c09      	cmp	r4, #9
 800e3f2:	d938      	bls.n	800e466 <_strtod_l+0x32e>
 800e3f4:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 800e3f6:	1b0c      	subs	r4, r1, r4
 800e3f8:	2c08      	cmp	r4, #8
 800e3fa:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 800e3fe:	dc02      	bgt.n	800e406 <_strtod_l+0x2ce>
 800e400:	4564      	cmp	r4, ip
 800e402:	bfa8      	it	ge
 800e404:	4664      	movge	r4, ip
 800e406:	f1be 0f00 	cmp.w	lr, #0
 800e40a:	d000      	beq.n	800e40e <_strtod_l+0x2d6>
 800e40c:	4264      	negs	r4, r4
 800e40e:	2b00      	cmp	r3, #0
 800e410:	d14e      	bne.n	800e4b0 <_strtod_l+0x378>
 800e412:	9b07      	ldr	r3, [sp, #28]
 800e414:	4318      	orrs	r0, r3
 800e416:	f47f aeca 	bne.w	800e1ae <_strtod_l+0x76>
 800e41a:	9b06      	ldr	r3, [sp, #24]
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	f47f aee2 	bne.w	800e1e6 <_strtod_l+0xae>
 800e422:	2a69      	cmp	r2, #105	@ 0x69
 800e424:	d027      	beq.n	800e476 <_strtod_l+0x33e>
 800e426:	dc24      	bgt.n	800e472 <_strtod_l+0x33a>
 800e428:	2a49      	cmp	r2, #73	@ 0x49
 800e42a:	d024      	beq.n	800e476 <_strtod_l+0x33e>
 800e42c:	2a4e      	cmp	r2, #78	@ 0x4e
 800e42e:	f47f aeda 	bne.w	800e1e6 <_strtod_l+0xae>
 800e432:	4997      	ldr	r1, [pc, #604]	@ (800e690 <_strtod_l+0x558>)
 800e434:	a811      	add	r0, sp, #68	@ 0x44
 800e436:	f002 fd31 	bl	8010e9c <__match>
 800e43a:	2800      	cmp	r0, #0
 800e43c:	f43f aed3 	beq.w	800e1e6 <_strtod_l+0xae>
 800e440:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e442:	781b      	ldrb	r3, [r3, #0]
 800e444:	2b28      	cmp	r3, #40	@ 0x28
 800e446:	d12d      	bne.n	800e4a4 <_strtod_l+0x36c>
 800e448:	4992      	ldr	r1, [pc, #584]	@ (800e694 <_strtod_l+0x55c>)
 800e44a:	aa14      	add	r2, sp, #80	@ 0x50
 800e44c:	a811      	add	r0, sp, #68	@ 0x44
 800e44e:	f002 fd39 	bl	8010ec4 <__hexnan>
 800e452:	2805      	cmp	r0, #5
 800e454:	d126      	bne.n	800e4a4 <_strtod_l+0x36c>
 800e456:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800e458:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 800e45c:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800e460:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800e464:	e6a3      	b.n	800e1ae <_strtod_l+0x76>
 800e466:	240a      	movs	r4, #10
 800e468:	fb04 2c0c 	mla	ip, r4, ip, r2
 800e46c:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 800e470:	e7b8      	b.n	800e3e4 <_strtod_l+0x2ac>
 800e472:	2a6e      	cmp	r2, #110	@ 0x6e
 800e474:	e7db      	b.n	800e42e <_strtod_l+0x2f6>
 800e476:	4988      	ldr	r1, [pc, #544]	@ (800e698 <_strtod_l+0x560>)
 800e478:	a811      	add	r0, sp, #68	@ 0x44
 800e47a:	f002 fd0f 	bl	8010e9c <__match>
 800e47e:	2800      	cmp	r0, #0
 800e480:	f43f aeb1 	beq.w	800e1e6 <_strtod_l+0xae>
 800e484:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e486:	4985      	ldr	r1, [pc, #532]	@ (800e69c <_strtod_l+0x564>)
 800e488:	3b01      	subs	r3, #1
 800e48a:	a811      	add	r0, sp, #68	@ 0x44
 800e48c:	9311      	str	r3, [sp, #68]	@ 0x44
 800e48e:	f002 fd05 	bl	8010e9c <__match>
 800e492:	b910      	cbnz	r0, 800e49a <_strtod_l+0x362>
 800e494:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e496:	3301      	adds	r3, #1
 800e498:	9311      	str	r3, [sp, #68]	@ 0x44
 800e49a:	f8df b214 	ldr.w	fp, [pc, #532]	@ 800e6b0 <_strtod_l+0x578>
 800e49e:	f04f 0a00 	mov.w	sl, #0
 800e4a2:	e684      	b.n	800e1ae <_strtod_l+0x76>
 800e4a4:	487e      	ldr	r0, [pc, #504]	@ (800e6a0 <_strtod_l+0x568>)
 800e4a6:	f001 fc37 	bl	800fd18 <nan>
 800e4aa:	ec5b ab10 	vmov	sl, fp, d0
 800e4ae:	e67e      	b.n	800e1ae <_strtod_l+0x76>
 800e4b0:	ee07 9a90 	vmov	s15, r9
 800e4b4:	1be2      	subs	r2, r4, r7
 800e4b6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800e4ba:	2d00      	cmp	r5, #0
 800e4bc:	bf08      	it	eq
 800e4be:	461d      	moveq	r5, r3
 800e4c0:	2b10      	cmp	r3, #16
 800e4c2:	9209      	str	r2, [sp, #36]	@ 0x24
 800e4c4:	461a      	mov	r2, r3
 800e4c6:	bfa8      	it	ge
 800e4c8:	2210      	movge	r2, #16
 800e4ca:	2b09      	cmp	r3, #9
 800e4cc:	ec5b ab17 	vmov	sl, fp, d7
 800e4d0:	dc15      	bgt.n	800e4fe <_strtod_l+0x3c6>
 800e4d2:	1be1      	subs	r1, r4, r7
 800e4d4:	2900      	cmp	r1, #0
 800e4d6:	f43f ae6a 	beq.w	800e1ae <_strtod_l+0x76>
 800e4da:	eba4 0107 	sub.w	r1, r4, r7
 800e4de:	dd72      	ble.n	800e5c6 <_strtod_l+0x48e>
 800e4e0:	2916      	cmp	r1, #22
 800e4e2:	dc59      	bgt.n	800e598 <_strtod_l+0x460>
 800e4e4:	4b6f      	ldr	r3, [pc, #444]	@ (800e6a4 <_strtod_l+0x56c>)
 800e4e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e4e8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e4ec:	ed93 7b00 	vldr	d7, [r3]
 800e4f0:	ec4b ab16 	vmov	d6, sl, fp
 800e4f4:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e4f8:	ec5b ab17 	vmov	sl, fp, d7
 800e4fc:	e657      	b.n	800e1ae <_strtod_l+0x76>
 800e4fe:	4969      	ldr	r1, [pc, #420]	@ (800e6a4 <_strtod_l+0x56c>)
 800e500:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800e504:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 800e508:	ee06 6a90 	vmov	s13, r6
 800e50c:	2b0f      	cmp	r3, #15
 800e50e:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 800e512:	eea7 6b05 	vfma.f64	d6, d7, d5
 800e516:	ec5b ab16 	vmov	sl, fp, d6
 800e51a:	ddda      	ble.n	800e4d2 <_strtod_l+0x39a>
 800e51c:	1a9a      	subs	r2, r3, r2
 800e51e:	1be1      	subs	r1, r4, r7
 800e520:	440a      	add	r2, r1
 800e522:	2a00      	cmp	r2, #0
 800e524:	f340 8094 	ble.w	800e650 <_strtod_l+0x518>
 800e528:	f012 000f 	ands.w	r0, r2, #15
 800e52c:	d00a      	beq.n	800e544 <_strtod_l+0x40c>
 800e52e:	495d      	ldr	r1, [pc, #372]	@ (800e6a4 <_strtod_l+0x56c>)
 800e530:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800e534:	ed91 7b00 	vldr	d7, [r1]
 800e538:	ec4b ab16 	vmov	d6, sl, fp
 800e53c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e540:	ec5b ab17 	vmov	sl, fp, d7
 800e544:	f032 020f 	bics.w	r2, r2, #15
 800e548:	d073      	beq.n	800e632 <_strtod_l+0x4fa>
 800e54a:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 800e54e:	dd47      	ble.n	800e5e0 <_strtod_l+0x4a8>
 800e550:	2400      	movs	r4, #0
 800e552:	4625      	mov	r5, r4
 800e554:	9407      	str	r4, [sp, #28]
 800e556:	4626      	mov	r6, r4
 800e558:	9a05      	ldr	r2, [sp, #20]
 800e55a:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800e6b0 <_strtod_l+0x578>
 800e55e:	2322      	movs	r3, #34	@ 0x22
 800e560:	6013      	str	r3, [r2, #0]
 800e562:	f04f 0a00 	mov.w	sl, #0
 800e566:	9b07      	ldr	r3, [sp, #28]
 800e568:	2b00      	cmp	r3, #0
 800e56a:	f43f ae20 	beq.w	800e1ae <_strtod_l+0x76>
 800e56e:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800e570:	9805      	ldr	r0, [sp, #20]
 800e572:	f002 fd95 	bl	80110a0 <_Bfree>
 800e576:	9805      	ldr	r0, [sp, #20]
 800e578:	4631      	mov	r1, r6
 800e57a:	f002 fd91 	bl	80110a0 <_Bfree>
 800e57e:	9805      	ldr	r0, [sp, #20]
 800e580:	4629      	mov	r1, r5
 800e582:	f002 fd8d 	bl	80110a0 <_Bfree>
 800e586:	9907      	ldr	r1, [sp, #28]
 800e588:	9805      	ldr	r0, [sp, #20]
 800e58a:	f002 fd89 	bl	80110a0 <_Bfree>
 800e58e:	9805      	ldr	r0, [sp, #20]
 800e590:	4621      	mov	r1, r4
 800e592:	f002 fd85 	bl	80110a0 <_Bfree>
 800e596:	e60a      	b.n	800e1ae <_strtod_l+0x76>
 800e598:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 800e59c:	1be0      	subs	r0, r4, r7
 800e59e:	4281      	cmp	r1, r0
 800e5a0:	dbbc      	blt.n	800e51c <_strtod_l+0x3e4>
 800e5a2:	4a40      	ldr	r2, [pc, #256]	@ (800e6a4 <_strtod_l+0x56c>)
 800e5a4:	f1c3 030f 	rsb	r3, r3, #15
 800e5a8:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800e5ac:	ed91 7b00 	vldr	d7, [r1]
 800e5b0:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e5b2:	ec4b ab16 	vmov	d6, sl, fp
 800e5b6:	1acb      	subs	r3, r1, r3
 800e5b8:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800e5bc:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e5c0:	ed92 6b00 	vldr	d6, [r2]
 800e5c4:	e796      	b.n	800e4f4 <_strtod_l+0x3bc>
 800e5c6:	3116      	adds	r1, #22
 800e5c8:	dba8      	blt.n	800e51c <_strtod_l+0x3e4>
 800e5ca:	4b36      	ldr	r3, [pc, #216]	@ (800e6a4 <_strtod_l+0x56c>)
 800e5cc:	1b3c      	subs	r4, r7, r4
 800e5ce:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800e5d2:	ed94 7b00 	vldr	d7, [r4]
 800e5d6:	ec4b ab16 	vmov	d6, sl, fp
 800e5da:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800e5de:	e78b      	b.n	800e4f8 <_strtod_l+0x3c0>
 800e5e0:	2000      	movs	r0, #0
 800e5e2:	ec4b ab17 	vmov	d7, sl, fp
 800e5e6:	4e30      	ldr	r6, [pc, #192]	@ (800e6a8 <_strtod_l+0x570>)
 800e5e8:	1112      	asrs	r2, r2, #4
 800e5ea:	4601      	mov	r1, r0
 800e5ec:	2a01      	cmp	r2, #1
 800e5ee:	dc23      	bgt.n	800e638 <_strtod_l+0x500>
 800e5f0:	b108      	cbz	r0, 800e5f6 <_strtod_l+0x4be>
 800e5f2:	ec5b ab17 	vmov	sl, fp, d7
 800e5f6:	4a2c      	ldr	r2, [pc, #176]	@ (800e6a8 <_strtod_l+0x570>)
 800e5f8:	482c      	ldr	r0, [pc, #176]	@ (800e6ac <_strtod_l+0x574>)
 800e5fa:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800e5fe:	ed92 7b00 	vldr	d7, [r2]
 800e602:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800e606:	ec4b ab16 	vmov	d6, sl, fp
 800e60a:	4a29      	ldr	r2, [pc, #164]	@ (800e6b0 <_strtod_l+0x578>)
 800e60c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e610:	ee17 1a90 	vmov	r1, s15
 800e614:	400a      	ands	r2, r1
 800e616:	4282      	cmp	r2, r0
 800e618:	ec5b ab17 	vmov	sl, fp, d7
 800e61c:	d898      	bhi.n	800e550 <_strtod_l+0x418>
 800e61e:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 800e622:	4282      	cmp	r2, r0
 800e624:	bf86      	itte	hi
 800e626:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 800e6b4 <_strtod_l+0x57c>
 800e62a:	f04f 3aff 	movhi.w	sl, #4294967295
 800e62e:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 800e632:	2200      	movs	r2, #0
 800e634:	9206      	str	r2, [sp, #24]
 800e636:	e076      	b.n	800e726 <_strtod_l+0x5ee>
 800e638:	f012 0f01 	tst.w	r2, #1
 800e63c:	d004      	beq.n	800e648 <_strtod_l+0x510>
 800e63e:	ed96 6b00 	vldr	d6, [r6]
 800e642:	2001      	movs	r0, #1
 800e644:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e648:	3101      	adds	r1, #1
 800e64a:	1052      	asrs	r2, r2, #1
 800e64c:	3608      	adds	r6, #8
 800e64e:	e7cd      	b.n	800e5ec <_strtod_l+0x4b4>
 800e650:	d0ef      	beq.n	800e632 <_strtod_l+0x4fa>
 800e652:	4252      	negs	r2, r2
 800e654:	f012 000f 	ands.w	r0, r2, #15
 800e658:	d00a      	beq.n	800e670 <_strtod_l+0x538>
 800e65a:	4912      	ldr	r1, [pc, #72]	@ (800e6a4 <_strtod_l+0x56c>)
 800e65c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800e660:	ed91 7b00 	vldr	d7, [r1]
 800e664:	ec4b ab16 	vmov	d6, sl, fp
 800e668:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800e66c:	ec5b ab17 	vmov	sl, fp, d7
 800e670:	1112      	asrs	r2, r2, #4
 800e672:	d0de      	beq.n	800e632 <_strtod_l+0x4fa>
 800e674:	2a1f      	cmp	r2, #31
 800e676:	dd1f      	ble.n	800e6b8 <_strtod_l+0x580>
 800e678:	2400      	movs	r4, #0
 800e67a:	4625      	mov	r5, r4
 800e67c:	9407      	str	r4, [sp, #28]
 800e67e:	4626      	mov	r6, r4
 800e680:	9a05      	ldr	r2, [sp, #20]
 800e682:	2322      	movs	r3, #34	@ 0x22
 800e684:	f04f 0a00 	mov.w	sl, #0
 800e688:	f04f 0b00 	mov.w	fp, #0
 800e68c:	6013      	str	r3, [r2, #0]
 800e68e:	e76a      	b.n	800e566 <_strtod_l+0x42e>
 800e690:	08012eb5 	.word	0x08012eb5
 800e694:	08012e54 	.word	0x08012e54
 800e698:	08012ead 	.word	0x08012ead
 800e69c:	08012eea 	.word	0x08012eea
 800e6a0:	08013298 	.word	0x08013298
 800e6a4:	08013068 	.word	0x08013068
 800e6a8:	08013040 	.word	0x08013040
 800e6ac:	7ca00000 	.word	0x7ca00000
 800e6b0:	7ff00000 	.word	0x7ff00000
 800e6b4:	7fefffff 	.word	0x7fefffff
 800e6b8:	f012 0110 	ands.w	r1, r2, #16
 800e6bc:	bf18      	it	ne
 800e6be:	216a      	movne	r1, #106	@ 0x6a
 800e6c0:	9106      	str	r1, [sp, #24]
 800e6c2:	ec4b ab17 	vmov	d7, sl, fp
 800e6c6:	49b0      	ldr	r1, [pc, #704]	@ (800e988 <_strtod_l+0x850>)
 800e6c8:	2000      	movs	r0, #0
 800e6ca:	07d6      	lsls	r6, r2, #31
 800e6cc:	d504      	bpl.n	800e6d8 <_strtod_l+0x5a0>
 800e6ce:	ed91 6b00 	vldr	d6, [r1]
 800e6d2:	2001      	movs	r0, #1
 800e6d4:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e6d8:	1052      	asrs	r2, r2, #1
 800e6da:	f101 0108 	add.w	r1, r1, #8
 800e6de:	d1f4      	bne.n	800e6ca <_strtod_l+0x592>
 800e6e0:	b108      	cbz	r0, 800e6e6 <_strtod_l+0x5ae>
 800e6e2:	ec5b ab17 	vmov	sl, fp, d7
 800e6e6:	9a06      	ldr	r2, [sp, #24]
 800e6e8:	b1b2      	cbz	r2, 800e718 <_strtod_l+0x5e0>
 800e6ea:	f3cb 510a 	ubfx	r1, fp, #20, #11
 800e6ee:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 800e6f2:	2a00      	cmp	r2, #0
 800e6f4:	4658      	mov	r0, fp
 800e6f6:	dd0f      	ble.n	800e718 <_strtod_l+0x5e0>
 800e6f8:	2a1f      	cmp	r2, #31
 800e6fa:	dd55      	ble.n	800e7a8 <_strtod_l+0x670>
 800e6fc:	2a34      	cmp	r2, #52	@ 0x34
 800e6fe:	bfde      	ittt	le
 800e700:	f04f 32ff 	movle.w	r2, #4294967295
 800e704:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 800e708:	408a      	lslle	r2, r1
 800e70a:	f04f 0a00 	mov.w	sl, #0
 800e70e:	bfcc      	ite	gt
 800e710:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800e714:	ea02 0b00 	andle.w	fp, r2, r0
 800e718:	ec4b ab17 	vmov	d7, sl, fp
 800e71c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e720:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e724:	d0a8      	beq.n	800e678 <_strtod_l+0x540>
 800e726:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800e728:	9805      	ldr	r0, [sp, #20]
 800e72a:	f8cd 9000 	str.w	r9, [sp]
 800e72e:	462a      	mov	r2, r5
 800e730:	f002 fd1e 	bl	8011170 <__s2b>
 800e734:	9007      	str	r0, [sp, #28]
 800e736:	2800      	cmp	r0, #0
 800e738:	f43f af0a 	beq.w	800e550 <_strtod_l+0x418>
 800e73c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e73e:	1b3f      	subs	r7, r7, r4
 800e740:	2b00      	cmp	r3, #0
 800e742:	bfb4      	ite	lt
 800e744:	463b      	movlt	r3, r7
 800e746:	2300      	movge	r3, #0
 800e748:	930a      	str	r3, [sp, #40]	@ 0x28
 800e74a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e74c:	ed9f bb8a 	vldr	d11, [pc, #552]	@ 800e978 <_strtod_l+0x840>
 800e750:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800e754:	2400      	movs	r4, #0
 800e756:	930d      	str	r3, [sp, #52]	@ 0x34
 800e758:	4625      	mov	r5, r4
 800e75a:	9b07      	ldr	r3, [sp, #28]
 800e75c:	9805      	ldr	r0, [sp, #20]
 800e75e:	6859      	ldr	r1, [r3, #4]
 800e760:	f002 fc5e 	bl	8011020 <_Balloc>
 800e764:	4606      	mov	r6, r0
 800e766:	2800      	cmp	r0, #0
 800e768:	f43f aef6 	beq.w	800e558 <_strtod_l+0x420>
 800e76c:	9b07      	ldr	r3, [sp, #28]
 800e76e:	691a      	ldr	r2, [r3, #16]
 800e770:	ec4b ab19 	vmov	d9, sl, fp
 800e774:	3202      	adds	r2, #2
 800e776:	f103 010c 	add.w	r1, r3, #12
 800e77a:	0092      	lsls	r2, r2, #2
 800e77c:	300c      	adds	r0, #12
 800e77e:	f001 faba 	bl	800fcf6 <memcpy>
 800e782:	eeb0 0b49 	vmov.f64	d0, d9
 800e786:	9805      	ldr	r0, [sp, #20]
 800e788:	aa14      	add	r2, sp, #80	@ 0x50
 800e78a:	a913      	add	r1, sp, #76	@ 0x4c
 800e78c:	f003 f82c 	bl	80117e8 <__d2b>
 800e790:	9012      	str	r0, [sp, #72]	@ 0x48
 800e792:	2800      	cmp	r0, #0
 800e794:	f43f aee0 	beq.w	800e558 <_strtod_l+0x420>
 800e798:	9805      	ldr	r0, [sp, #20]
 800e79a:	2101      	movs	r1, #1
 800e79c:	f002 fd7e 	bl	801129c <__i2b>
 800e7a0:	4605      	mov	r5, r0
 800e7a2:	b940      	cbnz	r0, 800e7b6 <_strtod_l+0x67e>
 800e7a4:	2500      	movs	r5, #0
 800e7a6:	e6d7      	b.n	800e558 <_strtod_l+0x420>
 800e7a8:	f04f 31ff 	mov.w	r1, #4294967295
 800e7ac:	fa01 f202 	lsl.w	r2, r1, r2
 800e7b0:	ea02 0a0a 	and.w	sl, r2, sl
 800e7b4:	e7b0      	b.n	800e718 <_strtod_l+0x5e0>
 800e7b6:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 800e7b8:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800e7ba:	2f00      	cmp	r7, #0
 800e7bc:	bfab      	itete	ge
 800e7be:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 800e7c0:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 800e7c2:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 800e7c6:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 800e7ca:	bfac      	ite	ge
 800e7cc:	eb07 0903 	addge.w	r9, r7, r3
 800e7d0:	eba3 0807 	sublt.w	r8, r3, r7
 800e7d4:	9b06      	ldr	r3, [sp, #24]
 800e7d6:	1aff      	subs	r7, r7, r3
 800e7d8:	4417      	add	r7, r2
 800e7da:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 800e7de:	4a6b      	ldr	r2, [pc, #428]	@ (800e98c <_strtod_l+0x854>)
 800e7e0:	3f01      	subs	r7, #1
 800e7e2:	4297      	cmp	r7, r2
 800e7e4:	da51      	bge.n	800e88a <_strtod_l+0x752>
 800e7e6:	1bd1      	subs	r1, r2, r7
 800e7e8:	291f      	cmp	r1, #31
 800e7ea:	eba3 0301 	sub.w	r3, r3, r1
 800e7ee:	f04f 0201 	mov.w	r2, #1
 800e7f2:	dc3e      	bgt.n	800e872 <_strtod_l+0x73a>
 800e7f4:	408a      	lsls	r2, r1
 800e7f6:	920c      	str	r2, [sp, #48]	@ 0x30
 800e7f8:	2200      	movs	r2, #0
 800e7fa:	920b      	str	r2, [sp, #44]	@ 0x2c
 800e7fc:	eb09 0703 	add.w	r7, r9, r3
 800e800:	4498      	add	r8, r3
 800e802:	9b06      	ldr	r3, [sp, #24]
 800e804:	45b9      	cmp	r9, r7
 800e806:	4498      	add	r8, r3
 800e808:	464b      	mov	r3, r9
 800e80a:	bfa8      	it	ge
 800e80c:	463b      	movge	r3, r7
 800e80e:	4543      	cmp	r3, r8
 800e810:	bfa8      	it	ge
 800e812:	4643      	movge	r3, r8
 800e814:	2b00      	cmp	r3, #0
 800e816:	bfc2      	ittt	gt
 800e818:	1aff      	subgt	r7, r7, r3
 800e81a:	eba8 0803 	subgt.w	r8, r8, r3
 800e81e:	eba9 0903 	subgt.w	r9, r9, r3
 800e822:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e824:	2b00      	cmp	r3, #0
 800e826:	dd16      	ble.n	800e856 <_strtod_l+0x71e>
 800e828:	4629      	mov	r1, r5
 800e82a:	9805      	ldr	r0, [sp, #20]
 800e82c:	461a      	mov	r2, r3
 800e82e:	f002 fdf5 	bl	801141c <__pow5mult>
 800e832:	4605      	mov	r5, r0
 800e834:	2800      	cmp	r0, #0
 800e836:	d0b5      	beq.n	800e7a4 <_strtod_l+0x66c>
 800e838:	4601      	mov	r1, r0
 800e83a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800e83c:	9805      	ldr	r0, [sp, #20]
 800e83e:	f002 fd43 	bl	80112c8 <__multiply>
 800e842:	900f      	str	r0, [sp, #60]	@ 0x3c
 800e844:	2800      	cmp	r0, #0
 800e846:	f43f ae87 	beq.w	800e558 <_strtod_l+0x420>
 800e84a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800e84c:	9805      	ldr	r0, [sp, #20]
 800e84e:	f002 fc27 	bl	80110a0 <_Bfree>
 800e852:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e854:	9312      	str	r3, [sp, #72]	@ 0x48
 800e856:	2f00      	cmp	r7, #0
 800e858:	dc1b      	bgt.n	800e892 <_strtod_l+0x75a>
 800e85a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	dd21      	ble.n	800e8a4 <_strtod_l+0x76c>
 800e860:	4631      	mov	r1, r6
 800e862:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e864:	9805      	ldr	r0, [sp, #20]
 800e866:	f002 fdd9 	bl	801141c <__pow5mult>
 800e86a:	4606      	mov	r6, r0
 800e86c:	b9d0      	cbnz	r0, 800e8a4 <_strtod_l+0x76c>
 800e86e:	2600      	movs	r6, #0
 800e870:	e672      	b.n	800e558 <_strtod_l+0x420>
 800e872:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 800e876:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 800e87a:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 800e87e:	37e2      	adds	r7, #226	@ 0xe2
 800e880:	fa02 f107 	lsl.w	r1, r2, r7
 800e884:	910b      	str	r1, [sp, #44]	@ 0x2c
 800e886:	920c      	str	r2, [sp, #48]	@ 0x30
 800e888:	e7b8      	b.n	800e7fc <_strtod_l+0x6c4>
 800e88a:	2200      	movs	r2, #0
 800e88c:	920b      	str	r2, [sp, #44]	@ 0x2c
 800e88e:	2201      	movs	r2, #1
 800e890:	e7f9      	b.n	800e886 <_strtod_l+0x74e>
 800e892:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800e894:	9805      	ldr	r0, [sp, #20]
 800e896:	463a      	mov	r2, r7
 800e898:	f002 fe1a 	bl	80114d0 <__lshift>
 800e89c:	9012      	str	r0, [sp, #72]	@ 0x48
 800e89e:	2800      	cmp	r0, #0
 800e8a0:	d1db      	bne.n	800e85a <_strtod_l+0x722>
 800e8a2:	e659      	b.n	800e558 <_strtod_l+0x420>
 800e8a4:	f1b8 0f00 	cmp.w	r8, #0
 800e8a8:	dd07      	ble.n	800e8ba <_strtod_l+0x782>
 800e8aa:	4631      	mov	r1, r6
 800e8ac:	9805      	ldr	r0, [sp, #20]
 800e8ae:	4642      	mov	r2, r8
 800e8b0:	f002 fe0e 	bl	80114d0 <__lshift>
 800e8b4:	4606      	mov	r6, r0
 800e8b6:	2800      	cmp	r0, #0
 800e8b8:	d0d9      	beq.n	800e86e <_strtod_l+0x736>
 800e8ba:	f1b9 0f00 	cmp.w	r9, #0
 800e8be:	dd08      	ble.n	800e8d2 <_strtod_l+0x79a>
 800e8c0:	4629      	mov	r1, r5
 800e8c2:	9805      	ldr	r0, [sp, #20]
 800e8c4:	464a      	mov	r2, r9
 800e8c6:	f002 fe03 	bl	80114d0 <__lshift>
 800e8ca:	4605      	mov	r5, r0
 800e8cc:	2800      	cmp	r0, #0
 800e8ce:	f43f ae43 	beq.w	800e558 <_strtod_l+0x420>
 800e8d2:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800e8d4:	9805      	ldr	r0, [sp, #20]
 800e8d6:	4632      	mov	r2, r6
 800e8d8:	f002 fe82 	bl	80115e0 <__mdiff>
 800e8dc:	4604      	mov	r4, r0
 800e8de:	2800      	cmp	r0, #0
 800e8e0:	f43f ae3a 	beq.w	800e558 <_strtod_l+0x420>
 800e8e4:	2300      	movs	r3, #0
 800e8e6:	f8d0 800c 	ldr.w	r8, [r0, #12]
 800e8ea:	60c3      	str	r3, [r0, #12]
 800e8ec:	4629      	mov	r1, r5
 800e8ee:	f002 fe5b 	bl	80115a8 <__mcmp>
 800e8f2:	2800      	cmp	r0, #0
 800e8f4:	da4e      	bge.n	800e994 <_strtod_l+0x85c>
 800e8f6:	ea58 080a 	orrs.w	r8, r8, sl
 800e8fa:	d174      	bne.n	800e9e6 <_strtod_l+0x8ae>
 800e8fc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e900:	2b00      	cmp	r3, #0
 800e902:	d170      	bne.n	800e9e6 <_strtod_l+0x8ae>
 800e904:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e908:	0d1b      	lsrs	r3, r3, #20
 800e90a:	051b      	lsls	r3, r3, #20
 800e90c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800e910:	d969      	bls.n	800e9e6 <_strtod_l+0x8ae>
 800e912:	6963      	ldr	r3, [r4, #20]
 800e914:	b913      	cbnz	r3, 800e91c <_strtod_l+0x7e4>
 800e916:	6923      	ldr	r3, [r4, #16]
 800e918:	2b01      	cmp	r3, #1
 800e91a:	dd64      	ble.n	800e9e6 <_strtod_l+0x8ae>
 800e91c:	4621      	mov	r1, r4
 800e91e:	2201      	movs	r2, #1
 800e920:	9805      	ldr	r0, [sp, #20]
 800e922:	f002 fdd5 	bl	80114d0 <__lshift>
 800e926:	4629      	mov	r1, r5
 800e928:	4604      	mov	r4, r0
 800e92a:	f002 fe3d 	bl	80115a8 <__mcmp>
 800e92e:	2800      	cmp	r0, #0
 800e930:	dd59      	ble.n	800e9e6 <_strtod_l+0x8ae>
 800e932:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e936:	9a06      	ldr	r2, [sp, #24]
 800e938:	0d1b      	lsrs	r3, r3, #20
 800e93a:	051b      	lsls	r3, r3, #20
 800e93c:	2a00      	cmp	r2, #0
 800e93e:	d070      	beq.n	800ea22 <_strtod_l+0x8ea>
 800e940:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800e944:	d86d      	bhi.n	800ea22 <_strtod_l+0x8ea>
 800e946:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800e94a:	f67f ae99 	bls.w	800e680 <_strtod_l+0x548>
 800e94e:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 800e980 <_strtod_l+0x848>
 800e952:	ec4b ab16 	vmov	d6, sl, fp
 800e956:	4b0e      	ldr	r3, [pc, #56]	@ (800e990 <_strtod_l+0x858>)
 800e958:	ee26 7b07 	vmul.f64	d7, d6, d7
 800e95c:	ee17 2a90 	vmov	r2, s15
 800e960:	4013      	ands	r3, r2
 800e962:	ec5b ab17 	vmov	sl, fp, d7
 800e966:	2b00      	cmp	r3, #0
 800e968:	f47f ae01 	bne.w	800e56e <_strtod_l+0x436>
 800e96c:	9a05      	ldr	r2, [sp, #20]
 800e96e:	2322      	movs	r3, #34	@ 0x22
 800e970:	6013      	str	r3, [r2, #0]
 800e972:	e5fc      	b.n	800e56e <_strtod_l+0x436>
 800e974:	f3af 8000 	nop.w
 800e978:	ffc00000 	.word	0xffc00000
 800e97c:	41dfffff 	.word	0x41dfffff
 800e980:	00000000 	.word	0x00000000
 800e984:	39500000 	.word	0x39500000
 800e988:	08012e80 	.word	0x08012e80
 800e98c:	fffffc02 	.word	0xfffffc02
 800e990:	7ff00000 	.word	0x7ff00000
 800e994:	46d9      	mov	r9, fp
 800e996:	d15d      	bne.n	800ea54 <_strtod_l+0x91c>
 800e998:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e99c:	f1b8 0f00 	cmp.w	r8, #0
 800e9a0:	d02a      	beq.n	800e9f8 <_strtod_l+0x8c0>
 800e9a2:	4aab      	ldr	r2, [pc, #684]	@ (800ec50 <_strtod_l+0xb18>)
 800e9a4:	4293      	cmp	r3, r2
 800e9a6:	d12a      	bne.n	800e9fe <_strtod_l+0x8c6>
 800e9a8:	9b06      	ldr	r3, [sp, #24]
 800e9aa:	4652      	mov	r2, sl
 800e9ac:	b1fb      	cbz	r3, 800e9ee <_strtod_l+0x8b6>
 800e9ae:	4ba9      	ldr	r3, [pc, #676]	@ (800ec54 <_strtod_l+0xb1c>)
 800e9b0:	ea0b 0303 	and.w	r3, fp, r3
 800e9b4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800e9b8:	f04f 31ff 	mov.w	r1, #4294967295
 800e9bc:	d81a      	bhi.n	800e9f4 <_strtod_l+0x8bc>
 800e9be:	0d1b      	lsrs	r3, r3, #20
 800e9c0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800e9c4:	fa01 f303 	lsl.w	r3, r1, r3
 800e9c8:	429a      	cmp	r2, r3
 800e9ca:	d118      	bne.n	800e9fe <_strtod_l+0x8c6>
 800e9cc:	4ba2      	ldr	r3, [pc, #648]	@ (800ec58 <_strtod_l+0xb20>)
 800e9ce:	4599      	cmp	r9, r3
 800e9d0:	d102      	bne.n	800e9d8 <_strtod_l+0x8a0>
 800e9d2:	3201      	adds	r2, #1
 800e9d4:	f43f adc0 	beq.w	800e558 <_strtod_l+0x420>
 800e9d8:	4b9e      	ldr	r3, [pc, #632]	@ (800ec54 <_strtod_l+0xb1c>)
 800e9da:	ea09 0303 	and.w	r3, r9, r3
 800e9de:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 800e9e2:	f04f 0a00 	mov.w	sl, #0
 800e9e6:	9b06      	ldr	r3, [sp, #24]
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	d1b0      	bne.n	800e94e <_strtod_l+0x816>
 800e9ec:	e5bf      	b.n	800e56e <_strtod_l+0x436>
 800e9ee:	f04f 33ff 	mov.w	r3, #4294967295
 800e9f2:	e7e9      	b.n	800e9c8 <_strtod_l+0x890>
 800e9f4:	460b      	mov	r3, r1
 800e9f6:	e7e7      	b.n	800e9c8 <_strtod_l+0x890>
 800e9f8:	ea53 030a 	orrs.w	r3, r3, sl
 800e9fc:	d099      	beq.n	800e932 <_strtod_l+0x7fa>
 800e9fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ea00:	b1c3      	cbz	r3, 800ea34 <_strtod_l+0x8fc>
 800ea02:	ea13 0f09 	tst.w	r3, r9
 800ea06:	d0ee      	beq.n	800e9e6 <_strtod_l+0x8ae>
 800ea08:	9a06      	ldr	r2, [sp, #24]
 800ea0a:	4650      	mov	r0, sl
 800ea0c:	4659      	mov	r1, fp
 800ea0e:	f1b8 0f00 	cmp.w	r8, #0
 800ea12:	d013      	beq.n	800ea3c <_strtod_l+0x904>
 800ea14:	f7ff fb74 	bl	800e100 <sulp>
 800ea18:	ee39 7b00 	vadd.f64	d7, d9, d0
 800ea1c:	ec5b ab17 	vmov	sl, fp, d7
 800ea20:	e7e1      	b.n	800e9e6 <_strtod_l+0x8ae>
 800ea22:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800ea26:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800ea2a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800ea2e:	f04f 3aff 	mov.w	sl, #4294967295
 800ea32:	e7d8      	b.n	800e9e6 <_strtod_l+0x8ae>
 800ea34:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ea36:	ea13 0f0a 	tst.w	r3, sl
 800ea3a:	e7e4      	b.n	800ea06 <_strtod_l+0x8ce>
 800ea3c:	f7ff fb60 	bl	800e100 <sulp>
 800ea40:	ee39 0b40 	vsub.f64	d0, d9, d0
 800ea44:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800ea48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea4c:	ec5b ab10 	vmov	sl, fp, d0
 800ea50:	d1c9      	bne.n	800e9e6 <_strtod_l+0x8ae>
 800ea52:	e615      	b.n	800e680 <_strtod_l+0x548>
 800ea54:	4629      	mov	r1, r5
 800ea56:	4620      	mov	r0, r4
 800ea58:	f002 ff1e 	bl	8011898 <__ratio>
 800ea5c:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 800ea60:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800ea64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea68:	d85d      	bhi.n	800eb26 <_strtod_l+0x9ee>
 800ea6a:	f1b8 0f00 	cmp.w	r8, #0
 800ea6e:	d164      	bne.n	800eb3a <_strtod_l+0xa02>
 800ea70:	f1ba 0f00 	cmp.w	sl, #0
 800ea74:	d14b      	bne.n	800eb0e <_strtod_l+0x9d6>
 800ea76:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ea7a:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800ea7e:	2b00      	cmp	r3, #0
 800ea80:	d160      	bne.n	800eb44 <_strtod_l+0xa0c>
 800ea82:	eeb4 0bc8 	vcmpe.f64	d0, d8
 800ea86:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800ea8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea8e:	d401      	bmi.n	800ea94 <_strtod_l+0x95c>
 800ea90:	ee20 8b08 	vmul.f64	d8, d0, d8
 800ea94:	eeb1 ab48 	vneg.f64	d10, d8
 800ea98:	486e      	ldr	r0, [pc, #440]	@ (800ec54 <_strtod_l+0xb1c>)
 800ea9a:	4970      	ldr	r1, [pc, #448]	@ (800ec5c <_strtod_l+0xb24>)
 800ea9c:	ea09 0700 	and.w	r7, r9, r0
 800eaa0:	428f      	cmp	r7, r1
 800eaa2:	ec53 2b1a 	vmov	r2, r3, d10
 800eaa6:	d17d      	bne.n	800eba4 <_strtod_l+0xa6c>
 800eaa8:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 800eaac:	ec4b ab1c 	vmov	d12, sl, fp
 800eab0:	eeb0 0b4c 	vmov.f64	d0, d12
 800eab4:	f002 fe28 	bl	8011708 <__ulp>
 800eab8:	4866      	ldr	r0, [pc, #408]	@ (800ec54 <_strtod_l+0xb1c>)
 800eaba:	eea0 cb0a 	vfma.f64	d12, d0, d10
 800eabe:	ee1c 3a90 	vmov	r3, s25
 800eac2:	4a67      	ldr	r2, [pc, #412]	@ (800ec60 <_strtod_l+0xb28>)
 800eac4:	ea03 0100 	and.w	r1, r3, r0
 800eac8:	4291      	cmp	r1, r2
 800eaca:	ec5b ab1c 	vmov	sl, fp, d12
 800eace:	d93c      	bls.n	800eb4a <_strtod_l+0xa12>
 800ead0:	ee19 2a90 	vmov	r2, s19
 800ead4:	4b60      	ldr	r3, [pc, #384]	@ (800ec58 <_strtod_l+0xb20>)
 800ead6:	429a      	cmp	r2, r3
 800ead8:	d104      	bne.n	800eae4 <_strtod_l+0x9ac>
 800eada:	ee19 3a10 	vmov	r3, s18
 800eade:	3301      	adds	r3, #1
 800eae0:	f43f ad3a 	beq.w	800e558 <_strtod_l+0x420>
 800eae4:	f8df b170 	ldr.w	fp, [pc, #368]	@ 800ec58 <_strtod_l+0xb20>
 800eae8:	f04f 3aff 	mov.w	sl, #4294967295
 800eaec:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800eaee:	9805      	ldr	r0, [sp, #20]
 800eaf0:	f002 fad6 	bl	80110a0 <_Bfree>
 800eaf4:	9805      	ldr	r0, [sp, #20]
 800eaf6:	4631      	mov	r1, r6
 800eaf8:	f002 fad2 	bl	80110a0 <_Bfree>
 800eafc:	9805      	ldr	r0, [sp, #20]
 800eafe:	4629      	mov	r1, r5
 800eb00:	f002 face 	bl	80110a0 <_Bfree>
 800eb04:	9805      	ldr	r0, [sp, #20]
 800eb06:	4621      	mov	r1, r4
 800eb08:	f002 faca 	bl	80110a0 <_Bfree>
 800eb0c:	e625      	b.n	800e75a <_strtod_l+0x622>
 800eb0e:	f1ba 0f01 	cmp.w	sl, #1
 800eb12:	d103      	bne.n	800eb1c <_strtod_l+0x9e4>
 800eb14:	f1bb 0f00 	cmp.w	fp, #0
 800eb18:	f43f adb2 	beq.w	800e680 <_strtod_l+0x548>
 800eb1c:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 800eb20:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800eb24:	e7b8      	b.n	800ea98 <_strtod_l+0x960>
 800eb26:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800eb2a:	ee20 8b08 	vmul.f64	d8, d0, d8
 800eb2e:	f1b8 0f00 	cmp.w	r8, #0
 800eb32:	d0af      	beq.n	800ea94 <_strtod_l+0x95c>
 800eb34:	eeb0 ab48 	vmov.f64	d10, d8
 800eb38:	e7ae      	b.n	800ea98 <_strtod_l+0x960>
 800eb3a:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 800eb3e:	eeb0 8b4a 	vmov.f64	d8, d10
 800eb42:	e7a9      	b.n	800ea98 <_strtod_l+0x960>
 800eb44:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 800eb48:	e7a6      	b.n	800ea98 <_strtod_l+0x960>
 800eb4a:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800eb4e:	9b06      	ldr	r3, [sp, #24]
 800eb50:	46d9      	mov	r9, fp
 800eb52:	2b00      	cmp	r3, #0
 800eb54:	d1ca      	bne.n	800eaec <_strtod_l+0x9b4>
 800eb56:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800eb5a:	0d1b      	lsrs	r3, r3, #20
 800eb5c:	051b      	lsls	r3, r3, #20
 800eb5e:	429f      	cmp	r7, r3
 800eb60:	d1c4      	bne.n	800eaec <_strtod_l+0x9b4>
 800eb62:	ec51 0b18 	vmov	r0, r1, d8
 800eb66:	f7f1 fdff 	bl	8000768 <__aeabi_d2lz>
 800eb6a:	f7f1 fdb7 	bl	80006dc <__aeabi_l2d>
 800eb6e:	f3cb 0913 	ubfx	r9, fp, #0, #20
 800eb72:	ec41 0b17 	vmov	d7, r0, r1
 800eb76:	ea49 090a 	orr.w	r9, r9, sl
 800eb7a:	ea59 0908 	orrs.w	r9, r9, r8
 800eb7e:	ee38 8b47 	vsub.f64	d8, d8, d7
 800eb82:	d03c      	beq.n	800ebfe <_strtod_l+0xac6>
 800eb84:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 800ec38 <_strtod_l+0xb00>
 800eb88:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800eb8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb90:	f53f aced 	bmi.w	800e56e <_strtod_l+0x436>
 800eb94:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 800ec40 <_strtod_l+0xb08>
 800eb98:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800eb9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eba0:	dda4      	ble.n	800eaec <_strtod_l+0x9b4>
 800eba2:	e4e4      	b.n	800e56e <_strtod_l+0x436>
 800eba4:	9906      	ldr	r1, [sp, #24]
 800eba6:	b1e1      	cbz	r1, 800ebe2 <_strtod_l+0xaaa>
 800eba8:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 800ebac:	d819      	bhi.n	800ebe2 <_strtod_l+0xaaa>
 800ebae:	eeb4 8bcb 	vcmpe.f64	d8, d11
 800ebb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ebb6:	d811      	bhi.n	800ebdc <_strtod_l+0xaa4>
 800ebb8:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 800ebbc:	ee18 3a10 	vmov	r3, s16
 800ebc0:	2b01      	cmp	r3, #1
 800ebc2:	bf38      	it	cc
 800ebc4:	2301      	movcc	r3, #1
 800ebc6:	ee08 3a10 	vmov	s16, r3
 800ebca:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 800ebce:	f1b8 0f00 	cmp.w	r8, #0
 800ebd2:	d111      	bne.n	800ebf8 <_strtod_l+0xac0>
 800ebd4:	eeb1 7b48 	vneg.f64	d7, d8
 800ebd8:	ec53 2b17 	vmov	r2, r3, d7
 800ebdc:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 800ebe0:	1bcb      	subs	r3, r1, r7
 800ebe2:	eeb0 0b49 	vmov.f64	d0, d9
 800ebe6:	ec43 2b1a 	vmov	d10, r2, r3
 800ebea:	f002 fd8d 	bl	8011708 <__ulp>
 800ebee:	eeaa 9b00 	vfma.f64	d9, d10, d0
 800ebf2:	ec5b ab19 	vmov	sl, fp, d9
 800ebf6:	e7aa      	b.n	800eb4e <_strtod_l+0xa16>
 800ebf8:	eeb0 7b48 	vmov.f64	d7, d8
 800ebfc:	e7ec      	b.n	800ebd8 <_strtod_l+0xaa0>
 800ebfe:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 800ec48 <_strtod_l+0xb10>
 800ec02:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800ec06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec0a:	f57f af6f 	bpl.w	800eaec <_strtod_l+0x9b4>
 800ec0e:	e4ae      	b.n	800e56e <_strtod_l+0x436>
 800ec10:	2300      	movs	r3, #0
 800ec12:	9308      	str	r3, [sp, #32]
 800ec14:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ec16:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ec18:	6013      	str	r3, [r2, #0]
 800ec1a:	f7ff bacc 	b.w	800e1b6 <_strtod_l+0x7e>
 800ec1e:	2a65      	cmp	r2, #101	@ 0x65
 800ec20:	f43f abbc 	beq.w	800e39c <_strtod_l+0x264>
 800ec24:	2a45      	cmp	r2, #69	@ 0x45
 800ec26:	f43f abb9 	beq.w	800e39c <_strtod_l+0x264>
 800ec2a:	2301      	movs	r3, #1
 800ec2c:	9306      	str	r3, [sp, #24]
 800ec2e:	f7ff bbf0 	b.w	800e412 <_strtod_l+0x2da>
 800ec32:	bf00      	nop
 800ec34:	f3af 8000 	nop.w
 800ec38:	94a03595 	.word	0x94a03595
 800ec3c:	3fdfffff 	.word	0x3fdfffff
 800ec40:	35afe535 	.word	0x35afe535
 800ec44:	3fe00000 	.word	0x3fe00000
 800ec48:	94a03595 	.word	0x94a03595
 800ec4c:	3fcfffff 	.word	0x3fcfffff
 800ec50:	000fffff 	.word	0x000fffff
 800ec54:	7ff00000 	.word	0x7ff00000
 800ec58:	7fefffff 	.word	0x7fefffff
 800ec5c:	7fe00000 	.word	0x7fe00000
 800ec60:	7c9fffff 	.word	0x7c9fffff

0800ec64 <_strtod_r>:
 800ec64:	4b01      	ldr	r3, [pc, #4]	@ (800ec6c <_strtod_r+0x8>)
 800ec66:	f7ff ba67 	b.w	800e138 <_strtod_l>
 800ec6a:	bf00      	nop
 800ec6c:	24000058 	.word	0x24000058

0800ec70 <__cvt>:
 800ec70:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ec72:	ed2d 8b02 	vpush	{d8}
 800ec76:	eeb0 8b40 	vmov.f64	d8, d0
 800ec7a:	b085      	sub	sp, #20
 800ec7c:	4617      	mov	r7, r2
 800ec7e:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800ec80:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ec82:	ee18 2a90 	vmov	r2, s17
 800ec86:	f025 0520 	bic.w	r5, r5, #32
 800ec8a:	2a00      	cmp	r2, #0
 800ec8c:	bfb6      	itet	lt
 800ec8e:	222d      	movlt	r2, #45	@ 0x2d
 800ec90:	2200      	movge	r2, #0
 800ec92:	eeb1 8b40 	vneglt.f64	d8, d0
 800ec96:	2d46      	cmp	r5, #70	@ 0x46
 800ec98:	460c      	mov	r4, r1
 800ec9a:	701a      	strb	r2, [r3, #0]
 800ec9c:	d004      	beq.n	800eca8 <__cvt+0x38>
 800ec9e:	2d45      	cmp	r5, #69	@ 0x45
 800eca0:	d100      	bne.n	800eca4 <__cvt+0x34>
 800eca2:	3401      	adds	r4, #1
 800eca4:	2102      	movs	r1, #2
 800eca6:	e000      	b.n	800ecaa <__cvt+0x3a>
 800eca8:	2103      	movs	r1, #3
 800ecaa:	ab03      	add	r3, sp, #12
 800ecac:	9301      	str	r3, [sp, #4]
 800ecae:	ab02      	add	r3, sp, #8
 800ecb0:	9300      	str	r3, [sp, #0]
 800ecb2:	4622      	mov	r2, r4
 800ecb4:	4633      	mov	r3, r6
 800ecb6:	eeb0 0b48 	vmov.f64	d0, d8
 800ecba:	f001 f8c5 	bl	800fe48 <_dtoa_r>
 800ecbe:	2d47      	cmp	r5, #71	@ 0x47
 800ecc0:	d114      	bne.n	800ecec <__cvt+0x7c>
 800ecc2:	07fb      	lsls	r3, r7, #31
 800ecc4:	d50a      	bpl.n	800ecdc <__cvt+0x6c>
 800ecc6:	1902      	adds	r2, r0, r4
 800ecc8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800eccc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ecd0:	bf08      	it	eq
 800ecd2:	9203      	streq	r2, [sp, #12]
 800ecd4:	2130      	movs	r1, #48	@ 0x30
 800ecd6:	9b03      	ldr	r3, [sp, #12]
 800ecd8:	4293      	cmp	r3, r2
 800ecda:	d319      	bcc.n	800ed10 <__cvt+0xa0>
 800ecdc:	9b03      	ldr	r3, [sp, #12]
 800ecde:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ece0:	1a1b      	subs	r3, r3, r0
 800ece2:	6013      	str	r3, [r2, #0]
 800ece4:	b005      	add	sp, #20
 800ece6:	ecbd 8b02 	vpop	{d8}
 800ecea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ecec:	2d46      	cmp	r5, #70	@ 0x46
 800ecee:	eb00 0204 	add.w	r2, r0, r4
 800ecf2:	d1e9      	bne.n	800ecc8 <__cvt+0x58>
 800ecf4:	7803      	ldrb	r3, [r0, #0]
 800ecf6:	2b30      	cmp	r3, #48	@ 0x30
 800ecf8:	d107      	bne.n	800ed0a <__cvt+0x9a>
 800ecfa:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800ecfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed02:	bf1c      	itt	ne
 800ed04:	f1c4 0401 	rsbne	r4, r4, #1
 800ed08:	6034      	strne	r4, [r6, #0]
 800ed0a:	6833      	ldr	r3, [r6, #0]
 800ed0c:	441a      	add	r2, r3
 800ed0e:	e7db      	b.n	800ecc8 <__cvt+0x58>
 800ed10:	1c5c      	adds	r4, r3, #1
 800ed12:	9403      	str	r4, [sp, #12]
 800ed14:	7019      	strb	r1, [r3, #0]
 800ed16:	e7de      	b.n	800ecd6 <__cvt+0x66>

0800ed18 <__exponent>:
 800ed18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ed1a:	2900      	cmp	r1, #0
 800ed1c:	bfba      	itte	lt
 800ed1e:	4249      	neglt	r1, r1
 800ed20:	232d      	movlt	r3, #45	@ 0x2d
 800ed22:	232b      	movge	r3, #43	@ 0x2b
 800ed24:	2909      	cmp	r1, #9
 800ed26:	7002      	strb	r2, [r0, #0]
 800ed28:	7043      	strb	r3, [r0, #1]
 800ed2a:	dd29      	ble.n	800ed80 <__exponent+0x68>
 800ed2c:	f10d 0307 	add.w	r3, sp, #7
 800ed30:	461d      	mov	r5, r3
 800ed32:	270a      	movs	r7, #10
 800ed34:	461a      	mov	r2, r3
 800ed36:	fbb1 f6f7 	udiv	r6, r1, r7
 800ed3a:	fb07 1416 	mls	r4, r7, r6, r1
 800ed3e:	3430      	adds	r4, #48	@ 0x30
 800ed40:	f802 4c01 	strb.w	r4, [r2, #-1]
 800ed44:	460c      	mov	r4, r1
 800ed46:	2c63      	cmp	r4, #99	@ 0x63
 800ed48:	f103 33ff 	add.w	r3, r3, #4294967295
 800ed4c:	4631      	mov	r1, r6
 800ed4e:	dcf1      	bgt.n	800ed34 <__exponent+0x1c>
 800ed50:	3130      	adds	r1, #48	@ 0x30
 800ed52:	1e94      	subs	r4, r2, #2
 800ed54:	f803 1c01 	strb.w	r1, [r3, #-1]
 800ed58:	1c41      	adds	r1, r0, #1
 800ed5a:	4623      	mov	r3, r4
 800ed5c:	42ab      	cmp	r3, r5
 800ed5e:	d30a      	bcc.n	800ed76 <__exponent+0x5e>
 800ed60:	f10d 0309 	add.w	r3, sp, #9
 800ed64:	1a9b      	subs	r3, r3, r2
 800ed66:	42ac      	cmp	r4, r5
 800ed68:	bf88      	it	hi
 800ed6a:	2300      	movhi	r3, #0
 800ed6c:	3302      	adds	r3, #2
 800ed6e:	4403      	add	r3, r0
 800ed70:	1a18      	subs	r0, r3, r0
 800ed72:	b003      	add	sp, #12
 800ed74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ed76:	f813 6b01 	ldrb.w	r6, [r3], #1
 800ed7a:	f801 6f01 	strb.w	r6, [r1, #1]!
 800ed7e:	e7ed      	b.n	800ed5c <__exponent+0x44>
 800ed80:	2330      	movs	r3, #48	@ 0x30
 800ed82:	3130      	adds	r1, #48	@ 0x30
 800ed84:	7083      	strb	r3, [r0, #2]
 800ed86:	70c1      	strb	r1, [r0, #3]
 800ed88:	1d03      	adds	r3, r0, #4
 800ed8a:	e7f1      	b.n	800ed70 <__exponent+0x58>
 800ed8c:	0000      	movs	r0, r0
	...

0800ed90 <_printf_float>:
 800ed90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed94:	b08d      	sub	sp, #52	@ 0x34
 800ed96:	460c      	mov	r4, r1
 800ed98:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800ed9c:	4616      	mov	r6, r2
 800ed9e:	461f      	mov	r7, r3
 800eda0:	4605      	mov	r5, r0
 800eda2:	f000 ff21 	bl	800fbe8 <_localeconv_r>
 800eda6:	f8d0 b000 	ldr.w	fp, [r0]
 800edaa:	4658      	mov	r0, fp
 800edac:	f7f1 fb00 	bl	80003b0 <strlen>
 800edb0:	2300      	movs	r3, #0
 800edb2:	930a      	str	r3, [sp, #40]	@ 0x28
 800edb4:	f8d8 3000 	ldr.w	r3, [r8]
 800edb8:	f894 9018 	ldrb.w	r9, [r4, #24]
 800edbc:	6822      	ldr	r2, [r4, #0]
 800edbe:	9005      	str	r0, [sp, #20]
 800edc0:	3307      	adds	r3, #7
 800edc2:	f023 0307 	bic.w	r3, r3, #7
 800edc6:	f103 0108 	add.w	r1, r3, #8
 800edca:	f8c8 1000 	str.w	r1, [r8]
 800edce:	ed93 0b00 	vldr	d0, [r3]
 800edd2:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 800f030 <_printf_float+0x2a0>
 800edd6:	eeb0 7bc0 	vabs.f64	d7, d0
 800edda:	eeb4 7b46 	vcmp.f64	d7, d6
 800edde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ede2:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 800ede6:	dd24      	ble.n	800ee32 <_printf_float+0xa2>
 800ede8:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800edec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800edf0:	d502      	bpl.n	800edf8 <_printf_float+0x68>
 800edf2:	232d      	movs	r3, #45	@ 0x2d
 800edf4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800edf8:	498f      	ldr	r1, [pc, #572]	@ (800f038 <_printf_float+0x2a8>)
 800edfa:	4b90      	ldr	r3, [pc, #576]	@ (800f03c <_printf_float+0x2ac>)
 800edfc:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 800ee00:	bf94      	ite	ls
 800ee02:	4688      	movls	r8, r1
 800ee04:	4698      	movhi	r8, r3
 800ee06:	f022 0204 	bic.w	r2, r2, #4
 800ee0a:	2303      	movs	r3, #3
 800ee0c:	6123      	str	r3, [r4, #16]
 800ee0e:	6022      	str	r2, [r4, #0]
 800ee10:	f04f 0a00 	mov.w	sl, #0
 800ee14:	9700      	str	r7, [sp, #0]
 800ee16:	4633      	mov	r3, r6
 800ee18:	aa0b      	add	r2, sp, #44	@ 0x2c
 800ee1a:	4621      	mov	r1, r4
 800ee1c:	4628      	mov	r0, r5
 800ee1e:	f000 f9d1 	bl	800f1c4 <_printf_common>
 800ee22:	3001      	adds	r0, #1
 800ee24:	f040 8089 	bne.w	800ef3a <_printf_float+0x1aa>
 800ee28:	f04f 30ff 	mov.w	r0, #4294967295
 800ee2c:	b00d      	add	sp, #52	@ 0x34
 800ee2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee32:	eeb4 0b40 	vcmp.f64	d0, d0
 800ee36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee3a:	d709      	bvc.n	800ee50 <_printf_float+0xc0>
 800ee3c:	ee10 3a90 	vmov	r3, s1
 800ee40:	2b00      	cmp	r3, #0
 800ee42:	bfbc      	itt	lt
 800ee44:	232d      	movlt	r3, #45	@ 0x2d
 800ee46:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800ee4a:	497d      	ldr	r1, [pc, #500]	@ (800f040 <_printf_float+0x2b0>)
 800ee4c:	4b7d      	ldr	r3, [pc, #500]	@ (800f044 <_printf_float+0x2b4>)
 800ee4e:	e7d5      	b.n	800edfc <_printf_float+0x6c>
 800ee50:	6863      	ldr	r3, [r4, #4]
 800ee52:	1c59      	adds	r1, r3, #1
 800ee54:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 800ee58:	d139      	bne.n	800eece <_printf_float+0x13e>
 800ee5a:	2306      	movs	r3, #6
 800ee5c:	6063      	str	r3, [r4, #4]
 800ee5e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800ee62:	2300      	movs	r3, #0
 800ee64:	6022      	str	r2, [r4, #0]
 800ee66:	9303      	str	r3, [sp, #12]
 800ee68:	ab0a      	add	r3, sp, #40	@ 0x28
 800ee6a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800ee6e:	ab09      	add	r3, sp, #36	@ 0x24
 800ee70:	9300      	str	r3, [sp, #0]
 800ee72:	6861      	ldr	r1, [r4, #4]
 800ee74:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800ee78:	4628      	mov	r0, r5
 800ee7a:	f7ff fef9 	bl	800ec70 <__cvt>
 800ee7e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800ee82:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ee84:	4680      	mov	r8, r0
 800ee86:	d129      	bne.n	800eedc <_printf_float+0x14c>
 800ee88:	1cc8      	adds	r0, r1, #3
 800ee8a:	db02      	blt.n	800ee92 <_printf_float+0x102>
 800ee8c:	6863      	ldr	r3, [r4, #4]
 800ee8e:	4299      	cmp	r1, r3
 800ee90:	dd41      	ble.n	800ef16 <_printf_float+0x186>
 800ee92:	f1a9 0902 	sub.w	r9, r9, #2
 800ee96:	fa5f f989 	uxtb.w	r9, r9
 800ee9a:	3901      	subs	r1, #1
 800ee9c:	464a      	mov	r2, r9
 800ee9e:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800eea2:	9109      	str	r1, [sp, #36]	@ 0x24
 800eea4:	f7ff ff38 	bl	800ed18 <__exponent>
 800eea8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800eeaa:	1813      	adds	r3, r2, r0
 800eeac:	2a01      	cmp	r2, #1
 800eeae:	4682      	mov	sl, r0
 800eeb0:	6123      	str	r3, [r4, #16]
 800eeb2:	dc02      	bgt.n	800eeba <_printf_float+0x12a>
 800eeb4:	6822      	ldr	r2, [r4, #0]
 800eeb6:	07d2      	lsls	r2, r2, #31
 800eeb8:	d501      	bpl.n	800eebe <_printf_float+0x12e>
 800eeba:	3301      	adds	r3, #1
 800eebc:	6123      	str	r3, [r4, #16]
 800eebe:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800eec2:	2b00      	cmp	r3, #0
 800eec4:	d0a6      	beq.n	800ee14 <_printf_float+0x84>
 800eec6:	232d      	movs	r3, #45	@ 0x2d
 800eec8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800eecc:	e7a2      	b.n	800ee14 <_printf_float+0x84>
 800eece:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800eed2:	d1c4      	bne.n	800ee5e <_printf_float+0xce>
 800eed4:	2b00      	cmp	r3, #0
 800eed6:	d1c2      	bne.n	800ee5e <_printf_float+0xce>
 800eed8:	2301      	movs	r3, #1
 800eeda:	e7bf      	b.n	800ee5c <_printf_float+0xcc>
 800eedc:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800eee0:	d9db      	bls.n	800ee9a <_printf_float+0x10a>
 800eee2:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800eee6:	d118      	bne.n	800ef1a <_printf_float+0x18a>
 800eee8:	2900      	cmp	r1, #0
 800eeea:	6863      	ldr	r3, [r4, #4]
 800eeec:	dd0b      	ble.n	800ef06 <_printf_float+0x176>
 800eeee:	6121      	str	r1, [r4, #16]
 800eef0:	b913      	cbnz	r3, 800eef8 <_printf_float+0x168>
 800eef2:	6822      	ldr	r2, [r4, #0]
 800eef4:	07d0      	lsls	r0, r2, #31
 800eef6:	d502      	bpl.n	800eefe <_printf_float+0x16e>
 800eef8:	3301      	adds	r3, #1
 800eefa:	440b      	add	r3, r1
 800eefc:	6123      	str	r3, [r4, #16]
 800eefe:	65a1      	str	r1, [r4, #88]	@ 0x58
 800ef00:	f04f 0a00 	mov.w	sl, #0
 800ef04:	e7db      	b.n	800eebe <_printf_float+0x12e>
 800ef06:	b913      	cbnz	r3, 800ef0e <_printf_float+0x17e>
 800ef08:	6822      	ldr	r2, [r4, #0]
 800ef0a:	07d2      	lsls	r2, r2, #31
 800ef0c:	d501      	bpl.n	800ef12 <_printf_float+0x182>
 800ef0e:	3302      	adds	r3, #2
 800ef10:	e7f4      	b.n	800eefc <_printf_float+0x16c>
 800ef12:	2301      	movs	r3, #1
 800ef14:	e7f2      	b.n	800eefc <_printf_float+0x16c>
 800ef16:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800ef1a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ef1c:	4299      	cmp	r1, r3
 800ef1e:	db05      	blt.n	800ef2c <_printf_float+0x19c>
 800ef20:	6823      	ldr	r3, [r4, #0]
 800ef22:	6121      	str	r1, [r4, #16]
 800ef24:	07d8      	lsls	r0, r3, #31
 800ef26:	d5ea      	bpl.n	800eefe <_printf_float+0x16e>
 800ef28:	1c4b      	adds	r3, r1, #1
 800ef2a:	e7e7      	b.n	800eefc <_printf_float+0x16c>
 800ef2c:	2900      	cmp	r1, #0
 800ef2e:	bfd4      	ite	le
 800ef30:	f1c1 0202 	rsble	r2, r1, #2
 800ef34:	2201      	movgt	r2, #1
 800ef36:	4413      	add	r3, r2
 800ef38:	e7e0      	b.n	800eefc <_printf_float+0x16c>
 800ef3a:	6823      	ldr	r3, [r4, #0]
 800ef3c:	055a      	lsls	r2, r3, #21
 800ef3e:	d407      	bmi.n	800ef50 <_printf_float+0x1c0>
 800ef40:	6923      	ldr	r3, [r4, #16]
 800ef42:	4642      	mov	r2, r8
 800ef44:	4631      	mov	r1, r6
 800ef46:	4628      	mov	r0, r5
 800ef48:	47b8      	blx	r7
 800ef4a:	3001      	adds	r0, #1
 800ef4c:	d12a      	bne.n	800efa4 <_printf_float+0x214>
 800ef4e:	e76b      	b.n	800ee28 <_printf_float+0x98>
 800ef50:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800ef54:	f240 80e0 	bls.w	800f118 <_printf_float+0x388>
 800ef58:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800ef5c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ef60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef64:	d133      	bne.n	800efce <_printf_float+0x23e>
 800ef66:	4a38      	ldr	r2, [pc, #224]	@ (800f048 <_printf_float+0x2b8>)
 800ef68:	2301      	movs	r3, #1
 800ef6a:	4631      	mov	r1, r6
 800ef6c:	4628      	mov	r0, r5
 800ef6e:	47b8      	blx	r7
 800ef70:	3001      	adds	r0, #1
 800ef72:	f43f af59 	beq.w	800ee28 <_printf_float+0x98>
 800ef76:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800ef7a:	4543      	cmp	r3, r8
 800ef7c:	db02      	blt.n	800ef84 <_printf_float+0x1f4>
 800ef7e:	6823      	ldr	r3, [r4, #0]
 800ef80:	07d8      	lsls	r0, r3, #31
 800ef82:	d50f      	bpl.n	800efa4 <_printf_float+0x214>
 800ef84:	9b05      	ldr	r3, [sp, #20]
 800ef86:	465a      	mov	r2, fp
 800ef88:	4631      	mov	r1, r6
 800ef8a:	4628      	mov	r0, r5
 800ef8c:	47b8      	blx	r7
 800ef8e:	3001      	adds	r0, #1
 800ef90:	f43f af4a 	beq.w	800ee28 <_printf_float+0x98>
 800ef94:	f04f 0900 	mov.w	r9, #0
 800ef98:	f108 38ff 	add.w	r8, r8, #4294967295
 800ef9c:	f104 0a1a 	add.w	sl, r4, #26
 800efa0:	45c8      	cmp	r8, r9
 800efa2:	dc09      	bgt.n	800efb8 <_printf_float+0x228>
 800efa4:	6823      	ldr	r3, [r4, #0]
 800efa6:	079b      	lsls	r3, r3, #30
 800efa8:	f100 8107 	bmi.w	800f1ba <_printf_float+0x42a>
 800efac:	68e0      	ldr	r0, [r4, #12]
 800efae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800efb0:	4298      	cmp	r0, r3
 800efb2:	bfb8      	it	lt
 800efb4:	4618      	movlt	r0, r3
 800efb6:	e739      	b.n	800ee2c <_printf_float+0x9c>
 800efb8:	2301      	movs	r3, #1
 800efba:	4652      	mov	r2, sl
 800efbc:	4631      	mov	r1, r6
 800efbe:	4628      	mov	r0, r5
 800efc0:	47b8      	blx	r7
 800efc2:	3001      	adds	r0, #1
 800efc4:	f43f af30 	beq.w	800ee28 <_printf_float+0x98>
 800efc8:	f109 0901 	add.w	r9, r9, #1
 800efcc:	e7e8      	b.n	800efa0 <_printf_float+0x210>
 800efce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800efd0:	2b00      	cmp	r3, #0
 800efd2:	dc3b      	bgt.n	800f04c <_printf_float+0x2bc>
 800efd4:	4a1c      	ldr	r2, [pc, #112]	@ (800f048 <_printf_float+0x2b8>)
 800efd6:	2301      	movs	r3, #1
 800efd8:	4631      	mov	r1, r6
 800efda:	4628      	mov	r0, r5
 800efdc:	47b8      	blx	r7
 800efde:	3001      	adds	r0, #1
 800efe0:	f43f af22 	beq.w	800ee28 <_printf_float+0x98>
 800efe4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800efe8:	ea59 0303 	orrs.w	r3, r9, r3
 800efec:	d102      	bne.n	800eff4 <_printf_float+0x264>
 800efee:	6823      	ldr	r3, [r4, #0]
 800eff0:	07d9      	lsls	r1, r3, #31
 800eff2:	d5d7      	bpl.n	800efa4 <_printf_float+0x214>
 800eff4:	9b05      	ldr	r3, [sp, #20]
 800eff6:	465a      	mov	r2, fp
 800eff8:	4631      	mov	r1, r6
 800effa:	4628      	mov	r0, r5
 800effc:	47b8      	blx	r7
 800effe:	3001      	adds	r0, #1
 800f000:	f43f af12 	beq.w	800ee28 <_printf_float+0x98>
 800f004:	f04f 0a00 	mov.w	sl, #0
 800f008:	f104 0b1a 	add.w	fp, r4, #26
 800f00c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f00e:	425b      	negs	r3, r3
 800f010:	4553      	cmp	r3, sl
 800f012:	dc01      	bgt.n	800f018 <_printf_float+0x288>
 800f014:	464b      	mov	r3, r9
 800f016:	e794      	b.n	800ef42 <_printf_float+0x1b2>
 800f018:	2301      	movs	r3, #1
 800f01a:	465a      	mov	r2, fp
 800f01c:	4631      	mov	r1, r6
 800f01e:	4628      	mov	r0, r5
 800f020:	47b8      	blx	r7
 800f022:	3001      	adds	r0, #1
 800f024:	f43f af00 	beq.w	800ee28 <_printf_float+0x98>
 800f028:	f10a 0a01 	add.w	sl, sl, #1
 800f02c:	e7ee      	b.n	800f00c <_printf_float+0x27c>
 800f02e:	bf00      	nop
 800f030:	ffffffff 	.word	0xffffffff
 800f034:	7fefffff 	.word	0x7fefffff
 800f038:	08012ea8 	.word	0x08012ea8
 800f03c:	08012eac 	.word	0x08012eac
 800f040:	08012eb0 	.word	0x08012eb0
 800f044:	08012eb4 	.word	0x08012eb4
 800f048:	08013258 	.word	0x08013258
 800f04c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800f04e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800f052:	4553      	cmp	r3, sl
 800f054:	bfa8      	it	ge
 800f056:	4653      	movge	r3, sl
 800f058:	2b00      	cmp	r3, #0
 800f05a:	4699      	mov	r9, r3
 800f05c:	dc37      	bgt.n	800f0ce <_printf_float+0x33e>
 800f05e:	2300      	movs	r3, #0
 800f060:	9307      	str	r3, [sp, #28]
 800f062:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f066:	f104 021a 	add.w	r2, r4, #26
 800f06a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800f06c:	9907      	ldr	r1, [sp, #28]
 800f06e:	9306      	str	r3, [sp, #24]
 800f070:	eba3 0309 	sub.w	r3, r3, r9
 800f074:	428b      	cmp	r3, r1
 800f076:	dc31      	bgt.n	800f0dc <_printf_float+0x34c>
 800f078:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f07a:	459a      	cmp	sl, r3
 800f07c:	dc3b      	bgt.n	800f0f6 <_printf_float+0x366>
 800f07e:	6823      	ldr	r3, [r4, #0]
 800f080:	07da      	lsls	r2, r3, #31
 800f082:	d438      	bmi.n	800f0f6 <_printf_float+0x366>
 800f084:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f086:	ebaa 0903 	sub.w	r9, sl, r3
 800f08a:	9b06      	ldr	r3, [sp, #24]
 800f08c:	ebaa 0303 	sub.w	r3, sl, r3
 800f090:	4599      	cmp	r9, r3
 800f092:	bfa8      	it	ge
 800f094:	4699      	movge	r9, r3
 800f096:	f1b9 0f00 	cmp.w	r9, #0
 800f09a:	dc34      	bgt.n	800f106 <_printf_float+0x376>
 800f09c:	f04f 0800 	mov.w	r8, #0
 800f0a0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f0a4:	f104 0b1a 	add.w	fp, r4, #26
 800f0a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f0aa:	ebaa 0303 	sub.w	r3, sl, r3
 800f0ae:	eba3 0309 	sub.w	r3, r3, r9
 800f0b2:	4543      	cmp	r3, r8
 800f0b4:	f77f af76 	ble.w	800efa4 <_printf_float+0x214>
 800f0b8:	2301      	movs	r3, #1
 800f0ba:	465a      	mov	r2, fp
 800f0bc:	4631      	mov	r1, r6
 800f0be:	4628      	mov	r0, r5
 800f0c0:	47b8      	blx	r7
 800f0c2:	3001      	adds	r0, #1
 800f0c4:	f43f aeb0 	beq.w	800ee28 <_printf_float+0x98>
 800f0c8:	f108 0801 	add.w	r8, r8, #1
 800f0cc:	e7ec      	b.n	800f0a8 <_printf_float+0x318>
 800f0ce:	4642      	mov	r2, r8
 800f0d0:	4631      	mov	r1, r6
 800f0d2:	4628      	mov	r0, r5
 800f0d4:	47b8      	blx	r7
 800f0d6:	3001      	adds	r0, #1
 800f0d8:	d1c1      	bne.n	800f05e <_printf_float+0x2ce>
 800f0da:	e6a5      	b.n	800ee28 <_printf_float+0x98>
 800f0dc:	2301      	movs	r3, #1
 800f0de:	4631      	mov	r1, r6
 800f0e0:	4628      	mov	r0, r5
 800f0e2:	9206      	str	r2, [sp, #24]
 800f0e4:	47b8      	blx	r7
 800f0e6:	3001      	adds	r0, #1
 800f0e8:	f43f ae9e 	beq.w	800ee28 <_printf_float+0x98>
 800f0ec:	9b07      	ldr	r3, [sp, #28]
 800f0ee:	9a06      	ldr	r2, [sp, #24]
 800f0f0:	3301      	adds	r3, #1
 800f0f2:	9307      	str	r3, [sp, #28]
 800f0f4:	e7b9      	b.n	800f06a <_printf_float+0x2da>
 800f0f6:	9b05      	ldr	r3, [sp, #20]
 800f0f8:	465a      	mov	r2, fp
 800f0fa:	4631      	mov	r1, r6
 800f0fc:	4628      	mov	r0, r5
 800f0fe:	47b8      	blx	r7
 800f100:	3001      	adds	r0, #1
 800f102:	d1bf      	bne.n	800f084 <_printf_float+0x2f4>
 800f104:	e690      	b.n	800ee28 <_printf_float+0x98>
 800f106:	9a06      	ldr	r2, [sp, #24]
 800f108:	464b      	mov	r3, r9
 800f10a:	4442      	add	r2, r8
 800f10c:	4631      	mov	r1, r6
 800f10e:	4628      	mov	r0, r5
 800f110:	47b8      	blx	r7
 800f112:	3001      	adds	r0, #1
 800f114:	d1c2      	bne.n	800f09c <_printf_float+0x30c>
 800f116:	e687      	b.n	800ee28 <_printf_float+0x98>
 800f118:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800f11c:	f1b9 0f01 	cmp.w	r9, #1
 800f120:	dc01      	bgt.n	800f126 <_printf_float+0x396>
 800f122:	07db      	lsls	r3, r3, #31
 800f124:	d536      	bpl.n	800f194 <_printf_float+0x404>
 800f126:	2301      	movs	r3, #1
 800f128:	4642      	mov	r2, r8
 800f12a:	4631      	mov	r1, r6
 800f12c:	4628      	mov	r0, r5
 800f12e:	47b8      	blx	r7
 800f130:	3001      	adds	r0, #1
 800f132:	f43f ae79 	beq.w	800ee28 <_printf_float+0x98>
 800f136:	9b05      	ldr	r3, [sp, #20]
 800f138:	465a      	mov	r2, fp
 800f13a:	4631      	mov	r1, r6
 800f13c:	4628      	mov	r0, r5
 800f13e:	47b8      	blx	r7
 800f140:	3001      	adds	r0, #1
 800f142:	f43f ae71 	beq.w	800ee28 <_printf_float+0x98>
 800f146:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800f14a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f14e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f152:	f109 39ff 	add.w	r9, r9, #4294967295
 800f156:	d018      	beq.n	800f18a <_printf_float+0x3fa>
 800f158:	464b      	mov	r3, r9
 800f15a:	f108 0201 	add.w	r2, r8, #1
 800f15e:	4631      	mov	r1, r6
 800f160:	4628      	mov	r0, r5
 800f162:	47b8      	blx	r7
 800f164:	3001      	adds	r0, #1
 800f166:	d10c      	bne.n	800f182 <_printf_float+0x3f2>
 800f168:	e65e      	b.n	800ee28 <_printf_float+0x98>
 800f16a:	2301      	movs	r3, #1
 800f16c:	465a      	mov	r2, fp
 800f16e:	4631      	mov	r1, r6
 800f170:	4628      	mov	r0, r5
 800f172:	47b8      	blx	r7
 800f174:	3001      	adds	r0, #1
 800f176:	f43f ae57 	beq.w	800ee28 <_printf_float+0x98>
 800f17a:	f108 0801 	add.w	r8, r8, #1
 800f17e:	45c8      	cmp	r8, r9
 800f180:	dbf3      	blt.n	800f16a <_printf_float+0x3da>
 800f182:	4653      	mov	r3, sl
 800f184:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800f188:	e6dc      	b.n	800ef44 <_printf_float+0x1b4>
 800f18a:	f04f 0800 	mov.w	r8, #0
 800f18e:	f104 0b1a 	add.w	fp, r4, #26
 800f192:	e7f4      	b.n	800f17e <_printf_float+0x3ee>
 800f194:	2301      	movs	r3, #1
 800f196:	4642      	mov	r2, r8
 800f198:	e7e1      	b.n	800f15e <_printf_float+0x3ce>
 800f19a:	2301      	movs	r3, #1
 800f19c:	464a      	mov	r2, r9
 800f19e:	4631      	mov	r1, r6
 800f1a0:	4628      	mov	r0, r5
 800f1a2:	47b8      	blx	r7
 800f1a4:	3001      	adds	r0, #1
 800f1a6:	f43f ae3f 	beq.w	800ee28 <_printf_float+0x98>
 800f1aa:	f108 0801 	add.w	r8, r8, #1
 800f1ae:	68e3      	ldr	r3, [r4, #12]
 800f1b0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800f1b2:	1a5b      	subs	r3, r3, r1
 800f1b4:	4543      	cmp	r3, r8
 800f1b6:	dcf0      	bgt.n	800f19a <_printf_float+0x40a>
 800f1b8:	e6f8      	b.n	800efac <_printf_float+0x21c>
 800f1ba:	f04f 0800 	mov.w	r8, #0
 800f1be:	f104 0919 	add.w	r9, r4, #25
 800f1c2:	e7f4      	b.n	800f1ae <_printf_float+0x41e>

0800f1c4 <_printf_common>:
 800f1c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f1c8:	4616      	mov	r6, r2
 800f1ca:	4698      	mov	r8, r3
 800f1cc:	688a      	ldr	r2, [r1, #8]
 800f1ce:	690b      	ldr	r3, [r1, #16]
 800f1d0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f1d4:	4293      	cmp	r3, r2
 800f1d6:	bfb8      	it	lt
 800f1d8:	4613      	movlt	r3, r2
 800f1da:	6033      	str	r3, [r6, #0]
 800f1dc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800f1e0:	4607      	mov	r7, r0
 800f1e2:	460c      	mov	r4, r1
 800f1e4:	b10a      	cbz	r2, 800f1ea <_printf_common+0x26>
 800f1e6:	3301      	adds	r3, #1
 800f1e8:	6033      	str	r3, [r6, #0]
 800f1ea:	6823      	ldr	r3, [r4, #0]
 800f1ec:	0699      	lsls	r1, r3, #26
 800f1ee:	bf42      	ittt	mi
 800f1f0:	6833      	ldrmi	r3, [r6, #0]
 800f1f2:	3302      	addmi	r3, #2
 800f1f4:	6033      	strmi	r3, [r6, #0]
 800f1f6:	6825      	ldr	r5, [r4, #0]
 800f1f8:	f015 0506 	ands.w	r5, r5, #6
 800f1fc:	d106      	bne.n	800f20c <_printf_common+0x48>
 800f1fe:	f104 0a19 	add.w	sl, r4, #25
 800f202:	68e3      	ldr	r3, [r4, #12]
 800f204:	6832      	ldr	r2, [r6, #0]
 800f206:	1a9b      	subs	r3, r3, r2
 800f208:	42ab      	cmp	r3, r5
 800f20a:	dc26      	bgt.n	800f25a <_printf_common+0x96>
 800f20c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800f210:	6822      	ldr	r2, [r4, #0]
 800f212:	3b00      	subs	r3, #0
 800f214:	bf18      	it	ne
 800f216:	2301      	movne	r3, #1
 800f218:	0692      	lsls	r2, r2, #26
 800f21a:	d42b      	bmi.n	800f274 <_printf_common+0xb0>
 800f21c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800f220:	4641      	mov	r1, r8
 800f222:	4638      	mov	r0, r7
 800f224:	47c8      	blx	r9
 800f226:	3001      	adds	r0, #1
 800f228:	d01e      	beq.n	800f268 <_printf_common+0xa4>
 800f22a:	6823      	ldr	r3, [r4, #0]
 800f22c:	6922      	ldr	r2, [r4, #16]
 800f22e:	f003 0306 	and.w	r3, r3, #6
 800f232:	2b04      	cmp	r3, #4
 800f234:	bf02      	ittt	eq
 800f236:	68e5      	ldreq	r5, [r4, #12]
 800f238:	6833      	ldreq	r3, [r6, #0]
 800f23a:	1aed      	subeq	r5, r5, r3
 800f23c:	68a3      	ldr	r3, [r4, #8]
 800f23e:	bf0c      	ite	eq
 800f240:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f244:	2500      	movne	r5, #0
 800f246:	4293      	cmp	r3, r2
 800f248:	bfc4      	itt	gt
 800f24a:	1a9b      	subgt	r3, r3, r2
 800f24c:	18ed      	addgt	r5, r5, r3
 800f24e:	2600      	movs	r6, #0
 800f250:	341a      	adds	r4, #26
 800f252:	42b5      	cmp	r5, r6
 800f254:	d11a      	bne.n	800f28c <_printf_common+0xc8>
 800f256:	2000      	movs	r0, #0
 800f258:	e008      	b.n	800f26c <_printf_common+0xa8>
 800f25a:	2301      	movs	r3, #1
 800f25c:	4652      	mov	r2, sl
 800f25e:	4641      	mov	r1, r8
 800f260:	4638      	mov	r0, r7
 800f262:	47c8      	blx	r9
 800f264:	3001      	adds	r0, #1
 800f266:	d103      	bne.n	800f270 <_printf_common+0xac>
 800f268:	f04f 30ff 	mov.w	r0, #4294967295
 800f26c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f270:	3501      	adds	r5, #1
 800f272:	e7c6      	b.n	800f202 <_printf_common+0x3e>
 800f274:	18e1      	adds	r1, r4, r3
 800f276:	1c5a      	adds	r2, r3, #1
 800f278:	2030      	movs	r0, #48	@ 0x30
 800f27a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800f27e:	4422      	add	r2, r4
 800f280:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800f284:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800f288:	3302      	adds	r3, #2
 800f28a:	e7c7      	b.n	800f21c <_printf_common+0x58>
 800f28c:	2301      	movs	r3, #1
 800f28e:	4622      	mov	r2, r4
 800f290:	4641      	mov	r1, r8
 800f292:	4638      	mov	r0, r7
 800f294:	47c8      	blx	r9
 800f296:	3001      	adds	r0, #1
 800f298:	d0e6      	beq.n	800f268 <_printf_common+0xa4>
 800f29a:	3601      	adds	r6, #1
 800f29c:	e7d9      	b.n	800f252 <_printf_common+0x8e>
	...

0800f2a0 <_printf_i>:
 800f2a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f2a4:	7e0f      	ldrb	r7, [r1, #24]
 800f2a6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800f2a8:	2f78      	cmp	r7, #120	@ 0x78
 800f2aa:	4691      	mov	r9, r2
 800f2ac:	4680      	mov	r8, r0
 800f2ae:	460c      	mov	r4, r1
 800f2b0:	469a      	mov	sl, r3
 800f2b2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800f2b6:	d807      	bhi.n	800f2c8 <_printf_i+0x28>
 800f2b8:	2f62      	cmp	r7, #98	@ 0x62
 800f2ba:	d80a      	bhi.n	800f2d2 <_printf_i+0x32>
 800f2bc:	2f00      	cmp	r7, #0
 800f2be:	f000 80d2 	beq.w	800f466 <_printf_i+0x1c6>
 800f2c2:	2f58      	cmp	r7, #88	@ 0x58
 800f2c4:	f000 80b9 	beq.w	800f43a <_printf_i+0x19a>
 800f2c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f2cc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800f2d0:	e03a      	b.n	800f348 <_printf_i+0xa8>
 800f2d2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800f2d6:	2b15      	cmp	r3, #21
 800f2d8:	d8f6      	bhi.n	800f2c8 <_printf_i+0x28>
 800f2da:	a101      	add	r1, pc, #4	@ (adr r1, 800f2e0 <_printf_i+0x40>)
 800f2dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f2e0:	0800f339 	.word	0x0800f339
 800f2e4:	0800f34d 	.word	0x0800f34d
 800f2e8:	0800f2c9 	.word	0x0800f2c9
 800f2ec:	0800f2c9 	.word	0x0800f2c9
 800f2f0:	0800f2c9 	.word	0x0800f2c9
 800f2f4:	0800f2c9 	.word	0x0800f2c9
 800f2f8:	0800f34d 	.word	0x0800f34d
 800f2fc:	0800f2c9 	.word	0x0800f2c9
 800f300:	0800f2c9 	.word	0x0800f2c9
 800f304:	0800f2c9 	.word	0x0800f2c9
 800f308:	0800f2c9 	.word	0x0800f2c9
 800f30c:	0800f44d 	.word	0x0800f44d
 800f310:	0800f377 	.word	0x0800f377
 800f314:	0800f407 	.word	0x0800f407
 800f318:	0800f2c9 	.word	0x0800f2c9
 800f31c:	0800f2c9 	.word	0x0800f2c9
 800f320:	0800f46f 	.word	0x0800f46f
 800f324:	0800f2c9 	.word	0x0800f2c9
 800f328:	0800f377 	.word	0x0800f377
 800f32c:	0800f2c9 	.word	0x0800f2c9
 800f330:	0800f2c9 	.word	0x0800f2c9
 800f334:	0800f40f 	.word	0x0800f40f
 800f338:	6833      	ldr	r3, [r6, #0]
 800f33a:	1d1a      	adds	r2, r3, #4
 800f33c:	681b      	ldr	r3, [r3, #0]
 800f33e:	6032      	str	r2, [r6, #0]
 800f340:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f344:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800f348:	2301      	movs	r3, #1
 800f34a:	e09d      	b.n	800f488 <_printf_i+0x1e8>
 800f34c:	6833      	ldr	r3, [r6, #0]
 800f34e:	6820      	ldr	r0, [r4, #0]
 800f350:	1d19      	adds	r1, r3, #4
 800f352:	6031      	str	r1, [r6, #0]
 800f354:	0606      	lsls	r6, r0, #24
 800f356:	d501      	bpl.n	800f35c <_printf_i+0xbc>
 800f358:	681d      	ldr	r5, [r3, #0]
 800f35a:	e003      	b.n	800f364 <_printf_i+0xc4>
 800f35c:	0645      	lsls	r5, r0, #25
 800f35e:	d5fb      	bpl.n	800f358 <_printf_i+0xb8>
 800f360:	f9b3 5000 	ldrsh.w	r5, [r3]
 800f364:	2d00      	cmp	r5, #0
 800f366:	da03      	bge.n	800f370 <_printf_i+0xd0>
 800f368:	232d      	movs	r3, #45	@ 0x2d
 800f36a:	426d      	negs	r5, r5
 800f36c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f370:	4859      	ldr	r0, [pc, #356]	@ (800f4d8 <_printf_i+0x238>)
 800f372:	230a      	movs	r3, #10
 800f374:	e011      	b.n	800f39a <_printf_i+0xfa>
 800f376:	6821      	ldr	r1, [r4, #0]
 800f378:	6833      	ldr	r3, [r6, #0]
 800f37a:	0608      	lsls	r0, r1, #24
 800f37c:	f853 5b04 	ldr.w	r5, [r3], #4
 800f380:	d402      	bmi.n	800f388 <_printf_i+0xe8>
 800f382:	0649      	lsls	r1, r1, #25
 800f384:	bf48      	it	mi
 800f386:	b2ad      	uxthmi	r5, r5
 800f388:	2f6f      	cmp	r7, #111	@ 0x6f
 800f38a:	4853      	ldr	r0, [pc, #332]	@ (800f4d8 <_printf_i+0x238>)
 800f38c:	6033      	str	r3, [r6, #0]
 800f38e:	bf14      	ite	ne
 800f390:	230a      	movne	r3, #10
 800f392:	2308      	moveq	r3, #8
 800f394:	2100      	movs	r1, #0
 800f396:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800f39a:	6866      	ldr	r6, [r4, #4]
 800f39c:	60a6      	str	r6, [r4, #8]
 800f39e:	2e00      	cmp	r6, #0
 800f3a0:	bfa2      	ittt	ge
 800f3a2:	6821      	ldrge	r1, [r4, #0]
 800f3a4:	f021 0104 	bicge.w	r1, r1, #4
 800f3a8:	6021      	strge	r1, [r4, #0]
 800f3aa:	b90d      	cbnz	r5, 800f3b0 <_printf_i+0x110>
 800f3ac:	2e00      	cmp	r6, #0
 800f3ae:	d04b      	beq.n	800f448 <_printf_i+0x1a8>
 800f3b0:	4616      	mov	r6, r2
 800f3b2:	fbb5 f1f3 	udiv	r1, r5, r3
 800f3b6:	fb03 5711 	mls	r7, r3, r1, r5
 800f3ba:	5dc7      	ldrb	r7, [r0, r7]
 800f3bc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f3c0:	462f      	mov	r7, r5
 800f3c2:	42bb      	cmp	r3, r7
 800f3c4:	460d      	mov	r5, r1
 800f3c6:	d9f4      	bls.n	800f3b2 <_printf_i+0x112>
 800f3c8:	2b08      	cmp	r3, #8
 800f3ca:	d10b      	bne.n	800f3e4 <_printf_i+0x144>
 800f3cc:	6823      	ldr	r3, [r4, #0]
 800f3ce:	07df      	lsls	r7, r3, #31
 800f3d0:	d508      	bpl.n	800f3e4 <_printf_i+0x144>
 800f3d2:	6923      	ldr	r3, [r4, #16]
 800f3d4:	6861      	ldr	r1, [r4, #4]
 800f3d6:	4299      	cmp	r1, r3
 800f3d8:	bfde      	ittt	le
 800f3da:	2330      	movle	r3, #48	@ 0x30
 800f3dc:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f3e0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800f3e4:	1b92      	subs	r2, r2, r6
 800f3e6:	6122      	str	r2, [r4, #16]
 800f3e8:	f8cd a000 	str.w	sl, [sp]
 800f3ec:	464b      	mov	r3, r9
 800f3ee:	aa03      	add	r2, sp, #12
 800f3f0:	4621      	mov	r1, r4
 800f3f2:	4640      	mov	r0, r8
 800f3f4:	f7ff fee6 	bl	800f1c4 <_printf_common>
 800f3f8:	3001      	adds	r0, #1
 800f3fa:	d14a      	bne.n	800f492 <_printf_i+0x1f2>
 800f3fc:	f04f 30ff 	mov.w	r0, #4294967295
 800f400:	b004      	add	sp, #16
 800f402:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f406:	6823      	ldr	r3, [r4, #0]
 800f408:	f043 0320 	orr.w	r3, r3, #32
 800f40c:	6023      	str	r3, [r4, #0]
 800f40e:	4833      	ldr	r0, [pc, #204]	@ (800f4dc <_printf_i+0x23c>)
 800f410:	2778      	movs	r7, #120	@ 0x78
 800f412:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800f416:	6823      	ldr	r3, [r4, #0]
 800f418:	6831      	ldr	r1, [r6, #0]
 800f41a:	061f      	lsls	r7, r3, #24
 800f41c:	f851 5b04 	ldr.w	r5, [r1], #4
 800f420:	d402      	bmi.n	800f428 <_printf_i+0x188>
 800f422:	065f      	lsls	r7, r3, #25
 800f424:	bf48      	it	mi
 800f426:	b2ad      	uxthmi	r5, r5
 800f428:	6031      	str	r1, [r6, #0]
 800f42a:	07d9      	lsls	r1, r3, #31
 800f42c:	bf44      	itt	mi
 800f42e:	f043 0320 	orrmi.w	r3, r3, #32
 800f432:	6023      	strmi	r3, [r4, #0]
 800f434:	b11d      	cbz	r5, 800f43e <_printf_i+0x19e>
 800f436:	2310      	movs	r3, #16
 800f438:	e7ac      	b.n	800f394 <_printf_i+0xf4>
 800f43a:	4827      	ldr	r0, [pc, #156]	@ (800f4d8 <_printf_i+0x238>)
 800f43c:	e7e9      	b.n	800f412 <_printf_i+0x172>
 800f43e:	6823      	ldr	r3, [r4, #0]
 800f440:	f023 0320 	bic.w	r3, r3, #32
 800f444:	6023      	str	r3, [r4, #0]
 800f446:	e7f6      	b.n	800f436 <_printf_i+0x196>
 800f448:	4616      	mov	r6, r2
 800f44a:	e7bd      	b.n	800f3c8 <_printf_i+0x128>
 800f44c:	6833      	ldr	r3, [r6, #0]
 800f44e:	6825      	ldr	r5, [r4, #0]
 800f450:	6961      	ldr	r1, [r4, #20]
 800f452:	1d18      	adds	r0, r3, #4
 800f454:	6030      	str	r0, [r6, #0]
 800f456:	062e      	lsls	r6, r5, #24
 800f458:	681b      	ldr	r3, [r3, #0]
 800f45a:	d501      	bpl.n	800f460 <_printf_i+0x1c0>
 800f45c:	6019      	str	r1, [r3, #0]
 800f45e:	e002      	b.n	800f466 <_printf_i+0x1c6>
 800f460:	0668      	lsls	r0, r5, #25
 800f462:	d5fb      	bpl.n	800f45c <_printf_i+0x1bc>
 800f464:	8019      	strh	r1, [r3, #0]
 800f466:	2300      	movs	r3, #0
 800f468:	6123      	str	r3, [r4, #16]
 800f46a:	4616      	mov	r6, r2
 800f46c:	e7bc      	b.n	800f3e8 <_printf_i+0x148>
 800f46e:	6833      	ldr	r3, [r6, #0]
 800f470:	1d1a      	adds	r2, r3, #4
 800f472:	6032      	str	r2, [r6, #0]
 800f474:	681e      	ldr	r6, [r3, #0]
 800f476:	6862      	ldr	r2, [r4, #4]
 800f478:	2100      	movs	r1, #0
 800f47a:	4630      	mov	r0, r6
 800f47c:	f7f0 ff48 	bl	8000310 <memchr>
 800f480:	b108      	cbz	r0, 800f486 <_printf_i+0x1e6>
 800f482:	1b80      	subs	r0, r0, r6
 800f484:	6060      	str	r0, [r4, #4]
 800f486:	6863      	ldr	r3, [r4, #4]
 800f488:	6123      	str	r3, [r4, #16]
 800f48a:	2300      	movs	r3, #0
 800f48c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f490:	e7aa      	b.n	800f3e8 <_printf_i+0x148>
 800f492:	6923      	ldr	r3, [r4, #16]
 800f494:	4632      	mov	r2, r6
 800f496:	4649      	mov	r1, r9
 800f498:	4640      	mov	r0, r8
 800f49a:	47d0      	blx	sl
 800f49c:	3001      	adds	r0, #1
 800f49e:	d0ad      	beq.n	800f3fc <_printf_i+0x15c>
 800f4a0:	6823      	ldr	r3, [r4, #0]
 800f4a2:	079b      	lsls	r3, r3, #30
 800f4a4:	d413      	bmi.n	800f4ce <_printf_i+0x22e>
 800f4a6:	68e0      	ldr	r0, [r4, #12]
 800f4a8:	9b03      	ldr	r3, [sp, #12]
 800f4aa:	4298      	cmp	r0, r3
 800f4ac:	bfb8      	it	lt
 800f4ae:	4618      	movlt	r0, r3
 800f4b0:	e7a6      	b.n	800f400 <_printf_i+0x160>
 800f4b2:	2301      	movs	r3, #1
 800f4b4:	4632      	mov	r2, r6
 800f4b6:	4649      	mov	r1, r9
 800f4b8:	4640      	mov	r0, r8
 800f4ba:	47d0      	blx	sl
 800f4bc:	3001      	adds	r0, #1
 800f4be:	d09d      	beq.n	800f3fc <_printf_i+0x15c>
 800f4c0:	3501      	adds	r5, #1
 800f4c2:	68e3      	ldr	r3, [r4, #12]
 800f4c4:	9903      	ldr	r1, [sp, #12]
 800f4c6:	1a5b      	subs	r3, r3, r1
 800f4c8:	42ab      	cmp	r3, r5
 800f4ca:	dcf2      	bgt.n	800f4b2 <_printf_i+0x212>
 800f4cc:	e7eb      	b.n	800f4a6 <_printf_i+0x206>
 800f4ce:	2500      	movs	r5, #0
 800f4d0:	f104 0619 	add.w	r6, r4, #25
 800f4d4:	e7f5      	b.n	800f4c2 <_printf_i+0x222>
 800f4d6:	bf00      	nop
 800f4d8:	08012eb8 	.word	0x08012eb8
 800f4dc:	08012ec9 	.word	0x08012ec9

0800f4e0 <_scanf_float>:
 800f4e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f4e4:	b087      	sub	sp, #28
 800f4e6:	4617      	mov	r7, r2
 800f4e8:	9303      	str	r3, [sp, #12]
 800f4ea:	688b      	ldr	r3, [r1, #8]
 800f4ec:	1e5a      	subs	r2, r3, #1
 800f4ee:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800f4f2:	bf81      	itttt	hi
 800f4f4:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800f4f8:	eb03 0b05 	addhi.w	fp, r3, r5
 800f4fc:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800f500:	608b      	strhi	r3, [r1, #8]
 800f502:	680b      	ldr	r3, [r1, #0]
 800f504:	460a      	mov	r2, r1
 800f506:	f04f 0500 	mov.w	r5, #0
 800f50a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800f50e:	f842 3b1c 	str.w	r3, [r2], #28
 800f512:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800f516:	4680      	mov	r8, r0
 800f518:	460c      	mov	r4, r1
 800f51a:	bf98      	it	ls
 800f51c:	f04f 0b00 	movls.w	fp, #0
 800f520:	9201      	str	r2, [sp, #4]
 800f522:	4616      	mov	r6, r2
 800f524:	46aa      	mov	sl, r5
 800f526:	46a9      	mov	r9, r5
 800f528:	9502      	str	r5, [sp, #8]
 800f52a:	68a2      	ldr	r2, [r4, #8]
 800f52c:	b152      	cbz	r2, 800f544 <_scanf_float+0x64>
 800f52e:	683b      	ldr	r3, [r7, #0]
 800f530:	781b      	ldrb	r3, [r3, #0]
 800f532:	2b4e      	cmp	r3, #78	@ 0x4e
 800f534:	d864      	bhi.n	800f600 <_scanf_float+0x120>
 800f536:	2b40      	cmp	r3, #64	@ 0x40
 800f538:	d83c      	bhi.n	800f5b4 <_scanf_float+0xd4>
 800f53a:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800f53e:	b2c8      	uxtb	r0, r1
 800f540:	280e      	cmp	r0, #14
 800f542:	d93a      	bls.n	800f5ba <_scanf_float+0xda>
 800f544:	f1b9 0f00 	cmp.w	r9, #0
 800f548:	d003      	beq.n	800f552 <_scanf_float+0x72>
 800f54a:	6823      	ldr	r3, [r4, #0]
 800f54c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f550:	6023      	str	r3, [r4, #0]
 800f552:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f556:	f1ba 0f01 	cmp.w	sl, #1
 800f55a:	f200 8117 	bhi.w	800f78c <_scanf_float+0x2ac>
 800f55e:	9b01      	ldr	r3, [sp, #4]
 800f560:	429e      	cmp	r6, r3
 800f562:	f200 8108 	bhi.w	800f776 <_scanf_float+0x296>
 800f566:	2001      	movs	r0, #1
 800f568:	b007      	add	sp, #28
 800f56a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f56e:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800f572:	2a0d      	cmp	r2, #13
 800f574:	d8e6      	bhi.n	800f544 <_scanf_float+0x64>
 800f576:	a101      	add	r1, pc, #4	@ (adr r1, 800f57c <_scanf_float+0x9c>)
 800f578:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800f57c:	0800f6c3 	.word	0x0800f6c3
 800f580:	0800f545 	.word	0x0800f545
 800f584:	0800f545 	.word	0x0800f545
 800f588:	0800f545 	.word	0x0800f545
 800f58c:	0800f723 	.word	0x0800f723
 800f590:	0800f6fb 	.word	0x0800f6fb
 800f594:	0800f545 	.word	0x0800f545
 800f598:	0800f545 	.word	0x0800f545
 800f59c:	0800f6d1 	.word	0x0800f6d1
 800f5a0:	0800f545 	.word	0x0800f545
 800f5a4:	0800f545 	.word	0x0800f545
 800f5a8:	0800f545 	.word	0x0800f545
 800f5ac:	0800f545 	.word	0x0800f545
 800f5b0:	0800f689 	.word	0x0800f689
 800f5b4:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800f5b8:	e7db      	b.n	800f572 <_scanf_float+0x92>
 800f5ba:	290e      	cmp	r1, #14
 800f5bc:	d8c2      	bhi.n	800f544 <_scanf_float+0x64>
 800f5be:	a001      	add	r0, pc, #4	@ (adr r0, 800f5c4 <_scanf_float+0xe4>)
 800f5c0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800f5c4:	0800f679 	.word	0x0800f679
 800f5c8:	0800f545 	.word	0x0800f545
 800f5cc:	0800f679 	.word	0x0800f679
 800f5d0:	0800f70f 	.word	0x0800f70f
 800f5d4:	0800f545 	.word	0x0800f545
 800f5d8:	0800f621 	.word	0x0800f621
 800f5dc:	0800f65f 	.word	0x0800f65f
 800f5e0:	0800f65f 	.word	0x0800f65f
 800f5e4:	0800f65f 	.word	0x0800f65f
 800f5e8:	0800f65f 	.word	0x0800f65f
 800f5ec:	0800f65f 	.word	0x0800f65f
 800f5f0:	0800f65f 	.word	0x0800f65f
 800f5f4:	0800f65f 	.word	0x0800f65f
 800f5f8:	0800f65f 	.word	0x0800f65f
 800f5fc:	0800f65f 	.word	0x0800f65f
 800f600:	2b6e      	cmp	r3, #110	@ 0x6e
 800f602:	d809      	bhi.n	800f618 <_scanf_float+0x138>
 800f604:	2b60      	cmp	r3, #96	@ 0x60
 800f606:	d8b2      	bhi.n	800f56e <_scanf_float+0x8e>
 800f608:	2b54      	cmp	r3, #84	@ 0x54
 800f60a:	d07b      	beq.n	800f704 <_scanf_float+0x224>
 800f60c:	2b59      	cmp	r3, #89	@ 0x59
 800f60e:	d199      	bne.n	800f544 <_scanf_float+0x64>
 800f610:	2d07      	cmp	r5, #7
 800f612:	d197      	bne.n	800f544 <_scanf_float+0x64>
 800f614:	2508      	movs	r5, #8
 800f616:	e02c      	b.n	800f672 <_scanf_float+0x192>
 800f618:	2b74      	cmp	r3, #116	@ 0x74
 800f61a:	d073      	beq.n	800f704 <_scanf_float+0x224>
 800f61c:	2b79      	cmp	r3, #121	@ 0x79
 800f61e:	e7f6      	b.n	800f60e <_scanf_float+0x12e>
 800f620:	6821      	ldr	r1, [r4, #0]
 800f622:	05c8      	lsls	r0, r1, #23
 800f624:	d51b      	bpl.n	800f65e <_scanf_float+0x17e>
 800f626:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800f62a:	6021      	str	r1, [r4, #0]
 800f62c:	f109 0901 	add.w	r9, r9, #1
 800f630:	f1bb 0f00 	cmp.w	fp, #0
 800f634:	d003      	beq.n	800f63e <_scanf_float+0x15e>
 800f636:	3201      	adds	r2, #1
 800f638:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f63c:	60a2      	str	r2, [r4, #8]
 800f63e:	68a3      	ldr	r3, [r4, #8]
 800f640:	3b01      	subs	r3, #1
 800f642:	60a3      	str	r3, [r4, #8]
 800f644:	6923      	ldr	r3, [r4, #16]
 800f646:	3301      	adds	r3, #1
 800f648:	6123      	str	r3, [r4, #16]
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	3b01      	subs	r3, #1
 800f64e:	2b00      	cmp	r3, #0
 800f650:	607b      	str	r3, [r7, #4]
 800f652:	f340 8087 	ble.w	800f764 <_scanf_float+0x284>
 800f656:	683b      	ldr	r3, [r7, #0]
 800f658:	3301      	adds	r3, #1
 800f65a:	603b      	str	r3, [r7, #0]
 800f65c:	e765      	b.n	800f52a <_scanf_float+0x4a>
 800f65e:	eb1a 0105 	adds.w	r1, sl, r5
 800f662:	f47f af6f 	bne.w	800f544 <_scanf_float+0x64>
 800f666:	6822      	ldr	r2, [r4, #0]
 800f668:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800f66c:	6022      	str	r2, [r4, #0]
 800f66e:	460d      	mov	r5, r1
 800f670:	468a      	mov	sl, r1
 800f672:	f806 3b01 	strb.w	r3, [r6], #1
 800f676:	e7e2      	b.n	800f63e <_scanf_float+0x15e>
 800f678:	6822      	ldr	r2, [r4, #0]
 800f67a:	0610      	lsls	r0, r2, #24
 800f67c:	f57f af62 	bpl.w	800f544 <_scanf_float+0x64>
 800f680:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800f684:	6022      	str	r2, [r4, #0]
 800f686:	e7f4      	b.n	800f672 <_scanf_float+0x192>
 800f688:	f1ba 0f00 	cmp.w	sl, #0
 800f68c:	d10e      	bne.n	800f6ac <_scanf_float+0x1cc>
 800f68e:	f1b9 0f00 	cmp.w	r9, #0
 800f692:	d10e      	bne.n	800f6b2 <_scanf_float+0x1d2>
 800f694:	6822      	ldr	r2, [r4, #0]
 800f696:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800f69a:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800f69e:	d108      	bne.n	800f6b2 <_scanf_float+0x1d2>
 800f6a0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800f6a4:	6022      	str	r2, [r4, #0]
 800f6a6:	f04f 0a01 	mov.w	sl, #1
 800f6aa:	e7e2      	b.n	800f672 <_scanf_float+0x192>
 800f6ac:	f1ba 0f02 	cmp.w	sl, #2
 800f6b0:	d055      	beq.n	800f75e <_scanf_float+0x27e>
 800f6b2:	2d01      	cmp	r5, #1
 800f6b4:	d002      	beq.n	800f6bc <_scanf_float+0x1dc>
 800f6b6:	2d04      	cmp	r5, #4
 800f6b8:	f47f af44 	bne.w	800f544 <_scanf_float+0x64>
 800f6bc:	3501      	adds	r5, #1
 800f6be:	b2ed      	uxtb	r5, r5
 800f6c0:	e7d7      	b.n	800f672 <_scanf_float+0x192>
 800f6c2:	f1ba 0f01 	cmp.w	sl, #1
 800f6c6:	f47f af3d 	bne.w	800f544 <_scanf_float+0x64>
 800f6ca:	f04f 0a02 	mov.w	sl, #2
 800f6ce:	e7d0      	b.n	800f672 <_scanf_float+0x192>
 800f6d0:	b97d      	cbnz	r5, 800f6f2 <_scanf_float+0x212>
 800f6d2:	f1b9 0f00 	cmp.w	r9, #0
 800f6d6:	f47f af38 	bne.w	800f54a <_scanf_float+0x6a>
 800f6da:	6822      	ldr	r2, [r4, #0]
 800f6dc:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800f6e0:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800f6e4:	f040 8101 	bne.w	800f8ea <_scanf_float+0x40a>
 800f6e8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800f6ec:	6022      	str	r2, [r4, #0]
 800f6ee:	2501      	movs	r5, #1
 800f6f0:	e7bf      	b.n	800f672 <_scanf_float+0x192>
 800f6f2:	2d03      	cmp	r5, #3
 800f6f4:	d0e2      	beq.n	800f6bc <_scanf_float+0x1dc>
 800f6f6:	2d05      	cmp	r5, #5
 800f6f8:	e7de      	b.n	800f6b8 <_scanf_float+0x1d8>
 800f6fa:	2d02      	cmp	r5, #2
 800f6fc:	f47f af22 	bne.w	800f544 <_scanf_float+0x64>
 800f700:	2503      	movs	r5, #3
 800f702:	e7b6      	b.n	800f672 <_scanf_float+0x192>
 800f704:	2d06      	cmp	r5, #6
 800f706:	f47f af1d 	bne.w	800f544 <_scanf_float+0x64>
 800f70a:	2507      	movs	r5, #7
 800f70c:	e7b1      	b.n	800f672 <_scanf_float+0x192>
 800f70e:	6822      	ldr	r2, [r4, #0]
 800f710:	0591      	lsls	r1, r2, #22
 800f712:	f57f af17 	bpl.w	800f544 <_scanf_float+0x64>
 800f716:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800f71a:	6022      	str	r2, [r4, #0]
 800f71c:	f8cd 9008 	str.w	r9, [sp, #8]
 800f720:	e7a7      	b.n	800f672 <_scanf_float+0x192>
 800f722:	6822      	ldr	r2, [r4, #0]
 800f724:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800f728:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800f72c:	d006      	beq.n	800f73c <_scanf_float+0x25c>
 800f72e:	0550      	lsls	r0, r2, #21
 800f730:	f57f af08 	bpl.w	800f544 <_scanf_float+0x64>
 800f734:	f1b9 0f00 	cmp.w	r9, #0
 800f738:	f000 80d7 	beq.w	800f8ea <_scanf_float+0x40a>
 800f73c:	0591      	lsls	r1, r2, #22
 800f73e:	bf58      	it	pl
 800f740:	9902      	ldrpl	r1, [sp, #8]
 800f742:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800f746:	bf58      	it	pl
 800f748:	eba9 0101 	subpl.w	r1, r9, r1
 800f74c:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800f750:	bf58      	it	pl
 800f752:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800f756:	6022      	str	r2, [r4, #0]
 800f758:	f04f 0900 	mov.w	r9, #0
 800f75c:	e789      	b.n	800f672 <_scanf_float+0x192>
 800f75e:	f04f 0a03 	mov.w	sl, #3
 800f762:	e786      	b.n	800f672 <_scanf_float+0x192>
 800f764:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800f768:	4639      	mov	r1, r7
 800f76a:	4640      	mov	r0, r8
 800f76c:	4798      	blx	r3
 800f76e:	2800      	cmp	r0, #0
 800f770:	f43f aedb 	beq.w	800f52a <_scanf_float+0x4a>
 800f774:	e6e6      	b.n	800f544 <_scanf_float+0x64>
 800f776:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f77a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f77e:	463a      	mov	r2, r7
 800f780:	4640      	mov	r0, r8
 800f782:	4798      	blx	r3
 800f784:	6923      	ldr	r3, [r4, #16]
 800f786:	3b01      	subs	r3, #1
 800f788:	6123      	str	r3, [r4, #16]
 800f78a:	e6e8      	b.n	800f55e <_scanf_float+0x7e>
 800f78c:	1e6b      	subs	r3, r5, #1
 800f78e:	2b06      	cmp	r3, #6
 800f790:	d824      	bhi.n	800f7dc <_scanf_float+0x2fc>
 800f792:	2d02      	cmp	r5, #2
 800f794:	d836      	bhi.n	800f804 <_scanf_float+0x324>
 800f796:	9b01      	ldr	r3, [sp, #4]
 800f798:	429e      	cmp	r6, r3
 800f79a:	f67f aee4 	bls.w	800f566 <_scanf_float+0x86>
 800f79e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f7a2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f7a6:	463a      	mov	r2, r7
 800f7a8:	4640      	mov	r0, r8
 800f7aa:	4798      	blx	r3
 800f7ac:	6923      	ldr	r3, [r4, #16]
 800f7ae:	3b01      	subs	r3, #1
 800f7b0:	6123      	str	r3, [r4, #16]
 800f7b2:	e7f0      	b.n	800f796 <_scanf_float+0x2b6>
 800f7b4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f7b8:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800f7bc:	463a      	mov	r2, r7
 800f7be:	4640      	mov	r0, r8
 800f7c0:	4798      	blx	r3
 800f7c2:	6923      	ldr	r3, [r4, #16]
 800f7c4:	3b01      	subs	r3, #1
 800f7c6:	6123      	str	r3, [r4, #16]
 800f7c8:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f7cc:	fa5f fa8a 	uxtb.w	sl, sl
 800f7d0:	f1ba 0f02 	cmp.w	sl, #2
 800f7d4:	d1ee      	bne.n	800f7b4 <_scanf_float+0x2d4>
 800f7d6:	3d03      	subs	r5, #3
 800f7d8:	b2ed      	uxtb	r5, r5
 800f7da:	1b76      	subs	r6, r6, r5
 800f7dc:	6823      	ldr	r3, [r4, #0]
 800f7de:	05da      	lsls	r2, r3, #23
 800f7e0:	d530      	bpl.n	800f844 <_scanf_float+0x364>
 800f7e2:	055b      	lsls	r3, r3, #21
 800f7e4:	d511      	bpl.n	800f80a <_scanf_float+0x32a>
 800f7e6:	9b01      	ldr	r3, [sp, #4]
 800f7e8:	429e      	cmp	r6, r3
 800f7ea:	f67f aebc 	bls.w	800f566 <_scanf_float+0x86>
 800f7ee:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f7f2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f7f6:	463a      	mov	r2, r7
 800f7f8:	4640      	mov	r0, r8
 800f7fa:	4798      	blx	r3
 800f7fc:	6923      	ldr	r3, [r4, #16]
 800f7fe:	3b01      	subs	r3, #1
 800f800:	6123      	str	r3, [r4, #16]
 800f802:	e7f0      	b.n	800f7e6 <_scanf_float+0x306>
 800f804:	46aa      	mov	sl, r5
 800f806:	46b3      	mov	fp, r6
 800f808:	e7de      	b.n	800f7c8 <_scanf_float+0x2e8>
 800f80a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800f80e:	6923      	ldr	r3, [r4, #16]
 800f810:	2965      	cmp	r1, #101	@ 0x65
 800f812:	f103 33ff 	add.w	r3, r3, #4294967295
 800f816:	f106 35ff 	add.w	r5, r6, #4294967295
 800f81a:	6123      	str	r3, [r4, #16]
 800f81c:	d00c      	beq.n	800f838 <_scanf_float+0x358>
 800f81e:	2945      	cmp	r1, #69	@ 0x45
 800f820:	d00a      	beq.n	800f838 <_scanf_float+0x358>
 800f822:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f826:	463a      	mov	r2, r7
 800f828:	4640      	mov	r0, r8
 800f82a:	4798      	blx	r3
 800f82c:	6923      	ldr	r3, [r4, #16]
 800f82e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800f832:	3b01      	subs	r3, #1
 800f834:	1eb5      	subs	r5, r6, #2
 800f836:	6123      	str	r3, [r4, #16]
 800f838:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f83c:	463a      	mov	r2, r7
 800f83e:	4640      	mov	r0, r8
 800f840:	4798      	blx	r3
 800f842:	462e      	mov	r6, r5
 800f844:	6822      	ldr	r2, [r4, #0]
 800f846:	f012 0210 	ands.w	r2, r2, #16
 800f84a:	d001      	beq.n	800f850 <_scanf_float+0x370>
 800f84c:	2000      	movs	r0, #0
 800f84e:	e68b      	b.n	800f568 <_scanf_float+0x88>
 800f850:	7032      	strb	r2, [r6, #0]
 800f852:	6823      	ldr	r3, [r4, #0]
 800f854:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800f858:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f85c:	d11a      	bne.n	800f894 <_scanf_float+0x3b4>
 800f85e:	9b02      	ldr	r3, [sp, #8]
 800f860:	454b      	cmp	r3, r9
 800f862:	eba3 0209 	sub.w	r2, r3, r9
 800f866:	d121      	bne.n	800f8ac <_scanf_float+0x3cc>
 800f868:	9901      	ldr	r1, [sp, #4]
 800f86a:	2200      	movs	r2, #0
 800f86c:	4640      	mov	r0, r8
 800f86e:	f7ff f9f9 	bl	800ec64 <_strtod_r>
 800f872:	9b03      	ldr	r3, [sp, #12]
 800f874:	6821      	ldr	r1, [r4, #0]
 800f876:	681b      	ldr	r3, [r3, #0]
 800f878:	f011 0f02 	tst.w	r1, #2
 800f87c:	f103 0204 	add.w	r2, r3, #4
 800f880:	d01f      	beq.n	800f8c2 <_scanf_float+0x3e2>
 800f882:	9903      	ldr	r1, [sp, #12]
 800f884:	600a      	str	r2, [r1, #0]
 800f886:	681b      	ldr	r3, [r3, #0]
 800f888:	ed83 0b00 	vstr	d0, [r3]
 800f88c:	68e3      	ldr	r3, [r4, #12]
 800f88e:	3301      	adds	r3, #1
 800f890:	60e3      	str	r3, [r4, #12]
 800f892:	e7db      	b.n	800f84c <_scanf_float+0x36c>
 800f894:	9b04      	ldr	r3, [sp, #16]
 800f896:	2b00      	cmp	r3, #0
 800f898:	d0e6      	beq.n	800f868 <_scanf_float+0x388>
 800f89a:	9905      	ldr	r1, [sp, #20]
 800f89c:	230a      	movs	r3, #10
 800f89e:	3101      	adds	r1, #1
 800f8a0:	4640      	mov	r0, r8
 800f8a2:	f002 f8e7 	bl	8011a74 <_strtol_r>
 800f8a6:	9b04      	ldr	r3, [sp, #16]
 800f8a8:	9e05      	ldr	r6, [sp, #20]
 800f8aa:	1ac2      	subs	r2, r0, r3
 800f8ac:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800f8b0:	429e      	cmp	r6, r3
 800f8b2:	bf28      	it	cs
 800f8b4:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800f8b8:	490d      	ldr	r1, [pc, #52]	@ (800f8f0 <_scanf_float+0x410>)
 800f8ba:	4630      	mov	r0, r6
 800f8bc:	f000 f8de 	bl	800fa7c <siprintf>
 800f8c0:	e7d2      	b.n	800f868 <_scanf_float+0x388>
 800f8c2:	f011 0f04 	tst.w	r1, #4
 800f8c6:	9903      	ldr	r1, [sp, #12]
 800f8c8:	600a      	str	r2, [r1, #0]
 800f8ca:	d1dc      	bne.n	800f886 <_scanf_float+0x3a6>
 800f8cc:	eeb4 0b40 	vcmp.f64	d0, d0
 800f8d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f8d4:	681d      	ldr	r5, [r3, #0]
 800f8d6:	d705      	bvc.n	800f8e4 <_scanf_float+0x404>
 800f8d8:	4806      	ldr	r0, [pc, #24]	@ (800f8f4 <_scanf_float+0x414>)
 800f8da:	f000 fa25 	bl	800fd28 <nanf>
 800f8de:	ed85 0a00 	vstr	s0, [r5]
 800f8e2:	e7d3      	b.n	800f88c <_scanf_float+0x3ac>
 800f8e4:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800f8e8:	e7f9      	b.n	800f8de <_scanf_float+0x3fe>
 800f8ea:	f04f 0900 	mov.w	r9, #0
 800f8ee:	e630      	b.n	800f552 <_scanf_float+0x72>
 800f8f0:	08012eda 	.word	0x08012eda
 800f8f4:	08013298 	.word	0x08013298

0800f8f8 <std>:
 800f8f8:	2300      	movs	r3, #0
 800f8fa:	b510      	push	{r4, lr}
 800f8fc:	4604      	mov	r4, r0
 800f8fe:	e9c0 3300 	strd	r3, r3, [r0]
 800f902:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f906:	6083      	str	r3, [r0, #8]
 800f908:	8181      	strh	r1, [r0, #12]
 800f90a:	6643      	str	r3, [r0, #100]	@ 0x64
 800f90c:	81c2      	strh	r2, [r0, #14]
 800f90e:	6183      	str	r3, [r0, #24]
 800f910:	4619      	mov	r1, r3
 800f912:	2208      	movs	r2, #8
 800f914:	305c      	adds	r0, #92	@ 0x5c
 800f916:	f000 f940 	bl	800fb9a <memset>
 800f91a:	4b0d      	ldr	r3, [pc, #52]	@ (800f950 <std+0x58>)
 800f91c:	6263      	str	r3, [r4, #36]	@ 0x24
 800f91e:	4b0d      	ldr	r3, [pc, #52]	@ (800f954 <std+0x5c>)
 800f920:	62a3      	str	r3, [r4, #40]	@ 0x28
 800f922:	4b0d      	ldr	r3, [pc, #52]	@ (800f958 <std+0x60>)
 800f924:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800f926:	4b0d      	ldr	r3, [pc, #52]	@ (800f95c <std+0x64>)
 800f928:	6323      	str	r3, [r4, #48]	@ 0x30
 800f92a:	4b0d      	ldr	r3, [pc, #52]	@ (800f960 <std+0x68>)
 800f92c:	6224      	str	r4, [r4, #32]
 800f92e:	429c      	cmp	r4, r3
 800f930:	d006      	beq.n	800f940 <std+0x48>
 800f932:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800f936:	4294      	cmp	r4, r2
 800f938:	d002      	beq.n	800f940 <std+0x48>
 800f93a:	33d0      	adds	r3, #208	@ 0xd0
 800f93c:	429c      	cmp	r4, r3
 800f93e:	d105      	bne.n	800f94c <std+0x54>
 800f940:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800f944:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f948:	f000 b9d2 	b.w	800fcf0 <__retarget_lock_init_recursive>
 800f94c:	bd10      	pop	{r4, pc}
 800f94e:	bf00      	nop
 800f950:	0800fb11 	.word	0x0800fb11
 800f954:	0800fb37 	.word	0x0800fb37
 800f958:	0800fb6f 	.word	0x0800fb6f
 800f95c:	0800fb93 	.word	0x0800fb93
 800f960:	24000ccc 	.word	0x24000ccc

0800f964 <stdio_exit_handler>:
 800f964:	4a02      	ldr	r2, [pc, #8]	@ (800f970 <stdio_exit_handler+0xc>)
 800f966:	4903      	ldr	r1, [pc, #12]	@ (800f974 <stdio_exit_handler+0x10>)
 800f968:	4803      	ldr	r0, [pc, #12]	@ (800f978 <stdio_exit_handler+0x14>)
 800f96a:	f000 b869 	b.w	800fa40 <_fwalk_sglue>
 800f96e:	bf00      	nop
 800f970:	2400004c 	.word	0x2400004c
 800f974:	0801247d 	.word	0x0801247d
 800f978:	240001c8 	.word	0x240001c8

0800f97c <cleanup_stdio>:
 800f97c:	6841      	ldr	r1, [r0, #4]
 800f97e:	4b0c      	ldr	r3, [pc, #48]	@ (800f9b0 <cleanup_stdio+0x34>)
 800f980:	4299      	cmp	r1, r3
 800f982:	b510      	push	{r4, lr}
 800f984:	4604      	mov	r4, r0
 800f986:	d001      	beq.n	800f98c <cleanup_stdio+0x10>
 800f988:	f002 fd78 	bl	801247c <_fflush_r>
 800f98c:	68a1      	ldr	r1, [r4, #8]
 800f98e:	4b09      	ldr	r3, [pc, #36]	@ (800f9b4 <cleanup_stdio+0x38>)
 800f990:	4299      	cmp	r1, r3
 800f992:	d002      	beq.n	800f99a <cleanup_stdio+0x1e>
 800f994:	4620      	mov	r0, r4
 800f996:	f002 fd71 	bl	801247c <_fflush_r>
 800f99a:	68e1      	ldr	r1, [r4, #12]
 800f99c:	4b06      	ldr	r3, [pc, #24]	@ (800f9b8 <cleanup_stdio+0x3c>)
 800f99e:	4299      	cmp	r1, r3
 800f9a0:	d004      	beq.n	800f9ac <cleanup_stdio+0x30>
 800f9a2:	4620      	mov	r0, r4
 800f9a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f9a8:	f002 bd68 	b.w	801247c <_fflush_r>
 800f9ac:	bd10      	pop	{r4, pc}
 800f9ae:	bf00      	nop
 800f9b0:	24000ccc 	.word	0x24000ccc
 800f9b4:	24000d34 	.word	0x24000d34
 800f9b8:	24000d9c 	.word	0x24000d9c

0800f9bc <global_stdio_init.part.0>:
 800f9bc:	b510      	push	{r4, lr}
 800f9be:	4b0b      	ldr	r3, [pc, #44]	@ (800f9ec <global_stdio_init.part.0+0x30>)
 800f9c0:	4c0b      	ldr	r4, [pc, #44]	@ (800f9f0 <global_stdio_init.part.0+0x34>)
 800f9c2:	4a0c      	ldr	r2, [pc, #48]	@ (800f9f4 <global_stdio_init.part.0+0x38>)
 800f9c4:	601a      	str	r2, [r3, #0]
 800f9c6:	4620      	mov	r0, r4
 800f9c8:	2200      	movs	r2, #0
 800f9ca:	2104      	movs	r1, #4
 800f9cc:	f7ff ff94 	bl	800f8f8 <std>
 800f9d0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800f9d4:	2201      	movs	r2, #1
 800f9d6:	2109      	movs	r1, #9
 800f9d8:	f7ff ff8e 	bl	800f8f8 <std>
 800f9dc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800f9e0:	2202      	movs	r2, #2
 800f9e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f9e6:	2112      	movs	r1, #18
 800f9e8:	f7ff bf86 	b.w	800f8f8 <std>
 800f9ec:	24000e04 	.word	0x24000e04
 800f9f0:	24000ccc 	.word	0x24000ccc
 800f9f4:	0800f965 	.word	0x0800f965

0800f9f8 <__sfp_lock_acquire>:
 800f9f8:	4801      	ldr	r0, [pc, #4]	@ (800fa00 <__sfp_lock_acquire+0x8>)
 800f9fa:	f000 b97a 	b.w	800fcf2 <__retarget_lock_acquire_recursive>
 800f9fe:	bf00      	nop
 800fa00:	24000e0d 	.word	0x24000e0d

0800fa04 <__sfp_lock_release>:
 800fa04:	4801      	ldr	r0, [pc, #4]	@ (800fa0c <__sfp_lock_release+0x8>)
 800fa06:	f000 b975 	b.w	800fcf4 <__retarget_lock_release_recursive>
 800fa0a:	bf00      	nop
 800fa0c:	24000e0d 	.word	0x24000e0d

0800fa10 <__sinit>:
 800fa10:	b510      	push	{r4, lr}
 800fa12:	4604      	mov	r4, r0
 800fa14:	f7ff fff0 	bl	800f9f8 <__sfp_lock_acquire>
 800fa18:	6a23      	ldr	r3, [r4, #32]
 800fa1a:	b11b      	cbz	r3, 800fa24 <__sinit+0x14>
 800fa1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fa20:	f7ff bff0 	b.w	800fa04 <__sfp_lock_release>
 800fa24:	4b04      	ldr	r3, [pc, #16]	@ (800fa38 <__sinit+0x28>)
 800fa26:	6223      	str	r3, [r4, #32]
 800fa28:	4b04      	ldr	r3, [pc, #16]	@ (800fa3c <__sinit+0x2c>)
 800fa2a:	681b      	ldr	r3, [r3, #0]
 800fa2c:	2b00      	cmp	r3, #0
 800fa2e:	d1f5      	bne.n	800fa1c <__sinit+0xc>
 800fa30:	f7ff ffc4 	bl	800f9bc <global_stdio_init.part.0>
 800fa34:	e7f2      	b.n	800fa1c <__sinit+0xc>
 800fa36:	bf00      	nop
 800fa38:	0800f97d 	.word	0x0800f97d
 800fa3c:	24000e04 	.word	0x24000e04

0800fa40 <_fwalk_sglue>:
 800fa40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fa44:	4607      	mov	r7, r0
 800fa46:	4688      	mov	r8, r1
 800fa48:	4614      	mov	r4, r2
 800fa4a:	2600      	movs	r6, #0
 800fa4c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800fa50:	f1b9 0901 	subs.w	r9, r9, #1
 800fa54:	d505      	bpl.n	800fa62 <_fwalk_sglue+0x22>
 800fa56:	6824      	ldr	r4, [r4, #0]
 800fa58:	2c00      	cmp	r4, #0
 800fa5a:	d1f7      	bne.n	800fa4c <_fwalk_sglue+0xc>
 800fa5c:	4630      	mov	r0, r6
 800fa5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fa62:	89ab      	ldrh	r3, [r5, #12]
 800fa64:	2b01      	cmp	r3, #1
 800fa66:	d907      	bls.n	800fa78 <_fwalk_sglue+0x38>
 800fa68:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800fa6c:	3301      	adds	r3, #1
 800fa6e:	d003      	beq.n	800fa78 <_fwalk_sglue+0x38>
 800fa70:	4629      	mov	r1, r5
 800fa72:	4638      	mov	r0, r7
 800fa74:	47c0      	blx	r8
 800fa76:	4306      	orrs	r6, r0
 800fa78:	3568      	adds	r5, #104	@ 0x68
 800fa7a:	e7e9      	b.n	800fa50 <_fwalk_sglue+0x10>

0800fa7c <siprintf>:
 800fa7c:	b40e      	push	{r1, r2, r3}
 800fa7e:	b500      	push	{lr}
 800fa80:	b09c      	sub	sp, #112	@ 0x70
 800fa82:	ab1d      	add	r3, sp, #116	@ 0x74
 800fa84:	9002      	str	r0, [sp, #8]
 800fa86:	9006      	str	r0, [sp, #24]
 800fa88:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800fa8c:	4809      	ldr	r0, [pc, #36]	@ (800fab4 <siprintf+0x38>)
 800fa8e:	9107      	str	r1, [sp, #28]
 800fa90:	9104      	str	r1, [sp, #16]
 800fa92:	4909      	ldr	r1, [pc, #36]	@ (800fab8 <siprintf+0x3c>)
 800fa94:	f853 2b04 	ldr.w	r2, [r3], #4
 800fa98:	9105      	str	r1, [sp, #20]
 800fa9a:	6800      	ldr	r0, [r0, #0]
 800fa9c:	9301      	str	r3, [sp, #4]
 800fa9e:	a902      	add	r1, sp, #8
 800faa0:	f002 f852 	bl	8011b48 <_svfiprintf_r>
 800faa4:	9b02      	ldr	r3, [sp, #8]
 800faa6:	2200      	movs	r2, #0
 800faa8:	701a      	strb	r2, [r3, #0]
 800faaa:	b01c      	add	sp, #112	@ 0x70
 800faac:	f85d eb04 	ldr.w	lr, [sp], #4
 800fab0:	b003      	add	sp, #12
 800fab2:	4770      	bx	lr
 800fab4:	240001c4 	.word	0x240001c4
 800fab8:	ffff0208 	.word	0xffff0208

0800fabc <siscanf>:
 800fabc:	b40e      	push	{r1, r2, r3}
 800fabe:	b530      	push	{r4, r5, lr}
 800fac0:	b09c      	sub	sp, #112	@ 0x70
 800fac2:	ac1f      	add	r4, sp, #124	@ 0x7c
 800fac4:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800fac8:	f854 5b04 	ldr.w	r5, [r4], #4
 800facc:	f8ad 2014 	strh.w	r2, [sp, #20]
 800fad0:	9002      	str	r0, [sp, #8]
 800fad2:	9006      	str	r0, [sp, #24]
 800fad4:	f7f0 fc6c 	bl	80003b0 <strlen>
 800fad8:	4b0b      	ldr	r3, [pc, #44]	@ (800fb08 <siscanf+0x4c>)
 800fada:	9003      	str	r0, [sp, #12]
 800fadc:	9007      	str	r0, [sp, #28]
 800fade:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fae0:	480a      	ldr	r0, [pc, #40]	@ (800fb0c <siscanf+0x50>)
 800fae2:	9401      	str	r4, [sp, #4]
 800fae4:	2300      	movs	r3, #0
 800fae6:	930f      	str	r3, [sp, #60]	@ 0x3c
 800fae8:	9314      	str	r3, [sp, #80]	@ 0x50
 800faea:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800faee:	f8ad 3016 	strh.w	r3, [sp, #22]
 800faf2:	462a      	mov	r2, r5
 800faf4:	4623      	mov	r3, r4
 800faf6:	a902      	add	r1, sp, #8
 800faf8:	6800      	ldr	r0, [r0, #0]
 800fafa:	f002 f979 	bl	8011df0 <__ssvfiscanf_r>
 800fafe:	b01c      	add	sp, #112	@ 0x70
 800fb00:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fb04:	b003      	add	sp, #12
 800fb06:	4770      	bx	lr
 800fb08:	0800fb33 	.word	0x0800fb33
 800fb0c:	240001c4 	.word	0x240001c4

0800fb10 <__sread>:
 800fb10:	b510      	push	{r4, lr}
 800fb12:	460c      	mov	r4, r1
 800fb14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fb18:	f000 f88c 	bl	800fc34 <_read_r>
 800fb1c:	2800      	cmp	r0, #0
 800fb1e:	bfab      	itete	ge
 800fb20:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800fb22:	89a3      	ldrhlt	r3, [r4, #12]
 800fb24:	181b      	addge	r3, r3, r0
 800fb26:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800fb2a:	bfac      	ite	ge
 800fb2c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800fb2e:	81a3      	strhlt	r3, [r4, #12]
 800fb30:	bd10      	pop	{r4, pc}

0800fb32 <__seofread>:
 800fb32:	2000      	movs	r0, #0
 800fb34:	4770      	bx	lr

0800fb36 <__swrite>:
 800fb36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fb3a:	461f      	mov	r7, r3
 800fb3c:	898b      	ldrh	r3, [r1, #12]
 800fb3e:	05db      	lsls	r3, r3, #23
 800fb40:	4605      	mov	r5, r0
 800fb42:	460c      	mov	r4, r1
 800fb44:	4616      	mov	r6, r2
 800fb46:	d505      	bpl.n	800fb54 <__swrite+0x1e>
 800fb48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fb4c:	2302      	movs	r3, #2
 800fb4e:	2200      	movs	r2, #0
 800fb50:	f000 f85e 	bl	800fc10 <_lseek_r>
 800fb54:	89a3      	ldrh	r3, [r4, #12]
 800fb56:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fb5a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800fb5e:	81a3      	strh	r3, [r4, #12]
 800fb60:	4632      	mov	r2, r6
 800fb62:	463b      	mov	r3, r7
 800fb64:	4628      	mov	r0, r5
 800fb66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fb6a:	f000 b885 	b.w	800fc78 <_write_r>

0800fb6e <__sseek>:
 800fb6e:	b510      	push	{r4, lr}
 800fb70:	460c      	mov	r4, r1
 800fb72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fb76:	f000 f84b 	bl	800fc10 <_lseek_r>
 800fb7a:	1c43      	adds	r3, r0, #1
 800fb7c:	89a3      	ldrh	r3, [r4, #12]
 800fb7e:	bf15      	itete	ne
 800fb80:	6560      	strne	r0, [r4, #84]	@ 0x54
 800fb82:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800fb86:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800fb8a:	81a3      	strheq	r3, [r4, #12]
 800fb8c:	bf18      	it	ne
 800fb8e:	81a3      	strhne	r3, [r4, #12]
 800fb90:	bd10      	pop	{r4, pc}

0800fb92 <__sclose>:
 800fb92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fb96:	f000 b82b 	b.w	800fbf0 <_close_r>

0800fb9a <memset>:
 800fb9a:	4402      	add	r2, r0
 800fb9c:	4603      	mov	r3, r0
 800fb9e:	4293      	cmp	r3, r2
 800fba0:	d100      	bne.n	800fba4 <memset+0xa>
 800fba2:	4770      	bx	lr
 800fba4:	f803 1b01 	strb.w	r1, [r3], #1
 800fba8:	e7f9      	b.n	800fb9e <memset+0x4>

0800fbaa <strchr>:
 800fbaa:	b2c9      	uxtb	r1, r1
 800fbac:	4603      	mov	r3, r0
 800fbae:	4618      	mov	r0, r3
 800fbb0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fbb4:	b112      	cbz	r2, 800fbbc <strchr+0x12>
 800fbb6:	428a      	cmp	r2, r1
 800fbb8:	d1f9      	bne.n	800fbae <strchr+0x4>
 800fbba:	4770      	bx	lr
 800fbbc:	2900      	cmp	r1, #0
 800fbbe:	bf18      	it	ne
 800fbc0:	2000      	movne	r0, #0
 800fbc2:	4770      	bx	lr

0800fbc4 <strncmp>:
 800fbc4:	b510      	push	{r4, lr}
 800fbc6:	b16a      	cbz	r2, 800fbe4 <strncmp+0x20>
 800fbc8:	3901      	subs	r1, #1
 800fbca:	1884      	adds	r4, r0, r2
 800fbcc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fbd0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800fbd4:	429a      	cmp	r2, r3
 800fbd6:	d103      	bne.n	800fbe0 <strncmp+0x1c>
 800fbd8:	42a0      	cmp	r0, r4
 800fbda:	d001      	beq.n	800fbe0 <strncmp+0x1c>
 800fbdc:	2a00      	cmp	r2, #0
 800fbde:	d1f5      	bne.n	800fbcc <strncmp+0x8>
 800fbe0:	1ad0      	subs	r0, r2, r3
 800fbe2:	bd10      	pop	{r4, pc}
 800fbe4:	4610      	mov	r0, r2
 800fbe6:	e7fc      	b.n	800fbe2 <strncmp+0x1e>

0800fbe8 <_localeconv_r>:
 800fbe8:	4800      	ldr	r0, [pc, #0]	@ (800fbec <_localeconv_r+0x4>)
 800fbea:	4770      	bx	lr
 800fbec:	24000148 	.word	0x24000148

0800fbf0 <_close_r>:
 800fbf0:	b538      	push	{r3, r4, r5, lr}
 800fbf2:	4d06      	ldr	r5, [pc, #24]	@ (800fc0c <_close_r+0x1c>)
 800fbf4:	2300      	movs	r3, #0
 800fbf6:	4604      	mov	r4, r0
 800fbf8:	4608      	mov	r0, r1
 800fbfa:	602b      	str	r3, [r5, #0]
 800fbfc:	f7f1 fe8c 	bl	8001918 <_close>
 800fc00:	1c43      	adds	r3, r0, #1
 800fc02:	d102      	bne.n	800fc0a <_close_r+0x1a>
 800fc04:	682b      	ldr	r3, [r5, #0]
 800fc06:	b103      	cbz	r3, 800fc0a <_close_r+0x1a>
 800fc08:	6023      	str	r3, [r4, #0]
 800fc0a:	bd38      	pop	{r3, r4, r5, pc}
 800fc0c:	24000e08 	.word	0x24000e08

0800fc10 <_lseek_r>:
 800fc10:	b538      	push	{r3, r4, r5, lr}
 800fc12:	4d07      	ldr	r5, [pc, #28]	@ (800fc30 <_lseek_r+0x20>)
 800fc14:	4604      	mov	r4, r0
 800fc16:	4608      	mov	r0, r1
 800fc18:	4611      	mov	r1, r2
 800fc1a:	2200      	movs	r2, #0
 800fc1c:	602a      	str	r2, [r5, #0]
 800fc1e:	461a      	mov	r2, r3
 800fc20:	f7f1 fea1 	bl	8001966 <_lseek>
 800fc24:	1c43      	adds	r3, r0, #1
 800fc26:	d102      	bne.n	800fc2e <_lseek_r+0x1e>
 800fc28:	682b      	ldr	r3, [r5, #0]
 800fc2a:	b103      	cbz	r3, 800fc2e <_lseek_r+0x1e>
 800fc2c:	6023      	str	r3, [r4, #0]
 800fc2e:	bd38      	pop	{r3, r4, r5, pc}
 800fc30:	24000e08 	.word	0x24000e08

0800fc34 <_read_r>:
 800fc34:	b538      	push	{r3, r4, r5, lr}
 800fc36:	4d07      	ldr	r5, [pc, #28]	@ (800fc54 <_read_r+0x20>)
 800fc38:	4604      	mov	r4, r0
 800fc3a:	4608      	mov	r0, r1
 800fc3c:	4611      	mov	r1, r2
 800fc3e:	2200      	movs	r2, #0
 800fc40:	602a      	str	r2, [r5, #0]
 800fc42:	461a      	mov	r2, r3
 800fc44:	f7f1 fe2f 	bl	80018a6 <_read>
 800fc48:	1c43      	adds	r3, r0, #1
 800fc4a:	d102      	bne.n	800fc52 <_read_r+0x1e>
 800fc4c:	682b      	ldr	r3, [r5, #0]
 800fc4e:	b103      	cbz	r3, 800fc52 <_read_r+0x1e>
 800fc50:	6023      	str	r3, [r4, #0]
 800fc52:	bd38      	pop	{r3, r4, r5, pc}
 800fc54:	24000e08 	.word	0x24000e08

0800fc58 <_sbrk_r>:
 800fc58:	b538      	push	{r3, r4, r5, lr}
 800fc5a:	4d06      	ldr	r5, [pc, #24]	@ (800fc74 <_sbrk_r+0x1c>)
 800fc5c:	2300      	movs	r3, #0
 800fc5e:	4604      	mov	r4, r0
 800fc60:	4608      	mov	r0, r1
 800fc62:	602b      	str	r3, [r5, #0]
 800fc64:	f7f1 fe8c 	bl	8001980 <_sbrk>
 800fc68:	1c43      	adds	r3, r0, #1
 800fc6a:	d102      	bne.n	800fc72 <_sbrk_r+0x1a>
 800fc6c:	682b      	ldr	r3, [r5, #0]
 800fc6e:	b103      	cbz	r3, 800fc72 <_sbrk_r+0x1a>
 800fc70:	6023      	str	r3, [r4, #0]
 800fc72:	bd38      	pop	{r3, r4, r5, pc}
 800fc74:	24000e08 	.word	0x24000e08

0800fc78 <_write_r>:
 800fc78:	b538      	push	{r3, r4, r5, lr}
 800fc7a:	4d07      	ldr	r5, [pc, #28]	@ (800fc98 <_write_r+0x20>)
 800fc7c:	4604      	mov	r4, r0
 800fc7e:	4608      	mov	r0, r1
 800fc80:	4611      	mov	r1, r2
 800fc82:	2200      	movs	r2, #0
 800fc84:	602a      	str	r2, [r5, #0]
 800fc86:	461a      	mov	r2, r3
 800fc88:	f7f1 fe2a 	bl	80018e0 <_write>
 800fc8c:	1c43      	adds	r3, r0, #1
 800fc8e:	d102      	bne.n	800fc96 <_write_r+0x1e>
 800fc90:	682b      	ldr	r3, [r5, #0]
 800fc92:	b103      	cbz	r3, 800fc96 <_write_r+0x1e>
 800fc94:	6023      	str	r3, [r4, #0]
 800fc96:	bd38      	pop	{r3, r4, r5, pc}
 800fc98:	24000e08 	.word	0x24000e08

0800fc9c <__errno>:
 800fc9c:	4b01      	ldr	r3, [pc, #4]	@ (800fca4 <__errno+0x8>)
 800fc9e:	6818      	ldr	r0, [r3, #0]
 800fca0:	4770      	bx	lr
 800fca2:	bf00      	nop
 800fca4:	240001c4 	.word	0x240001c4

0800fca8 <__libc_init_array>:
 800fca8:	b570      	push	{r4, r5, r6, lr}
 800fcaa:	4d0d      	ldr	r5, [pc, #52]	@ (800fce0 <__libc_init_array+0x38>)
 800fcac:	4c0d      	ldr	r4, [pc, #52]	@ (800fce4 <__libc_init_array+0x3c>)
 800fcae:	1b64      	subs	r4, r4, r5
 800fcb0:	10a4      	asrs	r4, r4, #2
 800fcb2:	2600      	movs	r6, #0
 800fcb4:	42a6      	cmp	r6, r4
 800fcb6:	d109      	bne.n	800fccc <__libc_init_array+0x24>
 800fcb8:	4d0b      	ldr	r5, [pc, #44]	@ (800fce8 <__libc_init_array+0x40>)
 800fcba:	4c0c      	ldr	r4, [pc, #48]	@ (800fcec <__libc_init_array+0x44>)
 800fcbc:	f003 f822 	bl	8012d04 <_init>
 800fcc0:	1b64      	subs	r4, r4, r5
 800fcc2:	10a4      	asrs	r4, r4, #2
 800fcc4:	2600      	movs	r6, #0
 800fcc6:	42a6      	cmp	r6, r4
 800fcc8:	d105      	bne.n	800fcd6 <__libc_init_array+0x2e>
 800fcca:	bd70      	pop	{r4, r5, r6, pc}
 800fccc:	f855 3b04 	ldr.w	r3, [r5], #4
 800fcd0:	4798      	blx	r3
 800fcd2:	3601      	adds	r6, #1
 800fcd4:	e7ee      	b.n	800fcb4 <__libc_init_array+0xc>
 800fcd6:	f855 3b04 	ldr.w	r3, [r5], #4
 800fcda:	4798      	blx	r3
 800fcdc:	3601      	adds	r6, #1
 800fcde:	e7f2      	b.n	800fcc6 <__libc_init_array+0x1e>
 800fce0:	080132a4 	.word	0x080132a4
 800fce4:	080132a4 	.word	0x080132a4
 800fce8:	080132a4 	.word	0x080132a4
 800fcec:	080132a8 	.word	0x080132a8

0800fcf0 <__retarget_lock_init_recursive>:
 800fcf0:	4770      	bx	lr

0800fcf2 <__retarget_lock_acquire_recursive>:
 800fcf2:	4770      	bx	lr

0800fcf4 <__retarget_lock_release_recursive>:
 800fcf4:	4770      	bx	lr

0800fcf6 <memcpy>:
 800fcf6:	440a      	add	r2, r1
 800fcf8:	4291      	cmp	r1, r2
 800fcfa:	f100 33ff 	add.w	r3, r0, #4294967295
 800fcfe:	d100      	bne.n	800fd02 <memcpy+0xc>
 800fd00:	4770      	bx	lr
 800fd02:	b510      	push	{r4, lr}
 800fd04:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fd08:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fd0c:	4291      	cmp	r1, r2
 800fd0e:	d1f9      	bne.n	800fd04 <memcpy+0xe>
 800fd10:	bd10      	pop	{r4, pc}
 800fd12:	0000      	movs	r0, r0
 800fd14:	0000      	movs	r0, r0
	...

0800fd18 <nan>:
 800fd18:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800fd20 <nan+0x8>
 800fd1c:	4770      	bx	lr
 800fd1e:	bf00      	nop
 800fd20:	00000000 	.word	0x00000000
 800fd24:	7ff80000 	.word	0x7ff80000

0800fd28 <nanf>:
 800fd28:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800fd30 <nanf+0x8>
 800fd2c:	4770      	bx	lr
 800fd2e:	bf00      	nop
 800fd30:	7fc00000 	.word	0x7fc00000

0800fd34 <quorem>:
 800fd34:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd38:	6903      	ldr	r3, [r0, #16]
 800fd3a:	690c      	ldr	r4, [r1, #16]
 800fd3c:	42a3      	cmp	r3, r4
 800fd3e:	4607      	mov	r7, r0
 800fd40:	db7e      	blt.n	800fe40 <quorem+0x10c>
 800fd42:	3c01      	subs	r4, #1
 800fd44:	f101 0814 	add.w	r8, r1, #20
 800fd48:	00a3      	lsls	r3, r4, #2
 800fd4a:	f100 0514 	add.w	r5, r0, #20
 800fd4e:	9300      	str	r3, [sp, #0]
 800fd50:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fd54:	9301      	str	r3, [sp, #4]
 800fd56:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800fd5a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fd5e:	3301      	adds	r3, #1
 800fd60:	429a      	cmp	r2, r3
 800fd62:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800fd66:	fbb2 f6f3 	udiv	r6, r2, r3
 800fd6a:	d32e      	bcc.n	800fdca <quorem+0x96>
 800fd6c:	f04f 0a00 	mov.w	sl, #0
 800fd70:	46c4      	mov	ip, r8
 800fd72:	46ae      	mov	lr, r5
 800fd74:	46d3      	mov	fp, sl
 800fd76:	f85c 3b04 	ldr.w	r3, [ip], #4
 800fd7a:	b298      	uxth	r0, r3
 800fd7c:	fb06 a000 	mla	r0, r6, r0, sl
 800fd80:	0c02      	lsrs	r2, r0, #16
 800fd82:	0c1b      	lsrs	r3, r3, #16
 800fd84:	fb06 2303 	mla	r3, r6, r3, r2
 800fd88:	f8de 2000 	ldr.w	r2, [lr]
 800fd8c:	b280      	uxth	r0, r0
 800fd8e:	b292      	uxth	r2, r2
 800fd90:	1a12      	subs	r2, r2, r0
 800fd92:	445a      	add	r2, fp
 800fd94:	f8de 0000 	ldr.w	r0, [lr]
 800fd98:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800fd9c:	b29b      	uxth	r3, r3
 800fd9e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800fda2:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800fda6:	b292      	uxth	r2, r2
 800fda8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800fdac:	45e1      	cmp	r9, ip
 800fdae:	f84e 2b04 	str.w	r2, [lr], #4
 800fdb2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800fdb6:	d2de      	bcs.n	800fd76 <quorem+0x42>
 800fdb8:	9b00      	ldr	r3, [sp, #0]
 800fdba:	58eb      	ldr	r3, [r5, r3]
 800fdbc:	b92b      	cbnz	r3, 800fdca <quorem+0x96>
 800fdbe:	9b01      	ldr	r3, [sp, #4]
 800fdc0:	3b04      	subs	r3, #4
 800fdc2:	429d      	cmp	r5, r3
 800fdc4:	461a      	mov	r2, r3
 800fdc6:	d32f      	bcc.n	800fe28 <quorem+0xf4>
 800fdc8:	613c      	str	r4, [r7, #16]
 800fdca:	4638      	mov	r0, r7
 800fdcc:	f001 fbec 	bl	80115a8 <__mcmp>
 800fdd0:	2800      	cmp	r0, #0
 800fdd2:	db25      	blt.n	800fe20 <quorem+0xec>
 800fdd4:	4629      	mov	r1, r5
 800fdd6:	2000      	movs	r0, #0
 800fdd8:	f858 2b04 	ldr.w	r2, [r8], #4
 800fddc:	f8d1 c000 	ldr.w	ip, [r1]
 800fde0:	fa1f fe82 	uxth.w	lr, r2
 800fde4:	fa1f f38c 	uxth.w	r3, ip
 800fde8:	eba3 030e 	sub.w	r3, r3, lr
 800fdec:	4403      	add	r3, r0
 800fdee:	0c12      	lsrs	r2, r2, #16
 800fdf0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800fdf4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800fdf8:	b29b      	uxth	r3, r3
 800fdfa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fdfe:	45c1      	cmp	r9, r8
 800fe00:	f841 3b04 	str.w	r3, [r1], #4
 800fe04:	ea4f 4022 	mov.w	r0, r2, asr #16
 800fe08:	d2e6      	bcs.n	800fdd8 <quorem+0xa4>
 800fe0a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fe0e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fe12:	b922      	cbnz	r2, 800fe1e <quorem+0xea>
 800fe14:	3b04      	subs	r3, #4
 800fe16:	429d      	cmp	r5, r3
 800fe18:	461a      	mov	r2, r3
 800fe1a:	d30b      	bcc.n	800fe34 <quorem+0x100>
 800fe1c:	613c      	str	r4, [r7, #16]
 800fe1e:	3601      	adds	r6, #1
 800fe20:	4630      	mov	r0, r6
 800fe22:	b003      	add	sp, #12
 800fe24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe28:	6812      	ldr	r2, [r2, #0]
 800fe2a:	3b04      	subs	r3, #4
 800fe2c:	2a00      	cmp	r2, #0
 800fe2e:	d1cb      	bne.n	800fdc8 <quorem+0x94>
 800fe30:	3c01      	subs	r4, #1
 800fe32:	e7c6      	b.n	800fdc2 <quorem+0x8e>
 800fe34:	6812      	ldr	r2, [r2, #0]
 800fe36:	3b04      	subs	r3, #4
 800fe38:	2a00      	cmp	r2, #0
 800fe3a:	d1ef      	bne.n	800fe1c <quorem+0xe8>
 800fe3c:	3c01      	subs	r4, #1
 800fe3e:	e7ea      	b.n	800fe16 <quorem+0xe2>
 800fe40:	2000      	movs	r0, #0
 800fe42:	e7ee      	b.n	800fe22 <quorem+0xee>
 800fe44:	0000      	movs	r0, r0
	...

0800fe48 <_dtoa_r>:
 800fe48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe4c:	ed2d 8b02 	vpush	{d8}
 800fe50:	69c7      	ldr	r7, [r0, #28]
 800fe52:	b091      	sub	sp, #68	@ 0x44
 800fe54:	ed8d 0b02 	vstr	d0, [sp, #8]
 800fe58:	ec55 4b10 	vmov	r4, r5, d0
 800fe5c:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800fe5e:	9107      	str	r1, [sp, #28]
 800fe60:	4681      	mov	r9, r0
 800fe62:	9209      	str	r2, [sp, #36]	@ 0x24
 800fe64:	930d      	str	r3, [sp, #52]	@ 0x34
 800fe66:	b97f      	cbnz	r7, 800fe88 <_dtoa_r+0x40>
 800fe68:	2010      	movs	r0, #16
 800fe6a:	f7fe f893 	bl	800df94 <malloc>
 800fe6e:	4602      	mov	r2, r0
 800fe70:	f8c9 001c 	str.w	r0, [r9, #28]
 800fe74:	b920      	cbnz	r0, 800fe80 <_dtoa_r+0x38>
 800fe76:	4ba0      	ldr	r3, [pc, #640]	@ (80100f8 <_dtoa_r+0x2b0>)
 800fe78:	21ef      	movs	r1, #239	@ 0xef
 800fe7a:	48a0      	ldr	r0, [pc, #640]	@ (80100fc <_dtoa_r+0x2b4>)
 800fe7c:	f002 fbb4 	bl	80125e8 <__assert_func>
 800fe80:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800fe84:	6007      	str	r7, [r0, #0]
 800fe86:	60c7      	str	r7, [r0, #12]
 800fe88:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800fe8c:	6819      	ldr	r1, [r3, #0]
 800fe8e:	b159      	cbz	r1, 800fea8 <_dtoa_r+0x60>
 800fe90:	685a      	ldr	r2, [r3, #4]
 800fe92:	604a      	str	r2, [r1, #4]
 800fe94:	2301      	movs	r3, #1
 800fe96:	4093      	lsls	r3, r2
 800fe98:	608b      	str	r3, [r1, #8]
 800fe9a:	4648      	mov	r0, r9
 800fe9c:	f001 f900 	bl	80110a0 <_Bfree>
 800fea0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800fea4:	2200      	movs	r2, #0
 800fea6:	601a      	str	r2, [r3, #0]
 800fea8:	1e2b      	subs	r3, r5, #0
 800feaa:	bfbb      	ittet	lt
 800feac:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800feb0:	9303      	strlt	r3, [sp, #12]
 800feb2:	2300      	movge	r3, #0
 800feb4:	2201      	movlt	r2, #1
 800feb6:	bfac      	ite	ge
 800feb8:	6033      	strge	r3, [r6, #0]
 800feba:	6032      	strlt	r2, [r6, #0]
 800febc:	4b90      	ldr	r3, [pc, #576]	@ (8010100 <_dtoa_r+0x2b8>)
 800febe:	9e03      	ldr	r6, [sp, #12]
 800fec0:	43b3      	bics	r3, r6
 800fec2:	d110      	bne.n	800fee6 <_dtoa_r+0x9e>
 800fec4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800fec6:	f242 730f 	movw	r3, #9999	@ 0x270f
 800feca:	6013      	str	r3, [r2, #0]
 800fecc:	f3c6 0313 	ubfx	r3, r6, #0, #20
 800fed0:	4323      	orrs	r3, r4
 800fed2:	f000 84de 	beq.w	8010892 <_dtoa_r+0xa4a>
 800fed6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800fed8:	4f8a      	ldr	r7, [pc, #552]	@ (8010104 <_dtoa_r+0x2bc>)
 800feda:	2b00      	cmp	r3, #0
 800fedc:	f000 84e0 	beq.w	80108a0 <_dtoa_r+0xa58>
 800fee0:	1cfb      	adds	r3, r7, #3
 800fee2:	f000 bcdb 	b.w	801089c <_dtoa_r+0xa54>
 800fee6:	ed9d 8b02 	vldr	d8, [sp, #8]
 800feea:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800feee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fef2:	d10a      	bne.n	800ff0a <_dtoa_r+0xc2>
 800fef4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800fef6:	2301      	movs	r3, #1
 800fef8:	6013      	str	r3, [r2, #0]
 800fefa:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800fefc:	b113      	cbz	r3, 800ff04 <_dtoa_r+0xbc>
 800fefe:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800ff00:	4b81      	ldr	r3, [pc, #516]	@ (8010108 <_dtoa_r+0x2c0>)
 800ff02:	6013      	str	r3, [r2, #0]
 800ff04:	4f81      	ldr	r7, [pc, #516]	@ (801010c <_dtoa_r+0x2c4>)
 800ff06:	f000 bccb 	b.w	80108a0 <_dtoa_r+0xa58>
 800ff0a:	aa0e      	add	r2, sp, #56	@ 0x38
 800ff0c:	a90f      	add	r1, sp, #60	@ 0x3c
 800ff0e:	4648      	mov	r0, r9
 800ff10:	eeb0 0b48 	vmov.f64	d0, d8
 800ff14:	f001 fc68 	bl	80117e8 <__d2b>
 800ff18:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800ff1c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ff1e:	9001      	str	r0, [sp, #4]
 800ff20:	2b00      	cmp	r3, #0
 800ff22:	d045      	beq.n	800ffb0 <_dtoa_r+0x168>
 800ff24:	eeb0 7b48 	vmov.f64	d7, d8
 800ff28:	ee18 1a90 	vmov	r1, s17
 800ff2c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800ff30:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800ff34:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800ff38:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800ff3c:	2500      	movs	r5, #0
 800ff3e:	ee07 1a90 	vmov	s15, r1
 800ff42:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800ff46:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 80100e0 <_dtoa_r+0x298>
 800ff4a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800ff4e:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 80100e8 <_dtoa_r+0x2a0>
 800ff52:	eea7 6b05 	vfma.f64	d6, d7, d5
 800ff56:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 80100f0 <_dtoa_r+0x2a8>
 800ff5a:	ee07 3a90 	vmov	s15, r3
 800ff5e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800ff62:	eeb0 7b46 	vmov.f64	d7, d6
 800ff66:	eea4 7b05 	vfma.f64	d7, d4, d5
 800ff6a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800ff6e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800ff72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff76:	ee16 8a90 	vmov	r8, s13
 800ff7a:	d508      	bpl.n	800ff8e <_dtoa_r+0x146>
 800ff7c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800ff80:	eeb4 6b47 	vcmp.f64	d6, d7
 800ff84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff88:	bf18      	it	ne
 800ff8a:	f108 38ff 	addne.w	r8, r8, #4294967295
 800ff8e:	f1b8 0f16 	cmp.w	r8, #22
 800ff92:	d82b      	bhi.n	800ffec <_dtoa_r+0x1a4>
 800ff94:	495e      	ldr	r1, [pc, #376]	@ (8010110 <_dtoa_r+0x2c8>)
 800ff96:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800ff9a:	ed91 7b00 	vldr	d7, [r1]
 800ff9e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800ffa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ffa6:	d501      	bpl.n	800ffac <_dtoa_r+0x164>
 800ffa8:	f108 38ff 	add.w	r8, r8, #4294967295
 800ffac:	2100      	movs	r1, #0
 800ffae:	e01e      	b.n	800ffee <_dtoa_r+0x1a6>
 800ffb0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ffb2:	4413      	add	r3, r2
 800ffb4:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 800ffb8:	2920      	cmp	r1, #32
 800ffba:	bfc1      	itttt	gt
 800ffbc:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 800ffc0:	408e      	lslgt	r6, r1
 800ffc2:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800ffc6:	fa24 f101 	lsrgt.w	r1, r4, r1
 800ffca:	bfd6      	itet	le
 800ffcc:	f1c1 0120 	rsble	r1, r1, #32
 800ffd0:	4331      	orrgt	r1, r6
 800ffd2:	fa04 f101 	lslle.w	r1, r4, r1
 800ffd6:	ee07 1a90 	vmov	s15, r1
 800ffda:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800ffde:	3b01      	subs	r3, #1
 800ffe0:	ee17 1a90 	vmov	r1, s15
 800ffe4:	2501      	movs	r5, #1
 800ffe6:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800ffea:	e7a8      	b.n	800ff3e <_dtoa_r+0xf6>
 800ffec:	2101      	movs	r1, #1
 800ffee:	1ad2      	subs	r2, r2, r3
 800fff0:	1e53      	subs	r3, r2, #1
 800fff2:	9306      	str	r3, [sp, #24]
 800fff4:	bf45      	ittet	mi
 800fff6:	f1c2 0301 	rsbmi	r3, r2, #1
 800fffa:	9305      	strmi	r3, [sp, #20]
 800fffc:	2300      	movpl	r3, #0
 800fffe:	2300      	movmi	r3, #0
 8010000:	bf4c      	ite	mi
 8010002:	9306      	strmi	r3, [sp, #24]
 8010004:	9305      	strpl	r3, [sp, #20]
 8010006:	f1b8 0f00 	cmp.w	r8, #0
 801000a:	910c      	str	r1, [sp, #48]	@ 0x30
 801000c:	db18      	blt.n	8010040 <_dtoa_r+0x1f8>
 801000e:	9b06      	ldr	r3, [sp, #24]
 8010010:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8010014:	4443      	add	r3, r8
 8010016:	9306      	str	r3, [sp, #24]
 8010018:	2300      	movs	r3, #0
 801001a:	9a07      	ldr	r2, [sp, #28]
 801001c:	2a09      	cmp	r2, #9
 801001e:	d849      	bhi.n	80100b4 <_dtoa_r+0x26c>
 8010020:	2a05      	cmp	r2, #5
 8010022:	bfc4      	itt	gt
 8010024:	3a04      	subgt	r2, #4
 8010026:	9207      	strgt	r2, [sp, #28]
 8010028:	9a07      	ldr	r2, [sp, #28]
 801002a:	f1a2 0202 	sub.w	r2, r2, #2
 801002e:	bfcc      	ite	gt
 8010030:	2400      	movgt	r4, #0
 8010032:	2401      	movle	r4, #1
 8010034:	2a03      	cmp	r2, #3
 8010036:	d848      	bhi.n	80100ca <_dtoa_r+0x282>
 8010038:	e8df f002 	tbb	[pc, r2]
 801003c:	3a2c2e0b 	.word	0x3a2c2e0b
 8010040:	9b05      	ldr	r3, [sp, #20]
 8010042:	2200      	movs	r2, #0
 8010044:	eba3 0308 	sub.w	r3, r3, r8
 8010048:	9305      	str	r3, [sp, #20]
 801004a:	920a      	str	r2, [sp, #40]	@ 0x28
 801004c:	f1c8 0300 	rsb	r3, r8, #0
 8010050:	e7e3      	b.n	801001a <_dtoa_r+0x1d2>
 8010052:	2200      	movs	r2, #0
 8010054:	9208      	str	r2, [sp, #32]
 8010056:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010058:	2a00      	cmp	r2, #0
 801005a:	dc39      	bgt.n	80100d0 <_dtoa_r+0x288>
 801005c:	f04f 0b01 	mov.w	fp, #1
 8010060:	46da      	mov	sl, fp
 8010062:	465a      	mov	r2, fp
 8010064:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8010068:	f8d9 701c 	ldr.w	r7, [r9, #28]
 801006c:	2100      	movs	r1, #0
 801006e:	2004      	movs	r0, #4
 8010070:	f100 0614 	add.w	r6, r0, #20
 8010074:	4296      	cmp	r6, r2
 8010076:	d930      	bls.n	80100da <_dtoa_r+0x292>
 8010078:	6079      	str	r1, [r7, #4]
 801007a:	4648      	mov	r0, r9
 801007c:	9304      	str	r3, [sp, #16]
 801007e:	f000 ffcf 	bl	8011020 <_Balloc>
 8010082:	9b04      	ldr	r3, [sp, #16]
 8010084:	4607      	mov	r7, r0
 8010086:	2800      	cmp	r0, #0
 8010088:	d146      	bne.n	8010118 <_dtoa_r+0x2d0>
 801008a:	4b22      	ldr	r3, [pc, #136]	@ (8010114 <_dtoa_r+0x2cc>)
 801008c:	4602      	mov	r2, r0
 801008e:	f240 11af 	movw	r1, #431	@ 0x1af
 8010092:	e6f2      	b.n	800fe7a <_dtoa_r+0x32>
 8010094:	2201      	movs	r2, #1
 8010096:	e7dd      	b.n	8010054 <_dtoa_r+0x20c>
 8010098:	2200      	movs	r2, #0
 801009a:	9208      	str	r2, [sp, #32]
 801009c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801009e:	eb08 0b02 	add.w	fp, r8, r2
 80100a2:	f10b 0a01 	add.w	sl, fp, #1
 80100a6:	4652      	mov	r2, sl
 80100a8:	2a01      	cmp	r2, #1
 80100aa:	bfb8      	it	lt
 80100ac:	2201      	movlt	r2, #1
 80100ae:	e7db      	b.n	8010068 <_dtoa_r+0x220>
 80100b0:	2201      	movs	r2, #1
 80100b2:	e7f2      	b.n	801009a <_dtoa_r+0x252>
 80100b4:	2401      	movs	r4, #1
 80100b6:	2200      	movs	r2, #0
 80100b8:	e9cd 2407 	strd	r2, r4, [sp, #28]
 80100bc:	f04f 3bff 	mov.w	fp, #4294967295
 80100c0:	2100      	movs	r1, #0
 80100c2:	46da      	mov	sl, fp
 80100c4:	2212      	movs	r2, #18
 80100c6:	9109      	str	r1, [sp, #36]	@ 0x24
 80100c8:	e7ce      	b.n	8010068 <_dtoa_r+0x220>
 80100ca:	2201      	movs	r2, #1
 80100cc:	9208      	str	r2, [sp, #32]
 80100ce:	e7f5      	b.n	80100bc <_dtoa_r+0x274>
 80100d0:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 80100d4:	46da      	mov	sl, fp
 80100d6:	465a      	mov	r2, fp
 80100d8:	e7c6      	b.n	8010068 <_dtoa_r+0x220>
 80100da:	3101      	adds	r1, #1
 80100dc:	0040      	lsls	r0, r0, #1
 80100de:	e7c7      	b.n	8010070 <_dtoa_r+0x228>
 80100e0:	636f4361 	.word	0x636f4361
 80100e4:	3fd287a7 	.word	0x3fd287a7
 80100e8:	8b60c8b3 	.word	0x8b60c8b3
 80100ec:	3fc68a28 	.word	0x3fc68a28
 80100f0:	509f79fb 	.word	0x509f79fb
 80100f4:	3fd34413 	.word	0x3fd34413
 80100f8:	08012ef4 	.word	0x08012ef4
 80100fc:	08012f0b 	.word	0x08012f0b
 8010100:	7ff00000 	.word	0x7ff00000
 8010104:	08012ef0 	.word	0x08012ef0
 8010108:	08013259 	.word	0x08013259
 801010c:	08013258 	.word	0x08013258
 8010110:	08013068 	.word	0x08013068
 8010114:	08012f63 	.word	0x08012f63
 8010118:	f8d9 201c 	ldr.w	r2, [r9, #28]
 801011c:	f1ba 0f0e 	cmp.w	sl, #14
 8010120:	6010      	str	r0, [r2, #0]
 8010122:	d86f      	bhi.n	8010204 <_dtoa_r+0x3bc>
 8010124:	2c00      	cmp	r4, #0
 8010126:	d06d      	beq.n	8010204 <_dtoa_r+0x3bc>
 8010128:	f1b8 0f00 	cmp.w	r8, #0
 801012c:	f340 80c2 	ble.w	80102b4 <_dtoa_r+0x46c>
 8010130:	4aca      	ldr	r2, [pc, #808]	@ (801045c <_dtoa_r+0x614>)
 8010132:	f008 010f 	and.w	r1, r8, #15
 8010136:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 801013a:	f418 7f80 	tst.w	r8, #256	@ 0x100
 801013e:	ed92 7b00 	vldr	d7, [r2]
 8010142:	ea4f 1128 	mov.w	r1, r8, asr #4
 8010146:	f000 80a9 	beq.w	801029c <_dtoa_r+0x454>
 801014a:	4ac5      	ldr	r2, [pc, #788]	@ (8010460 <_dtoa_r+0x618>)
 801014c:	ed92 6b08 	vldr	d6, [r2, #32]
 8010150:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8010154:	ed8d 6b02 	vstr	d6, [sp, #8]
 8010158:	f001 010f 	and.w	r1, r1, #15
 801015c:	2203      	movs	r2, #3
 801015e:	48c0      	ldr	r0, [pc, #768]	@ (8010460 <_dtoa_r+0x618>)
 8010160:	2900      	cmp	r1, #0
 8010162:	f040 809d 	bne.w	80102a0 <_dtoa_r+0x458>
 8010166:	ed9d 6b02 	vldr	d6, [sp, #8]
 801016a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801016e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010172:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8010174:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010178:	2900      	cmp	r1, #0
 801017a:	f000 80c1 	beq.w	8010300 <_dtoa_r+0x4b8>
 801017e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8010182:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8010186:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801018a:	f140 80b9 	bpl.w	8010300 <_dtoa_r+0x4b8>
 801018e:	f1ba 0f00 	cmp.w	sl, #0
 8010192:	f000 80b5 	beq.w	8010300 <_dtoa_r+0x4b8>
 8010196:	f1bb 0f00 	cmp.w	fp, #0
 801019a:	dd31      	ble.n	8010200 <_dtoa_r+0x3b8>
 801019c:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 80101a0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80101a4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80101a8:	f108 31ff 	add.w	r1, r8, #4294967295
 80101ac:	9104      	str	r1, [sp, #16]
 80101ae:	3201      	adds	r2, #1
 80101b0:	465c      	mov	r4, fp
 80101b2:	ed9d 6b02 	vldr	d6, [sp, #8]
 80101b6:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 80101ba:	ee07 2a90 	vmov	s15, r2
 80101be:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80101c2:	eea7 5b06 	vfma.f64	d5, d7, d6
 80101c6:	ee15 2a90 	vmov	r2, s11
 80101ca:	ec51 0b15 	vmov	r0, r1, d5
 80101ce:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 80101d2:	2c00      	cmp	r4, #0
 80101d4:	f040 8098 	bne.w	8010308 <_dtoa_r+0x4c0>
 80101d8:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 80101dc:	ee36 6b47 	vsub.f64	d6, d6, d7
 80101e0:	ec41 0b17 	vmov	d7, r0, r1
 80101e4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80101e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80101ec:	f300 8261 	bgt.w	80106b2 <_dtoa_r+0x86a>
 80101f0:	eeb1 7b47 	vneg.f64	d7, d7
 80101f4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80101f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80101fc:	f100 80f5 	bmi.w	80103ea <_dtoa_r+0x5a2>
 8010200:	ed8d 8b02 	vstr	d8, [sp, #8]
 8010204:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8010206:	2a00      	cmp	r2, #0
 8010208:	f2c0 812c 	blt.w	8010464 <_dtoa_r+0x61c>
 801020c:	f1b8 0f0e 	cmp.w	r8, #14
 8010210:	f300 8128 	bgt.w	8010464 <_dtoa_r+0x61c>
 8010214:	4b91      	ldr	r3, [pc, #580]	@ (801045c <_dtoa_r+0x614>)
 8010216:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801021a:	ed93 6b00 	vldr	d6, [r3]
 801021e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010220:	2b00      	cmp	r3, #0
 8010222:	da03      	bge.n	801022c <_dtoa_r+0x3e4>
 8010224:	f1ba 0f00 	cmp.w	sl, #0
 8010228:	f340 80d2 	ble.w	80103d0 <_dtoa_r+0x588>
 801022c:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8010230:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010234:	463e      	mov	r6, r7
 8010236:	ee87 5b06 	vdiv.f64	d5, d7, d6
 801023a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 801023e:	ee15 3a10 	vmov	r3, s10
 8010242:	3330      	adds	r3, #48	@ 0x30
 8010244:	f806 3b01 	strb.w	r3, [r6], #1
 8010248:	1bf3      	subs	r3, r6, r7
 801024a:	459a      	cmp	sl, r3
 801024c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8010250:	eea3 7b46 	vfms.f64	d7, d3, d6
 8010254:	f040 80f8 	bne.w	8010448 <_dtoa_r+0x600>
 8010258:	ee37 7b07 	vadd.f64	d7, d7, d7
 801025c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8010260:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010264:	f300 80dd 	bgt.w	8010422 <_dtoa_r+0x5da>
 8010268:	eeb4 7b46 	vcmp.f64	d7, d6
 801026c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010270:	d104      	bne.n	801027c <_dtoa_r+0x434>
 8010272:	ee15 3a10 	vmov	r3, s10
 8010276:	07db      	lsls	r3, r3, #31
 8010278:	f100 80d3 	bmi.w	8010422 <_dtoa_r+0x5da>
 801027c:	9901      	ldr	r1, [sp, #4]
 801027e:	4648      	mov	r0, r9
 8010280:	f000 ff0e 	bl	80110a0 <_Bfree>
 8010284:	2300      	movs	r3, #0
 8010286:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010288:	7033      	strb	r3, [r6, #0]
 801028a:	f108 0301 	add.w	r3, r8, #1
 801028e:	6013      	str	r3, [r2, #0]
 8010290:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8010292:	2b00      	cmp	r3, #0
 8010294:	f000 8304 	beq.w	80108a0 <_dtoa_r+0xa58>
 8010298:	601e      	str	r6, [r3, #0]
 801029a:	e301      	b.n	80108a0 <_dtoa_r+0xa58>
 801029c:	2202      	movs	r2, #2
 801029e:	e75e      	b.n	801015e <_dtoa_r+0x316>
 80102a0:	07cc      	lsls	r4, r1, #31
 80102a2:	d504      	bpl.n	80102ae <_dtoa_r+0x466>
 80102a4:	ed90 6b00 	vldr	d6, [r0]
 80102a8:	3201      	adds	r2, #1
 80102aa:	ee27 7b06 	vmul.f64	d7, d7, d6
 80102ae:	1049      	asrs	r1, r1, #1
 80102b0:	3008      	adds	r0, #8
 80102b2:	e755      	b.n	8010160 <_dtoa_r+0x318>
 80102b4:	d022      	beq.n	80102fc <_dtoa_r+0x4b4>
 80102b6:	f1c8 0100 	rsb	r1, r8, #0
 80102ba:	4a68      	ldr	r2, [pc, #416]	@ (801045c <_dtoa_r+0x614>)
 80102bc:	f001 000f 	and.w	r0, r1, #15
 80102c0:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80102c4:	ed92 7b00 	vldr	d7, [r2]
 80102c8:	ee28 7b07 	vmul.f64	d7, d8, d7
 80102cc:	ed8d 7b02 	vstr	d7, [sp, #8]
 80102d0:	4863      	ldr	r0, [pc, #396]	@ (8010460 <_dtoa_r+0x618>)
 80102d2:	1109      	asrs	r1, r1, #4
 80102d4:	2400      	movs	r4, #0
 80102d6:	2202      	movs	r2, #2
 80102d8:	b929      	cbnz	r1, 80102e6 <_dtoa_r+0x49e>
 80102da:	2c00      	cmp	r4, #0
 80102dc:	f43f af49 	beq.w	8010172 <_dtoa_r+0x32a>
 80102e0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80102e4:	e745      	b.n	8010172 <_dtoa_r+0x32a>
 80102e6:	07ce      	lsls	r6, r1, #31
 80102e8:	d505      	bpl.n	80102f6 <_dtoa_r+0x4ae>
 80102ea:	ed90 6b00 	vldr	d6, [r0]
 80102ee:	3201      	adds	r2, #1
 80102f0:	2401      	movs	r4, #1
 80102f2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80102f6:	1049      	asrs	r1, r1, #1
 80102f8:	3008      	adds	r0, #8
 80102fa:	e7ed      	b.n	80102d8 <_dtoa_r+0x490>
 80102fc:	2202      	movs	r2, #2
 80102fe:	e738      	b.n	8010172 <_dtoa_r+0x32a>
 8010300:	f8cd 8010 	str.w	r8, [sp, #16]
 8010304:	4654      	mov	r4, sl
 8010306:	e754      	b.n	80101b2 <_dtoa_r+0x36a>
 8010308:	4a54      	ldr	r2, [pc, #336]	@ (801045c <_dtoa_r+0x614>)
 801030a:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 801030e:	ed12 4b02 	vldr	d4, [r2, #-8]
 8010312:	9a08      	ldr	r2, [sp, #32]
 8010314:	ec41 0b17 	vmov	d7, r0, r1
 8010318:	443c      	add	r4, r7
 801031a:	b34a      	cbz	r2, 8010370 <_dtoa_r+0x528>
 801031c:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8010320:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8010324:	463e      	mov	r6, r7
 8010326:	ee83 5b04 	vdiv.f64	d5, d3, d4
 801032a:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 801032e:	ee35 7b47 	vsub.f64	d7, d5, d7
 8010332:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8010336:	ee14 2a90 	vmov	r2, s9
 801033a:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801033e:	3230      	adds	r2, #48	@ 0x30
 8010340:	ee36 6b45 	vsub.f64	d6, d6, d5
 8010344:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010348:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801034c:	f806 2b01 	strb.w	r2, [r6], #1
 8010350:	d438      	bmi.n	80103c4 <_dtoa_r+0x57c>
 8010352:	ee32 5b46 	vsub.f64	d5, d2, d6
 8010356:	eeb4 5bc7 	vcmpe.f64	d5, d7
 801035a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801035e:	d462      	bmi.n	8010426 <_dtoa_r+0x5de>
 8010360:	42a6      	cmp	r6, r4
 8010362:	f43f af4d 	beq.w	8010200 <_dtoa_r+0x3b8>
 8010366:	ee27 7b03 	vmul.f64	d7, d7, d3
 801036a:	ee26 6b03 	vmul.f64	d6, d6, d3
 801036e:	e7e0      	b.n	8010332 <_dtoa_r+0x4ea>
 8010370:	4621      	mov	r1, r4
 8010372:	463e      	mov	r6, r7
 8010374:	ee27 7b04 	vmul.f64	d7, d7, d4
 8010378:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 801037c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8010380:	ee14 2a90 	vmov	r2, s9
 8010384:	3230      	adds	r2, #48	@ 0x30
 8010386:	f806 2b01 	strb.w	r2, [r6], #1
 801038a:	42a6      	cmp	r6, r4
 801038c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8010390:	ee36 6b45 	vsub.f64	d6, d6, d5
 8010394:	d119      	bne.n	80103ca <_dtoa_r+0x582>
 8010396:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 801039a:	ee37 4b05 	vadd.f64	d4, d7, d5
 801039e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80103a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80103a6:	dc3e      	bgt.n	8010426 <_dtoa_r+0x5de>
 80103a8:	ee35 5b47 	vsub.f64	d5, d5, d7
 80103ac:	eeb4 6bc5 	vcmpe.f64	d6, d5
 80103b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80103b4:	f57f af24 	bpl.w	8010200 <_dtoa_r+0x3b8>
 80103b8:	460e      	mov	r6, r1
 80103ba:	3901      	subs	r1, #1
 80103bc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80103c0:	2b30      	cmp	r3, #48	@ 0x30
 80103c2:	d0f9      	beq.n	80103b8 <_dtoa_r+0x570>
 80103c4:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80103c8:	e758      	b.n	801027c <_dtoa_r+0x434>
 80103ca:	ee26 6b03 	vmul.f64	d6, d6, d3
 80103ce:	e7d5      	b.n	801037c <_dtoa_r+0x534>
 80103d0:	d10b      	bne.n	80103ea <_dtoa_r+0x5a2>
 80103d2:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 80103d6:	ee26 6b07 	vmul.f64	d6, d6, d7
 80103da:	ed9d 7b02 	vldr	d7, [sp, #8]
 80103de:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80103e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80103e6:	f2c0 8161 	blt.w	80106ac <_dtoa_r+0x864>
 80103ea:	2400      	movs	r4, #0
 80103ec:	4625      	mov	r5, r4
 80103ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80103f0:	43db      	mvns	r3, r3
 80103f2:	9304      	str	r3, [sp, #16]
 80103f4:	463e      	mov	r6, r7
 80103f6:	f04f 0800 	mov.w	r8, #0
 80103fa:	4621      	mov	r1, r4
 80103fc:	4648      	mov	r0, r9
 80103fe:	f000 fe4f 	bl	80110a0 <_Bfree>
 8010402:	2d00      	cmp	r5, #0
 8010404:	d0de      	beq.n	80103c4 <_dtoa_r+0x57c>
 8010406:	f1b8 0f00 	cmp.w	r8, #0
 801040a:	d005      	beq.n	8010418 <_dtoa_r+0x5d0>
 801040c:	45a8      	cmp	r8, r5
 801040e:	d003      	beq.n	8010418 <_dtoa_r+0x5d0>
 8010410:	4641      	mov	r1, r8
 8010412:	4648      	mov	r0, r9
 8010414:	f000 fe44 	bl	80110a0 <_Bfree>
 8010418:	4629      	mov	r1, r5
 801041a:	4648      	mov	r0, r9
 801041c:	f000 fe40 	bl	80110a0 <_Bfree>
 8010420:	e7d0      	b.n	80103c4 <_dtoa_r+0x57c>
 8010422:	f8cd 8010 	str.w	r8, [sp, #16]
 8010426:	4633      	mov	r3, r6
 8010428:	461e      	mov	r6, r3
 801042a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801042e:	2a39      	cmp	r2, #57	@ 0x39
 8010430:	d106      	bne.n	8010440 <_dtoa_r+0x5f8>
 8010432:	429f      	cmp	r7, r3
 8010434:	d1f8      	bne.n	8010428 <_dtoa_r+0x5e0>
 8010436:	9a04      	ldr	r2, [sp, #16]
 8010438:	3201      	adds	r2, #1
 801043a:	9204      	str	r2, [sp, #16]
 801043c:	2230      	movs	r2, #48	@ 0x30
 801043e:	703a      	strb	r2, [r7, #0]
 8010440:	781a      	ldrb	r2, [r3, #0]
 8010442:	3201      	adds	r2, #1
 8010444:	701a      	strb	r2, [r3, #0]
 8010446:	e7bd      	b.n	80103c4 <_dtoa_r+0x57c>
 8010448:	ee27 7b04 	vmul.f64	d7, d7, d4
 801044c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010450:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010454:	f47f aeef 	bne.w	8010236 <_dtoa_r+0x3ee>
 8010458:	e710      	b.n	801027c <_dtoa_r+0x434>
 801045a:	bf00      	nop
 801045c:	08013068 	.word	0x08013068
 8010460:	08013040 	.word	0x08013040
 8010464:	9908      	ldr	r1, [sp, #32]
 8010466:	2900      	cmp	r1, #0
 8010468:	f000 80e3 	beq.w	8010632 <_dtoa_r+0x7ea>
 801046c:	9907      	ldr	r1, [sp, #28]
 801046e:	2901      	cmp	r1, #1
 8010470:	f300 80c8 	bgt.w	8010604 <_dtoa_r+0x7bc>
 8010474:	2d00      	cmp	r5, #0
 8010476:	f000 80c1 	beq.w	80105fc <_dtoa_r+0x7b4>
 801047a:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 801047e:	9e05      	ldr	r6, [sp, #20]
 8010480:	461c      	mov	r4, r3
 8010482:	9304      	str	r3, [sp, #16]
 8010484:	9b05      	ldr	r3, [sp, #20]
 8010486:	4413      	add	r3, r2
 8010488:	9305      	str	r3, [sp, #20]
 801048a:	9b06      	ldr	r3, [sp, #24]
 801048c:	2101      	movs	r1, #1
 801048e:	4413      	add	r3, r2
 8010490:	4648      	mov	r0, r9
 8010492:	9306      	str	r3, [sp, #24]
 8010494:	f000 ff02 	bl	801129c <__i2b>
 8010498:	9b04      	ldr	r3, [sp, #16]
 801049a:	4605      	mov	r5, r0
 801049c:	b166      	cbz	r6, 80104b8 <_dtoa_r+0x670>
 801049e:	9a06      	ldr	r2, [sp, #24]
 80104a0:	2a00      	cmp	r2, #0
 80104a2:	dd09      	ble.n	80104b8 <_dtoa_r+0x670>
 80104a4:	42b2      	cmp	r2, r6
 80104a6:	9905      	ldr	r1, [sp, #20]
 80104a8:	bfa8      	it	ge
 80104aa:	4632      	movge	r2, r6
 80104ac:	1a89      	subs	r1, r1, r2
 80104ae:	9105      	str	r1, [sp, #20]
 80104b0:	9906      	ldr	r1, [sp, #24]
 80104b2:	1ab6      	subs	r6, r6, r2
 80104b4:	1a8a      	subs	r2, r1, r2
 80104b6:	9206      	str	r2, [sp, #24]
 80104b8:	b1fb      	cbz	r3, 80104fa <_dtoa_r+0x6b2>
 80104ba:	9a08      	ldr	r2, [sp, #32]
 80104bc:	2a00      	cmp	r2, #0
 80104be:	f000 80bc 	beq.w	801063a <_dtoa_r+0x7f2>
 80104c2:	b19c      	cbz	r4, 80104ec <_dtoa_r+0x6a4>
 80104c4:	4629      	mov	r1, r5
 80104c6:	4622      	mov	r2, r4
 80104c8:	4648      	mov	r0, r9
 80104ca:	930b      	str	r3, [sp, #44]	@ 0x2c
 80104cc:	f000 ffa6 	bl	801141c <__pow5mult>
 80104d0:	9a01      	ldr	r2, [sp, #4]
 80104d2:	4601      	mov	r1, r0
 80104d4:	4605      	mov	r5, r0
 80104d6:	4648      	mov	r0, r9
 80104d8:	f000 fef6 	bl	80112c8 <__multiply>
 80104dc:	9901      	ldr	r1, [sp, #4]
 80104de:	9004      	str	r0, [sp, #16]
 80104e0:	4648      	mov	r0, r9
 80104e2:	f000 fddd 	bl	80110a0 <_Bfree>
 80104e6:	9a04      	ldr	r2, [sp, #16]
 80104e8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80104ea:	9201      	str	r2, [sp, #4]
 80104ec:	1b1a      	subs	r2, r3, r4
 80104ee:	d004      	beq.n	80104fa <_dtoa_r+0x6b2>
 80104f0:	9901      	ldr	r1, [sp, #4]
 80104f2:	4648      	mov	r0, r9
 80104f4:	f000 ff92 	bl	801141c <__pow5mult>
 80104f8:	9001      	str	r0, [sp, #4]
 80104fa:	2101      	movs	r1, #1
 80104fc:	4648      	mov	r0, r9
 80104fe:	f000 fecd 	bl	801129c <__i2b>
 8010502:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010504:	4604      	mov	r4, r0
 8010506:	2b00      	cmp	r3, #0
 8010508:	f000 81d0 	beq.w	80108ac <_dtoa_r+0xa64>
 801050c:	461a      	mov	r2, r3
 801050e:	4601      	mov	r1, r0
 8010510:	4648      	mov	r0, r9
 8010512:	f000 ff83 	bl	801141c <__pow5mult>
 8010516:	9b07      	ldr	r3, [sp, #28]
 8010518:	2b01      	cmp	r3, #1
 801051a:	4604      	mov	r4, r0
 801051c:	f300 8095 	bgt.w	801064a <_dtoa_r+0x802>
 8010520:	9b02      	ldr	r3, [sp, #8]
 8010522:	2b00      	cmp	r3, #0
 8010524:	f040 808b 	bne.w	801063e <_dtoa_r+0x7f6>
 8010528:	9b03      	ldr	r3, [sp, #12]
 801052a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 801052e:	2a00      	cmp	r2, #0
 8010530:	f040 8087 	bne.w	8010642 <_dtoa_r+0x7fa>
 8010534:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8010538:	0d12      	lsrs	r2, r2, #20
 801053a:	0512      	lsls	r2, r2, #20
 801053c:	2a00      	cmp	r2, #0
 801053e:	f000 8082 	beq.w	8010646 <_dtoa_r+0x7fe>
 8010542:	9b05      	ldr	r3, [sp, #20]
 8010544:	3301      	adds	r3, #1
 8010546:	9305      	str	r3, [sp, #20]
 8010548:	9b06      	ldr	r3, [sp, #24]
 801054a:	3301      	adds	r3, #1
 801054c:	9306      	str	r3, [sp, #24]
 801054e:	2301      	movs	r3, #1
 8010550:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010552:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010554:	2b00      	cmp	r3, #0
 8010556:	f000 81af 	beq.w	80108b8 <_dtoa_r+0xa70>
 801055a:	6922      	ldr	r2, [r4, #16]
 801055c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8010560:	6910      	ldr	r0, [r2, #16]
 8010562:	f000 fe4f 	bl	8011204 <__hi0bits>
 8010566:	f1c0 0020 	rsb	r0, r0, #32
 801056a:	9b06      	ldr	r3, [sp, #24]
 801056c:	4418      	add	r0, r3
 801056e:	f010 001f 	ands.w	r0, r0, #31
 8010572:	d076      	beq.n	8010662 <_dtoa_r+0x81a>
 8010574:	f1c0 0220 	rsb	r2, r0, #32
 8010578:	2a04      	cmp	r2, #4
 801057a:	dd69      	ble.n	8010650 <_dtoa_r+0x808>
 801057c:	9b05      	ldr	r3, [sp, #20]
 801057e:	f1c0 001c 	rsb	r0, r0, #28
 8010582:	4403      	add	r3, r0
 8010584:	9305      	str	r3, [sp, #20]
 8010586:	9b06      	ldr	r3, [sp, #24]
 8010588:	4406      	add	r6, r0
 801058a:	4403      	add	r3, r0
 801058c:	9306      	str	r3, [sp, #24]
 801058e:	9b05      	ldr	r3, [sp, #20]
 8010590:	2b00      	cmp	r3, #0
 8010592:	dd05      	ble.n	80105a0 <_dtoa_r+0x758>
 8010594:	9901      	ldr	r1, [sp, #4]
 8010596:	461a      	mov	r2, r3
 8010598:	4648      	mov	r0, r9
 801059a:	f000 ff99 	bl	80114d0 <__lshift>
 801059e:	9001      	str	r0, [sp, #4]
 80105a0:	9b06      	ldr	r3, [sp, #24]
 80105a2:	2b00      	cmp	r3, #0
 80105a4:	dd05      	ble.n	80105b2 <_dtoa_r+0x76a>
 80105a6:	4621      	mov	r1, r4
 80105a8:	461a      	mov	r2, r3
 80105aa:	4648      	mov	r0, r9
 80105ac:	f000 ff90 	bl	80114d0 <__lshift>
 80105b0:	4604      	mov	r4, r0
 80105b2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80105b4:	2b00      	cmp	r3, #0
 80105b6:	d056      	beq.n	8010666 <_dtoa_r+0x81e>
 80105b8:	9801      	ldr	r0, [sp, #4]
 80105ba:	4621      	mov	r1, r4
 80105bc:	f000 fff4 	bl	80115a8 <__mcmp>
 80105c0:	2800      	cmp	r0, #0
 80105c2:	da50      	bge.n	8010666 <_dtoa_r+0x81e>
 80105c4:	f108 33ff 	add.w	r3, r8, #4294967295
 80105c8:	9304      	str	r3, [sp, #16]
 80105ca:	9901      	ldr	r1, [sp, #4]
 80105cc:	2300      	movs	r3, #0
 80105ce:	220a      	movs	r2, #10
 80105d0:	4648      	mov	r0, r9
 80105d2:	f000 fd87 	bl	80110e4 <__multadd>
 80105d6:	9b08      	ldr	r3, [sp, #32]
 80105d8:	9001      	str	r0, [sp, #4]
 80105da:	2b00      	cmp	r3, #0
 80105dc:	f000 816e 	beq.w	80108bc <_dtoa_r+0xa74>
 80105e0:	4629      	mov	r1, r5
 80105e2:	2300      	movs	r3, #0
 80105e4:	220a      	movs	r2, #10
 80105e6:	4648      	mov	r0, r9
 80105e8:	f000 fd7c 	bl	80110e4 <__multadd>
 80105ec:	f1bb 0f00 	cmp.w	fp, #0
 80105f0:	4605      	mov	r5, r0
 80105f2:	dc64      	bgt.n	80106be <_dtoa_r+0x876>
 80105f4:	9b07      	ldr	r3, [sp, #28]
 80105f6:	2b02      	cmp	r3, #2
 80105f8:	dc3e      	bgt.n	8010678 <_dtoa_r+0x830>
 80105fa:	e060      	b.n	80106be <_dtoa_r+0x876>
 80105fc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80105fe:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8010602:	e73c      	b.n	801047e <_dtoa_r+0x636>
 8010604:	f10a 34ff 	add.w	r4, sl, #4294967295
 8010608:	42a3      	cmp	r3, r4
 801060a:	bfbf      	itttt	lt
 801060c:	1ae2      	sublt	r2, r4, r3
 801060e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8010610:	189b      	addlt	r3, r3, r2
 8010612:	930a      	strlt	r3, [sp, #40]	@ 0x28
 8010614:	bfae      	itee	ge
 8010616:	1b1c      	subge	r4, r3, r4
 8010618:	4623      	movlt	r3, r4
 801061a:	2400      	movlt	r4, #0
 801061c:	f1ba 0f00 	cmp.w	sl, #0
 8010620:	bfb5      	itete	lt
 8010622:	9a05      	ldrlt	r2, [sp, #20]
 8010624:	9e05      	ldrge	r6, [sp, #20]
 8010626:	eba2 060a 	sublt.w	r6, r2, sl
 801062a:	4652      	movge	r2, sl
 801062c:	bfb8      	it	lt
 801062e:	2200      	movlt	r2, #0
 8010630:	e727      	b.n	8010482 <_dtoa_r+0x63a>
 8010632:	9e05      	ldr	r6, [sp, #20]
 8010634:	9d08      	ldr	r5, [sp, #32]
 8010636:	461c      	mov	r4, r3
 8010638:	e730      	b.n	801049c <_dtoa_r+0x654>
 801063a:	461a      	mov	r2, r3
 801063c:	e758      	b.n	80104f0 <_dtoa_r+0x6a8>
 801063e:	2300      	movs	r3, #0
 8010640:	e786      	b.n	8010550 <_dtoa_r+0x708>
 8010642:	9b02      	ldr	r3, [sp, #8]
 8010644:	e784      	b.n	8010550 <_dtoa_r+0x708>
 8010646:	920b      	str	r2, [sp, #44]	@ 0x2c
 8010648:	e783      	b.n	8010552 <_dtoa_r+0x70a>
 801064a:	2300      	movs	r3, #0
 801064c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801064e:	e784      	b.n	801055a <_dtoa_r+0x712>
 8010650:	d09d      	beq.n	801058e <_dtoa_r+0x746>
 8010652:	9b05      	ldr	r3, [sp, #20]
 8010654:	321c      	adds	r2, #28
 8010656:	4413      	add	r3, r2
 8010658:	9305      	str	r3, [sp, #20]
 801065a:	9b06      	ldr	r3, [sp, #24]
 801065c:	4416      	add	r6, r2
 801065e:	4413      	add	r3, r2
 8010660:	e794      	b.n	801058c <_dtoa_r+0x744>
 8010662:	4602      	mov	r2, r0
 8010664:	e7f5      	b.n	8010652 <_dtoa_r+0x80a>
 8010666:	f1ba 0f00 	cmp.w	sl, #0
 801066a:	f8cd 8010 	str.w	r8, [sp, #16]
 801066e:	46d3      	mov	fp, sl
 8010670:	dc21      	bgt.n	80106b6 <_dtoa_r+0x86e>
 8010672:	9b07      	ldr	r3, [sp, #28]
 8010674:	2b02      	cmp	r3, #2
 8010676:	dd1e      	ble.n	80106b6 <_dtoa_r+0x86e>
 8010678:	f1bb 0f00 	cmp.w	fp, #0
 801067c:	f47f aeb7 	bne.w	80103ee <_dtoa_r+0x5a6>
 8010680:	4621      	mov	r1, r4
 8010682:	465b      	mov	r3, fp
 8010684:	2205      	movs	r2, #5
 8010686:	4648      	mov	r0, r9
 8010688:	f000 fd2c 	bl	80110e4 <__multadd>
 801068c:	4601      	mov	r1, r0
 801068e:	4604      	mov	r4, r0
 8010690:	9801      	ldr	r0, [sp, #4]
 8010692:	f000 ff89 	bl	80115a8 <__mcmp>
 8010696:	2800      	cmp	r0, #0
 8010698:	f77f aea9 	ble.w	80103ee <_dtoa_r+0x5a6>
 801069c:	463e      	mov	r6, r7
 801069e:	2331      	movs	r3, #49	@ 0x31
 80106a0:	f806 3b01 	strb.w	r3, [r6], #1
 80106a4:	9b04      	ldr	r3, [sp, #16]
 80106a6:	3301      	adds	r3, #1
 80106a8:	9304      	str	r3, [sp, #16]
 80106aa:	e6a4      	b.n	80103f6 <_dtoa_r+0x5ae>
 80106ac:	f8cd 8010 	str.w	r8, [sp, #16]
 80106b0:	4654      	mov	r4, sl
 80106b2:	4625      	mov	r5, r4
 80106b4:	e7f2      	b.n	801069c <_dtoa_r+0x854>
 80106b6:	9b08      	ldr	r3, [sp, #32]
 80106b8:	2b00      	cmp	r3, #0
 80106ba:	f000 8103 	beq.w	80108c4 <_dtoa_r+0xa7c>
 80106be:	2e00      	cmp	r6, #0
 80106c0:	dd05      	ble.n	80106ce <_dtoa_r+0x886>
 80106c2:	4629      	mov	r1, r5
 80106c4:	4632      	mov	r2, r6
 80106c6:	4648      	mov	r0, r9
 80106c8:	f000 ff02 	bl	80114d0 <__lshift>
 80106cc:	4605      	mov	r5, r0
 80106ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80106d0:	2b00      	cmp	r3, #0
 80106d2:	d058      	beq.n	8010786 <_dtoa_r+0x93e>
 80106d4:	6869      	ldr	r1, [r5, #4]
 80106d6:	4648      	mov	r0, r9
 80106d8:	f000 fca2 	bl	8011020 <_Balloc>
 80106dc:	4606      	mov	r6, r0
 80106de:	b928      	cbnz	r0, 80106ec <_dtoa_r+0x8a4>
 80106e0:	4b82      	ldr	r3, [pc, #520]	@ (80108ec <_dtoa_r+0xaa4>)
 80106e2:	4602      	mov	r2, r0
 80106e4:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80106e8:	f7ff bbc7 	b.w	800fe7a <_dtoa_r+0x32>
 80106ec:	692a      	ldr	r2, [r5, #16]
 80106ee:	3202      	adds	r2, #2
 80106f0:	0092      	lsls	r2, r2, #2
 80106f2:	f105 010c 	add.w	r1, r5, #12
 80106f6:	300c      	adds	r0, #12
 80106f8:	f7ff fafd 	bl	800fcf6 <memcpy>
 80106fc:	2201      	movs	r2, #1
 80106fe:	4631      	mov	r1, r6
 8010700:	4648      	mov	r0, r9
 8010702:	f000 fee5 	bl	80114d0 <__lshift>
 8010706:	1c7b      	adds	r3, r7, #1
 8010708:	9305      	str	r3, [sp, #20]
 801070a:	eb07 030b 	add.w	r3, r7, fp
 801070e:	9309      	str	r3, [sp, #36]	@ 0x24
 8010710:	9b02      	ldr	r3, [sp, #8]
 8010712:	f003 0301 	and.w	r3, r3, #1
 8010716:	46a8      	mov	r8, r5
 8010718:	9308      	str	r3, [sp, #32]
 801071a:	4605      	mov	r5, r0
 801071c:	9b05      	ldr	r3, [sp, #20]
 801071e:	9801      	ldr	r0, [sp, #4]
 8010720:	4621      	mov	r1, r4
 8010722:	f103 3bff 	add.w	fp, r3, #4294967295
 8010726:	f7ff fb05 	bl	800fd34 <quorem>
 801072a:	4641      	mov	r1, r8
 801072c:	9002      	str	r0, [sp, #8]
 801072e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8010732:	9801      	ldr	r0, [sp, #4]
 8010734:	f000 ff38 	bl	80115a8 <__mcmp>
 8010738:	462a      	mov	r2, r5
 801073a:	9006      	str	r0, [sp, #24]
 801073c:	4621      	mov	r1, r4
 801073e:	4648      	mov	r0, r9
 8010740:	f000 ff4e 	bl	80115e0 <__mdiff>
 8010744:	68c2      	ldr	r2, [r0, #12]
 8010746:	4606      	mov	r6, r0
 8010748:	b9fa      	cbnz	r2, 801078a <_dtoa_r+0x942>
 801074a:	4601      	mov	r1, r0
 801074c:	9801      	ldr	r0, [sp, #4]
 801074e:	f000 ff2b 	bl	80115a8 <__mcmp>
 8010752:	4602      	mov	r2, r0
 8010754:	4631      	mov	r1, r6
 8010756:	4648      	mov	r0, r9
 8010758:	920a      	str	r2, [sp, #40]	@ 0x28
 801075a:	f000 fca1 	bl	80110a0 <_Bfree>
 801075e:	9b07      	ldr	r3, [sp, #28]
 8010760:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010762:	9e05      	ldr	r6, [sp, #20]
 8010764:	ea43 0102 	orr.w	r1, r3, r2
 8010768:	9b08      	ldr	r3, [sp, #32]
 801076a:	4319      	orrs	r1, r3
 801076c:	d10f      	bne.n	801078e <_dtoa_r+0x946>
 801076e:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8010772:	d028      	beq.n	80107c6 <_dtoa_r+0x97e>
 8010774:	9b06      	ldr	r3, [sp, #24]
 8010776:	2b00      	cmp	r3, #0
 8010778:	dd02      	ble.n	8010780 <_dtoa_r+0x938>
 801077a:	9b02      	ldr	r3, [sp, #8]
 801077c:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8010780:	f88b a000 	strb.w	sl, [fp]
 8010784:	e639      	b.n	80103fa <_dtoa_r+0x5b2>
 8010786:	4628      	mov	r0, r5
 8010788:	e7bd      	b.n	8010706 <_dtoa_r+0x8be>
 801078a:	2201      	movs	r2, #1
 801078c:	e7e2      	b.n	8010754 <_dtoa_r+0x90c>
 801078e:	9b06      	ldr	r3, [sp, #24]
 8010790:	2b00      	cmp	r3, #0
 8010792:	db04      	blt.n	801079e <_dtoa_r+0x956>
 8010794:	9907      	ldr	r1, [sp, #28]
 8010796:	430b      	orrs	r3, r1
 8010798:	9908      	ldr	r1, [sp, #32]
 801079a:	430b      	orrs	r3, r1
 801079c:	d120      	bne.n	80107e0 <_dtoa_r+0x998>
 801079e:	2a00      	cmp	r2, #0
 80107a0:	ddee      	ble.n	8010780 <_dtoa_r+0x938>
 80107a2:	9901      	ldr	r1, [sp, #4]
 80107a4:	2201      	movs	r2, #1
 80107a6:	4648      	mov	r0, r9
 80107a8:	f000 fe92 	bl	80114d0 <__lshift>
 80107ac:	4621      	mov	r1, r4
 80107ae:	9001      	str	r0, [sp, #4]
 80107b0:	f000 fefa 	bl	80115a8 <__mcmp>
 80107b4:	2800      	cmp	r0, #0
 80107b6:	dc03      	bgt.n	80107c0 <_dtoa_r+0x978>
 80107b8:	d1e2      	bne.n	8010780 <_dtoa_r+0x938>
 80107ba:	f01a 0f01 	tst.w	sl, #1
 80107be:	d0df      	beq.n	8010780 <_dtoa_r+0x938>
 80107c0:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80107c4:	d1d9      	bne.n	801077a <_dtoa_r+0x932>
 80107c6:	2339      	movs	r3, #57	@ 0x39
 80107c8:	f88b 3000 	strb.w	r3, [fp]
 80107cc:	4633      	mov	r3, r6
 80107ce:	461e      	mov	r6, r3
 80107d0:	3b01      	subs	r3, #1
 80107d2:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80107d6:	2a39      	cmp	r2, #57	@ 0x39
 80107d8:	d053      	beq.n	8010882 <_dtoa_r+0xa3a>
 80107da:	3201      	adds	r2, #1
 80107dc:	701a      	strb	r2, [r3, #0]
 80107de:	e60c      	b.n	80103fa <_dtoa_r+0x5b2>
 80107e0:	2a00      	cmp	r2, #0
 80107e2:	dd07      	ble.n	80107f4 <_dtoa_r+0x9ac>
 80107e4:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80107e8:	d0ed      	beq.n	80107c6 <_dtoa_r+0x97e>
 80107ea:	f10a 0301 	add.w	r3, sl, #1
 80107ee:	f88b 3000 	strb.w	r3, [fp]
 80107f2:	e602      	b.n	80103fa <_dtoa_r+0x5b2>
 80107f4:	9b05      	ldr	r3, [sp, #20]
 80107f6:	9a05      	ldr	r2, [sp, #20]
 80107f8:	f803 ac01 	strb.w	sl, [r3, #-1]
 80107fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80107fe:	4293      	cmp	r3, r2
 8010800:	d029      	beq.n	8010856 <_dtoa_r+0xa0e>
 8010802:	9901      	ldr	r1, [sp, #4]
 8010804:	2300      	movs	r3, #0
 8010806:	220a      	movs	r2, #10
 8010808:	4648      	mov	r0, r9
 801080a:	f000 fc6b 	bl	80110e4 <__multadd>
 801080e:	45a8      	cmp	r8, r5
 8010810:	9001      	str	r0, [sp, #4]
 8010812:	f04f 0300 	mov.w	r3, #0
 8010816:	f04f 020a 	mov.w	r2, #10
 801081a:	4641      	mov	r1, r8
 801081c:	4648      	mov	r0, r9
 801081e:	d107      	bne.n	8010830 <_dtoa_r+0x9e8>
 8010820:	f000 fc60 	bl	80110e4 <__multadd>
 8010824:	4680      	mov	r8, r0
 8010826:	4605      	mov	r5, r0
 8010828:	9b05      	ldr	r3, [sp, #20]
 801082a:	3301      	adds	r3, #1
 801082c:	9305      	str	r3, [sp, #20]
 801082e:	e775      	b.n	801071c <_dtoa_r+0x8d4>
 8010830:	f000 fc58 	bl	80110e4 <__multadd>
 8010834:	4629      	mov	r1, r5
 8010836:	4680      	mov	r8, r0
 8010838:	2300      	movs	r3, #0
 801083a:	220a      	movs	r2, #10
 801083c:	4648      	mov	r0, r9
 801083e:	f000 fc51 	bl	80110e4 <__multadd>
 8010842:	4605      	mov	r5, r0
 8010844:	e7f0      	b.n	8010828 <_dtoa_r+0x9e0>
 8010846:	f1bb 0f00 	cmp.w	fp, #0
 801084a:	bfcc      	ite	gt
 801084c:	465e      	movgt	r6, fp
 801084e:	2601      	movle	r6, #1
 8010850:	443e      	add	r6, r7
 8010852:	f04f 0800 	mov.w	r8, #0
 8010856:	9901      	ldr	r1, [sp, #4]
 8010858:	2201      	movs	r2, #1
 801085a:	4648      	mov	r0, r9
 801085c:	f000 fe38 	bl	80114d0 <__lshift>
 8010860:	4621      	mov	r1, r4
 8010862:	9001      	str	r0, [sp, #4]
 8010864:	f000 fea0 	bl	80115a8 <__mcmp>
 8010868:	2800      	cmp	r0, #0
 801086a:	dcaf      	bgt.n	80107cc <_dtoa_r+0x984>
 801086c:	d102      	bne.n	8010874 <_dtoa_r+0xa2c>
 801086e:	f01a 0f01 	tst.w	sl, #1
 8010872:	d1ab      	bne.n	80107cc <_dtoa_r+0x984>
 8010874:	4633      	mov	r3, r6
 8010876:	461e      	mov	r6, r3
 8010878:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801087c:	2a30      	cmp	r2, #48	@ 0x30
 801087e:	d0fa      	beq.n	8010876 <_dtoa_r+0xa2e>
 8010880:	e5bb      	b.n	80103fa <_dtoa_r+0x5b2>
 8010882:	429f      	cmp	r7, r3
 8010884:	d1a3      	bne.n	80107ce <_dtoa_r+0x986>
 8010886:	9b04      	ldr	r3, [sp, #16]
 8010888:	3301      	adds	r3, #1
 801088a:	9304      	str	r3, [sp, #16]
 801088c:	2331      	movs	r3, #49	@ 0x31
 801088e:	703b      	strb	r3, [r7, #0]
 8010890:	e5b3      	b.n	80103fa <_dtoa_r+0x5b2>
 8010892:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8010894:	4f16      	ldr	r7, [pc, #88]	@ (80108f0 <_dtoa_r+0xaa8>)
 8010896:	b11b      	cbz	r3, 80108a0 <_dtoa_r+0xa58>
 8010898:	f107 0308 	add.w	r3, r7, #8
 801089c:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 801089e:	6013      	str	r3, [r2, #0]
 80108a0:	4638      	mov	r0, r7
 80108a2:	b011      	add	sp, #68	@ 0x44
 80108a4:	ecbd 8b02 	vpop	{d8}
 80108a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80108ac:	9b07      	ldr	r3, [sp, #28]
 80108ae:	2b01      	cmp	r3, #1
 80108b0:	f77f ae36 	ble.w	8010520 <_dtoa_r+0x6d8>
 80108b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80108b6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80108b8:	2001      	movs	r0, #1
 80108ba:	e656      	b.n	801056a <_dtoa_r+0x722>
 80108bc:	f1bb 0f00 	cmp.w	fp, #0
 80108c0:	f77f aed7 	ble.w	8010672 <_dtoa_r+0x82a>
 80108c4:	463e      	mov	r6, r7
 80108c6:	9801      	ldr	r0, [sp, #4]
 80108c8:	4621      	mov	r1, r4
 80108ca:	f7ff fa33 	bl	800fd34 <quorem>
 80108ce:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 80108d2:	f806 ab01 	strb.w	sl, [r6], #1
 80108d6:	1bf2      	subs	r2, r6, r7
 80108d8:	4593      	cmp	fp, r2
 80108da:	ddb4      	ble.n	8010846 <_dtoa_r+0x9fe>
 80108dc:	9901      	ldr	r1, [sp, #4]
 80108de:	2300      	movs	r3, #0
 80108e0:	220a      	movs	r2, #10
 80108e2:	4648      	mov	r0, r9
 80108e4:	f000 fbfe 	bl	80110e4 <__multadd>
 80108e8:	9001      	str	r0, [sp, #4]
 80108ea:	e7ec      	b.n	80108c6 <_dtoa_r+0xa7e>
 80108ec:	08012f63 	.word	0x08012f63
 80108f0:	08012ee7 	.word	0x08012ee7

080108f4 <_free_r>:
 80108f4:	b538      	push	{r3, r4, r5, lr}
 80108f6:	4605      	mov	r5, r0
 80108f8:	2900      	cmp	r1, #0
 80108fa:	d041      	beq.n	8010980 <_free_r+0x8c>
 80108fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010900:	1f0c      	subs	r4, r1, #4
 8010902:	2b00      	cmp	r3, #0
 8010904:	bfb8      	it	lt
 8010906:	18e4      	addlt	r4, r4, r3
 8010908:	f7fd fbee 	bl	800e0e8 <__malloc_lock>
 801090c:	4a1d      	ldr	r2, [pc, #116]	@ (8010984 <_free_r+0x90>)
 801090e:	6813      	ldr	r3, [r2, #0]
 8010910:	b933      	cbnz	r3, 8010920 <_free_r+0x2c>
 8010912:	6063      	str	r3, [r4, #4]
 8010914:	6014      	str	r4, [r2, #0]
 8010916:	4628      	mov	r0, r5
 8010918:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801091c:	f7fd bbea 	b.w	800e0f4 <__malloc_unlock>
 8010920:	42a3      	cmp	r3, r4
 8010922:	d908      	bls.n	8010936 <_free_r+0x42>
 8010924:	6820      	ldr	r0, [r4, #0]
 8010926:	1821      	adds	r1, r4, r0
 8010928:	428b      	cmp	r3, r1
 801092a:	bf01      	itttt	eq
 801092c:	6819      	ldreq	r1, [r3, #0]
 801092e:	685b      	ldreq	r3, [r3, #4]
 8010930:	1809      	addeq	r1, r1, r0
 8010932:	6021      	streq	r1, [r4, #0]
 8010934:	e7ed      	b.n	8010912 <_free_r+0x1e>
 8010936:	461a      	mov	r2, r3
 8010938:	685b      	ldr	r3, [r3, #4]
 801093a:	b10b      	cbz	r3, 8010940 <_free_r+0x4c>
 801093c:	42a3      	cmp	r3, r4
 801093e:	d9fa      	bls.n	8010936 <_free_r+0x42>
 8010940:	6811      	ldr	r1, [r2, #0]
 8010942:	1850      	adds	r0, r2, r1
 8010944:	42a0      	cmp	r0, r4
 8010946:	d10b      	bne.n	8010960 <_free_r+0x6c>
 8010948:	6820      	ldr	r0, [r4, #0]
 801094a:	4401      	add	r1, r0
 801094c:	1850      	adds	r0, r2, r1
 801094e:	4283      	cmp	r3, r0
 8010950:	6011      	str	r1, [r2, #0]
 8010952:	d1e0      	bne.n	8010916 <_free_r+0x22>
 8010954:	6818      	ldr	r0, [r3, #0]
 8010956:	685b      	ldr	r3, [r3, #4]
 8010958:	6053      	str	r3, [r2, #4]
 801095a:	4408      	add	r0, r1
 801095c:	6010      	str	r0, [r2, #0]
 801095e:	e7da      	b.n	8010916 <_free_r+0x22>
 8010960:	d902      	bls.n	8010968 <_free_r+0x74>
 8010962:	230c      	movs	r3, #12
 8010964:	602b      	str	r3, [r5, #0]
 8010966:	e7d6      	b.n	8010916 <_free_r+0x22>
 8010968:	6820      	ldr	r0, [r4, #0]
 801096a:	1821      	adds	r1, r4, r0
 801096c:	428b      	cmp	r3, r1
 801096e:	bf04      	itt	eq
 8010970:	6819      	ldreq	r1, [r3, #0]
 8010972:	685b      	ldreq	r3, [r3, #4]
 8010974:	6063      	str	r3, [r4, #4]
 8010976:	bf04      	itt	eq
 8010978:	1809      	addeq	r1, r1, r0
 801097a:	6021      	streq	r1, [r4, #0]
 801097c:	6054      	str	r4, [r2, #4]
 801097e:	e7ca      	b.n	8010916 <_free_r+0x22>
 8010980:	bd38      	pop	{r3, r4, r5, pc}
 8010982:	bf00      	nop
 8010984:	24000cc8 	.word	0x24000cc8

08010988 <rshift>:
 8010988:	6903      	ldr	r3, [r0, #16]
 801098a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801098e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010992:	ea4f 1261 	mov.w	r2, r1, asr #5
 8010996:	f100 0414 	add.w	r4, r0, #20
 801099a:	dd45      	ble.n	8010a28 <rshift+0xa0>
 801099c:	f011 011f 	ands.w	r1, r1, #31
 80109a0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80109a4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80109a8:	d10c      	bne.n	80109c4 <rshift+0x3c>
 80109aa:	f100 0710 	add.w	r7, r0, #16
 80109ae:	4629      	mov	r1, r5
 80109b0:	42b1      	cmp	r1, r6
 80109b2:	d334      	bcc.n	8010a1e <rshift+0x96>
 80109b4:	1a9b      	subs	r3, r3, r2
 80109b6:	009b      	lsls	r3, r3, #2
 80109b8:	1eea      	subs	r2, r5, #3
 80109ba:	4296      	cmp	r6, r2
 80109bc:	bf38      	it	cc
 80109be:	2300      	movcc	r3, #0
 80109c0:	4423      	add	r3, r4
 80109c2:	e015      	b.n	80109f0 <rshift+0x68>
 80109c4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80109c8:	f1c1 0820 	rsb	r8, r1, #32
 80109cc:	40cf      	lsrs	r7, r1
 80109ce:	f105 0e04 	add.w	lr, r5, #4
 80109d2:	46a1      	mov	r9, r4
 80109d4:	4576      	cmp	r6, lr
 80109d6:	46f4      	mov	ip, lr
 80109d8:	d815      	bhi.n	8010a06 <rshift+0x7e>
 80109da:	1a9a      	subs	r2, r3, r2
 80109dc:	0092      	lsls	r2, r2, #2
 80109de:	3a04      	subs	r2, #4
 80109e0:	3501      	adds	r5, #1
 80109e2:	42ae      	cmp	r6, r5
 80109e4:	bf38      	it	cc
 80109e6:	2200      	movcc	r2, #0
 80109e8:	18a3      	adds	r3, r4, r2
 80109ea:	50a7      	str	r7, [r4, r2]
 80109ec:	b107      	cbz	r7, 80109f0 <rshift+0x68>
 80109ee:	3304      	adds	r3, #4
 80109f0:	1b1a      	subs	r2, r3, r4
 80109f2:	42a3      	cmp	r3, r4
 80109f4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80109f8:	bf08      	it	eq
 80109fa:	2300      	moveq	r3, #0
 80109fc:	6102      	str	r2, [r0, #16]
 80109fe:	bf08      	it	eq
 8010a00:	6143      	streq	r3, [r0, #20]
 8010a02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010a06:	f8dc c000 	ldr.w	ip, [ip]
 8010a0a:	fa0c fc08 	lsl.w	ip, ip, r8
 8010a0e:	ea4c 0707 	orr.w	r7, ip, r7
 8010a12:	f849 7b04 	str.w	r7, [r9], #4
 8010a16:	f85e 7b04 	ldr.w	r7, [lr], #4
 8010a1a:	40cf      	lsrs	r7, r1
 8010a1c:	e7da      	b.n	80109d4 <rshift+0x4c>
 8010a1e:	f851 cb04 	ldr.w	ip, [r1], #4
 8010a22:	f847 cf04 	str.w	ip, [r7, #4]!
 8010a26:	e7c3      	b.n	80109b0 <rshift+0x28>
 8010a28:	4623      	mov	r3, r4
 8010a2a:	e7e1      	b.n	80109f0 <rshift+0x68>

08010a2c <__hexdig_fun>:
 8010a2c:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8010a30:	2b09      	cmp	r3, #9
 8010a32:	d802      	bhi.n	8010a3a <__hexdig_fun+0xe>
 8010a34:	3820      	subs	r0, #32
 8010a36:	b2c0      	uxtb	r0, r0
 8010a38:	4770      	bx	lr
 8010a3a:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8010a3e:	2b05      	cmp	r3, #5
 8010a40:	d801      	bhi.n	8010a46 <__hexdig_fun+0x1a>
 8010a42:	3847      	subs	r0, #71	@ 0x47
 8010a44:	e7f7      	b.n	8010a36 <__hexdig_fun+0xa>
 8010a46:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8010a4a:	2b05      	cmp	r3, #5
 8010a4c:	d801      	bhi.n	8010a52 <__hexdig_fun+0x26>
 8010a4e:	3827      	subs	r0, #39	@ 0x27
 8010a50:	e7f1      	b.n	8010a36 <__hexdig_fun+0xa>
 8010a52:	2000      	movs	r0, #0
 8010a54:	4770      	bx	lr
	...

08010a58 <__gethex>:
 8010a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a5c:	b085      	sub	sp, #20
 8010a5e:	468a      	mov	sl, r1
 8010a60:	9302      	str	r3, [sp, #8]
 8010a62:	680b      	ldr	r3, [r1, #0]
 8010a64:	9001      	str	r0, [sp, #4]
 8010a66:	4690      	mov	r8, r2
 8010a68:	1c9c      	adds	r4, r3, #2
 8010a6a:	46a1      	mov	r9, r4
 8010a6c:	f814 0b01 	ldrb.w	r0, [r4], #1
 8010a70:	2830      	cmp	r0, #48	@ 0x30
 8010a72:	d0fa      	beq.n	8010a6a <__gethex+0x12>
 8010a74:	eba9 0303 	sub.w	r3, r9, r3
 8010a78:	f1a3 0b02 	sub.w	fp, r3, #2
 8010a7c:	f7ff ffd6 	bl	8010a2c <__hexdig_fun>
 8010a80:	4605      	mov	r5, r0
 8010a82:	2800      	cmp	r0, #0
 8010a84:	d168      	bne.n	8010b58 <__gethex+0x100>
 8010a86:	49a0      	ldr	r1, [pc, #640]	@ (8010d08 <__gethex+0x2b0>)
 8010a88:	2201      	movs	r2, #1
 8010a8a:	4648      	mov	r0, r9
 8010a8c:	f7ff f89a 	bl	800fbc4 <strncmp>
 8010a90:	4607      	mov	r7, r0
 8010a92:	2800      	cmp	r0, #0
 8010a94:	d167      	bne.n	8010b66 <__gethex+0x10e>
 8010a96:	f899 0001 	ldrb.w	r0, [r9, #1]
 8010a9a:	4626      	mov	r6, r4
 8010a9c:	f7ff ffc6 	bl	8010a2c <__hexdig_fun>
 8010aa0:	2800      	cmp	r0, #0
 8010aa2:	d062      	beq.n	8010b6a <__gethex+0x112>
 8010aa4:	4623      	mov	r3, r4
 8010aa6:	7818      	ldrb	r0, [r3, #0]
 8010aa8:	2830      	cmp	r0, #48	@ 0x30
 8010aaa:	4699      	mov	r9, r3
 8010aac:	f103 0301 	add.w	r3, r3, #1
 8010ab0:	d0f9      	beq.n	8010aa6 <__gethex+0x4e>
 8010ab2:	f7ff ffbb 	bl	8010a2c <__hexdig_fun>
 8010ab6:	fab0 f580 	clz	r5, r0
 8010aba:	096d      	lsrs	r5, r5, #5
 8010abc:	f04f 0b01 	mov.w	fp, #1
 8010ac0:	464a      	mov	r2, r9
 8010ac2:	4616      	mov	r6, r2
 8010ac4:	3201      	adds	r2, #1
 8010ac6:	7830      	ldrb	r0, [r6, #0]
 8010ac8:	f7ff ffb0 	bl	8010a2c <__hexdig_fun>
 8010acc:	2800      	cmp	r0, #0
 8010ace:	d1f8      	bne.n	8010ac2 <__gethex+0x6a>
 8010ad0:	498d      	ldr	r1, [pc, #564]	@ (8010d08 <__gethex+0x2b0>)
 8010ad2:	2201      	movs	r2, #1
 8010ad4:	4630      	mov	r0, r6
 8010ad6:	f7ff f875 	bl	800fbc4 <strncmp>
 8010ada:	2800      	cmp	r0, #0
 8010adc:	d13f      	bne.n	8010b5e <__gethex+0x106>
 8010ade:	b944      	cbnz	r4, 8010af2 <__gethex+0x9a>
 8010ae0:	1c74      	adds	r4, r6, #1
 8010ae2:	4622      	mov	r2, r4
 8010ae4:	4616      	mov	r6, r2
 8010ae6:	3201      	adds	r2, #1
 8010ae8:	7830      	ldrb	r0, [r6, #0]
 8010aea:	f7ff ff9f 	bl	8010a2c <__hexdig_fun>
 8010aee:	2800      	cmp	r0, #0
 8010af0:	d1f8      	bne.n	8010ae4 <__gethex+0x8c>
 8010af2:	1ba4      	subs	r4, r4, r6
 8010af4:	00a7      	lsls	r7, r4, #2
 8010af6:	7833      	ldrb	r3, [r6, #0]
 8010af8:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8010afc:	2b50      	cmp	r3, #80	@ 0x50
 8010afe:	d13e      	bne.n	8010b7e <__gethex+0x126>
 8010b00:	7873      	ldrb	r3, [r6, #1]
 8010b02:	2b2b      	cmp	r3, #43	@ 0x2b
 8010b04:	d033      	beq.n	8010b6e <__gethex+0x116>
 8010b06:	2b2d      	cmp	r3, #45	@ 0x2d
 8010b08:	d034      	beq.n	8010b74 <__gethex+0x11c>
 8010b0a:	1c71      	adds	r1, r6, #1
 8010b0c:	2400      	movs	r4, #0
 8010b0e:	7808      	ldrb	r0, [r1, #0]
 8010b10:	f7ff ff8c 	bl	8010a2c <__hexdig_fun>
 8010b14:	1e43      	subs	r3, r0, #1
 8010b16:	b2db      	uxtb	r3, r3
 8010b18:	2b18      	cmp	r3, #24
 8010b1a:	d830      	bhi.n	8010b7e <__gethex+0x126>
 8010b1c:	f1a0 0210 	sub.w	r2, r0, #16
 8010b20:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8010b24:	f7ff ff82 	bl	8010a2c <__hexdig_fun>
 8010b28:	f100 3cff 	add.w	ip, r0, #4294967295
 8010b2c:	fa5f fc8c 	uxtb.w	ip, ip
 8010b30:	f1bc 0f18 	cmp.w	ip, #24
 8010b34:	f04f 030a 	mov.w	r3, #10
 8010b38:	d91e      	bls.n	8010b78 <__gethex+0x120>
 8010b3a:	b104      	cbz	r4, 8010b3e <__gethex+0xe6>
 8010b3c:	4252      	negs	r2, r2
 8010b3e:	4417      	add	r7, r2
 8010b40:	f8ca 1000 	str.w	r1, [sl]
 8010b44:	b1ed      	cbz	r5, 8010b82 <__gethex+0x12a>
 8010b46:	f1bb 0f00 	cmp.w	fp, #0
 8010b4a:	bf0c      	ite	eq
 8010b4c:	2506      	moveq	r5, #6
 8010b4e:	2500      	movne	r5, #0
 8010b50:	4628      	mov	r0, r5
 8010b52:	b005      	add	sp, #20
 8010b54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b58:	2500      	movs	r5, #0
 8010b5a:	462c      	mov	r4, r5
 8010b5c:	e7b0      	b.n	8010ac0 <__gethex+0x68>
 8010b5e:	2c00      	cmp	r4, #0
 8010b60:	d1c7      	bne.n	8010af2 <__gethex+0x9a>
 8010b62:	4627      	mov	r7, r4
 8010b64:	e7c7      	b.n	8010af6 <__gethex+0x9e>
 8010b66:	464e      	mov	r6, r9
 8010b68:	462f      	mov	r7, r5
 8010b6a:	2501      	movs	r5, #1
 8010b6c:	e7c3      	b.n	8010af6 <__gethex+0x9e>
 8010b6e:	2400      	movs	r4, #0
 8010b70:	1cb1      	adds	r1, r6, #2
 8010b72:	e7cc      	b.n	8010b0e <__gethex+0xb6>
 8010b74:	2401      	movs	r4, #1
 8010b76:	e7fb      	b.n	8010b70 <__gethex+0x118>
 8010b78:	fb03 0002 	mla	r0, r3, r2, r0
 8010b7c:	e7ce      	b.n	8010b1c <__gethex+0xc4>
 8010b7e:	4631      	mov	r1, r6
 8010b80:	e7de      	b.n	8010b40 <__gethex+0xe8>
 8010b82:	eba6 0309 	sub.w	r3, r6, r9
 8010b86:	3b01      	subs	r3, #1
 8010b88:	4629      	mov	r1, r5
 8010b8a:	2b07      	cmp	r3, #7
 8010b8c:	dc0a      	bgt.n	8010ba4 <__gethex+0x14c>
 8010b8e:	9801      	ldr	r0, [sp, #4]
 8010b90:	f000 fa46 	bl	8011020 <_Balloc>
 8010b94:	4604      	mov	r4, r0
 8010b96:	b940      	cbnz	r0, 8010baa <__gethex+0x152>
 8010b98:	4b5c      	ldr	r3, [pc, #368]	@ (8010d0c <__gethex+0x2b4>)
 8010b9a:	4602      	mov	r2, r0
 8010b9c:	21e4      	movs	r1, #228	@ 0xe4
 8010b9e:	485c      	ldr	r0, [pc, #368]	@ (8010d10 <__gethex+0x2b8>)
 8010ba0:	f001 fd22 	bl	80125e8 <__assert_func>
 8010ba4:	3101      	adds	r1, #1
 8010ba6:	105b      	asrs	r3, r3, #1
 8010ba8:	e7ef      	b.n	8010b8a <__gethex+0x132>
 8010baa:	f100 0a14 	add.w	sl, r0, #20
 8010bae:	2300      	movs	r3, #0
 8010bb0:	4655      	mov	r5, sl
 8010bb2:	469b      	mov	fp, r3
 8010bb4:	45b1      	cmp	r9, r6
 8010bb6:	d337      	bcc.n	8010c28 <__gethex+0x1d0>
 8010bb8:	f845 bb04 	str.w	fp, [r5], #4
 8010bbc:	eba5 050a 	sub.w	r5, r5, sl
 8010bc0:	10ad      	asrs	r5, r5, #2
 8010bc2:	6125      	str	r5, [r4, #16]
 8010bc4:	4658      	mov	r0, fp
 8010bc6:	f000 fb1d 	bl	8011204 <__hi0bits>
 8010bca:	016d      	lsls	r5, r5, #5
 8010bcc:	f8d8 6000 	ldr.w	r6, [r8]
 8010bd0:	1a2d      	subs	r5, r5, r0
 8010bd2:	42b5      	cmp	r5, r6
 8010bd4:	dd54      	ble.n	8010c80 <__gethex+0x228>
 8010bd6:	1bad      	subs	r5, r5, r6
 8010bd8:	4629      	mov	r1, r5
 8010bda:	4620      	mov	r0, r4
 8010bdc:	f000 feae 	bl	801193c <__any_on>
 8010be0:	4681      	mov	r9, r0
 8010be2:	b178      	cbz	r0, 8010c04 <__gethex+0x1ac>
 8010be4:	1e6b      	subs	r3, r5, #1
 8010be6:	1159      	asrs	r1, r3, #5
 8010be8:	f003 021f 	and.w	r2, r3, #31
 8010bec:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8010bf0:	f04f 0901 	mov.w	r9, #1
 8010bf4:	fa09 f202 	lsl.w	r2, r9, r2
 8010bf8:	420a      	tst	r2, r1
 8010bfa:	d003      	beq.n	8010c04 <__gethex+0x1ac>
 8010bfc:	454b      	cmp	r3, r9
 8010bfe:	dc36      	bgt.n	8010c6e <__gethex+0x216>
 8010c00:	f04f 0902 	mov.w	r9, #2
 8010c04:	4629      	mov	r1, r5
 8010c06:	4620      	mov	r0, r4
 8010c08:	f7ff febe 	bl	8010988 <rshift>
 8010c0c:	442f      	add	r7, r5
 8010c0e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010c12:	42bb      	cmp	r3, r7
 8010c14:	da42      	bge.n	8010c9c <__gethex+0x244>
 8010c16:	9801      	ldr	r0, [sp, #4]
 8010c18:	4621      	mov	r1, r4
 8010c1a:	f000 fa41 	bl	80110a0 <_Bfree>
 8010c1e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010c20:	2300      	movs	r3, #0
 8010c22:	6013      	str	r3, [r2, #0]
 8010c24:	25a3      	movs	r5, #163	@ 0xa3
 8010c26:	e793      	b.n	8010b50 <__gethex+0xf8>
 8010c28:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8010c2c:	2a2e      	cmp	r2, #46	@ 0x2e
 8010c2e:	d012      	beq.n	8010c56 <__gethex+0x1fe>
 8010c30:	2b20      	cmp	r3, #32
 8010c32:	d104      	bne.n	8010c3e <__gethex+0x1e6>
 8010c34:	f845 bb04 	str.w	fp, [r5], #4
 8010c38:	f04f 0b00 	mov.w	fp, #0
 8010c3c:	465b      	mov	r3, fp
 8010c3e:	7830      	ldrb	r0, [r6, #0]
 8010c40:	9303      	str	r3, [sp, #12]
 8010c42:	f7ff fef3 	bl	8010a2c <__hexdig_fun>
 8010c46:	9b03      	ldr	r3, [sp, #12]
 8010c48:	f000 000f 	and.w	r0, r0, #15
 8010c4c:	4098      	lsls	r0, r3
 8010c4e:	ea4b 0b00 	orr.w	fp, fp, r0
 8010c52:	3304      	adds	r3, #4
 8010c54:	e7ae      	b.n	8010bb4 <__gethex+0x15c>
 8010c56:	45b1      	cmp	r9, r6
 8010c58:	d8ea      	bhi.n	8010c30 <__gethex+0x1d8>
 8010c5a:	492b      	ldr	r1, [pc, #172]	@ (8010d08 <__gethex+0x2b0>)
 8010c5c:	9303      	str	r3, [sp, #12]
 8010c5e:	2201      	movs	r2, #1
 8010c60:	4630      	mov	r0, r6
 8010c62:	f7fe ffaf 	bl	800fbc4 <strncmp>
 8010c66:	9b03      	ldr	r3, [sp, #12]
 8010c68:	2800      	cmp	r0, #0
 8010c6a:	d1e1      	bne.n	8010c30 <__gethex+0x1d8>
 8010c6c:	e7a2      	b.n	8010bb4 <__gethex+0x15c>
 8010c6e:	1ea9      	subs	r1, r5, #2
 8010c70:	4620      	mov	r0, r4
 8010c72:	f000 fe63 	bl	801193c <__any_on>
 8010c76:	2800      	cmp	r0, #0
 8010c78:	d0c2      	beq.n	8010c00 <__gethex+0x1a8>
 8010c7a:	f04f 0903 	mov.w	r9, #3
 8010c7e:	e7c1      	b.n	8010c04 <__gethex+0x1ac>
 8010c80:	da09      	bge.n	8010c96 <__gethex+0x23e>
 8010c82:	1b75      	subs	r5, r6, r5
 8010c84:	4621      	mov	r1, r4
 8010c86:	9801      	ldr	r0, [sp, #4]
 8010c88:	462a      	mov	r2, r5
 8010c8a:	f000 fc21 	bl	80114d0 <__lshift>
 8010c8e:	1b7f      	subs	r7, r7, r5
 8010c90:	4604      	mov	r4, r0
 8010c92:	f100 0a14 	add.w	sl, r0, #20
 8010c96:	f04f 0900 	mov.w	r9, #0
 8010c9a:	e7b8      	b.n	8010c0e <__gethex+0x1b6>
 8010c9c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8010ca0:	42bd      	cmp	r5, r7
 8010ca2:	dd6f      	ble.n	8010d84 <__gethex+0x32c>
 8010ca4:	1bed      	subs	r5, r5, r7
 8010ca6:	42ae      	cmp	r6, r5
 8010ca8:	dc34      	bgt.n	8010d14 <__gethex+0x2bc>
 8010caa:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010cae:	2b02      	cmp	r3, #2
 8010cb0:	d022      	beq.n	8010cf8 <__gethex+0x2a0>
 8010cb2:	2b03      	cmp	r3, #3
 8010cb4:	d024      	beq.n	8010d00 <__gethex+0x2a8>
 8010cb6:	2b01      	cmp	r3, #1
 8010cb8:	d115      	bne.n	8010ce6 <__gethex+0x28e>
 8010cba:	42ae      	cmp	r6, r5
 8010cbc:	d113      	bne.n	8010ce6 <__gethex+0x28e>
 8010cbe:	2e01      	cmp	r6, #1
 8010cc0:	d10b      	bne.n	8010cda <__gethex+0x282>
 8010cc2:	9a02      	ldr	r2, [sp, #8]
 8010cc4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8010cc8:	6013      	str	r3, [r2, #0]
 8010cca:	2301      	movs	r3, #1
 8010ccc:	6123      	str	r3, [r4, #16]
 8010cce:	f8ca 3000 	str.w	r3, [sl]
 8010cd2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010cd4:	2562      	movs	r5, #98	@ 0x62
 8010cd6:	601c      	str	r4, [r3, #0]
 8010cd8:	e73a      	b.n	8010b50 <__gethex+0xf8>
 8010cda:	1e71      	subs	r1, r6, #1
 8010cdc:	4620      	mov	r0, r4
 8010cde:	f000 fe2d 	bl	801193c <__any_on>
 8010ce2:	2800      	cmp	r0, #0
 8010ce4:	d1ed      	bne.n	8010cc2 <__gethex+0x26a>
 8010ce6:	9801      	ldr	r0, [sp, #4]
 8010ce8:	4621      	mov	r1, r4
 8010cea:	f000 f9d9 	bl	80110a0 <_Bfree>
 8010cee:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010cf0:	2300      	movs	r3, #0
 8010cf2:	6013      	str	r3, [r2, #0]
 8010cf4:	2550      	movs	r5, #80	@ 0x50
 8010cf6:	e72b      	b.n	8010b50 <__gethex+0xf8>
 8010cf8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010cfa:	2b00      	cmp	r3, #0
 8010cfc:	d1f3      	bne.n	8010ce6 <__gethex+0x28e>
 8010cfe:	e7e0      	b.n	8010cc2 <__gethex+0x26a>
 8010d00:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010d02:	2b00      	cmp	r3, #0
 8010d04:	d1dd      	bne.n	8010cc2 <__gethex+0x26a>
 8010d06:	e7ee      	b.n	8010ce6 <__gethex+0x28e>
 8010d08:	08012e50 	.word	0x08012e50
 8010d0c:	08012f63 	.word	0x08012f63
 8010d10:	08012f74 	.word	0x08012f74
 8010d14:	1e6f      	subs	r7, r5, #1
 8010d16:	f1b9 0f00 	cmp.w	r9, #0
 8010d1a:	d130      	bne.n	8010d7e <__gethex+0x326>
 8010d1c:	b127      	cbz	r7, 8010d28 <__gethex+0x2d0>
 8010d1e:	4639      	mov	r1, r7
 8010d20:	4620      	mov	r0, r4
 8010d22:	f000 fe0b 	bl	801193c <__any_on>
 8010d26:	4681      	mov	r9, r0
 8010d28:	117a      	asrs	r2, r7, #5
 8010d2a:	2301      	movs	r3, #1
 8010d2c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8010d30:	f007 071f 	and.w	r7, r7, #31
 8010d34:	40bb      	lsls	r3, r7
 8010d36:	4213      	tst	r3, r2
 8010d38:	4629      	mov	r1, r5
 8010d3a:	4620      	mov	r0, r4
 8010d3c:	bf18      	it	ne
 8010d3e:	f049 0902 	orrne.w	r9, r9, #2
 8010d42:	f7ff fe21 	bl	8010988 <rshift>
 8010d46:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8010d4a:	1b76      	subs	r6, r6, r5
 8010d4c:	2502      	movs	r5, #2
 8010d4e:	f1b9 0f00 	cmp.w	r9, #0
 8010d52:	d047      	beq.n	8010de4 <__gethex+0x38c>
 8010d54:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010d58:	2b02      	cmp	r3, #2
 8010d5a:	d015      	beq.n	8010d88 <__gethex+0x330>
 8010d5c:	2b03      	cmp	r3, #3
 8010d5e:	d017      	beq.n	8010d90 <__gethex+0x338>
 8010d60:	2b01      	cmp	r3, #1
 8010d62:	d109      	bne.n	8010d78 <__gethex+0x320>
 8010d64:	f019 0f02 	tst.w	r9, #2
 8010d68:	d006      	beq.n	8010d78 <__gethex+0x320>
 8010d6a:	f8da 3000 	ldr.w	r3, [sl]
 8010d6e:	ea49 0903 	orr.w	r9, r9, r3
 8010d72:	f019 0f01 	tst.w	r9, #1
 8010d76:	d10e      	bne.n	8010d96 <__gethex+0x33e>
 8010d78:	f045 0510 	orr.w	r5, r5, #16
 8010d7c:	e032      	b.n	8010de4 <__gethex+0x38c>
 8010d7e:	f04f 0901 	mov.w	r9, #1
 8010d82:	e7d1      	b.n	8010d28 <__gethex+0x2d0>
 8010d84:	2501      	movs	r5, #1
 8010d86:	e7e2      	b.n	8010d4e <__gethex+0x2f6>
 8010d88:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010d8a:	f1c3 0301 	rsb	r3, r3, #1
 8010d8e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8010d90:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010d92:	2b00      	cmp	r3, #0
 8010d94:	d0f0      	beq.n	8010d78 <__gethex+0x320>
 8010d96:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8010d9a:	f104 0314 	add.w	r3, r4, #20
 8010d9e:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8010da2:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8010da6:	f04f 0c00 	mov.w	ip, #0
 8010daa:	4618      	mov	r0, r3
 8010dac:	f853 2b04 	ldr.w	r2, [r3], #4
 8010db0:	f1b2 3fff 	cmp.w	r2, #4294967295
 8010db4:	d01b      	beq.n	8010dee <__gethex+0x396>
 8010db6:	3201      	adds	r2, #1
 8010db8:	6002      	str	r2, [r0, #0]
 8010dba:	2d02      	cmp	r5, #2
 8010dbc:	f104 0314 	add.w	r3, r4, #20
 8010dc0:	d13c      	bne.n	8010e3c <__gethex+0x3e4>
 8010dc2:	f8d8 2000 	ldr.w	r2, [r8]
 8010dc6:	3a01      	subs	r2, #1
 8010dc8:	42b2      	cmp	r2, r6
 8010dca:	d109      	bne.n	8010de0 <__gethex+0x388>
 8010dcc:	1171      	asrs	r1, r6, #5
 8010dce:	2201      	movs	r2, #1
 8010dd0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010dd4:	f006 061f 	and.w	r6, r6, #31
 8010dd8:	fa02 f606 	lsl.w	r6, r2, r6
 8010ddc:	421e      	tst	r6, r3
 8010dde:	d13a      	bne.n	8010e56 <__gethex+0x3fe>
 8010de0:	f045 0520 	orr.w	r5, r5, #32
 8010de4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010de6:	601c      	str	r4, [r3, #0]
 8010de8:	9b02      	ldr	r3, [sp, #8]
 8010dea:	601f      	str	r7, [r3, #0]
 8010dec:	e6b0      	b.n	8010b50 <__gethex+0xf8>
 8010dee:	4299      	cmp	r1, r3
 8010df0:	f843 cc04 	str.w	ip, [r3, #-4]
 8010df4:	d8d9      	bhi.n	8010daa <__gethex+0x352>
 8010df6:	68a3      	ldr	r3, [r4, #8]
 8010df8:	459b      	cmp	fp, r3
 8010dfa:	db17      	blt.n	8010e2c <__gethex+0x3d4>
 8010dfc:	6861      	ldr	r1, [r4, #4]
 8010dfe:	9801      	ldr	r0, [sp, #4]
 8010e00:	3101      	adds	r1, #1
 8010e02:	f000 f90d 	bl	8011020 <_Balloc>
 8010e06:	4681      	mov	r9, r0
 8010e08:	b918      	cbnz	r0, 8010e12 <__gethex+0x3ba>
 8010e0a:	4b1a      	ldr	r3, [pc, #104]	@ (8010e74 <__gethex+0x41c>)
 8010e0c:	4602      	mov	r2, r0
 8010e0e:	2184      	movs	r1, #132	@ 0x84
 8010e10:	e6c5      	b.n	8010b9e <__gethex+0x146>
 8010e12:	6922      	ldr	r2, [r4, #16]
 8010e14:	3202      	adds	r2, #2
 8010e16:	f104 010c 	add.w	r1, r4, #12
 8010e1a:	0092      	lsls	r2, r2, #2
 8010e1c:	300c      	adds	r0, #12
 8010e1e:	f7fe ff6a 	bl	800fcf6 <memcpy>
 8010e22:	4621      	mov	r1, r4
 8010e24:	9801      	ldr	r0, [sp, #4]
 8010e26:	f000 f93b 	bl	80110a0 <_Bfree>
 8010e2a:	464c      	mov	r4, r9
 8010e2c:	6923      	ldr	r3, [r4, #16]
 8010e2e:	1c5a      	adds	r2, r3, #1
 8010e30:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010e34:	6122      	str	r2, [r4, #16]
 8010e36:	2201      	movs	r2, #1
 8010e38:	615a      	str	r2, [r3, #20]
 8010e3a:	e7be      	b.n	8010dba <__gethex+0x362>
 8010e3c:	6922      	ldr	r2, [r4, #16]
 8010e3e:	455a      	cmp	r2, fp
 8010e40:	dd0b      	ble.n	8010e5a <__gethex+0x402>
 8010e42:	2101      	movs	r1, #1
 8010e44:	4620      	mov	r0, r4
 8010e46:	f7ff fd9f 	bl	8010988 <rshift>
 8010e4a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010e4e:	3701      	adds	r7, #1
 8010e50:	42bb      	cmp	r3, r7
 8010e52:	f6ff aee0 	blt.w	8010c16 <__gethex+0x1be>
 8010e56:	2501      	movs	r5, #1
 8010e58:	e7c2      	b.n	8010de0 <__gethex+0x388>
 8010e5a:	f016 061f 	ands.w	r6, r6, #31
 8010e5e:	d0fa      	beq.n	8010e56 <__gethex+0x3fe>
 8010e60:	4453      	add	r3, sl
 8010e62:	f1c6 0620 	rsb	r6, r6, #32
 8010e66:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8010e6a:	f000 f9cb 	bl	8011204 <__hi0bits>
 8010e6e:	42b0      	cmp	r0, r6
 8010e70:	dbe7      	blt.n	8010e42 <__gethex+0x3ea>
 8010e72:	e7f0      	b.n	8010e56 <__gethex+0x3fe>
 8010e74:	08012f63 	.word	0x08012f63

08010e78 <L_shift>:
 8010e78:	f1c2 0208 	rsb	r2, r2, #8
 8010e7c:	0092      	lsls	r2, r2, #2
 8010e7e:	b570      	push	{r4, r5, r6, lr}
 8010e80:	f1c2 0620 	rsb	r6, r2, #32
 8010e84:	6843      	ldr	r3, [r0, #4]
 8010e86:	6804      	ldr	r4, [r0, #0]
 8010e88:	fa03 f506 	lsl.w	r5, r3, r6
 8010e8c:	432c      	orrs	r4, r5
 8010e8e:	40d3      	lsrs	r3, r2
 8010e90:	6004      	str	r4, [r0, #0]
 8010e92:	f840 3f04 	str.w	r3, [r0, #4]!
 8010e96:	4288      	cmp	r0, r1
 8010e98:	d3f4      	bcc.n	8010e84 <L_shift+0xc>
 8010e9a:	bd70      	pop	{r4, r5, r6, pc}

08010e9c <__match>:
 8010e9c:	b530      	push	{r4, r5, lr}
 8010e9e:	6803      	ldr	r3, [r0, #0]
 8010ea0:	3301      	adds	r3, #1
 8010ea2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010ea6:	b914      	cbnz	r4, 8010eae <__match+0x12>
 8010ea8:	6003      	str	r3, [r0, #0]
 8010eaa:	2001      	movs	r0, #1
 8010eac:	bd30      	pop	{r4, r5, pc}
 8010eae:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010eb2:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8010eb6:	2d19      	cmp	r5, #25
 8010eb8:	bf98      	it	ls
 8010eba:	3220      	addls	r2, #32
 8010ebc:	42a2      	cmp	r2, r4
 8010ebe:	d0f0      	beq.n	8010ea2 <__match+0x6>
 8010ec0:	2000      	movs	r0, #0
 8010ec2:	e7f3      	b.n	8010eac <__match+0x10>

08010ec4 <__hexnan>:
 8010ec4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ec8:	680b      	ldr	r3, [r1, #0]
 8010eca:	6801      	ldr	r1, [r0, #0]
 8010ecc:	115e      	asrs	r6, r3, #5
 8010ece:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8010ed2:	f013 031f 	ands.w	r3, r3, #31
 8010ed6:	b087      	sub	sp, #28
 8010ed8:	bf18      	it	ne
 8010eda:	3604      	addne	r6, #4
 8010edc:	2500      	movs	r5, #0
 8010ede:	1f37      	subs	r7, r6, #4
 8010ee0:	4682      	mov	sl, r0
 8010ee2:	4690      	mov	r8, r2
 8010ee4:	9301      	str	r3, [sp, #4]
 8010ee6:	f846 5c04 	str.w	r5, [r6, #-4]
 8010eea:	46b9      	mov	r9, r7
 8010eec:	463c      	mov	r4, r7
 8010eee:	9502      	str	r5, [sp, #8]
 8010ef0:	46ab      	mov	fp, r5
 8010ef2:	784a      	ldrb	r2, [r1, #1]
 8010ef4:	1c4b      	adds	r3, r1, #1
 8010ef6:	9303      	str	r3, [sp, #12]
 8010ef8:	b342      	cbz	r2, 8010f4c <__hexnan+0x88>
 8010efa:	4610      	mov	r0, r2
 8010efc:	9105      	str	r1, [sp, #20]
 8010efe:	9204      	str	r2, [sp, #16]
 8010f00:	f7ff fd94 	bl	8010a2c <__hexdig_fun>
 8010f04:	2800      	cmp	r0, #0
 8010f06:	d151      	bne.n	8010fac <__hexnan+0xe8>
 8010f08:	9a04      	ldr	r2, [sp, #16]
 8010f0a:	9905      	ldr	r1, [sp, #20]
 8010f0c:	2a20      	cmp	r2, #32
 8010f0e:	d818      	bhi.n	8010f42 <__hexnan+0x7e>
 8010f10:	9b02      	ldr	r3, [sp, #8]
 8010f12:	459b      	cmp	fp, r3
 8010f14:	dd13      	ble.n	8010f3e <__hexnan+0x7a>
 8010f16:	454c      	cmp	r4, r9
 8010f18:	d206      	bcs.n	8010f28 <__hexnan+0x64>
 8010f1a:	2d07      	cmp	r5, #7
 8010f1c:	dc04      	bgt.n	8010f28 <__hexnan+0x64>
 8010f1e:	462a      	mov	r2, r5
 8010f20:	4649      	mov	r1, r9
 8010f22:	4620      	mov	r0, r4
 8010f24:	f7ff ffa8 	bl	8010e78 <L_shift>
 8010f28:	4544      	cmp	r4, r8
 8010f2a:	d952      	bls.n	8010fd2 <__hexnan+0x10e>
 8010f2c:	2300      	movs	r3, #0
 8010f2e:	f1a4 0904 	sub.w	r9, r4, #4
 8010f32:	f844 3c04 	str.w	r3, [r4, #-4]
 8010f36:	f8cd b008 	str.w	fp, [sp, #8]
 8010f3a:	464c      	mov	r4, r9
 8010f3c:	461d      	mov	r5, r3
 8010f3e:	9903      	ldr	r1, [sp, #12]
 8010f40:	e7d7      	b.n	8010ef2 <__hexnan+0x2e>
 8010f42:	2a29      	cmp	r2, #41	@ 0x29
 8010f44:	d157      	bne.n	8010ff6 <__hexnan+0x132>
 8010f46:	3102      	adds	r1, #2
 8010f48:	f8ca 1000 	str.w	r1, [sl]
 8010f4c:	f1bb 0f00 	cmp.w	fp, #0
 8010f50:	d051      	beq.n	8010ff6 <__hexnan+0x132>
 8010f52:	454c      	cmp	r4, r9
 8010f54:	d206      	bcs.n	8010f64 <__hexnan+0xa0>
 8010f56:	2d07      	cmp	r5, #7
 8010f58:	dc04      	bgt.n	8010f64 <__hexnan+0xa0>
 8010f5a:	462a      	mov	r2, r5
 8010f5c:	4649      	mov	r1, r9
 8010f5e:	4620      	mov	r0, r4
 8010f60:	f7ff ff8a 	bl	8010e78 <L_shift>
 8010f64:	4544      	cmp	r4, r8
 8010f66:	d936      	bls.n	8010fd6 <__hexnan+0x112>
 8010f68:	f1a8 0204 	sub.w	r2, r8, #4
 8010f6c:	4623      	mov	r3, r4
 8010f6e:	f853 1b04 	ldr.w	r1, [r3], #4
 8010f72:	f842 1f04 	str.w	r1, [r2, #4]!
 8010f76:	429f      	cmp	r7, r3
 8010f78:	d2f9      	bcs.n	8010f6e <__hexnan+0xaa>
 8010f7a:	1b3b      	subs	r3, r7, r4
 8010f7c:	f023 0303 	bic.w	r3, r3, #3
 8010f80:	3304      	adds	r3, #4
 8010f82:	3401      	adds	r4, #1
 8010f84:	3e03      	subs	r6, #3
 8010f86:	42b4      	cmp	r4, r6
 8010f88:	bf88      	it	hi
 8010f8a:	2304      	movhi	r3, #4
 8010f8c:	4443      	add	r3, r8
 8010f8e:	2200      	movs	r2, #0
 8010f90:	f843 2b04 	str.w	r2, [r3], #4
 8010f94:	429f      	cmp	r7, r3
 8010f96:	d2fb      	bcs.n	8010f90 <__hexnan+0xcc>
 8010f98:	683b      	ldr	r3, [r7, #0]
 8010f9a:	b91b      	cbnz	r3, 8010fa4 <__hexnan+0xe0>
 8010f9c:	4547      	cmp	r7, r8
 8010f9e:	d128      	bne.n	8010ff2 <__hexnan+0x12e>
 8010fa0:	2301      	movs	r3, #1
 8010fa2:	603b      	str	r3, [r7, #0]
 8010fa4:	2005      	movs	r0, #5
 8010fa6:	b007      	add	sp, #28
 8010fa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010fac:	3501      	adds	r5, #1
 8010fae:	2d08      	cmp	r5, #8
 8010fb0:	f10b 0b01 	add.w	fp, fp, #1
 8010fb4:	dd06      	ble.n	8010fc4 <__hexnan+0x100>
 8010fb6:	4544      	cmp	r4, r8
 8010fb8:	d9c1      	bls.n	8010f3e <__hexnan+0x7a>
 8010fba:	2300      	movs	r3, #0
 8010fbc:	f844 3c04 	str.w	r3, [r4, #-4]
 8010fc0:	2501      	movs	r5, #1
 8010fc2:	3c04      	subs	r4, #4
 8010fc4:	6822      	ldr	r2, [r4, #0]
 8010fc6:	f000 000f 	and.w	r0, r0, #15
 8010fca:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8010fce:	6020      	str	r0, [r4, #0]
 8010fd0:	e7b5      	b.n	8010f3e <__hexnan+0x7a>
 8010fd2:	2508      	movs	r5, #8
 8010fd4:	e7b3      	b.n	8010f3e <__hexnan+0x7a>
 8010fd6:	9b01      	ldr	r3, [sp, #4]
 8010fd8:	2b00      	cmp	r3, #0
 8010fda:	d0dd      	beq.n	8010f98 <__hexnan+0xd4>
 8010fdc:	f1c3 0320 	rsb	r3, r3, #32
 8010fe0:	f04f 32ff 	mov.w	r2, #4294967295
 8010fe4:	40da      	lsrs	r2, r3
 8010fe6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8010fea:	4013      	ands	r3, r2
 8010fec:	f846 3c04 	str.w	r3, [r6, #-4]
 8010ff0:	e7d2      	b.n	8010f98 <__hexnan+0xd4>
 8010ff2:	3f04      	subs	r7, #4
 8010ff4:	e7d0      	b.n	8010f98 <__hexnan+0xd4>
 8010ff6:	2004      	movs	r0, #4
 8010ff8:	e7d5      	b.n	8010fa6 <__hexnan+0xe2>

08010ffa <__ascii_mbtowc>:
 8010ffa:	b082      	sub	sp, #8
 8010ffc:	b901      	cbnz	r1, 8011000 <__ascii_mbtowc+0x6>
 8010ffe:	a901      	add	r1, sp, #4
 8011000:	b142      	cbz	r2, 8011014 <__ascii_mbtowc+0x1a>
 8011002:	b14b      	cbz	r3, 8011018 <__ascii_mbtowc+0x1e>
 8011004:	7813      	ldrb	r3, [r2, #0]
 8011006:	600b      	str	r3, [r1, #0]
 8011008:	7812      	ldrb	r2, [r2, #0]
 801100a:	1e10      	subs	r0, r2, #0
 801100c:	bf18      	it	ne
 801100e:	2001      	movne	r0, #1
 8011010:	b002      	add	sp, #8
 8011012:	4770      	bx	lr
 8011014:	4610      	mov	r0, r2
 8011016:	e7fb      	b.n	8011010 <__ascii_mbtowc+0x16>
 8011018:	f06f 0001 	mvn.w	r0, #1
 801101c:	e7f8      	b.n	8011010 <__ascii_mbtowc+0x16>
	...

08011020 <_Balloc>:
 8011020:	b570      	push	{r4, r5, r6, lr}
 8011022:	69c6      	ldr	r6, [r0, #28]
 8011024:	4604      	mov	r4, r0
 8011026:	460d      	mov	r5, r1
 8011028:	b976      	cbnz	r6, 8011048 <_Balloc+0x28>
 801102a:	2010      	movs	r0, #16
 801102c:	f7fc ffb2 	bl	800df94 <malloc>
 8011030:	4602      	mov	r2, r0
 8011032:	61e0      	str	r0, [r4, #28]
 8011034:	b920      	cbnz	r0, 8011040 <_Balloc+0x20>
 8011036:	4b18      	ldr	r3, [pc, #96]	@ (8011098 <_Balloc+0x78>)
 8011038:	4818      	ldr	r0, [pc, #96]	@ (801109c <_Balloc+0x7c>)
 801103a:	216b      	movs	r1, #107	@ 0x6b
 801103c:	f001 fad4 	bl	80125e8 <__assert_func>
 8011040:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011044:	6006      	str	r6, [r0, #0]
 8011046:	60c6      	str	r6, [r0, #12]
 8011048:	69e6      	ldr	r6, [r4, #28]
 801104a:	68f3      	ldr	r3, [r6, #12]
 801104c:	b183      	cbz	r3, 8011070 <_Balloc+0x50>
 801104e:	69e3      	ldr	r3, [r4, #28]
 8011050:	68db      	ldr	r3, [r3, #12]
 8011052:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8011056:	b9b8      	cbnz	r0, 8011088 <_Balloc+0x68>
 8011058:	2101      	movs	r1, #1
 801105a:	fa01 f605 	lsl.w	r6, r1, r5
 801105e:	1d72      	adds	r2, r6, #5
 8011060:	0092      	lsls	r2, r2, #2
 8011062:	4620      	mov	r0, r4
 8011064:	f001 fade 	bl	8012624 <_calloc_r>
 8011068:	b160      	cbz	r0, 8011084 <_Balloc+0x64>
 801106a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801106e:	e00e      	b.n	801108e <_Balloc+0x6e>
 8011070:	2221      	movs	r2, #33	@ 0x21
 8011072:	2104      	movs	r1, #4
 8011074:	4620      	mov	r0, r4
 8011076:	f001 fad5 	bl	8012624 <_calloc_r>
 801107a:	69e3      	ldr	r3, [r4, #28]
 801107c:	60f0      	str	r0, [r6, #12]
 801107e:	68db      	ldr	r3, [r3, #12]
 8011080:	2b00      	cmp	r3, #0
 8011082:	d1e4      	bne.n	801104e <_Balloc+0x2e>
 8011084:	2000      	movs	r0, #0
 8011086:	bd70      	pop	{r4, r5, r6, pc}
 8011088:	6802      	ldr	r2, [r0, #0]
 801108a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801108e:	2300      	movs	r3, #0
 8011090:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011094:	e7f7      	b.n	8011086 <_Balloc+0x66>
 8011096:	bf00      	nop
 8011098:	08012ef4 	.word	0x08012ef4
 801109c:	08012fd4 	.word	0x08012fd4

080110a0 <_Bfree>:
 80110a0:	b570      	push	{r4, r5, r6, lr}
 80110a2:	69c6      	ldr	r6, [r0, #28]
 80110a4:	4605      	mov	r5, r0
 80110a6:	460c      	mov	r4, r1
 80110a8:	b976      	cbnz	r6, 80110c8 <_Bfree+0x28>
 80110aa:	2010      	movs	r0, #16
 80110ac:	f7fc ff72 	bl	800df94 <malloc>
 80110b0:	4602      	mov	r2, r0
 80110b2:	61e8      	str	r0, [r5, #28]
 80110b4:	b920      	cbnz	r0, 80110c0 <_Bfree+0x20>
 80110b6:	4b09      	ldr	r3, [pc, #36]	@ (80110dc <_Bfree+0x3c>)
 80110b8:	4809      	ldr	r0, [pc, #36]	@ (80110e0 <_Bfree+0x40>)
 80110ba:	218f      	movs	r1, #143	@ 0x8f
 80110bc:	f001 fa94 	bl	80125e8 <__assert_func>
 80110c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80110c4:	6006      	str	r6, [r0, #0]
 80110c6:	60c6      	str	r6, [r0, #12]
 80110c8:	b13c      	cbz	r4, 80110da <_Bfree+0x3a>
 80110ca:	69eb      	ldr	r3, [r5, #28]
 80110cc:	6862      	ldr	r2, [r4, #4]
 80110ce:	68db      	ldr	r3, [r3, #12]
 80110d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80110d4:	6021      	str	r1, [r4, #0]
 80110d6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80110da:	bd70      	pop	{r4, r5, r6, pc}
 80110dc:	08012ef4 	.word	0x08012ef4
 80110e0:	08012fd4 	.word	0x08012fd4

080110e4 <__multadd>:
 80110e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80110e8:	690d      	ldr	r5, [r1, #16]
 80110ea:	4607      	mov	r7, r0
 80110ec:	460c      	mov	r4, r1
 80110ee:	461e      	mov	r6, r3
 80110f0:	f101 0c14 	add.w	ip, r1, #20
 80110f4:	2000      	movs	r0, #0
 80110f6:	f8dc 3000 	ldr.w	r3, [ip]
 80110fa:	b299      	uxth	r1, r3
 80110fc:	fb02 6101 	mla	r1, r2, r1, r6
 8011100:	0c1e      	lsrs	r6, r3, #16
 8011102:	0c0b      	lsrs	r3, r1, #16
 8011104:	fb02 3306 	mla	r3, r2, r6, r3
 8011108:	b289      	uxth	r1, r1
 801110a:	3001      	adds	r0, #1
 801110c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8011110:	4285      	cmp	r5, r0
 8011112:	f84c 1b04 	str.w	r1, [ip], #4
 8011116:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801111a:	dcec      	bgt.n	80110f6 <__multadd+0x12>
 801111c:	b30e      	cbz	r6, 8011162 <__multadd+0x7e>
 801111e:	68a3      	ldr	r3, [r4, #8]
 8011120:	42ab      	cmp	r3, r5
 8011122:	dc19      	bgt.n	8011158 <__multadd+0x74>
 8011124:	6861      	ldr	r1, [r4, #4]
 8011126:	4638      	mov	r0, r7
 8011128:	3101      	adds	r1, #1
 801112a:	f7ff ff79 	bl	8011020 <_Balloc>
 801112e:	4680      	mov	r8, r0
 8011130:	b928      	cbnz	r0, 801113e <__multadd+0x5a>
 8011132:	4602      	mov	r2, r0
 8011134:	4b0c      	ldr	r3, [pc, #48]	@ (8011168 <__multadd+0x84>)
 8011136:	480d      	ldr	r0, [pc, #52]	@ (801116c <__multadd+0x88>)
 8011138:	21ba      	movs	r1, #186	@ 0xba
 801113a:	f001 fa55 	bl	80125e8 <__assert_func>
 801113e:	6922      	ldr	r2, [r4, #16]
 8011140:	3202      	adds	r2, #2
 8011142:	f104 010c 	add.w	r1, r4, #12
 8011146:	0092      	lsls	r2, r2, #2
 8011148:	300c      	adds	r0, #12
 801114a:	f7fe fdd4 	bl	800fcf6 <memcpy>
 801114e:	4621      	mov	r1, r4
 8011150:	4638      	mov	r0, r7
 8011152:	f7ff ffa5 	bl	80110a0 <_Bfree>
 8011156:	4644      	mov	r4, r8
 8011158:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801115c:	3501      	adds	r5, #1
 801115e:	615e      	str	r6, [r3, #20]
 8011160:	6125      	str	r5, [r4, #16]
 8011162:	4620      	mov	r0, r4
 8011164:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011168:	08012f63 	.word	0x08012f63
 801116c:	08012fd4 	.word	0x08012fd4

08011170 <__s2b>:
 8011170:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011174:	460c      	mov	r4, r1
 8011176:	4615      	mov	r5, r2
 8011178:	461f      	mov	r7, r3
 801117a:	2209      	movs	r2, #9
 801117c:	3308      	adds	r3, #8
 801117e:	4606      	mov	r6, r0
 8011180:	fb93 f3f2 	sdiv	r3, r3, r2
 8011184:	2100      	movs	r1, #0
 8011186:	2201      	movs	r2, #1
 8011188:	429a      	cmp	r2, r3
 801118a:	db09      	blt.n	80111a0 <__s2b+0x30>
 801118c:	4630      	mov	r0, r6
 801118e:	f7ff ff47 	bl	8011020 <_Balloc>
 8011192:	b940      	cbnz	r0, 80111a6 <__s2b+0x36>
 8011194:	4602      	mov	r2, r0
 8011196:	4b19      	ldr	r3, [pc, #100]	@ (80111fc <__s2b+0x8c>)
 8011198:	4819      	ldr	r0, [pc, #100]	@ (8011200 <__s2b+0x90>)
 801119a:	21d3      	movs	r1, #211	@ 0xd3
 801119c:	f001 fa24 	bl	80125e8 <__assert_func>
 80111a0:	0052      	lsls	r2, r2, #1
 80111a2:	3101      	adds	r1, #1
 80111a4:	e7f0      	b.n	8011188 <__s2b+0x18>
 80111a6:	9b08      	ldr	r3, [sp, #32]
 80111a8:	6143      	str	r3, [r0, #20]
 80111aa:	2d09      	cmp	r5, #9
 80111ac:	f04f 0301 	mov.w	r3, #1
 80111b0:	6103      	str	r3, [r0, #16]
 80111b2:	dd16      	ble.n	80111e2 <__s2b+0x72>
 80111b4:	f104 0909 	add.w	r9, r4, #9
 80111b8:	46c8      	mov	r8, r9
 80111ba:	442c      	add	r4, r5
 80111bc:	f818 3b01 	ldrb.w	r3, [r8], #1
 80111c0:	4601      	mov	r1, r0
 80111c2:	3b30      	subs	r3, #48	@ 0x30
 80111c4:	220a      	movs	r2, #10
 80111c6:	4630      	mov	r0, r6
 80111c8:	f7ff ff8c 	bl	80110e4 <__multadd>
 80111cc:	45a0      	cmp	r8, r4
 80111ce:	d1f5      	bne.n	80111bc <__s2b+0x4c>
 80111d0:	f1a5 0408 	sub.w	r4, r5, #8
 80111d4:	444c      	add	r4, r9
 80111d6:	1b2d      	subs	r5, r5, r4
 80111d8:	1963      	adds	r3, r4, r5
 80111da:	42bb      	cmp	r3, r7
 80111dc:	db04      	blt.n	80111e8 <__s2b+0x78>
 80111de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80111e2:	340a      	adds	r4, #10
 80111e4:	2509      	movs	r5, #9
 80111e6:	e7f6      	b.n	80111d6 <__s2b+0x66>
 80111e8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80111ec:	4601      	mov	r1, r0
 80111ee:	3b30      	subs	r3, #48	@ 0x30
 80111f0:	220a      	movs	r2, #10
 80111f2:	4630      	mov	r0, r6
 80111f4:	f7ff ff76 	bl	80110e4 <__multadd>
 80111f8:	e7ee      	b.n	80111d8 <__s2b+0x68>
 80111fa:	bf00      	nop
 80111fc:	08012f63 	.word	0x08012f63
 8011200:	08012fd4 	.word	0x08012fd4

08011204 <__hi0bits>:
 8011204:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8011208:	4603      	mov	r3, r0
 801120a:	bf36      	itet	cc
 801120c:	0403      	lslcc	r3, r0, #16
 801120e:	2000      	movcs	r0, #0
 8011210:	2010      	movcc	r0, #16
 8011212:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8011216:	bf3c      	itt	cc
 8011218:	021b      	lslcc	r3, r3, #8
 801121a:	3008      	addcc	r0, #8
 801121c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8011220:	bf3c      	itt	cc
 8011222:	011b      	lslcc	r3, r3, #4
 8011224:	3004      	addcc	r0, #4
 8011226:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801122a:	bf3c      	itt	cc
 801122c:	009b      	lslcc	r3, r3, #2
 801122e:	3002      	addcc	r0, #2
 8011230:	2b00      	cmp	r3, #0
 8011232:	db05      	blt.n	8011240 <__hi0bits+0x3c>
 8011234:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8011238:	f100 0001 	add.w	r0, r0, #1
 801123c:	bf08      	it	eq
 801123e:	2020      	moveq	r0, #32
 8011240:	4770      	bx	lr

08011242 <__lo0bits>:
 8011242:	6803      	ldr	r3, [r0, #0]
 8011244:	4602      	mov	r2, r0
 8011246:	f013 0007 	ands.w	r0, r3, #7
 801124a:	d00b      	beq.n	8011264 <__lo0bits+0x22>
 801124c:	07d9      	lsls	r1, r3, #31
 801124e:	d421      	bmi.n	8011294 <__lo0bits+0x52>
 8011250:	0798      	lsls	r0, r3, #30
 8011252:	bf49      	itett	mi
 8011254:	085b      	lsrmi	r3, r3, #1
 8011256:	089b      	lsrpl	r3, r3, #2
 8011258:	2001      	movmi	r0, #1
 801125a:	6013      	strmi	r3, [r2, #0]
 801125c:	bf5c      	itt	pl
 801125e:	6013      	strpl	r3, [r2, #0]
 8011260:	2002      	movpl	r0, #2
 8011262:	4770      	bx	lr
 8011264:	b299      	uxth	r1, r3
 8011266:	b909      	cbnz	r1, 801126c <__lo0bits+0x2a>
 8011268:	0c1b      	lsrs	r3, r3, #16
 801126a:	2010      	movs	r0, #16
 801126c:	b2d9      	uxtb	r1, r3
 801126e:	b909      	cbnz	r1, 8011274 <__lo0bits+0x32>
 8011270:	3008      	adds	r0, #8
 8011272:	0a1b      	lsrs	r3, r3, #8
 8011274:	0719      	lsls	r1, r3, #28
 8011276:	bf04      	itt	eq
 8011278:	091b      	lsreq	r3, r3, #4
 801127a:	3004      	addeq	r0, #4
 801127c:	0799      	lsls	r1, r3, #30
 801127e:	bf04      	itt	eq
 8011280:	089b      	lsreq	r3, r3, #2
 8011282:	3002      	addeq	r0, #2
 8011284:	07d9      	lsls	r1, r3, #31
 8011286:	d403      	bmi.n	8011290 <__lo0bits+0x4e>
 8011288:	085b      	lsrs	r3, r3, #1
 801128a:	f100 0001 	add.w	r0, r0, #1
 801128e:	d003      	beq.n	8011298 <__lo0bits+0x56>
 8011290:	6013      	str	r3, [r2, #0]
 8011292:	4770      	bx	lr
 8011294:	2000      	movs	r0, #0
 8011296:	4770      	bx	lr
 8011298:	2020      	movs	r0, #32
 801129a:	4770      	bx	lr

0801129c <__i2b>:
 801129c:	b510      	push	{r4, lr}
 801129e:	460c      	mov	r4, r1
 80112a0:	2101      	movs	r1, #1
 80112a2:	f7ff febd 	bl	8011020 <_Balloc>
 80112a6:	4602      	mov	r2, r0
 80112a8:	b928      	cbnz	r0, 80112b6 <__i2b+0x1a>
 80112aa:	4b05      	ldr	r3, [pc, #20]	@ (80112c0 <__i2b+0x24>)
 80112ac:	4805      	ldr	r0, [pc, #20]	@ (80112c4 <__i2b+0x28>)
 80112ae:	f240 1145 	movw	r1, #325	@ 0x145
 80112b2:	f001 f999 	bl	80125e8 <__assert_func>
 80112b6:	2301      	movs	r3, #1
 80112b8:	6144      	str	r4, [r0, #20]
 80112ba:	6103      	str	r3, [r0, #16]
 80112bc:	bd10      	pop	{r4, pc}
 80112be:	bf00      	nop
 80112c0:	08012f63 	.word	0x08012f63
 80112c4:	08012fd4 	.word	0x08012fd4

080112c8 <__multiply>:
 80112c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80112cc:	4614      	mov	r4, r2
 80112ce:	690a      	ldr	r2, [r1, #16]
 80112d0:	6923      	ldr	r3, [r4, #16]
 80112d2:	429a      	cmp	r2, r3
 80112d4:	bfa8      	it	ge
 80112d6:	4623      	movge	r3, r4
 80112d8:	460f      	mov	r7, r1
 80112da:	bfa4      	itt	ge
 80112dc:	460c      	movge	r4, r1
 80112de:	461f      	movge	r7, r3
 80112e0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80112e4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80112e8:	68a3      	ldr	r3, [r4, #8]
 80112ea:	6861      	ldr	r1, [r4, #4]
 80112ec:	eb0a 0609 	add.w	r6, sl, r9
 80112f0:	42b3      	cmp	r3, r6
 80112f2:	b085      	sub	sp, #20
 80112f4:	bfb8      	it	lt
 80112f6:	3101      	addlt	r1, #1
 80112f8:	f7ff fe92 	bl	8011020 <_Balloc>
 80112fc:	b930      	cbnz	r0, 801130c <__multiply+0x44>
 80112fe:	4602      	mov	r2, r0
 8011300:	4b44      	ldr	r3, [pc, #272]	@ (8011414 <__multiply+0x14c>)
 8011302:	4845      	ldr	r0, [pc, #276]	@ (8011418 <__multiply+0x150>)
 8011304:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8011308:	f001 f96e 	bl	80125e8 <__assert_func>
 801130c:	f100 0514 	add.w	r5, r0, #20
 8011310:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8011314:	462b      	mov	r3, r5
 8011316:	2200      	movs	r2, #0
 8011318:	4543      	cmp	r3, r8
 801131a:	d321      	bcc.n	8011360 <__multiply+0x98>
 801131c:	f107 0114 	add.w	r1, r7, #20
 8011320:	f104 0214 	add.w	r2, r4, #20
 8011324:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8011328:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 801132c:	9302      	str	r3, [sp, #8]
 801132e:	1b13      	subs	r3, r2, r4
 8011330:	3b15      	subs	r3, #21
 8011332:	f023 0303 	bic.w	r3, r3, #3
 8011336:	3304      	adds	r3, #4
 8011338:	f104 0715 	add.w	r7, r4, #21
 801133c:	42ba      	cmp	r2, r7
 801133e:	bf38      	it	cc
 8011340:	2304      	movcc	r3, #4
 8011342:	9301      	str	r3, [sp, #4]
 8011344:	9b02      	ldr	r3, [sp, #8]
 8011346:	9103      	str	r1, [sp, #12]
 8011348:	428b      	cmp	r3, r1
 801134a:	d80c      	bhi.n	8011366 <__multiply+0x9e>
 801134c:	2e00      	cmp	r6, #0
 801134e:	dd03      	ble.n	8011358 <__multiply+0x90>
 8011350:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8011354:	2b00      	cmp	r3, #0
 8011356:	d05b      	beq.n	8011410 <__multiply+0x148>
 8011358:	6106      	str	r6, [r0, #16]
 801135a:	b005      	add	sp, #20
 801135c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011360:	f843 2b04 	str.w	r2, [r3], #4
 8011364:	e7d8      	b.n	8011318 <__multiply+0x50>
 8011366:	f8b1 a000 	ldrh.w	sl, [r1]
 801136a:	f1ba 0f00 	cmp.w	sl, #0
 801136e:	d024      	beq.n	80113ba <__multiply+0xf2>
 8011370:	f104 0e14 	add.w	lr, r4, #20
 8011374:	46a9      	mov	r9, r5
 8011376:	f04f 0c00 	mov.w	ip, #0
 801137a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801137e:	f8d9 3000 	ldr.w	r3, [r9]
 8011382:	fa1f fb87 	uxth.w	fp, r7
 8011386:	b29b      	uxth	r3, r3
 8011388:	fb0a 330b 	mla	r3, sl, fp, r3
 801138c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8011390:	f8d9 7000 	ldr.w	r7, [r9]
 8011394:	4463      	add	r3, ip
 8011396:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801139a:	fb0a c70b 	mla	r7, sl, fp, ip
 801139e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80113a2:	b29b      	uxth	r3, r3
 80113a4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80113a8:	4572      	cmp	r2, lr
 80113aa:	f849 3b04 	str.w	r3, [r9], #4
 80113ae:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80113b2:	d8e2      	bhi.n	801137a <__multiply+0xb2>
 80113b4:	9b01      	ldr	r3, [sp, #4]
 80113b6:	f845 c003 	str.w	ip, [r5, r3]
 80113ba:	9b03      	ldr	r3, [sp, #12]
 80113bc:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80113c0:	3104      	adds	r1, #4
 80113c2:	f1b9 0f00 	cmp.w	r9, #0
 80113c6:	d021      	beq.n	801140c <__multiply+0x144>
 80113c8:	682b      	ldr	r3, [r5, #0]
 80113ca:	f104 0c14 	add.w	ip, r4, #20
 80113ce:	46ae      	mov	lr, r5
 80113d0:	f04f 0a00 	mov.w	sl, #0
 80113d4:	f8bc b000 	ldrh.w	fp, [ip]
 80113d8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80113dc:	fb09 770b 	mla	r7, r9, fp, r7
 80113e0:	4457      	add	r7, sl
 80113e2:	b29b      	uxth	r3, r3
 80113e4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80113e8:	f84e 3b04 	str.w	r3, [lr], #4
 80113ec:	f85c 3b04 	ldr.w	r3, [ip], #4
 80113f0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80113f4:	f8be 3000 	ldrh.w	r3, [lr]
 80113f8:	fb09 330a 	mla	r3, r9, sl, r3
 80113fc:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8011400:	4562      	cmp	r2, ip
 8011402:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011406:	d8e5      	bhi.n	80113d4 <__multiply+0x10c>
 8011408:	9f01      	ldr	r7, [sp, #4]
 801140a:	51eb      	str	r3, [r5, r7]
 801140c:	3504      	adds	r5, #4
 801140e:	e799      	b.n	8011344 <__multiply+0x7c>
 8011410:	3e01      	subs	r6, #1
 8011412:	e79b      	b.n	801134c <__multiply+0x84>
 8011414:	08012f63 	.word	0x08012f63
 8011418:	08012fd4 	.word	0x08012fd4

0801141c <__pow5mult>:
 801141c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011420:	4615      	mov	r5, r2
 8011422:	f012 0203 	ands.w	r2, r2, #3
 8011426:	4607      	mov	r7, r0
 8011428:	460e      	mov	r6, r1
 801142a:	d007      	beq.n	801143c <__pow5mult+0x20>
 801142c:	4c25      	ldr	r4, [pc, #148]	@ (80114c4 <__pow5mult+0xa8>)
 801142e:	3a01      	subs	r2, #1
 8011430:	2300      	movs	r3, #0
 8011432:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011436:	f7ff fe55 	bl	80110e4 <__multadd>
 801143a:	4606      	mov	r6, r0
 801143c:	10ad      	asrs	r5, r5, #2
 801143e:	d03d      	beq.n	80114bc <__pow5mult+0xa0>
 8011440:	69fc      	ldr	r4, [r7, #28]
 8011442:	b97c      	cbnz	r4, 8011464 <__pow5mult+0x48>
 8011444:	2010      	movs	r0, #16
 8011446:	f7fc fda5 	bl	800df94 <malloc>
 801144a:	4602      	mov	r2, r0
 801144c:	61f8      	str	r0, [r7, #28]
 801144e:	b928      	cbnz	r0, 801145c <__pow5mult+0x40>
 8011450:	4b1d      	ldr	r3, [pc, #116]	@ (80114c8 <__pow5mult+0xac>)
 8011452:	481e      	ldr	r0, [pc, #120]	@ (80114cc <__pow5mult+0xb0>)
 8011454:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8011458:	f001 f8c6 	bl	80125e8 <__assert_func>
 801145c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011460:	6004      	str	r4, [r0, #0]
 8011462:	60c4      	str	r4, [r0, #12]
 8011464:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8011468:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801146c:	b94c      	cbnz	r4, 8011482 <__pow5mult+0x66>
 801146e:	f240 2171 	movw	r1, #625	@ 0x271
 8011472:	4638      	mov	r0, r7
 8011474:	f7ff ff12 	bl	801129c <__i2b>
 8011478:	2300      	movs	r3, #0
 801147a:	f8c8 0008 	str.w	r0, [r8, #8]
 801147e:	4604      	mov	r4, r0
 8011480:	6003      	str	r3, [r0, #0]
 8011482:	f04f 0900 	mov.w	r9, #0
 8011486:	07eb      	lsls	r3, r5, #31
 8011488:	d50a      	bpl.n	80114a0 <__pow5mult+0x84>
 801148a:	4631      	mov	r1, r6
 801148c:	4622      	mov	r2, r4
 801148e:	4638      	mov	r0, r7
 8011490:	f7ff ff1a 	bl	80112c8 <__multiply>
 8011494:	4631      	mov	r1, r6
 8011496:	4680      	mov	r8, r0
 8011498:	4638      	mov	r0, r7
 801149a:	f7ff fe01 	bl	80110a0 <_Bfree>
 801149e:	4646      	mov	r6, r8
 80114a0:	106d      	asrs	r5, r5, #1
 80114a2:	d00b      	beq.n	80114bc <__pow5mult+0xa0>
 80114a4:	6820      	ldr	r0, [r4, #0]
 80114a6:	b938      	cbnz	r0, 80114b8 <__pow5mult+0x9c>
 80114a8:	4622      	mov	r2, r4
 80114aa:	4621      	mov	r1, r4
 80114ac:	4638      	mov	r0, r7
 80114ae:	f7ff ff0b 	bl	80112c8 <__multiply>
 80114b2:	6020      	str	r0, [r4, #0]
 80114b4:	f8c0 9000 	str.w	r9, [r0]
 80114b8:	4604      	mov	r4, r0
 80114ba:	e7e4      	b.n	8011486 <__pow5mult+0x6a>
 80114bc:	4630      	mov	r0, r6
 80114be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80114c2:	bf00      	nop
 80114c4:	08013030 	.word	0x08013030
 80114c8:	08012ef4 	.word	0x08012ef4
 80114cc:	08012fd4 	.word	0x08012fd4

080114d0 <__lshift>:
 80114d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80114d4:	460c      	mov	r4, r1
 80114d6:	6849      	ldr	r1, [r1, #4]
 80114d8:	6923      	ldr	r3, [r4, #16]
 80114da:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80114de:	68a3      	ldr	r3, [r4, #8]
 80114e0:	4607      	mov	r7, r0
 80114e2:	4691      	mov	r9, r2
 80114e4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80114e8:	f108 0601 	add.w	r6, r8, #1
 80114ec:	42b3      	cmp	r3, r6
 80114ee:	db0b      	blt.n	8011508 <__lshift+0x38>
 80114f0:	4638      	mov	r0, r7
 80114f2:	f7ff fd95 	bl	8011020 <_Balloc>
 80114f6:	4605      	mov	r5, r0
 80114f8:	b948      	cbnz	r0, 801150e <__lshift+0x3e>
 80114fa:	4602      	mov	r2, r0
 80114fc:	4b28      	ldr	r3, [pc, #160]	@ (80115a0 <__lshift+0xd0>)
 80114fe:	4829      	ldr	r0, [pc, #164]	@ (80115a4 <__lshift+0xd4>)
 8011500:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8011504:	f001 f870 	bl	80125e8 <__assert_func>
 8011508:	3101      	adds	r1, #1
 801150a:	005b      	lsls	r3, r3, #1
 801150c:	e7ee      	b.n	80114ec <__lshift+0x1c>
 801150e:	2300      	movs	r3, #0
 8011510:	f100 0114 	add.w	r1, r0, #20
 8011514:	f100 0210 	add.w	r2, r0, #16
 8011518:	4618      	mov	r0, r3
 801151a:	4553      	cmp	r3, sl
 801151c:	db33      	blt.n	8011586 <__lshift+0xb6>
 801151e:	6920      	ldr	r0, [r4, #16]
 8011520:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011524:	f104 0314 	add.w	r3, r4, #20
 8011528:	f019 091f 	ands.w	r9, r9, #31
 801152c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011530:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8011534:	d02b      	beq.n	801158e <__lshift+0xbe>
 8011536:	f1c9 0e20 	rsb	lr, r9, #32
 801153a:	468a      	mov	sl, r1
 801153c:	2200      	movs	r2, #0
 801153e:	6818      	ldr	r0, [r3, #0]
 8011540:	fa00 f009 	lsl.w	r0, r0, r9
 8011544:	4310      	orrs	r0, r2
 8011546:	f84a 0b04 	str.w	r0, [sl], #4
 801154a:	f853 2b04 	ldr.w	r2, [r3], #4
 801154e:	459c      	cmp	ip, r3
 8011550:	fa22 f20e 	lsr.w	r2, r2, lr
 8011554:	d8f3      	bhi.n	801153e <__lshift+0x6e>
 8011556:	ebac 0304 	sub.w	r3, ip, r4
 801155a:	3b15      	subs	r3, #21
 801155c:	f023 0303 	bic.w	r3, r3, #3
 8011560:	3304      	adds	r3, #4
 8011562:	f104 0015 	add.w	r0, r4, #21
 8011566:	4584      	cmp	ip, r0
 8011568:	bf38      	it	cc
 801156a:	2304      	movcc	r3, #4
 801156c:	50ca      	str	r2, [r1, r3]
 801156e:	b10a      	cbz	r2, 8011574 <__lshift+0xa4>
 8011570:	f108 0602 	add.w	r6, r8, #2
 8011574:	3e01      	subs	r6, #1
 8011576:	4638      	mov	r0, r7
 8011578:	612e      	str	r6, [r5, #16]
 801157a:	4621      	mov	r1, r4
 801157c:	f7ff fd90 	bl	80110a0 <_Bfree>
 8011580:	4628      	mov	r0, r5
 8011582:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011586:	f842 0f04 	str.w	r0, [r2, #4]!
 801158a:	3301      	adds	r3, #1
 801158c:	e7c5      	b.n	801151a <__lshift+0x4a>
 801158e:	3904      	subs	r1, #4
 8011590:	f853 2b04 	ldr.w	r2, [r3], #4
 8011594:	f841 2f04 	str.w	r2, [r1, #4]!
 8011598:	459c      	cmp	ip, r3
 801159a:	d8f9      	bhi.n	8011590 <__lshift+0xc0>
 801159c:	e7ea      	b.n	8011574 <__lshift+0xa4>
 801159e:	bf00      	nop
 80115a0:	08012f63 	.word	0x08012f63
 80115a4:	08012fd4 	.word	0x08012fd4

080115a8 <__mcmp>:
 80115a8:	690a      	ldr	r2, [r1, #16]
 80115aa:	4603      	mov	r3, r0
 80115ac:	6900      	ldr	r0, [r0, #16]
 80115ae:	1a80      	subs	r0, r0, r2
 80115b0:	b530      	push	{r4, r5, lr}
 80115b2:	d10e      	bne.n	80115d2 <__mcmp+0x2a>
 80115b4:	3314      	adds	r3, #20
 80115b6:	3114      	adds	r1, #20
 80115b8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80115bc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80115c0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80115c4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80115c8:	4295      	cmp	r5, r2
 80115ca:	d003      	beq.n	80115d4 <__mcmp+0x2c>
 80115cc:	d205      	bcs.n	80115da <__mcmp+0x32>
 80115ce:	f04f 30ff 	mov.w	r0, #4294967295
 80115d2:	bd30      	pop	{r4, r5, pc}
 80115d4:	42a3      	cmp	r3, r4
 80115d6:	d3f3      	bcc.n	80115c0 <__mcmp+0x18>
 80115d8:	e7fb      	b.n	80115d2 <__mcmp+0x2a>
 80115da:	2001      	movs	r0, #1
 80115dc:	e7f9      	b.n	80115d2 <__mcmp+0x2a>
	...

080115e0 <__mdiff>:
 80115e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80115e4:	4689      	mov	r9, r1
 80115e6:	4606      	mov	r6, r0
 80115e8:	4611      	mov	r1, r2
 80115ea:	4648      	mov	r0, r9
 80115ec:	4614      	mov	r4, r2
 80115ee:	f7ff ffdb 	bl	80115a8 <__mcmp>
 80115f2:	1e05      	subs	r5, r0, #0
 80115f4:	d112      	bne.n	801161c <__mdiff+0x3c>
 80115f6:	4629      	mov	r1, r5
 80115f8:	4630      	mov	r0, r6
 80115fa:	f7ff fd11 	bl	8011020 <_Balloc>
 80115fe:	4602      	mov	r2, r0
 8011600:	b928      	cbnz	r0, 801160e <__mdiff+0x2e>
 8011602:	4b3f      	ldr	r3, [pc, #252]	@ (8011700 <__mdiff+0x120>)
 8011604:	f240 2137 	movw	r1, #567	@ 0x237
 8011608:	483e      	ldr	r0, [pc, #248]	@ (8011704 <__mdiff+0x124>)
 801160a:	f000 ffed 	bl	80125e8 <__assert_func>
 801160e:	2301      	movs	r3, #1
 8011610:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011614:	4610      	mov	r0, r2
 8011616:	b003      	add	sp, #12
 8011618:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801161c:	bfbc      	itt	lt
 801161e:	464b      	movlt	r3, r9
 8011620:	46a1      	movlt	r9, r4
 8011622:	4630      	mov	r0, r6
 8011624:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8011628:	bfba      	itte	lt
 801162a:	461c      	movlt	r4, r3
 801162c:	2501      	movlt	r5, #1
 801162e:	2500      	movge	r5, #0
 8011630:	f7ff fcf6 	bl	8011020 <_Balloc>
 8011634:	4602      	mov	r2, r0
 8011636:	b918      	cbnz	r0, 8011640 <__mdiff+0x60>
 8011638:	4b31      	ldr	r3, [pc, #196]	@ (8011700 <__mdiff+0x120>)
 801163a:	f240 2145 	movw	r1, #581	@ 0x245
 801163e:	e7e3      	b.n	8011608 <__mdiff+0x28>
 8011640:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8011644:	6926      	ldr	r6, [r4, #16]
 8011646:	60c5      	str	r5, [r0, #12]
 8011648:	f109 0310 	add.w	r3, r9, #16
 801164c:	f109 0514 	add.w	r5, r9, #20
 8011650:	f104 0e14 	add.w	lr, r4, #20
 8011654:	f100 0b14 	add.w	fp, r0, #20
 8011658:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801165c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8011660:	9301      	str	r3, [sp, #4]
 8011662:	46d9      	mov	r9, fp
 8011664:	f04f 0c00 	mov.w	ip, #0
 8011668:	9b01      	ldr	r3, [sp, #4]
 801166a:	f85e 0b04 	ldr.w	r0, [lr], #4
 801166e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8011672:	9301      	str	r3, [sp, #4]
 8011674:	fa1f f38a 	uxth.w	r3, sl
 8011678:	4619      	mov	r1, r3
 801167a:	b283      	uxth	r3, r0
 801167c:	1acb      	subs	r3, r1, r3
 801167e:	0c00      	lsrs	r0, r0, #16
 8011680:	4463      	add	r3, ip
 8011682:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8011686:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801168a:	b29b      	uxth	r3, r3
 801168c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8011690:	4576      	cmp	r6, lr
 8011692:	f849 3b04 	str.w	r3, [r9], #4
 8011696:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801169a:	d8e5      	bhi.n	8011668 <__mdiff+0x88>
 801169c:	1b33      	subs	r3, r6, r4
 801169e:	3b15      	subs	r3, #21
 80116a0:	f023 0303 	bic.w	r3, r3, #3
 80116a4:	3415      	adds	r4, #21
 80116a6:	3304      	adds	r3, #4
 80116a8:	42a6      	cmp	r6, r4
 80116aa:	bf38      	it	cc
 80116ac:	2304      	movcc	r3, #4
 80116ae:	441d      	add	r5, r3
 80116b0:	445b      	add	r3, fp
 80116b2:	461e      	mov	r6, r3
 80116b4:	462c      	mov	r4, r5
 80116b6:	4544      	cmp	r4, r8
 80116b8:	d30e      	bcc.n	80116d8 <__mdiff+0xf8>
 80116ba:	f108 0103 	add.w	r1, r8, #3
 80116be:	1b49      	subs	r1, r1, r5
 80116c0:	f021 0103 	bic.w	r1, r1, #3
 80116c4:	3d03      	subs	r5, #3
 80116c6:	45a8      	cmp	r8, r5
 80116c8:	bf38      	it	cc
 80116ca:	2100      	movcc	r1, #0
 80116cc:	440b      	add	r3, r1
 80116ce:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80116d2:	b191      	cbz	r1, 80116fa <__mdiff+0x11a>
 80116d4:	6117      	str	r7, [r2, #16]
 80116d6:	e79d      	b.n	8011614 <__mdiff+0x34>
 80116d8:	f854 1b04 	ldr.w	r1, [r4], #4
 80116dc:	46e6      	mov	lr, ip
 80116de:	0c08      	lsrs	r0, r1, #16
 80116e0:	fa1c fc81 	uxtah	ip, ip, r1
 80116e4:	4471      	add	r1, lr
 80116e6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80116ea:	b289      	uxth	r1, r1
 80116ec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80116f0:	f846 1b04 	str.w	r1, [r6], #4
 80116f4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80116f8:	e7dd      	b.n	80116b6 <__mdiff+0xd6>
 80116fa:	3f01      	subs	r7, #1
 80116fc:	e7e7      	b.n	80116ce <__mdiff+0xee>
 80116fe:	bf00      	nop
 8011700:	08012f63 	.word	0x08012f63
 8011704:	08012fd4 	.word	0x08012fd4

08011708 <__ulp>:
 8011708:	b082      	sub	sp, #8
 801170a:	ed8d 0b00 	vstr	d0, [sp]
 801170e:	9a01      	ldr	r2, [sp, #4]
 8011710:	4b0f      	ldr	r3, [pc, #60]	@ (8011750 <__ulp+0x48>)
 8011712:	4013      	ands	r3, r2
 8011714:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8011718:	2b00      	cmp	r3, #0
 801171a:	dc08      	bgt.n	801172e <__ulp+0x26>
 801171c:	425b      	negs	r3, r3
 801171e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8011722:	ea4f 5223 	mov.w	r2, r3, asr #20
 8011726:	da04      	bge.n	8011732 <__ulp+0x2a>
 8011728:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 801172c:	4113      	asrs	r3, r2
 801172e:	2200      	movs	r2, #0
 8011730:	e008      	b.n	8011744 <__ulp+0x3c>
 8011732:	f1a2 0314 	sub.w	r3, r2, #20
 8011736:	2b1e      	cmp	r3, #30
 8011738:	bfda      	itte	le
 801173a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 801173e:	40da      	lsrle	r2, r3
 8011740:	2201      	movgt	r2, #1
 8011742:	2300      	movs	r3, #0
 8011744:	4619      	mov	r1, r3
 8011746:	4610      	mov	r0, r2
 8011748:	ec41 0b10 	vmov	d0, r0, r1
 801174c:	b002      	add	sp, #8
 801174e:	4770      	bx	lr
 8011750:	7ff00000 	.word	0x7ff00000

08011754 <__b2d>:
 8011754:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011758:	6906      	ldr	r6, [r0, #16]
 801175a:	f100 0814 	add.w	r8, r0, #20
 801175e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8011762:	1f37      	subs	r7, r6, #4
 8011764:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8011768:	4610      	mov	r0, r2
 801176a:	f7ff fd4b 	bl	8011204 <__hi0bits>
 801176e:	f1c0 0320 	rsb	r3, r0, #32
 8011772:	280a      	cmp	r0, #10
 8011774:	600b      	str	r3, [r1, #0]
 8011776:	491b      	ldr	r1, [pc, #108]	@ (80117e4 <__b2d+0x90>)
 8011778:	dc15      	bgt.n	80117a6 <__b2d+0x52>
 801177a:	f1c0 0c0b 	rsb	ip, r0, #11
 801177e:	fa22 f30c 	lsr.w	r3, r2, ip
 8011782:	45b8      	cmp	r8, r7
 8011784:	ea43 0501 	orr.w	r5, r3, r1
 8011788:	bf34      	ite	cc
 801178a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801178e:	2300      	movcs	r3, #0
 8011790:	3015      	adds	r0, #21
 8011792:	fa02 f000 	lsl.w	r0, r2, r0
 8011796:	fa23 f30c 	lsr.w	r3, r3, ip
 801179a:	4303      	orrs	r3, r0
 801179c:	461c      	mov	r4, r3
 801179e:	ec45 4b10 	vmov	d0, r4, r5
 80117a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80117a6:	45b8      	cmp	r8, r7
 80117a8:	bf3a      	itte	cc
 80117aa:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80117ae:	f1a6 0708 	subcc.w	r7, r6, #8
 80117b2:	2300      	movcs	r3, #0
 80117b4:	380b      	subs	r0, #11
 80117b6:	d012      	beq.n	80117de <__b2d+0x8a>
 80117b8:	f1c0 0120 	rsb	r1, r0, #32
 80117bc:	fa23 f401 	lsr.w	r4, r3, r1
 80117c0:	4082      	lsls	r2, r0
 80117c2:	4322      	orrs	r2, r4
 80117c4:	4547      	cmp	r7, r8
 80117c6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 80117ca:	bf8c      	ite	hi
 80117cc:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80117d0:	2200      	movls	r2, #0
 80117d2:	4083      	lsls	r3, r0
 80117d4:	40ca      	lsrs	r2, r1
 80117d6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80117da:	4313      	orrs	r3, r2
 80117dc:	e7de      	b.n	801179c <__b2d+0x48>
 80117de:	ea42 0501 	orr.w	r5, r2, r1
 80117e2:	e7db      	b.n	801179c <__b2d+0x48>
 80117e4:	3ff00000 	.word	0x3ff00000

080117e8 <__d2b>:
 80117e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80117ec:	460f      	mov	r7, r1
 80117ee:	2101      	movs	r1, #1
 80117f0:	ec59 8b10 	vmov	r8, r9, d0
 80117f4:	4616      	mov	r6, r2
 80117f6:	f7ff fc13 	bl	8011020 <_Balloc>
 80117fa:	4604      	mov	r4, r0
 80117fc:	b930      	cbnz	r0, 801180c <__d2b+0x24>
 80117fe:	4602      	mov	r2, r0
 8011800:	4b23      	ldr	r3, [pc, #140]	@ (8011890 <__d2b+0xa8>)
 8011802:	4824      	ldr	r0, [pc, #144]	@ (8011894 <__d2b+0xac>)
 8011804:	f240 310f 	movw	r1, #783	@ 0x30f
 8011808:	f000 feee 	bl	80125e8 <__assert_func>
 801180c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8011810:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011814:	b10d      	cbz	r5, 801181a <__d2b+0x32>
 8011816:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801181a:	9301      	str	r3, [sp, #4]
 801181c:	f1b8 0300 	subs.w	r3, r8, #0
 8011820:	d023      	beq.n	801186a <__d2b+0x82>
 8011822:	4668      	mov	r0, sp
 8011824:	9300      	str	r3, [sp, #0]
 8011826:	f7ff fd0c 	bl	8011242 <__lo0bits>
 801182a:	e9dd 1200 	ldrd	r1, r2, [sp]
 801182e:	b1d0      	cbz	r0, 8011866 <__d2b+0x7e>
 8011830:	f1c0 0320 	rsb	r3, r0, #32
 8011834:	fa02 f303 	lsl.w	r3, r2, r3
 8011838:	430b      	orrs	r3, r1
 801183a:	40c2      	lsrs	r2, r0
 801183c:	6163      	str	r3, [r4, #20]
 801183e:	9201      	str	r2, [sp, #4]
 8011840:	9b01      	ldr	r3, [sp, #4]
 8011842:	61a3      	str	r3, [r4, #24]
 8011844:	2b00      	cmp	r3, #0
 8011846:	bf0c      	ite	eq
 8011848:	2201      	moveq	r2, #1
 801184a:	2202      	movne	r2, #2
 801184c:	6122      	str	r2, [r4, #16]
 801184e:	b1a5      	cbz	r5, 801187a <__d2b+0x92>
 8011850:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8011854:	4405      	add	r5, r0
 8011856:	603d      	str	r5, [r7, #0]
 8011858:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801185c:	6030      	str	r0, [r6, #0]
 801185e:	4620      	mov	r0, r4
 8011860:	b003      	add	sp, #12
 8011862:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011866:	6161      	str	r1, [r4, #20]
 8011868:	e7ea      	b.n	8011840 <__d2b+0x58>
 801186a:	a801      	add	r0, sp, #4
 801186c:	f7ff fce9 	bl	8011242 <__lo0bits>
 8011870:	9b01      	ldr	r3, [sp, #4]
 8011872:	6163      	str	r3, [r4, #20]
 8011874:	3020      	adds	r0, #32
 8011876:	2201      	movs	r2, #1
 8011878:	e7e8      	b.n	801184c <__d2b+0x64>
 801187a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801187e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8011882:	6038      	str	r0, [r7, #0]
 8011884:	6918      	ldr	r0, [r3, #16]
 8011886:	f7ff fcbd 	bl	8011204 <__hi0bits>
 801188a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801188e:	e7e5      	b.n	801185c <__d2b+0x74>
 8011890:	08012f63 	.word	0x08012f63
 8011894:	08012fd4 	.word	0x08012fd4

08011898 <__ratio>:
 8011898:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801189c:	4688      	mov	r8, r1
 801189e:	4669      	mov	r1, sp
 80118a0:	4681      	mov	r9, r0
 80118a2:	f7ff ff57 	bl	8011754 <__b2d>
 80118a6:	a901      	add	r1, sp, #4
 80118a8:	4640      	mov	r0, r8
 80118aa:	ec55 4b10 	vmov	r4, r5, d0
 80118ae:	f7ff ff51 	bl	8011754 <__b2d>
 80118b2:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80118b6:	f8d9 2010 	ldr.w	r2, [r9, #16]
 80118ba:	1ad2      	subs	r2, r2, r3
 80118bc:	e9dd 3100 	ldrd	r3, r1, [sp]
 80118c0:	1a5b      	subs	r3, r3, r1
 80118c2:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 80118c6:	ec57 6b10 	vmov	r6, r7, d0
 80118ca:	2b00      	cmp	r3, #0
 80118cc:	bfd6      	itet	le
 80118ce:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80118d2:	462a      	movgt	r2, r5
 80118d4:	463a      	movle	r2, r7
 80118d6:	46ab      	mov	fp, r5
 80118d8:	46a2      	mov	sl, r4
 80118da:	bfce      	itee	gt
 80118dc:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 80118e0:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 80118e4:	ee00 3a90 	vmovle	s1, r3
 80118e8:	ec4b ab17 	vmov	d7, sl, fp
 80118ec:	ee87 0b00 	vdiv.f64	d0, d7, d0
 80118f0:	b003      	add	sp, #12
 80118f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080118f6 <__copybits>:
 80118f6:	3901      	subs	r1, #1
 80118f8:	b570      	push	{r4, r5, r6, lr}
 80118fa:	1149      	asrs	r1, r1, #5
 80118fc:	6914      	ldr	r4, [r2, #16]
 80118fe:	3101      	adds	r1, #1
 8011900:	f102 0314 	add.w	r3, r2, #20
 8011904:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8011908:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801190c:	1f05      	subs	r5, r0, #4
 801190e:	42a3      	cmp	r3, r4
 8011910:	d30c      	bcc.n	801192c <__copybits+0x36>
 8011912:	1aa3      	subs	r3, r4, r2
 8011914:	3b11      	subs	r3, #17
 8011916:	f023 0303 	bic.w	r3, r3, #3
 801191a:	3211      	adds	r2, #17
 801191c:	42a2      	cmp	r2, r4
 801191e:	bf88      	it	hi
 8011920:	2300      	movhi	r3, #0
 8011922:	4418      	add	r0, r3
 8011924:	2300      	movs	r3, #0
 8011926:	4288      	cmp	r0, r1
 8011928:	d305      	bcc.n	8011936 <__copybits+0x40>
 801192a:	bd70      	pop	{r4, r5, r6, pc}
 801192c:	f853 6b04 	ldr.w	r6, [r3], #4
 8011930:	f845 6f04 	str.w	r6, [r5, #4]!
 8011934:	e7eb      	b.n	801190e <__copybits+0x18>
 8011936:	f840 3b04 	str.w	r3, [r0], #4
 801193a:	e7f4      	b.n	8011926 <__copybits+0x30>

0801193c <__any_on>:
 801193c:	f100 0214 	add.w	r2, r0, #20
 8011940:	6900      	ldr	r0, [r0, #16]
 8011942:	114b      	asrs	r3, r1, #5
 8011944:	4298      	cmp	r0, r3
 8011946:	b510      	push	{r4, lr}
 8011948:	db11      	blt.n	801196e <__any_on+0x32>
 801194a:	dd0a      	ble.n	8011962 <__any_on+0x26>
 801194c:	f011 011f 	ands.w	r1, r1, #31
 8011950:	d007      	beq.n	8011962 <__any_on+0x26>
 8011952:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8011956:	fa24 f001 	lsr.w	r0, r4, r1
 801195a:	fa00 f101 	lsl.w	r1, r0, r1
 801195e:	428c      	cmp	r4, r1
 8011960:	d10b      	bne.n	801197a <__any_on+0x3e>
 8011962:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011966:	4293      	cmp	r3, r2
 8011968:	d803      	bhi.n	8011972 <__any_on+0x36>
 801196a:	2000      	movs	r0, #0
 801196c:	bd10      	pop	{r4, pc}
 801196e:	4603      	mov	r3, r0
 8011970:	e7f7      	b.n	8011962 <__any_on+0x26>
 8011972:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011976:	2900      	cmp	r1, #0
 8011978:	d0f5      	beq.n	8011966 <__any_on+0x2a>
 801197a:	2001      	movs	r0, #1
 801197c:	e7f6      	b.n	801196c <__any_on+0x30>
	...

08011980 <_strtol_l.constprop.0>:
 8011980:	2b24      	cmp	r3, #36	@ 0x24
 8011982:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011986:	4686      	mov	lr, r0
 8011988:	4690      	mov	r8, r2
 801198a:	d801      	bhi.n	8011990 <_strtol_l.constprop.0+0x10>
 801198c:	2b01      	cmp	r3, #1
 801198e:	d106      	bne.n	801199e <_strtol_l.constprop.0+0x1e>
 8011990:	f7fe f984 	bl	800fc9c <__errno>
 8011994:	2316      	movs	r3, #22
 8011996:	6003      	str	r3, [r0, #0]
 8011998:	2000      	movs	r0, #0
 801199a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801199e:	4834      	ldr	r0, [pc, #208]	@ (8011a70 <_strtol_l.constprop.0+0xf0>)
 80119a0:	460d      	mov	r5, r1
 80119a2:	462a      	mov	r2, r5
 80119a4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80119a8:	5d06      	ldrb	r6, [r0, r4]
 80119aa:	f016 0608 	ands.w	r6, r6, #8
 80119ae:	d1f8      	bne.n	80119a2 <_strtol_l.constprop.0+0x22>
 80119b0:	2c2d      	cmp	r4, #45	@ 0x2d
 80119b2:	d12d      	bne.n	8011a10 <_strtol_l.constprop.0+0x90>
 80119b4:	782c      	ldrb	r4, [r5, #0]
 80119b6:	2601      	movs	r6, #1
 80119b8:	1c95      	adds	r5, r2, #2
 80119ba:	f033 0210 	bics.w	r2, r3, #16
 80119be:	d109      	bne.n	80119d4 <_strtol_l.constprop.0+0x54>
 80119c0:	2c30      	cmp	r4, #48	@ 0x30
 80119c2:	d12a      	bne.n	8011a1a <_strtol_l.constprop.0+0x9a>
 80119c4:	782a      	ldrb	r2, [r5, #0]
 80119c6:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80119ca:	2a58      	cmp	r2, #88	@ 0x58
 80119cc:	d125      	bne.n	8011a1a <_strtol_l.constprop.0+0x9a>
 80119ce:	786c      	ldrb	r4, [r5, #1]
 80119d0:	2310      	movs	r3, #16
 80119d2:	3502      	adds	r5, #2
 80119d4:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80119d8:	f10c 3cff 	add.w	ip, ip, #4294967295
 80119dc:	2200      	movs	r2, #0
 80119de:	fbbc f9f3 	udiv	r9, ip, r3
 80119e2:	4610      	mov	r0, r2
 80119e4:	fb03 ca19 	mls	sl, r3, r9, ip
 80119e8:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80119ec:	2f09      	cmp	r7, #9
 80119ee:	d81b      	bhi.n	8011a28 <_strtol_l.constprop.0+0xa8>
 80119f0:	463c      	mov	r4, r7
 80119f2:	42a3      	cmp	r3, r4
 80119f4:	dd27      	ble.n	8011a46 <_strtol_l.constprop.0+0xc6>
 80119f6:	1c57      	adds	r7, r2, #1
 80119f8:	d007      	beq.n	8011a0a <_strtol_l.constprop.0+0x8a>
 80119fa:	4581      	cmp	r9, r0
 80119fc:	d320      	bcc.n	8011a40 <_strtol_l.constprop.0+0xc0>
 80119fe:	d101      	bne.n	8011a04 <_strtol_l.constprop.0+0x84>
 8011a00:	45a2      	cmp	sl, r4
 8011a02:	db1d      	blt.n	8011a40 <_strtol_l.constprop.0+0xc0>
 8011a04:	fb00 4003 	mla	r0, r0, r3, r4
 8011a08:	2201      	movs	r2, #1
 8011a0a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011a0e:	e7eb      	b.n	80119e8 <_strtol_l.constprop.0+0x68>
 8011a10:	2c2b      	cmp	r4, #43	@ 0x2b
 8011a12:	bf04      	itt	eq
 8011a14:	782c      	ldrbeq	r4, [r5, #0]
 8011a16:	1c95      	addeq	r5, r2, #2
 8011a18:	e7cf      	b.n	80119ba <_strtol_l.constprop.0+0x3a>
 8011a1a:	2b00      	cmp	r3, #0
 8011a1c:	d1da      	bne.n	80119d4 <_strtol_l.constprop.0+0x54>
 8011a1e:	2c30      	cmp	r4, #48	@ 0x30
 8011a20:	bf0c      	ite	eq
 8011a22:	2308      	moveq	r3, #8
 8011a24:	230a      	movne	r3, #10
 8011a26:	e7d5      	b.n	80119d4 <_strtol_l.constprop.0+0x54>
 8011a28:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8011a2c:	2f19      	cmp	r7, #25
 8011a2e:	d801      	bhi.n	8011a34 <_strtol_l.constprop.0+0xb4>
 8011a30:	3c37      	subs	r4, #55	@ 0x37
 8011a32:	e7de      	b.n	80119f2 <_strtol_l.constprop.0+0x72>
 8011a34:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8011a38:	2f19      	cmp	r7, #25
 8011a3a:	d804      	bhi.n	8011a46 <_strtol_l.constprop.0+0xc6>
 8011a3c:	3c57      	subs	r4, #87	@ 0x57
 8011a3e:	e7d8      	b.n	80119f2 <_strtol_l.constprop.0+0x72>
 8011a40:	f04f 32ff 	mov.w	r2, #4294967295
 8011a44:	e7e1      	b.n	8011a0a <_strtol_l.constprop.0+0x8a>
 8011a46:	1c53      	adds	r3, r2, #1
 8011a48:	d108      	bne.n	8011a5c <_strtol_l.constprop.0+0xdc>
 8011a4a:	2322      	movs	r3, #34	@ 0x22
 8011a4c:	f8ce 3000 	str.w	r3, [lr]
 8011a50:	4660      	mov	r0, ip
 8011a52:	f1b8 0f00 	cmp.w	r8, #0
 8011a56:	d0a0      	beq.n	801199a <_strtol_l.constprop.0+0x1a>
 8011a58:	1e69      	subs	r1, r5, #1
 8011a5a:	e006      	b.n	8011a6a <_strtol_l.constprop.0+0xea>
 8011a5c:	b106      	cbz	r6, 8011a60 <_strtol_l.constprop.0+0xe0>
 8011a5e:	4240      	negs	r0, r0
 8011a60:	f1b8 0f00 	cmp.w	r8, #0
 8011a64:	d099      	beq.n	801199a <_strtol_l.constprop.0+0x1a>
 8011a66:	2a00      	cmp	r2, #0
 8011a68:	d1f6      	bne.n	8011a58 <_strtol_l.constprop.0+0xd8>
 8011a6a:	f8c8 1000 	str.w	r1, [r8]
 8011a6e:	e794      	b.n	801199a <_strtol_l.constprop.0+0x1a>
 8011a70:	08013131 	.word	0x08013131

08011a74 <_strtol_r>:
 8011a74:	f7ff bf84 	b.w	8011980 <_strtol_l.constprop.0>

08011a78 <__ascii_wctomb>:
 8011a78:	4603      	mov	r3, r0
 8011a7a:	4608      	mov	r0, r1
 8011a7c:	b141      	cbz	r1, 8011a90 <__ascii_wctomb+0x18>
 8011a7e:	2aff      	cmp	r2, #255	@ 0xff
 8011a80:	d904      	bls.n	8011a8c <__ascii_wctomb+0x14>
 8011a82:	228a      	movs	r2, #138	@ 0x8a
 8011a84:	601a      	str	r2, [r3, #0]
 8011a86:	f04f 30ff 	mov.w	r0, #4294967295
 8011a8a:	4770      	bx	lr
 8011a8c:	700a      	strb	r2, [r1, #0]
 8011a8e:	2001      	movs	r0, #1
 8011a90:	4770      	bx	lr

08011a92 <__ssputs_r>:
 8011a92:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011a96:	688e      	ldr	r6, [r1, #8]
 8011a98:	461f      	mov	r7, r3
 8011a9a:	42be      	cmp	r6, r7
 8011a9c:	680b      	ldr	r3, [r1, #0]
 8011a9e:	4682      	mov	sl, r0
 8011aa0:	460c      	mov	r4, r1
 8011aa2:	4690      	mov	r8, r2
 8011aa4:	d82d      	bhi.n	8011b02 <__ssputs_r+0x70>
 8011aa6:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011aaa:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8011aae:	d026      	beq.n	8011afe <__ssputs_r+0x6c>
 8011ab0:	6965      	ldr	r5, [r4, #20]
 8011ab2:	6909      	ldr	r1, [r1, #16]
 8011ab4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011ab8:	eba3 0901 	sub.w	r9, r3, r1
 8011abc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011ac0:	1c7b      	adds	r3, r7, #1
 8011ac2:	444b      	add	r3, r9
 8011ac4:	106d      	asrs	r5, r5, #1
 8011ac6:	429d      	cmp	r5, r3
 8011ac8:	bf38      	it	cc
 8011aca:	461d      	movcc	r5, r3
 8011acc:	0553      	lsls	r3, r2, #21
 8011ace:	d527      	bpl.n	8011b20 <__ssputs_r+0x8e>
 8011ad0:	4629      	mov	r1, r5
 8011ad2:	f7fc fa89 	bl	800dfe8 <_malloc_r>
 8011ad6:	4606      	mov	r6, r0
 8011ad8:	b360      	cbz	r0, 8011b34 <__ssputs_r+0xa2>
 8011ada:	6921      	ldr	r1, [r4, #16]
 8011adc:	464a      	mov	r2, r9
 8011ade:	f7fe f90a 	bl	800fcf6 <memcpy>
 8011ae2:	89a3      	ldrh	r3, [r4, #12]
 8011ae4:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8011ae8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011aec:	81a3      	strh	r3, [r4, #12]
 8011aee:	6126      	str	r6, [r4, #16]
 8011af0:	6165      	str	r5, [r4, #20]
 8011af2:	444e      	add	r6, r9
 8011af4:	eba5 0509 	sub.w	r5, r5, r9
 8011af8:	6026      	str	r6, [r4, #0]
 8011afa:	60a5      	str	r5, [r4, #8]
 8011afc:	463e      	mov	r6, r7
 8011afe:	42be      	cmp	r6, r7
 8011b00:	d900      	bls.n	8011b04 <__ssputs_r+0x72>
 8011b02:	463e      	mov	r6, r7
 8011b04:	6820      	ldr	r0, [r4, #0]
 8011b06:	4632      	mov	r2, r6
 8011b08:	4641      	mov	r1, r8
 8011b0a:	f000 fd52 	bl	80125b2 <memmove>
 8011b0e:	68a3      	ldr	r3, [r4, #8]
 8011b10:	1b9b      	subs	r3, r3, r6
 8011b12:	60a3      	str	r3, [r4, #8]
 8011b14:	6823      	ldr	r3, [r4, #0]
 8011b16:	4433      	add	r3, r6
 8011b18:	6023      	str	r3, [r4, #0]
 8011b1a:	2000      	movs	r0, #0
 8011b1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011b20:	462a      	mov	r2, r5
 8011b22:	f000 fd93 	bl	801264c <_realloc_r>
 8011b26:	4606      	mov	r6, r0
 8011b28:	2800      	cmp	r0, #0
 8011b2a:	d1e0      	bne.n	8011aee <__ssputs_r+0x5c>
 8011b2c:	6921      	ldr	r1, [r4, #16]
 8011b2e:	4650      	mov	r0, sl
 8011b30:	f7fe fee0 	bl	80108f4 <_free_r>
 8011b34:	230c      	movs	r3, #12
 8011b36:	f8ca 3000 	str.w	r3, [sl]
 8011b3a:	89a3      	ldrh	r3, [r4, #12]
 8011b3c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011b40:	81a3      	strh	r3, [r4, #12]
 8011b42:	f04f 30ff 	mov.w	r0, #4294967295
 8011b46:	e7e9      	b.n	8011b1c <__ssputs_r+0x8a>

08011b48 <_svfiprintf_r>:
 8011b48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b4c:	4698      	mov	r8, r3
 8011b4e:	898b      	ldrh	r3, [r1, #12]
 8011b50:	061b      	lsls	r3, r3, #24
 8011b52:	b09d      	sub	sp, #116	@ 0x74
 8011b54:	4607      	mov	r7, r0
 8011b56:	460d      	mov	r5, r1
 8011b58:	4614      	mov	r4, r2
 8011b5a:	d510      	bpl.n	8011b7e <_svfiprintf_r+0x36>
 8011b5c:	690b      	ldr	r3, [r1, #16]
 8011b5e:	b973      	cbnz	r3, 8011b7e <_svfiprintf_r+0x36>
 8011b60:	2140      	movs	r1, #64	@ 0x40
 8011b62:	f7fc fa41 	bl	800dfe8 <_malloc_r>
 8011b66:	6028      	str	r0, [r5, #0]
 8011b68:	6128      	str	r0, [r5, #16]
 8011b6a:	b930      	cbnz	r0, 8011b7a <_svfiprintf_r+0x32>
 8011b6c:	230c      	movs	r3, #12
 8011b6e:	603b      	str	r3, [r7, #0]
 8011b70:	f04f 30ff 	mov.w	r0, #4294967295
 8011b74:	b01d      	add	sp, #116	@ 0x74
 8011b76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b7a:	2340      	movs	r3, #64	@ 0x40
 8011b7c:	616b      	str	r3, [r5, #20]
 8011b7e:	2300      	movs	r3, #0
 8011b80:	9309      	str	r3, [sp, #36]	@ 0x24
 8011b82:	2320      	movs	r3, #32
 8011b84:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011b88:	f8cd 800c 	str.w	r8, [sp, #12]
 8011b8c:	2330      	movs	r3, #48	@ 0x30
 8011b8e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8011d2c <_svfiprintf_r+0x1e4>
 8011b92:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011b96:	f04f 0901 	mov.w	r9, #1
 8011b9a:	4623      	mov	r3, r4
 8011b9c:	469a      	mov	sl, r3
 8011b9e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011ba2:	b10a      	cbz	r2, 8011ba8 <_svfiprintf_r+0x60>
 8011ba4:	2a25      	cmp	r2, #37	@ 0x25
 8011ba6:	d1f9      	bne.n	8011b9c <_svfiprintf_r+0x54>
 8011ba8:	ebba 0b04 	subs.w	fp, sl, r4
 8011bac:	d00b      	beq.n	8011bc6 <_svfiprintf_r+0x7e>
 8011bae:	465b      	mov	r3, fp
 8011bb0:	4622      	mov	r2, r4
 8011bb2:	4629      	mov	r1, r5
 8011bb4:	4638      	mov	r0, r7
 8011bb6:	f7ff ff6c 	bl	8011a92 <__ssputs_r>
 8011bba:	3001      	adds	r0, #1
 8011bbc:	f000 80a7 	beq.w	8011d0e <_svfiprintf_r+0x1c6>
 8011bc0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011bc2:	445a      	add	r2, fp
 8011bc4:	9209      	str	r2, [sp, #36]	@ 0x24
 8011bc6:	f89a 3000 	ldrb.w	r3, [sl]
 8011bca:	2b00      	cmp	r3, #0
 8011bcc:	f000 809f 	beq.w	8011d0e <_svfiprintf_r+0x1c6>
 8011bd0:	2300      	movs	r3, #0
 8011bd2:	f04f 32ff 	mov.w	r2, #4294967295
 8011bd6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011bda:	f10a 0a01 	add.w	sl, sl, #1
 8011bde:	9304      	str	r3, [sp, #16]
 8011be0:	9307      	str	r3, [sp, #28]
 8011be2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011be6:	931a      	str	r3, [sp, #104]	@ 0x68
 8011be8:	4654      	mov	r4, sl
 8011bea:	2205      	movs	r2, #5
 8011bec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011bf0:	484e      	ldr	r0, [pc, #312]	@ (8011d2c <_svfiprintf_r+0x1e4>)
 8011bf2:	f7ee fb8d 	bl	8000310 <memchr>
 8011bf6:	9a04      	ldr	r2, [sp, #16]
 8011bf8:	b9d8      	cbnz	r0, 8011c32 <_svfiprintf_r+0xea>
 8011bfa:	06d0      	lsls	r0, r2, #27
 8011bfc:	bf44      	itt	mi
 8011bfe:	2320      	movmi	r3, #32
 8011c00:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011c04:	0711      	lsls	r1, r2, #28
 8011c06:	bf44      	itt	mi
 8011c08:	232b      	movmi	r3, #43	@ 0x2b
 8011c0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011c0e:	f89a 3000 	ldrb.w	r3, [sl]
 8011c12:	2b2a      	cmp	r3, #42	@ 0x2a
 8011c14:	d015      	beq.n	8011c42 <_svfiprintf_r+0xfa>
 8011c16:	9a07      	ldr	r2, [sp, #28]
 8011c18:	4654      	mov	r4, sl
 8011c1a:	2000      	movs	r0, #0
 8011c1c:	f04f 0c0a 	mov.w	ip, #10
 8011c20:	4621      	mov	r1, r4
 8011c22:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011c26:	3b30      	subs	r3, #48	@ 0x30
 8011c28:	2b09      	cmp	r3, #9
 8011c2a:	d94b      	bls.n	8011cc4 <_svfiprintf_r+0x17c>
 8011c2c:	b1b0      	cbz	r0, 8011c5c <_svfiprintf_r+0x114>
 8011c2e:	9207      	str	r2, [sp, #28]
 8011c30:	e014      	b.n	8011c5c <_svfiprintf_r+0x114>
 8011c32:	eba0 0308 	sub.w	r3, r0, r8
 8011c36:	fa09 f303 	lsl.w	r3, r9, r3
 8011c3a:	4313      	orrs	r3, r2
 8011c3c:	9304      	str	r3, [sp, #16]
 8011c3e:	46a2      	mov	sl, r4
 8011c40:	e7d2      	b.n	8011be8 <_svfiprintf_r+0xa0>
 8011c42:	9b03      	ldr	r3, [sp, #12]
 8011c44:	1d19      	adds	r1, r3, #4
 8011c46:	681b      	ldr	r3, [r3, #0]
 8011c48:	9103      	str	r1, [sp, #12]
 8011c4a:	2b00      	cmp	r3, #0
 8011c4c:	bfbb      	ittet	lt
 8011c4e:	425b      	neglt	r3, r3
 8011c50:	f042 0202 	orrlt.w	r2, r2, #2
 8011c54:	9307      	strge	r3, [sp, #28]
 8011c56:	9307      	strlt	r3, [sp, #28]
 8011c58:	bfb8      	it	lt
 8011c5a:	9204      	strlt	r2, [sp, #16]
 8011c5c:	7823      	ldrb	r3, [r4, #0]
 8011c5e:	2b2e      	cmp	r3, #46	@ 0x2e
 8011c60:	d10a      	bne.n	8011c78 <_svfiprintf_r+0x130>
 8011c62:	7863      	ldrb	r3, [r4, #1]
 8011c64:	2b2a      	cmp	r3, #42	@ 0x2a
 8011c66:	d132      	bne.n	8011cce <_svfiprintf_r+0x186>
 8011c68:	9b03      	ldr	r3, [sp, #12]
 8011c6a:	1d1a      	adds	r2, r3, #4
 8011c6c:	681b      	ldr	r3, [r3, #0]
 8011c6e:	9203      	str	r2, [sp, #12]
 8011c70:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011c74:	3402      	adds	r4, #2
 8011c76:	9305      	str	r3, [sp, #20]
 8011c78:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8011d3c <_svfiprintf_r+0x1f4>
 8011c7c:	7821      	ldrb	r1, [r4, #0]
 8011c7e:	2203      	movs	r2, #3
 8011c80:	4650      	mov	r0, sl
 8011c82:	f7ee fb45 	bl	8000310 <memchr>
 8011c86:	b138      	cbz	r0, 8011c98 <_svfiprintf_r+0x150>
 8011c88:	9b04      	ldr	r3, [sp, #16]
 8011c8a:	eba0 000a 	sub.w	r0, r0, sl
 8011c8e:	2240      	movs	r2, #64	@ 0x40
 8011c90:	4082      	lsls	r2, r0
 8011c92:	4313      	orrs	r3, r2
 8011c94:	3401      	adds	r4, #1
 8011c96:	9304      	str	r3, [sp, #16]
 8011c98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011c9c:	4824      	ldr	r0, [pc, #144]	@ (8011d30 <_svfiprintf_r+0x1e8>)
 8011c9e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011ca2:	2206      	movs	r2, #6
 8011ca4:	f7ee fb34 	bl	8000310 <memchr>
 8011ca8:	2800      	cmp	r0, #0
 8011caa:	d036      	beq.n	8011d1a <_svfiprintf_r+0x1d2>
 8011cac:	4b21      	ldr	r3, [pc, #132]	@ (8011d34 <_svfiprintf_r+0x1ec>)
 8011cae:	bb1b      	cbnz	r3, 8011cf8 <_svfiprintf_r+0x1b0>
 8011cb0:	9b03      	ldr	r3, [sp, #12]
 8011cb2:	3307      	adds	r3, #7
 8011cb4:	f023 0307 	bic.w	r3, r3, #7
 8011cb8:	3308      	adds	r3, #8
 8011cba:	9303      	str	r3, [sp, #12]
 8011cbc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011cbe:	4433      	add	r3, r6
 8011cc0:	9309      	str	r3, [sp, #36]	@ 0x24
 8011cc2:	e76a      	b.n	8011b9a <_svfiprintf_r+0x52>
 8011cc4:	fb0c 3202 	mla	r2, ip, r2, r3
 8011cc8:	460c      	mov	r4, r1
 8011cca:	2001      	movs	r0, #1
 8011ccc:	e7a8      	b.n	8011c20 <_svfiprintf_r+0xd8>
 8011cce:	2300      	movs	r3, #0
 8011cd0:	3401      	adds	r4, #1
 8011cd2:	9305      	str	r3, [sp, #20]
 8011cd4:	4619      	mov	r1, r3
 8011cd6:	f04f 0c0a 	mov.w	ip, #10
 8011cda:	4620      	mov	r0, r4
 8011cdc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011ce0:	3a30      	subs	r2, #48	@ 0x30
 8011ce2:	2a09      	cmp	r2, #9
 8011ce4:	d903      	bls.n	8011cee <_svfiprintf_r+0x1a6>
 8011ce6:	2b00      	cmp	r3, #0
 8011ce8:	d0c6      	beq.n	8011c78 <_svfiprintf_r+0x130>
 8011cea:	9105      	str	r1, [sp, #20]
 8011cec:	e7c4      	b.n	8011c78 <_svfiprintf_r+0x130>
 8011cee:	fb0c 2101 	mla	r1, ip, r1, r2
 8011cf2:	4604      	mov	r4, r0
 8011cf4:	2301      	movs	r3, #1
 8011cf6:	e7f0      	b.n	8011cda <_svfiprintf_r+0x192>
 8011cf8:	ab03      	add	r3, sp, #12
 8011cfa:	9300      	str	r3, [sp, #0]
 8011cfc:	462a      	mov	r2, r5
 8011cfe:	4b0e      	ldr	r3, [pc, #56]	@ (8011d38 <_svfiprintf_r+0x1f0>)
 8011d00:	a904      	add	r1, sp, #16
 8011d02:	4638      	mov	r0, r7
 8011d04:	f7fd f844 	bl	800ed90 <_printf_float>
 8011d08:	1c42      	adds	r2, r0, #1
 8011d0a:	4606      	mov	r6, r0
 8011d0c:	d1d6      	bne.n	8011cbc <_svfiprintf_r+0x174>
 8011d0e:	89ab      	ldrh	r3, [r5, #12]
 8011d10:	065b      	lsls	r3, r3, #25
 8011d12:	f53f af2d 	bmi.w	8011b70 <_svfiprintf_r+0x28>
 8011d16:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011d18:	e72c      	b.n	8011b74 <_svfiprintf_r+0x2c>
 8011d1a:	ab03      	add	r3, sp, #12
 8011d1c:	9300      	str	r3, [sp, #0]
 8011d1e:	462a      	mov	r2, r5
 8011d20:	4b05      	ldr	r3, [pc, #20]	@ (8011d38 <_svfiprintf_r+0x1f0>)
 8011d22:	a904      	add	r1, sp, #16
 8011d24:	4638      	mov	r0, r7
 8011d26:	f7fd fabb 	bl	800f2a0 <_printf_i>
 8011d2a:	e7ed      	b.n	8011d08 <_svfiprintf_r+0x1c0>
 8011d2c:	08013231 	.word	0x08013231
 8011d30:	0801323b 	.word	0x0801323b
 8011d34:	0800ed91 	.word	0x0800ed91
 8011d38:	08011a93 	.word	0x08011a93
 8011d3c:	08013237 	.word	0x08013237

08011d40 <_sungetc_r>:
 8011d40:	b538      	push	{r3, r4, r5, lr}
 8011d42:	1c4b      	adds	r3, r1, #1
 8011d44:	4614      	mov	r4, r2
 8011d46:	d103      	bne.n	8011d50 <_sungetc_r+0x10>
 8011d48:	f04f 35ff 	mov.w	r5, #4294967295
 8011d4c:	4628      	mov	r0, r5
 8011d4e:	bd38      	pop	{r3, r4, r5, pc}
 8011d50:	8993      	ldrh	r3, [r2, #12]
 8011d52:	f023 0320 	bic.w	r3, r3, #32
 8011d56:	8193      	strh	r3, [r2, #12]
 8011d58:	6853      	ldr	r3, [r2, #4]
 8011d5a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8011d5c:	b2cd      	uxtb	r5, r1
 8011d5e:	b18a      	cbz	r2, 8011d84 <_sungetc_r+0x44>
 8011d60:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8011d62:	429a      	cmp	r2, r3
 8011d64:	dd08      	ble.n	8011d78 <_sungetc_r+0x38>
 8011d66:	6823      	ldr	r3, [r4, #0]
 8011d68:	1e5a      	subs	r2, r3, #1
 8011d6a:	6022      	str	r2, [r4, #0]
 8011d6c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8011d70:	6863      	ldr	r3, [r4, #4]
 8011d72:	3301      	adds	r3, #1
 8011d74:	6063      	str	r3, [r4, #4]
 8011d76:	e7e9      	b.n	8011d4c <_sungetc_r+0xc>
 8011d78:	4621      	mov	r1, r4
 8011d7a:	f000 fbe0 	bl	801253e <__submore>
 8011d7e:	2800      	cmp	r0, #0
 8011d80:	d0f1      	beq.n	8011d66 <_sungetc_r+0x26>
 8011d82:	e7e1      	b.n	8011d48 <_sungetc_r+0x8>
 8011d84:	6921      	ldr	r1, [r4, #16]
 8011d86:	6822      	ldr	r2, [r4, #0]
 8011d88:	b141      	cbz	r1, 8011d9c <_sungetc_r+0x5c>
 8011d8a:	4291      	cmp	r1, r2
 8011d8c:	d206      	bcs.n	8011d9c <_sungetc_r+0x5c>
 8011d8e:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8011d92:	42a9      	cmp	r1, r5
 8011d94:	d102      	bne.n	8011d9c <_sungetc_r+0x5c>
 8011d96:	3a01      	subs	r2, #1
 8011d98:	6022      	str	r2, [r4, #0]
 8011d9a:	e7ea      	b.n	8011d72 <_sungetc_r+0x32>
 8011d9c:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 8011da0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011da4:	6363      	str	r3, [r4, #52]	@ 0x34
 8011da6:	2303      	movs	r3, #3
 8011da8:	63a3      	str	r3, [r4, #56]	@ 0x38
 8011daa:	4623      	mov	r3, r4
 8011dac:	f803 5f46 	strb.w	r5, [r3, #70]!
 8011db0:	6023      	str	r3, [r4, #0]
 8011db2:	2301      	movs	r3, #1
 8011db4:	e7de      	b.n	8011d74 <_sungetc_r+0x34>

08011db6 <__ssrefill_r>:
 8011db6:	b510      	push	{r4, lr}
 8011db8:	460c      	mov	r4, r1
 8011dba:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8011dbc:	b169      	cbz	r1, 8011dda <__ssrefill_r+0x24>
 8011dbe:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011dc2:	4299      	cmp	r1, r3
 8011dc4:	d001      	beq.n	8011dca <__ssrefill_r+0x14>
 8011dc6:	f7fe fd95 	bl	80108f4 <_free_r>
 8011dca:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8011dcc:	6063      	str	r3, [r4, #4]
 8011dce:	2000      	movs	r0, #0
 8011dd0:	6360      	str	r0, [r4, #52]	@ 0x34
 8011dd2:	b113      	cbz	r3, 8011dda <__ssrefill_r+0x24>
 8011dd4:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8011dd6:	6023      	str	r3, [r4, #0]
 8011dd8:	bd10      	pop	{r4, pc}
 8011dda:	6923      	ldr	r3, [r4, #16]
 8011ddc:	6023      	str	r3, [r4, #0]
 8011dde:	2300      	movs	r3, #0
 8011de0:	6063      	str	r3, [r4, #4]
 8011de2:	89a3      	ldrh	r3, [r4, #12]
 8011de4:	f043 0320 	orr.w	r3, r3, #32
 8011de8:	81a3      	strh	r3, [r4, #12]
 8011dea:	f04f 30ff 	mov.w	r0, #4294967295
 8011dee:	e7f3      	b.n	8011dd8 <__ssrefill_r+0x22>

08011df0 <__ssvfiscanf_r>:
 8011df0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011df4:	460c      	mov	r4, r1
 8011df6:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8011dfa:	2100      	movs	r1, #0
 8011dfc:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8011e00:	49a5      	ldr	r1, [pc, #660]	@ (8012098 <__ssvfiscanf_r+0x2a8>)
 8011e02:	91a0      	str	r1, [sp, #640]	@ 0x280
 8011e04:	f10d 0804 	add.w	r8, sp, #4
 8011e08:	49a4      	ldr	r1, [pc, #656]	@ (801209c <__ssvfiscanf_r+0x2ac>)
 8011e0a:	4fa5      	ldr	r7, [pc, #660]	@ (80120a0 <__ssvfiscanf_r+0x2b0>)
 8011e0c:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8011e10:	4606      	mov	r6, r0
 8011e12:	91a1      	str	r1, [sp, #644]	@ 0x284
 8011e14:	9300      	str	r3, [sp, #0]
 8011e16:	7813      	ldrb	r3, [r2, #0]
 8011e18:	2b00      	cmp	r3, #0
 8011e1a:	f000 8158 	beq.w	80120ce <__ssvfiscanf_r+0x2de>
 8011e1e:	5cf9      	ldrb	r1, [r7, r3]
 8011e20:	f011 0108 	ands.w	r1, r1, #8
 8011e24:	f102 0501 	add.w	r5, r2, #1
 8011e28:	d019      	beq.n	8011e5e <__ssvfiscanf_r+0x6e>
 8011e2a:	6863      	ldr	r3, [r4, #4]
 8011e2c:	2b00      	cmp	r3, #0
 8011e2e:	dd0f      	ble.n	8011e50 <__ssvfiscanf_r+0x60>
 8011e30:	6823      	ldr	r3, [r4, #0]
 8011e32:	781a      	ldrb	r2, [r3, #0]
 8011e34:	5cba      	ldrb	r2, [r7, r2]
 8011e36:	0712      	lsls	r2, r2, #28
 8011e38:	d401      	bmi.n	8011e3e <__ssvfiscanf_r+0x4e>
 8011e3a:	462a      	mov	r2, r5
 8011e3c:	e7eb      	b.n	8011e16 <__ssvfiscanf_r+0x26>
 8011e3e:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8011e40:	3201      	adds	r2, #1
 8011e42:	9245      	str	r2, [sp, #276]	@ 0x114
 8011e44:	6862      	ldr	r2, [r4, #4]
 8011e46:	3301      	adds	r3, #1
 8011e48:	3a01      	subs	r2, #1
 8011e4a:	6062      	str	r2, [r4, #4]
 8011e4c:	6023      	str	r3, [r4, #0]
 8011e4e:	e7ec      	b.n	8011e2a <__ssvfiscanf_r+0x3a>
 8011e50:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8011e52:	4621      	mov	r1, r4
 8011e54:	4630      	mov	r0, r6
 8011e56:	4798      	blx	r3
 8011e58:	2800      	cmp	r0, #0
 8011e5a:	d0e9      	beq.n	8011e30 <__ssvfiscanf_r+0x40>
 8011e5c:	e7ed      	b.n	8011e3a <__ssvfiscanf_r+0x4a>
 8011e5e:	2b25      	cmp	r3, #37	@ 0x25
 8011e60:	d012      	beq.n	8011e88 <__ssvfiscanf_r+0x98>
 8011e62:	4699      	mov	r9, r3
 8011e64:	6863      	ldr	r3, [r4, #4]
 8011e66:	2b00      	cmp	r3, #0
 8011e68:	f340 8093 	ble.w	8011f92 <__ssvfiscanf_r+0x1a2>
 8011e6c:	6822      	ldr	r2, [r4, #0]
 8011e6e:	7813      	ldrb	r3, [r2, #0]
 8011e70:	454b      	cmp	r3, r9
 8011e72:	f040 812c 	bne.w	80120ce <__ssvfiscanf_r+0x2de>
 8011e76:	6863      	ldr	r3, [r4, #4]
 8011e78:	3b01      	subs	r3, #1
 8011e7a:	6063      	str	r3, [r4, #4]
 8011e7c:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8011e7e:	3201      	adds	r2, #1
 8011e80:	3301      	adds	r3, #1
 8011e82:	6022      	str	r2, [r4, #0]
 8011e84:	9345      	str	r3, [sp, #276]	@ 0x114
 8011e86:	e7d8      	b.n	8011e3a <__ssvfiscanf_r+0x4a>
 8011e88:	9141      	str	r1, [sp, #260]	@ 0x104
 8011e8a:	9143      	str	r1, [sp, #268]	@ 0x10c
 8011e8c:	7853      	ldrb	r3, [r2, #1]
 8011e8e:	2b2a      	cmp	r3, #42	@ 0x2a
 8011e90:	bf02      	ittt	eq
 8011e92:	2310      	moveq	r3, #16
 8011e94:	1c95      	addeq	r5, r2, #2
 8011e96:	9341      	streq	r3, [sp, #260]	@ 0x104
 8011e98:	220a      	movs	r2, #10
 8011e9a:	46a9      	mov	r9, r5
 8011e9c:	f819 1b01 	ldrb.w	r1, [r9], #1
 8011ea0:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8011ea4:	2b09      	cmp	r3, #9
 8011ea6:	d91e      	bls.n	8011ee6 <__ssvfiscanf_r+0xf6>
 8011ea8:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 80120a4 <__ssvfiscanf_r+0x2b4>
 8011eac:	2203      	movs	r2, #3
 8011eae:	4650      	mov	r0, sl
 8011eb0:	f7ee fa2e 	bl	8000310 <memchr>
 8011eb4:	b138      	cbz	r0, 8011ec6 <__ssvfiscanf_r+0xd6>
 8011eb6:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8011eb8:	eba0 000a 	sub.w	r0, r0, sl
 8011ebc:	2301      	movs	r3, #1
 8011ebe:	4083      	lsls	r3, r0
 8011ec0:	4313      	orrs	r3, r2
 8011ec2:	9341      	str	r3, [sp, #260]	@ 0x104
 8011ec4:	464d      	mov	r5, r9
 8011ec6:	f815 3b01 	ldrb.w	r3, [r5], #1
 8011eca:	2b78      	cmp	r3, #120	@ 0x78
 8011ecc:	d806      	bhi.n	8011edc <__ssvfiscanf_r+0xec>
 8011ece:	2b57      	cmp	r3, #87	@ 0x57
 8011ed0:	d810      	bhi.n	8011ef4 <__ssvfiscanf_r+0x104>
 8011ed2:	2b25      	cmp	r3, #37	@ 0x25
 8011ed4:	d0c5      	beq.n	8011e62 <__ssvfiscanf_r+0x72>
 8011ed6:	d857      	bhi.n	8011f88 <__ssvfiscanf_r+0x198>
 8011ed8:	2b00      	cmp	r3, #0
 8011eda:	d065      	beq.n	8011fa8 <__ssvfiscanf_r+0x1b8>
 8011edc:	2303      	movs	r3, #3
 8011ede:	9347      	str	r3, [sp, #284]	@ 0x11c
 8011ee0:	230a      	movs	r3, #10
 8011ee2:	9342      	str	r3, [sp, #264]	@ 0x108
 8011ee4:	e078      	b.n	8011fd8 <__ssvfiscanf_r+0x1e8>
 8011ee6:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8011ee8:	fb02 1103 	mla	r1, r2, r3, r1
 8011eec:	3930      	subs	r1, #48	@ 0x30
 8011eee:	9143      	str	r1, [sp, #268]	@ 0x10c
 8011ef0:	464d      	mov	r5, r9
 8011ef2:	e7d2      	b.n	8011e9a <__ssvfiscanf_r+0xaa>
 8011ef4:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8011ef8:	2a20      	cmp	r2, #32
 8011efa:	d8ef      	bhi.n	8011edc <__ssvfiscanf_r+0xec>
 8011efc:	a101      	add	r1, pc, #4	@ (adr r1, 8011f04 <__ssvfiscanf_r+0x114>)
 8011efe:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8011f02:	bf00      	nop
 8011f04:	08011fb7 	.word	0x08011fb7
 8011f08:	08011edd 	.word	0x08011edd
 8011f0c:	08011edd 	.word	0x08011edd
 8011f10:	08012011 	.word	0x08012011
 8011f14:	08011edd 	.word	0x08011edd
 8011f18:	08011edd 	.word	0x08011edd
 8011f1c:	08011edd 	.word	0x08011edd
 8011f20:	08011edd 	.word	0x08011edd
 8011f24:	08011edd 	.word	0x08011edd
 8011f28:	08011edd 	.word	0x08011edd
 8011f2c:	08011edd 	.word	0x08011edd
 8011f30:	08012027 	.word	0x08012027
 8011f34:	0801200d 	.word	0x0801200d
 8011f38:	08011f8f 	.word	0x08011f8f
 8011f3c:	08011f8f 	.word	0x08011f8f
 8011f40:	08011f8f 	.word	0x08011f8f
 8011f44:	08011edd 	.word	0x08011edd
 8011f48:	08011fc9 	.word	0x08011fc9
 8011f4c:	08011edd 	.word	0x08011edd
 8011f50:	08011edd 	.word	0x08011edd
 8011f54:	08011edd 	.word	0x08011edd
 8011f58:	08011edd 	.word	0x08011edd
 8011f5c:	08012037 	.word	0x08012037
 8011f60:	08011fd1 	.word	0x08011fd1
 8011f64:	08011faf 	.word	0x08011faf
 8011f68:	08011edd 	.word	0x08011edd
 8011f6c:	08011edd 	.word	0x08011edd
 8011f70:	08012033 	.word	0x08012033
 8011f74:	08011edd 	.word	0x08011edd
 8011f78:	0801200d 	.word	0x0801200d
 8011f7c:	08011edd 	.word	0x08011edd
 8011f80:	08011edd 	.word	0x08011edd
 8011f84:	08011fb7 	.word	0x08011fb7
 8011f88:	3b45      	subs	r3, #69	@ 0x45
 8011f8a:	2b02      	cmp	r3, #2
 8011f8c:	d8a6      	bhi.n	8011edc <__ssvfiscanf_r+0xec>
 8011f8e:	2305      	movs	r3, #5
 8011f90:	e021      	b.n	8011fd6 <__ssvfiscanf_r+0x1e6>
 8011f92:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8011f94:	4621      	mov	r1, r4
 8011f96:	4630      	mov	r0, r6
 8011f98:	4798      	blx	r3
 8011f9a:	2800      	cmp	r0, #0
 8011f9c:	f43f af66 	beq.w	8011e6c <__ssvfiscanf_r+0x7c>
 8011fa0:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8011fa2:	2800      	cmp	r0, #0
 8011fa4:	f040 808b 	bne.w	80120be <__ssvfiscanf_r+0x2ce>
 8011fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8011fac:	e08b      	b.n	80120c6 <__ssvfiscanf_r+0x2d6>
 8011fae:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8011fb0:	f042 0220 	orr.w	r2, r2, #32
 8011fb4:	9241      	str	r2, [sp, #260]	@ 0x104
 8011fb6:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8011fb8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8011fbc:	9241      	str	r2, [sp, #260]	@ 0x104
 8011fbe:	2210      	movs	r2, #16
 8011fc0:	2b6e      	cmp	r3, #110	@ 0x6e
 8011fc2:	9242      	str	r2, [sp, #264]	@ 0x108
 8011fc4:	d902      	bls.n	8011fcc <__ssvfiscanf_r+0x1dc>
 8011fc6:	e005      	b.n	8011fd4 <__ssvfiscanf_r+0x1e4>
 8011fc8:	2300      	movs	r3, #0
 8011fca:	9342      	str	r3, [sp, #264]	@ 0x108
 8011fcc:	2303      	movs	r3, #3
 8011fce:	e002      	b.n	8011fd6 <__ssvfiscanf_r+0x1e6>
 8011fd0:	2308      	movs	r3, #8
 8011fd2:	9342      	str	r3, [sp, #264]	@ 0x108
 8011fd4:	2304      	movs	r3, #4
 8011fd6:	9347      	str	r3, [sp, #284]	@ 0x11c
 8011fd8:	6863      	ldr	r3, [r4, #4]
 8011fda:	2b00      	cmp	r3, #0
 8011fdc:	dd39      	ble.n	8012052 <__ssvfiscanf_r+0x262>
 8011fde:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8011fe0:	0659      	lsls	r1, r3, #25
 8011fe2:	d404      	bmi.n	8011fee <__ssvfiscanf_r+0x1fe>
 8011fe4:	6823      	ldr	r3, [r4, #0]
 8011fe6:	781a      	ldrb	r2, [r3, #0]
 8011fe8:	5cba      	ldrb	r2, [r7, r2]
 8011fea:	0712      	lsls	r2, r2, #28
 8011fec:	d438      	bmi.n	8012060 <__ssvfiscanf_r+0x270>
 8011fee:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8011ff0:	2b02      	cmp	r3, #2
 8011ff2:	dc47      	bgt.n	8012084 <__ssvfiscanf_r+0x294>
 8011ff4:	466b      	mov	r3, sp
 8011ff6:	4622      	mov	r2, r4
 8011ff8:	a941      	add	r1, sp, #260	@ 0x104
 8011ffa:	4630      	mov	r0, r6
 8011ffc:	f000 f86c 	bl	80120d8 <_scanf_chars>
 8012000:	2801      	cmp	r0, #1
 8012002:	d064      	beq.n	80120ce <__ssvfiscanf_r+0x2de>
 8012004:	2802      	cmp	r0, #2
 8012006:	f47f af18 	bne.w	8011e3a <__ssvfiscanf_r+0x4a>
 801200a:	e7c9      	b.n	8011fa0 <__ssvfiscanf_r+0x1b0>
 801200c:	220a      	movs	r2, #10
 801200e:	e7d7      	b.n	8011fc0 <__ssvfiscanf_r+0x1d0>
 8012010:	4629      	mov	r1, r5
 8012012:	4640      	mov	r0, r8
 8012014:	f000 fa5a 	bl	80124cc <__sccl>
 8012018:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 801201a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801201e:	9341      	str	r3, [sp, #260]	@ 0x104
 8012020:	4605      	mov	r5, r0
 8012022:	2301      	movs	r3, #1
 8012024:	e7d7      	b.n	8011fd6 <__ssvfiscanf_r+0x1e6>
 8012026:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8012028:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801202c:	9341      	str	r3, [sp, #260]	@ 0x104
 801202e:	2300      	movs	r3, #0
 8012030:	e7d1      	b.n	8011fd6 <__ssvfiscanf_r+0x1e6>
 8012032:	2302      	movs	r3, #2
 8012034:	e7cf      	b.n	8011fd6 <__ssvfiscanf_r+0x1e6>
 8012036:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8012038:	06c3      	lsls	r3, r0, #27
 801203a:	f53f aefe 	bmi.w	8011e3a <__ssvfiscanf_r+0x4a>
 801203e:	9b00      	ldr	r3, [sp, #0]
 8012040:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8012042:	1d19      	adds	r1, r3, #4
 8012044:	9100      	str	r1, [sp, #0]
 8012046:	681b      	ldr	r3, [r3, #0]
 8012048:	07c0      	lsls	r0, r0, #31
 801204a:	bf4c      	ite	mi
 801204c:	801a      	strhmi	r2, [r3, #0]
 801204e:	601a      	strpl	r2, [r3, #0]
 8012050:	e6f3      	b.n	8011e3a <__ssvfiscanf_r+0x4a>
 8012052:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8012054:	4621      	mov	r1, r4
 8012056:	4630      	mov	r0, r6
 8012058:	4798      	blx	r3
 801205a:	2800      	cmp	r0, #0
 801205c:	d0bf      	beq.n	8011fde <__ssvfiscanf_r+0x1ee>
 801205e:	e79f      	b.n	8011fa0 <__ssvfiscanf_r+0x1b0>
 8012060:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8012062:	3201      	adds	r2, #1
 8012064:	9245      	str	r2, [sp, #276]	@ 0x114
 8012066:	6862      	ldr	r2, [r4, #4]
 8012068:	3a01      	subs	r2, #1
 801206a:	2a00      	cmp	r2, #0
 801206c:	6062      	str	r2, [r4, #4]
 801206e:	dd02      	ble.n	8012076 <__ssvfiscanf_r+0x286>
 8012070:	3301      	adds	r3, #1
 8012072:	6023      	str	r3, [r4, #0]
 8012074:	e7b6      	b.n	8011fe4 <__ssvfiscanf_r+0x1f4>
 8012076:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8012078:	4621      	mov	r1, r4
 801207a:	4630      	mov	r0, r6
 801207c:	4798      	blx	r3
 801207e:	2800      	cmp	r0, #0
 8012080:	d0b0      	beq.n	8011fe4 <__ssvfiscanf_r+0x1f4>
 8012082:	e78d      	b.n	8011fa0 <__ssvfiscanf_r+0x1b0>
 8012084:	2b04      	cmp	r3, #4
 8012086:	dc0f      	bgt.n	80120a8 <__ssvfiscanf_r+0x2b8>
 8012088:	466b      	mov	r3, sp
 801208a:	4622      	mov	r2, r4
 801208c:	a941      	add	r1, sp, #260	@ 0x104
 801208e:	4630      	mov	r0, r6
 8012090:	f000 f87c 	bl	801218c <_scanf_i>
 8012094:	e7b4      	b.n	8012000 <__ssvfiscanf_r+0x210>
 8012096:	bf00      	nop
 8012098:	08011d41 	.word	0x08011d41
 801209c:	08011db7 	.word	0x08011db7
 80120a0:	08013131 	.word	0x08013131
 80120a4:	08013237 	.word	0x08013237
 80120a8:	4b0a      	ldr	r3, [pc, #40]	@ (80120d4 <__ssvfiscanf_r+0x2e4>)
 80120aa:	2b00      	cmp	r3, #0
 80120ac:	f43f aec5 	beq.w	8011e3a <__ssvfiscanf_r+0x4a>
 80120b0:	466b      	mov	r3, sp
 80120b2:	4622      	mov	r2, r4
 80120b4:	a941      	add	r1, sp, #260	@ 0x104
 80120b6:	4630      	mov	r0, r6
 80120b8:	f7fd fa12 	bl	800f4e0 <_scanf_float>
 80120bc:	e7a0      	b.n	8012000 <__ssvfiscanf_r+0x210>
 80120be:	89a3      	ldrh	r3, [r4, #12]
 80120c0:	065b      	lsls	r3, r3, #25
 80120c2:	f53f af71 	bmi.w	8011fa8 <__ssvfiscanf_r+0x1b8>
 80120c6:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 80120ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80120ce:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80120d0:	e7f9      	b.n	80120c6 <__ssvfiscanf_r+0x2d6>
 80120d2:	bf00      	nop
 80120d4:	0800f4e1 	.word	0x0800f4e1

080120d8 <_scanf_chars>:
 80120d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80120dc:	4615      	mov	r5, r2
 80120de:	688a      	ldr	r2, [r1, #8]
 80120e0:	4680      	mov	r8, r0
 80120e2:	460c      	mov	r4, r1
 80120e4:	b932      	cbnz	r2, 80120f4 <_scanf_chars+0x1c>
 80120e6:	698a      	ldr	r2, [r1, #24]
 80120e8:	2a00      	cmp	r2, #0
 80120ea:	bf14      	ite	ne
 80120ec:	f04f 32ff 	movne.w	r2, #4294967295
 80120f0:	2201      	moveq	r2, #1
 80120f2:	608a      	str	r2, [r1, #8]
 80120f4:	6822      	ldr	r2, [r4, #0]
 80120f6:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8012188 <_scanf_chars+0xb0>
 80120fa:	06d1      	lsls	r1, r2, #27
 80120fc:	bf5f      	itttt	pl
 80120fe:	681a      	ldrpl	r2, [r3, #0]
 8012100:	1d11      	addpl	r1, r2, #4
 8012102:	6019      	strpl	r1, [r3, #0]
 8012104:	6816      	ldrpl	r6, [r2, #0]
 8012106:	2700      	movs	r7, #0
 8012108:	69a0      	ldr	r0, [r4, #24]
 801210a:	b188      	cbz	r0, 8012130 <_scanf_chars+0x58>
 801210c:	2801      	cmp	r0, #1
 801210e:	d107      	bne.n	8012120 <_scanf_chars+0x48>
 8012110:	682b      	ldr	r3, [r5, #0]
 8012112:	781a      	ldrb	r2, [r3, #0]
 8012114:	6963      	ldr	r3, [r4, #20]
 8012116:	5c9b      	ldrb	r3, [r3, r2]
 8012118:	b953      	cbnz	r3, 8012130 <_scanf_chars+0x58>
 801211a:	2f00      	cmp	r7, #0
 801211c:	d031      	beq.n	8012182 <_scanf_chars+0xaa>
 801211e:	e022      	b.n	8012166 <_scanf_chars+0x8e>
 8012120:	2802      	cmp	r0, #2
 8012122:	d120      	bne.n	8012166 <_scanf_chars+0x8e>
 8012124:	682b      	ldr	r3, [r5, #0]
 8012126:	781b      	ldrb	r3, [r3, #0]
 8012128:	f819 3003 	ldrb.w	r3, [r9, r3]
 801212c:	071b      	lsls	r3, r3, #28
 801212e:	d41a      	bmi.n	8012166 <_scanf_chars+0x8e>
 8012130:	6823      	ldr	r3, [r4, #0]
 8012132:	06da      	lsls	r2, r3, #27
 8012134:	bf5e      	ittt	pl
 8012136:	682b      	ldrpl	r3, [r5, #0]
 8012138:	781b      	ldrbpl	r3, [r3, #0]
 801213a:	f806 3b01 	strbpl.w	r3, [r6], #1
 801213e:	682a      	ldr	r2, [r5, #0]
 8012140:	686b      	ldr	r3, [r5, #4]
 8012142:	3201      	adds	r2, #1
 8012144:	602a      	str	r2, [r5, #0]
 8012146:	68a2      	ldr	r2, [r4, #8]
 8012148:	3b01      	subs	r3, #1
 801214a:	3a01      	subs	r2, #1
 801214c:	606b      	str	r3, [r5, #4]
 801214e:	3701      	adds	r7, #1
 8012150:	60a2      	str	r2, [r4, #8]
 8012152:	b142      	cbz	r2, 8012166 <_scanf_chars+0x8e>
 8012154:	2b00      	cmp	r3, #0
 8012156:	dcd7      	bgt.n	8012108 <_scanf_chars+0x30>
 8012158:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 801215c:	4629      	mov	r1, r5
 801215e:	4640      	mov	r0, r8
 8012160:	4798      	blx	r3
 8012162:	2800      	cmp	r0, #0
 8012164:	d0d0      	beq.n	8012108 <_scanf_chars+0x30>
 8012166:	6823      	ldr	r3, [r4, #0]
 8012168:	f013 0310 	ands.w	r3, r3, #16
 801216c:	d105      	bne.n	801217a <_scanf_chars+0xa2>
 801216e:	68e2      	ldr	r2, [r4, #12]
 8012170:	3201      	adds	r2, #1
 8012172:	60e2      	str	r2, [r4, #12]
 8012174:	69a2      	ldr	r2, [r4, #24]
 8012176:	b102      	cbz	r2, 801217a <_scanf_chars+0xa2>
 8012178:	7033      	strb	r3, [r6, #0]
 801217a:	6923      	ldr	r3, [r4, #16]
 801217c:	443b      	add	r3, r7
 801217e:	6123      	str	r3, [r4, #16]
 8012180:	2000      	movs	r0, #0
 8012182:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012186:	bf00      	nop
 8012188:	08013131 	.word	0x08013131

0801218c <_scanf_i>:
 801218c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012190:	4698      	mov	r8, r3
 8012192:	4b74      	ldr	r3, [pc, #464]	@ (8012364 <_scanf_i+0x1d8>)
 8012194:	460c      	mov	r4, r1
 8012196:	4682      	mov	sl, r0
 8012198:	4616      	mov	r6, r2
 801219a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801219e:	b087      	sub	sp, #28
 80121a0:	ab03      	add	r3, sp, #12
 80121a2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80121a6:	4b70      	ldr	r3, [pc, #448]	@ (8012368 <_scanf_i+0x1dc>)
 80121a8:	69a1      	ldr	r1, [r4, #24]
 80121aa:	4a70      	ldr	r2, [pc, #448]	@ (801236c <_scanf_i+0x1e0>)
 80121ac:	2903      	cmp	r1, #3
 80121ae:	bf08      	it	eq
 80121b0:	461a      	moveq	r2, r3
 80121b2:	68a3      	ldr	r3, [r4, #8]
 80121b4:	9201      	str	r2, [sp, #4]
 80121b6:	1e5a      	subs	r2, r3, #1
 80121b8:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80121bc:	bf88      	it	hi
 80121be:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80121c2:	4627      	mov	r7, r4
 80121c4:	bf82      	ittt	hi
 80121c6:	eb03 0905 	addhi.w	r9, r3, r5
 80121ca:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80121ce:	60a3      	strhi	r3, [r4, #8]
 80121d0:	f857 3b1c 	ldr.w	r3, [r7], #28
 80121d4:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 80121d8:	bf98      	it	ls
 80121da:	f04f 0900 	movls.w	r9, #0
 80121de:	6023      	str	r3, [r4, #0]
 80121e0:	463d      	mov	r5, r7
 80121e2:	f04f 0b00 	mov.w	fp, #0
 80121e6:	6831      	ldr	r1, [r6, #0]
 80121e8:	ab03      	add	r3, sp, #12
 80121ea:	7809      	ldrb	r1, [r1, #0]
 80121ec:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80121f0:	2202      	movs	r2, #2
 80121f2:	f7ee f88d 	bl	8000310 <memchr>
 80121f6:	b328      	cbz	r0, 8012244 <_scanf_i+0xb8>
 80121f8:	f1bb 0f01 	cmp.w	fp, #1
 80121fc:	d159      	bne.n	80122b2 <_scanf_i+0x126>
 80121fe:	6862      	ldr	r2, [r4, #4]
 8012200:	b92a      	cbnz	r2, 801220e <_scanf_i+0x82>
 8012202:	6822      	ldr	r2, [r4, #0]
 8012204:	2108      	movs	r1, #8
 8012206:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 801220a:	6061      	str	r1, [r4, #4]
 801220c:	6022      	str	r2, [r4, #0]
 801220e:	6822      	ldr	r2, [r4, #0]
 8012210:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8012214:	6022      	str	r2, [r4, #0]
 8012216:	68a2      	ldr	r2, [r4, #8]
 8012218:	1e51      	subs	r1, r2, #1
 801221a:	60a1      	str	r1, [r4, #8]
 801221c:	b192      	cbz	r2, 8012244 <_scanf_i+0xb8>
 801221e:	6832      	ldr	r2, [r6, #0]
 8012220:	1c51      	adds	r1, r2, #1
 8012222:	6031      	str	r1, [r6, #0]
 8012224:	7812      	ldrb	r2, [r2, #0]
 8012226:	f805 2b01 	strb.w	r2, [r5], #1
 801222a:	6872      	ldr	r2, [r6, #4]
 801222c:	3a01      	subs	r2, #1
 801222e:	2a00      	cmp	r2, #0
 8012230:	6072      	str	r2, [r6, #4]
 8012232:	dc07      	bgt.n	8012244 <_scanf_i+0xb8>
 8012234:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8012238:	4631      	mov	r1, r6
 801223a:	4650      	mov	r0, sl
 801223c:	4790      	blx	r2
 801223e:	2800      	cmp	r0, #0
 8012240:	f040 8085 	bne.w	801234e <_scanf_i+0x1c2>
 8012244:	f10b 0b01 	add.w	fp, fp, #1
 8012248:	f1bb 0f03 	cmp.w	fp, #3
 801224c:	d1cb      	bne.n	80121e6 <_scanf_i+0x5a>
 801224e:	6863      	ldr	r3, [r4, #4]
 8012250:	b90b      	cbnz	r3, 8012256 <_scanf_i+0xca>
 8012252:	230a      	movs	r3, #10
 8012254:	6063      	str	r3, [r4, #4]
 8012256:	6863      	ldr	r3, [r4, #4]
 8012258:	4945      	ldr	r1, [pc, #276]	@ (8012370 <_scanf_i+0x1e4>)
 801225a:	6960      	ldr	r0, [r4, #20]
 801225c:	1ac9      	subs	r1, r1, r3
 801225e:	f000 f935 	bl	80124cc <__sccl>
 8012262:	f04f 0b00 	mov.w	fp, #0
 8012266:	68a3      	ldr	r3, [r4, #8]
 8012268:	6822      	ldr	r2, [r4, #0]
 801226a:	2b00      	cmp	r3, #0
 801226c:	d03d      	beq.n	80122ea <_scanf_i+0x15e>
 801226e:	6831      	ldr	r1, [r6, #0]
 8012270:	6960      	ldr	r0, [r4, #20]
 8012272:	f891 c000 	ldrb.w	ip, [r1]
 8012276:	f810 000c 	ldrb.w	r0, [r0, ip]
 801227a:	2800      	cmp	r0, #0
 801227c:	d035      	beq.n	80122ea <_scanf_i+0x15e>
 801227e:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8012282:	d124      	bne.n	80122ce <_scanf_i+0x142>
 8012284:	0510      	lsls	r0, r2, #20
 8012286:	d522      	bpl.n	80122ce <_scanf_i+0x142>
 8012288:	f10b 0b01 	add.w	fp, fp, #1
 801228c:	f1b9 0f00 	cmp.w	r9, #0
 8012290:	d003      	beq.n	801229a <_scanf_i+0x10e>
 8012292:	3301      	adds	r3, #1
 8012294:	f109 39ff 	add.w	r9, r9, #4294967295
 8012298:	60a3      	str	r3, [r4, #8]
 801229a:	6873      	ldr	r3, [r6, #4]
 801229c:	3b01      	subs	r3, #1
 801229e:	2b00      	cmp	r3, #0
 80122a0:	6073      	str	r3, [r6, #4]
 80122a2:	dd1b      	ble.n	80122dc <_scanf_i+0x150>
 80122a4:	6833      	ldr	r3, [r6, #0]
 80122a6:	3301      	adds	r3, #1
 80122a8:	6033      	str	r3, [r6, #0]
 80122aa:	68a3      	ldr	r3, [r4, #8]
 80122ac:	3b01      	subs	r3, #1
 80122ae:	60a3      	str	r3, [r4, #8]
 80122b0:	e7d9      	b.n	8012266 <_scanf_i+0xda>
 80122b2:	f1bb 0f02 	cmp.w	fp, #2
 80122b6:	d1ae      	bne.n	8012216 <_scanf_i+0x8a>
 80122b8:	6822      	ldr	r2, [r4, #0]
 80122ba:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 80122be:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 80122c2:	d1bf      	bne.n	8012244 <_scanf_i+0xb8>
 80122c4:	2110      	movs	r1, #16
 80122c6:	6061      	str	r1, [r4, #4]
 80122c8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80122cc:	e7a2      	b.n	8012214 <_scanf_i+0x88>
 80122ce:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 80122d2:	6022      	str	r2, [r4, #0]
 80122d4:	780b      	ldrb	r3, [r1, #0]
 80122d6:	f805 3b01 	strb.w	r3, [r5], #1
 80122da:	e7de      	b.n	801229a <_scanf_i+0x10e>
 80122dc:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80122e0:	4631      	mov	r1, r6
 80122e2:	4650      	mov	r0, sl
 80122e4:	4798      	blx	r3
 80122e6:	2800      	cmp	r0, #0
 80122e8:	d0df      	beq.n	80122aa <_scanf_i+0x11e>
 80122ea:	6823      	ldr	r3, [r4, #0]
 80122ec:	05d9      	lsls	r1, r3, #23
 80122ee:	d50d      	bpl.n	801230c <_scanf_i+0x180>
 80122f0:	42bd      	cmp	r5, r7
 80122f2:	d909      	bls.n	8012308 <_scanf_i+0x17c>
 80122f4:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80122f8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80122fc:	4632      	mov	r2, r6
 80122fe:	4650      	mov	r0, sl
 8012300:	4798      	blx	r3
 8012302:	f105 39ff 	add.w	r9, r5, #4294967295
 8012306:	464d      	mov	r5, r9
 8012308:	42bd      	cmp	r5, r7
 801230a:	d028      	beq.n	801235e <_scanf_i+0x1d2>
 801230c:	6822      	ldr	r2, [r4, #0]
 801230e:	f012 0210 	ands.w	r2, r2, #16
 8012312:	d113      	bne.n	801233c <_scanf_i+0x1b0>
 8012314:	702a      	strb	r2, [r5, #0]
 8012316:	6863      	ldr	r3, [r4, #4]
 8012318:	9e01      	ldr	r6, [sp, #4]
 801231a:	4639      	mov	r1, r7
 801231c:	4650      	mov	r0, sl
 801231e:	47b0      	blx	r6
 8012320:	f8d8 3000 	ldr.w	r3, [r8]
 8012324:	6821      	ldr	r1, [r4, #0]
 8012326:	1d1a      	adds	r2, r3, #4
 8012328:	f8c8 2000 	str.w	r2, [r8]
 801232c:	f011 0f20 	tst.w	r1, #32
 8012330:	681b      	ldr	r3, [r3, #0]
 8012332:	d00f      	beq.n	8012354 <_scanf_i+0x1c8>
 8012334:	6018      	str	r0, [r3, #0]
 8012336:	68e3      	ldr	r3, [r4, #12]
 8012338:	3301      	adds	r3, #1
 801233a:	60e3      	str	r3, [r4, #12]
 801233c:	6923      	ldr	r3, [r4, #16]
 801233e:	1bed      	subs	r5, r5, r7
 8012340:	445d      	add	r5, fp
 8012342:	442b      	add	r3, r5
 8012344:	6123      	str	r3, [r4, #16]
 8012346:	2000      	movs	r0, #0
 8012348:	b007      	add	sp, #28
 801234a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801234e:	f04f 0b00 	mov.w	fp, #0
 8012352:	e7ca      	b.n	80122ea <_scanf_i+0x15e>
 8012354:	07ca      	lsls	r2, r1, #31
 8012356:	bf4c      	ite	mi
 8012358:	8018      	strhmi	r0, [r3, #0]
 801235a:	6018      	strpl	r0, [r3, #0]
 801235c:	e7eb      	b.n	8012336 <_scanf_i+0x1aa>
 801235e:	2001      	movs	r0, #1
 8012360:	e7f2      	b.n	8012348 <_scanf_i+0x1bc>
 8012362:	bf00      	nop
 8012364:	08012dfc 	.word	0x08012dfc
 8012368:	08011a75 	.word	0x08011a75
 801236c:	08012785 	.word	0x08012785
 8012370:	08013252 	.word	0x08013252

08012374 <__sflush_r>:
 8012374:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8012378:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801237c:	0716      	lsls	r6, r2, #28
 801237e:	4605      	mov	r5, r0
 8012380:	460c      	mov	r4, r1
 8012382:	d454      	bmi.n	801242e <__sflush_r+0xba>
 8012384:	684b      	ldr	r3, [r1, #4]
 8012386:	2b00      	cmp	r3, #0
 8012388:	dc02      	bgt.n	8012390 <__sflush_r+0x1c>
 801238a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801238c:	2b00      	cmp	r3, #0
 801238e:	dd48      	ble.n	8012422 <__sflush_r+0xae>
 8012390:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012392:	2e00      	cmp	r6, #0
 8012394:	d045      	beq.n	8012422 <__sflush_r+0xae>
 8012396:	2300      	movs	r3, #0
 8012398:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801239c:	682f      	ldr	r7, [r5, #0]
 801239e:	6a21      	ldr	r1, [r4, #32]
 80123a0:	602b      	str	r3, [r5, #0]
 80123a2:	d030      	beq.n	8012406 <__sflush_r+0x92>
 80123a4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80123a6:	89a3      	ldrh	r3, [r4, #12]
 80123a8:	0759      	lsls	r1, r3, #29
 80123aa:	d505      	bpl.n	80123b8 <__sflush_r+0x44>
 80123ac:	6863      	ldr	r3, [r4, #4]
 80123ae:	1ad2      	subs	r2, r2, r3
 80123b0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80123b2:	b10b      	cbz	r3, 80123b8 <__sflush_r+0x44>
 80123b4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80123b6:	1ad2      	subs	r2, r2, r3
 80123b8:	2300      	movs	r3, #0
 80123ba:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80123bc:	6a21      	ldr	r1, [r4, #32]
 80123be:	4628      	mov	r0, r5
 80123c0:	47b0      	blx	r6
 80123c2:	1c43      	adds	r3, r0, #1
 80123c4:	89a3      	ldrh	r3, [r4, #12]
 80123c6:	d106      	bne.n	80123d6 <__sflush_r+0x62>
 80123c8:	6829      	ldr	r1, [r5, #0]
 80123ca:	291d      	cmp	r1, #29
 80123cc:	d82b      	bhi.n	8012426 <__sflush_r+0xb2>
 80123ce:	4a2a      	ldr	r2, [pc, #168]	@ (8012478 <__sflush_r+0x104>)
 80123d0:	410a      	asrs	r2, r1
 80123d2:	07d6      	lsls	r6, r2, #31
 80123d4:	d427      	bmi.n	8012426 <__sflush_r+0xb2>
 80123d6:	2200      	movs	r2, #0
 80123d8:	6062      	str	r2, [r4, #4]
 80123da:	04d9      	lsls	r1, r3, #19
 80123dc:	6922      	ldr	r2, [r4, #16]
 80123de:	6022      	str	r2, [r4, #0]
 80123e0:	d504      	bpl.n	80123ec <__sflush_r+0x78>
 80123e2:	1c42      	adds	r2, r0, #1
 80123e4:	d101      	bne.n	80123ea <__sflush_r+0x76>
 80123e6:	682b      	ldr	r3, [r5, #0]
 80123e8:	b903      	cbnz	r3, 80123ec <__sflush_r+0x78>
 80123ea:	6560      	str	r0, [r4, #84]	@ 0x54
 80123ec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80123ee:	602f      	str	r7, [r5, #0]
 80123f0:	b1b9      	cbz	r1, 8012422 <__sflush_r+0xae>
 80123f2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80123f6:	4299      	cmp	r1, r3
 80123f8:	d002      	beq.n	8012400 <__sflush_r+0x8c>
 80123fa:	4628      	mov	r0, r5
 80123fc:	f7fe fa7a 	bl	80108f4 <_free_r>
 8012400:	2300      	movs	r3, #0
 8012402:	6363      	str	r3, [r4, #52]	@ 0x34
 8012404:	e00d      	b.n	8012422 <__sflush_r+0xae>
 8012406:	2301      	movs	r3, #1
 8012408:	4628      	mov	r0, r5
 801240a:	47b0      	blx	r6
 801240c:	4602      	mov	r2, r0
 801240e:	1c50      	adds	r0, r2, #1
 8012410:	d1c9      	bne.n	80123a6 <__sflush_r+0x32>
 8012412:	682b      	ldr	r3, [r5, #0]
 8012414:	2b00      	cmp	r3, #0
 8012416:	d0c6      	beq.n	80123a6 <__sflush_r+0x32>
 8012418:	2b1d      	cmp	r3, #29
 801241a:	d001      	beq.n	8012420 <__sflush_r+0xac>
 801241c:	2b16      	cmp	r3, #22
 801241e:	d11e      	bne.n	801245e <__sflush_r+0xea>
 8012420:	602f      	str	r7, [r5, #0]
 8012422:	2000      	movs	r0, #0
 8012424:	e022      	b.n	801246c <__sflush_r+0xf8>
 8012426:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801242a:	b21b      	sxth	r3, r3
 801242c:	e01b      	b.n	8012466 <__sflush_r+0xf2>
 801242e:	690f      	ldr	r7, [r1, #16]
 8012430:	2f00      	cmp	r7, #0
 8012432:	d0f6      	beq.n	8012422 <__sflush_r+0xae>
 8012434:	0793      	lsls	r3, r2, #30
 8012436:	680e      	ldr	r6, [r1, #0]
 8012438:	bf08      	it	eq
 801243a:	694b      	ldreq	r3, [r1, #20]
 801243c:	600f      	str	r7, [r1, #0]
 801243e:	bf18      	it	ne
 8012440:	2300      	movne	r3, #0
 8012442:	eba6 0807 	sub.w	r8, r6, r7
 8012446:	608b      	str	r3, [r1, #8]
 8012448:	f1b8 0f00 	cmp.w	r8, #0
 801244c:	dde9      	ble.n	8012422 <__sflush_r+0xae>
 801244e:	6a21      	ldr	r1, [r4, #32]
 8012450:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8012452:	4643      	mov	r3, r8
 8012454:	463a      	mov	r2, r7
 8012456:	4628      	mov	r0, r5
 8012458:	47b0      	blx	r6
 801245a:	2800      	cmp	r0, #0
 801245c:	dc08      	bgt.n	8012470 <__sflush_r+0xfc>
 801245e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012462:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012466:	81a3      	strh	r3, [r4, #12]
 8012468:	f04f 30ff 	mov.w	r0, #4294967295
 801246c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012470:	4407      	add	r7, r0
 8012472:	eba8 0800 	sub.w	r8, r8, r0
 8012476:	e7e7      	b.n	8012448 <__sflush_r+0xd4>
 8012478:	dfbffffe 	.word	0xdfbffffe

0801247c <_fflush_r>:
 801247c:	b538      	push	{r3, r4, r5, lr}
 801247e:	690b      	ldr	r3, [r1, #16]
 8012480:	4605      	mov	r5, r0
 8012482:	460c      	mov	r4, r1
 8012484:	b913      	cbnz	r3, 801248c <_fflush_r+0x10>
 8012486:	2500      	movs	r5, #0
 8012488:	4628      	mov	r0, r5
 801248a:	bd38      	pop	{r3, r4, r5, pc}
 801248c:	b118      	cbz	r0, 8012496 <_fflush_r+0x1a>
 801248e:	6a03      	ldr	r3, [r0, #32]
 8012490:	b90b      	cbnz	r3, 8012496 <_fflush_r+0x1a>
 8012492:	f7fd fabd 	bl	800fa10 <__sinit>
 8012496:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801249a:	2b00      	cmp	r3, #0
 801249c:	d0f3      	beq.n	8012486 <_fflush_r+0xa>
 801249e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80124a0:	07d0      	lsls	r0, r2, #31
 80124a2:	d404      	bmi.n	80124ae <_fflush_r+0x32>
 80124a4:	0599      	lsls	r1, r3, #22
 80124a6:	d402      	bmi.n	80124ae <_fflush_r+0x32>
 80124a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80124aa:	f7fd fc22 	bl	800fcf2 <__retarget_lock_acquire_recursive>
 80124ae:	4628      	mov	r0, r5
 80124b0:	4621      	mov	r1, r4
 80124b2:	f7ff ff5f 	bl	8012374 <__sflush_r>
 80124b6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80124b8:	07da      	lsls	r2, r3, #31
 80124ba:	4605      	mov	r5, r0
 80124bc:	d4e4      	bmi.n	8012488 <_fflush_r+0xc>
 80124be:	89a3      	ldrh	r3, [r4, #12]
 80124c0:	059b      	lsls	r3, r3, #22
 80124c2:	d4e1      	bmi.n	8012488 <_fflush_r+0xc>
 80124c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80124c6:	f7fd fc15 	bl	800fcf4 <__retarget_lock_release_recursive>
 80124ca:	e7dd      	b.n	8012488 <_fflush_r+0xc>

080124cc <__sccl>:
 80124cc:	b570      	push	{r4, r5, r6, lr}
 80124ce:	780b      	ldrb	r3, [r1, #0]
 80124d0:	4604      	mov	r4, r0
 80124d2:	2b5e      	cmp	r3, #94	@ 0x5e
 80124d4:	bf0b      	itete	eq
 80124d6:	784b      	ldrbeq	r3, [r1, #1]
 80124d8:	1c4a      	addne	r2, r1, #1
 80124da:	1c8a      	addeq	r2, r1, #2
 80124dc:	2100      	movne	r1, #0
 80124de:	bf08      	it	eq
 80124e0:	2101      	moveq	r1, #1
 80124e2:	3801      	subs	r0, #1
 80124e4:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 80124e8:	f800 1f01 	strb.w	r1, [r0, #1]!
 80124ec:	42a8      	cmp	r0, r5
 80124ee:	d1fb      	bne.n	80124e8 <__sccl+0x1c>
 80124f0:	b90b      	cbnz	r3, 80124f6 <__sccl+0x2a>
 80124f2:	1e50      	subs	r0, r2, #1
 80124f4:	bd70      	pop	{r4, r5, r6, pc}
 80124f6:	f081 0101 	eor.w	r1, r1, #1
 80124fa:	54e1      	strb	r1, [r4, r3]
 80124fc:	4610      	mov	r0, r2
 80124fe:	4602      	mov	r2, r0
 8012500:	f812 5b01 	ldrb.w	r5, [r2], #1
 8012504:	2d2d      	cmp	r5, #45	@ 0x2d
 8012506:	d005      	beq.n	8012514 <__sccl+0x48>
 8012508:	2d5d      	cmp	r5, #93	@ 0x5d
 801250a:	d016      	beq.n	801253a <__sccl+0x6e>
 801250c:	2d00      	cmp	r5, #0
 801250e:	d0f1      	beq.n	80124f4 <__sccl+0x28>
 8012510:	462b      	mov	r3, r5
 8012512:	e7f2      	b.n	80124fa <__sccl+0x2e>
 8012514:	7846      	ldrb	r6, [r0, #1]
 8012516:	2e5d      	cmp	r6, #93	@ 0x5d
 8012518:	d0fa      	beq.n	8012510 <__sccl+0x44>
 801251a:	42b3      	cmp	r3, r6
 801251c:	dcf8      	bgt.n	8012510 <__sccl+0x44>
 801251e:	3002      	adds	r0, #2
 8012520:	461a      	mov	r2, r3
 8012522:	3201      	adds	r2, #1
 8012524:	4296      	cmp	r6, r2
 8012526:	54a1      	strb	r1, [r4, r2]
 8012528:	dcfb      	bgt.n	8012522 <__sccl+0x56>
 801252a:	1af2      	subs	r2, r6, r3
 801252c:	3a01      	subs	r2, #1
 801252e:	1c5d      	adds	r5, r3, #1
 8012530:	42b3      	cmp	r3, r6
 8012532:	bfa8      	it	ge
 8012534:	2200      	movge	r2, #0
 8012536:	18ab      	adds	r3, r5, r2
 8012538:	e7e1      	b.n	80124fe <__sccl+0x32>
 801253a:	4610      	mov	r0, r2
 801253c:	e7da      	b.n	80124f4 <__sccl+0x28>

0801253e <__submore>:
 801253e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012542:	460c      	mov	r4, r1
 8012544:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8012546:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801254a:	4299      	cmp	r1, r3
 801254c:	d11d      	bne.n	801258a <__submore+0x4c>
 801254e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8012552:	f7fb fd49 	bl	800dfe8 <_malloc_r>
 8012556:	b918      	cbnz	r0, 8012560 <__submore+0x22>
 8012558:	f04f 30ff 	mov.w	r0, #4294967295
 801255c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012560:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8012564:	63a3      	str	r3, [r4, #56]	@ 0x38
 8012566:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 801256a:	6360      	str	r0, [r4, #52]	@ 0x34
 801256c:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8012570:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8012574:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8012578:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 801257c:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8012580:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8012584:	6020      	str	r0, [r4, #0]
 8012586:	2000      	movs	r0, #0
 8012588:	e7e8      	b.n	801255c <__submore+0x1e>
 801258a:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 801258c:	0077      	lsls	r7, r6, #1
 801258e:	463a      	mov	r2, r7
 8012590:	f000 f85c 	bl	801264c <_realloc_r>
 8012594:	4605      	mov	r5, r0
 8012596:	2800      	cmp	r0, #0
 8012598:	d0de      	beq.n	8012558 <__submore+0x1a>
 801259a:	eb00 0806 	add.w	r8, r0, r6
 801259e:	4601      	mov	r1, r0
 80125a0:	4632      	mov	r2, r6
 80125a2:	4640      	mov	r0, r8
 80125a4:	f7fd fba7 	bl	800fcf6 <memcpy>
 80125a8:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 80125ac:	f8c4 8000 	str.w	r8, [r4]
 80125b0:	e7e9      	b.n	8012586 <__submore+0x48>

080125b2 <memmove>:
 80125b2:	4288      	cmp	r0, r1
 80125b4:	b510      	push	{r4, lr}
 80125b6:	eb01 0402 	add.w	r4, r1, r2
 80125ba:	d902      	bls.n	80125c2 <memmove+0x10>
 80125bc:	4284      	cmp	r4, r0
 80125be:	4623      	mov	r3, r4
 80125c0:	d807      	bhi.n	80125d2 <memmove+0x20>
 80125c2:	1e43      	subs	r3, r0, #1
 80125c4:	42a1      	cmp	r1, r4
 80125c6:	d008      	beq.n	80125da <memmove+0x28>
 80125c8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80125cc:	f803 2f01 	strb.w	r2, [r3, #1]!
 80125d0:	e7f8      	b.n	80125c4 <memmove+0x12>
 80125d2:	4402      	add	r2, r0
 80125d4:	4601      	mov	r1, r0
 80125d6:	428a      	cmp	r2, r1
 80125d8:	d100      	bne.n	80125dc <memmove+0x2a>
 80125da:	bd10      	pop	{r4, pc}
 80125dc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80125e0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80125e4:	e7f7      	b.n	80125d6 <memmove+0x24>
	...

080125e8 <__assert_func>:
 80125e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80125ea:	4614      	mov	r4, r2
 80125ec:	461a      	mov	r2, r3
 80125ee:	4b09      	ldr	r3, [pc, #36]	@ (8012614 <__assert_func+0x2c>)
 80125f0:	681b      	ldr	r3, [r3, #0]
 80125f2:	4605      	mov	r5, r0
 80125f4:	68d8      	ldr	r0, [r3, #12]
 80125f6:	b954      	cbnz	r4, 801260e <__assert_func+0x26>
 80125f8:	4b07      	ldr	r3, [pc, #28]	@ (8012618 <__assert_func+0x30>)
 80125fa:	461c      	mov	r4, r3
 80125fc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012600:	9100      	str	r1, [sp, #0]
 8012602:	462b      	mov	r3, r5
 8012604:	4905      	ldr	r1, [pc, #20]	@ (801261c <__assert_func+0x34>)
 8012606:	f000 f8bf 	bl	8012788 <fiprintf>
 801260a:	f000 f8cf 	bl	80127ac <abort>
 801260e:	4b04      	ldr	r3, [pc, #16]	@ (8012620 <__assert_func+0x38>)
 8012610:	e7f4      	b.n	80125fc <__assert_func+0x14>
 8012612:	bf00      	nop
 8012614:	240001c4 	.word	0x240001c4
 8012618:	08013298 	.word	0x08013298
 801261c:	0801326a 	.word	0x0801326a
 8012620:	0801325d 	.word	0x0801325d

08012624 <_calloc_r>:
 8012624:	b570      	push	{r4, r5, r6, lr}
 8012626:	fba1 5402 	umull	r5, r4, r1, r2
 801262a:	b93c      	cbnz	r4, 801263c <_calloc_r+0x18>
 801262c:	4629      	mov	r1, r5
 801262e:	f7fb fcdb 	bl	800dfe8 <_malloc_r>
 8012632:	4606      	mov	r6, r0
 8012634:	b928      	cbnz	r0, 8012642 <_calloc_r+0x1e>
 8012636:	2600      	movs	r6, #0
 8012638:	4630      	mov	r0, r6
 801263a:	bd70      	pop	{r4, r5, r6, pc}
 801263c:	220c      	movs	r2, #12
 801263e:	6002      	str	r2, [r0, #0]
 8012640:	e7f9      	b.n	8012636 <_calloc_r+0x12>
 8012642:	462a      	mov	r2, r5
 8012644:	4621      	mov	r1, r4
 8012646:	f7fd faa8 	bl	800fb9a <memset>
 801264a:	e7f5      	b.n	8012638 <_calloc_r+0x14>

0801264c <_realloc_r>:
 801264c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012650:	4680      	mov	r8, r0
 8012652:	4615      	mov	r5, r2
 8012654:	460c      	mov	r4, r1
 8012656:	b921      	cbnz	r1, 8012662 <_realloc_r+0x16>
 8012658:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801265c:	4611      	mov	r1, r2
 801265e:	f7fb bcc3 	b.w	800dfe8 <_malloc_r>
 8012662:	b92a      	cbnz	r2, 8012670 <_realloc_r+0x24>
 8012664:	f7fe f946 	bl	80108f4 <_free_r>
 8012668:	2400      	movs	r4, #0
 801266a:	4620      	mov	r0, r4
 801266c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012670:	f000 f8a3 	bl	80127ba <_malloc_usable_size_r>
 8012674:	4285      	cmp	r5, r0
 8012676:	4606      	mov	r6, r0
 8012678:	d802      	bhi.n	8012680 <_realloc_r+0x34>
 801267a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801267e:	d8f4      	bhi.n	801266a <_realloc_r+0x1e>
 8012680:	4629      	mov	r1, r5
 8012682:	4640      	mov	r0, r8
 8012684:	f7fb fcb0 	bl	800dfe8 <_malloc_r>
 8012688:	4607      	mov	r7, r0
 801268a:	2800      	cmp	r0, #0
 801268c:	d0ec      	beq.n	8012668 <_realloc_r+0x1c>
 801268e:	42b5      	cmp	r5, r6
 8012690:	462a      	mov	r2, r5
 8012692:	4621      	mov	r1, r4
 8012694:	bf28      	it	cs
 8012696:	4632      	movcs	r2, r6
 8012698:	f7fd fb2d 	bl	800fcf6 <memcpy>
 801269c:	4621      	mov	r1, r4
 801269e:	4640      	mov	r0, r8
 80126a0:	f7fe f928 	bl	80108f4 <_free_r>
 80126a4:	463c      	mov	r4, r7
 80126a6:	e7e0      	b.n	801266a <_realloc_r+0x1e>

080126a8 <_strtoul_l.constprop.0>:
 80126a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80126ac:	4e34      	ldr	r6, [pc, #208]	@ (8012780 <_strtoul_l.constprop.0+0xd8>)
 80126ae:	4686      	mov	lr, r0
 80126b0:	460d      	mov	r5, r1
 80126b2:	4628      	mov	r0, r5
 80126b4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80126b8:	5d37      	ldrb	r7, [r6, r4]
 80126ba:	f017 0708 	ands.w	r7, r7, #8
 80126be:	d1f8      	bne.n	80126b2 <_strtoul_l.constprop.0+0xa>
 80126c0:	2c2d      	cmp	r4, #45	@ 0x2d
 80126c2:	d12f      	bne.n	8012724 <_strtoul_l.constprop.0+0x7c>
 80126c4:	782c      	ldrb	r4, [r5, #0]
 80126c6:	2701      	movs	r7, #1
 80126c8:	1c85      	adds	r5, r0, #2
 80126ca:	f033 0010 	bics.w	r0, r3, #16
 80126ce:	d109      	bne.n	80126e4 <_strtoul_l.constprop.0+0x3c>
 80126d0:	2c30      	cmp	r4, #48	@ 0x30
 80126d2:	d12c      	bne.n	801272e <_strtoul_l.constprop.0+0x86>
 80126d4:	7828      	ldrb	r0, [r5, #0]
 80126d6:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 80126da:	2858      	cmp	r0, #88	@ 0x58
 80126dc:	d127      	bne.n	801272e <_strtoul_l.constprop.0+0x86>
 80126de:	786c      	ldrb	r4, [r5, #1]
 80126e0:	2310      	movs	r3, #16
 80126e2:	3502      	adds	r5, #2
 80126e4:	f04f 38ff 	mov.w	r8, #4294967295
 80126e8:	2600      	movs	r6, #0
 80126ea:	fbb8 f8f3 	udiv	r8, r8, r3
 80126ee:	fb03 f908 	mul.w	r9, r3, r8
 80126f2:	ea6f 0909 	mvn.w	r9, r9
 80126f6:	4630      	mov	r0, r6
 80126f8:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 80126fc:	f1bc 0f09 	cmp.w	ip, #9
 8012700:	d81c      	bhi.n	801273c <_strtoul_l.constprop.0+0x94>
 8012702:	4664      	mov	r4, ip
 8012704:	42a3      	cmp	r3, r4
 8012706:	dd2a      	ble.n	801275e <_strtoul_l.constprop.0+0xb6>
 8012708:	f1b6 3fff 	cmp.w	r6, #4294967295
 801270c:	d007      	beq.n	801271e <_strtoul_l.constprop.0+0x76>
 801270e:	4580      	cmp	r8, r0
 8012710:	d322      	bcc.n	8012758 <_strtoul_l.constprop.0+0xb0>
 8012712:	d101      	bne.n	8012718 <_strtoul_l.constprop.0+0x70>
 8012714:	45a1      	cmp	r9, r4
 8012716:	db1f      	blt.n	8012758 <_strtoul_l.constprop.0+0xb0>
 8012718:	fb00 4003 	mla	r0, r0, r3, r4
 801271c:	2601      	movs	r6, #1
 801271e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012722:	e7e9      	b.n	80126f8 <_strtoul_l.constprop.0+0x50>
 8012724:	2c2b      	cmp	r4, #43	@ 0x2b
 8012726:	bf04      	itt	eq
 8012728:	782c      	ldrbeq	r4, [r5, #0]
 801272a:	1c85      	addeq	r5, r0, #2
 801272c:	e7cd      	b.n	80126ca <_strtoul_l.constprop.0+0x22>
 801272e:	2b00      	cmp	r3, #0
 8012730:	d1d8      	bne.n	80126e4 <_strtoul_l.constprop.0+0x3c>
 8012732:	2c30      	cmp	r4, #48	@ 0x30
 8012734:	bf0c      	ite	eq
 8012736:	2308      	moveq	r3, #8
 8012738:	230a      	movne	r3, #10
 801273a:	e7d3      	b.n	80126e4 <_strtoul_l.constprop.0+0x3c>
 801273c:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8012740:	f1bc 0f19 	cmp.w	ip, #25
 8012744:	d801      	bhi.n	801274a <_strtoul_l.constprop.0+0xa2>
 8012746:	3c37      	subs	r4, #55	@ 0x37
 8012748:	e7dc      	b.n	8012704 <_strtoul_l.constprop.0+0x5c>
 801274a:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 801274e:	f1bc 0f19 	cmp.w	ip, #25
 8012752:	d804      	bhi.n	801275e <_strtoul_l.constprop.0+0xb6>
 8012754:	3c57      	subs	r4, #87	@ 0x57
 8012756:	e7d5      	b.n	8012704 <_strtoul_l.constprop.0+0x5c>
 8012758:	f04f 36ff 	mov.w	r6, #4294967295
 801275c:	e7df      	b.n	801271e <_strtoul_l.constprop.0+0x76>
 801275e:	1c73      	adds	r3, r6, #1
 8012760:	d106      	bne.n	8012770 <_strtoul_l.constprop.0+0xc8>
 8012762:	2322      	movs	r3, #34	@ 0x22
 8012764:	f8ce 3000 	str.w	r3, [lr]
 8012768:	4630      	mov	r0, r6
 801276a:	b932      	cbnz	r2, 801277a <_strtoul_l.constprop.0+0xd2>
 801276c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012770:	b107      	cbz	r7, 8012774 <_strtoul_l.constprop.0+0xcc>
 8012772:	4240      	negs	r0, r0
 8012774:	2a00      	cmp	r2, #0
 8012776:	d0f9      	beq.n	801276c <_strtoul_l.constprop.0+0xc4>
 8012778:	b106      	cbz	r6, 801277c <_strtoul_l.constprop.0+0xd4>
 801277a:	1e69      	subs	r1, r5, #1
 801277c:	6011      	str	r1, [r2, #0]
 801277e:	e7f5      	b.n	801276c <_strtoul_l.constprop.0+0xc4>
 8012780:	08013131 	.word	0x08013131

08012784 <_strtoul_r>:
 8012784:	f7ff bf90 	b.w	80126a8 <_strtoul_l.constprop.0>

08012788 <fiprintf>:
 8012788:	b40e      	push	{r1, r2, r3}
 801278a:	b503      	push	{r0, r1, lr}
 801278c:	4601      	mov	r1, r0
 801278e:	ab03      	add	r3, sp, #12
 8012790:	4805      	ldr	r0, [pc, #20]	@ (80127a8 <fiprintf+0x20>)
 8012792:	f853 2b04 	ldr.w	r2, [r3], #4
 8012796:	6800      	ldr	r0, [r0, #0]
 8012798:	9301      	str	r3, [sp, #4]
 801279a:	f000 f83f 	bl	801281c <_vfiprintf_r>
 801279e:	b002      	add	sp, #8
 80127a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80127a4:	b003      	add	sp, #12
 80127a6:	4770      	bx	lr
 80127a8:	240001c4 	.word	0x240001c4

080127ac <abort>:
 80127ac:	b508      	push	{r3, lr}
 80127ae:	2006      	movs	r0, #6
 80127b0:	f000 fa08 	bl	8012bc4 <raise>
 80127b4:	2001      	movs	r0, #1
 80127b6:	f7ef f86b 	bl	8001890 <_exit>

080127ba <_malloc_usable_size_r>:
 80127ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80127be:	1f18      	subs	r0, r3, #4
 80127c0:	2b00      	cmp	r3, #0
 80127c2:	bfbc      	itt	lt
 80127c4:	580b      	ldrlt	r3, [r1, r0]
 80127c6:	18c0      	addlt	r0, r0, r3
 80127c8:	4770      	bx	lr

080127ca <__sfputc_r>:
 80127ca:	6893      	ldr	r3, [r2, #8]
 80127cc:	3b01      	subs	r3, #1
 80127ce:	2b00      	cmp	r3, #0
 80127d0:	b410      	push	{r4}
 80127d2:	6093      	str	r3, [r2, #8]
 80127d4:	da08      	bge.n	80127e8 <__sfputc_r+0x1e>
 80127d6:	6994      	ldr	r4, [r2, #24]
 80127d8:	42a3      	cmp	r3, r4
 80127da:	db01      	blt.n	80127e0 <__sfputc_r+0x16>
 80127dc:	290a      	cmp	r1, #10
 80127de:	d103      	bne.n	80127e8 <__sfputc_r+0x1e>
 80127e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80127e4:	f000 b932 	b.w	8012a4c <__swbuf_r>
 80127e8:	6813      	ldr	r3, [r2, #0]
 80127ea:	1c58      	adds	r0, r3, #1
 80127ec:	6010      	str	r0, [r2, #0]
 80127ee:	7019      	strb	r1, [r3, #0]
 80127f0:	4608      	mov	r0, r1
 80127f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80127f6:	4770      	bx	lr

080127f8 <__sfputs_r>:
 80127f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80127fa:	4606      	mov	r6, r0
 80127fc:	460f      	mov	r7, r1
 80127fe:	4614      	mov	r4, r2
 8012800:	18d5      	adds	r5, r2, r3
 8012802:	42ac      	cmp	r4, r5
 8012804:	d101      	bne.n	801280a <__sfputs_r+0x12>
 8012806:	2000      	movs	r0, #0
 8012808:	e007      	b.n	801281a <__sfputs_r+0x22>
 801280a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801280e:	463a      	mov	r2, r7
 8012810:	4630      	mov	r0, r6
 8012812:	f7ff ffda 	bl	80127ca <__sfputc_r>
 8012816:	1c43      	adds	r3, r0, #1
 8012818:	d1f3      	bne.n	8012802 <__sfputs_r+0xa>
 801281a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801281c <_vfiprintf_r>:
 801281c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012820:	460d      	mov	r5, r1
 8012822:	b09d      	sub	sp, #116	@ 0x74
 8012824:	4614      	mov	r4, r2
 8012826:	4698      	mov	r8, r3
 8012828:	4606      	mov	r6, r0
 801282a:	b118      	cbz	r0, 8012834 <_vfiprintf_r+0x18>
 801282c:	6a03      	ldr	r3, [r0, #32]
 801282e:	b90b      	cbnz	r3, 8012834 <_vfiprintf_r+0x18>
 8012830:	f7fd f8ee 	bl	800fa10 <__sinit>
 8012834:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012836:	07d9      	lsls	r1, r3, #31
 8012838:	d405      	bmi.n	8012846 <_vfiprintf_r+0x2a>
 801283a:	89ab      	ldrh	r3, [r5, #12]
 801283c:	059a      	lsls	r2, r3, #22
 801283e:	d402      	bmi.n	8012846 <_vfiprintf_r+0x2a>
 8012840:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012842:	f7fd fa56 	bl	800fcf2 <__retarget_lock_acquire_recursive>
 8012846:	89ab      	ldrh	r3, [r5, #12]
 8012848:	071b      	lsls	r3, r3, #28
 801284a:	d501      	bpl.n	8012850 <_vfiprintf_r+0x34>
 801284c:	692b      	ldr	r3, [r5, #16]
 801284e:	b99b      	cbnz	r3, 8012878 <_vfiprintf_r+0x5c>
 8012850:	4629      	mov	r1, r5
 8012852:	4630      	mov	r0, r6
 8012854:	f000 f938 	bl	8012ac8 <__swsetup_r>
 8012858:	b170      	cbz	r0, 8012878 <_vfiprintf_r+0x5c>
 801285a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801285c:	07dc      	lsls	r4, r3, #31
 801285e:	d504      	bpl.n	801286a <_vfiprintf_r+0x4e>
 8012860:	f04f 30ff 	mov.w	r0, #4294967295
 8012864:	b01d      	add	sp, #116	@ 0x74
 8012866:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801286a:	89ab      	ldrh	r3, [r5, #12]
 801286c:	0598      	lsls	r0, r3, #22
 801286e:	d4f7      	bmi.n	8012860 <_vfiprintf_r+0x44>
 8012870:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012872:	f7fd fa3f 	bl	800fcf4 <__retarget_lock_release_recursive>
 8012876:	e7f3      	b.n	8012860 <_vfiprintf_r+0x44>
 8012878:	2300      	movs	r3, #0
 801287a:	9309      	str	r3, [sp, #36]	@ 0x24
 801287c:	2320      	movs	r3, #32
 801287e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8012882:	f8cd 800c 	str.w	r8, [sp, #12]
 8012886:	2330      	movs	r3, #48	@ 0x30
 8012888:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8012a38 <_vfiprintf_r+0x21c>
 801288c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012890:	f04f 0901 	mov.w	r9, #1
 8012894:	4623      	mov	r3, r4
 8012896:	469a      	mov	sl, r3
 8012898:	f813 2b01 	ldrb.w	r2, [r3], #1
 801289c:	b10a      	cbz	r2, 80128a2 <_vfiprintf_r+0x86>
 801289e:	2a25      	cmp	r2, #37	@ 0x25
 80128a0:	d1f9      	bne.n	8012896 <_vfiprintf_r+0x7a>
 80128a2:	ebba 0b04 	subs.w	fp, sl, r4
 80128a6:	d00b      	beq.n	80128c0 <_vfiprintf_r+0xa4>
 80128a8:	465b      	mov	r3, fp
 80128aa:	4622      	mov	r2, r4
 80128ac:	4629      	mov	r1, r5
 80128ae:	4630      	mov	r0, r6
 80128b0:	f7ff ffa2 	bl	80127f8 <__sfputs_r>
 80128b4:	3001      	adds	r0, #1
 80128b6:	f000 80a7 	beq.w	8012a08 <_vfiprintf_r+0x1ec>
 80128ba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80128bc:	445a      	add	r2, fp
 80128be:	9209      	str	r2, [sp, #36]	@ 0x24
 80128c0:	f89a 3000 	ldrb.w	r3, [sl]
 80128c4:	2b00      	cmp	r3, #0
 80128c6:	f000 809f 	beq.w	8012a08 <_vfiprintf_r+0x1ec>
 80128ca:	2300      	movs	r3, #0
 80128cc:	f04f 32ff 	mov.w	r2, #4294967295
 80128d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80128d4:	f10a 0a01 	add.w	sl, sl, #1
 80128d8:	9304      	str	r3, [sp, #16]
 80128da:	9307      	str	r3, [sp, #28]
 80128dc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80128e0:	931a      	str	r3, [sp, #104]	@ 0x68
 80128e2:	4654      	mov	r4, sl
 80128e4:	2205      	movs	r2, #5
 80128e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80128ea:	4853      	ldr	r0, [pc, #332]	@ (8012a38 <_vfiprintf_r+0x21c>)
 80128ec:	f7ed fd10 	bl	8000310 <memchr>
 80128f0:	9a04      	ldr	r2, [sp, #16]
 80128f2:	b9d8      	cbnz	r0, 801292c <_vfiprintf_r+0x110>
 80128f4:	06d1      	lsls	r1, r2, #27
 80128f6:	bf44      	itt	mi
 80128f8:	2320      	movmi	r3, #32
 80128fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80128fe:	0713      	lsls	r3, r2, #28
 8012900:	bf44      	itt	mi
 8012902:	232b      	movmi	r3, #43	@ 0x2b
 8012904:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012908:	f89a 3000 	ldrb.w	r3, [sl]
 801290c:	2b2a      	cmp	r3, #42	@ 0x2a
 801290e:	d015      	beq.n	801293c <_vfiprintf_r+0x120>
 8012910:	9a07      	ldr	r2, [sp, #28]
 8012912:	4654      	mov	r4, sl
 8012914:	2000      	movs	r0, #0
 8012916:	f04f 0c0a 	mov.w	ip, #10
 801291a:	4621      	mov	r1, r4
 801291c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012920:	3b30      	subs	r3, #48	@ 0x30
 8012922:	2b09      	cmp	r3, #9
 8012924:	d94b      	bls.n	80129be <_vfiprintf_r+0x1a2>
 8012926:	b1b0      	cbz	r0, 8012956 <_vfiprintf_r+0x13a>
 8012928:	9207      	str	r2, [sp, #28]
 801292a:	e014      	b.n	8012956 <_vfiprintf_r+0x13a>
 801292c:	eba0 0308 	sub.w	r3, r0, r8
 8012930:	fa09 f303 	lsl.w	r3, r9, r3
 8012934:	4313      	orrs	r3, r2
 8012936:	9304      	str	r3, [sp, #16]
 8012938:	46a2      	mov	sl, r4
 801293a:	e7d2      	b.n	80128e2 <_vfiprintf_r+0xc6>
 801293c:	9b03      	ldr	r3, [sp, #12]
 801293e:	1d19      	adds	r1, r3, #4
 8012940:	681b      	ldr	r3, [r3, #0]
 8012942:	9103      	str	r1, [sp, #12]
 8012944:	2b00      	cmp	r3, #0
 8012946:	bfbb      	ittet	lt
 8012948:	425b      	neglt	r3, r3
 801294a:	f042 0202 	orrlt.w	r2, r2, #2
 801294e:	9307      	strge	r3, [sp, #28]
 8012950:	9307      	strlt	r3, [sp, #28]
 8012952:	bfb8      	it	lt
 8012954:	9204      	strlt	r2, [sp, #16]
 8012956:	7823      	ldrb	r3, [r4, #0]
 8012958:	2b2e      	cmp	r3, #46	@ 0x2e
 801295a:	d10a      	bne.n	8012972 <_vfiprintf_r+0x156>
 801295c:	7863      	ldrb	r3, [r4, #1]
 801295e:	2b2a      	cmp	r3, #42	@ 0x2a
 8012960:	d132      	bne.n	80129c8 <_vfiprintf_r+0x1ac>
 8012962:	9b03      	ldr	r3, [sp, #12]
 8012964:	1d1a      	adds	r2, r3, #4
 8012966:	681b      	ldr	r3, [r3, #0]
 8012968:	9203      	str	r2, [sp, #12]
 801296a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801296e:	3402      	adds	r4, #2
 8012970:	9305      	str	r3, [sp, #20]
 8012972:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8012a48 <_vfiprintf_r+0x22c>
 8012976:	7821      	ldrb	r1, [r4, #0]
 8012978:	2203      	movs	r2, #3
 801297a:	4650      	mov	r0, sl
 801297c:	f7ed fcc8 	bl	8000310 <memchr>
 8012980:	b138      	cbz	r0, 8012992 <_vfiprintf_r+0x176>
 8012982:	9b04      	ldr	r3, [sp, #16]
 8012984:	eba0 000a 	sub.w	r0, r0, sl
 8012988:	2240      	movs	r2, #64	@ 0x40
 801298a:	4082      	lsls	r2, r0
 801298c:	4313      	orrs	r3, r2
 801298e:	3401      	adds	r4, #1
 8012990:	9304      	str	r3, [sp, #16]
 8012992:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012996:	4829      	ldr	r0, [pc, #164]	@ (8012a3c <_vfiprintf_r+0x220>)
 8012998:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801299c:	2206      	movs	r2, #6
 801299e:	f7ed fcb7 	bl	8000310 <memchr>
 80129a2:	2800      	cmp	r0, #0
 80129a4:	d03f      	beq.n	8012a26 <_vfiprintf_r+0x20a>
 80129a6:	4b26      	ldr	r3, [pc, #152]	@ (8012a40 <_vfiprintf_r+0x224>)
 80129a8:	bb1b      	cbnz	r3, 80129f2 <_vfiprintf_r+0x1d6>
 80129aa:	9b03      	ldr	r3, [sp, #12]
 80129ac:	3307      	adds	r3, #7
 80129ae:	f023 0307 	bic.w	r3, r3, #7
 80129b2:	3308      	adds	r3, #8
 80129b4:	9303      	str	r3, [sp, #12]
 80129b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80129b8:	443b      	add	r3, r7
 80129ba:	9309      	str	r3, [sp, #36]	@ 0x24
 80129bc:	e76a      	b.n	8012894 <_vfiprintf_r+0x78>
 80129be:	fb0c 3202 	mla	r2, ip, r2, r3
 80129c2:	460c      	mov	r4, r1
 80129c4:	2001      	movs	r0, #1
 80129c6:	e7a8      	b.n	801291a <_vfiprintf_r+0xfe>
 80129c8:	2300      	movs	r3, #0
 80129ca:	3401      	adds	r4, #1
 80129cc:	9305      	str	r3, [sp, #20]
 80129ce:	4619      	mov	r1, r3
 80129d0:	f04f 0c0a 	mov.w	ip, #10
 80129d4:	4620      	mov	r0, r4
 80129d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80129da:	3a30      	subs	r2, #48	@ 0x30
 80129dc:	2a09      	cmp	r2, #9
 80129de:	d903      	bls.n	80129e8 <_vfiprintf_r+0x1cc>
 80129e0:	2b00      	cmp	r3, #0
 80129e2:	d0c6      	beq.n	8012972 <_vfiprintf_r+0x156>
 80129e4:	9105      	str	r1, [sp, #20]
 80129e6:	e7c4      	b.n	8012972 <_vfiprintf_r+0x156>
 80129e8:	fb0c 2101 	mla	r1, ip, r1, r2
 80129ec:	4604      	mov	r4, r0
 80129ee:	2301      	movs	r3, #1
 80129f0:	e7f0      	b.n	80129d4 <_vfiprintf_r+0x1b8>
 80129f2:	ab03      	add	r3, sp, #12
 80129f4:	9300      	str	r3, [sp, #0]
 80129f6:	462a      	mov	r2, r5
 80129f8:	4b12      	ldr	r3, [pc, #72]	@ (8012a44 <_vfiprintf_r+0x228>)
 80129fa:	a904      	add	r1, sp, #16
 80129fc:	4630      	mov	r0, r6
 80129fe:	f7fc f9c7 	bl	800ed90 <_printf_float>
 8012a02:	4607      	mov	r7, r0
 8012a04:	1c78      	adds	r0, r7, #1
 8012a06:	d1d6      	bne.n	80129b6 <_vfiprintf_r+0x19a>
 8012a08:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012a0a:	07d9      	lsls	r1, r3, #31
 8012a0c:	d405      	bmi.n	8012a1a <_vfiprintf_r+0x1fe>
 8012a0e:	89ab      	ldrh	r3, [r5, #12]
 8012a10:	059a      	lsls	r2, r3, #22
 8012a12:	d402      	bmi.n	8012a1a <_vfiprintf_r+0x1fe>
 8012a14:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012a16:	f7fd f96d 	bl	800fcf4 <__retarget_lock_release_recursive>
 8012a1a:	89ab      	ldrh	r3, [r5, #12]
 8012a1c:	065b      	lsls	r3, r3, #25
 8012a1e:	f53f af1f 	bmi.w	8012860 <_vfiprintf_r+0x44>
 8012a22:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012a24:	e71e      	b.n	8012864 <_vfiprintf_r+0x48>
 8012a26:	ab03      	add	r3, sp, #12
 8012a28:	9300      	str	r3, [sp, #0]
 8012a2a:	462a      	mov	r2, r5
 8012a2c:	4b05      	ldr	r3, [pc, #20]	@ (8012a44 <_vfiprintf_r+0x228>)
 8012a2e:	a904      	add	r1, sp, #16
 8012a30:	4630      	mov	r0, r6
 8012a32:	f7fc fc35 	bl	800f2a0 <_printf_i>
 8012a36:	e7e4      	b.n	8012a02 <_vfiprintf_r+0x1e6>
 8012a38:	08013231 	.word	0x08013231
 8012a3c:	0801323b 	.word	0x0801323b
 8012a40:	0800ed91 	.word	0x0800ed91
 8012a44:	080127f9 	.word	0x080127f9
 8012a48:	08013237 	.word	0x08013237

08012a4c <__swbuf_r>:
 8012a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012a4e:	460e      	mov	r6, r1
 8012a50:	4614      	mov	r4, r2
 8012a52:	4605      	mov	r5, r0
 8012a54:	b118      	cbz	r0, 8012a5e <__swbuf_r+0x12>
 8012a56:	6a03      	ldr	r3, [r0, #32]
 8012a58:	b90b      	cbnz	r3, 8012a5e <__swbuf_r+0x12>
 8012a5a:	f7fc ffd9 	bl	800fa10 <__sinit>
 8012a5e:	69a3      	ldr	r3, [r4, #24]
 8012a60:	60a3      	str	r3, [r4, #8]
 8012a62:	89a3      	ldrh	r3, [r4, #12]
 8012a64:	071a      	lsls	r2, r3, #28
 8012a66:	d501      	bpl.n	8012a6c <__swbuf_r+0x20>
 8012a68:	6923      	ldr	r3, [r4, #16]
 8012a6a:	b943      	cbnz	r3, 8012a7e <__swbuf_r+0x32>
 8012a6c:	4621      	mov	r1, r4
 8012a6e:	4628      	mov	r0, r5
 8012a70:	f000 f82a 	bl	8012ac8 <__swsetup_r>
 8012a74:	b118      	cbz	r0, 8012a7e <__swbuf_r+0x32>
 8012a76:	f04f 37ff 	mov.w	r7, #4294967295
 8012a7a:	4638      	mov	r0, r7
 8012a7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012a7e:	6823      	ldr	r3, [r4, #0]
 8012a80:	6922      	ldr	r2, [r4, #16]
 8012a82:	1a98      	subs	r0, r3, r2
 8012a84:	6963      	ldr	r3, [r4, #20]
 8012a86:	b2f6      	uxtb	r6, r6
 8012a88:	4283      	cmp	r3, r0
 8012a8a:	4637      	mov	r7, r6
 8012a8c:	dc05      	bgt.n	8012a9a <__swbuf_r+0x4e>
 8012a8e:	4621      	mov	r1, r4
 8012a90:	4628      	mov	r0, r5
 8012a92:	f7ff fcf3 	bl	801247c <_fflush_r>
 8012a96:	2800      	cmp	r0, #0
 8012a98:	d1ed      	bne.n	8012a76 <__swbuf_r+0x2a>
 8012a9a:	68a3      	ldr	r3, [r4, #8]
 8012a9c:	3b01      	subs	r3, #1
 8012a9e:	60a3      	str	r3, [r4, #8]
 8012aa0:	6823      	ldr	r3, [r4, #0]
 8012aa2:	1c5a      	adds	r2, r3, #1
 8012aa4:	6022      	str	r2, [r4, #0]
 8012aa6:	701e      	strb	r6, [r3, #0]
 8012aa8:	6962      	ldr	r2, [r4, #20]
 8012aaa:	1c43      	adds	r3, r0, #1
 8012aac:	429a      	cmp	r2, r3
 8012aae:	d004      	beq.n	8012aba <__swbuf_r+0x6e>
 8012ab0:	89a3      	ldrh	r3, [r4, #12]
 8012ab2:	07db      	lsls	r3, r3, #31
 8012ab4:	d5e1      	bpl.n	8012a7a <__swbuf_r+0x2e>
 8012ab6:	2e0a      	cmp	r6, #10
 8012ab8:	d1df      	bne.n	8012a7a <__swbuf_r+0x2e>
 8012aba:	4621      	mov	r1, r4
 8012abc:	4628      	mov	r0, r5
 8012abe:	f7ff fcdd 	bl	801247c <_fflush_r>
 8012ac2:	2800      	cmp	r0, #0
 8012ac4:	d0d9      	beq.n	8012a7a <__swbuf_r+0x2e>
 8012ac6:	e7d6      	b.n	8012a76 <__swbuf_r+0x2a>

08012ac8 <__swsetup_r>:
 8012ac8:	b538      	push	{r3, r4, r5, lr}
 8012aca:	4b29      	ldr	r3, [pc, #164]	@ (8012b70 <__swsetup_r+0xa8>)
 8012acc:	4605      	mov	r5, r0
 8012ace:	6818      	ldr	r0, [r3, #0]
 8012ad0:	460c      	mov	r4, r1
 8012ad2:	b118      	cbz	r0, 8012adc <__swsetup_r+0x14>
 8012ad4:	6a03      	ldr	r3, [r0, #32]
 8012ad6:	b90b      	cbnz	r3, 8012adc <__swsetup_r+0x14>
 8012ad8:	f7fc ff9a 	bl	800fa10 <__sinit>
 8012adc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012ae0:	0719      	lsls	r1, r3, #28
 8012ae2:	d422      	bmi.n	8012b2a <__swsetup_r+0x62>
 8012ae4:	06da      	lsls	r2, r3, #27
 8012ae6:	d407      	bmi.n	8012af8 <__swsetup_r+0x30>
 8012ae8:	2209      	movs	r2, #9
 8012aea:	602a      	str	r2, [r5, #0]
 8012aec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012af0:	81a3      	strh	r3, [r4, #12]
 8012af2:	f04f 30ff 	mov.w	r0, #4294967295
 8012af6:	e033      	b.n	8012b60 <__swsetup_r+0x98>
 8012af8:	0758      	lsls	r0, r3, #29
 8012afa:	d512      	bpl.n	8012b22 <__swsetup_r+0x5a>
 8012afc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012afe:	b141      	cbz	r1, 8012b12 <__swsetup_r+0x4a>
 8012b00:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012b04:	4299      	cmp	r1, r3
 8012b06:	d002      	beq.n	8012b0e <__swsetup_r+0x46>
 8012b08:	4628      	mov	r0, r5
 8012b0a:	f7fd fef3 	bl	80108f4 <_free_r>
 8012b0e:	2300      	movs	r3, #0
 8012b10:	6363      	str	r3, [r4, #52]	@ 0x34
 8012b12:	89a3      	ldrh	r3, [r4, #12]
 8012b14:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8012b18:	81a3      	strh	r3, [r4, #12]
 8012b1a:	2300      	movs	r3, #0
 8012b1c:	6063      	str	r3, [r4, #4]
 8012b1e:	6923      	ldr	r3, [r4, #16]
 8012b20:	6023      	str	r3, [r4, #0]
 8012b22:	89a3      	ldrh	r3, [r4, #12]
 8012b24:	f043 0308 	orr.w	r3, r3, #8
 8012b28:	81a3      	strh	r3, [r4, #12]
 8012b2a:	6923      	ldr	r3, [r4, #16]
 8012b2c:	b94b      	cbnz	r3, 8012b42 <__swsetup_r+0x7a>
 8012b2e:	89a3      	ldrh	r3, [r4, #12]
 8012b30:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8012b34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012b38:	d003      	beq.n	8012b42 <__swsetup_r+0x7a>
 8012b3a:	4621      	mov	r1, r4
 8012b3c:	4628      	mov	r0, r5
 8012b3e:	f000 f883 	bl	8012c48 <__smakebuf_r>
 8012b42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012b46:	f013 0201 	ands.w	r2, r3, #1
 8012b4a:	d00a      	beq.n	8012b62 <__swsetup_r+0x9a>
 8012b4c:	2200      	movs	r2, #0
 8012b4e:	60a2      	str	r2, [r4, #8]
 8012b50:	6962      	ldr	r2, [r4, #20]
 8012b52:	4252      	negs	r2, r2
 8012b54:	61a2      	str	r2, [r4, #24]
 8012b56:	6922      	ldr	r2, [r4, #16]
 8012b58:	b942      	cbnz	r2, 8012b6c <__swsetup_r+0xa4>
 8012b5a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8012b5e:	d1c5      	bne.n	8012aec <__swsetup_r+0x24>
 8012b60:	bd38      	pop	{r3, r4, r5, pc}
 8012b62:	0799      	lsls	r1, r3, #30
 8012b64:	bf58      	it	pl
 8012b66:	6962      	ldrpl	r2, [r4, #20]
 8012b68:	60a2      	str	r2, [r4, #8]
 8012b6a:	e7f4      	b.n	8012b56 <__swsetup_r+0x8e>
 8012b6c:	2000      	movs	r0, #0
 8012b6e:	e7f7      	b.n	8012b60 <__swsetup_r+0x98>
 8012b70:	240001c4 	.word	0x240001c4

08012b74 <_raise_r>:
 8012b74:	291f      	cmp	r1, #31
 8012b76:	b538      	push	{r3, r4, r5, lr}
 8012b78:	4605      	mov	r5, r0
 8012b7a:	460c      	mov	r4, r1
 8012b7c:	d904      	bls.n	8012b88 <_raise_r+0x14>
 8012b7e:	2316      	movs	r3, #22
 8012b80:	6003      	str	r3, [r0, #0]
 8012b82:	f04f 30ff 	mov.w	r0, #4294967295
 8012b86:	bd38      	pop	{r3, r4, r5, pc}
 8012b88:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8012b8a:	b112      	cbz	r2, 8012b92 <_raise_r+0x1e>
 8012b8c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012b90:	b94b      	cbnz	r3, 8012ba6 <_raise_r+0x32>
 8012b92:	4628      	mov	r0, r5
 8012b94:	f000 f830 	bl	8012bf8 <_getpid_r>
 8012b98:	4622      	mov	r2, r4
 8012b9a:	4601      	mov	r1, r0
 8012b9c:	4628      	mov	r0, r5
 8012b9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012ba2:	f000 b817 	b.w	8012bd4 <_kill_r>
 8012ba6:	2b01      	cmp	r3, #1
 8012ba8:	d00a      	beq.n	8012bc0 <_raise_r+0x4c>
 8012baa:	1c59      	adds	r1, r3, #1
 8012bac:	d103      	bne.n	8012bb6 <_raise_r+0x42>
 8012bae:	2316      	movs	r3, #22
 8012bb0:	6003      	str	r3, [r0, #0]
 8012bb2:	2001      	movs	r0, #1
 8012bb4:	e7e7      	b.n	8012b86 <_raise_r+0x12>
 8012bb6:	2100      	movs	r1, #0
 8012bb8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8012bbc:	4620      	mov	r0, r4
 8012bbe:	4798      	blx	r3
 8012bc0:	2000      	movs	r0, #0
 8012bc2:	e7e0      	b.n	8012b86 <_raise_r+0x12>

08012bc4 <raise>:
 8012bc4:	4b02      	ldr	r3, [pc, #8]	@ (8012bd0 <raise+0xc>)
 8012bc6:	4601      	mov	r1, r0
 8012bc8:	6818      	ldr	r0, [r3, #0]
 8012bca:	f7ff bfd3 	b.w	8012b74 <_raise_r>
 8012bce:	bf00      	nop
 8012bd0:	240001c4 	.word	0x240001c4

08012bd4 <_kill_r>:
 8012bd4:	b538      	push	{r3, r4, r5, lr}
 8012bd6:	4d07      	ldr	r5, [pc, #28]	@ (8012bf4 <_kill_r+0x20>)
 8012bd8:	2300      	movs	r3, #0
 8012bda:	4604      	mov	r4, r0
 8012bdc:	4608      	mov	r0, r1
 8012bde:	4611      	mov	r1, r2
 8012be0:	602b      	str	r3, [r5, #0]
 8012be2:	f7ee fe45 	bl	8001870 <_kill>
 8012be6:	1c43      	adds	r3, r0, #1
 8012be8:	d102      	bne.n	8012bf0 <_kill_r+0x1c>
 8012bea:	682b      	ldr	r3, [r5, #0]
 8012bec:	b103      	cbz	r3, 8012bf0 <_kill_r+0x1c>
 8012bee:	6023      	str	r3, [r4, #0]
 8012bf0:	bd38      	pop	{r3, r4, r5, pc}
 8012bf2:	bf00      	nop
 8012bf4:	24000e08 	.word	0x24000e08

08012bf8 <_getpid_r>:
 8012bf8:	f7ee be32 	b.w	8001860 <_getpid>

08012bfc <__swhatbuf_r>:
 8012bfc:	b570      	push	{r4, r5, r6, lr}
 8012bfe:	460c      	mov	r4, r1
 8012c00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012c04:	2900      	cmp	r1, #0
 8012c06:	b096      	sub	sp, #88	@ 0x58
 8012c08:	4615      	mov	r5, r2
 8012c0a:	461e      	mov	r6, r3
 8012c0c:	da0d      	bge.n	8012c2a <__swhatbuf_r+0x2e>
 8012c0e:	89a3      	ldrh	r3, [r4, #12]
 8012c10:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8012c14:	f04f 0100 	mov.w	r1, #0
 8012c18:	bf14      	ite	ne
 8012c1a:	2340      	movne	r3, #64	@ 0x40
 8012c1c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8012c20:	2000      	movs	r0, #0
 8012c22:	6031      	str	r1, [r6, #0]
 8012c24:	602b      	str	r3, [r5, #0]
 8012c26:	b016      	add	sp, #88	@ 0x58
 8012c28:	bd70      	pop	{r4, r5, r6, pc}
 8012c2a:	466a      	mov	r2, sp
 8012c2c:	f000 f848 	bl	8012cc0 <_fstat_r>
 8012c30:	2800      	cmp	r0, #0
 8012c32:	dbec      	blt.n	8012c0e <__swhatbuf_r+0x12>
 8012c34:	9901      	ldr	r1, [sp, #4]
 8012c36:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8012c3a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8012c3e:	4259      	negs	r1, r3
 8012c40:	4159      	adcs	r1, r3
 8012c42:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8012c46:	e7eb      	b.n	8012c20 <__swhatbuf_r+0x24>

08012c48 <__smakebuf_r>:
 8012c48:	898b      	ldrh	r3, [r1, #12]
 8012c4a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012c4c:	079d      	lsls	r5, r3, #30
 8012c4e:	4606      	mov	r6, r0
 8012c50:	460c      	mov	r4, r1
 8012c52:	d507      	bpl.n	8012c64 <__smakebuf_r+0x1c>
 8012c54:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8012c58:	6023      	str	r3, [r4, #0]
 8012c5a:	6123      	str	r3, [r4, #16]
 8012c5c:	2301      	movs	r3, #1
 8012c5e:	6163      	str	r3, [r4, #20]
 8012c60:	b003      	add	sp, #12
 8012c62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012c64:	ab01      	add	r3, sp, #4
 8012c66:	466a      	mov	r2, sp
 8012c68:	f7ff ffc8 	bl	8012bfc <__swhatbuf_r>
 8012c6c:	9f00      	ldr	r7, [sp, #0]
 8012c6e:	4605      	mov	r5, r0
 8012c70:	4639      	mov	r1, r7
 8012c72:	4630      	mov	r0, r6
 8012c74:	f7fb f9b8 	bl	800dfe8 <_malloc_r>
 8012c78:	b948      	cbnz	r0, 8012c8e <__smakebuf_r+0x46>
 8012c7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012c7e:	059a      	lsls	r2, r3, #22
 8012c80:	d4ee      	bmi.n	8012c60 <__smakebuf_r+0x18>
 8012c82:	f023 0303 	bic.w	r3, r3, #3
 8012c86:	f043 0302 	orr.w	r3, r3, #2
 8012c8a:	81a3      	strh	r3, [r4, #12]
 8012c8c:	e7e2      	b.n	8012c54 <__smakebuf_r+0xc>
 8012c8e:	89a3      	ldrh	r3, [r4, #12]
 8012c90:	6020      	str	r0, [r4, #0]
 8012c92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012c96:	81a3      	strh	r3, [r4, #12]
 8012c98:	9b01      	ldr	r3, [sp, #4]
 8012c9a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8012c9e:	b15b      	cbz	r3, 8012cb8 <__smakebuf_r+0x70>
 8012ca0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012ca4:	4630      	mov	r0, r6
 8012ca6:	f000 f81d 	bl	8012ce4 <_isatty_r>
 8012caa:	b128      	cbz	r0, 8012cb8 <__smakebuf_r+0x70>
 8012cac:	89a3      	ldrh	r3, [r4, #12]
 8012cae:	f023 0303 	bic.w	r3, r3, #3
 8012cb2:	f043 0301 	orr.w	r3, r3, #1
 8012cb6:	81a3      	strh	r3, [r4, #12]
 8012cb8:	89a3      	ldrh	r3, [r4, #12]
 8012cba:	431d      	orrs	r5, r3
 8012cbc:	81a5      	strh	r5, [r4, #12]
 8012cbe:	e7cf      	b.n	8012c60 <__smakebuf_r+0x18>

08012cc0 <_fstat_r>:
 8012cc0:	b538      	push	{r3, r4, r5, lr}
 8012cc2:	4d07      	ldr	r5, [pc, #28]	@ (8012ce0 <_fstat_r+0x20>)
 8012cc4:	2300      	movs	r3, #0
 8012cc6:	4604      	mov	r4, r0
 8012cc8:	4608      	mov	r0, r1
 8012cca:	4611      	mov	r1, r2
 8012ccc:	602b      	str	r3, [r5, #0]
 8012cce:	f7ee fe2f 	bl	8001930 <_fstat>
 8012cd2:	1c43      	adds	r3, r0, #1
 8012cd4:	d102      	bne.n	8012cdc <_fstat_r+0x1c>
 8012cd6:	682b      	ldr	r3, [r5, #0]
 8012cd8:	b103      	cbz	r3, 8012cdc <_fstat_r+0x1c>
 8012cda:	6023      	str	r3, [r4, #0]
 8012cdc:	bd38      	pop	{r3, r4, r5, pc}
 8012cde:	bf00      	nop
 8012ce0:	24000e08 	.word	0x24000e08

08012ce4 <_isatty_r>:
 8012ce4:	b538      	push	{r3, r4, r5, lr}
 8012ce6:	4d06      	ldr	r5, [pc, #24]	@ (8012d00 <_isatty_r+0x1c>)
 8012ce8:	2300      	movs	r3, #0
 8012cea:	4604      	mov	r4, r0
 8012cec:	4608      	mov	r0, r1
 8012cee:	602b      	str	r3, [r5, #0]
 8012cf0:	f7ee fe2e 	bl	8001950 <_isatty>
 8012cf4:	1c43      	adds	r3, r0, #1
 8012cf6:	d102      	bne.n	8012cfe <_isatty_r+0x1a>
 8012cf8:	682b      	ldr	r3, [r5, #0]
 8012cfa:	b103      	cbz	r3, 8012cfe <_isatty_r+0x1a>
 8012cfc:	6023      	str	r3, [r4, #0]
 8012cfe:	bd38      	pop	{r3, r4, r5, pc}
 8012d00:	24000e08 	.word	0x24000e08

08012d04 <_init>:
 8012d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012d06:	bf00      	nop
 8012d08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012d0a:	bc08      	pop	{r3}
 8012d0c:	469e      	mov	lr, r3
 8012d0e:	4770      	bx	lr

08012d10 <_fini>:
 8012d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012d12:	bf00      	nop
 8012d14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012d16:	bc08      	pop	{r3}
 8012d18:	469e      	mov	lr, r3
 8012d1a:	4770      	bx	lr
