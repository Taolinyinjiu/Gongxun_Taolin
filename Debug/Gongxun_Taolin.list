
Gongxun_Taolin.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000126ec  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000081c  080129c0  080129c0  000139c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080131dc  080131dc  000141dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080131e4  080131e4  000141e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080131e8  080131e8  000141e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000022c  24000000  080131ec  00015000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000c18  2400022c  08013418  0001522c  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000e44  08013418  00015e44  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0001522c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002205c  00000000  00000000  0001525a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004662  00000000  00000000  000372b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001ad8  00000000  00000000  0003b918  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000014d6  00000000  00000000  0003d3f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00037dd6  00000000  00000000  0003e8c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00029563  00000000  00000000  0007669c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00159a28  00000000  00000000  0009fbff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001f9627  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00008570  00000000  00000000  001f966c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000004f  00000000  00000000  00201bdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	2400022c 	.word	0x2400022c
 80002ec:	00000000 	.word	0x00000000
 80002f0:	080129a4 	.word	0x080129a4

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000230 	.word	0x24000230
 800030c:	080129a4 	.word	0x080129a4

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <strlen>:
 80003b0:	4603      	mov	r3, r0
 80003b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d1fb      	bne.n	80003b2 <strlen+0x2>
 80003ba:	1a18      	subs	r0, r3, r0
 80003bc:	3801      	subs	r0, #1
 80003be:	4770      	bx	lr

080003c0 <__aeabi_drsub>:
 80003c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003c4:	e002      	b.n	80003cc <__adddf3>
 80003c6:	bf00      	nop

080003c8 <__aeabi_dsub>:
 80003c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003cc <__adddf3>:
 80003cc:	b530      	push	{r4, r5, lr}
 80003ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	bf1f      	itttt	ne
 80003e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f2:	f000 80e2 	beq.w	80005ba <__adddf3+0x1ee>
 80003f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003fe:	bfb8      	it	lt
 8000400:	426d      	neglt	r5, r5
 8000402:	dd0c      	ble.n	800041e <__adddf3+0x52>
 8000404:	442c      	add	r4, r5
 8000406:	ea80 0202 	eor.w	r2, r0, r2
 800040a:	ea81 0303 	eor.w	r3, r1, r3
 800040e:	ea82 0000 	eor.w	r0, r2, r0
 8000412:	ea83 0101 	eor.w	r1, r3, r1
 8000416:	ea80 0202 	eor.w	r2, r0, r2
 800041a:	ea81 0303 	eor.w	r3, r1, r3
 800041e:	2d36      	cmp	r5, #54	@ 0x36
 8000420:	bf88      	it	hi
 8000422:	bd30      	pophi	{r4, r5, pc}
 8000424:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000428:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800042c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000430:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000434:	d002      	beq.n	800043c <__adddf3+0x70>
 8000436:	4240      	negs	r0, r0
 8000438:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800043c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000440:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000444:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000448:	d002      	beq.n	8000450 <__adddf3+0x84>
 800044a:	4252      	negs	r2, r2
 800044c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000450:	ea94 0f05 	teq	r4, r5
 8000454:	f000 80a7 	beq.w	80005a6 <__adddf3+0x1da>
 8000458:	f1a4 0401 	sub.w	r4, r4, #1
 800045c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000460:	db0d      	blt.n	800047e <__adddf3+0xb2>
 8000462:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000466:	fa22 f205 	lsr.w	r2, r2, r5
 800046a:	1880      	adds	r0, r0, r2
 800046c:	f141 0100 	adc.w	r1, r1, #0
 8000470:	fa03 f20e 	lsl.w	r2, r3, lr
 8000474:	1880      	adds	r0, r0, r2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	4159      	adcs	r1, r3
 800047c:	e00e      	b.n	800049c <__adddf3+0xd0>
 800047e:	f1a5 0520 	sub.w	r5, r5, #32
 8000482:	f10e 0e20 	add.w	lr, lr, #32
 8000486:	2a01      	cmp	r2, #1
 8000488:	fa03 fc0e 	lsl.w	ip, r3, lr
 800048c:	bf28      	it	cs
 800048e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000492:	fa43 f305 	asr.w	r3, r3, r5
 8000496:	18c0      	adds	r0, r0, r3
 8000498:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800049c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004a0:	d507      	bpl.n	80004b2 <__adddf3+0xe6>
 80004a2:	f04f 0e00 	mov.w	lr, #0
 80004a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80004aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80004b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80004b6:	d31b      	bcc.n	80004f0 <__adddf3+0x124>
 80004b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004bc:	d30c      	bcc.n	80004d8 <__adddf3+0x10c>
 80004be:	0849      	lsrs	r1, r1, #1
 80004c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004c8:	f104 0401 	add.w	r4, r4, #1
 80004cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004d4:	f080 809a 	bcs.w	800060c <__adddf3+0x240>
 80004d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004dc:	bf08      	it	eq
 80004de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004e2:	f150 0000 	adcs.w	r0, r0, #0
 80004e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ea:	ea41 0105 	orr.w	r1, r1, r5
 80004ee:	bd30      	pop	{r4, r5, pc}
 80004f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004f4:	4140      	adcs	r0, r0
 80004f6:	eb41 0101 	adc.w	r1, r1, r1
 80004fa:	3c01      	subs	r4, #1
 80004fc:	bf28      	it	cs
 80004fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000502:	d2e9      	bcs.n	80004d8 <__adddf3+0x10c>
 8000504:	f091 0f00 	teq	r1, #0
 8000508:	bf04      	itt	eq
 800050a:	4601      	moveq	r1, r0
 800050c:	2000      	moveq	r0, #0
 800050e:	fab1 f381 	clz	r3, r1
 8000512:	bf08      	it	eq
 8000514:	3320      	addeq	r3, #32
 8000516:	f1a3 030b 	sub.w	r3, r3, #11
 800051a:	f1b3 0220 	subs.w	r2, r3, #32
 800051e:	da0c      	bge.n	800053a <__adddf3+0x16e>
 8000520:	320c      	adds	r2, #12
 8000522:	dd08      	ble.n	8000536 <__adddf3+0x16a>
 8000524:	f102 0c14 	add.w	ip, r2, #20
 8000528:	f1c2 020c 	rsb	r2, r2, #12
 800052c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000530:	fa21 f102 	lsr.w	r1, r1, r2
 8000534:	e00c      	b.n	8000550 <__adddf3+0x184>
 8000536:	f102 0214 	add.w	r2, r2, #20
 800053a:	bfd8      	it	le
 800053c:	f1c2 0c20 	rsble	ip, r2, #32
 8000540:	fa01 f102 	lsl.w	r1, r1, r2
 8000544:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000548:	bfdc      	itt	le
 800054a:	ea41 010c 	orrle.w	r1, r1, ip
 800054e:	4090      	lslle	r0, r2
 8000550:	1ae4      	subs	r4, r4, r3
 8000552:	bfa2      	ittt	ge
 8000554:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000558:	4329      	orrge	r1, r5
 800055a:	bd30      	popge	{r4, r5, pc}
 800055c:	ea6f 0404 	mvn.w	r4, r4
 8000560:	3c1f      	subs	r4, #31
 8000562:	da1c      	bge.n	800059e <__adddf3+0x1d2>
 8000564:	340c      	adds	r4, #12
 8000566:	dc0e      	bgt.n	8000586 <__adddf3+0x1ba>
 8000568:	f104 0414 	add.w	r4, r4, #20
 800056c:	f1c4 0220 	rsb	r2, r4, #32
 8000570:	fa20 f004 	lsr.w	r0, r0, r4
 8000574:	fa01 f302 	lsl.w	r3, r1, r2
 8000578:	ea40 0003 	orr.w	r0, r0, r3
 800057c:	fa21 f304 	lsr.w	r3, r1, r4
 8000580:	ea45 0103 	orr.w	r1, r5, r3
 8000584:	bd30      	pop	{r4, r5, pc}
 8000586:	f1c4 040c 	rsb	r4, r4, #12
 800058a:	f1c4 0220 	rsb	r2, r4, #32
 800058e:	fa20 f002 	lsr.w	r0, r0, r2
 8000592:	fa01 f304 	lsl.w	r3, r1, r4
 8000596:	ea40 0003 	orr.w	r0, r0, r3
 800059a:	4629      	mov	r1, r5
 800059c:	bd30      	pop	{r4, r5, pc}
 800059e:	fa21 f004 	lsr.w	r0, r1, r4
 80005a2:	4629      	mov	r1, r5
 80005a4:	bd30      	pop	{r4, r5, pc}
 80005a6:	f094 0f00 	teq	r4, #0
 80005aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80005ae:	bf06      	itte	eq
 80005b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80005b4:	3401      	addeq	r4, #1
 80005b6:	3d01      	subne	r5, #1
 80005b8:	e74e      	b.n	8000458 <__adddf3+0x8c>
 80005ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005be:	bf18      	it	ne
 80005c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005c4:	d029      	beq.n	800061a <__adddf3+0x24e>
 80005c6:	ea94 0f05 	teq	r4, r5
 80005ca:	bf08      	it	eq
 80005cc:	ea90 0f02 	teqeq	r0, r2
 80005d0:	d005      	beq.n	80005de <__adddf3+0x212>
 80005d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005d6:	bf04      	itt	eq
 80005d8:	4619      	moveq	r1, r3
 80005da:	4610      	moveq	r0, r2
 80005dc:	bd30      	pop	{r4, r5, pc}
 80005de:	ea91 0f03 	teq	r1, r3
 80005e2:	bf1e      	ittt	ne
 80005e4:	2100      	movne	r1, #0
 80005e6:	2000      	movne	r0, #0
 80005e8:	bd30      	popne	{r4, r5, pc}
 80005ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ee:	d105      	bne.n	80005fc <__adddf3+0x230>
 80005f0:	0040      	lsls	r0, r0, #1
 80005f2:	4149      	adcs	r1, r1
 80005f4:	bf28      	it	cs
 80005f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005fa:	bd30      	pop	{r4, r5, pc}
 80005fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000600:	bf3c      	itt	cc
 8000602:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000606:	bd30      	popcc	{r4, r5, pc}
 8000608:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800060c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000610:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000614:	f04f 0000 	mov.w	r0, #0
 8000618:	bd30      	pop	{r4, r5, pc}
 800061a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061e:	bf1a      	itte	ne
 8000620:	4619      	movne	r1, r3
 8000622:	4610      	movne	r0, r2
 8000624:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000628:	bf1c      	itt	ne
 800062a:	460b      	movne	r3, r1
 800062c:	4602      	movne	r2, r0
 800062e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000632:	bf06      	itte	eq
 8000634:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000638:	ea91 0f03 	teqeq	r1, r3
 800063c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000640:	bd30      	pop	{r4, r5, pc}
 8000642:	bf00      	nop

08000644 <__aeabi_ui2d>:
 8000644:	f090 0f00 	teq	r0, #0
 8000648:	bf04      	itt	eq
 800064a:	2100      	moveq	r1, #0
 800064c:	4770      	bxeq	lr
 800064e:	b530      	push	{r4, r5, lr}
 8000650:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000654:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000658:	f04f 0500 	mov.w	r5, #0
 800065c:	f04f 0100 	mov.w	r1, #0
 8000660:	e750      	b.n	8000504 <__adddf3+0x138>
 8000662:	bf00      	nop

08000664 <__aeabi_i2d>:
 8000664:	f090 0f00 	teq	r0, #0
 8000668:	bf04      	itt	eq
 800066a:	2100      	moveq	r1, #0
 800066c:	4770      	bxeq	lr
 800066e:	b530      	push	{r4, r5, lr}
 8000670:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000674:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000678:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800067c:	bf48      	it	mi
 800067e:	4240      	negmi	r0, r0
 8000680:	f04f 0100 	mov.w	r1, #0
 8000684:	e73e      	b.n	8000504 <__adddf3+0x138>
 8000686:	bf00      	nop

08000688 <__aeabi_f2d>:
 8000688:	0042      	lsls	r2, r0, #1
 800068a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800068e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000692:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000696:	bf1f      	itttt	ne
 8000698:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800069c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80006a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80006a4:	4770      	bxne	lr
 80006a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80006aa:	bf08      	it	eq
 80006ac:	4770      	bxeq	lr
 80006ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80006b2:	bf04      	itt	eq
 80006b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80006b8:	4770      	bxeq	lr
 80006ba:	b530      	push	{r4, r5, lr}
 80006bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	e71c      	b.n	8000504 <__adddf3+0x138>
 80006ca:	bf00      	nop

080006cc <__aeabi_ul2d>:
 80006cc:	ea50 0201 	orrs.w	r2, r0, r1
 80006d0:	bf08      	it	eq
 80006d2:	4770      	bxeq	lr
 80006d4:	b530      	push	{r4, r5, lr}
 80006d6:	f04f 0500 	mov.w	r5, #0
 80006da:	e00a      	b.n	80006f2 <__aeabi_l2d+0x16>

080006dc <__aeabi_l2d>:
 80006dc:	ea50 0201 	orrs.w	r2, r0, r1
 80006e0:	bf08      	it	eq
 80006e2:	4770      	bxeq	lr
 80006e4:	b530      	push	{r4, r5, lr}
 80006e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ea:	d502      	bpl.n	80006f2 <__aeabi_l2d+0x16>
 80006ec:	4240      	negs	r0, r0
 80006ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006fe:	f43f aed8 	beq.w	80004b2 <__adddf3+0xe6>
 8000702:	f04f 0203 	mov.w	r2, #3
 8000706:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800070a:	bf18      	it	ne
 800070c:	3203      	addne	r2, #3
 800070e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000712:	bf18      	it	ne
 8000714:	3203      	addne	r2, #3
 8000716:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800071a:	f1c2 0320 	rsb	r3, r2, #32
 800071e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000722:	fa20 f002 	lsr.w	r0, r0, r2
 8000726:	fa01 fe03 	lsl.w	lr, r1, r3
 800072a:	ea40 000e 	orr.w	r0, r0, lr
 800072e:	fa21 f102 	lsr.w	r1, r1, r2
 8000732:	4414      	add	r4, r2
 8000734:	e6bd      	b.n	80004b2 <__adddf3+0xe6>
 8000736:	bf00      	nop

08000738 <__aeabi_uldivmod>:
 8000738:	b953      	cbnz	r3, 8000750 <__aeabi_uldivmod+0x18>
 800073a:	b94a      	cbnz	r2, 8000750 <__aeabi_uldivmod+0x18>
 800073c:	2900      	cmp	r1, #0
 800073e:	bf08      	it	eq
 8000740:	2800      	cmpeq	r0, #0
 8000742:	bf1c      	itt	ne
 8000744:	f04f 31ff 	movne.w	r1, #4294967295
 8000748:	f04f 30ff 	movne.w	r0, #4294967295
 800074c:	f000 b9a2 	b.w	8000a94 <__aeabi_idiv0>
 8000750:	f1ad 0c08 	sub.w	ip, sp, #8
 8000754:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000758:	f000 f83e 	bl	80007d8 <__udivmoddi4>
 800075c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000760:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000764:	b004      	add	sp, #16
 8000766:	4770      	bx	lr

08000768 <__aeabi_d2lz>:
 8000768:	b508      	push	{r3, lr}
 800076a:	4602      	mov	r2, r0
 800076c:	460b      	mov	r3, r1
 800076e:	ec43 2b17 	vmov	d7, r2, r3
 8000772:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800077a:	d403      	bmi.n	8000784 <__aeabi_d2lz+0x1c>
 800077c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000780:	f000 b80a 	b.w	8000798 <__aeabi_d2ulz>
 8000784:	eeb1 7b47 	vneg.f64	d7, d7
 8000788:	ec51 0b17 	vmov	r0, r1, d7
 800078c:	f000 f804 	bl	8000798 <__aeabi_d2ulz>
 8000790:	4240      	negs	r0, r0
 8000792:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000796:	bd08      	pop	{r3, pc}

08000798 <__aeabi_d2ulz>:
 8000798:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 80007c8 <__aeabi_d2ulz+0x30>
 800079c:	ec41 0b17 	vmov	d7, r0, r1
 80007a0:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 80007d0 <__aeabi_d2ulz+0x38>
 80007a4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80007a8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80007ac:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80007b0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80007b4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80007b8:	ee16 1a10 	vmov	r1, s12
 80007bc:	ee17 0a90 	vmov	r0, s15
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	f3af 8000 	nop.w
 80007c8:	00000000 	.word	0x00000000
 80007cc:	3df00000 	.word	0x3df00000
 80007d0:	00000000 	.word	0x00000000
 80007d4:	41f00000 	.word	0x41f00000

080007d8 <__udivmoddi4>:
 80007d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007dc:	9d08      	ldr	r5, [sp, #32]
 80007de:	460c      	mov	r4, r1
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d14e      	bne.n	8000882 <__udivmoddi4+0xaa>
 80007e4:	4694      	mov	ip, r2
 80007e6:	458c      	cmp	ip, r1
 80007e8:	4686      	mov	lr, r0
 80007ea:	fab2 f282 	clz	r2, r2
 80007ee:	d962      	bls.n	80008b6 <__udivmoddi4+0xde>
 80007f0:	b14a      	cbz	r2, 8000806 <__udivmoddi4+0x2e>
 80007f2:	f1c2 0320 	rsb	r3, r2, #32
 80007f6:	4091      	lsls	r1, r2
 80007f8:	fa20 f303 	lsr.w	r3, r0, r3
 80007fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000800:	4319      	orrs	r1, r3
 8000802:	fa00 fe02 	lsl.w	lr, r0, r2
 8000806:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800080a:	fa1f f68c 	uxth.w	r6, ip
 800080e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000812:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000816:	fb07 1114 	mls	r1, r7, r4, r1
 800081a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800081e:	fb04 f106 	mul.w	r1, r4, r6
 8000822:	4299      	cmp	r1, r3
 8000824:	d90a      	bls.n	800083c <__udivmoddi4+0x64>
 8000826:	eb1c 0303 	adds.w	r3, ip, r3
 800082a:	f104 30ff 	add.w	r0, r4, #4294967295
 800082e:	f080 8112 	bcs.w	8000a56 <__udivmoddi4+0x27e>
 8000832:	4299      	cmp	r1, r3
 8000834:	f240 810f 	bls.w	8000a56 <__udivmoddi4+0x27e>
 8000838:	3c02      	subs	r4, #2
 800083a:	4463      	add	r3, ip
 800083c:	1a59      	subs	r1, r3, r1
 800083e:	fa1f f38e 	uxth.w	r3, lr
 8000842:	fbb1 f0f7 	udiv	r0, r1, r7
 8000846:	fb07 1110 	mls	r1, r7, r0, r1
 800084a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800084e:	fb00 f606 	mul.w	r6, r0, r6
 8000852:	429e      	cmp	r6, r3
 8000854:	d90a      	bls.n	800086c <__udivmoddi4+0x94>
 8000856:	eb1c 0303 	adds.w	r3, ip, r3
 800085a:	f100 31ff 	add.w	r1, r0, #4294967295
 800085e:	f080 80fc 	bcs.w	8000a5a <__udivmoddi4+0x282>
 8000862:	429e      	cmp	r6, r3
 8000864:	f240 80f9 	bls.w	8000a5a <__udivmoddi4+0x282>
 8000868:	4463      	add	r3, ip
 800086a:	3802      	subs	r0, #2
 800086c:	1b9b      	subs	r3, r3, r6
 800086e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000872:	2100      	movs	r1, #0
 8000874:	b11d      	cbz	r5, 800087e <__udivmoddi4+0xa6>
 8000876:	40d3      	lsrs	r3, r2
 8000878:	2200      	movs	r2, #0
 800087a:	e9c5 3200 	strd	r3, r2, [r5]
 800087e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000882:	428b      	cmp	r3, r1
 8000884:	d905      	bls.n	8000892 <__udivmoddi4+0xba>
 8000886:	b10d      	cbz	r5, 800088c <__udivmoddi4+0xb4>
 8000888:	e9c5 0100 	strd	r0, r1, [r5]
 800088c:	2100      	movs	r1, #0
 800088e:	4608      	mov	r0, r1
 8000890:	e7f5      	b.n	800087e <__udivmoddi4+0xa6>
 8000892:	fab3 f183 	clz	r1, r3
 8000896:	2900      	cmp	r1, #0
 8000898:	d146      	bne.n	8000928 <__udivmoddi4+0x150>
 800089a:	42a3      	cmp	r3, r4
 800089c:	d302      	bcc.n	80008a4 <__udivmoddi4+0xcc>
 800089e:	4290      	cmp	r0, r2
 80008a0:	f0c0 80f0 	bcc.w	8000a84 <__udivmoddi4+0x2ac>
 80008a4:	1a86      	subs	r6, r0, r2
 80008a6:	eb64 0303 	sbc.w	r3, r4, r3
 80008aa:	2001      	movs	r0, #1
 80008ac:	2d00      	cmp	r5, #0
 80008ae:	d0e6      	beq.n	800087e <__udivmoddi4+0xa6>
 80008b0:	e9c5 6300 	strd	r6, r3, [r5]
 80008b4:	e7e3      	b.n	800087e <__udivmoddi4+0xa6>
 80008b6:	2a00      	cmp	r2, #0
 80008b8:	f040 8090 	bne.w	80009dc <__udivmoddi4+0x204>
 80008bc:	eba1 040c 	sub.w	r4, r1, ip
 80008c0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008c4:	fa1f f78c 	uxth.w	r7, ip
 80008c8:	2101      	movs	r1, #1
 80008ca:	fbb4 f6f8 	udiv	r6, r4, r8
 80008ce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008d2:	fb08 4416 	mls	r4, r8, r6, r4
 80008d6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008da:	fb07 f006 	mul.w	r0, r7, r6
 80008de:	4298      	cmp	r0, r3
 80008e0:	d908      	bls.n	80008f4 <__udivmoddi4+0x11c>
 80008e2:	eb1c 0303 	adds.w	r3, ip, r3
 80008e6:	f106 34ff 	add.w	r4, r6, #4294967295
 80008ea:	d202      	bcs.n	80008f2 <__udivmoddi4+0x11a>
 80008ec:	4298      	cmp	r0, r3
 80008ee:	f200 80cd 	bhi.w	8000a8c <__udivmoddi4+0x2b4>
 80008f2:	4626      	mov	r6, r4
 80008f4:	1a1c      	subs	r4, r3, r0
 80008f6:	fa1f f38e 	uxth.w	r3, lr
 80008fa:	fbb4 f0f8 	udiv	r0, r4, r8
 80008fe:	fb08 4410 	mls	r4, r8, r0, r4
 8000902:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000906:	fb00 f707 	mul.w	r7, r0, r7
 800090a:	429f      	cmp	r7, r3
 800090c:	d908      	bls.n	8000920 <__udivmoddi4+0x148>
 800090e:	eb1c 0303 	adds.w	r3, ip, r3
 8000912:	f100 34ff 	add.w	r4, r0, #4294967295
 8000916:	d202      	bcs.n	800091e <__udivmoddi4+0x146>
 8000918:	429f      	cmp	r7, r3
 800091a:	f200 80b0 	bhi.w	8000a7e <__udivmoddi4+0x2a6>
 800091e:	4620      	mov	r0, r4
 8000920:	1bdb      	subs	r3, r3, r7
 8000922:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000926:	e7a5      	b.n	8000874 <__udivmoddi4+0x9c>
 8000928:	f1c1 0620 	rsb	r6, r1, #32
 800092c:	408b      	lsls	r3, r1
 800092e:	fa22 f706 	lsr.w	r7, r2, r6
 8000932:	431f      	orrs	r7, r3
 8000934:	fa20 fc06 	lsr.w	ip, r0, r6
 8000938:	fa04 f301 	lsl.w	r3, r4, r1
 800093c:	ea43 030c 	orr.w	r3, r3, ip
 8000940:	40f4      	lsrs	r4, r6
 8000942:	fa00 f801 	lsl.w	r8, r0, r1
 8000946:	0c38      	lsrs	r0, r7, #16
 8000948:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800094c:	fbb4 fef0 	udiv	lr, r4, r0
 8000950:	fa1f fc87 	uxth.w	ip, r7
 8000954:	fb00 441e 	mls	r4, r0, lr, r4
 8000958:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800095c:	fb0e f90c 	mul.w	r9, lr, ip
 8000960:	45a1      	cmp	r9, r4
 8000962:	fa02 f201 	lsl.w	r2, r2, r1
 8000966:	d90a      	bls.n	800097e <__udivmoddi4+0x1a6>
 8000968:	193c      	adds	r4, r7, r4
 800096a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800096e:	f080 8084 	bcs.w	8000a7a <__udivmoddi4+0x2a2>
 8000972:	45a1      	cmp	r9, r4
 8000974:	f240 8081 	bls.w	8000a7a <__udivmoddi4+0x2a2>
 8000978:	f1ae 0e02 	sub.w	lr, lr, #2
 800097c:	443c      	add	r4, r7
 800097e:	eba4 0409 	sub.w	r4, r4, r9
 8000982:	fa1f f983 	uxth.w	r9, r3
 8000986:	fbb4 f3f0 	udiv	r3, r4, r0
 800098a:	fb00 4413 	mls	r4, r0, r3, r4
 800098e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000992:	fb03 fc0c 	mul.w	ip, r3, ip
 8000996:	45a4      	cmp	ip, r4
 8000998:	d907      	bls.n	80009aa <__udivmoddi4+0x1d2>
 800099a:	193c      	adds	r4, r7, r4
 800099c:	f103 30ff 	add.w	r0, r3, #4294967295
 80009a0:	d267      	bcs.n	8000a72 <__udivmoddi4+0x29a>
 80009a2:	45a4      	cmp	ip, r4
 80009a4:	d965      	bls.n	8000a72 <__udivmoddi4+0x29a>
 80009a6:	3b02      	subs	r3, #2
 80009a8:	443c      	add	r4, r7
 80009aa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80009ae:	fba0 9302 	umull	r9, r3, r0, r2
 80009b2:	eba4 040c 	sub.w	r4, r4, ip
 80009b6:	429c      	cmp	r4, r3
 80009b8:	46ce      	mov	lr, r9
 80009ba:	469c      	mov	ip, r3
 80009bc:	d351      	bcc.n	8000a62 <__udivmoddi4+0x28a>
 80009be:	d04e      	beq.n	8000a5e <__udivmoddi4+0x286>
 80009c0:	b155      	cbz	r5, 80009d8 <__udivmoddi4+0x200>
 80009c2:	ebb8 030e 	subs.w	r3, r8, lr
 80009c6:	eb64 040c 	sbc.w	r4, r4, ip
 80009ca:	fa04 f606 	lsl.w	r6, r4, r6
 80009ce:	40cb      	lsrs	r3, r1
 80009d0:	431e      	orrs	r6, r3
 80009d2:	40cc      	lsrs	r4, r1
 80009d4:	e9c5 6400 	strd	r6, r4, [r5]
 80009d8:	2100      	movs	r1, #0
 80009da:	e750      	b.n	800087e <__udivmoddi4+0xa6>
 80009dc:	f1c2 0320 	rsb	r3, r2, #32
 80009e0:	fa20 f103 	lsr.w	r1, r0, r3
 80009e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80009e8:	fa24 f303 	lsr.w	r3, r4, r3
 80009ec:	4094      	lsls	r4, r2
 80009ee:	430c      	orrs	r4, r1
 80009f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009f4:	fa00 fe02 	lsl.w	lr, r0, r2
 80009f8:	fa1f f78c 	uxth.w	r7, ip
 80009fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a00:	fb08 3110 	mls	r1, r8, r0, r3
 8000a04:	0c23      	lsrs	r3, r4, #16
 8000a06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a0a:	fb00 f107 	mul.w	r1, r0, r7
 8000a0e:	4299      	cmp	r1, r3
 8000a10:	d908      	bls.n	8000a24 <__udivmoddi4+0x24c>
 8000a12:	eb1c 0303 	adds.w	r3, ip, r3
 8000a16:	f100 36ff 	add.w	r6, r0, #4294967295
 8000a1a:	d22c      	bcs.n	8000a76 <__udivmoddi4+0x29e>
 8000a1c:	4299      	cmp	r1, r3
 8000a1e:	d92a      	bls.n	8000a76 <__udivmoddi4+0x29e>
 8000a20:	3802      	subs	r0, #2
 8000a22:	4463      	add	r3, ip
 8000a24:	1a5b      	subs	r3, r3, r1
 8000a26:	b2a4      	uxth	r4, r4
 8000a28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000a2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000a30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a34:	fb01 f307 	mul.w	r3, r1, r7
 8000a38:	42a3      	cmp	r3, r4
 8000a3a:	d908      	bls.n	8000a4e <__udivmoddi4+0x276>
 8000a3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a40:	f101 36ff 	add.w	r6, r1, #4294967295
 8000a44:	d213      	bcs.n	8000a6e <__udivmoddi4+0x296>
 8000a46:	42a3      	cmp	r3, r4
 8000a48:	d911      	bls.n	8000a6e <__udivmoddi4+0x296>
 8000a4a:	3902      	subs	r1, #2
 8000a4c:	4464      	add	r4, ip
 8000a4e:	1ae4      	subs	r4, r4, r3
 8000a50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000a54:	e739      	b.n	80008ca <__udivmoddi4+0xf2>
 8000a56:	4604      	mov	r4, r0
 8000a58:	e6f0      	b.n	800083c <__udivmoddi4+0x64>
 8000a5a:	4608      	mov	r0, r1
 8000a5c:	e706      	b.n	800086c <__udivmoddi4+0x94>
 8000a5e:	45c8      	cmp	r8, r9
 8000a60:	d2ae      	bcs.n	80009c0 <__udivmoddi4+0x1e8>
 8000a62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000a66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000a6a:	3801      	subs	r0, #1
 8000a6c:	e7a8      	b.n	80009c0 <__udivmoddi4+0x1e8>
 8000a6e:	4631      	mov	r1, r6
 8000a70:	e7ed      	b.n	8000a4e <__udivmoddi4+0x276>
 8000a72:	4603      	mov	r3, r0
 8000a74:	e799      	b.n	80009aa <__udivmoddi4+0x1d2>
 8000a76:	4630      	mov	r0, r6
 8000a78:	e7d4      	b.n	8000a24 <__udivmoddi4+0x24c>
 8000a7a:	46d6      	mov	lr, sl
 8000a7c:	e77f      	b.n	800097e <__udivmoddi4+0x1a6>
 8000a7e:	4463      	add	r3, ip
 8000a80:	3802      	subs	r0, #2
 8000a82:	e74d      	b.n	8000920 <__udivmoddi4+0x148>
 8000a84:	4606      	mov	r6, r0
 8000a86:	4623      	mov	r3, r4
 8000a88:	4608      	mov	r0, r1
 8000a8a:	e70f      	b.n	80008ac <__udivmoddi4+0xd4>
 8000a8c:	3e02      	subs	r6, #2
 8000a8e:	4463      	add	r3, ip
 8000a90:	e730      	b.n	80008f4 <__udivmoddi4+0x11c>
 8000a92:	bf00      	nop

08000a94 <__aeabi_idiv0>:
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af02      	add	r7, sp, #8
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000a9e:	4b43      	ldr	r3, [pc, #268]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000aa0:	4a43      	ldr	r2, [pc, #268]	@ (8000bb0 <MX_FDCAN1_Init+0x118>)
 8000aa2:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000aa4:	4b41      	ldr	r3, [pc, #260]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000aaa:	4b40      	ldr	r3, [pc, #256]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000ab0:	4b3e      	ldr	r3, [pc, #248]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000ab6:	4b3d      	ldr	r3, [pc, #244]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000abc:	4b3b      	ldr	r3, [pc, #236]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 10;
 8000ac2:	4b3a      	ldr	r3, [pc, #232]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000ac4:	220a      	movs	r2, #10
 8000ac6:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 8;
 8000ac8:	4b38      	ldr	r3, [pc, #224]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000aca:	2208      	movs	r2, #8
 8000acc:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8000ace:	4b37      	ldr	r3, [pc, #220]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000ad0:	2202      	movs	r2, #2
 8000ad2:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000ad4:	4b35      	ldr	r3, [pc, #212]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000ad6:	2202      	movs	r2, #2
 8000ad8:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000ada:	4b34      	ldr	r3, [pc, #208]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000adc:	2201      	movs	r2, #1
 8000ade:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 10;
 8000ae0:	4b32      	ldr	r3, [pc, #200]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000ae2:	220a      	movs	r2, #10
 8000ae4:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 2;
 8000ae6:	4b31      	ldr	r3, [pc, #196]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000ae8:	2202      	movs	r2, #2
 8000aea:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 2;
 8000aec:	4b2f      	ldr	r3, [pc, #188]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000aee:	2202      	movs	r2, #2
 8000af0:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000af2:	4b2e      	ldr	r3, [pc, #184]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8000af8:	4b2c      	ldr	r3, [pc, #176]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 1;
 8000afe:	4b2b      	ldr	r3, [pc, #172]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000b00:	2201      	movs	r2, #1
 8000b02:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 4;
 8000b04:	4b29      	ldr	r3, [pc, #164]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000b06:	2204      	movs	r2, #4
 8000b08:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000b0a:	4b28      	ldr	r3, [pc, #160]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000b0c:	2204      	movs	r2, #4
 8000b0e:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000b10:	4b26      	ldr	r3, [pc, #152]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000b16:	4b25      	ldr	r3, [pc, #148]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000b18:	2204      	movs	r2, #4
 8000b1a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000b1c:	4b23      	ldr	r3, [pc, #140]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000b22:	4b22      	ldr	r3, [pc, #136]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000b24:	2204      	movs	r2, #4
 8000b26:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000b28:	4b20      	ldr	r3, [pc, #128]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000b2e:	4b1f      	ldr	r3, [pc, #124]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 1;
 8000b34:	4b1d      	ldr	r3, [pc, #116]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000b36:	2201      	movs	r2, #1
 8000b38:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000b3a:	4b1c      	ldr	r3, [pc, #112]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000b40:	4b1a      	ldr	r3, [pc, #104]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000b42:	2204      	movs	r2, #4
 8000b44:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000b46:	4819      	ldr	r0, [pc, #100]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000b48:	f003 fa98 	bl	800407c <HAL_FDCAN_Init>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <MX_FDCAN1_Init+0xbe>
  {
    Error_Handler();
 8000b52:	f001 f87f 	bl	8001c54 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
//配置RX滤波
	hfdcan1_RX_Filter.IdType = FDCAN_EXTENDED_ID;       //标准 IDFDCAN_STANDARD_ID
 8000b56:	4b17      	ldr	r3, [pc, #92]	@ (8000bb4 <MX_FDCAN1_Init+0x11c>)
 8000b58:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000b5c:	601a      	str	r2, [r3, #0]
	hfdcan1_RX_Filter.FilterIndex = 0;                           //滤波器索�?????????
 8000b5e:	4b15      	ldr	r3, [pc, #84]	@ (8000bb4 <MX_FDCAN1_Init+0x11c>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	605a      	str	r2, [r3, #4]
	hfdcan1_RX_Filter.FilterType = FDCAN_FILTER_MASK;            //滤波器类�?????????
 8000b64:	4b13      	ldr	r3, [pc, #76]	@ (8000bb4 <MX_FDCAN1_Init+0x11c>)
 8000b66:	2202      	movs	r2, #2
 8000b68:	609a      	str	r2, [r3, #8]
	hfdcan1_RX_Filter.FilterConfig = FDCAN_FILTER_TO_RXFIFO0; //过滤�?????????0关联到FIFO0
 8000b6a:	4b12      	ldr	r3, [pc, #72]	@ (8000bb4 <MX_FDCAN1_Init+0x11c>)
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	60da      	str	r2, [r3, #12]
	hfdcan1_RX_Filter.FilterID1 = 0x000;                               //32位ID
 8000b70:	4b10      	ldr	r3, [pc, #64]	@ (8000bb4 <MX_FDCAN1_Init+0x11c>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	611a      	str	r2, [r3, #16]
	hfdcan1_RX_Filter.FilterID2 = 0x000; //如果FDCAN配置为传统模式的话，这里�?????????32位掩�?????????
 8000b76:	4b0f      	ldr	r3, [pc, #60]	@ (8000bb4 <MX_FDCAN1_Init+0x11c>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	615a      	str	r2, [r3, #20]
	HAL_FDCAN_ConfigFilter(&hfdcan1, &hfdcan1_RX_Filter);               //滤波器初始化
 8000b7c:	490d      	ldr	r1, [pc, #52]	@ (8000bb4 <MX_FDCAN1_Init+0x11c>)
 8000b7e:	480b      	ldr	r0, [pc, #44]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000b80:	f003 fc5a 	bl	8004438 <HAL_FDCAN_ConfigFilter>
	HAL_FDCAN_ConfigGlobalFilter(&hfdcan1, FDCAN_REJECT, FDCAN_REJECT, ENABLE,
 8000b84:	2301      	movs	r3, #1
 8000b86:	9300      	str	r3, [sp, #0]
 8000b88:	2301      	movs	r3, #1
 8000b8a:	2202      	movs	r2, #2
 8000b8c:	2102      	movs	r1, #2
 8000b8e:	4807      	ldr	r0, [pc, #28]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000b90:	f003 fcc8 	bl	8004524 <HAL_FDCAN_ConfigGlobalFilter>
			ENABLE);
	HAL_FDCAN_Start(&hfdcan1);                               //�????启FDCAN
 8000b94:	4805      	ldr	r0, [pc, #20]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000b96:	f003 fcf2 	bl	800457e <HAL_FDCAN_Start>
	HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0);
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	2101      	movs	r1, #1
 8000b9e:	4803      	ldr	r0, [pc, #12]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000ba0:	f003 fee0 	bl	8004964 <HAL_FDCAN_ActivateNotification>
  /* USER CODE END FDCAN1_Init 2 */

}
 8000ba4:	bf00      	nop
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	240002b8 	.word	0x240002b8
 8000bb0:	4000a000 	.word	0x4000a000
 8000bb4:	24000248 	.word	0x24000248

08000bb8 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b0b8      	sub	sp, #224	@ 0xe0
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc0:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	601a      	str	r2, [r3, #0]
 8000bc8:	605a      	str	r2, [r3, #4]
 8000bca:	609a      	str	r2, [r3, #8]
 8000bcc:	60da      	str	r2, [r3, #12]
 8000bce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bd0:	f107 0310 	add.w	r3, r7, #16
 8000bd4:	22b8      	movs	r2, #184	@ 0xb8
 8000bd6:	2100      	movs	r1, #0
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f00e fe2e 	bl	800f83a <memset>
  if(fdcanHandle->Instance==FDCAN1)
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	4a2a      	ldr	r2, [pc, #168]	@ (8000c8c <HAL_FDCAN_MspInit+0xd4>)
 8000be4:	4293      	cmp	r3, r2
 8000be6:	d14c      	bne.n	8000c82 <HAL_FDCAN_MspInit+0xca>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000be8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000bec:	f04f 0300 	mov.w	r3, #0
 8000bf0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bf8:	f107 0310 	add.w	r3, r7, #16
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f005 fd6f 	bl	80066e0 <HAL_RCCEx_PeriphCLKConfig>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d001      	beq.n	8000c0c <HAL_FDCAN_MspInit+0x54>
    {
      Error_Handler();
 8000c08:	f001 f824 	bl	8001c54 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000c0c:	4b20      	ldr	r3, [pc, #128]	@ (8000c90 <HAL_FDCAN_MspInit+0xd8>)
 8000c0e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8000c12:	4a1f      	ldr	r2, [pc, #124]	@ (8000c90 <HAL_FDCAN_MspInit+0xd8>)
 8000c14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c18:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8000c1c:	4b1c      	ldr	r3, [pc, #112]	@ (8000c90 <HAL_FDCAN_MspInit+0xd8>)
 8000c1e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8000c22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000c26:	60fb      	str	r3, [r7, #12]
 8000c28:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c2a:	4b19      	ldr	r3, [pc, #100]	@ (8000c90 <HAL_FDCAN_MspInit+0xd8>)
 8000c2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c30:	4a17      	ldr	r2, [pc, #92]	@ (8000c90 <HAL_FDCAN_MspInit+0xd8>)
 8000c32:	f043 0308 	orr.w	r3, r3, #8
 8000c36:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c3a:	4b15      	ldr	r3, [pc, #84]	@ (8000c90 <HAL_FDCAN_MspInit+0xd8>)
 8000c3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c40:	f003 0308 	and.w	r3, r3, #8
 8000c44:	60bb      	str	r3, [r7, #8]
 8000c46:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000c48:	2303      	movs	r3, #3
 8000c4a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c4e:	2302      	movs	r3, #2
 8000c50:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c54:	2300      	movs	r3, #0
 8000c56:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000c60:	2309      	movs	r3, #9
 8000c62:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c66:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	4809      	ldr	r0, [pc, #36]	@ (8000c94 <HAL_FDCAN_MspInit+0xdc>)
 8000c6e:	f004 fbef 	bl	8005450 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 2, 0);
 8000c72:	2200      	movs	r2, #0
 8000c74:	2102      	movs	r1, #2
 8000c76:	2013      	movs	r0, #19
 8000c78:	f002 fbef 	bl	800345a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000c7c:	2013      	movs	r0, #19
 8000c7e:	f002 fc06 	bl	800348e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8000c82:	bf00      	nop
 8000c84:	37e0      	adds	r7, #224	@ 0xe0
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	4000a000 	.word	0x4000a000
 8000c90:	58024400 	.word	0x58024400
 8000c94:	58020c00 	.word	0x58020c00

08000c98 <FDCAN_Send_Msg>:
  }
}

/* USER CODE BEGIN 1 */
void FDCAN_Send_Msg(uint8_t *msg, uint32_t len)
{
 8000c98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000c9c:	b087      	sub	sp, #28
 8000c9e:	af00      	add	r7, sp, #0
 8000ca0:	6078      	str	r0, [r7, #4]
 8000ca2:	6039      	str	r1, [r7, #0]
 8000ca4:	466b      	mov	r3, sp
 8000ca6:	461e      	mov	r6, r3
	uint8_t i = 0, j = 0, k = 0, l = 0, packNum = 0;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	75fb      	strb	r3, [r7, #23]
 8000cac:	2300      	movs	r3, #0
 8000cae:	753b      	strb	r3, [r7, #20]
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	74fb      	strb	r3, [r7, #19]
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	75bb      	strb	r3, [r7, #22]
 8000cb8:	2300      	movs	r3, #0
 8000cba:	757b      	strb	r3, [r7, #21]
	uint8_t TxData[len];
 8000cbc:	6839      	ldr	r1, [r7, #0]
 8000cbe:	460b      	mov	r3, r1
 8000cc0:	3b01      	subs	r3, #1
 8000cc2:	60fb      	str	r3, [r7, #12]
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	4688      	mov	r8, r1
 8000cc8:	4699      	mov	r9, r3
 8000cca:	f04f 0200 	mov.w	r2, #0
 8000cce:	f04f 0300 	mov.w	r3, #0
 8000cd2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000cd6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000cda:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000cde:	2300      	movs	r3, #0
 8000ce0:	460c      	mov	r4, r1
 8000ce2:	461d      	mov	r5, r3
 8000ce4:	f04f 0200 	mov.w	r2, #0
 8000ce8:	f04f 0300 	mov.w	r3, #0
 8000cec:	00eb      	lsls	r3, r5, #3
 8000cee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000cf2:	00e2      	lsls	r2, r4, #3
 8000cf4:	1dcb      	adds	r3, r1, #7
 8000cf6:	08db      	lsrs	r3, r3, #3
 8000cf8:	00db      	lsls	r3, r3, #3
 8000cfa:	ebad 0d03 	sub.w	sp, sp, r3
 8000cfe:	466b      	mov	r3, sp
 8000d00:	3300      	adds	r3, #0
 8000d02:	60bb      	str	r3, [r7, #8]
	j = len - 2;
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	b2db      	uxtb	r3, r3
 8000d08:	3b02      	subs	r3, #2
 8000d0a:	753b      	strb	r3, [r7, #20]
	// 除去ID地址和功能码后的数据长度
	TxData[0] = msg[1];
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	785a      	ldrb	r2, [r3, #1]
 8000d10:	68bb      	ldr	r3, [r7, #8]
 8000d12:	701a      	strb	r2, [r3, #0]
	// 发�?�数�?????????
	while (i < j)
 8000d14:	e062      	b.n	8000ddc <FDCAN_Send_Msg+0x144>
	{
		// 数据个数
		k = j - i;
 8000d16:	7d3a      	ldrb	r2, [r7, #20]
 8000d18:	7dfb      	ldrb	r3, [r7, #23]
 8000d1a:	1ad3      	subs	r3, r2, r3
 8000d1c:	74fb      	strb	r3, [r7, #19]
		fdcan_TxHeader.Identifier = ((uint32_t) msg[0] << 8)
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	021a      	lsls	r2, r3, #8
				| (uint32_t) packNum;  //32位ID   0x00
 8000d24:	7d7b      	ldrb	r3, [r7, #21]
 8000d26:	4313      	orrs	r3, r2
		fdcan_TxHeader.Identifier = ((uint32_t) msg[0] << 8)
 8000d28:	4a31      	ldr	r2, [pc, #196]	@ (8000df0 <FDCAN_Send_Msg+0x158>)
 8000d2a:	6013      	str	r3, [r2, #0]
		fdcan_TxHeader.IdType = FDCAN_EXTENDED_ID;      //ID   FDCAN_STANDARD_ID
 8000d2c:	4b30      	ldr	r3, [pc, #192]	@ (8000df0 <FDCAN_Send_Msg+0x158>)
 8000d2e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d32:	605a      	str	r2, [r3, #4]
		fdcan_TxHeader.TxFrameType = FDCAN_DATA_FRAME;             //数据�?????????
 8000d34:	4b2e      	ldr	r3, [pc, #184]	@ (8000df0 <FDCAN_Send_Msg+0x158>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	609a      	str	r2, [r3, #8]
		//    fdcan_TxHeader.DataLength=len;              //数据长度
		fdcan_TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000d3a:	4b2d      	ldr	r3, [pc, #180]	@ (8000df0 <FDCAN_Send_Msg+0x158>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	611a      	str	r2, [r3, #16]
		fdcan_TxHeader.BitRateSwitch = FDCAN_BRS_OFF;               //关闭速率切换
 8000d40:	4b2b      	ldr	r3, [pc, #172]	@ (8000df0 <FDCAN_Send_Msg+0x158>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	615a      	str	r2, [r3, #20]
		fdcan_TxHeader.FDFormat = FDCAN_CLASSIC_CAN;                //传统的CAN模式
 8000d46:	4b2a      	ldr	r3, [pc, #168]	@ (8000df0 <FDCAN_Send_Msg+0x158>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	619a      	str	r2, [r3, #24]
		fdcan_TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;  //无发送事�?????????
 8000d4c:	4b28      	ldr	r3, [pc, #160]	@ (8000df0 <FDCAN_Send_Msg+0x158>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	61da      	str	r2, [r3, #28]
		fdcan_TxHeader.MessageMarker = 0;
 8000d52:	4b27      	ldr	r3, [pc, #156]	@ (8000df0 <FDCAN_Send_Msg+0x158>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	621a      	str	r2, [r3, #32]
		//小于8字节命令
		if (k < 8)
 8000d58:	7cfb      	ldrb	r3, [r7, #19]
 8000d5a:	2b07      	cmp	r3, #7
 8000d5c:	d81b      	bhi.n	8000d96 <FDCAN_Send_Msg+0xfe>
		{
			for (l = 0; l < k; l++, i++)
 8000d5e:	2300      	movs	r3, #0
 8000d60:	75bb      	strb	r3, [r7, #22]
 8000d62:	e00e      	b.n	8000d82 <FDCAN_Send_Msg+0xea>
			{
				TxData[l + 1] = msg[i + 2];
 8000d64:	7dfb      	ldrb	r3, [r7, #23]
 8000d66:	3302      	adds	r3, #2
 8000d68:	687a      	ldr	r2, [r7, #4]
 8000d6a:	441a      	add	r2, r3
 8000d6c:	7dbb      	ldrb	r3, [r7, #22]
 8000d6e:	3301      	adds	r3, #1
 8000d70:	7811      	ldrb	r1, [r2, #0]
 8000d72:	68ba      	ldr	r2, [r7, #8]
 8000d74:	54d1      	strb	r1, [r2, r3]
			for (l = 0; l < k; l++, i++)
 8000d76:	7dbb      	ldrb	r3, [r7, #22]
 8000d78:	3301      	adds	r3, #1
 8000d7a:	75bb      	strb	r3, [r7, #22]
 8000d7c:	7dfb      	ldrb	r3, [r7, #23]
 8000d7e:	3301      	adds	r3, #1
 8000d80:	75fb      	strb	r3, [r7, #23]
 8000d82:	7dba      	ldrb	r2, [r7, #22]
 8000d84:	7cfb      	ldrb	r3, [r7, #19]
 8000d86:	429a      	cmp	r2, r3
 8000d88:	d3ec      	bcc.n	8000d64 <FDCAN_Send_Msg+0xcc>
			}
			fdcan_TxHeader.DataLength = k + 1;
 8000d8a:	7cfb      	ldrb	r3, [r7, #19]
 8000d8c:	3301      	adds	r3, #1
 8000d8e:	461a      	mov	r2, r3
 8000d90:	4b17      	ldr	r3, [pc, #92]	@ (8000df0 <FDCAN_Send_Msg+0x158>)
 8000d92:	60da      	str	r2, [r3, #12]
 8000d94:	e017      	b.n	8000dc6 <FDCAN_Send_Msg+0x12e>
		}
		// 大于8字节命令，分包发送，每包数据�?????????多发�?????????8个字�?????????
		else
		{
			for (l = 0; l < 7; l++, i++)
 8000d96:	2300      	movs	r3, #0
 8000d98:	75bb      	strb	r3, [r7, #22]
 8000d9a:	e00e      	b.n	8000dba <FDCAN_Send_Msg+0x122>
			{
				TxData[l + 1] = msg[i + 2];
 8000d9c:	7dfb      	ldrb	r3, [r7, #23]
 8000d9e:	3302      	adds	r3, #2
 8000da0:	687a      	ldr	r2, [r7, #4]
 8000da2:	441a      	add	r2, r3
 8000da4:	7dbb      	ldrb	r3, [r7, #22]
 8000da6:	3301      	adds	r3, #1
 8000da8:	7811      	ldrb	r1, [r2, #0]
 8000daa:	68ba      	ldr	r2, [r7, #8]
 8000dac:	54d1      	strb	r1, [r2, r3]
			for (l = 0; l < 7; l++, i++)
 8000dae:	7dbb      	ldrb	r3, [r7, #22]
 8000db0:	3301      	adds	r3, #1
 8000db2:	75bb      	strb	r3, [r7, #22]
 8000db4:	7dfb      	ldrb	r3, [r7, #23]
 8000db6:	3301      	adds	r3, #1
 8000db8:	75fb      	strb	r3, [r7, #23]
 8000dba:	7dbb      	ldrb	r3, [r7, #22]
 8000dbc:	2b06      	cmp	r3, #6
 8000dbe:	d9ed      	bls.n	8000d9c <FDCAN_Send_Msg+0x104>
			}
			fdcan_TxHeader.DataLength = 8;
 8000dc0:	4b0b      	ldr	r3, [pc, #44]	@ (8000df0 <FDCAN_Send_Msg+0x158>)
 8000dc2:	2208      	movs	r2, #8
 8000dc4:	60da      	str	r2, [r3, #12]
		}

		// 发�?�数�???????
		HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &fdcan_TxHeader, TxData);
 8000dc6:	68ba      	ldr	r2, [r7, #8]
 8000dc8:	4909      	ldr	r1, [pc, #36]	@ (8000df0 <FDCAN_Send_Msg+0x158>)
 8000dca:	480a      	ldr	r0, [pc, #40]	@ (8000df4 <FDCAN_Send_Msg+0x15c>)
 8000dcc:	f003 fc02 	bl	80045d4 <HAL_FDCAN_AddMessageToTxFifoQ>
		HAL_Delay(5);  //发第二帧数据的关键，若无延时，不发第二帧数据
 8000dd0:	2005      	movs	r0, #5
 8000dd2:	f002 fa43 	bl	800325c <HAL_Delay>
		// 记录发�?�的第几包的数据
		++packNum;
 8000dd6:	7d7b      	ldrb	r3, [r7, #21]
 8000dd8:	3301      	adds	r3, #1
 8000dda:	757b      	strb	r3, [r7, #21]
	while (i < j)
 8000ddc:	7dfa      	ldrb	r2, [r7, #23]
 8000dde:	7d3b      	ldrb	r3, [r7, #20]
 8000de0:	429a      	cmp	r2, r3
 8000de2:	d398      	bcc.n	8000d16 <FDCAN_Send_Msg+0x7e>
 8000de4:	46b5      	mov	sp, r6
	}
}
 8000de6:	bf00      	nop
 8000de8:	371c      	adds	r7, #28
 8000dea:	46bd      	mov	sp, r7
 8000dec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000df0:	24000268 	.word	0x24000268
 8000df4:	240002b8 	.word	0x240002b8

08000df8 <HAL_FDCAN_RxFifo0Callback>:
extern bool Call_Flag;

//	多机同步运动接收标志位，默认是0
uint8_t broadcast_flag = 0;
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
 8000e00:	6039      	str	r1, [r7, #0]
//	提取FIFO中的数据,
	HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &fdcan_RxHeader, rxdata);
 8000e02:	4b42      	ldr	r3, [pc, #264]	@ (8000f0c <HAL_FDCAN_RxFifo0Callback+0x114>)
 8000e04:	4a42      	ldr	r2, [pc, #264]	@ (8000f10 <HAL_FDCAN_RxFifo0Callback+0x118>)
 8000e06:	2140      	movs	r1, #64	@ 0x40
 8000e08:	4842      	ldr	r0, [pc, #264]	@ (8000f14 <HAL_FDCAN_RxFifo0Callback+0x11c>)
 8000e0a:	f003 fc3f 	bl	800468c <HAL_FDCAN_GetRxMessage>
	static uint8_t broadcast_status = 0;
	if(fdcan_RxHeader.Identifier / 256 == 1)
 8000e0e:	4b40      	ldr	r3, [pc, #256]	@ (8000f10 <HAL_FDCAN_RxFifo0Callback+0x118>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000e16:	2bff      	cmp	r3, #255	@ 0xff
 8000e18:	d82f      	bhi.n	8000e7a <HAL_FDCAN_RxFifo0Callback+0x82>
	{
		if(broadcast_status == 0)
 8000e1a:	4b3f      	ldr	r3, [pc, #252]	@ (8000f18 <HAL_FDCAN_RxFifo0Callback+0x120>)
 8000e1c:	781b      	ldrb	r3, [r3, #0]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d10a      	bne.n	8000e38 <HAL_FDCAN_RxFifo0Callback+0x40>
		{
			if(rxdata[0] == 0xFF)
 8000e22:	4b3a      	ldr	r3, [pc, #232]	@ (8000f0c <HAL_FDCAN_RxFifo0Callback+0x114>)
 8000e24:	781b      	ldrb	r3, [r3, #0]
 8000e26:	2bff      	cmp	r3, #255	@ 0xff
 8000e28:	d103      	bne.n	8000e32 <HAL_FDCAN_RxFifo0Callback+0x3a>
				broadcast_status = 1;
 8000e2a:	4b3b      	ldr	r3, [pc, #236]	@ (8000f18 <HAL_FDCAN_RxFifo0Callback+0x120>)
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	701a      	strb	r2, [r3, #0]
 8000e30:	e002      	b.n	8000e38 <HAL_FDCAN_RxFifo0Callback+0x40>
			else
				broadcast_status = 0;
 8000e32:	4b39      	ldr	r3, [pc, #228]	@ (8000f18 <HAL_FDCAN_RxFifo0Callback+0x120>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	701a      	strb	r2, [r3, #0]
		}
		if (broadcast_status == 1)
 8000e38:	4b37      	ldr	r3, [pc, #220]	@ (8000f18 <HAL_FDCAN_RxFifo0Callback+0x120>)
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	2b01      	cmp	r3, #1
 8000e3e:	d10a      	bne.n	8000e56 <HAL_FDCAN_RxFifo0Callback+0x5e>
		{
			if(rxdata[1] == 0x02)
 8000e40:	4b32      	ldr	r3, [pc, #200]	@ (8000f0c <HAL_FDCAN_RxFifo0Callback+0x114>)
 8000e42:	785b      	ldrb	r3, [r3, #1]
 8000e44:	2b02      	cmp	r3, #2
 8000e46:	d103      	bne.n	8000e50 <HAL_FDCAN_RxFifo0Callback+0x58>
				broadcast_status = 2;
 8000e48:	4b33      	ldr	r3, [pc, #204]	@ (8000f18 <HAL_FDCAN_RxFifo0Callback+0x120>)
 8000e4a:	2202      	movs	r2, #2
 8000e4c:	701a      	strb	r2, [r3, #0]
 8000e4e:	e002      	b.n	8000e56 <HAL_FDCAN_RxFifo0Callback+0x5e>
			else
				broadcast_status = 0;
 8000e50:	4b31      	ldr	r3, [pc, #196]	@ (8000f18 <HAL_FDCAN_RxFifo0Callback+0x120>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	701a      	strb	r2, [r3, #0]
		}
		if(broadcast_status == 2)
 8000e56:	4b30      	ldr	r3, [pc, #192]	@ (8000f18 <HAL_FDCAN_RxFifo0Callback+0x120>)
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	2b02      	cmp	r3, #2
 8000e5c:	d10d      	bne.n	8000e7a <HAL_FDCAN_RxFifo0Callback+0x82>
		{
			if(rxdata[2] == 0x6B){
 8000e5e:	4b2b      	ldr	r3, [pc, #172]	@ (8000f0c <HAL_FDCAN_RxFifo0Callback+0x114>)
 8000e60:	789b      	ldrb	r3, [r3, #2]
 8000e62:	2b6b      	cmp	r3, #107	@ 0x6b
 8000e64:	d106      	bne.n	8000e74 <HAL_FDCAN_RxFifo0Callback+0x7c>
				broadcast_status = 0;
 8000e66:	4b2c      	ldr	r3, [pc, #176]	@ (8000f18 <HAL_FDCAN_RxFifo0Callback+0x120>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	701a      	strb	r2, [r3, #0]
				broadcast_flag = 1;
 8000e6c:	4b2b      	ldr	r3, [pc, #172]	@ (8000f1c <HAL_FDCAN_RxFifo0Callback+0x124>)
 8000e6e:	2201      	movs	r2, #1
 8000e70:	701a      	strb	r2, [r3, #0]
 8000e72:	e002      	b.n	8000e7a <HAL_FDCAN_RxFifo0Callback+0x82>
			}
			else
				broadcast_status = 0;
 8000e74:	4b28      	ldr	r3, [pc, #160]	@ (8000f18 <HAL_FDCAN_RxFifo0Callback+0x120>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	701a      	strb	r2, [r3, #0]
		}
	}
	if (Call_Flag == true)
 8000e7a:	4b29      	ldr	r3, [pc, #164]	@ (8000f20 <HAL_FDCAN_RxFifo0Callback+0x128>)
 8000e7c:	781b      	ldrb	r3, [r3, #0]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d03a      	beq.n	8000ef8 <HAL_FDCAN_RxFifo0Callback+0x100>
	{
//	底盘步进电机帧头
		if (fdcan_RxHeader.Identifier / 256 == 3)
 8000e82:	4b23      	ldr	r3, [pc, #140]	@ (8000f10 <HAL_FDCAN_RxFifo0Callback+0x118>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f5a3 7340 	sub.w	r3, r3, #768	@ 0x300
 8000e8a:	2bff      	cmp	r3, #255	@ 0xff
 8000e8c:	d834      	bhi.n	8000ef8 <HAL_FDCAN_RxFifo0Callback+0x100>
		{
			if (RxState == 0)
 8000e8e:	4b25      	ldr	r3, [pc, #148]	@ (8000f24 <HAL_FDCAN_RxFifo0Callback+0x12c>)
 8000e90:	781b      	ldrb	r3, [r3, #0]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d112      	bne.n	8000ebc <HAL_FDCAN_RxFifo0Callback+0xc4>
			{
				if (rxdata[0] == 0xFD)
 8000e96:	4b1d      	ldr	r3, [pc, #116]	@ (8000f0c <HAL_FDCAN_RxFifo0Callback+0x114>)
 8000e98:	781b      	ldrb	r3, [r3, #0]
 8000e9a:	2bfd      	cmp	r3, #253	@ 0xfd
 8000e9c:	d103      	bne.n	8000ea6 <HAL_FDCAN_RxFifo0Callback+0xae>
				{
					RxState = 1;
 8000e9e:	4b21      	ldr	r3, [pc, #132]	@ (8000f24 <HAL_FDCAN_RxFifo0Callback+0x12c>)
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	701a      	strb	r2, [r3, #0]
 8000ea4:	e00a      	b.n	8000ebc <HAL_FDCAN_RxFifo0Callback+0xc4>
				}
				else if(rxdata[0] == 0x37)
 8000ea6:	4b19      	ldr	r3, [pc, #100]	@ (8000f0c <HAL_FDCAN_RxFifo0Callback+0x114>)
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	2b37      	cmp	r3, #55	@ 0x37
 8000eac:	d103      	bne.n	8000eb6 <HAL_FDCAN_RxFifo0Callback+0xbe>
				{
					RxState = 3;
 8000eae:	4b1d      	ldr	r3, [pc, #116]	@ (8000f24 <HAL_FDCAN_RxFifo0Callback+0x12c>)
 8000eb0:	2203      	movs	r2, #3
 8000eb2:	701a      	strb	r2, [r3, #0]
 8000eb4:	e002      	b.n	8000ebc <HAL_FDCAN_RxFifo0Callback+0xc4>
				}
				else
					RxState = 0;
 8000eb6:	4b1b      	ldr	r3, [pc, #108]	@ (8000f24 <HAL_FDCAN_RxFifo0Callback+0x12c>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	701a      	strb	r2, [r3, #0]
			}
			if (RxState == 1)
 8000ebc:	4b19      	ldr	r3, [pc, #100]	@ (8000f24 <HAL_FDCAN_RxFifo0Callback+0x12c>)
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	2b01      	cmp	r3, #1
 8000ec2:	d106      	bne.n	8000ed2 <HAL_FDCAN_RxFifo0Callback+0xda>
			{
				if (rxdata[1] == 0x9F)
 8000ec4:	4b11      	ldr	r3, [pc, #68]	@ (8000f0c <HAL_FDCAN_RxFifo0Callback+0x114>)
 8000ec6:	785b      	ldrb	r3, [r3, #1]
 8000ec8:	2b9f      	cmp	r3, #159	@ 0x9f
 8000eca:	d102      	bne.n	8000ed2 <HAL_FDCAN_RxFifo0Callback+0xda>
				{
					RxState = 2;
 8000ecc:	4b15      	ldr	r3, [pc, #84]	@ (8000f24 <HAL_FDCAN_RxFifo0Callback+0x12c>)
 8000ece:	2202      	movs	r2, #2
 8000ed0:	701a      	strb	r2, [r3, #0]
				}
			}
			if (RxState == 2)
 8000ed2:	4b14      	ldr	r3, [pc, #80]	@ (8000f24 <HAL_FDCAN_RxFifo0Callback+0x12c>)
 8000ed4:	781b      	ldrb	r3, [r3, #0]
 8000ed6:	2b02      	cmp	r3, #2
 8000ed8:	d10e      	bne.n	8000ef8 <HAL_FDCAN_RxFifo0Callback+0x100>
			{
				if (rxdata[2] == 0x6B)
 8000eda:	4b0c      	ldr	r3, [pc, #48]	@ (8000f0c <HAL_FDCAN_RxFifo0Callback+0x114>)
 8000edc:	789b      	ldrb	r3, [r3, #2]
 8000ede:	2b6b      	cmp	r3, #107	@ 0x6b
 8000ee0:	d10a      	bne.n	8000ef8 <HAL_FDCAN_RxFifo0Callback+0x100>
				{
//				到位数据接收完毕，底盘步进确认到�?
					Base_Data = true;
 8000ee2:	4b11      	ldr	r3, [pc, #68]	@ (8000f28 <HAL_FDCAN_RxFifo0Callback+0x130>)
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	701a      	strb	r2, [r3, #0]
					RxState = 0;
 8000ee8:	4b0e      	ldr	r3, [pc, #56]	@ (8000f24 <HAL_FDCAN_RxFifo0Callback+0x12c>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	701a      	strb	r2, [r3, #0]
					memset(rxdata, 0, sizeof(rxdata));
 8000eee:	2208      	movs	r2, #8
 8000ef0:	2100      	movs	r1, #0
 8000ef2:	4806      	ldr	r0, [pc, #24]	@ (8000f0c <HAL_FDCAN_RxFifo0Callback+0x114>)
 8000ef4:	f00e fca1 	bl	800f83a <memset>
					;
				}
			}
		}
	}
	HAL_FDCAN_ActivateNotification(hfdcan,
 8000ef8:	2200      	movs	r2, #0
 8000efa:	2101      	movs	r1, #1
 8000efc:	6878      	ldr	r0, [r7, #4]
 8000efe:	f003 fd31 	bl	8004964 <HAL_FDCAN_ActivateNotification>
	FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0);
}
 8000f02:	bf00      	nop
 8000f04:	3708      	adds	r7, #8
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	24000358 	.word	0x24000358
 8000f10:	2400028c 	.word	0x2400028c
 8000f14:	240002b8 	.word	0x240002b8
 8000f18:	24000363 	.word	0x24000363
 8000f1c:	24000362 	.word	0x24000362
 8000f20:	24000c22 	.word	0x24000c22
 8000f24:	24000360 	.word	0x24000360
 8000f28:	24000361 	.word	0x24000361

08000f2c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b087      	sub	sp, #28
 8000f30:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f32:	4b30      	ldr	r3, [pc, #192]	@ (8000ff4 <MX_GPIO_Init+0xc8>)
 8000f34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f38:	4a2e      	ldr	r2, [pc, #184]	@ (8000ff4 <MX_GPIO_Init+0xc8>)
 8000f3a:	f043 0310 	orr.w	r3, r3, #16
 8000f3e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f42:	4b2c      	ldr	r3, [pc, #176]	@ (8000ff4 <MX_GPIO_Init+0xc8>)
 8000f44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f48:	f003 0310 	and.w	r3, r3, #16
 8000f4c:	617b      	str	r3, [r7, #20]
 8000f4e:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f50:	4b28      	ldr	r3, [pc, #160]	@ (8000ff4 <MX_GPIO_Init+0xc8>)
 8000f52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f56:	4a27      	ldr	r2, [pc, #156]	@ (8000ff4 <MX_GPIO_Init+0xc8>)
 8000f58:	f043 0304 	orr.w	r3, r3, #4
 8000f5c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f60:	4b24      	ldr	r3, [pc, #144]	@ (8000ff4 <MX_GPIO_Init+0xc8>)
 8000f62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f66:	f003 0304 	and.w	r3, r3, #4
 8000f6a:	613b      	str	r3, [r7, #16]
 8000f6c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f6e:	4b21      	ldr	r3, [pc, #132]	@ (8000ff4 <MX_GPIO_Init+0xc8>)
 8000f70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f74:	4a1f      	ldr	r2, [pc, #124]	@ (8000ff4 <MX_GPIO_Init+0xc8>)
 8000f76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f7a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f7e:	4b1d      	ldr	r3, [pc, #116]	@ (8000ff4 <MX_GPIO_Init+0xc8>)
 8000f80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f84:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f88:	60fb      	str	r3, [r7, #12]
 8000f8a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f8c:	4b19      	ldr	r3, [pc, #100]	@ (8000ff4 <MX_GPIO_Init+0xc8>)
 8000f8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f92:	4a18      	ldr	r2, [pc, #96]	@ (8000ff4 <MX_GPIO_Init+0xc8>)
 8000f94:	f043 0301 	orr.w	r3, r3, #1
 8000f98:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f9c:	4b15      	ldr	r3, [pc, #84]	@ (8000ff4 <MX_GPIO_Init+0xc8>)
 8000f9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fa2:	f003 0301 	and.w	r3, r3, #1
 8000fa6:	60bb      	str	r3, [r7, #8]
 8000fa8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000faa:	4b12      	ldr	r3, [pc, #72]	@ (8000ff4 <MX_GPIO_Init+0xc8>)
 8000fac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fb0:	4a10      	ldr	r2, [pc, #64]	@ (8000ff4 <MX_GPIO_Init+0xc8>)
 8000fb2:	f043 0302 	orr.w	r3, r3, #2
 8000fb6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fba:	4b0e      	ldr	r3, [pc, #56]	@ (8000ff4 <MX_GPIO_Init+0xc8>)
 8000fbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fc0:	f003 0302 	and.w	r3, r3, #2
 8000fc4:	607b      	str	r3, [r7, #4]
 8000fc6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fc8:	4b0a      	ldr	r3, [pc, #40]	@ (8000ff4 <MX_GPIO_Init+0xc8>)
 8000fca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fce:	4a09      	ldr	r2, [pc, #36]	@ (8000ff4 <MX_GPIO_Init+0xc8>)
 8000fd0:	f043 0308 	orr.w	r3, r3, #8
 8000fd4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fd8:	4b06      	ldr	r3, [pc, #24]	@ (8000ff4 <MX_GPIO_Init+0xc8>)
 8000fda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fde:	f003 0308 	and.w	r3, r3, #8
 8000fe2:	603b      	str	r3, [r7, #0]
 8000fe4:	683b      	ldr	r3, [r7, #0]

}
 8000fe6:	bf00      	nop
 8000fe8:	371c      	adds	r7, #28
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop
 8000ff4:	58024400 	.word	0x58024400

08000ff8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000ffe:	f000 fdfd 	bl	8001bfc <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001002:	f002 f899 	bl	8003138 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001006:	f000 fbd5 	bl	80017b4 <SystemClock_Config>
	// USART10 用于Action串口转发,暂时使用无线串口将数据转发到主机
	// TODO:根据通信质量的稳定�?�决定是否要更换为有线USB转TTL
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800100a:	f7ff ff8f 	bl	8000f2c <MX_GPIO_Init>
  MX_FDCAN1_Init();
 800100e:	f7ff fd43 	bl	8000a98 <MX_FDCAN1_Init>
  MX_UART4_Init();
 8001012:	f001 f9e5 	bl	80023e0 <MX_UART4_Init>
  MX_UART5_Init();
 8001016:	f001 fa2f 	bl	8002478 <MX_UART5_Init>
  MX_UART9_Init();
 800101a:	f001 fb11 	bl	8002640 <MX_UART9_Init>
  MX_USART6_UART_Init();
 800101e:	f001 fc2d 	bl	800287c <MX_USART6_UART_Init>
  MX_USART10_UART_Init();
 8001022:	f001 fc77 	bl	8002914 <MX_USART10_UART_Init>
  MX_TIM2_Init();
 8001026:	f001 f81b 	bl	8002060 <MX_TIM2_Init>
  MX_USART3_UART_Init();
 800102a:	f001 fbdb 	bl	80027e4 <MX_USART3_UART_Init>
  MX_UART7_Init();
 800102e:	f001 fa6f 	bl	8002510 <MX_UART7_Init>
  MX_UART8_Init();
 8001032:	f001 fab9 	bl	80025a8 <MX_UART8_Init>
  MX_TIM3_Init();
 8001036:	f001 f861 	bl	80020fc <MX_TIM3_Init>
  MX_TIM5_Init();
 800103a:	f001 f8af 	bl	800219c <MX_TIM5_Init>
  MX_USART2_UART_Init();
 800103e:	f001 fb4b 	bl	80026d8 <MX_USART2_UART_Init>
  MX_TIM12_Init();
 8001042:	f001 f8fb 	bl	800223c <MX_TIM12_Init>
  /* USER CODE BEGIN 2 */

//	清除定时器初始化过程中的更新中断标志
	__HAL_TIM_CLEAR_IT(&htim2, TIM_IT_UPDATE);
 8001046:	4bc3      	ldr	r3, [pc, #780]	@ (8001354 <main+0x35c>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f06f 0201 	mvn.w	r2, #1
 800104e:	611a      	str	r2, [r3, #16]
//	使能定时器中�?
	HAL_TIM_Base_Start_IT(&htim2);
 8001050:	48c0      	ldr	r0, [pc, #768]	@ (8001354 <main+0x35c>)
 8001052:	f007 f95f 	bl	8008314 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim5);
 8001056:	48c0      	ldr	r0, [pc, #768]	@ (8001358 <main+0x360>)
 8001058:	f007 f95c 	bl	8008314 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim3);
 800105c:	48bf      	ldr	r0, [pc, #764]	@ (800135c <main+0x364>)
 800105e:	f007 f959 	bl	8008314 <HAL_TIM_Base_Start_IT>
//	使能串口接收中断
	HAL_UART_Receive_IT(&huart4, &Screen_data, 1);
 8001062:	2201      	movs	r2, #1
 8001064:	49be      	ldr	r1, [pc, #760]	@ (8001360 <main+0x368>)
 8001066:	48bf      	ldr	r0, [pc, #764]	@ (8001364 <main+0x36c>)
 8001068:	f007 ffe0 	bl	800902c <HAL_UART_Receive_IT>
//	HWT101预留中断接口
	HAL_UART_Receive_IT(&huart2, &HwtData, 1);
 800106c:	2201      	movs	r2, #1
 800106e:	49be      	ldr	r1, [pc, #760]	@ (8001368 <main+0x370>)
 8001070:	48be      	ldr	r0, [pc, #760]	@ (800136c <main+0x374>)
 8001072:	f007 ffdb 	bl	800902c <HAL_UART_Receive_IT>
//	TX2通信接收中断
	HAL_UART_Receive_IT(&huart10, (uint8_t*) &aRxBuffer, 1);
 8001076:	2201      	movs	r2, #1
 8001078:	49bd      	ldr	r1, [pc, #756]	@ (8001370 <main+0x378>)
 800107a:	48be      	ldr	r0, [pc, #760]	@ (8001374 <main+0x37c>)
 800107c:	f007 ffd6 	bl	800902c <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart9, &data, 1);
 8001080:	2201      	movs	r2, #1
 8001082:	49bd      	ldr	r1, [pc, #756]	@ (8001378 <main+0x380>)
 8001084:	48bd      	ldr	r0, [pc, #756]	@ (800137c <main+0x384>)
 8001086:	f007 ffd1 	bl	800902c <HAL_UART_Receive_IT>
//	HAL_UART_Receive_IT(&huart10, &Joy_data, 1);

	PID_Init();
 800108a:	f00a fdfd 	bl	800bc88 <PID_Init>
//  	TODO:调整该函数体位置, 使之可以全局响应
// 			解决方案: 在屏幕解析函数中, 如果发车标志位被使能, 则使能某�?定时器中断函�?, 然后在定时器中断函数中先失能自己, 
// 					 再调用下面的函数�?,从�?�做到节省系统资源的同时进行函数的全�?单次响应
// 		FIXME:将该函数修改为全�?响应�?要�?�虑到在响应�?, 车身其他资源是否会被影响, 即在响应的过程中, 物料等会不会把爪子卡�?, 导致舵机过流
// 			  舵机过流后需要过�?段时间才能对舵机进行读写
		if (Ready_Flag == 1)
 800108e:	4bbc      	ldr	r3, [pc, #752]	@ (8001380 <main+0x388>)
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	2b01      	cmp	r3, #1
 8001094:	d104      	bne.n	80010a0 <main+0xa8>
		{
			Ready_Flag = 0;
 8001096:	4bba      	ldr	r3, [pc, #744]	@ (8001380 <main+0x388>)
 8001098:	2200      	movs	r2, #0
 800109a:	701a      	strb	r2, [r3, #0]
			Check_Status();
 800109c:	f00c fd88 	bl	800dbb0 <Check_Status>
		}
// 		�?测发车标志位
		if (System_Flag == 1)
 80010a0:	4bb8      	ldr	r3, [pc, #736]	@ (8001384 <main+0x38c>)
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	2b01      	cmp	r3, #1
 80010a6:	d1f2      	bne.n	800108e <main+0x96>
		{
			System_Flag = 0;
 80010a8:	4bb6      	ldr	r3, [pc, #728]	@ (8001384 <main+0x38c>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	701a      	strb	r2, [r3, #0]

//			向TX2发�?�字符串 "e1f"�?始执行程�?
			if (TX2_ENABLE == true)
 80010ae:	4bb6      	ldr	r3, [pc, #728]	@ (8001388 <main+0x390>)
 80010b0:	781b      	ldrb	r3, [r3, #0]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d006      	beq.n	80010c4 <main+0xcc>
				HAL_UART_Transmit(&huart10, (uint8_t*) "e1f", sizeof("elf") - 1,
 80010b6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010ba:	2203      	movs	r2, #3
 80010bc:	49b3      	ldr	r1, [pc, #716]	@ (800138c <main+0x394>)
 80010be:	48ad      	ldr	r0, [pc, #692]	@ (8001374 <main+0x37c>)
 80010c0:	f007 fe5e 	bl	8008d80 <HAL_UART_Transmit>
						0x1000);
			/************************************************/
			while (1)
			{
				switch (flag)
 80010c4:	4bb2      	ldr	r3, [pc, #712]	@ (8001390 <main+0x398>)
 80010c6:	881b      	ldrh	r3, [r3, #0]
 80010c8:	2b0d      	cmp	r3, #13
 80010ca:	f200 8364 	bhi.w	8001796 <main+0x79e>
 80010ce:	a201      	add	r2, pc, #4	@ (adr r2, 80010d4 <main+0xdc>)
 80010d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010d4:	0800110d 	.word	0x0800110d
 80010d8:	08001193 	.word	0x08001193
 80010dc:	0800126b 	.word	0x0800126b
 80010e0:	0800130d 	.word	0x0800130d
 80010e4:	080013e5 	.word	0x080013e5
 80010e8:	0800144b 	.word	0x0800144b
 80010ec:	08001485 	.word	0x08001485
 80010f0:	080014fd 	.word	0x080014fd
 80010f4:	08001537 	.word	0x08001537
 80010f8:	080015b5 	.word	0x080015b5
 80010fc:	080015f9 	.word	0x080015f9
 8001100:	08001643 	.word	0x08001643
 8001104:	0800167d 	.word	0x0800167d
 8001108:	0800175d 	.word	0x0800175d
				{
				case 0:  //发车, 先左�?, 然后直行, 进入扫码区域
					// Move_TO_Saomaqu(2400, 8250);
					// BUG:遇到左移�?,步进电机没有移动到目标点�?,没有返回到位标志，但是卡住不动的情况, 记录在Bug.md中的 E�?
					// 
					HAL_UART_Transmit(&huart10, (uint8_t*) "发车, 向左移动\n", sizeof("发车, 向左移动\n") - 1,0xffff);
 800110c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001110:	2215      	movs	r2, #21
 8001112:	49a0      	ldr	r1, [pc, #640]	@ (8001394 <main+0x39c>)
 8001114:	4897      	ldr	r0, [pc, #604]	@ (8001374 <main+0x37c>)
 8001116:	f007 fe33 	bl	8008d80 <HAL_UART_Transmit>
					bool temp = Move_Left(RunSpeed, RunAcc, 2400);
 800111a:	f44f 6216 	mov.w	r2, #2400	@ 0x960
 800111e:	2178      	movs	r1, #120	@ 0x78
 8001120:	2064      	movs	r0, #100	@ 0x64
 8001122:	f00b f8ab 	bl	800c27c <Move_Left>
 8001126:	4603      	mov	r3, r0
 8001128:	71fb      	strb	r3, [r7, #7]
					HAL_Delay(50);
 800112a:	2032      	movs	r0, #50	@ 0x32
 800112c:	f002 f896 	bl	800325c <HAL_Delay>
					while (temp != true)
 8001130:	e007      	b.n	8001142 <main+0x14a>
					{
						temp = Move_Left(RunSpeed, RunAcc, 2400);
 8001132:	f44f 6216 	mov.w	r2, #2400	@ 0x960
 8001136:	2178      	movs	r1, #120	@ 0x78
 8001138:	2064      	movs	r0, #100	@ 0x64
 800113a:	f00b f89f 	bl	800c27c <Move_Left>
 800113e:	4603      	mov	r3, r0
 8001140:	71fb      	strb	r3, [r7, #7]
					while (temp != true)
 8001142:	79fb      	ldrb	r3, [r7, #7]
 8001144:	f083 0301 	eor.w	r3, r3, #1
 8001148:	b2db      	uxtb	r3, r3
 800114a:	2b00      	cmp	r3, #0
 800114c:	d1f1      	bne.n	8001132 <main+0x13a>
					}
					HAL_UART_Transmit(&huart10, (uint8_t*) "确认接收\n", sizeof("确认接收\n") - 1,0xffff);
 800114e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001152:	220d      	movs	r2, #13
 8001154:	4990      	ldr	r1, [pc, #576]	@ (8001398 <main+0x3a0>)
 8001156:	4887      	ldr	r0, [pc, #540]	@ (8001374 <main+0x37c>)
 8001158:	f007 fe12 	bl	8008d80 <HAL_UART_Transmit>
					// 左移完成�?,向前移动,同时将机械臂调整为扫码姿�?
					Start();
 800115c:	f00a fca2 	bl	800baa4 <Start>
					flag = 1;
 8001160:	4b8b      	ldr	r3, [pc, #556]	@ (8001390 <main+0x398>)
 8001162:	2201      	movs	r2, #1
 8001164:	801a      	strh	r2, [r3, #0]
					HAL_UART_Transmit(&huart10, (uint8_t*) "flag = ", sizeof("flag = \n") - 1,0xffff);
 8001166:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800116a:	2208      	movs	r2, #8
 800116c:	498b      	ldr	r1, [pc, #556]	@ (800139c <main+0x3a4>)
 800116e:	4881      	ldr	r0, [pc, #516]	@ (8001374 <main+0x37c>)
 8001170:	f007 fe06 	bl	8008d80 <HAL_UART_Transmit>
					HAL_UART_Transmit(&huart10, (uint8_t*) "1", sizeof("1") - 1,0xffff);
 8001174:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001178:	2201      	movs	r2, #1
 800117a:	4989      	ldr	r1, [pc, #548]	@ (80013a0 <main+0x3a8>)
 800117c:	487d      	ldr	r0, [pc, #500]	@ (8001374 <main+0x37c>)
 800117e:	f007 fdff 	bl	8008d80 <HAL_UART_Transmit>
					HAL_UART_Transmit(&huart10, (uint8_t*) "\n", sizeof("\n") - 1,0xffff);
 8001182:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001186:	2201      	movs	r2, #1
 8001188:	4986      	ldr	r1, [pc, #536]	@ (80013a4 <main+0x3ac>)
 800118a:	487a      	ldr	r0, [pc, #488]	@ (8001374 <main+0x37c>)
 800118c:	f007 fdf8 	bl	8008d80 <HAL_UART_Transmit>
					break;
 8001190:	e304      	b.n	800179c <main+0x7a4>
				case 1:  //离开扫码�?,进入暂存区抓取物�?
					// 向前移动,非阻�?
					HAL_UART_Transmit(&huart10, (uint8_t*) "物料我来啦\n", sizeof("物料我来啦\n") - 1,0xffff);
 8001192:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001196:	2210      	movs	r2, #16
 8001198:	4983      	ldr	r1, [pc, #524]	@ (80013a8 <main+0x3b0>)
 800119a:	4876      	ldr	r0, [pc, #472]	@ (8001374 <main+0x37c>)
 800119c:	f007 fdf0 	bl	8008d80 <HAL_UART_Transmit>
					temp = Move_Line(RunSpeed, RunAcc, 10500);
 80011a0:	f642 1204 	movw	r2, #10500	@ 0x2904
 80011a4:	2178      	movs	r1, #120	@ 0x78
 80011a6:	2064      	movs	r0, #100	@ 0x64
 80011a8:	f00a ffc2 	bl	800c130 <Move_Line>
 80011ac:	4603      	mov	r3, r0
 80011ae:	71fb      	strb	r3, [r7, #7]
					HAL_Delay(50);
 80011b0:	2032      	movs	r0, #50	@ 0x32
 80011b2:	f002 f853 	bl	800325c <HAL_Delay>
					while (temp != true)
 80011b6:	e007      	b.n	80011c8 <main+0x1d0>
					{
						temp = Move_Line(RunSpeed, RunAcc, 10500);
 80011b8:	f642 1204 	movw	r2, #10500	@ 0x2904
 80011bc:	2178      	movs	r1, #120	@ 0x78
 80011be:	2064      	movs	r0, #100	@ 0x64
 80011c0:	f00a ffb6 	bl	800c130 <Move_Line>
 80011c4:	4603      	mov	r3, r0
 80011c6:	71fb      	strb	r3, [r7, #7]
					while (temp != true)
 80011c8:	79fb      	ldrb	r3, [r7, #7]
 80011ca:	f083 0301 	eor.w	r3, r3, #1
 80011ce:	b2db      	uxtb	r3, r3
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d1f1      	bne.n	80011b8 <main+0x1c0>
					}
					HAL_UART_Transmit(&huart10, (uint8_t*) "确认接收\n", sizeof("确认接收\n") - 1,0xffff);
 80011d4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80011d8:	220d      	movs	r2, #13
 80011da:	496f      	ldr	r1, [pc, #444]	@ (8001398 <main+0x3a0>)
 80011dc:	4865      	ldr	r0, [pc, #404]	@ (8001374 <main+0x37c>)
 80011de:	f007 fdcf 	bl	8008d80 <HAL_UART_Transmit>
					// TODO:调试,根据TX2返回坐标点信息进行车身调�?,待物料稳定后抓取物料
					// 这里是否�?要先根据Action进行�?次坐标的调整? x:150 y:1450
					HAL_UART_Transmit(&huart10, (uint8_t*) "进入PID调节\n", sizeof("进入PID调节\n") - 1,0xffff);
 80011e2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80011e6:	2210      	movs	r2, #16
 80011e8:	4970      	ldr	r1, [pc, #448]	@ (80013ac <main+0x3b4>)
 80011ea:	4862      	ldr	r0, [pc, #392]	@ (8001374 <main+0x37c>)
 80011ec:	f007 fdc8 	bl	8008d80 <HAL_UART_Transmit>
					bool action_temp = Move_Action_Nopid_Left_Ctrl(150, 1450);
 80011f0:	eddf 0a6f 	vldr	s1, [pc, #444]	@ 80013b0 <main+0x3b8>
 80011f4:	ed9f 0a6f 	vldr	s0, [pc, #444]	@ 80013b4 <main+0x3bc>
 80011f8:	f00b fe20 	bl	800ce3c <Move_Action_Nopid_Left_Ctrl>
 80011fc:	4603      	mov	r3, r0
 80011fe:	71bb      	strb	r3, [r7, #6]
					HAL_Delay(50);
 8001200:	2032      	movs	r0, #50	@ 0x32
 8001202:	f002 f82b 	bl	800325c <HAL_Delay>
					while(action_temp == false)
 8001206:	e00a      	b.n	800121e <main+0x226>
					{
						HAL_Delay(10);
 8001208:	200a      	movs	r0, #10
 800120a:	f002 f827 	bl	800325c <HAL_Delay>
						action_temp = Move_Action_Nopid_Left_Ctrl(150, 1450);
 800120e:	eddf 0a68 	vldr	s1, [pc, #416]	@ 80013b0 <main+0x3b8>
 8001212:	ed9f 0a68 	vldr	s0, [pc, #416]	@ 80013b4 <main+0x3bc>
 8001216:	f00b fe11 	bl	800ce3c <Move_Action_Nopid_Left_Ctrl>
 800121a:	4603      	mov	r3, r0
 800121c:	71bb      	strb	r3, [r7, #6]
					while(action_temp == false)
 800121e:	79bb      	ldrb	r3, [r7, #6]
 8001220:	f083 0301 	eor.w	r3, r3, #1
 8001224:	b2db      	uxtb	r3, r3
 8001226:	2b00      	cmp	r3, #0
 8001228:	d1ee      	bne.n	8001208 <main+0x210>
					}
					HAL_UART_Transmit(&huart10, (uint8_t*) "我调完辣\n", sizeof("我调完辣\n") - 1,0xffff);
 800122a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800122e:	220d      	movs	r2, #13
 8001230:	4961      	ldr	r1, [pc, #388]	@ (80013b8 <main+0x3c0>)
 8001232:	4850      	ldr	r0, [pc, #320]	@ (8001374 <main+0x37c>)
 8001234:	f007 fda4 	bl	8008d80 <HAL_UART_Transmit>
//						{
//							;
//						}
//					}
//					Frist_Grab_Wuliao();
					flag = 2;
 8001238:	4b55      	ldr	r3, [pc, #340]	@ (8001390 <main+0x398>)
 800123a:	2202      	movs	r2, #2
 800123c:	801a      	strh	r2, [r3, #0]
					HAL_UART_Transmit(&huart10, (uint8_t*) "flag = ", sizeof("flag = \n") - 1,0xffff);
 800123e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001242:	2208      	movs	r2, #8
 8001244:	4955      	ldr	r1, [pc, #340]	@ (800139c <main+0x3a4>)
 8001246:	484b      	ldr	r0, [pc, #300]	@ (8001374 <main+0x37c>)
 8001248:	f007 fd9a 	bl	8008d80 <HAL_UART_Transmit>
					HAL_UART_Transmit(&huart10, (uint8_t*) "2", sizeof("2") - 1,0xffff);
 800124c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001250:	2201      	movs	r2, #1
 8001252:	495a      	ldr	r1, [pc, #360]	@ (80013bc <main+0x3c4>)
 8001254:	4847      	ldr	r0, [pc, #284]	@ (8001374 <main+0x37c>)
 8001256:	f007 fd93 	bl	8008d80 <HAL_UART_Transmit>
					HAL_UART_Transmit(&huart10, (uint8_t*) "\n", sizeof("\n") - 1,0xffff);
 800125a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800125e:	2201      	movs	r2, #1
 8001260:	4950      	ldr	r1, [pc, #320]	@ (80013a4 <main+0x3ac>)
 8001262:	4844      	ldr	r0, [pc, #272]	@ (8001374 <main+0x37c>)
 8001264:	f007 fd8c 	bl	8008d80 <HAL_UART_Transmit>
					break;
 8001268:	e298      	b.n	800179c <main+0x7a4>
				case 2:  // 离开原料�?,进入十字�?
					HAL_UART_Transmit(&huart10, (uint8_t*) "物料抓完了,我走了\n", sizeof("物料抓完了,我走了\n") - 1,0xffff);
 800126a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800126e:	221a      	movs	r2, #26
 8001270:	4953      	ldr	r1, [pc, #332]	@ (80013c0 <main+0x3c8>)
 8001272:	4840      	ldr	r0, [pc, #256]	@ (8001374 <main+0x37c>)
 8001274:	f007 fd84 	bl	8008d80 <HAL_UART_Transmit>
					Move_TO_jianzhi1(4500, 4335);
 8001278:	eddf 0a58 	vldr	s1, [pc, #352]	@ 80013dc <main+0x3e4>
 800127c:	ed9f 0a51 	vldr	s0, [pc, #324]	@ 80013c4 <main+0x3cc>
 8001280:	f00b fb8e 	bl	800c9a0 <Move_TO_jianzhi1>
					// 车身状�?�回滚为爪子向内的状�?
//					Roll_Status();
//					HAL_Delay(50);
					// 根据Action返回的坐标点进行校准
					HAL_UART_Transmit(&huart10, (uint8_t*) "进入PID调节\n", sizeof("进入PID调节\n") - 1,0xffff);
 8001284:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001288:	2210      	movs	r2, #16
 800128a:	4948      	ldr	r1, [pc, #288]	@ (80013ac <main+0x3b4>)
 800128c:	4839      	ldr	r0, [pc, #228]	@ (8001374 <main+0x37c>)
 800128e:	f007 fd77 	bl	8008d80 <HAL_UART_Transmit>
					 action_temp = Move_Action_Nopid_Forward_Ctrl(160, 1070);
 8001292:	eddf 0a4d 	vldr	s1, [pc, #308]	@ 80013c8 <main+0x3d0>
 8001296:	ed9f 0a4d 	vldr	s0, [pc, #308]	@ 80013cc <main+0x3d4>
 800129a:	f00b ff49 	bl	800d130 <Move_Action_Nopid_Forward_Ctrl>
 800129e:	4603      	mov	r3, r0
 80012a0:	71bb      	strb	r3, [r7, #6]
					HAL_Delay(50);
 80012a2:	2032      	movs	r0, #50	@ 0x32
 80012a4:	f001 ffda 	bl	800325c <HAL_Delay>
					while(action_temp == false)
 80012a8:	e00a      	b.n	80012c0 <main+0x2c8>
					{
						HAL_Delay(10);
 80012aa:	200a      	movs	r0, #10
 80012ac:	f001 ffd6 	bl	800325c <HAL_Delay>
						action_temp = Move_Action_Nopid_Forward_Ctrl(160, 1070);
 80012b0:	eddf 0a45 	vldr	s1, [pc, #276]	@ 80013c8 <main+0x3d0>
 80012b4:	ed9f 0a45 	vldr	s0, [pc, #276]	@ 80013cc <main+0x3d4>
 80012b8:	f00b ff3a 	bl	800d130 <Move_Action_Nopid_Forward_Ctrl>
 80012bc:	4603      	mov	r3, r0
 80012be:	71bb      	strb	r3, [r7, #6]
					while(action_temp == false)
 80012c0:	79bb      	ldrb	r3, [r7, #6]
 80012c2:	f083 0301 	eor.w	r3, r3, #1
 80012c6:	b2db      	uxtb	r3, r3
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d1ee      	bne.n	80012aa <main+0x2b2>
					}
					HAL_UART_Transmit(&huart10, (uint8_t*) "我调完辣\n", sizeof("我调完辣\n") - 1,0xffff);
 80012cc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80012d0:	220d      	movs	r2, #13
 80012d2:	4939      	ldr	r1, [pc, #228]	@ (80013b8 <main+0x3c0>)
 80012d4:	4827      	ldr	r0, [pc, #156]	@ (8001374 <main+0x37c>)
 80012d6:	f007 fd53 	bl	8008d80 <HAL_UART_Transmit>
					flag = 3;
 80012da:	4b2d      	ldr	r3, [pc, #180]	@ (8001390 <main+0x398>)
 80012dc:	2203      	movs	r2, #3
 80012de:	801a      	strh	r2, [r3, #0]
					HAL_UART_Transmit(&huart10, (uint8_t*) "flag = ", sizeof("flag = \n") - 1,0xffff);
 80012e0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80012e4:	2208      	movs	r2, #8
 80012e6:	492d      	ldr	r1, [pc, #180]	@ (800139c <main+0x3a4>)
 80012e8:	4822      	ldr	r0, [pc, #136]	@ (8001374 <main+0x37c>)
 80012ea:	f007 fd49 	bl	8008d80 <HAL_UART_Transmit>
					HAL_UART_Transmit(&huart10, (uint8_t*) "3", sizeof("3") - 1,0xffff);
 80012ee:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80012f2:	2201      	movs	r2, #1
 80012f4:	4936      	ldr	r1, [pc, #216]	@ (80013d0 <main+0x3d8>)
 80012f6:	481f      	ldr	r0, [pc, #124]	@ (8001374 <main+0x37c>)
 80012f8:	f007 fd42 	bl	8008d80 <HAL_UART_Transmit>
					HAL_UART_Transmit(&huart10, (uint8_t*) "\n", sizeof("\n") - 1,0xffff);
 80012fc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001300:	2201      	movs	r2, #1
 8001302:	4928      	ldr	r1, [pc, #160]	@ (80013a4 <main+0x3ac>)
 8001304:	481b      	ldr	r0, [pc, #108]	@ (8001374 <main+0x37c>)
 8001306:	f007 fd3b 	bl	8008d80 <HAL_UART_Transmit>
					break;
 800130a:	e247      	b.n	800179c <main+0x7a4>
				case 3:    // 离开十字区域,进入暂存�?
//					BUG:�?90度变成转45�?,但是单独拉出来没有问�??

					Move_TO_zancunqu(22000, 4335);
 800130c:	eddf 0a33 	vldr	s1, [pc, #204]	@ 80013dc <main+0x3e4>
 8001310:	ed9f 0a30 	vldr	s0, [pc, #192]	@ 80013d4 <main+0x3dc>
 8001314:	f00b fbb8 	bl	800ca88 <Move_TO_zancunqu>
					// 将物料从车上放到目标区域
//					put_Material_to_circular_Staging_Area_frist(Frist_Run);
					// 将物料从目标区域抓取回车�?
//					Grab_Material_to_Car_Staging_Area_frist(Frist_Run);
					// TODO: 延时�?要修�?
					HAL_Delay(500);
 8001318:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800131c:	f001 ff9e 	bl	800325c <HAL_Delay>
					flag = 4;
 8001320:	4b1b      	ldr	r3, [pc, #108]	@ (8001390 <main+0x398>)
 8001322:	2204      	movs	r2, #4
 8001324:	801a      	strh	r2, [r3, #0]
					HAL_UART_Transmit(&huart10, (uint8_t*) "flag = ", sizeof("flag = \n") - 1,0xffff);
 8001326:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800132a:	2208      	movs	r2, #8
 800132c:	491b      	ldr	r1, [pc, #108]	@ (800139c <main+0x3a4>)
 800132e:	4811      	ldr	r0, [pc, #68]	@ (8001374 <main+0x37c>)
 8001330:	f007 fd26 	bl	8008d80 <HAL_UART_Transmit>
					HAL_UART_Transmit(&huart10, (uint8_t*) "4", sizeof("4") - 1,0xffff);
 8001334:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001338:	2201      	movs	r2, #1
 800133a:	4927      	ldr	r1, [pc, #156]	@ (80013d8 <main+0x3e0>)
 800133c:	480d      	ldr	r0, [pc, #52]	@ (8001374 <main+0x37c>)
 800133e:	f007 fd1f 	bl	8008d80 <HAL_UART_Transmit>
					HAL_UART_Transmit(&huart10, (uint8_t*) "\n", sizeof("\n") - 1,0xffff);
 8001342:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001346:	2201      	movs	r2, #1
 8001348:	4916      	ldr	r1, [pc, #88]	@ (80013a4 <main+0x3ac>)
 800134a:	480a      	ldr	r0, [pc, #40]	@ (8001374 <main+0x37c>)
 800134c:	f007 fd18 	bl	8008d80 <HAL_UART_Transmit>
					break;
 8001350:	e224      	b.n	800179c <main+0x7a4>
 8001352:	bf00      	nop
 8001354:	24000488 	.word	0x24000488
 8001358:	24000520 	.word	0x24000520
 800135c:	240004d4 	.word	0x240004d4
 8001360:	24000365 	.word	0x24000365
 8001364:	240005b8 	.word	0x240005b8
 8001368:	24000366 	.word	0x24000366
 800136c:	2400089c 	.word	0x2400089c
 8001370:	24000367 	.word	0x24000367
 8001374:	24000a58 	.word	0x24000a58
 8001378:	24000364 	.word	0x24000364
 800137c:	24000808 	.word	0x24000808
 8001380:	24000cf3 	.word	0x24000cf3
 8001384:	24000cf2 	.word	0x24000cf2
 8001388:	24000480 	.word	0x24000480
 800138c:	080129c0 	.word	0x080129c0
 8001390:	24000476 	.word	0x24000476
 8001394:	080129c4 	.word	0x080129c4
 8001398:	080129dc 	.word	0x080129dc
 800139c:	080129ec 	.word	0x080129ec
 80013a0:	080129f4 	.word	0x080129f4
 80013a4:	080129f8 	.word	0x080129f8
 80013a8:	080129fc 	.word	0x080129fc
 80013ac:	08012a10 	.word	0x08012a10
 80013b0:	44b54000 	.word	0x44b54000
 80013b4:	43160000 	.word	0x43160000
 80013b8:	08012a24 	.word	0x08012a24
 80013bc:	08012a34 	.word	0x08012a34
 80013c0:	08012a38 	.word	0x08012a38
 80013c4:	458ca000 	.word	0x458ca000
 80013c8:	4485c000 	.word	0x4485c000
 80013cc:	43200000 	.word	0x43200000
 80013d0:	08012a54 	.word	0x08012a54
 80013d4:	46abe000 	.word	0x46abe000
 80013d8:	08012a58 	.word	0x08012a58
 80013dc:	45877800 	.word	0x45877800
 80013e0:	460ca000 	.word	0x460ca000
				case 4:	//出暂存区
					Move_TO_jianzhi2(9000, 4335);
 80013e4:	ed5f 0a03 	vldr	s1, [pc, #-12]	@ 80013dc <main+0x3e4>
 80013e8:	ed1f 0a03 	vldr	s0, [pc, #-12]	@ 80013e0 <main+0x3e8>
 80013ec:	f00b fbc2 	bl	800cb74 <Move_TO_jianzhi2>
					HAL_UART_Transmit(&huart10, (uint8_t*) "调个Action闭环\n", sizeof("调个Action闭环\n") - 1,0xffff);
 80013f0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80013f4:	2213      	movs	r2, #19
 80013f6:	49bf      	ldr	r1, [pc, #764]	@ (80016f4 <main+0x6fc>)
 80013f8:	48bf      	ldr	r0, [pc, #764]	@ (80016f8 <main+0x700>)
 80013fa:	f007 fcc1 	bl	8008d80 <HAL_UART_Transmit>
					Move_Action_Nopid_Forward_Ctrl(1870, 1860);
 80013fe:	eddf 0abf 	vldr	s1, [pc, #764]	@ 80016fc <main+0x704>
 8001402:	ed9f 0abf 	vldr	s0, [pc, #764]	@ 8001700 <main+0x708>
 8001406:	f00b fe93 	bl	800d130 <Move_Action_Nopid_Forward_Ctrl>
					HAL_UART_Transmit(&huart10, (uint8_t*) "我调完辣\n", sizeof("我调完辣\n") - 1,0xffff);
 800140a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800140e:	220d      	movs	r2, #13
 8001410:	49bc      	ldr	r1, [pc, #752]	@ (8001704 <main+0x70c>)
 8001412:	48b9      	ldr	r0, [pc, #740]	@ (80016f8 <main+0x700>)
 8001414:	f007 fcb4 	bl	8008d80 <HAL_UART_Transmit>
					flag = 5;
 8001418:	4bbb      	ldr	r3, [pc, #748]	@ (8001708 <main+0x710>)
 800141a:	2205      	movs	r2, #5
 800141c:	801a      	strh	r2, [r3, #0]
					HAL_UART_Transmit(&huart10, (uint8_t*) "flag = ", sizeof("flag = \n") - 1,0xffff);
 800141e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001422:	2208      	movs	r2, #8
 8001424:	49b9      	ldr	r1, [pc, #740]	@ (800170c <main+0x714>)
 8001426:	48b4      	ldr	r0, [pc, #720]	@ (80016f8 <main+0x700>)
 8001428:	f007 fcaa 	bl	8008d80 <HAL_UART_Transmit>
					HAL_UART_Transmit(&huart10, (uint8_t*) "5", sizeof("5") - 1,0xffff);
 800142c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001430:	2201      	movs	r2, #1
 8001432:	49b7      	ldr	r1, [pc, #732]	@ (8001710 <main+0x718>)
 8001434:	48b0      	ldr	r0, [pc, #704]	@ (80016f8 <main+0x700>)
 8001436:	f007 fca3 	bl	8008d80 <HAL_UART_Transmit>
					HAL_UART_Transmit(&huart10, (uint8_t*) "\n", sizeof("\n") - 1,0xffff);
 800143a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800143e:	2201      	movs	r2, #1
 8001440:	49b4      	ldr	r1, [pc, #720]	@ (8001714 <main+0x71c>)
 8001442:	48ad      	ldr	r0, [pc, #692]	@ (80016f8 <main+0x700>)
 8001444:	f007 fc9c 	bl	8008d80 <HAL_UART_Transmit>
					break;
 8001448:	e1a8      	b.n	800179c <main+0x7a4>
				case 5:		//移动到粗加工�?       
					Move_TO_cujiagongqu(10000);
 800144a:	ed9f 0ab3 	vldr	s0, [pc, #716]	@ 8001718 <main+0x720>
 800144e:	f00b fc07 	bl	800cc60 <Move_TO_cujiagongqu>
					//调整车体，让爪子正交于车身，爪子位于底端张开
//					put_Status(); //爪子张开，张大一些，否则会导致在红色环识别到绿色�?
					// 将物料放置到第一�?
//					put_Material_to_Circular_Rough_Processing_Area_frist(Frist_Run, Put_circular);
					flag = 6;
 8001452:	4bad      	ldr	r3, [pc, #692]	@ (8001708 <main+0x710>)
 8001454:	2206      	movs	r2, #6
 8001456:	801a      	strh	r2, [r3, #0]
					HAL_UART_Transmit(&huart10, (uint8_t*) "flag = ", sizeof("flag = \n") - 1,0xffff);
 8001458:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800145c:	2208      	movs	r2, #8
 800145e:	49ab      	ldr	r1, [pc, #684]	@ (800170c <main+0x714>)
 8001460:	48a5      	ldr	r0, [pc, #660]	@ (80016f8 <main+0x700>)
 8001462:	f007 fc8d 	bl	8008d80 <HAL_UART_Transmit>
					HAL_UART_Transmit(&huart10, (uint8_t*) "6", sizeof("6") - 1,0xffff);
 8001466:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800146a:	2201      	movs	r2, #1
 800146c:	49ab      	ldr	r1, [pc, #684]	@ (800171c <main+0x724>)
 800146e:	48a2      	ldr	r0, [pc, #648]	@ (80016f8 <main+0x700>)
 8001470:	f007 fc86 	bl	8008d80 <HAL_UART_Transmit>
					HAL_UART_Transmit(&huart10, (uint8_t*) "\n", sizeof("\n") - 1,0xffff);
 8001474:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001478:	2201      	movs	r2, #1
 800147a:	49a6      	ldr	r1, [pc, #664]	@ (8001714 <main+0x71c>)
 800147c:	489e      	ldr	r0, [pc, #632]	@ (80016f8 <main+0x700>)
 800147e:	f007 fc7f 	bl	8008d80 <HAL_UART_Transmit>
					break;
 8001482:	e18b      	b.n	800179c <main+0x7a4>
				case 6:  //离开粗加工区，移到十字区
					Move_TO_jianzhi3(9000, 4335);
 8001484:	eddf 0aa6 	vldr	s1, [pc, #664]	@ 8001720 <main+0x728>
 8001488:	ed9f 0aa6 	vldr	s0, [pc, #664]	@ 8001724 <main+0x72c>
 800148c:	f00b fc28 	bl	800cce0 <Move_TO_jianzhi3>
					action_temp = Move_Action_Nopid_Left_Ctrl(170, 1860);
 8001490:	eddf 0a9a 	vldr	s1, [pc, #616]	@ 80016fc <main+0x704>
 8001494:	ed9f 0aa4 	vldr	s0, [pc, #656]	@ 8001728 <main+0x730>
 8001498:	f00b fcd0 	bl	800ce3c <Move_Action_Nopid_Left_Ctrl>
 800149c:	4603      	mov	r3, r0
 800149e:	71bb      	strb	r3, [r7, #6]
					HAL_Delay(50);
 80014a0:	2032      	movs	r0, #50	@ 0x32
 80014a2:	f001 fedb 	bl	800325c <HAL_Delay>
					while(action_temp == false)
 80014a6:	e00a      	b.n	80014be <main+0x4c6>
					{
						HAL_Delay(10);
 80014a8:	200a      	movs	r0, #10
 80014aa:	f001 fed7 	bl	800325c <HAL_Delay>
						action_temp = Move_Action_Nopid_Left_Ctrl(170, 1860);
 80014ae:	eddf 0a93 	vldr	s1, [pc, #588]	@ 80016fc <main+0x704>
 80014b2:	ed9f 0a9d 	vldr	s0, [pc, #628]	@ 8001728 <main+0x730>
 80014b6:	f00b fcc1 	bl	800ce3c <Move_Action_Nopid_Left_Ctrl>
 80014ba:	4603      	mov	r3, r0
 80014bc:	71bb      	strb	r3, [r7, #6]
					while(action_temp == false)
 80014be:	79bb      	ldrb	r3, [r7, #6]
 80014c0:	f083 0301 	eor.w	r3, r3, #1
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d1ee      	bne.n	80014a8 <main+0x4b0>
					}
					//TODO:在返回原料区之前，爪子首先要转过来正交于车身并且步进降到8600的位置，爪子张开，进行抓取物�?
//					Drop_Location_jiang(50, 50, 8600);
					flag = 7;
 80014ca:	4b8f      	ldr	r3, [pc, #572]	@ (8001708 <main+0x710>)
 80014cc:	2207      	movs	r2, #7
 80014ce:	801a      	strh	r2, [r3, #0]
					HAL_UART_Transmit(&huart10, (uint8_t*) "flag = ", sizeof("flag = \n") - 1,0xffff);
 80014d0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80014d4:	2208      	movs	r2, #8
 80014d6:	498d      	ldr	r1, [pc, #564]	@ (800170c <main+0x714>)
 80014d8:	4887      	ldr	r0, [pc, #540]	@ (80016f8 <main+0x700>)
 80014da:	f007 fc51 	bl	8008d80 <HAL_UART_Transmit>
					HAL_UART_Transmit(&huart10, (uint8_t*) "7", sizeof("7") - 1,0xffff);
 80014de:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80014e2:	2201      	movs	r2, #1
 80014e4:	4991      	ldr	r1, [pc, #580]	@ (800172c <main+0x734>)
 80014e6:	4884      	ldr	r0, [pc, #528]	@ (80016f8 <main+0x700>)
 80014e8:	f007 fc4a 	bl	8008d80 <HAL_UART_Transmit>
					HAL_UART_Transmit(&huart10, (uint8_t*) "\n", sizeof("\n") - 1,0xffff);
 80014ec:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80014f0:	2201      	movs	r2, #1
 80014f2:	4988      	ldr	r1, [pc, #544]	@ (8001714 <main+0x71c>)
 80014f4:	4880      	ldr	r0, [pc, #512]	@ (80016f8 <main+0x700>)
 80014f6:	f007 fc43 	bl	8008d80 <HAL_UART_Transmit>
					break;
 80014fa:	e14f      	b.n	800179c <main+0x7a4>
				case 7:      //返回到原料区，进行第二次的抓�?
					Move_TO_fanyuanliaoqu(4000);
 80014fc:	ed9f 0a8c 	vldr	s0, [pc, #560]	@ 8001730 <main+0x738>
 8001500:	f00b fc64 	bl	800cdcc <Move_TO_fanyuanliaoqu>
//					Move_Action_Nopid_Left_Ctrl(150, 1450);      //ACTION����
					//Second_Run_Frist_Grab_Wuliao();
					flag = 8;
 8001504:	4b80      	ldr	r3, [pc, #512]	@ (8001708 <main+0x710>)
 8001506:	2208      	movs	r2, #8
 8001508:	801a      	strh	r2, [r3, #0]
					HAL_UART_Transmit(&huart10, (uint8_t*) "flag = ", sizeof("flag = \n") - 1,0xffff);
 800150a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800150e:	2208      	movs	r2, #8
 8001510:	497e      	ldr	r1, [pc, #504]	@ (800170c <main+0x714>)
 8001512:	4879      	ldr	r0, [pc, #484]	@ (80016f8 <main+0x700>)
 8001514:	f007 fc34 	bl	8008d80 <HAL_UART_Transmit>
					HAL_UART_Transmit(&huart10, (uint8_t*) "8", sizeof("8") - 1,0xffff);
 8001518:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800151c:	2201      	movs	r2, #1
 800151e:	4985      	ldr	r1, [pc, #532]	@ (8001734 <main+0x73c>)
 8001520:	4875      	ldr	r0, [pc, #468]	@ (80016f8 <main+0x700>)
 8001522:	f007 fc2d 	bl	8008d80 <HAL_UART_Transmit>
					HAL_UART_Transmit(&huart10, (uint8_t*) "\n", sizeof("\n") - 1,0xffff);
 8001526:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800152a:	2201      	movs	r2, #1
 800152c:	4979      	ldr	r1, [pc, #484]	@ (8001714 <main+0x71c>)
 800152e:	4872      	ldr	r0, [pc, #456]	@ (80016f8 <main+0x700>)
 8001530:	f007 fc26 	bl	8008d80 <HAL_UART_Transmit>
					break;
 8001534:	e132      	b.n	800179c <main+0x7a4>
				case 8:  //第二次跑 离开原料�?,进入十字�?
					Move_TO_jianzhi1(4500, 4335);
 8001536:	eddf 0a7a 	vldr	s1, [pc, #488]	@ 8001720 <main+0x728>
 800153a:	ed9f 0a7f 	vldr	s0, [pc, #508]	@ 8001738 <main+0x740>
 800153e:	f00b fa2f 	bl	800c9a0 <Move_TO_jianzhi1>
					// 车身状�?�回滚为爪子向内的状�?
//					Roll_Status();
					HAL_Delay(50);
 8001542:	2032      	movs	r0, #50	@ 0x32
 8001544:	f001 fe8a 	bl	800325c <HAL_Delay>
					// 根据Action返回的坐标点进行校准
					action_temp = Move_Action_Nopid_Forward_Ctrl(160, 1070);
 8001548:	eddf 0a7c 	vldr	s1, [pc, #496]	@ 800173c <main+0x744>
 800154c:	ed9f 0a7c 	vldr	s0, [pc, #496]	@ 8001740 <main+0x748>
 8001550:	f00b fdee 	bl	800d130 <Move_Action_Nopid_Forward_Ctrl>
 8001554:	4603      	mov	r3, r0
 8001556:	71bb      	strb	r3, [r7, #6]
					HAL_Delay(50);
 8001558:	2032      	movs	r0, #50	@ 0x32
 800155a:	f001 fe7f 	bl	800325c <HAL_Delay>
					while(action_temp == false)
 800155e:	e00a      	b.n	8001576 <main+0x57e>
					{
						HAL_Delay(10);
 8001560:	200a      	movs	r0, #10
 8001562:	f001 fe7b 	bl	800325c <HAL_Delay>
						action_temp = Move_Action_Nopid_Forward_Ctrl(160, 1070);
 8001566:	eddf 0a75 	vldr	s1, [pc, #468]	@ 800173c <main+0x744>
 800156a:	ed9f 0a75 	vldr	s0, [pc, #468]	@ 8001740 <main+0x748>
 800156e:	f00b fddf 	bl	800d130 <Move_Action_Nopid_Forward_Ctrl>
 8001572:	4603      	mov	r3, r0
 8001574:	71bb      	strb	r3, [r7, #6]
					while(action_temp == false)
 8001576:	79bb      	ldrb	r3, [r7, #6]
 8001578:	f083 0301 	eor.w	r3, r3, #1
 800157c:	b2db      	uxtb	r3, r3
 800157e:	2b00      	cmp	r3, #0
 8001580:	d1ee      	bne.n	8001560 <main+0x568>
					}
					flag = 9;
 8001582:	4b61      	ldr	r3, [pc, #388]	@ (8001708 <main+0x710>)
 8001584:	2209      	movs	r2, #9
 8001586:	801a      	strh	r2, [r3, #0]
					HAL_UART_Transmit(&huart10, (uint8_t*) "flag = ", sizeof("flag = \n") - 1,0xffff);
 8001588:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800158c:	2208      	movs	r2, #8
 800158e:	495f      	ldr	r1, [pc, #380]	@ (800170c <main+0x714>)
 8001590:	4859      	ldr	r0, [pc, #356]	@ (80016f8 <main+0x700>)
 8001592:	f007 fbf5 	bl	8008d80 <HAL_UART_Transmit>
					HAL_UART_Transmit(&huart10, (uint8_t*)"9", sizeof("9") - 1,0xffff);
 8001596:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800159a:	2201      	movs	r2, #1
 800159c:	4969      	ldr	r1, [pc, #420]	@ (8001744 <main+0x74c>)
 800159e:	4856      	ldr	r0, [pc, #344]	@ (80016f8 <main+0x700>)
 80015a0:	f007 fbee 	bl	8008d80 <HAL_UART_Transmit>
					HAL_UART_Transmit(&huart10, (uint8_t*) "\n", sizeof("\n") - 1,0xffff);
 80015a4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80015a8:	2201      	movs	r2, #1
 80015aa:	495a      	ldr	r1, [pc, #360]	@ (8001714 <main+0x71c>)
 80015ac:	4852      	ldr	r0, [pc, #328]	@ (80016f8 <main+0x700>)
 80015ae:	f007 fbe7 	bl	8008d80 <HAL_UART_Transmit>
					break;
 80015b2:	e0f3      	b.n	800179c <main+0x7a4>
				case 9:    //第二次跑，离�?十字区，到达暂存�?
					Move_TO_zancunqu(22000, 4335);
 80015b4:	eddf 0a5a 	vldr	s1, [pc, #360]	@ 8001720 <main+0x728>
 80015b8:	ed9f 0a67 	vldr	s0, [pc, #412]	@ 8001758 <main+0x760>
 80015bc:	f00b fa64 	bl	800ca88 <Move_TO_zancunqu>
					// 将物料从车上放到目标区域
//					put_Material_to_circular_Staging_Area_frist(Second_Run);
					// 将物料从目标区域抓取回车�?
//					Grab_Material_to_Car_Staging_Area_frist(Second_Run);
					HAL_Delay(yanshi);
 80015c0:	2032      	movs	r0, #50	@ 0x32
 80015c2:	f001 fe4b 	bl	800325c <HAL_Delay>
					flag = 10;
 80015c6:	4b50      	ldr	r3, [pc, #320]	@ (8001708 <main+0x710>)
 80015c8:	220a      	movs	r2, #10
 80015ca:	801a      	strh	r2, [r3, #0]
					HAL_UART_Transmit(&huart10, (uint8_t*) "flag = ", sizeof("flag = \n") - 1,0xffff);
 80015cc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80015d0:	2208      	movs	r2, #8
 80015d2:	494e      	ldr	r1, [pc, #312]	@ (800170c <main+0x714>)
 80015d4:	4848      	ldr	r0, [pc, #288]	@ (80016f8 <main+0x700>)
 80015d6:	f007 fbd3 	bl	8008d80 <HAL_UART_Transmit>
					HAL_UART_Transmit(&huart10, (uint8_t*) "10", sizeof("10") - 1,0xffff);
 80015da:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80015de:	2202      	movs	r2, #2
 80015e0:	4959      	ldr	r1, [pc, #356]	@ (8001748 <main+0x750>)
 80015e2:	4845      	ldr	r0, [pc, #276]	@ (80016f8 <main+0x700>)
 80015e4:	f007 fbcc 	bl	8008d80 <HAL_UART_Transmit>
					HAL_UART_Transmit(&huart10, (uint8_t*) "\n", sizeof("\n") - 1,0xffff);
 80015e8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80015ec:	2201      	movs	r2, #1
 80015ee:	4949      	ldr	r1, [pc, #292]	@ (8001714 <main+0x71c>)
 80015f0:	4841      	ldr	r0, [pc, #260]	@ (80016f8 <main+0x700>)
 80015f2:	f007 fbc5 	bl	8008d80 <HAL_UART_Transmit>
					break;
 80015f6:	e0d1      	b.n	800179c <main+0x7a4>
				case 10:    //离开暂存区，到达十字�?
					Move_TO_jianzhi2(9000, 4335);
 80015f8:	eddf 0a49 	vldr	s1, [pc, #292]	@ 8001720 <main+0x728>
 80015fc:	ed9f 0a49 	vldr	s0, [pc, #292]	@ 8001724 <main+0x72c>
 8001600:	f00b fab8 	bl	800cb74 <Move_TO_jianzhi2>
					// 根据Action返回的坐标点进行校准     
					Move_Action_Nopid_Forward_Ctrl(1870, 1860);
 8001604:	eddf 0a3d 	vldr	s1, [pc, #244]	@ 80016fc <main+0x704>
 8001608:	ed9f 0a3d 	vldr	s0, [pc, #244]	@ 8001700 <main+0x708>
 800160c:	f00b fd90 	bl	800d130 <Move_Action_Nopid_Forward_Ctrl>
					flag = 11;
 8001610:	4b3d      	ldr	r3, [pc, #244]	@ (8001708 <main+0x710>)
 8001612:	220b      	movs	r2, #11
 8001614:	801a      	strh	r2, [r3, #0]
					HAL_UART_Transmit(&huart10, (uint8_t*) "flag = ", sizeof("flag = \n") - 1,0xffff);
 8001616:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800161a:	2208      	movs	r2, #8
 800161c:	493b      	ldr	r1, [pc, #236]	@ (800170c <main+0x714>)
 800161e:	4836      	ldr	r0, [pc, #216]	@ (80016f8 <main+0x700>)
 8001620:	f007 fbae 	bl	8008d80 <HAL_UART_Transmit>
					HAL_UART_Transmit(&huart10, (uint8_t*) "11", sizeof("11") - 1,0xffff);
 8001624:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001628:	2202      	movs	r2, #2
 800162a:	4948      	ldr	r1, [pc, #288]	@ (800174c <main+0x754>)
 800162c:	4832      	ldr	r0, [pc, #200]	@ (80016f8 <main+0x700>)
 800162e:	f007 fba7 	bl	8008d80 <HAL_UART_Transmit>
					HAL_UART_Transmit(&huart10, (uint8_t*) "\n", sizeof("\n") - 1,0xffff);
 8001632:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001636:	2201      	movs	r2, #1
 8001638:	4936      	ldr	r1, [pc, #216]	@ (8001714 <main+0x71c>)
 800163a:	482f      	ldr	r0, [pc, #188]	@ (80016f8 <main+0x700>)
 800163c:	f007 fba0 	bl	8008d80 <HAL_UART_Transmit>
					break;
 8001640:	e0ac      	b.n	800179c <main+0x7a4>
				case 11:       //离开十字区，到达粗加工区
					Move_TO_cujiagongqu(10000);
 8001642:	ed9f 0a35 	vldr	s0, [pc, #212]	@ 8001718 <main+0x720>
 8001646:	f00b fb0b 	bl	800cc60 <Move_TO_cujiagongqu>
//					put_Material_to_Circular_Rough_Processing_Area_frist(
//					Second_Run, Put_Material);
					//放完物料后，车身回归起始模样
//					Check_Status();
					flag = 12;
 800164a:	4b2f      	ldr	r3, [pc, #188]	@ (8001708 <main+0x710>)
 800164c:	220c      	movs	r2, #12
 800164e:	801a      	strh	r2, [r3, #0]
					HAL_UART_Transmit(&huart10, (uint8_t*) "flag = ", sizeof("flag = \n") - 1,0xffff);
 8001650:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001654:	2208      	movs	r2, #8
 8001656:	492d      	ldr	r1, [pc, #180]	@ (800170c <main+0x714>)
 8001658:	4827      	ldr	r0, [pc, #156]	@ (80016f8 <main+0x700>)
 800165a:	f007 fb91 	bl	8008d80 <HAL_UART_Transmit>
					HAL_UART_Transmit(&huart10, (uint8_t*) "12", sizeof("12") - 1,0xffff);
 800165e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001662:	2202      	movs	r2, #2
 8001664:	493a      	ldr	r1, [pc, #232]	@ (8001750 <main+0x758>)
 8001666:	4824      	ldr	r0, [pc, #144]	@ (80016f8 <main+0x700>)
 8001668:	f007 fb8a 	bl	8008d80 <HAL_UART_Transmit>
					HAL_UART_Transmit(&huart10, (uint8_t*) "\n", sizeof("\n") - 1,0xffff);
 800166c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001670:	2201      	movs	r2, #1
 8001672:	4928      	ldr	r1, [pc, #160]	@ (8001714 <main+0x71c>)
 8001674:	4820      	ldr	r0, [pc, #128]	@ (80016f8 <main+0x700>)
 8001676:	f007 fb83 	bl	8008d80 <HAL_UART_Transmit>
					break;
 800167a:	e08f      	b.n	800179c <main+0x7a4>
				case 12:       //离开粗加工区，到十字�?
					Move_TO_jianzhi3(9000, 4335);
 800167c:	eddf 0a28 	vldr	s1, [pc, #160]	@ 8001720 <main+0x728>
 8001680:	ed9f 0a28 	vldr	s0, [pc, #160]	@ 8001724 <main+0x72c>
 8001684:	f00b fb2c 	bl	800cce0 <Move_TO_jianzhi3>
					// 根据Action返回的坐标点进行校准 
					action_temp = Move_Action_Nopid_Left_Ctrl(170, 1860);
 8001688:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 80016fc <main+0x704>
 800168c:	ed9f 0a26 	vldr	s0, [pc, #152]	@ 8001728 <main+0x730>
 8001690:	f00b fbd4 	bl	800ce3c <Move_Action_Nopid_Left_Ctrl>
 8001694:	4603      	mov	r3, r0
 8001696:	71bb      	strb	r3, [r7, #6]
					HAL_Delay(50);
 8001698:	2032      	movs	r0, #50	@ 0x32
 800169a:	f001 fddf 	bl	800325c <HAL_Delay>
					while(action_temp == false)
 800169e:	e00a      	b.n	80016b6 <main+0x6be>
					{
						HAL_Delay(10);
 80016a0:	200a      	movs	r0, #10
 80016a2:	f001 fddb 	bl	800325c <HAL_Delay>
						action_temp = Move_Action_Nopid_Left_Ctrl(170, 1860);
 80016a6:	eddf 0a15 	vldr	s1, [pc, #84]	@ 80016fc <main+0x704>
 80016aa:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 8001728 <main+0x730>
 80016ae:	f00b fbc5 	bl	800ce3c <Move_Action_Nopid_Left_Ctrl>
 80016b2:	4603      	mov	r3, r0
 80016b4:	71bb      	strb	r3, [r7, #6]
					while(action_temp == false)
 80016b6:	79bb      	ldrb	r3, [r7, #6]
 80016b8:	f083 0301 	eor.w	r3, r3, #1
 80016bc:	b2db      	uxtb	r3, r3
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d1ee      	bne.n	80016a0 <main+0x6a8>
					}
					flag = 13;
 80016c2:	4b11      	ldr	r3, [pc, #68]	@ (8001708 <main+0x710>)
 80016c4:	220d      	movs	r2, #13
 80016c6:	801a      	strh	r2, [r3, #0]
					HAL_UART_Transmit(&huart10, (uint8_t*) "flag = ", sizeof("flag = \n") - 1,0xffff);
 80016c8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80016cc:	2208      	movs	r2, #8
 80016ce:	490f      	ldr	r1, [pc, #60]	@ (800170c <main+0x714>)
 80016d0:	4809      	ldr	r0, [pc, #36]	@ (80016f8 <main+0x700>)
 80016d2:	f007 fb55 	bl	8008d80 <HAL_UART_Transmit>
					HAL_UART_Transmit(&huart10, (uint8_t*) "13", sizeof("13") - 1,0xffff);
 80016d6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80016da:	2202      	movs	r2, #2
 80016dc:	491d      	ldr	r1, [pc, #116]	@ (8001754 <main+0x75c>)
 80016de:	4806      	ldr	r0, [pc, #24]	@ (80016f8 <main+0x700>)
 80016e0:	f007 fb4e 	bl	8008d80 <HAL_UART_Transmit>
					HAL_UART_Transmit(&huart10, (uint8_t*) "\n", sizeof("\n") - 1,0xffff);
 80016e4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80016e8:	2201      	movs	r2, #1
 80016ea:	490a      	ldr	r1, [pc, #40]	@ (8001714 <main+0x71c>)
 80016ec:	4802      	ldr	r0, [pc, #8]	@ (80016f8 <main+0x700>)
 80016ee:	f007 fb47 	bl	8008d80 <HAL_UART_Transmit>
					break;
 80016f2:	e053      	b.n	800179c <main+0x7a4>
 80016f4:	08012a5c 	.word	0x08012a5c
 80016f8:	24000a58 	.word	0x24000a58
 80016fc:	44e88000 	.word	0x44e88000
 8001700:	44e9c000 	.word	0x44e9c000
 8001704:	08012a24 	.word	0x08012a24
 8001708:	24000476 	.word	0x24000476
 800170c:	080129ec 	.word	0x080129ec
 8001710:	08012a70 	.word	0x08012a70
 8001714:	080129f8 	.word	0x080129f8
 8001718:	461c4000 	.word	0x461c4000
 800171c:	08012a74 	.word	0x08012a74
 8001720:	45877800 	.word	0x45877800
 8001724:	460ca000 	.word	0x460ca000
 8001728:	432a0000 	.word	0x432a0000
 800172c:	08012a78 	.word	0x08012a78
 8001730:	457a0000 	.word	0x457a0000
 8001734:	08012a7c 	.word	0x08012a7c
 8001738:	458ca000 	.word	0x458ca000
 800173c:	4485c000 	.word	0x4485c000
 8001740:	43200000 	.word	0x43200000
 8001744:	08012a80 	.word	0x08012a80
 8001748:	08012a84 	.word	0x08012a84
 800174c:	08012a88 	.word	0x08012a88
 8001750:	08012a8c 	.word	0x08012a8c
 8001754:	08012a90 	.word	0x08012a90
 8001758:	46abe000 	.word	0x46abe000
				case 13:      //直接回到启停�?
					Move_TO_fanyuanliaoqu(22000);
 800175c:	ed1f 0a02 	vldr	s0, [pc, #-8]	@ 8001758 <main+0x760>
 8001760:	f00b fb34 	bl	800cdcc <Move_TO_fanyuanliaoqu>
					flag = 14;
 8001764:	4b0e      	ldr	r3, [pc, #56]	@ (80017a0 <main+0x7a8>)
 8001766:	220e      	movs	r2, #14
 8001768:	801a      	strh	r2, [r3, #0]
					HAL_UART_Transmit(&huart10, (uint8_t*) "flag = ", sizeof("flag = \n") - 1,0xffff);
 800176a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800176e:	2208      	movs	r2, #8
 8001770:	490c      	ldr	r1, [pc, #48]	@ (80017a4 <main+0x7ac>)
 8001772:	480d      	ldr	r0, [pc, #52]	@ (80017a8 <main+0x7b0>)
 8001774:	f007 fb04 	bl	8008d80 <HAL_UART_Transmit>
					HAL_UART_Transmit(&huart10, (uint8_t*) "14", sizeof("14") - 1,0xffff);
 8001778:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800177c:	2202      	movs	r2, #2
 800177e:	490b      	ldr	r1, [pc, #44]	@ (80017ac <main+0x7b4>)
 8001780:	4809      	ldr	r0, [pc, #36]	@ (80017a8 <main+0x7b0>)
 8001782:	f007 fafd 	bl	8008d80 <HAL_UART_Transmit>
					HAL_UART_Transmit(&huart10, (uint8_t*) "\n", sizeof("\n") - 1,0xffff);
 8001786:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800178a:	2201      	movs	r2, #1
 800178c:	4908      	ldr	r1, [pc, #32]	@ (80017b0 <main+0x7b8>)
 800178e:	4806      	ldr	r0, [pc, #24]	@ (80017a8 <main+0x7b0>)
 8001790:	f007 faf6 	bl	8008d80 <HAL_UART_Transmit>
					break;
 8001794:	e002      	b.n	800179c <main+0x7a4>
				default:
					Move_Stop();
 8001796:	f00b f8ed 	bl	800c974 <Move_Stop>
					break;
 800179a:	bf00      	nop
				switch (flag)
 800179c:	e492      	b.n	80010c4 <main+0xcc>
 800179e:	bf00      	nop
 80017a0:	24000476 	.word	0x24000476
 80017a4:	080129ec 	.word	0x080129ec
 80017a8:	24000a58 	.word	0x24000a58
 80017ac:	08012a94 	.word	0x08012a94
 80017b0:	080129f8 	.word	0x080129f8

080017b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b09c      	sub	sp, #112	@ 0x70
 80017b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017be:	224c      	movs	r2, #76	@ 0x4c
 80017c0:	2100      	movs	r1, #0
 80017c2:	4618      	mov	r0, r3
 80017c4:	f00e f839 	bl	800f83a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017c8:	1d3b      	adds	r3, r7, #4
 80017ca:	2220      	movs	r2, #32
 80017cc:	2100      	movs	r1, #0
 80017ce:	4618      	mov	r0, r3
 80017d0:	f00e f833 	bl	800f83a <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80017d4:	2002      	movs	r0, #2
 80017d6:	f003 ffe3 	bl	80057a0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80017da:	2300      	movs	r3, #0
 80017dc:	603b      	str	r3, [r7, #0]
 80017de:	4b2b      	ldr	r3, [pc, #172]	@ (800188c <SystemClock_Config+0xd8>)
 80017e0:	699b      	ldr	r3, [r3, #24]
 80017e2:	4a2a      	ldr	r2, [pc, #168]	@ (800188c <SystemClock_Config+0xd8>)
 80017e4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80017e8:	6193      	str	r3, [r2, #24]
 80017ea:	4b28      	ldr	r3, [pc, #160]	@ (800188c <SystemClock_Config+0xd8>)
 80017ec:	699b      	ldr	r3, [r3, #24]
 80017ee:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80017f2:	603b      	str	r3, [r7, #0]
 80017f4:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80017f6:	bf00      	nop
 80017f8:	4b24      	ldr	r3, [pc, #144]	@ (800188c <SystemClock_Config+0xd8>)
 80017fa:	699b      	ldr	r3, [r3, #24]
 80017fc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001800:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001804:	d1f8      	bne.n	80017f8 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001806:	2301      	movs	r3, #1
 8001808:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800180a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800180e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001810:	2302      	movs	r3, #2
 8001812:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001814:	2302      	movs	r3, #2
 8001816:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8001818:	2302      	movs	r3, #2
 800181a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 44;
 800181c:	232c      	movs	r3, #44	@ 0x2c
 800181e:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8001820:	2301      	movs	r3, #1
 8001822:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001824:	2302      	movs	r3, #2
 8001826:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001828:	2302      	movs	r3, #2
 800182a:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800182c:	230c      	movs	r3, #12
 800182e:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001830:	2300      	movs	r3, #0
 8001832:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001834:	2300      	movs	r3, #0
 8001836:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001838:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800183c:	4618      	mov	r0, r3
 800183e:	f003 ffe9 	bl	8005814 <HAL_RCC_OscConfig>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d001      	beq.n	800184c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001848:	f000 fa04 	bl	8001c54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800184c:	233f      	movs	r3, #63	@ 0x3f
 800184e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001850:	2303      	movs	r3, #3
 8001852:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001854:	2300      	movs	r3, #0
 8001856:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001858:	2308      	movs	r3, #8
 800185a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800185c:	2340      	movs	r3, #64	@ 0x40
 800185e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001860:	2340      	movs	r3, #64	@ 0x40
 8001862:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001864:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001868:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800186a:	2340      	movs	r3, #64	@ 0x40
 800186c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800186e:	1d3b      	adds	r3, r7, #4
 8001870:	2103      	movs	r1, #3
 8001872:	4618      	mov	r0, r3
 8001874:	f004 fba8 	bl	8005fc8 <HAL_RCC_ClockConfig>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d001      	beq.n	8001882 <SystemClock_Config+0xce>
  {
    Error_Handler();
 800187e:	f000 f9e9 	bl	8001c54 <Error_Handler>
  }
}
 8001882:	bf00      	nop
 8001884:	3770      	adds	r7, #112	@ 0x70
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	58024800 	.word	0x58024800

08001890 <__io_putchar>:

/* USER CODE BEGIN 4 */
PUTCHAR_PROTOTYPE
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart4, (uint8_t*) &ch, 1, 0xFFFF);
 8001898:	1d39      	adds	r1, r7, #4
 800189a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800189e:	2201      	movs	r2, #1
 80018a0:	4803      	ldr	r0, [pc, #12]	@ (80018b0 <__io_putchar+0x20>)
 80018a2:	f007 fa6d 	bl	8008d80 <HAL_UART_Transmit>
	return ch;
 80018a6:	687b      	ldr	r3, [r7, #4]
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	3708      	adds	r7, #8
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	240005b8 	.word	0x240005b8

080018b4 <HAL_UART_RxCpltCallback>:

/*  ------------ 串口中断回调函数 -----------*/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b08c      	sub	sp, #48	@ 0x30
 80018b8:	af04      	add	r7, sp, #16
 80018ba:	6078      	str	r0, [r7, #4]
	// UART9 中断回调函数
	if (huart->Instance == UART9)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a6d      	ldr	r2, [pc, #436]	@ (8001a78 <HAL_UART_RxCpltCallback+0x1c4>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d10a      	bne.n	80018dc <HAL_UART_RxCpltCallback+0x28>
	{
		// 将缓冲区中的Action数据输入到Data_Analyse()函数进行处理
		Data_Analyse(data);
 80018c6:	4b6d      	ldr	r3, [pc, #436]	@ (8001a7c <HAL_UART_RxCpltCallback+0x1c8>)
 80018c8:	781b      	ldrb	r3, [r3, #0]
 80018ca:	4618      	mov	r0, r3
 80018cc:	f00a f802 	bl	800b8d4 <Data_Analyse>
		// 更新UART9接收中断回调, 中断源UART9, 缓冲区data, 缓冲大小 1 
		HAL_UART_Receive_IT(&huart9, &data, 1);
 80018d0:	2201      	movs	r2, #1
 80018d2:	496a      	ldr	r1, [pc, #424]	@ (8001a7c <HAL_UART_RxCpltCallback+0x1c8>)
 80018d4:	486a      	ldr	r0, [pc, #424]	@ (8001a80 <HAL_UART_RxCpltCallback+0x1cc>)
 80018d6:	f007 fba9 	bl	800902c <HAL_UART_Receive_IT>
 80018da:	e0c4      	b.n	8001a66 <HAL_UART_RxCpltCallback+0x1b2>

	}
	// UART4 中断回调函数
	else if (huart->Instance == UART4)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a68      	ldr	r2, [pc, #416]	@ (8001a84 <HAL_UART_RxCpltCallback+0x1d0>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d10a      	bne.n	80018fc <HAL_UART_RxCpltCallback+0x48>
	{
		// 将缓冲区中的屏幕数据输入到Data_Analyse()函数进行处理
		Check_Flag(Screen_data);
 80018e6:	4b68      	ldr	r3, [pc, #416]	@ (8001a88 <HAL_UART_RxCpltCallback+0x1d4>)
 80018e8:	781b      	ldrb	r3, [r3, #0]
 80018ea:	4618      	mov	r0, r3
 80018ec:	f00c f8c8 	bl	800da80 <Check_Flag>
		// 更新UART4接收中断回调, 中断源UART4, 缓冲区Screen_data, 缓冲大小 1                   	   
		HAL_UART_Receive_IT(&huart4, &Screen_data, 1);
 80018f0:	2201      	movs	r2, #1
 80018f2:	4965      	ldr	r1, [pc, #404]	@ (8001a88 <HAL_UART_RxCpltCallback+0x1d4>)
 80018f4:	4865      	ldr	r0, [pc, #404]	@ (8001a8c <HAL_UART_RxCpltCallback+0x1d8>)
 80018f6:	f007 fb99 	bl	800902c <HAL_UART_Receive_IT>
 80018fa:	e0b4      	b.n	8001a66 <HAL_UART_RxCpltCallback+0x1b2>
	}
	// FIXME:滴滴, 注释补一�?
	else if (huart->Instance == USART10)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a63      	ldr	r2, [pc, #396]	@ (8001a90 <HAL_UART_RxCpltCallback+0x1dc>)
 8001902:	4293      	cmp	r3, r2
 8001904:	f040 80af 	bne.w	8001a66 <HAL_UART_RxCpltCallback+0x1b2>
	{
		//static uint8_t RxState = 0;
		// 将缓冲区中的Action数据存入RxBuffer�?
		RxBuffer[Uart10_Rx_Cnt++] = aRxBuffer;
 8001908:	4b62      	ldr	r3, [pc, #392]	@ (8001a94 <HAL_UART_RxCpltCallback+0x1e0>)
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	1c5a      	adds	r2, r3, #1
 800190e:	b2d1      	uxtb	r1, r2
 8001910:	4a60      	ldr	r2, [pc, #384]	@ (8001a94 <HAL_UART_RxCpltCallback+0x1e0>)
 8001912:	7011      	strb	r1, [r2, #0]
 8001914:	461a      	mov	r2, r3
 8001916:	4b60      	ldr	r3, [pc, #384]	@ (8001a98 <HAL_UART_RxCpltCallback+0x1e4>)
 8001918:	7819      	ldrb	r1, [r3, #0]
 800191a:	4b60      	ldr	r3, [pc, #384]	@ (8001a9c <HAL_UART_RxCpltCallback+0x1e8>)
 800191c:	5499      	strb	r1, [r3, r2]
			memset(RxBuffer, 0, sizeof(RxBuffer));
			Uart10_Rx_Cnt = 0;
			return;
		}
		//如果接收到的收据是包头为a,包尾为b,判断是否能正常接收坐标返�?
		if (aRxBuffer == 'd')
 800191e:	4b5e      	ldr	r3, [pc, #376]	@ (8001a98 <HAL_UART_RxCpltCallback+0x1e4>)
 8001920:	781b      	ldrb	r3, [r3, #0]
 8001922:	2b64      	cmp	r3, #100	@ 0x64
 8001924:	d131      	bne.n	800198a <HAL_UART_RxCpltCallback+0xd6>
		{ // ������???'d'��˵�������Ϻ�Բ����λ��??
			char *start = strchr(RxBuffer, 'a');
 8001926:	2161      	movs	r1, #97	@ 0x61
 8001928:	485c      	ldr	r0, [pc, #368]	@ (8001a9c <HAL_UART_RxCpltCallback+0x1e8>)
 800192a:	f00d ff8e 	bl	800f84a <strchr>
 800192e:	61f8      	str	r0, [r7, #28]
			char *end = strchr(RxBuffer, 'd');
 8001930:	2164      	movs	r1, #100	@ 0x64
 8001932:	485a      	ldr	r0, [pc, #360]	@ (8001a9c <HAL_UART_RxCpltCallback+0x1e8>)
 8001934:	f00d ff89 	bl	800f84a <strchr>
 8001938:	61b8      	str	r0, [r7, #24]

			if (start != NULL && end != NULL && end > start)
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d024      	beq.n	800198a <HAL_UART_RxCpltCallback+0xd6>
 8001940:	69bb      	ldr	r3, [r7, #24]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d021      	beq.n	800198a <HAL_UART_RxCpltCallback+0xd6>
 8001946:	69ba      	ldr	r2, [r7, #24]
 8001948:	69fb      	ldr	r3, [r7, #28]
 800194a:	429a      	cmp	r2, r3
 800194c:	d91d      	bls.n	800198a <HAL_UART_RxCpltCallback+0xd6>
			{
				*end = '\0';
 800194e:	69bb      	ldr	r3, [r7, #24]
 8001950:	2200      	movs	r2, #0
 8001952:	701a      	strb	r2, [r3, #0]
				if (sscanf(start + 1, "%f,%f,%d", &x, &y, &colour) == 3)
 8001954:	69fb      	ldr	r3, [r7, #28]
 8001956:	1c58      	adds	r0, r3, #1
 8001958:	4b51      	ldr	r3, [pc, #324]	@ (8001aa0 <HAL_UART_RxCpltCallback+0x1ec>)
 800195a:	9300      	str	r3, [sp, #0]
 800195c:	4b51      	ldr	r3, [pc, #324]	@ (8001aa4 <HAL_UART_RxCpltCallback+0x1f0>)
 800195e:	4a52      	ldr	r2, [pc, #328]	@ (8001aa8 <HAL_UART_RxCpltCallback+0x1f4>)
 8001960:	4952      	ldr	r1, [pc, #328]	@ (8001aac <HAL_UART_RxCpltCallback+0x1f8>)
 8001962:	f00d fefb 	bl	800f75c <siscanf>
 8001966:	4603      	mov	r3, r0
 8001968:	2b03      	cmp	r3, #3
 800196a:	d105      	bne.n	8001978 <HAL_UART_RxCpltCallback+0xc4>
				{
					// ���ݽ����ɹ�
					Point_Flag = 1;
 800196c:	4b50      	ldr	r3, [pc, #320]	@ (8001ab0 <HAL_UART_RxCpltCallback+0x1fc>)
 800196e:	2201      	movs	r2, #1
 8001970:	701a      	strb	r2, [r3, #0]
					tx2_empty_recv_cnt = 0;	//接收到正常坐标返回时，a将tx2_empty_recv_cnt清零								12/11 ttxQWQ534
 8001972:	4b50      	ldr	r3, [pc, #320]	@ (8001ab4 <HAL_UART_RxCpltCallback+0x200>)
 8001974:	2200      	movs	r2, #0
 8001976:	701a      	strb	r2, [r3, #0]
				}

				// ��ջ���???
				memset(RxBuffer, 0, sizeof(RxBuffer));
 8001978:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800197c:	2100      	movs	r1, #0
 800197e:	4847      	ldr	r0, [pc, #284]	@ (8001a9c <HAL_UART_RxCpltCallback+0x1e8>)
 8001980:	f00d ff5b 	bl	800f83a <memset>
				Uart10_Rx_Cnt = 0;
 8001984:	4b43      	ldr	r3, [pc, #268]	@ (8001a94 <HAL_UART_RxCpltCallback+0x1e0>)
 8001986:	2200      	movs	r2, #0
 8001988:	701a      	strb	r2, [r3, #0]
			}
		}
		//如果接收到的收据是包头为c,包尾为b, 则进行二维码的数据存�?
		if (aRxBuffer == 'b')
 800198a:	4b43      	ldr	r3, [pc, #268]	@ (8001a98 <HAL_UART_RxCpltCallback+0x1e4>)
 800198c:	781b      	ldrb	r3, [r3, #0]
 800198e:	2b62      	cmp	r3, #98	@ 0x62
 8001990:	d169      	bne.n	8001a66 <HAL_UART_RxCpltCallback+0x1b2>
		{ // ������???'b'��˵���Ƕ�ά����??
			char *start = strchr(RxBuffer, 'c');
 8001992:	2163      	movs	r1, #99	@ 0x63
 8001994:	4841      	ldr	r0, [pc, #260]	@ (8001a9c <HAL_UART_RxCpltCallback+0x1e8>)
 8001996:	f00d ff58 	bl	800f84a <strchr>
 800199a:	6178      	str	r0, [r7, #20]
			char *end = strchr(RxBuffer, 'b');
 800199c:	2162      	movs	r1, #98	@ 0x62
 800199e:	483f      	ldr	r0, [pc, #252]	@ (8001a9c <HAL_UART_RxCpltCallback+0x1e8>)
 80019a0:	f00d ff53 	bl	800f84a <strchr>
 80019a4:	6138      	str	r0, [r7, #16]

			if (start != NULL && end != NULL && end > start)
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d027      	beq.n	80019fc <HAL_UART_RxCpltCallback+0x148>
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d024      	beq.n	80019fc <HAL_UART_RxCpltCallback+0x148>
 80019b2:	693a      	ldr	r2, [r7, #16]
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	429a      	cmp	r2, r3
 80019b8:	d920      	bls.n	80019fc <HAL_UART_RxCpltCallback+0x148>
			{
				*end = '\0';
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	2200      	movs	r2, #0
 80019be:	701a      	strb	r2, [r3, #0]
//				for (int i = 0; i < 6; i++) {
//					if (sscanf(start +1+ i, "%d", &QR_data[i])) {
				if (sscanf(start + 1, "%d,%d,%d,%d,%d,%d", &QR_data[0],
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	1c58      	adds	r0, r3, #1
 80019c4:	4b3c      	ldr	r3, [pc, #240]	@ (8001ab8 <HAL_UART_RxCpltCallback+0x204>)
 80019c6:	9303      	str	r3, [sp, #12]
 80019c8:	4b3c      	ldr	r3, [pc, #240]	@ (8001abc <HAL_UART_RxCpltCallback+0x208>)
 80019ca:	9302      	str	r3, [sp, #8]
 80019cc:	4b3c      	ldr	r3, [pc, #240]	@ (8001ac0 <HAL_UART_RxCpltCallback+0x20c>)
 80019ce:	9301      	str	r3, [sp, #4]
 80019d0:	4b3c      	ldr	r3, [pc, #240]	@ (8001ac4 <HAL_UART_RxCpltCallback+0x210>)
 80019d2:	9300      	str	r3, [sp, #0]
 80019d4:	4b3c      	ldr	r3, [pc, #240]	@ (8001ac8 <HAL_UART_RxCpltCallback+0x214>)
 80019d6:	4a3d      	ldr	r2, [pc, #244]	@ (8001acc <HAL_UART_RxCpltCallback+0x218>)
 80019d8:	493d      	ldr	r1, [pc, #244]	@ (8001ad0 <HAL_UART_RxCpltCallback+0x21c>)
 80019da:	f00d febf 	bl	800f75c <siscanf>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d002      	beq.n	80019ea <HAL_UART_RxCpltCallback+0x136>
						&QR_data[1], &QR_data[2], &QR_data[3], &QR_data[4],
						&QR_data[5]))
				{
					// ���ݽ����ɹ�
//						if(i==5) QR_Flag =  1;
					QR_Flag = 1;
 80019e4:	4b3b      	ldr	r3, [pc, #236]	@ (8001ad4 <HAL_UART_RxCpltCallback+0x220>)
 80019e6:	2201      	movs	r2, #1
 80019e8:	601a      	str	r2, [r3, #0]
				}

//				}
				// ��ջ���???
				memset(RxBuffer, 0, sizeof(RxBuffer));
 80019ea:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80019ee:	2100      	movs	r1, #0
 80019f0:	482a      	ldr	r0, [pc, #168]	@ (8001a9c <HAL_UART_RxCpltCallback+0x1e8>)
 80019f2:	f00d ff22 	bl	800f83a <memset>
				Uart10_Rx_Cnt = 0;
 80019f6:	4b27      	ldr	r3, [pc, #156]	@ (8001a94 <HAL_UART_RxCpltCallback+0x1e0>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	701a      	strb	r2, [r3, #0]
			}

			if (aRxBuffer == 'h')//接收到包尾是h，说明接收到了tx2发�?�的未检测到目标物体的标志，则此中断每进�?次，tx2_empty_recv_cnt要自�?         	   12/11 ttxQWQ534
 80019fc:	4b26      	ldr	r3, [pc, #152]	@ (8001a98 <HAL_UART_RxCpltCallback+0x1e4>)
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	2b68      	cmp	r3, #104	@ 0x68
 8001a02:	d130      	bne.n	8001a66 <HAL_UART_RxCpltCallback+0x1b2>
			{
				char *start = strchr(RxBuffer, 'g');
 8001a04:	2167      	movs	r1, #103	@ 0x67
 8001a06:	4825      	ldr	r0, [pc, #148]	@ (8001a9c <HAL_UART_RxCpltCallback+0x1e8>)
 8001a08:	f00d ff1f 	bl	800f84a <strchr>
 8001a0c:	60f8      	str	r0, [r7, #12]
				char *end = strchr(RxBuffer, 'h');
 8001a0e:	2168      	movs	r1, #104	@ 0x68
 8001a10:	4822      	ldr	r0, [pc, #136]	@ (8001a9c <HAL_UART_RxCpltCallback+0x1e8>)
 8001a12:	f00d ff1a 	bl	800f84a <strchr>
 8001a16:	60b8      	str	r0, [r7, #8]

				if (start != NULL && end != NULL && end > start)
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d023      	beq.n	8001a66 <HAL_UART_RxCpltCallback+0x1b2>
 8001a1e:	68bb      	ldr	r3, [r7, #8]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d020      	beq.n	8001a66 <HAL_UART_RxCpltCallback+0x1b2>
 8001a24:	68ba      	ldr	r2, [r7, #8]
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	429a      	cmp	r2, r3
 8001a2a:	d91c      	bls.n	8001a66 <HAL_UART_RxCpltCallback+0x1b2>
				{
					*end = '\0';
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	2200      	movs	r2, #0
 8001a30:	701a      	strb	r2, [r3, #0]
					if (sscanf(start + 1, "%c", tx2_empty_recv_cnt))
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	3301      	adds	r3, #1
 8001a36:	4a1f      	ldr	r2, [pc, #124]	@ (8001ab4 <HAL_UART_RxCpltCallback+0x200>)
 8001a38:	7812      	ldrb	r2, [r2, #0]
 8001a3a:	4927      	ldr	r1, [pc, #156]	@ (8001ad8 <HAL_UART_RxCpltCallback+0x224>)
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f00d fe8d 	bl	800f75c <siscanf>
 8001a42:	4603      	mov	r3, r0
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d005      	beq.n	8001a54 <HAL_UART_RxCpltCallback+0x1a0>
					{
						tx2_empty_recv_cnt++;
 8001a48:	4b1a      	ldr	r3, [pc, #104]	@ (8001ab4 <HAL_UART_RxCpltCallback+0x200>)
 8001a4a:	781b      	ldrb	r3, [r3, #0]
 8001a4c:	3301      	adds	r3, #1
 8001a4e:	b2da      	uxtb	r2, r3
 8001a50:	4b18      	ldr	r3, [pc, #96]	@ (8001ab4 <HAL_UART_RxCpltCallback+0x200>)
 8001a52:	701a      	strb	r2, [r3, #0]
					}
					memset(RxBuffer, 0, sizeof(RxBuffer));
 8001a54:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001a58:	2100      	movs	r1, #0
 8001a5a:	4810      	ldr	r0, [pc, #64]	@ (8001a9c <HAL_UART_RxCpltCallback+0x1e8>)
 8001a5c:	f00d feed 	bl	800f83a <memset>
					Uart10_Rx_Cnt = 0;
 8001a60:	4b0c      	ldr	r3, [pc, #48]	@ (8001a94 <HAL_UART_RxCpltCallback+0x1e0>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	701a      	strb	r2, [r3, #0]
//			memset(RxBuffer, 0, sizeof(RxBuffer));
//
//		}
	}
	//	更新串口接收中断,中断触发�? UART10,接收数组 aRxBuffer,缓存大小 1
	HAL_UART_Receive_IT(&huart10, (uint8_t*) &aRxBuffer, 1);
 8001a66:	2201      	movs	r2, #1
 8001a68:	490b      	ldr	r1, [pc, #44]	@ (8001a98 <HAL_UART_RxCpltCallback+0x1e4>)
 8001a6a:	481c      	ldr	r0, [pc, #112]	@ (8001adc <HAL_UART_RxCpltCallback+0x228>)
 8001a6c:	f007 fade 	bl	800902c <HAL_UART_Receive_IT>
}
 8001a70:	3720      	adds	r7, #32
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	40011800 	.word	0x40011800
 8001a7c:	24000364 	.word	0x24000364
 8001a80:	24000808 	.word	0x24000808
 8001a84:	40004c00 	.word	0x40004c00
 8001a88:	24000365 	.word	0x24000365
 8001a8c:	240005b8 	.word	0x240005b8
 8001a90:	40011c00 	.word	0x40011c00
 8001a94:	24000468 	.word	0x24000468
 8001a98:	24000367 	.word	0x24000367
 8001a9c:	24000368 	.word	0x24000368
 8001aa0:	24000478 	.word	0x24000478
 8001aa4:	24000470 	.word	0x24000470
 8001aa8:	2400046c 	.word	0x2400046c
 8001aac:	08012a98 	.word	0x08012a98
 8001ab0:	24000474 	.word	0x24000474
 8001ab4:	24000475 	.word	0x24000475
 8001ab8:	24000014 	.word	0x24000014
 8001abc:	24000010 	.word	0x24000010
 8001ac0:	2400000c 	.word	0x2400000c
 8001ac4:	24000008 	.word	0x24000008
 8001ac8:	24000004 	.word	0x24000004
 8001acc:	24000000 	.word	0x24000000
 8001ad0:	08012aa4 	.word	0x08012aa4
 8001ad4:	2400047c 	.word	0x2400047c
 8001ad8:	08012ab8 	.word	0x08012ab8
 8001adc:	24000a58 	.word	0x24000a58

08001ae0 <HAL_TIM_PeriodElapsedCallback>:

/*  ------------ 定时器中断回调函�? -----------*/
extern uint16_t time_tx;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
	// 如果中断源为TIM2
	if (htim == &htim2)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	4a33      	ldr	r2, [pc, #204]	@ (8001bb8 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d106      	bne.n	8001afe <HAL_TIM_PeriodElapsedCallback+0x1e>

//		X_out = X_Ctrl(&XPID, x_goal);
//		Y_out = Y_Ctrl(&YPID, y_goal);
//		A_out = A_Ctrl(&APID, a_goal);
		// Action数据展示
		Action_Show();
 8001af0:	f00b fea0 	bl	800d834 <Action_Show>
		// 二维码数据展�?
		QR_Show();
 8001af4:	f00b ff1a 	bl	800d92c <QR_Show>
		// 色环,物料坐标数据展示
		Point_Show();
 8001af8:	f00b ff3a 	bl	800d970 <Point_Show>
 8001afc:	e059      	b.n	8001bb2 <HAL_TIM_PeriodElapsedCallback+0xd2>

	}
	// 如果中断源为TIM3
	else if (htim == &htim3)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	4a2e      	ldr	r2, [pc, #184]	@ (8001bbc <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d126      	bne.n	8001b54 <HAL_TIM_PeriodElapsedCallback+0x74>
	{
		// 根据TX2回传坐标进行PID调节
		TX_X_out = Tx_X_Ctrl(&TXPID, tx_target);
 8001b06:	4b2e      	ldr	r3, [pc, #184]	@ (8001bc0 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001b08:	edd3 7a00 	vldr	s15, [r3]
 8001b0c:	eeb0 0a67 	vmov.f32	s0, s15
 8001b10:	482c      	ldr	r0, [pc, #176]	@ (8001bc4 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001b12:	f00a f9ad 	bl	800be70 <Tx_X_Ctrl>
 8001b16:	4603      	mov	r3, r0
 8001b18:	ee07 3a90 	vmov	s15, r3
 8001b1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b20:	4b29      	ldr	r3, [pc, #164]	@ (8001bc8 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001b22:	edc3 7a00 	vstr	s15, [r3]
		TX_Y_out = Tx_Y_Ctrl(&TYPID, ty_target);
 8001b26:	4b29      	ldr	r3, [pc, #164]	@ (8001bcc <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001b28:	edd3 7a00 	vldr	s15, [r3]
 8001b2c:	eeb0 0a67 	vmov.f32	s0, s15
 8001b30:	4827      	ldr	r0, [pc, #156]	@ (8001bd0 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001b32:	f00a fa43 	bl	800bfbc <Tx_Y_Ctrl>
 8001b36:	4603      	mov	r3, r0
 8001b38:	ee07 3a90 	vmov	s15, r3
 8001b3c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b40:	4b24      	ldr	r3, [pc, #144]	@ (8001bd4 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8001b42:	edc3 7a00 	vstr	s15, [r3]
		time_tx++;
 8001b46:	4b24      	ldr	r3, [pc, #144]	@ (8001bd8 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8001b48:	881b      	ldrh	r3, [r3, #0]
 8001b4a:	3301      	adds	r3, #1
 8001b4c:	b29a      	uxth	r2, r3
 8001b4e:	4b22      	ldr	r3, [pc, #136]	@ (8001bd8 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8001b50:	801a      	strh	r2, [r3, #0]
 8001b52:	e02e      	b.n	8001bb2 <HAL_TIM_PeriodElapsedCallback+0xd2>
	}
	// 如果中断源为TIM5
	else if (htim == &htim5)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	4a21      	ldr	r2, [pc, #132]	@ (8001bdc <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d109      	bne.n	8001b70 <HAL_TIM_PeriodElapsedCallback+0x90>
	{
		// TODO: �?要注释理�?
		if (time5_jiancha != 0)
 8001b5c:	4b20      	ldr	r3, [pc, #128]	@ (8001be0 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d026      	beq.n	8001bb2 <HAL_TIM_PeriodElapsedCallback+0xd2>
			time5_jiancha--;
 8001b64:	4b1e      	ldr	r3, [pc, #120]	@ (8001be0 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	3b01      	subs	r3, #1
 8001b6a:	4a1d      	ldr	r2, [pc, #116]	@ (8001be0 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8001b6c:	6013      	str	r3, [r2, #0]
 8001b6e:	e020      	b.n	8001bb2 <HAL_TIM_PeriodElapsedCallback+0xd2>
	}
//	中断源为TIM12
	else if (htim == &htim12)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	4a1c      	ldr	r2, [pc, #112]	@ (8001be4 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d11c      	bne.n	8001bb2 <HAL_TIM_PeriodElapsedCallback+0xd2>
	{
		// 如果允许阻塞查询标志位为true
		if (Apply_Chock == true)
 8001b78:	4b1b      	ldr	r3, [pc, #108]	@ (8001be8 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d018      	beq.n	8001bb2 <HAL_TIM_PeriodElapsedCallback+0xd2>
		{
			// 如果底层步进电机到位返回标志位为true
			if (Base_Data == true)
 8001b80:	4b1a      	ldr	r3, [pc, #104]	@ (8001bec <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d013      	beq.n	8001bb0 <HAL_TIM_PeriodElapsedCallback+0xd0>
			{
				// 取消阻塞状�??,阻塞标志位记为false
				Choke_Flag = false;
 8001b88:	4b19      	ldr	r3, [pc, #100]	@ (8001bf0 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	701a      	strb	r2, [r3, #0]
				// 申请阻塞查询标志位记为false
				Apply_Chock = false;
 8001b8e:	4b16      	ldr	r3, [pc, #88]	@ (8001be8 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	701a      	strb	r2, [r3, #0]
				// 关闭定时器中断
				Base_Data = false;
 8001b94:	4b15      	ldr	r3, [pc, #84]	@ (8001bec <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	701a      	strb	r2, [r3, #0]
				HAL_TIM_Base_Stop_IT(&htim12);
 8001b9a:	4812      	ldr	r0, [pc, #72]	@ (8001be4 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8001b9c:	f006 fc40 	bl	8008420 <HAL_TIM_Base_Stop_IT>
				// 重置底层步进电机到位返回标志位为false
				HAL_UART_Transmit(&huart10, (uint8_t*) "到位回读\n", sizeof("到位回读\n") - 1,0xffff);
 8001ba0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001ba4:	220d      	movs	r2, #13
 8001ba6:	4913      	ldr	r1, [pc, #76]	@ (8001bf4 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8001ba8:	4813      	ldr	r0, [pc, #76]	@ (8001bf8 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8001baa:	f007 f8e9 	bl	8008d80 <HAL_UART_Transmit>
 8001bae:	e000      	b.n	8001bb2 <HAL_TIM_PeriodElapsedCallback+0xd2>
			// 	// 重置底层步进电机到位返回标志位为false
			// 	Base_Data = false;
			// } 
			else
			{
				return;
 8001bb0:	bf00      	nop
			}
		}
	}
}
 8001bb2:	3708      	adds	r7, #8
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	24000488 	.word	0x24000488
 8001bbc:	240004d4 	.word	0x240004d4
 8001bc0:	24000018 	.word	0x24000018
 8001bc4:	24000bc0 	.word	0x24000bc0
 8001bc8:	24000c18 	.word	0x24000c18
 8001bcc:	2400001c 	.word	0x2400001c
 8001bd0:	24000bec 	.word	0x24000bec
 8001bd4:	24000c1c 	.word	0x24000c1c
 8001bd8:	24000c28 	.word	0x24000c28
 8001bdc:	24000520 	.word	0x24000520
 8001be0:	24000c24 	.word	0x24000c24
 8001be4:	2400056c 	.word	0x2400056c
 8001be8:	24000c21 	.word	0x24000c21
 8001bec:	24000361 	.word	0x24000361
 8001bf0:	24000c20 	.word	0x24000c20
 8001bf4:	08012abc 	.word	0x08012abc
 8001bf8:	24000a58 	.word	0x24000a58

08001bfc <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b084      	sub	sp, #16
 8001c00:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001c02:	463b      	mov	r3, r7
 8001c04:	2200      	movs	r2, #0
 8001c06:	601a      	str	r2, [r3, #0]
 8001c08:	605a      	str	r2, [r3, #4]
 8001c0a:	609a      	str	r2, [r3, #8]
 8001c0c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001c0e:	f001 fc59 	bl	80034c4 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001c12:	2301      	movs	r3, #1
 8001c14:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001c16:	2300      	movs	r3, #0
 8001c18:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001c1e:	231f      	movs	r3, #31
 8001c20:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8001c22:	2387      	movs	r3, #135	@ 0x87
 8001c24:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001c26:	2300      	movs	r3, #0
 8001c28:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001c32:	2301      	movs	r3, #1
 8001c34:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001c36:	2300      	movs	r3, #0
 8001c38:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001c3e:	463b      	mov	r3, r7
 8001c40:	4618      	mov	r0, r3
 8001c42:	f001 fc77 	bl	8003534 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001c46:	2004      	movs	r0, #4
 8001c48:	f001 fc54 	bl	80034f4 <HAL_MPU_Enable>

}
 8001c4c:	bf00      	nop
 8001c4e:	3710      	adds	r7, #16
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}

08001c54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c58:	b672      	cpsid	i
}
 8001c5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001c5c:	bf00      	nop
 8001c5e:	e7fd      	b.n	8001c5c <Error_Handler+0x8>

08001c60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b083      	sub	sp, #12
 8001c64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c66:	4b0a      	ldr	r3, [pc, #40]	@ (8001c90 <HAL_MspInit+0x30>)
 8001c68:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001c6c:	4a08      	ldr	r2, [pc, #32]	@ (8001c90 <HAL_MspInit+0x30>)
 8001c6e:	f043 0302 	orr.w	r3, r3, #2
 8001c72:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001c76:	4b06      	ldr	r3, [pc, #24]	@ (8001c90 <HAL_MspInit+0x30>)
 8001c78:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001c7c:	f003 0302 	and.w	r3, r3, #2
 8001c80:	607b      	str	r3, [r7, #4]
 8001c82:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c84:	bf00      	nop
 8001c86:	370c      	adds	r7, #12
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8e:	4770      	bx	lr
 8001c90:	58024400 	.word	0x58024400

08001c94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 8001c98:	bf00      	nop
 8001c9a:	e7fd      	b.n	8001c98 <NMI_Handler+0x4>

08001c9c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ca0:	bf00      	nop
 8001ca2:	e7fd      	b.n	8001ca0 <HardFault_Handler+0x4>

08001ca4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ca8:	bf00      	nop
 8001caa:	e7fd      	b.n	8001ca8 <MemManage_Handler+0x4>

08001cac <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cac:	b480      	push	{r7}
 8001cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cb0:	bf00      	nop
 8001cb2:	e7fd      	b.n	8001cb0 <BusFault_Handler+0x4>

08001cb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cb8:	bf00      	nop
 8001cba:	e7fd      	b.n	8001cb8 <UsageFault_Handler+0x4>

08001cbc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cc0:	bf00      	nop
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr

08001cca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cca:	b480      	push	{r7}
 8001ccc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cce:	bf00      	nop
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr

08001cd8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cdc:	bf00      	nop
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr

08001ce6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ce6:	b580      	push	{r7, lr}
 8001ce8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cea:	f001 fa97 	bl	800321c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cee:	bf00      	nop
 8001cf0:	bd80      	pop	{r7, pc}
	...

08001cf4 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8001cf8:	4802      	ldr	r0, [pc, #8]	@ (8001d04 <FDCAN1_IT0_IRQHandler+0x10>)
 8001cfa:	f002 fead 	bl	8004a58 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8001cfe:	bf00      	nop
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	240002b8 	.word	0x240002b8

08001d08 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001d0c:	4802      	ldr	r0, [pc, #8]	@ (8001d18 <TIM2_IRQHandler+0x10>)
 8001d0e:	f006 fbb6 	bl	800847e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001d12:	bf00      	nop
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	24000488 	.word	0x24000488

08001d1c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001d20:	4802      	ldr	r0, [pc, #8]	@ (8001d2c <TIM3_IRQHandler+0x10>)
 8001d22:	f006 fbac 	bl	800847e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001d26:	bf00      	nop
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	240004d4 	.word	0x240004d4

08001d30 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001d34:	4802      	ldr	r0, [pc, #8]	@ (8001d40 <USART2_IRQHandler+0x10>)
 8001d36:	f007 f9c5 	bl	80090c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001d3a:	bf00      	nop
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	2400089c 	.word	0x2400089c

08001d44 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001d48:	4802      	ldr	r0, [pc, #8]	@ (8001d54 <USART3_IRQHandler+0x10>)
 8001d4a:	f007 f9bb 	bl	80090c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001d4e:	bf00      	nop
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	24000930 	.word	0x24000930

08001d58 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim12);
 8001d5c:	4802      	ldr	r0, [pc, #8]	@ (8001d68 <TIM8_BRK_TIM12_IRQHandler+0x10>)
 8001d5e:	f006 fb8e 	bl	800847e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8001d62:	bf00      	nop
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	2400056c 	.word	0x2400056c

08001d6c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001d70:	4802      	ldr	r0, [pc, #8]	@ (8001d7c <TIM5_IRQHandler+0x10>)
 8001d72:	f006 fb84 	bl	800847e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001d76:	bf00      	nop
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	24000520 	.word	0x24000520

08001d80 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001d84:	4802      	ldr	r0, [pc, #8]	@ (8001d90 <UART4_IRQHandler+0x10>)
 8001d86:	f007 f99d 	bl	80090c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001d8a:	bf00      	nop
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	240005b8 	.word	0x240005b8

08001d94 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8001d98:	4802      	ldr	r0, [pc, #8]	@ (8001da4 <UART7_IRQHandler+0x10>)
 8001d9a:	f007 f993 	bl	80090c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8001d9e:	bf00      	nop
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	240006e0 	.word	0x240006e0

08001da8 <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 8001dac:	4802      	ldr	r0, [pc, #8]	@ (8001db8 <UART8_IRQHandler+0x10>)
 8001dae:	f007 f989 	bl	80090c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 8001db2:	bf00      	nop
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	24000774 	.word	0x24000774

08001dbc <UART9_IRQHandler>:

/**
  * @brief This function handles UART9 global interrupt.
  */
void UART9_IRQHandler(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART9_IRQn 0 */

  /* USER CODE END UART9_IRQn 0 */
  HAL_UART_IRQHandler(&huart9);
 8001dc0:	4802      	ldr	r0, [pc, #8]	@ (8001dcc <UART9_IRQHandler+0x10>)
 8001dc2:	f007 f97f 	bl	80090c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART9_IRQn 1 */

  /* USER CODE END UART9_IRQn 1 */
}
 8001dc6:	bf00      	nop
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	24000808 	.word	0x24000808

08001dd0 <USART10_IRQHandler>:

/**
  * @brief This function handles USART10 global interrupt.
  */
void USART10_IRQHandler(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART10_IRQn 0 */

  /* USER CODE END USART10_IRQn 0 */
  HAL_UART_IRQHandler(&huart10);
 8001dd4:	4802      	ldr	r0, [pc, #8]	@ (8001de0 <USART10_IRQHandler+0x10>)
 8001dd6:	f007 f975 	bl	80090c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART10_IRQn 1 */

  /* USER CODE END USART10_IRQn 1 */
}
 8001dda:	bf00      	nop
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	24000a58 	.word	0x24000a58

08001de4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	af00      	add	r7, sp, #0
	return 1;
 8001de8:	2301      	movs	r3, #1
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr

08001df4 <_kill>:

int _kill(int pid, int sig)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
 8001dfc:	6039      	str	r1, [r7, #0]
	(void) pid;
	(void) sig;
	errno = EINVAL;
 8001dfe:	f00d fd9d 	bl	800f93c <__errno>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2216      	movs	r2, #22
 8001e06:	601a      	str	r2, [r3, #0]
	return -1;
 8001e08:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	3708      	adds	r7, #8
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}

08001e14 <_exit>:

void _exit(int status)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b082      	sub	sp, #8
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001e1c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e20:	6878      	ldr	r0, [r7, #4]
 8001e22:	f7ff ffe7 	bl	8001df4 <_kill>
	while (1)
 8001e26:	bf00      	nop
 8001e28:	e7fd      	b.n	8001e26 <_exit+0x12>

08001e2a <_read>:
	{
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e2a:	b580      	push	{r7, lr}
 8001e2c:	b086      	sub	sp, #24
 8001e2e:	af00      	add	r7, sp, #0
 8001e30:	60f8      	str	r0, [r7, #12]
 8001e32:	60b9      	str	r1, [r7, #8]
 8001e34:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e36:	2300      	movs	r3, #0
 8001e38:	617b      	str	r3, [r7, #20]
 8001e3a:	e00a      	b.n	8001e52 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001e3c:	f3af 8000 	nop.w
 8001e40:	4601      	mov	r1, r0
 8001e42:	68bb      	ldr	r3, [r7, #8]
 8001e44:	1c5a      	adds	r2, r3, #1
 8001e46:	60ba      	str	r2, [r7, #8]
 8001e48:	b2ca      	uxtb	r2, r1
 8001e4a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	3301      	adds	r3, #1
 8001e50:	617b      	str	r3, [r7, #20]
 8001e52:	697a      	ldr	r2, [r7, #20]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	429a      	cmp	r2, r3
 8001e58:	dbf0      	blt.n	8001e3c <_read+0x12>
	}

	return len;
 8001e5a:	687b      	ldr	r3, [r7, #4]
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	3718      	adds	r7, #24
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}

08001e64 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b086      	sub	sp, #24
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	60f8      	str	r0, [r7, #12]
 8001e6c:	60b9      	str	r1, [r7, #8]
 8001e6e:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e70:	2300      	movs	r3, #0
 8001e72:	617b      	str	r3, [r7, #20]
 8001e74:	e009      	b.n	8001e8a <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001e76:	68bb      	ldr	r3, [r7, #8]
 8001e78:	1c5a      	adds	r2, r3, #1
 8001e7a:	60ba      	str	r2, [r7, #8]
 8001e7c:	781b      	ldrb	r3, [r3, #0]
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f7ff fd06 	bl	8001890 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	3301      	adds	r3, #1
 8001e88:	617b      	str	r3, [r7, #20]
 8001e8a:	697a      	ldr	r2, [r7, #20]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	429a      	cmp	r2, r3
 8001e90:	dbf1      	blt.n	8001e76 <_write+0x12>
	}
	return len;
 8001e92:	687b      	ldr	r3, [r7, #4]
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	3718      	adds	r7, #24
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}

08001e9c <_close>:

int _close(int file)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b083      	sub	sp, #12
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
	(void) file;
	return -1;
 8001ea4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	370c      	adds	r7, #12
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr

08001eb4 <_fstat>:

int _fstat(int file, struct stat *st)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b083      	sub	sp, #12
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
 8001ebc:	6039      	str	r1, [r7, #0]
	(void) file;
	st->st_mode = S_IFCHR;
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001ec4:	605a      	str	r2, [r3, #4]
	return 0;
 8001ec6:	2300      	movs	r3, #0
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	370c      	adds	r7, #12
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr

08001ed4 <_isatty>:

int _isatty(int file)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b083      	sub	sp, #12
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
	(void) file;
	return 1;
 8001edc:	2301      	movs	r3, #1
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	370c      	adds	r7, #12
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr

08001eea <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001eea:	b480      	push	{r7}
 8001eec:	b085      	sub	sp, #20
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	60f8      	str	r0, [r7, #12]
 8001ef2:	60b9      	str	r1, [r7, #8]
 8001ef4:	607a      	str	r2, [r7, #4]
	(void) file;
	(void) ptr;
	(void) dir;
	return 0;
 8001ef6:	2300      	movs	r3, #0
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	3714      	adds	r7, #20
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr

08001f04 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b086      	sub	sp, #24
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 8001f0c:	4a14      	ldr	r2, [pc, #80]	@ (8001f60 <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 8001f0e:	4b15      	ldr	r3, [pc, #84]	@ (8001f64 <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 8001f18:	4b13      	ldr	r3, [pc, #76]	@ (8001f68 <_sbrk+0x64>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d102      	bne.n	8001f26 <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 8001f20:	4b11      	ldr	r3, [pc, #68]	@ (8001f68 <_sbrk+0x64>)
 8001f22:	4a12      	ldr	r2, [pc, #72]	@ (8001f6c <_sbrk+0x68>)
 8001f24:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 8001f26:	4b10      	ldr	r3, [pc, #64]	@ (8001f68 <_sbrk+0x64>)
 8001f28:	681a      	ldr	r2, [r3, #0]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	4413      	add	r3, r2
 8001f2e:	693a      	ldr	r2, [r7, #16]
 8001f30:	429a      	cmp	r2, r3
 8001f32:	d207      	bcs.n	8001f44 <_sbrk+0x40>
		errno = ENOMEM;
 8001f34:	f00d fd02 	bl	800f93c <__errno>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	220c      	movs	r2, #12
 8001f3c:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 8001f3e:	f04f 33ff 	mov.w	r3, #4294967295
 8001f42:	e009      	b.n	8001f58 <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 8001f44:	4b08      	ldr	r3, [pc, #32]	@ (8001f68 <_sbrk+0x64>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 8001f4a:	4b07      	ldr	r3, [pc, #28]	@ (8001f68 <_sbrk+0x64>)
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4413      	add	r3, r2
 8001f52:	4a05      	ldr	r2, [pc, #20]	@ (8001f68 <_sbrk+0x64>)
 8001f54:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 8001f56:	68fb      	ldr	r3, [r7, #12]
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	3718      	adds	r7, #24
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	24050000 	.word	0x24050000
 8001f64:	00000400 	.word	0x00000400
 8001f68:	24000484 	.word	0x24000484
 8001f6c:	24000e48 	.word	0x24000e48

08001f70 <SystemInit>:
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void)
{
 8001f70:	b480      	push	{r7}
 8001f72:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
 8001f74:	4b32      	ldr	r3, [pc, #200]	@ (8002040 <SystemInit+0xd0>)
 8001f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f7a:	4a31      	ldr	r2, [pc, #196]	@ (8002040 <SystemInit+0xd0>)
 8001f7c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001f80:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
	/* Reset the RCC clock configuration to the default reset state ------------*/

	/* Increasing the CPU frequency */
	if (FLASH_LATENCY_DEFAULT > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001f84:	4b2f      	ldr	r3, [pc, #188]	@ (8002044 <SystemInit+0xd4>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f003 030f 	and.w	r3, r3, #15
 8001f8c:	2b06      	cmp	r3, #6
 8001f8e:	d807      	bhi.n	8001fa0 <SystemInit+0x30>
	{
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 8001f90:	4b2c      	ldr	r3, [pc, #176]	@ (8002044 <SystemInit+0xd4>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f023 030f 	bic.w	r3, r3, #15
 8001f98:	4a2a      	ldr	r2, [pc, #168]	@ (8002044 <SystemInit+0xd4>)
 8001f9a:	f043 0307 	orr.w	r3, r3, #7
 8001f9e:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

	/* Set HSION bit */
	RCC->CR |= RCC_CR_HSION;
 8001fa0:	4b29      	ldr	r3, [pc, #164]	@ (8002048 <SystemInit+0xd8>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a28      	ldr	r2, [pc, #160]	@ (8002048 <SystemInit+0xd8>)
 8001fa6:	f043 0301 	orr.w	r3, r3, #1
 8001faa:	6013      	str	r3, [r2, #0]

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;
 8001fac:	4b26      	ldr	r3, [pc, #152]	@ (8002048 <SystemInit+0xd8>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	611a      	str	r2, [r3, #16]

	/* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
	RCC->CR &= 0xEAF6ED7FU;
 8001fb2:	4b25      	ldr	r3, [pc, #148]	@ (8002048 <SystemInit+0xd8>)
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	4924      	ldr	r1, [pc, #144]	@ (8002048 <SystemInit+0xd8>)
 8001fb8:	4b24      	ldr	r3, [pc, #144]	@ (800204c <SystemInit+0xdc>)
 8001fba:	4013      	ands	r3, r2
 8001fbc:	600b      	str	r3, [r1, #0]

	/* Decreasing the number of wait states because of lower CPU frequency */
	if (FLASH_LATENCY_DEFAULT < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001fbe:	4b21      	ldr	r3, [pc, #132]	@ (8002044 <SystemInit+0xd4>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f003 0308 	and.w	r3, r3, #8
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d007      	beq.n	8001fda <SystemInit+0x6a>
	{
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 8001fca:	4b1e      	ldr	r3, [pc, #120]	@ (8002044 <SystemInit+0xd4>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f023 030f 	bic.w	r3, r3, #15
 8001fd2:	4a1c      	ldr	r2, [pc, #112]	@ (8002044 <SystemInit+0xd4>)
 8001fd4:	f043 0307 	orr.w	r3, r3, #7
 8001fd8:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

#if defined(D3_SRAM_BASE)
	/* Reset D1CFGR register */
	RCC->D1CFGR = 0x00000000;
 8001fda:	4b1b      	ldr	r3, [pc, #108]	@ (8002048 <SystemInit+0xd8>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	619a      	str	r2, [r3, #24]

	/* Reset D2CFGR register */
	RCC->D2CFGR = 0x00000000;
 8001fe0:	4b19      	ldr	r3, [pc, #100]	@ (8002048 <SystemInit+0xd8>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	61da      	str	r2, [r3, #28]

	/* Reset D3CFGR register */
	RCC->D3CFGR = 0x00000000;
 8001fe6:	4b18      	ldr	r3, [pc, #96]	@ (8002048 <SystemInit+0xd8>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	621a      	str	r2, [r3, #32]

	/* Reset SRDCFGR register */
	RCC->SRDCFGR = 0x00000000;
#endif
	/* Reset PLLCKSELR register */
	RCC->PLLCKSELR = 0x02020200;
 8001fec:	4b16      	ldr	r3, [pc, #88]	@ (8002048 <SystemInit+0xd8>)
 8001fee:	4a18      	ldr	r2, [pc, #96]	@ (8002050 <SystemInit+0xe0>)
 8001ff0:	629a      	str	r2, [r3, #40]	@ 0x28

	/* Reset PLLCFGR register */
	RCC->PLLCFGR = 0x01FF0000;
 8001ff2:	4b15      	ldr	r3, [pc, #84]	@ (8002048 <SystemInit+0xd8>)
 8001ff4:	4a17      	ldr	r2, [pc, #92]	@ (8002054 <SystemInit+0xe4>)
 8001ff6:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Reset PLL1DIVR register */
	RCC->PLL1DIVR = 0x01010280;
 8001ff8:	4b13      	ldr	r3, [pc, #76]	@ (8002048 <SystemInit+0xd8>)
 8001ffa:	4a17      	ldr	r2, [pc, #92]	@ (8002058 <SystemInit+0xe8>)
 8001ffc:	631a      	str	r2, [r3, #48]	@ 0x30
	/* Reset PLL1FRACR register */
	RCC->PLL1FRACR = 0x00000000;
 8001ffe:	4b12      	ldr	r3, [pc, #72]	@ (8002048 <SystemInit+0xd8>)
 8002000:	2200      	movs	r2, #0
 8002002:	635a      	str	r2, [r3, #52]	@ 0x34

	/* Reset PLL2DIVR register */
	RCC->PLL2DIVR = 0x01010280;
 8002004:	4b10      	ldr	r3, [pc, #64]	@ (8002048 <SystemInit+0xd8>)
 8002006:	4a14      	ldr	r2, [pc, #80]	@ (8002058 <SystemInit+0xe8>)
 8002008:	639a      	str	r2, [r3, #56]	@ 0x38

	/* Reset PLL2FRACR register */

	RCC->PLL2FRACR = 0x00000000;
 800200a:	4b0f      	ldr	r3, [pc, #60]	@ (8002048 <SystemInit+0xd8>)
 800200c:	2200      	movs	r2, #0
 800200e:	63da      	str	r2, [r3, #60]	@ 0x3c
	/* Reset PLL3DIVR register */
	RCC->PLL3DIVR = 0x01010280;
 8002010:	4b0d      	ldr	r3, [pc, #52]	@ (8002048 <SystemInit+0xd8>)
 8002012:	4a11      	ldr	r2, [pc, #68]	@ (8002058 <SystemInit+0xe8>)
 8002014:	641a      	str	r2, [r3, #64]	@ 0x40

	/* Reset PLL3FRACR register */
	RCC->PLL3FRACR = 0x00000000;
 8002016:	4b0c      	ldr	r3, [pc, #48]	@ (8002048 <SystemInit+0xd8>)
 8002018:	2200      	movs	r2, #0
 800201a:	645a      	str	r2, [r3, #68]	@ 0x44

	/* Reset HSEBYP bit */
	RCC->CR &= 0xFFFBFFFFU;
 800201c:	4b0a      	ldr	r3, [pc, #40]	@ (8002048 <SystemInit+0xd8>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a09      	ldr	r2, [pc, #36]	@ (8002048 <SystemInit+0xd8>)
 8002022:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002026:	6013      	str	r3, [r2, #0]

	/* Disable all interrupts */
	RCC->CIER = 0x00000000;
 8002028:	4b07      	ldr	r3, [pc, #28]	@ (8002048 <SystemInit+0xd8>)
 800202a:	2200      	movs	r2, #0
 800202c:	661a      	str	r2, [r3, #96]	@ 0x60
	/*
	 * Disable the FMC bank1 (enabled after reset).
	 * This, prevents CPU speculation access on this bank which blocks the use of FMC during
	 * 24us. During this time the others FMC master (such as LTDC) cannot use it!
	 */
	FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800202e:	4b0b      	ldr	r3, [pc, #44]	@ (800205c <SystemInit+0xec>)
 8002030:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8002034:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002036:	bf00      	nop
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr
 8002040:	e000ed00 	.word	0xe000ed00
 8002044:	52002000 	.word	0x52002000
 8002048:	58024400 	.word	0x58024400
 800204c:	eaf6ed7f 	.word	0xeaf6ed7f
 8002050:	02020200 	.word	0x02020200
 8002054:	01ff0000 	.word	0x01ff0000
 8002058:	01010280 	.word	0x01010280
 800205c:	52004000 	.word	0x52004000

08002060 <MX_TIM2_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim12;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b088      	sub	sp, #32
 8002064:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002066:	f107 0310 	add.w	r3, r7, #16
 800206a:	2200      	movs	r2, #0
 800206c:	601a      	str	r2, [r3, #0]
 800206e:	605a      	str	r2, [r3, #4]
 8002070:	609a      	str	r2, [r3, #8]
 8002072:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002074:	1d3b      	adds	r3, r7, #4
 8002076:	2200      	movs	r2, #0
 8002078:	601a      	str	r2, [r3, #0]
 800207a:	605a      	str	r2, [r3, #4]
 800207c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800207e:	4b1e      	ldr	r3, [pc, #120]	@ (80020f8 <MX_TIM2_Init+0x98>)
 8002080:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002084:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 550-1;
 8002086:	4b1c      	ldr	r3, [pc, #112]	@ (80020f8 <MX_TIM2_Init+0x98>)
 8002088:	f240 2225 	movw	r2, #549	@ 0x225
 800208c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800208e:	4b1a      	ldr	r3, [pc, #104]	@ (80020f8 <MX_TIM2_Init+0x98>)
 8002090:	2200      	movs	r2, #0
 8002092:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000-1;
 8002094:	4b18      	ldr	r3, [pc, #96]	@ (80020f8 <MX_TIM2_Init+0x98>)
 8002096:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 800209a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800209c:	4b16      	ldr	r3, [pc, #88]	@ (80020f8 <MX_TIM2_Init+0x98>)
 800209e:	2200      	movs	r2, #0
 80020a0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80020a2:	4b15      	ldr	r3, [pc, #84]	@ (80020f8 <MX_TIM2_Init+0x98>)
 80020a4:	2280      	movs	r2, #128	@ 0x80
 80020a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80020a8:	4813      	ldr	r0, [pc, #76]	@ (80020f8 <MX_TIM2_Init+0x98>)
 80020aa:	f006 f8db 	bl	8008264 <HAL_TIM_Base_Init>
 80020ae:	4603      	mov	r3, r0
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d001      	beq.n	80020b8 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80020b4:	f7ff fdce 	bl	8001c54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80020bc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80020be:	f107 0310 	add.w	r3, r7, #16
 80020c2:	4619      	mov	r1, r3
 80020c4:	480c      	ldr	r0, [pc, #48]	@ (80020f8 <MX_TIM2_Init+0x98>)
 80020c6:	f006 fae1 	bl	800868c <HAL_TIM_ConfigClockSource>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d001      	beq.n	80020d4 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80020d0:	f7ff fdc0 	bl	8001c54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020d4:	2300      	movs	r3, #0
 80020d6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020d8:	2300      	movs	r3, #0
 80020da:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80020dc:	1d3b      	adds	r3, r7, #4
 80020de:	4619      	mov	r1, r3
 80020e0:	4805      	ldr	r0, [pc, #20]	@ (80020f8 <MX_TIM2_Init+0x98>)
 80020e2:	f006 fd43 	bl	8008b6c <HAL_TIMEx_MasterConfigSynchronization>
 80020e6:	4603      	mov	r3, r0
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d001      	beq.n	80020f0 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 80020ec:	f7ff fdb2 	bl	8001c54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80020f0:	bf00      	nop
 80020f2:	3720      	adds	r7, #32
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	24000488 	.word	0x24000488

080020fc <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b088      	sub	sp, #32
 8002100:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002102:	f107 0310 	add.w	r3, r7, #16
 8002106:	2200      	movs	r2, #0
 8002108:	601a      	str	r2, [r3, #0]
 800210a:	605a      	str	r2, [r3, #4]
 800210c:	609a      	str	r2, [r3, #8]
 800210e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002110:	1d3b      	adds	r3, r7, #4
 8002112:	2200      	movs	r2, #0
 8002114:	601a      	str	r2, [r3, #0]
 8002116:	605a      	str	r2, [r3, #4]
 8002118:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800211a:	4b1e      	ldr	r3, [pc, #120]	@ (8002194 <MX_TIM3_Init+0x98>)
 800211c:	4a1e      	ldr	r2, [pc, #120]	@ (8002198 <MX_TIM3_Init+0x9c>)
 800211e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 550-1;
 8002120:	4b1c      	ldr	r3, [pc, #112]	@ (8002194 <MX_TIM3_Init+0x98>)
 8002122:	f240 2225 	movw	r2, #549	@ 0x225
 8002126:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002128:	4b1a      	ldr	r3, [pc, #104]	@ (8002194 <MX_TIM3_Init+0x98>)
 800212a:	2200      	movs	r2, #0
 800212c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000-1;
 800212e:	4b19      	ldr	r3, [pc, #100]	@ (8002194 <MX_TIM3_Init+0x98>)
 8002130:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8002134:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002136:	4b17      	ldr	r3, [pc, #92]	@ (8002194 <MX_TIM3_Init+0x98>)
 8002138:	2200      	movs	r2, #0
 800213a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800213c:	4b15      	ldr	r3, [pc, #84]	@ (8002194 <MX_TIM3_Init+0x98>)
 800213e:	2200      	movs	r2, #0
 8002140:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002142:	4814      	ldr	r0, [pc, #80]	@ (8002194 <MX_TIM3_Init+0x98>)
 8002144:	f006 f88e 	bl	8008264 <HAL_TIM_Base_Init>
 8002148:	4603      	mov	r3, r0
 800214a:	2b00      	cmp	r3, #0
 800214c:	d001      	beq.n	8002152 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 800214e:	f7ff fd81 	bl	8001c54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002152:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002156:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002158:	f107 0310 	add.w	r3, r7, #16
 800215c:	4619      	mov	r1, r3
 800215e:	480d      	ldr	r0, [pc, #52]	@ (8002194 <MX_TIM3_Init+0x98>)
 8002160:	f006 fa94 	bl	800868c <HAL_TIM_ConfigClockSource>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d001      	beq.n	800216e <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 800216a:	f7ff fd73 	bl	8001c54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800216e:	2300      	movs	r3, #0
 8002170:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002172:	2300      	movs	r3, #0
 8002174:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002176:	1d3b      	adds	r3, r7, #4
 8002178:	4619      	mov	r1, r3
 800217a:	4806      	ldr	r0, [pc, #24]	@ (8002194 <MX_TIM3_Init+0x98>)
 800217c:	f006 fcf6 	bl	8008b6c <HAL_TIMEx_MasterConfigSynchronization>
 8002180:	4603      	mov	r3, r0
 8002182:	2b00      	cmp	r3, #0
 8002184:	d001      	beq.n	800218a <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8002186:	f7ff fd65 	bl	8001c54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800218a:	bf00      	nop
 800218c:	3720      	adds	r7, #32
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	240004d4 	.word	0x240004d4
 8002198:	40000400 	.word	0x40000400

0800219c <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b088      	sub	sp, #32
 80021a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021a2:	f107 0310 	add.w	r3, r7, #16
 80021a6:	2200      	movs	r2, #0
 80021a8:	601a      	str	r2, [r3, #0]
 80021aa:	605a      	str	r2, [r3, #4]
 80021ac:	609a      	str	r2, [r3, #8]
 80021ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021b0:	1d3b      	adds	r3, r7, #4
 80021b2:	2200      	movs	r2, #0
 80021b4:	601a      	str	r2, [r3, #0]
 80021b6:	605a      	str	r2, [r3, #4]
 80021b8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80021ba:	4b1e      	ldr	r3, [pc, #120]	@ (8002234 <MX_TIM5_Init+0x98>)
 80021bc:	4a1e      	ldr	r2, [pc, #120]	@ (8002238 <MX_TIM5_Init+0x9c>)
 80021be:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 550-1;
 80021c0:	4b1c      	ldr	r3, [pc, #112]	@ (8002234 <MX_TIM5_Init+0x98>)
 80021c2:	f240 2225 	movw	r2, #549	@ 0x225
 80021c6:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021c8:	4b1a      	ldr	r3, [pc, #104]	@ (8002234 <MX_TIM5_Init+0x98>)
 80021ca:	2200      	movs	r2, #0
 80021cc:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 10000-1;
 80021ce:	4b19      	ldr	r3, [pc, #100]	@ (8002234 <MX_TIM5_Init+0x98>)
 80021d0:	f242 720f 	movw	r2, #9999	@ 0x270f
 80021d4:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021d6:	4b17      	ldr	r3, [pc, #92]	@ (8002234 <MX_TIM5_Init+0x98>)
 80021d8:	2200      	movs	r2, #0
 80021da:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021dc:	4b15      	ldr	r3, [pc, #84]	@ (8002234 <MX_TIM5_Init+0x98>)
 80021de:	2200      	movs	r2, #0
 80021e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80021e2:	4814      	ldr	r0, [pc, #80]	@ (8002234 <MX_TIM5_Init+0x98>)
 80021e4:	f006 f83e 	bl	8008264 <HAL_TIM_Base_Init>
 80021e8:	4603      	mov	r3, r0
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d001      	beq.n	80021f2 <MX_TIM5_Init+0x56>
  {
    Error_Handler();
 80021ee:	f7ff fd31 	bl	8001c54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021f2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80021f6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80021f8:	f107 0310 	add.w	r3, r7, #16
 80021fc:	4619      	mov	r1, r3
 80021fe:	480d      	ldr	r0, [pc, #52]	@ (8002234 <MX_TIM5_Init+0x98>)
 8002200:	f006 fa44 	bl	800868c <HAL_TIM_ConfigClockSource>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	d001      	beq.n	800220e <MX_TIM5_Init+0x72>
  {
    Error_Handler();
 800220a:	f7ff fd23 	bl	8001c54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800220e:	2300      	movs	r3, #0
 8002210:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002212:	2300      	movs	r3, #0
 8002214:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002216:	1d3b      	adds	r3, r7, #4
 8002218:	4619      	mov	r1, r3
 800221a:	4806      	ldr	r0, [pc, #24]	@ (8002234 <MX_TIM5_Init+0x98>)
 800221c:	f006 fca6 	bl	8008b6c <HAL_TIMEx_MasterConfigSynchronization>
 8002220:	4603      	mov	r3, r0
 8002222:	2b00      	cmp	r3, #0
 8002224:	d001      	beq.n	800222a <MX_TIM5_Init+0x8e>
  {
    Error_Handler();
 8002226:	f7ff fd15 	bl	8001c54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800222a:	bf00      	nop
 800222c:	3720      	adds	r7, #32
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	24000520 	.word	0x24000520
 8002238:	40000c00 	.word	0x40000c00

0800223c <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b088      	sub	sp, #32
 8002240:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002242:	f107 0310 	add.w	r3, r7, #16
 8002246:	2200      	movs	r2, #0
 8002248:	601a      	str	r2, [r3, #0]
 800224a:	605a      	str	r2, [r3, #4]
 800224c:	609a      	str	r2, [r3, #8]
 800224e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002250:	1d3b      	adds	r3, r7, #4
 8002252:	2200      	movs	r2, #0
 8002254:	601a      	str	r2, [r3, #0]
 8002256:	605a      	str	r2, [r3, #4]
 8002258:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 800225a:	4b1d      	ldr	r3, [pc, #116]	@ (80022d0 <MX_TIM12_Init+0x94>)
 800225c:	4a1d      	ldr	r2, [pc, #116]	@ (80022d4 <MX_TIM12_Init+0x98>)
 800225e:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 65535;
 8002260:	4b1b      	ldr	r3, [pc, #108]	@ (80022d0 <MX_TIM12_Init+0x94>)
 8002262:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002266:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002268:	4b19      	ldr	r3, [pc, #100]	@ (80022d0 <MX_TIM12_Init+0x94>)
 800226a:	2200      	movs	r2, #0
 800226c:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 19;
 800226e:	4b18      	ldr	r3, [pc, #96]	@ (80022d0 <MX_TIM12_Init+0x94>)
 8002270:	2213      	movs	r2, #19
 8002272:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002274:	4b16      	ldr	r3, [pc, #88]	@ (80022d0 <MX_TIM12_Init+0x94>)
 8002276:	2200      	movs	r2, #0
 8002278:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800227a:	4b15      	ldr	r3, [pc, #84]	@ (80022d0 <MX_TIM12_Init+0x94>)
 800227c:	2200      	movs	r2, #0
 800227e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8002280:	4813      	ldr	r0, [pc, #76]	@ (80022d0 <MX_TIM12_Init+0x94>)
 8002282:	f005 ffef 	bl	8008264 <HAL_TIM_Base_Init>
 8002286:	4603      	mov	r3, r0
 8002288:	2b00      	cmp	r3, #0
 800228a:	d001      	beq.n	8002290 <MX_TIM12_Init+0x54>
  {
    Error_Handler();
 800228c:	f7ff fce2 	bl	8001c54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002290:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002294:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8002296:	f107 0310 	add.w	r3, r7, #16
 800229a:	4619      	mov	r1, r3
 800229c:	480c      	ldr	r0, [pc, #48]	@ (80022d0 <MX_TIM12_Init+0x94>)
 800229e:	f006 f9f5 	bl	800868c <HAL_TIM_ConfigClockSource>
 80022a2:	4603      	mov	r3, r0
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d001      	beq.n	80022ac <MX_TIM12_Init+0x70>
  {
    Error_Handler();
 80022a8:	f7ff fcd4 	bl	8001c54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022ac:	2300      	movs	r3, #0
 80022ae:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022b0:	2300      	movs	r3, #0
 80022b2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim12, &sMasterConfig) != HAL_OK)
 80022b4:	1d3b      	adds	r3, r7, #4
 80022b6:	4619      	mov	r1, r3
 80022b8:	4805      	ldr	r0, [pc, #20]	@ (80022d0 <MX_TIM12_Init+0x94>)
 80022ba:	f006 fc57 	bl	8008b6c <HAL_TIMEx_MasterConfigSynchronization>
 80022be:	4603      	mov	r3, r0
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d001      	beq.n	80022c8 <MX_TIM12_Init+0x8c>
  {
    Error_Handler();
 80022c4:	f7ff fcc6 	bl	8001c54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 80022c8:	bf00      	nop
 80022ca:	3720      	adds	r7, #32
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	2400056c 	.word	0x2400056c
 80022d4:	40001800 	.word	0x40001800

080022d8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b086      	sub	sp, #24
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80022e8:	d117      	bne.n	800231a <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80022ea:	4b39      	ldr	r3, [pc, #228]	@ (80023d0 <HAL_TIM_Base_MspInit+0xf8>)
 80022ec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80022f0:	4a37      	ldr	r2, [pc, #220]	@ (80023d0 <HAL_TIM_Base_MspInit+0xf8>)
 80022f2:	f043 0301 	orr.w	r3, r3, #1
 80022f6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80022fa:	4b35      	ldr	r3, [pc, #212]	@ (80023d0 <HAL_TIM_Base_MspInit+0xf8>)
 80022fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002300:	f003 0301 	and.w	r3, r3, #1
 8002304:	617b      	str	r3, [r7, #20]
 8002306:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 11, 0);
 8002308:	2200      	movs	r2, #0
 800230a:	210b      	movs	r1, #11
 800230c:	201c      	movs	r0, #28
 800230e:	f001 f8a4 	bl	800345a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002312:	201c      	movs	r0, #28
 8002314:	f001 f8bb 	bl	800348e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 8002318:	e055      	b.n	80023c6 <HAL_TIM_Base_MspInit+0xee>
  else if(tim_baseHandle->Instance==TIM3)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a2d      	ldr	r2, [pc, #180]	@ (80023d4 <HAL_TIM_Base_MspInit+0xfc>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d117      	bne.n	8002354 <HAL_TIM_Base_MspInit+0x7c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002324:	4b2a      	ldr	r3, [pc, #168]	@ (80023d0 <HAL_TIM_Base_MspInit+0xf8>)
 8002326:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800232a:	4a29      	ldr	r2, [pc, #164]	@ (80023d0 <HAL_TIM_Base_MspInit+0xf8>)
 800232c:	f043 0302 	orr.w	r3, r3, #2
 8002330:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002334:	4b26      	ldr	r3, [pc, #152]	@ (80023d0 <HAL_TIM_Base_MspInit+0xf8>)
 8002336:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800233a:	f003 0302 	and.w	r3, r3, #2
 800233e:	613b      	str	r3, [r7, #16]
 8002340:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 2, 0);
 8002342:	2200      	movs	r2, #0
 8002344:	2102      	movs	r1, #2
 8002346:	201d      	movs	r0, #29
 8002348:	f001 f887 	bl	800345a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800234c:	201d      	movs	r0, #29
 800234e:	f001 f89e 	bl	800348e <HAL_NVIC_EnableIRQ>
}
 8002352:	e038      	b.n	80023c6 <HAL_TIM_Base_MspInit+0xee>
  else if(tim_baseHandle->Instance==TIM5)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a1f      	ldr	r2, [pc, #124]	@ (80023d8 <HAL_TIM_Base_MspInit+0x100>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d117      	bne.n	800238e <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800235e:	4b1c      	ldr	r3, [pc, #112]	@ (80023d0 <HAL_TIM_Base_MspInit+0xf8>)
 8002360:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002364:	4a1a      	ldr	r2, [pc, #104]	@ (80023d0 <HAL_TIM_Base_MspInit+0xf8>)
 8002366:	f043 0308 	orr.w	r3, r3, #8
 800236a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800236e:	4b18      	ldr	r3, [pc, #96]	@ (80023d0 <HAL_TIM_Base_MspInit+0xf8>)
 8002370:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002374:	f003 0308 	and.w	r3, r3, #8
 8002378:	60fb      	str	r3, [r7, #12]
 800237a:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 13, 0);
 800237c:	2200      	movs	r2, #0
 800237e:	210d      	movs	r1, #13
 8002380:	2032      	movs	r0, #50	@ 0x32
 8002382:	f001 f86a 	bl	800345a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002386:	2032      	movs	r0, #50	@ 0x32
 8002388:	f001 f881 	bl	800348e <HAL_NVIC_EnableIRQ>
}
 800238c:	e01b      	b.n	80023c6 <HAL_TIM_Base_MspInit+0xee>
  else if(tim_baseHandle->Instance==TIM12)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a12      	ldr	r2, [pc, #72]	@ (80023dc <HAL_TIM_Base_MspInit+0x104>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d116      	bne.n	80023c6 <HAL_TIM_Base_MspInit+0xee>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8002398:	4b0d      	ldr	r3, [pc, #52]	@ (80023d0 <HAL_TIM_Base_MspInit+0xf8>)
 800239a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800239e:	4a0c      	ldr	r2, [pc, #48]	@ (80023d0 <HAL_TIM_Base_MspInit+0xf8>)
 80023a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80023a4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80023a8:	4b09      	ldr	r3, [pc, #36]	@ (80023d0 <HAL_TIM_Base_MspInit+0xf8>)
 80023aa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80023ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023b2:	60bb      	str	r3, [r7, #8]
 80023b4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 7, 0);
 80023b6:	2200      	movs	r2, #0
 80023b8:	2107      	movs	r1, #7
 80023ba:	202b      	movs	r0, #43	@ 0x2b
 80023bc:	f001 f84d 	bl	800345a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 80023c0:	202b      	movs	r0, #43	@ 0x2b
 80023c2:	f001 f864 	bl	800348e <HAL_NVIC_EnableIRQ>
}
 80023c6:	bf00      	nop
 80023c8:	3718      	adds	r7, #24
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	58024400 	.word	0x58024400
 80023d4:	40000400 	.word	0x40000400
 80023d8:	40000c00 	.word	0x40000c00
 80023dc:	40001800 	.word	0x40001800

080023e0 <MX_UART4_Init>:
UART_HandleTypeDef huart6;
UART_HandleTypeDef huart10;

/* UART4 init function */
void MX_UART4_Init(void)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80023e4:	4b22      	ldr	r3, [pc, #136]	@ (8002470 <MX_UART4_Init+0x90>)
 80023e6:	4a23      	ldr	r2, [pc, #140]	@ (8002474 <MX_UART4_Init+0x94>)
 80023e8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80023ea:	4b21      	ldr	r3, [pc, #132]	@ (8002470 <MX_UART4_Init+0x90>)
 80023ec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80023f0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80023f2:	4b1f      	ldr	r3, [pc, #124]	@ (8002470 <MX_UART4_Init+0x90>)
 80023f4:	2200      	movs	r2, #0
 80023f6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80023f8:	4b1d      	ldr	r3, [pc, #116]	@ (8002470 <MX_UART4_Init+0x90>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80023fe:	4b1c      	ldr	r3, [pc, #112]	@ (8002470 <MX_UART4_Init+0x90>)
 8002400:	2200      	movs	r2, #0
 8002402:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002404:	4b1a      	ldr	r3, [pc, #104]	@ (8002470 <MX_UART4_Init+0x90>)
 8002406:	220c      	movs	r2, #12
 8002408:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800240a:	4b19      	ldr	r3, [pc, #100]	@ (8002470 <MX_UART4_Init+0x90>)
 800240c:	2200      	movs	r2, #0
 800240e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002410:	4b17      	ldr	r3, [pc, #92]	@ (8002470 <MX_UART4_Init+0x90>)
 8002412:	2200      	movs	r2, #0
 8002414:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002416:	4b16      	ldr	r3, [pc, #88]	@ (8002470 <MX_UART4_Init+0x90>)
 8002418:	2200      	movs	r2, #0
 800241a:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800241c:	4b14      	ldr	r3, [pc, #80]	@ (8002470 <MX_UART4_Init+0x90>)
 800241e:	2200      	movs	r2, #0
 8002420:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002422:	4b13      	ldr	r3, [pc, #76]	@ (8002470 <MX_UART4_Init+0x90>)
 8002424:	2200      	movs	r2, #0
 8002426:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002428:	4811      	ldr	r0, [pc, #68]	@ (8002470 <MX_UART4_Init+0x90>)
 800242a:	f006 fc59 	bl	8008ce0 <HAL_UART_Init>
 800242e:	4603      	mov	r3, r0
 8002430:	2b00      	cmp	r3, #0
 8002432:	d001      	beq.n	8002438 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8002434:	f7ff fc0e 	bl	8001c54 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002438:	2100      	movs	r1, #0
 800243a:	480d      	ldr	r0, [pc, #52]	@ (8002470 <MX_UART4_Init+0x90>)
 800243c:	f009 f97f 	bl	800b73e <HAL_UARTEx_SetTxFifoThreshold>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d001      	beq.n	800244a <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8002446:	f7ff fc05 	bl	8001c54 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800244a:	2100      	movs	r1, #0
 800244c:	4808      	ldr	r0, [pc, #32]	@ (8002470 <MX_UART4_Init+0x90>)
 800244e:	f009 f9b4 	bl	800b7ba <HAL_UARTEx_SetRxFifoThreshold>
 8002452:	4603      	mov	r3, r0
 8002454:	2b00      	cmp	r3, #0
 8002456:	d001      	beq.n	800245c <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8002458:	f7ff fbfc 	bl	8001c54 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 800245c:	4804      	ldr	r0, [pc, #16]	@ (8002470 <MX_UART4_Init+0x90>)
 800245e:	f009 f935 	bl	800b6cc <HAL_UARTEx_DisableFifoMode>
 8002462:	4603      	mov	r3, r0
 8002464:	2b00      	cmp	r3, #0
 8002466:	d001      	beq.n	800246c <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8002468:	f7ff fbf4 	bl	8001c54 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800246c:	bf00      	nop
 800246e:	bd80      	pop	{r7, pc}
 8002470:	240005b8 	.word	0x240005b8
 8002474:	40004c00 	.word	0x40004c00

08002478 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 800247c:	4b22      	ldr	r3, [pc, #136]	@ (8002508 <MX_UART5_Init+0x90>)
 800247e:	4a23      	ldr	r2, [pc, #140]	@ (800250c <MX_UART5_Init+0x94>)
 8002480:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 8002482:	4b21      	ldr	r3, [pc, #132]	@ (8002508 <MX_UART5_Init+0x90>)
 8002484:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002488:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800248a:	4b1f      	ldr	r3, [pc, #124]	@ (8002508 <MX_UART5_Init+0x90>)
 800248c:	2200      	movs	r2, #0
 800248e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002490:	4b1d      	ldr	r3, [pc, #116]	@ (8002508 <MX_UART5_Init+0x90>)
 8002492:	2200      	movs	r2, #0
 8002494:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8002496:	4b1c      	ldr	r3, [pc, #112]	@ (8002508 <MX_UART5_Init+0x90>)
 8002498:	2200      	movs	r2, #0
 800249a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800249c:	4b1a      	ldr	r3, [pc, #104]	@ (8002508 <MX_UART5_Init+0x90>)
 800249e:	220c      	movs	r2, #12
 80024a0:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024a2:	4b19      	ldr	r3, [pc, #100]	@ (8002508 <MX_UART5_Init+0x90>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80024a8:	4b17      	ldr	r3, [pc, #92]	@ (8002508 <MX_UART5_Init+0x90>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80024ae:	4b16      	ldr	r3, [pc, #88]	@ (8002508 <MX_UART5_Init+0x90>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80024b4:	4b14      	ldr	r3, [pc, #80]	@ (8002508 <MX_UART5_Init+0x90>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80024ba:	4b13      	ldr	r3, [pc, #76]	@ (8002508 <MX_UART5_Init+0x90>)
 80024bc:	2200      	movs	r2, #0
 80024be:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80024c0:	4811      	ldr	r0, [pc, #68]	@ (8002508 <MX_UART5_Init+0x90>)
 80024c2:	f006 fc0d 	bl	8008ce0 <HAL_UART_Init>
 80024c6:	4603      	mov	r3, r0
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d001      	beq.n	80024d0 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 80024cc:	f7ff fbc2 	bl	8001c54 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80024d0:	2100      	movs	r1, #0
 80024d2:	480d      	ldr	r0, [pc, #52]	@ (8002508 <MX_UART5_Init+0x90>)
 80024d4:	f009 f933 	bl	800b73e <HAL_UARTEx_SetTxFifoThreshold>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d001      	beq.n	80024e2 <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 80024de:	f7ff fbb9 	bl	8001c54 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80024e2:	2100      	movs	r1, #0
 80024e4:	4808      	ldr	r0, [pc, #32]	@ (8002508 <MX_UART5_Init+0x90>)
 80024e6:	f009 f968 	bl	800b7ba <HAL_UARTEx_SetRxFifoThreshold>
 80024ea:	4603      	mov	r3, r0
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d001      	beq.n	80024f4 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 80024f0:	f7ff fbb0 	bl	8001c54 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 80024f4:	4804      	ldr	r0, [pc, #16]	@ (8002508 <MX_UART5_Init+0x90>)
 80024f6:	f009 f8e9 	bl	800b6cc <HAL_UARTEx_DisableFifoMode>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d001      	beq.n	8002504 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 8002500:	f7ff fba8 	bl	8001c54 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8002504:	bf00      	nop
 8002506:	bd80      	pop	{r7, pc}
 8002508:	2400064c 	.word	0x2400064c
 800250c:	40005000 	.word	0x40005000

08002510 <MX_UART7_Init>:
/* UART7 init function */
void MX_UART7_Init(void)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8002514:	4b22      	ldr	r3, [pc, #136]	@ (80025a0 <MX_UART7_Init+0x90>)
 8002516:	4a23      	ldr	r2, [pc, #140]	@ (80025a4 <MX_UART7_Init+0x94>)
 8002518:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 800251a:	4b21      	ldr	r3, [pc, #132]	@ (80025a0 <MX_UART7_Init+0x90>)
 800251c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002520:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8002522:	4b1f      	ldr	r3, [pc, #124]	@ (80025a0 <MX_UART7_Init+0x90>)
 8002524:	2200      	movs	r2, #0
 8002526:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8002528:	4b1d      	ldr	r3, [pc, #116]	@ (80025a0 <MX_UART7_Init+0x90>)
 800252a:	2200      	movs	r2, #0
 800252c:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 800252e:	4b1c      	ldr	r3, [pc, #112]	@ (80025a0 <MX_UART7_Init+0x90>)
 8002530:	2200      	movs	r2, #0
 8002532:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8002534:	4b1a      	ldr	r3, [pc, #104]	@ (80025a0 <MX_UART7_Init+0x90>)
 8002536:	220c      	movs	r2, #12
 8002538:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800253a:	4b19      	ldr	r3, [pc, #100]	@ (80025a0 <MX_UART7_Init+0x90>)
 800253c:	2200      	movs	r2, #0
 800253e:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8002540:	4b17      	ldr	r3, [pc, #92]	@ (80025a0 <MX_UART7_Init+0x90>)
 8002542:	2200      	movs	r2, #0
 8002544:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002546:	4b16      	ldr	r3, [pc, #88]	@ (80025a0 <MX_UART7_Init+0x90>)
 8002548:	2200      	movs	r2, #0
 800254a:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800254c:	4b14      	ldr	r3, [pc, #80]	@ (80025a0 <MX_UART7_Init+0x90>)
 800254e:	2200      	movs	r2, #0
 8002550:	625a      	str	r2, [r3, #36]	@ 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002552:	4b13      	ldr	r3, [pc, #76]	@ (80025a0 <MX_UART7_Init+0x90>)
 8002554:	2200      	movs	r2, #0
 8002556:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8002558:	4811      	ldr	r0, [pc, #68]	@ (80025a0 <MX_UART7_Init+0x90>)
 800255a:	f006 fbc1 	bl	8008ce0 <HAL_UART_Init>
 800255e:	4603      	mov	r3, r0
 8002560:	2b00      	cmp	r3, #0
 8002562:	d001      	beq.n	8002568 <MX_UART7_Init+0x58>
  {
    Error_Handler();
 8002564:	f7ff fb76 	bl	8001c54 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002568:	2100      	movs	r1, #0
 800256a:	480d      	ldr	r0, [pc, #52]	@ (80025a0 <MX_UART7_Init+0x90>)
 800256c:	f009 f8e7 	bl	800b73e <HAL_UARTEx_SetTxFifoThreshold>
 8002570:	4603      	mov	r3, r0
 8002572:	2b00      	cmp	r3, #0
 8002574:	d001      	beq.n	800257a <MX_UART7_Init+0x6a>
  {
    Error_Handler();
 8002576:	f7ff fb6d 	bl	8001c54 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800257a:	2100      	movs	r1, #0
 800257c:	4808      	ldr	r0, [pc, #32]	@ (80025a0 <MX_UART7_Init+0x90>)
 800257e:	f009 f91c 	bl	800b7ba <HAL_UARTEx_SetRxFifoThreshold>
 8002582:	4603      	mov	r3, r0
 8002584:	2b00      	cmp	r3, #0
 8002586:	d001      	beq.n	800258c <MX_UART7_Init+0x7c>
  {
    Error_Handler();
 8002588:	f7ff fb64 	bl	8001c54 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 800258c:	4804      	ldr	r0, [pc, #16]	@ (80025a0 <MX_UART7_Init+0x90>)
 800258e:	f009 f89d 	bl	800b6cc <HAL_UARTEx_DisableFifoMode>
 8002592:	4603      	mov	r3, r0
 8002594:	2b00      	cmp	r3, #0
 8002596:	d001      	beq.n	800259c <MX_UART7_Init+0x8c>
  {
    Error_Handler();
 8002598:	f7ff fb5c 	bl	8001c54 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 800259c:	bf00      	nop
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	240006e0 	.word	0x240006e0
 80025a4:	40007800 	.word	0x40007800

080025a8 <MX_UART8_Init>:
/* UART8 init function */
void MX_UART8_Init(void)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 80025ac:	4b22      	ldr	r3, [pc, #136]	@ (8002638 <MX_UART8_Init+0x90>)
 80025ae:	4a23      	ldr	r2, [pc, #140]	@ (800263c <MX_UART8_Init+0x94>)
 80025b0:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 80025b2:	4b21      	ldr	r3, [pc, #132]	@ (8002638 <MX_UART8_Init+0x90>)
 80025b4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80025b8:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 80025ba:	4b1f      	ldr	r3, [pc, #124]	@ (8002638 <MX_UART8_Init+0x90>)
 80025bc:	2200      	movs	r2, #0
 80025be:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 80025c0:	4b1d      	ldr	r3, [pc, #116]	@ (8002638 <MX_UART8_Init+0x90>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 80025c6:	4b1c      	ldr	r3, [pc, #112]	@ (8002638 <MX_UART8_Init+0x90>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 80025cc:	4b1a      	ldr	r3, [pc, #104]	@ (8002638 <MX_UART8_Init+0x90>)
 80025ce:	220c      	movs	r2, #12
 80025d0:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025d2:	4b19      	ldr	r3, [pc, #100]	@ (8002638 <MX_UART8_Init+0x90>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 80025d8:	4b17      	ldr	r3, [pc, #92]	@ (8002638 <MX_UART8_Init+0x90>)
 80025da:	2200      	movs	r2, #0
 80025dc:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80025de:	4b16      	ldr	r3, [pc, #88]	@ (8002638 <MX_UART8_Init+0x90>)
 80025e0:	2200      	movs	r2, #0
 80025e2:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80025e4:	4b14      	ldr	r3, [pc, #80]	@ (8002638 <MX_UART8_Init+0x90>)
 80025e6:	2200      	movs	r2, #0
 80025e8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80025ea:	4b13      	ldr	r3, [pc, #76]	@ (8002638 <MX_UART8_Init+0x90>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 80025f0:	4811      	ldr	r0, [pc, #68]	@ (8002638 <MX_UART8_Init+0x90>)
 80025f2:	f006 fb75 	bl	8008ce0 <HAL_UART_Init>
 80025f6:	4603      	mov	r3, r0
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d001      	beq.n	8002600 <MX_UART8_Init+0x58>
  {
    Error_Handler();
 80025fc:	f7ff fb2a 	bl	8001c54 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002600:	2100      	movs	r1, #0
 8002602:	480d      	ldr	r0, [pc, #52]	@ (8002638 <MX_UART8_Init+0x90>)
 8002604:	f009 f89b 	bl	800b73e <HAL_UARTEx_SetTxFifoThreshold>
 8002608:	4603      	mov	r3, r0
 800260a:	2b00      	cmp	r3, #0
 800260c:	d001      	beq.n	8002612 <MX_UART8_Init+0x6a>
  {
    Error_Handler();
 800260e:	f7ff fb21 	bl	8001c54 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002612:	2100      	movs	r1, #0
 8002614:	4808      	ldr	r0, [pc, #32]	@ (8002638 <MX_UART8_Init+0x90>)
 8002616:	f009 f8d0 	bl	800b7ba <HAL_UARTEx_SetRxFifoThreshold>
 800261a:	4603      	mov	r3, r0
 800261c:	2b00      	cmp	r3, #0
 800261e:	d001      	beq.n	8002624 <MX_UART8_Init+0x7c>
  {
    Error_Handler();
 8002620:	f7ff fb18 	bl	8001c54 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 8002624:	4804      	ldr	r0, [pc, #16]	@ (8002638 <MX_UART8_Init+0x90>)
 8002626:	f009 f851 	bl	800b6cc <HAL_UARTEx_DisableFifoMode>
 800262a:	4603      	mov	r3, r0
 800262c:	2b00      	cmp	r3, #0
 800262e:	d001      	beq.n	8002634 <MX_UART8_Init+0x8c>
  {
    Error_Handler();
 8002630:	f7ff fb10 	bl	8001c54 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8002634:	bf00      	nop
 8002636:	bd80      	pop	{r7, pc}
 8002638:	24000774 	.word	0x24000774
 800263c:	40007c00 	.word	0x40007c00

08002640 <MX_UART9_Init>:
/* UART9 init function */
void MX_UART9_Init(void)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	af00      	add	r7, sp, #0
  /* USER CODE END UART9_Init 0 */

  /* USER CODE BEGIN UART9_Init 1 */

  /* USER CODE END UART9_Init 1 */
  huart9.Instance = UART9;
 8002644:	4b22      	ldr	r3, [pc, #136]	@ (80026d0 <MX_UART9_Init+0x90>)
 8002646:	4a23      	ldr	r2, [pc, #140]	@ (80026d4 <MX_UART9_Init+0x94>)
 8002648:	601a      	str	r2, [r3, #0]
  huart9.Init.BaudRate = 115200;
 800264a:	4b21      	ldr	r3, [pc, #132]	@ (80026d0 <MX_UART9_Init+0x90>)
 800264c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002650:	605a      	str	r2, [r3, #4]
  huart9.Init.WordLength = UART_WORDLENGTH_8B;
 8002652:	4b1f      	ldr	r3, [pc, #124]	@ (80026d0 <MX_UART9_Init+0x90>)
 8002654:	2200      	movs	r2, #0
 8002656:	609a      	str	r2, [r3, #8]
  huart9.Init.StopBits = UART_STOPBITS_1;
 8002658:	4b1d      	ldr	r3, [pc, #116]	@ (80026d0 <MX_UART9_Init+0x90>)
 800265a:	2200      	movs	r2, #0
 800265c:	60da      	str	r2, [r3, #12]
  huart9.Init.Parity = UART_PARITY_NONE;
 800265e:	4b1c      	ldr	r3, [pc, #112]	@ (80026d0 <MX_UART9_Init+0x90>)
 8002660:	2200      	movs	r2, #0
 8002662:	611a      	str	r2, [r3, #16]
  huart9.Init.Mode = UART_MODE_TX_RX;
 8002664:	4b1a      	ldr	r3, [pc, #104]	@ (80026d0 <MX_UART9_Init+0x90>)
 8002666:	220c      	movs	r2, #12
 8002668:	615a      	str	r2, [r3, #20]
  huart9.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800266a:	4b19      	ldr	r3, [pc, #100]	@ (80026d0 <MX_UART9_Init+0x90>)
 800266c:	2200      	movs	r2, #0
 800266e:	619a      	str	r2, [r3, #24]
  huart9.Init.OverSampling = UART_OVERSAMPLING_16;
 8002670:	4b17      	ldr	r3, [pc, #92]	@ (80026d0 <MX_UART9_Init+0x90>)
 8002672:	2200      	movs	r2, #0
 8002674:	61da      	str	r2, [r3, #28]
  huart9.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002676:	4b16      	ldr	r3, [pc, #88]	@ (80026d0 <MX_UART9_Init+0x90>)
 8002678:	2200      	movs	r2, #0
 800267a:	621a      	str	r2, [r3, #32]
  huart9.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800267c:	4b14      	ldr	r3, [pc, #80]	@ (80026d0 <MX_UART9_Init+0x90>)
 800267e:	2200      	movs	r2, #0
 8002680:	625a      	str	r2, [r3, #36]	@ 0x24
  huart9.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002682:	4b13      	ldr	r3, [pc, #76]	@ (80026d0 <MX_UART9_Init+0x90>)
 8002684:	2200      	movs	r2, #0
 8002686:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart9) != HAL_OK)
 8002688:	4811      	ldr	r0, [pc, #68]	@ (80026d0 <MX_UART9_Init+0x90>)
 800268a:	f006 fb29 	bl	8008ce0 <HAL_UART_Init>
 800268e:	4603      	mov	r3, r0
 8002690:	2b00      	cmp	r3, #0
 8002692:	d001      	beq.n	8002698 <MX_UART9_Init+0x58>
  {
    Error_Handler();
 8002694:	f7ff fade 	bl	8001c54 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart9, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002698:	2100      	movs	r1, #0
 800269a:	480d      	ldr	r0, [pc, #52]	@ (80026d0 <MX_UART9_Init+0x90>)
 800269c:	f009 f84f 	bl	800b73e <HAL_UARTEx_SetTxFifoThreshold>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d001      	beq.n	80026aa <MX_UART9_Init+0x6a>
  {
    Error_Handler();
 80026a6:	f7ff fad5 	bl	8001c54 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart9, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80026aa:	2100      	movs	r1, #0
 80026ac:	4808      	ldr	r0, [pc, #32]	@ (80026d0 <MX_UART9_Init+0x90>)
 80026ae:	f009 f884 	bl	800b7ba <HAL_UARTEx_SetRxFifoThreshold>
 80026b2:	4603      	mov	r3, r0
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d001      	beq.n	80026bc <MX_UART9_Init+0x7c>
  {
    Error_Handler();
 80026b8:	f7ff facc 	bl	8001c54 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart9) != HAL_OK)
 80026bc:	4804      	ldr	r0, [pc, #16]	@ (80026d0 <MX_UART9_Init+0x90>)
 80026be:	f009 f805 	bl	800b6cc <HAL_UARTEx_DisableFifoMode>
 80026c2:	4603      	mov	r3, r0
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d001      	beq.n	80026cc <MX_UART9_Init+0x8c>
  {
    Error_Handler();
 80026c8:	f7ff fac4 	bl	8001c54 <Error_Handler>
  }
  /* USER CODE BEGIN UART9_Init 2 */

  /* USER CODE END UART9_Init 2 */

}
 80026cc:	bf00      	nop
 80026ce:	bd80      	pop	{r7, pc}
 80026d0:	24000808 	.word	0x24000808
 80026d4:	40011800 	.word	0x40011800

080026d8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80026dc:	4b39      	ldr	r3, [pc, #228]	@ (80027c4 <MX_USART2_UART_Init+0xec>)
 80026de:	4a3a      	ldr	r2, [pc, #232]	@ (80027c8 <MX_USART2_UART_Init+0xf0>)
 80026e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80026e2:	4b38      	ldr	r3, [pc, #224]	@ (80027c4 <MX_USART2_UART_Init+0xec>)
 80026e4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80026e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80026ea:	4b36      	ldr	r3, [pc, #216]	@ (80027c4 <MX_USART2_UART_Init+0xec>)
 80026ec:	2200      	movs	r2, #0
 80026ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80026f0:	4b34      	ldr	r3, [pc, #208]	@ (80027c4 <MX_USART2_UART_Init+0xec>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80026f6:	4b33      	ldr	r3, [pc, #204]	@ (80027c4 <MX_USART2_UART_Init+0xec>)
 80026f8:	2200      	movs	r2, #0
 80026fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80026fc:	4b31      	ldr	r3, [pc, #196]	@ (80027c4 <MX_USART2_UART_Init+0xec>)
 80026fe:	220c      	movs	r2, #12
 8002700:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002702:	4b30      	ldr	r3, [pc, #192]	@ (80027c4 <MX_USART2_UART_Init+0xec>)
 8002704:	2200      	movs	r2, #0
 8002706:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002708:	4b2e      	ldr	r3, [pc, #184]	@ (80027c4 <MX_USART2_UART_Init+0xec>)
 800270a:	2200      	movs	r2, #0
 800270c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800270e:	4b2d      	ldr	r3, [pc, #180]	@ (80027c4 <MX_USART2_UART_Init+0xec>)
 8002710:	2200      	movs	r2, #0
 8002712:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002714:	4b2b      	ldr	r3, [pc, #172]	@ (80027c4 <MX_USART2_UART_Init+0xec>)
 8002716:	2200      	movs	r2, #0
 8002718:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800271a:	4b2a      	ldr	r3, [pc, #168]	@ (80027c4 <MX_USART2_UART_Init+0xec>)
 800271c:	2200      	movs	r2, #0
 800271e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002720:	4828      	ldr	r0, [pc, #160]	@ (80027c4 <MX_USART2_UART_Init+0xec>)
 8002722:	f006 fadd 	bl	8008ce0 <HAL_UART_Init>
 8002726:	4603      	mov	r3, r0
 8002728:	2b00      	cmp	r3, #0
 800272a:	d001      	beq.n	8002730 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800272c:	f7ff fa92 	bl	8001c54 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002730:	2100      	movs	r1, #0
 8002732:	4824      	ldr	r0, [pc, #144]	@ (80027c4 <MX_USART2_UART_Init+0xec>)
 8002734:	f009 f803 	bl	800b73e <HAL_UARTEx_SetTxFifoThreshold>
 8002738:	4603      	mov	r3, r0
 800273a:	2b00      	cmp	r3, #0
 800273c:	d001      	beq.n	8002742 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800273e:	f7ff fa89 	bl	8001c54 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002742:	2100      	movs	r1, #0
 8002744:	481f      	ldr	r0, [pc, #124]	@ (80027c4 <MX_USART2_UART_Init+0xec>)
 8002746:	f009 f838 	bl	800b7ba <HAL_UARTEx_SetRxFifoThreshold>
 800274a:	4603      	mov	r3, r0
 800274c:	2b00      	cmp	r3, #0
 800274e:	d001      	beq.n	8002754 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002750:	f7ff fa80 	bl	8001c54 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002754:	481b      	ldr	r0, [pc, #108]	@ (80027c4 <MX_USART2_UART_Init+0xec>)
 8002756:	f008 ffb9 	bl	800b6cc <HAL_UARTEx_DisableFifoMode>
 800275a:	4603      	mov	r3, r0
 800275c:	2b00      	cmp	r3, #0
 800275e:	d001      	beq.n	8002764 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002760:	f7ff fa78 	bl	8001c54 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  HAL_UART_Transmit(&huart2,unlock_register, sizeof(unlock_register),1000);
 8002764:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002768:	2205      	movs	r2, #5
 800276a:	4918      	ldr	r1, [pc, #96]	@ (80027cc <MX_USART2_UART_Init+0xf4>)
 800276c:	4815      	ldr	r0, [pc, #84]	@ (80027c4 <MX_USART2_UART_Init+0xec>)
 800276e:	f006 fb07 	bl	8008d80 <HAL_UART_Transmit>
  HAL_Delay(5);
 8002772:	2005      	movs	r0, #5
 8002774:	f000 fd72 	bl	800325c <HAL_Delay>
  HAL_UART_Transmit(&huart2,reset_z_axis, sizeof(reset_z_axis),1000);
 8002778:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800277c:	2205      	movs	r2, #5
 800277e:	4914      	ldr	r1, [pc, #80]	@ (80027d0 <MX_USART2_UART_Init+0xf8>)
 8002780:	4810      	ldr	r0, [pc, #64]	@ (80027c4 <MX_USART2_UART_Init+0xec>)
 8002782:	f006 fafd 	bl	8008d80 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart2,set_output_200Hz, sizeof(set_output_200Hz),1000);
 8002786:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800278a:	2205      	movs	r2, #5
 800278c:	4911      	ldr	r1, [pc, #68]	@ (80027d4 <MX_USART2_UART_Init+0xfc>)
 800278e:	480d      	ldr	r0, [pc, #52]	@ (80027c4 <MX_USART2_UART_Init+0xec>)
 8002790:	f006 faf6 	bl	8008d80 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart2,set_baudrate_115200, sizeof(set_baudrate_115200),1000);
 8002794:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002798:	2205      	movs	r2, #5
 800279a:	490f      	ldr	r1, [pc, #60]	@ (80027d8 <MX_USART2_UART_Init+0x100>)
 800279c:	4809      	ldr	r0, [pc, #36]	@ (80027c4 <MX_USART2_UART_Init+0xec>)
 800279e:	f006 faef 	bl	8008d80 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart2,save_settings, sizeof(save_settings),1000);
 80027a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80027a6:	2205      	movs	r2, #5
 80027a8:	490c      	ldr	r1, [pc, #48]	@ (80027dc <MX_USART2_UART_Init+0x104>)
 80027aa:	4806      	ldr	r0, [pc, #24]	@ (80027c4 <MX_USART2_UART_Init+0xec>)
 80027ac:	f006 fae8 	bl	8008d80 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart2,restart_device, sizeof(restart_device),1000);
 80027b0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80027b4:	2205      	movs	r2, #5
 80027b6:	490a      	ldr	r1, [pc, #40]	@ (80027e0 <MX_USART2_UART_Init+0x108>)
 80027b8:	4802      	ldr	r0, [pc, #8]	@ (80027c4 <MX_USART2_UART_Init+0xec>)
 80027ba:	f006 fae1 	bl	8008d80 <HAL_UART_Transmit>


  /* USER CODE END USART2_Init 2 */

}
 80027be:	bf00      	nop
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	2400089c 	.word	0x2400089c
 80027c8:	40004400 	.word	0x40004400
 80027cc:	24000028 	.word	0x24000028
 80027d0:	24000030 	.word	0x24000030
 80027d4:	24000038 	.word	0x24000038
 80027d8:	24000040 	.word	0x24000040
 80027dc:	24000048 	.word	0x24000048
 80027e0:	24000050 	.word	0x24000050

080027e4 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80027e8:	4b22      	ldr	r3, [pc, #136]	@ (8002874 <MX_USART3_UART_Init+0x90>)
 80027ea:	4a23      	ldr	r2, [pc, #140]	@ (8002878 <MX_USART3_UART_Init+0x94>)
 80027ec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80027ee:	4b21      	ldr	r3, [pc, #132]	@ (8002874 <MX_USART3_UART_Init+0x90>)
 80027f0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80027f4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80027f6:	4b1f      	ldr	r3, [pc, #124]	@ (8002874 <MX_USART3_UART_Init+0x90>)
 80027f8:	2200      	movs	r2, #0
 80027fa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80027fc:	4b1d      	ldr	r3, [pc, #116]	@ (8002874 <MX_USART3_UART_Init+0x90>)
 80027fe:	2200      	movs	r2, #0
 8002800:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002802:	4b1c      	ldr	r3, [pc, #112]	@ (8002874 <MX_USART3_UART_Init+0x90>)
 8002804:	2200      	movs	r2, #0
 8002806:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002808:	4b1a      	ldr	r3, [pc, #104]	@ (8002874 <MX_USART3_UART_Init+0x90>)
 800280a:	220c      	movs	r2, #12
 800280c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800280e:	4b19      	ldr	r3, [pc, #100]	@ (8002874 <MX_USART3_UART_Init+0x90>)
 8002810:	2200      	movs	r2, #0
 8002812:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002814:	4b17      	ldr	r3, [pc, #92]	@ (8002874 <MX_USART3_UART_Init+0x90>)
 8002816:	2200      	movs	r2, #0
 8002818:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800281a:	4b16      	ldr	r3, [pc, #88]	@ (8002874 <MX_USART3_UART_Init+0x90>)
 800281c:	2200      	movs	r2, #0
 800281e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002820:	4b14      	ldr	r3, [pc, #80]	@ (8002874 <MX_USART3_UART_Init+0x90>)
 8002822:	2200      	movs	r2, #0
 8002824:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002826:	4b13      	ldr	r3, [pc, #76]	@ (8002874 <MX_USART3_UART_Init+0x90>)
 8002828:	2200      	movs	r2, #0
 800282a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800282c:	4811      	ldr	r0, [pc, #68]	@ (8002874 <MX_USART3_UART_Init+0x90>)
 800282e:	f006 fa57 	bl	8008ce0 <HAL_UART_Init>
 8002832:	4603      	mov	r3, r0
 8002834:	2b00      	cmp	r3, #0
 8002836:	d001      	beq.n	800283c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002838:	f7ff fa0c 	bl	8001c54 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800283c:	2100      	movs	r1, #0
 800283e:	480d      	ldr	r0, [pc, #52]	@ (8002874 <MX_USART3_UART_Init+0x90>)
 8002840:	f008 ff7d 	bl	800b73e <HAL_UARTEx_SetTxFifoThreshold>
 8002844:	4603      	mov	r3, r0
 8002846:	2b00      	cmp	r3, #0
 8002848:	d001      	beq.n	800284e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800284a:	f7ff fa03 	bl	8001c54 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800284e:	2100      	movs	r1, #0
 8002850:	4808      	ldr	r0, [pc, #32]	@ (8002874 <MX_USART3_UART_Init+0x90>)
 8002852:	f008 ffb2 	bl	800b7ba <HAL_UARTEx_SetRxFifoThreshold>
 8002856:	4603      	mov	r3, r0
 8002858:	2b00      	cmp	r3, #0
 800285a:	d001      	beq.n	8002860 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800285c:	f7ff f9fa 	bl	8001c54 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002860:	4804      	ldr	r0, [pc, #16]	@ (8002874 <MX_USART3_UART_Init+0x90>)
 8002862:	f008 ff33 	bl	800b6cc <HAL_UARTEx_DisableFifoMode>
 8002866:	4603      	mov	r3, r0
 8002868:	2b00      	cmp	r3, #0
 800286a:	d001      	beq.n	8002870 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800286c:	f7ff f9f2 	bl	8001c54 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002870:	bf00      	nop
 8002872:	bd80      	pop	{r7, pc}
 8002874:	24000930 	.word	0x24000930
 8002878:	40004800 	.word	0x40004800

0800287c <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002880:	4b22      	ldr	r3, [pc, #136]	@ (800290c <MX_USART6_UART_Init+0x90>)
 8002882:	4a23      	ldr	r2, [pc, #140]	@ (8002910 <MX_USART6_UART_Init+0x94>)
 8002884:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8002886:	4b21      	ldr	r3, [pc, #132]	@ (800290c <MX_USART6_UART_Init+0x90>)
 8002888:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800288c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800288e:	4b1f      	ldr	r3, [pc, #124]	@ (800290c <MX_USART6_UART_Init+0x90>)
 8002890:	2200      	movs	r2, #0
 8002892:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002894:	4b1d      	ldr	r3, [pc, #116]	@ (800290c <MX_USART6_UART_Init+0x90>)
 8002896:	2200      	movs	r2, #0
 8002898:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800289a:	4b1c      	ldr	r3, [pc, #112]	@ (800290c <MX_USART6_UART_Init+0x90>)
 800289c:	2200      	movs	r2, #0
 800289e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80028a0:	4b1a      	ldr	r3, [pc, #104]	@ (800290c <MX_USART6_UART_Init+0x90>)
 80028a2:	220c      	movs	r2, #12
 80028a4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028a6:	4b19      	ldr	r3, [pc, #100]	@ (800290c <MX_USART6_UART_Init+0x90>)
 80028a8:	2200      	movs	r2, #0
 80028aa:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80028ac:	4b17      	ldr	r3, [pc, #92]	@ (800290c <MX_USART6_UART_Init+0x90>)
 80028ae:	2200      	movs	r2, #0
 80028b0:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80028b2:	4b16      	ldr	r3, [pc, #88]	@ (800290c <MX_USART6_UART_Init+0x90>)
 80028b4:	2200      	movs	r2, #0
 80028b6:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80028b8:	4b14      	ldr	r3, [pc, #80]	@ (800290c <MX_USART6_UART_Init+0x90>)
 80028ba:	2200      	movs	r2, #0
 80028bc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80028be:	4b13      	ldr	r3, [pc, #76]	@ (800290c <MX_USART6_UART_Init+0x90>)
 80028c0:	2200      	movs	r2, #0
 80028c2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80028c4:	4811      	ldr	r0, [pc, #68]	@ (800290c <MX_USART6_UART_Init+0x90>)
 80028c6:	f006 fa0b 	bl	8008ce0 <HAL_UART_Init>
 80028ca:	4603      	mov	r3, r0
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d001      	beq.n	80028d4 <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 80028d0:	f7ff f9c0 	bl	8001c54 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80028d4:	2100      	movs	r1, #0
 80028d6:	480d      	ldr	r0, [pc, #52]	@ (800290c <MX_USART6_UART_Init+0x90>)
 80028d8:	f008 ff31 	bl	800b73e <HAL_UARTEx_SetTxFifoThreshold>
 80028dc:	4603      	mov	r3, r0
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d001      	beq.n	80028e6 <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 80028e2:	f7ff f9b7 	bl	8001c54 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80028e6:	2100      	movs	r1, #0
 80028e8:	4808      	ldr	r0, [pc, #32]	@ (800290c <MX_USART6_UART_Init+0x90>)
 80028ea:	f008 ff66 	bl	800b7ba <HAL_UARTEx_SetRxFifoThreshold>
 80028ee:	4603      	mov	r3, r0
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d001      	beq.n	80028f8 <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 80028f4:	f7ff f9ae 	bl	8001c54 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 80028f8:	4804      	ldr	r0, [pc, #16]	@ (800290c <MX_USART6_UART_Init+0x90>)
 80028fa:	f008 fee7 	bl	800b6cc <HAL_UARTEx_DisableFifoMode>
 80028fe:	4603      	mov	r3, r0
 8002900:	2b00      	cmp	r3, #0
 8002902:	d001      	beq.n	8002908 <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 8002904:	f7ff f9a6 	bl	8001c54 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002908:	bf00      	nop
 800290a:	bd80      	pop	{r7, pc}
 800290c:	240009c4 	.word	0x240009c4
 8002910:	40011400 	.word	0x40011400

08002914 <MX_USART10_UART_Init>:
/* USART10 init function */

void MX_USART10_UART_Init(void)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	af00      	add	r7, sp, #0
  /* USER CODE END USART10_Init 0 */

  /* USER CODE BEGIN USART10_Init 1 */

  /* USER CODE END USART10_Init 1 */
  huart10.Instance = USART10;
 8002918:	4b22      	ldr	r3, [pc, #136]	@ (80029a4 <MX_USART10_UART_Init+0x90>)
 800291a:	4a23      	ldr	r2, [pc, #140]	@ (80029a8 <MX_USART10_UART_Init+0x94>)
 800291c:	601a      	str	r2, [r3, #0]
  huart10.Init.BaudRate = 115200;
 800291e:	4b21      	ldr	r3, [pc, #132]	@ (80029a4 <MX_USART10_UART_Init+0x90>)
 8002920:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002924:	605a      	str	r2, [r3, #4]
  huart10.Init.WordLength = UART_WORDLENGTH_8B;
 8002926:	4b1f      	ldr	r3, [pc, #124]	@ (80029a4 <MX_USART10_UART_Init+0x90>)
 8002928:	2200      	movs	r2, #0
 800292a:	609a      	str	r2, [r3, #8]
  huart10.Init.StopBits = UART_STOPBITS_1;
 800292c:	4b1d      	ldr	r3, [pc, #116]	@ (80029a4 <MX_USART10_UART_Init+0x90>)
 800292e:	2200      	movs	r2, #0
 8002930:	60da      	str	r2, [r3, #12]
  huart10.Init.Parity = UART_PARITY_NONE;
 8002932:	4b1c      	ldr	r3, [pc, #112]	@ (80029a4 <MX_USART10_UART_Init+0x90>)
 8002934:	2200      	movs	r2, #0
 8002936:	611a      	str	r2, [r3, #16]
  huart10.Init.Mode = UART_MODE_TX_RX;
 8002938:	4b1a      	ldr	r3, [pc, #104]	@ (80029a4 <MX_USART10_UART_Init+0x90>)
 800293a:	220c      	movs	r2, #12
 800293c:	615a      	str	r2, [r3, #20]
  huart10.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800293e:	4b19      	ldr	r3, [pc, #100]	@ (80029a4 <MX_USART10_UART_Init+0x90>)
 8002940:	2200      	movs	r2, #0
 8002942:	619a      	str	r2, [r3, #24]
  huart10.Init.OverSampling = UART_OVERSAMPLING_16;
 8002944:	4b17      	ldr	r3, [pc, #92]	@ (80029a4 <MX_USART10_UART_Init+0x90>)
 8002946:	2200      	movs	r2, #0
 8002948:	61da      	str	r2, [r3, #28]
  huart10.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800294a:	4b16      	ldr	r3, [pc, #88]	@ (80029a4 <MX_USART10_UART_Init+0x90>)
 800294c:	2200      	movs	r2, #0
 800294e:	621a      	str	r2, [r3, #32]
  huart10.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002950:	4b14      	ldr	r3, [pc, #80]	@ (80029a4 <MX_USART10_UART_Init+0x90>)
 8002952:	2200      	movs	r2, #0
 8002954:	625a      	str	r2, [r3, #36]	@ 0x24
  huart10.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002956:	4b13      	ldr	r3, [pc, #76]	@ (80029a4 <MX_USART10_UART_Init+0x90>)
 8002958:	2200      	movs	r2, #0
 800295a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart10) != HAL_OK)
 800295c:	4811      	ldr	r0, [pc, #68]	@ (80029a4 <MX_USART10_UART_Init+0x90>)
 800295e:	f006 f9bf 	bl	8008ce0 <HAL_UART_Init>
 8002962:	4603      	mov	r3, r0
 8002964:	2b00      	cmp	r3, #0
 8002966:	d001      	beq.n	800296c <MX_USART10_UART_Init+0x58>
  {
    Error_Handler();
 8002968:	f7ff f974 	bl	8001c54 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart10, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800296c:	2100      	movs	r1, #0
 800296e:	480d      	ldr	r0, [pc, #52]	@ (80029a4 <MX_USART10_UART_Init+0x90>)
 8002970:	f008 fee5 	bl	800b73e <HAL_UARTEx_SetTxFifoThreshold>
 8002974:	4603      	mov	r3, r0
 8002976:	2b00      	cmp	r3, #0
 8002978:	d001      	beq.n	800297e <MX_USART10_UART_Init+0x6a>
  {
    Error_Handler();
 800297a:	f7ff f96b 	bl	8001c54 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart10, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800297e:	2100      	movs	r1, #0
 8002980:	4808      	ldr	r0, [pc, #32]	@ (80029a4 <MX_USART10_UART_Init+0x90>)
 8002982:	f008 ff1a 	bl	800b7ba <HAL_UARTEx_SetRxFifoThreshold>
 8002986:	4603      	mov	r3, r0
 8002988:	2b00      	cmp	r3, #0
 800298a:	d001      	beq.n	8002990 <MX_USART10_UART_Init+0x7c>
  {
    Error_Handler();
 800298c:	f7ff f962 	bl	8001c54 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart10) != HAL_OK)
 8002990:	4804      	ldr	r0, [pc, #16]	@ (80029a4 <MX_USART10_UART_Init+0x90>)
 8002992:	f008 fe9b 	bl	800b6cc <HAL_UARTEx_DisableFifoMode>
 8002996:	4603      	mov	r3, r0
 8002998:	2b00      	cmp	r3, #0
 800299a:	d001      	beq.n	80029a0 <MX_USART10_UART_Init+0x8c>
  {
    Error_Handler();
 800299c:	f7ff f95a 	bl	8001c54 <Error_Handler>
  }
  /* USER CODE BEGIN USART10_Init 2 */

  /* USER CODE END USART10_Init 2 */

}
 80029a0:	bf00      	nop
 80029a2:	bd80      	pop	{r7, pc}
 80029a4:	24000a58 	.word	0x24000a58
 80029a8:	40011c00 	.word	0x40011c00

080029ac <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b0c8      	sub	sp, #288	@ 0x120
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80029b6:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80029ba:	6018      	str	r0, [r3, #0]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029bc:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 80029c0:	2200      	movs	r2, #0
 80029c2:	601a      	str	r2, [r3, #0]
 80029c4:	605a      	str	r2, [r3, #4]
 80029c6:	609a      	str	r2, [r3, #8]
 80029c8:	60da      	str	r2, [r3, #12]
 80029ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80029cc:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80029d0:	22b8      	movs	r2, #184	@ 0xb8
 80029d2:	2100      	movs	r1, #0
 80029d4:	4618      	mov	r0, r3
 80029d6:	f00c ff30 	bl	800f83a <memset>
  if(uartHandle->Instance==UART4)
 80029da:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80029de:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4aaa      	ldr	r2, [pc, #680]	@ (8002c90 <HAL_UART_MspInit+0x2e4>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d14e      	bne.n	8002a8a <HAL_UART_MspInit+0xde>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80029ec:	f04f 0202 	mov.w	r2, #2
 80029f0:	f04f 0300 	mov.w	r3, #0
 80029f4:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80029f8:	2300      	movs	r3, #0
 80029fa:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80029fe:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002a02:	4618      	mov	r0, r3
 8002a04:	f003 fe6c 	bl	80066e0 <HAL_RCCEx_PeriphCLKConfig>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d001      	beq.n	8002a12 <HAL_UART_MspInit+0x66>
    {
      Error_Handler();
 8002a0e:	f7ff f921 	bl	8001c54 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002a12:	4ba0      	ldr	r3, [pc, #640]	@ (8002c94 <HAL_UART_MspInit+0x2e8>)
 8002a14:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002a18:	4a9e      	ldr	r2, [pc, #632]	@ (8002c94 <HAL_UART_MspInit+0x2e8>)
 8002a1a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002a1e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002a22:	4b9c      	ldr	r3, [pc, #624]	@ (8002c94 <HAL_UART_MspInit+0x2e8>)
 8002a24:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002a28:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002a2c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002a2e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a30:	4b98      	ldr	r3, [pc, #608]	@ (8002c94 <HAL_UART_MspInit+0x2e8>)
 8002a32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002a36:	4a97      	ldr	r2, [pc, #604]	@ (8002c94 <HAL_UART_MspInit+0x2e8>)
 8002a38:	f043 0301 	orr.w	r3, r3, #1
 8002a3c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002a40:	4b94      	ldr	r3, [pc, #592]	@ (8002c94 <HAL_UART_MspInit+0x2e8>)
 8002a42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002a46:	f003 0301 	and.w	r3, r3, #1
 8002a4a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002a4c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002a4e:	2303      	movs	r3, #3
 8002a50:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a54:	2302      	movs	r3, #2
 8002a56:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a60:	2300      	movs	r3, #0
 8002a62:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002a66:	2308      	movs	r3, #8
 8002a68:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a6c:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8002a70:	4619      	mov	r1, r3
 8002a72:	4889      	ldr	r0, [pc, #548]	@ (8002c98 <HAL_UART_MspInit+0x2ec>)
 8002a74:	f002 fcec 	bl	8005450 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 8, 0);
 8002a78:	2200      	movs	r2, #0
 8002a7a:	2108      	movs	r1, #8
 8002a7c:	2034      	movs	r0, #52	@ 0x34
 8002a7e:	f000 fcec 	bl	800345a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8002a82:	2034      	movs	r0, #52	@ 0x34
 8002a84:	f000 fd03 	bl	800348e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART10_IRQn);
  /* USER CODE BEGIN USART10_MspInit 1 */

  /* USER CODE END USART10_MspInit 1 */
  }
}
 8002a88:	e320      	b.n	80030cc <HAL_UART_MspInit+0x720>
  else if(uartHandle->Instance==UART5)
 8002a8a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002a8e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a81      	ldr	r2, [pc, #516]	@ (8002c9c <HAL_UART_MspInit+0x2f0>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d147      	bne.n	8002b2c <HAL_UART_MspInit+0x180>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8002a9c:	f04f 0202 	mov.w	r2, #2
 8002aa0:	f04f 0300 	mov.w	r3, #0
 8002aa4:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002aae:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f003 fe14 	bl	80066e0 <HAL_RCCEx_PeriphCLKConfig>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d001      	beq.n	8002ac2 <HAL_UART_MspInit+0x116>
      Error_Handler();
 8002abe:	f7ff f8c9 	bl	8001c54 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8002ac2:	4b74      	ldr	r3, [pc, #464]	@ (8002c94 <HAL_UART_MspInit+0x2e8>)
 8002ac4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002ac8:	4a72      	ldr	r2, [pc, #456]	@ (8002c94 <HAL_UART_MspInit+0x2e8>)
 8002aca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002ace:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002ad2:	4b70      	ldr	r3, [pc, #448]	@ (8002c94 <HAL_UART_MspInit+0x2e8>)
 8002ad4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002ad8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002adc:	647b      	str	r3, [r7, #68]	@ 0x44
 8002ade:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ae0:	4b6c      	ldr	r3, [pc, #432]	@ (8002c94 <HAL_UART_MspInit+0x2e8>)
 8002ae2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002ae6:	4a6b      	ldr	r2, [pc, #428]	@ (8002c94 <HAL_UART_MspInit+0x2e8>)
 8002ae8:	f043 0302 	orr.w	r3, r3, #2
 8002aec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002af0:	4b68      	ldr	r3, [pc, #416]	@ (8002c94 <HAL_UART_MspInit+0x2e8>)
 8002af2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002af6:	f003 0302 	and.w	r3, r3, #2
 8002afa:	643b      	str	r3, [r7, #64]	@ 0x40
 8002afc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_5;
 8002afe:	f242 0320 	movw	r3, #8224	@ 0x2020
 8002b02:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b06:	2302      	movs	r3, #2
 8002b08:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b12:	2300      	movs	r3, #0
 8002b14:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 8002b18:	230e      	movs	r3, #14
 8002b1a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b1e:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8002b22:	4619      	mov	r1, r3
 8002b24:	485e      	ldr	r0, [pc, #376]	@ (8002ca0 <HAL_UART_MspInit+0x2f4>)
 8002b26:	f002 fc93 	bl	8005450 <HAL_GPIO_Init>
}
 8002b2a:	e2cf      	b.n	80030cc <HAL_UART_MspInit+0x720>
  else if(uartHandle->Instance==UART7)
 8002b2c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002b30:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a5a      	ldr	r2, [pc, #360]	@ (8002ca4 <HAL_UART_MspInit+0x2f8>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d14f      	bne.n	8002bde <HAL_UART_MspInit+0x232>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8002b3e:	f04f 0202 	mov.w	r2, #2
 8002b42:	f04f 0300 	mov.w	r3, #0
 8002b46:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b50:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002b54:	4618      	mov	r0, r3
 8002b56:	f003 fdc3 	bl	80066e0 <HAL_RCCEx_PeriphCLKConfig>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d001      	beq.n	8002b64 <HAL_UART_MspInit+0x1b8>
      Error_Handler();
 8002b60:	f7ff f878 	bl	8001c54 <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 8002b64:	4b4b      	ldr	r3, [pc, #300]	@ (8002c94 <HAL_UART_MspInit+0x2e8>)
 8002b66:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002b6a:	4a4a      	ldr	r2, [pc, #296]	@ (8002c94 <HAL_UART_MspInit+0x2e8>)
 8002b6c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002b70:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002b74:	4b47      	ldr	r3, [pc, #284]	@ (8002c94 <HAL_UART_MspInit+0x2e8>)
 8002b76:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002b7a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002b7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002b80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002b82:	4b44      	ldr	r3, [pc, #272]	@ (8002c94 <HAL_UART_MspInit+0x2e8>)
 8002b84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002b88:	4a42      	ldr	r2, [pc, #264]	@ (8002c94 <HAL_UART_MspInit+0x2e8>)
 8002b8a:	f043 0310 	orr.w	r3, r3, #16
 8002b8e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002b92:	4b40      	ldr	r3, [pc, #256]	@ (8002c94 <HAL_UART_MspInit+0x2e8>)
 8002b94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002b98:	f003 0310 	and.w	r3, r3, #16
 8002b9c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002b9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8002ba0:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8002ba4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ba8:	2302      	movs	r3, #2
 8002baa:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 8002bba:	2307      	movs	r3, #7
 8002bbc:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002bc0:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8002bc4:	4619      	mov	r1, r3
 8002bc6:	4838      	ldr	r0, [pc, #224]	@ (8002ca8 <HAL_UART_MspInit+0x2fc>)
 8002bc8:	f002 fc42 	bl	8005450 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART7_IRQn, 6, 0);
 8002bcc:	2200      	movs	r2, #0
 8002bce:	2106      	movs	r1, #6
 8002bd0:	2052      	movs	r0, #82	@ 0x52
 8002bd2:	f000 fc42 	bl	800345a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8002bd6:	2052      	movs	r0, #82	@ 0x52
 8002bd8:	f000 fc59 	bl	800348e <HAL_NVIC_EnableIRQ>
}
 8002bdc:	e276      	b.n	80030cc <HAL_UART_MspInit+0x720>
  else if(uartHandle->Instance==UART8)
 8002bde:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002be2:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a30      	ldr	r2, [pc, #192]	@ (8002cac <HAL_UART_MspInit+0x300>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d15f      	bne.n	8002cb0 <HAL_UART_MspInit+0x304>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 8002bf0:	f04f 0202 	mov.w	r2, #2
 8002bf4:	f04f 0300 	mov.w	r3, #0
 8002bf8:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c02:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002c06:	4618      	mov	r0, r3
 8002c08:	f003 fd6a 	bl	80066e0 <HAL_RCCEx_PeriphCLKConfig>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d001      	beq.n	8002c16 <HAL_UART_MspInit+0x26a>
      Error_Handler();
 8002c12:	f7ff f81f 	bl	8001c54 <Error_Handler>
    __HAL_RCC_UART8_CLK_ENABLE();
 8002c16:	4b1f      	ldr	r3, [pc, #124]	@ (8002c94 <HAL_UART_MspInit+0x2e8>)
 8002c18:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002c1c:	4a1d      	ldr	r2, [pc, #116]	@ (8002c94 <HAL_UART_MspInit+0x2e8>)
 8002c1e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002c22:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002c26:	4b1b      	ldr	r3, [pc, #108]	@ (8002c94 <HAL_UART_MspInit+0x2e8>)
 8002c28:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002c2c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002c30:	637b      	str	r3, [r7, #52]	@ 0x34
 8002c32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002c34:	4b17      	ldr	r3, [pc, #92]	@ (8002c94 <HAL_UART_MspInit+0x2e8>)
 8002c36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002c3a:	4a16      	ldr	r2, [pc, #88]	@ (8002c94 <HAL_UART_MspInit+0x2e8>)
 8002c3c:	f043 0310 	orr.w	r3, r3, #16
 8002c40:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002c44:	4b13      	ldr	r3, [pc, #76]	@ (8002c94 <HAL_UART_MspInit+0x2e8>)
 8002c46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002c4a:	f003 0310 	and.w	r3, r3, #16
 8002c4e:	633b      	str	r3, [r7, #48]	@ 0x30
 8002c50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002c52:	2303      	movs	r3, #3
 8002c54:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c58:	2302      	movs	r3, #2
 8002c5a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c64:	2300      	movs	r3, #0
 8002c66:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8002c6a:	2308      	movs	r3, #8
 8002c6c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002c70:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8002c74:	4619      	mov	r1, r3
 8002c76:	480c      	ldr	r0, [pc, #48]	@ (8002ca8 <HAL_UART_MspInit+0x2fc>)
 8002c78:	f002 fbea 	bl	8005450 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART8_IRQn, 15, 0);
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	210f      	movs	r1, #15
 8002c80:	2053      	movs	r0, #83	@ 0x53
 8002c82:	f000 fbea 	bl	800345a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 8002c86:	2053      	movs	r0, #83	@ 0x53
 8002c88:	f000 fc01 	bl	800348e <HAL_NVIC_EnableIRQ>
}
 8002c8c:	e21e      	b.n	80030cc <HAL_UART_MspInit+0x720>
 8002c8e:	bf00      	nop
 8002c90:	40004c00 	.word	0x40004c00
 8002c94:	58024400 	.word	0x58024400
 8002c98:	58020000 	.word	0x58020000
 8002c9c:	40005000 	.word	0x40005000
 8002ca0:	58020400 	.word	0x58020400
 8002ca4:	40007800 	.word	0x40007800
 8002ca8:	58021000 	.word	0x58021000
 8002cac:	40007c00 	.word	0x40007c00
  else if(uartHandle->Instance==UART9)
 8002cb0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002cb4:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4abd      	ldr	r2, [pc, #756]	@ (8002fb4 <HAL_UART_MspInit+0x608>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d14f      	bne.n	8002d62 <HAL_UART_MspInit+0x3b6>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART9;
 8002cc2:	f04f 0201 	mov.w	r2, #1
 8002cc6:	f04f 0300 	mov.w	r3, #0
 8002cca:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002cd4:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f003 fd01 	bl	80066e0 <HAL_RCCEx_PeriphCLKConfig>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d001      	beq.n	8002ce8 <HAL_UART_MspInit+0x33c>
      Error_Handler();
 8002ce4:	f7fe ffb6 	bl	8001c54 <Error_Handler>
    __HAL_RCC_UART9_CLK_ENABLE();
 8002ce8:	4bb3      	ldr	r3, [pc, #716]	@ (8002fb8 <HAL_UART_MspInit+0x60c>)
 8002cea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002cee:	4ab2      	ldr	r2, [pc, #712]	@ (8002fb8 <HAL_UART_MspInit+0x60c>)
 8002cf0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002cf4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002cf8:	4baf      	ldr	r3, [pc, #700]	@ (8002fb8 <HAL_UART_MspInit+0x60c>)
 8002cfa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002cfe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d02:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002d04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d06:	4bac      	ldr	r3, [pc, #688]	@ (8002fb8 <HAL_UART_MspInit+0x60c>)
 8002d08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002d0c:	4aaa      	ldr	r2, [pc, #680]	@ (8002fb8 <HAL_UART_MspInit+0x60c>)
 8002d0e:	f043 0308 	orr.w	r3, r3, #8
 8002d12:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002d16:	4ba8      	ldr	r3, [pc, #672]	@ (8002fb8 <HAL_UART_MspInit+0x60c>)
 8002d18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002d1c:	f003 0308 	and.w	r3, r3, #8
 8002d20:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002d22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8002d24:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8002d28:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d2c:	2302      	movs	r3, #2
 8002d2e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d32:	2300      	movs	r3, #0
 8002d34:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF11_UART9;
 8002d3e:	230b      	movs	r3, #11
 8002d40:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d44:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8002d48:	4619      	mov	r1, r3
 8002d4a:	489c      	ldr	r0, [pc, #624]	@ (8002fbc <HAL_UART_MspInit+0x610>)
 8002d4c:	f002 fb80 	bl	8005450 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART9_IRQn, 5, 0);
 8002d50:	2200      	movs	r2, #0
 8002d52:	2105      	movs	r1, #5
 8002d54:	209b      	movs	r0, #155	@ 0x9b
 8002d56:	f000 fb80 	bl	800345a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART9_IRQn);
 8002d5a:	209b      	movs	r0, #155	@ 0x9b
 8002d5c:	f000 fb97 	bl	800348e <HAL_NVIC_EnableIRQ>
}
 8002d60:	e1b4      	b.n	80030cc <HAL_UART_MspInit+0x720>
  else if(uartHandle->Instance==USART2)
 8002d62:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002d66:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a94      	ldr	r2, [pc, #592]	@ (8002fc0 <HAL_UART_MspInit+0x614>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d156      	bne.n	8002e22 <HAL_UART_MspInit+0x476>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002d74:	f04f 0202 	mov.w	r2, #2
 8002d78:	f04f 0300 	mov.w	r3, #0
 8002d7c:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002d80:	2300      	movs	r3, #0
 8002d82:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002d86:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f003 fca8 	bl	80066e0 <HAL_RCCEx_PeriphCLKConfig>
 8002d90:	4603      	mov	r3, r0
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d001      	beq.n	8002d9a <HAL_UART_MspInit+0x3ee>
      Error_Handler();
 8002d96:	f7fe ff5d 	bl	8001c54 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002d9a:	4b87      	ldr	r3, [pc, #540]	@ (8002fb8 <HAL_UART_MspInit+0x60c>)
 8002d9c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002da0:	4a85      	ldr	r2, [pc, #532]	@ (8002fb8 <HAL_UART_MspInit+0x60c>)
 8002da2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002da6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002daa:	4b83      	ldr	r3, [pc, #524]	@ (8002fb8 <HAL_UART_MspInit+0x60c>)
 8002dac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002db0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002db4:	627b      	str	r3, [r7, #36]	@ 0x24
 8002db6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002db8:	4b7f      	ldr	r3, [pc, #508]	@ (8002fb8 <HAL_UART_MspInit+0x60c>)
 8002dba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002dbe:	4a7e      	ldr	r2, [pc, #504]	@ (8002fb8 <HAL_UART_MspInit+0x60c>)
 8002dc0:	f043 0301 	orr.w	r3, r3, #1
 8002dc4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002dc8:	4b7b      	ldr	r3, [pc, #492]	@ (8002fb8 <HAL_UART_MspInit+0x60c>)
 8002dca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002dce:	f003 0201 	and.w	r2, r3, #1
 8002dd2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002dd6:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002dda:	601a      	str	r2, [r3, #0]
 8002ddc:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002de0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002de4:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002de6:	230c      	movs	r3, #12
 8002de8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dec:	2302      	movs	r3, #2
 8002dee:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002df2:	2300      	movs	r3, #0
 8002df4:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002dfe:	2307      	movs	r3, #7
 8002e00:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e04:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8002e08:	4619      	mov	r1, r3
 8002e0a:	486e      	ldr	r0, [pc, #440]	@ (8002fc4 <HAL_UART_MspInit+0x618>)
 8002e0c:	f002 fb20 	bl	8005450 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 15, 0);
 8002e10:	2200      	movs	r2, #0
 8002e12:	210f      	movs	r1, #15
 8002e14:	2026      	movs	r0, #38	@ 0x26
 8002e16:	f000 fb20 	bl	800345a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002e1a:	2026      	movs	r0, #38	@ 0x26
 8002e1c:	f000 fb37 	bl	800348e <HAL_NVIC_EnableIRQ>
}
 8002e20:	e154      	b.n	80030cc <HAL_UART_MspInit+0x720>
  else if(uartHandle->Instance==USART3)
 8002e22:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002e26:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a66      	ldr	r2, [pc, #408]	@ (8002fc8 <HAL_UART_MspInit+0x61c>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d15f      	bne.n	8002ef4 <HAL_UART_MspInit+0x548>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002e34:	f04f 0202 	mov.w	r2, #2
 8002e38:	f04f 0300 	mov.w	r3, #0
 8002e3c:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002e40:	2300      	movs	r3, #0
 8002e42:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002e46:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f003 fc48 	bl	80066e0 <HAL_RCCEx_PeriphCLKConfig>
 8002e50:	4603      	mov	r3, r0
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d001      	beq.n	8002e5a <HAL_UART_MspInit+0x4ae>
      Error_Handler();
 8002e56:	f7fe fefd 	bl	8001c54 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002e5a:	4b57      	ldr	r3, [pc, #348]	@ (8002fb8 <HAL_UART_MspInit+0x60c>)
 8002e5c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002e60:	4a55      	ldr	r2, [pc, #340]	@ (8002fb8 <HAL_UART_MspInit+0x60c>)
 8002e62:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002e66:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002e6a:	4b53      	ldr	r3, [pc, #332]	@ (8002fb8 <HAL_UART_MspInit+0x60c>)
 8002e6c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002e70:	f403 2280 	and.w	r2, r3, #262144	@ 0x40000
 8002e74:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002e78:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002e7c:	601a      	str	r2, [r3, #0]
 8002e7e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002e82:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002e86:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e88:	4b4b      	ldr	r3, [pc, #300]	@ (8002fb8 <HAL_UART_MspInit+0x60c>)
 8002e8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002e8e:	4a4a      	ldr	r2, [pc, #296]	@ (8002fb8 <HAL_UART_MspInit+0x60c>)
 8002e90:	f043 0308 	orr.w	r3, r3, #8
 8002e94:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002e98:	4b47      	ldr	r3, [pc, #284]	@ (8002fb8 <HAL_UART_MspInit+0x60c>)
 8002e9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002e9e:	f003 0208 	and.w	r2, r3, #8
 8002ea2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002ea6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002eaa:	601a      	str	r2, [r3, #0]
 8002eac:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002eb0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002eb4:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002eb6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002eba:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ebe:	2302      	movs	r3, #2
 8002ec0:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002ed0:	2307      	movs	r3, #7
 8002ed2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ed6:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8002eda:	4619      	mov	r1, r3
 8002edc:	4837      	ldr	r0, [pc, #220]	@ (8002fbc <HAL_UART_MspInit+0x610>)
 8002ede:	f002 fab7 	bl	8005450 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 14, 0);
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	210e      	movs	r1, #14
 8002ee6:	2027      	movs	r0, #39	@ 0x27
 8002ee8:	f000 fab7 	bl	800345a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002eec:	2027      	movs	r0, #39	@ 0x27
 8002eee:	f000 face 	bl	800348e <HAL_NVIC_EnableIRQ>
}
 8002ef2:	e0eb      	b.n	80030cc <HAL_UART_MspInit+0x720>
  else if(uartHandle->Instance==USART6)
 8002ef4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002ef8:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a32      	ldr	r2, [pc, #200]	@ (8002fcc <HAL_UART_MspInit+0x620>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d166      	bne.n	8002fd4 <HAL_UART_MspInit+0x628>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8002f06:	f04f 0201 	mov.w	r2, #1
 8002f0a:	f04f 0300 	mov.w	r3, #0
 8002f0e:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8002f12:	2300      	movs	r3, #0
 8002f14:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002f18:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f003 fbdf 	bl	80066e0 <HAL_RCCEx_PeriphCLKConfig>
 8002f22:	4603      	mov	r3, r0
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d001      	beq.n	8002f2c <HAL_UART_MspInit+0x580>
      Error_Handler();
 8002f28:	f7fe fe94 	bl	8001c54 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002f2c:	4b22      	ldr	r3, [pc, #136]	@ (8002fb8 <HAL_UART_MspInit+0x60c>)
 8002f2e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002f32:	4a21      	ldr	r2, [pc, #132]	@ (8002fb8 <HAL_UART_MspInit+0x60c>)
 8002f34:	f043 0320 	orr.w	r3, r3, #32
 8002f38:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002f3c:	4b1e      	ldr	r3, [pc, #120]	@ (8002fb8 <HAL_UART_MspInit+0x60c>)
 8002f3e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002f42:	f003 0220 	and.w	r2, r3, #32
 8002f46:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002f4a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002f4e:	601a      	str	r2, [r3, #0]
 8002f50:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002f54:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002f58:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f5a:	4b17      	ldr	r3, [pc, #92]	@ (8002fb8 <HAL_UART_MspInit+0x60c>)
 8002f5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002f60:	4a15      	ldr	r2, [pc, #84]	@ (8002fb8 <HAL_UART_MspInit+0x60c>)
 8002f62:	f043 0304 	orr.w	r3, r3, #4
 8002f66:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002f6a:	4b13      	ldr	r3, [pc, #76]	@ (8002fb8 <HAL_UART_MspInit+0x60c>)
 8002f6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002f70:	f003 0204 	and.w	r2, r3, #4
 8002f74:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002f78:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002f7c:	601a      	str	r2, [r3, #0]
 8002f7e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002f82:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002f86:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002f88:	23c0      	movs	r3, #192	@ 0xc0
 8002f8a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f8e:	2302      	movs	r3, #2
 8002f90:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f94:	2300      	movs	r3, #0
 8002f96:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 8002fa0:	2307      	movs	r3, #7
 8002fa2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002fa6:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8002faa:	4619      	mov	r1, r3
 8002fac:	4808      	ldr	r0, [pc, #32]	@ (8002fd0 <HAL_UART_MspInit+0x624>)
 8002fae:	f002 fa4f 	bl	8005450 <HAL_GPIO_Init>
}
 8002fb2:	e08b      	b.n	80030cc <HAL_UART_MspInit+0x720>
 8002fb4:	40011800 	.word	0x40011800
 8002fb8:	58024400 	.word	0x58024400
 8002fbc:	58020c00 	.word	0x58020c00
 8002fc0:	40004400 	.word	0x40004400
 8002fc4:	58020000 	.word	0x58020000
 8002fc8:	40004800 	.word	0x40004800
 8002fcc:	40011400 	.word	0x40011400
 8002fd0:	58020800 	.word	0x58020800
  else if(uartHandle->Instance==USART10)
 8002fd4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002fd8:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a3d      	ldr	r2, [pc, #244]	@ (80030d8 <HAL_UART_MspInit+0x72c>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d172      	bne.n	80030cc <HAL_UART_MspInit+0x720>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART10;
 8002fe6:	f04f 0201 	mov.w	r2, #1
 8002fea:	f04f 0300 	mov.w	r3, #0
 8002fee:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002ff8:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f003 fb6f 	bl	80066e0 <HAL_RCCEx_PeriphCLKConfig>
 8003002:	4603      	mov	r3, r0
 8003004:	2b00      	cmp	r3, #0
 8003006:	d001      	beq.n	800300c <HAL_UART_MspInit+0x660>
      Error_Handler();
 8003008:	f7fe fe24 	bl	8001c54 <Error_Handler>
    __HAL_RCC_USART10_CLK_ENABLE();
 800300c:	4b33      	ldr	r3, [pc, #204]	@ (80030dc <HAL_UART_MspInit+0x730>)
 800300e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003012:	4a32      	ldr	r2, [pc, #200]	@ (80030dc <HAL_UART_MspInit+0x730>)
 8003014:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003018:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800301c:	4b2f      	ldr	r3, [pc, #188]	@ (80030dc <HAL_UART_MspInit+0x730>)
 800301e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003022:	f003 0280 	and.w	r2, r3, #128	@ 0x80
 8003026:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800302a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800302e:	601a      	str	r2, [r3, #0]
 8003030:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003034:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003038:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800303a:	4b28      	ldr	r3, [pc, #160]	@ (80030dc <HAL_UART_MspInit+0x730>)
 800303c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003040:	4a26      	ldr	r2, [pc, #152]	@ (80030dc <HAL_UART_MspInit+0x730>)
 8003042:	f043 0310 	orr.w	r3, r3, #16
 8003046:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800304a:	4b24      	ldr	r3, [pc, #144]	@ (80030dc <HAL_UART_MspInit+0x730>)
 800304c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003050:	f003 0210 	and.w	r2, r3, #16
 8003054:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003058:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800305c:	601a      	str	r2, [r3, #0]
 800305e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003062:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003066:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003068:	2304      	movs	r3, #4
 800306a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800306e:	2302      	movs	r3, #2
 8003070:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003074:	2300      	movs	r3, #0
 8003076:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800307a:	2300      	movs	r3, #0
 800307c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF4_USART10;
 8003080:	2304      	movs	r3, #4
 8003082:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003086:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 800308a:	4619      	mov	r1, r3
 800308c:	4814      	ldr	r0, [pc, #80]	@ (80030e0 <HAL_UART_MspInit+0x734>)
 800308e:	f002 f9df 	bl	8005450 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003092:	2308      	movs	r3, #8
 8003094:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003098:	2302      	movs	r3, #2
 800309a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800309e:	2300      	movs	r3, #0
 80030a0:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030a4:	2300      	movs	r3, #0
 80030a6:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF11_USART10;
 80030aa:	230b      	movs	r3, #11
 80030ac:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80030b0:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 80030b4:	4619      	mov	r1, r3
 80030b6:	480a      	ldr	r0, [pc, #40]	@ (80030e0 <HAL_UART_MspInit+0x734>)
 80030b8:	f002 f9ca 	bl	8005450 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART10_IRQn, 1, 0);
 80030bc:	2200      	movs	r2, #0
 80030be:	2101      	movs	r1, #1
 80030c0:	209c      	movs	r0, #156	@ 0x9c
 80030c2:	f000 f9ca 	bl	800345a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART10_IRQn);
 80030c6:	209c      	movs	r0, #156	@ 0x9c
 80030c8:	f000 f9e1 	bl	800348e <HAL_NVIC_EnableIRQ>
}
 80030cc:	bf00      	nop
 80030ce:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}
 80030d6:	bf00      	nop
 80030d8:	40011c00 	.word	0x40011c00
 80030dc:	58024400 	.word	0x58024400
 80030e0:	58021000 	.word	0x58021000

080030e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
     ldr   sp, =_estack      /* set stack pointer */
 80030e4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800311c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80030e8:	f7fe ff42 	bl	8001f70 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80030ec:	480c      	ldr	r0, [pc, #48]	@ (8003120 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80030ee:	490d      	ldr	r1, [pc, #52]	@ (8003124 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80030f0:	4a0d      	ldr	r2, [pc, #52]	@ (8003128 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80030f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80030f4:	e002      	b.n	80030fc <LoopCopyDataInit>

080030f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80030f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80030f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80030fa:	3304      	adds	r3, #4

080030fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80030fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80030fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003100:	d3f9      	bcc.n	80030f6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003102:	4a0a      	ldr	r2, [pc, #40]	@ (800312c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003104:	4c0a      	ldr	r4, [pc, #40]	@ (8003130 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003106:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003108:	e001      	b.n	800310e <LoopFillZerobss>

0800310a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800310a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800310c:	3204      	adds	r2, #4

0800310e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800310e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003110:	d3fb      	bcc.n	800310a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003112:	f00c fc19 	bl	800f948 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003116:	f7fd ff6f 	bl	8000ff8 <main>
  bx  lr
 800311a:	4770      	bx	lr
     ldr   sp, =_estack      /* set stack pointer */
 800311c:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8003120:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003124:	2400022c 	.word	0x2400022c
  ldr r2, =_sidata
 8003128:	080131ec 	.word	0x080131ec
  ldr r2, =_sbss
 800312c:	2400022c 	.word	0x2400022c
  ldr r4, =_ebss
 8003130:	24000e44 	.word	0x24000e44

08003134 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003134:	e7fe      	b.n	8003134 <ADC3_IRQHandler>
	...

08003138 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b082      	sub	sp, #8
 800313c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800313e:	2003      	movs	r0, #3
 8003140:	f000 f980 	bl	8003444 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003144:	f003 f8f6 	bl	8006334 <HAL_RCC_GetSysClockFreq>
 8003148:	4602      	mov	r2, r0
 800314a:	4b15      	ldr	r3, [pc, #84]	@ (80031a0 <HAL_Init+0x68>)
 800314c:	699b      	ldr	r3, [r3, #24]
 800314e:	0a1b      	lsrs	r3, r3, #8
 8003150:	f003 030f 	and.w	r3, r3, #15
 8003154:	4913      	ldr	r1, [pc, #76]	@ (80031a4 <HAL_Init+0x6c>)
 8003156:	5ccb      	ldrb	r3, [r1, r3]
 8003158:	f003 031f 	and.w	r3, r3, #31
 800315c:	fa22 f303 	lsr.w	r3, r2, r3
 8003160:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003162:	4b0f      	ldr	r3, [pc, #60]	@ (80031a0 <HAL_Init+0x68>)
 8003164:	699b      	ldr	r3, [r3, #24]
 8003166:	f003 030f 	and.w	r3, r3, #15
 800316a:	4a0e      	ldr	r2, [pc, #56]	@ (80031a4 <HAL_Init+0x6c>)
 800316c:	5cd3      	ldrb	r3, [r2, r3]
 800316e:	f003 031f 	and.w	r3, r3, #31
 8003172:	687a      	ldr	r2, [r7, #4]
 8003174:	fa22 f303 	lsr.w	r3, r2, r3
 8003178:	4a0b      	ldr	r2, [pc, #44]	@ (80031a8 <HAL_Init+0x70>)
 800317a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800317c:	4a0b      	ldr	r2, [pc, #44]	@ (80031ac <HAL_Init+0x74>)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003182:	200f      	movs	r0, #15
 8003184:	f000 f814 	bl	80031b0 <HAL_InitTick>
 8003188:	4603      	mov	r3, r0
 800318a:	2b00      	cmp	r3, #0
 800318c:	d001      	beq.n	8003192 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	e002      	b.n	8003198 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003192:	f7fe fd65 	bl	8001c60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003196:	2300      	movs	r3, #0
}
 8003198:	4618      	mov	r0, r3
 800319a:	3708      	adds	r7, #8
 800319c:	46bd      	mov	sp, r7
 800319e:	bd80      	pop	{r7, pc}
 80031a0:	58024400 	.word	0x58024400
 80031a4:	08012d4c 	.word	0x08012d4c
 80031a8:	24000024 	.word	0x24000024
 80031ac:	24000020 	.word	0x24000020

080031b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b082      	sub	sp, #8
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80031b8:	4b15      	ldr	r3, [pc, #84]	@ (8003210 <HAL_InitTick+0x60>)
 80031ba:	781b      	ldrb	r3, [r3, #0]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d101      	bne.n	80031c4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	e021      	b.n	8003208 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80031c4:	4b13      	ldr	r3, [pc, #76]	@ (8003214 <HAL_InitTick+0x64>)
 80031c6:	681a      	ldr	r2, [r3, #0]
 80031c8:	4b11      	ldr	r3, [pc, #68]	@ (8003210 <HAL_InitTick+0x60>)
 80031ca:	781b      	ldrb	r3, [r3, #0]
 80031cc:	4619      	mov	r1, r3
 80031ce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80031d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80031d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80031da:	4618      	mov	r0, r3
 80031dc:	f000 f965 	bl	80034aa <HAL_SYSTICK_Config>
 80031e0:	4603      	mov	r3, r0
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d001      	beq.n	80031ea <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	e00e      	b.n	8003208 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2b0f      	cmp	r3, #15
 80031ee:	d80a      	bhi.n	8003206 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80031f0:	2200      	movs	r2, #0
 80031f2:	6879      	ldr	r1, [r7, #4]
 80031f4:	f04f 30ff 	mov.w	r0, #4294967295
 80031f8:	f000 f92f 	bl	800345a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80031fc:	4a06      	ldr	r2, [pc, #24]	@ (8003218 <HAL_InitTick+0x68>)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003202:	2300      	movs	r3, #0
 8003204:	e000      	b.n	8003208 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8003206:	2301      	movs	r3, #1
}
 8003208:	4618      	mov	r0, r3
 800320a:	3708      	adds	r7, #8
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}
 8003210:	2400005c 	.word	0x2400005c
 8003214:	24000020 	.word	0x24000020
 8003218:	24000058 	.word	0x24000058

0800321c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800321c:	b480      	push	{r7}
 800321e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003220:	4b06      	ldr	r3, [pc, #24]	@ (800323c <HAL_IncTick+0x20>)
 8003222:	781b      	ldrb	r3, [r3, #0]
 8003224:	461a      	mov	r2, r3
 8003226:	4b06      	ldr	r3, [pc, #24]	@ (8003240 <HAL_IncTick+0x24>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4413      	add	r3, r2
 800322c:	4a04      	ldr	r2, [pc, #16]	@ (8003240 <HAL_IncTick+0x24>)
 800322e:	6013      	str	r3, [r2, #0]
}
 8003230:	bf00      	nop
 8003232:	46bd      	mov	sp, r7
 8003234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003238:	4770      	bx	lr
 800323a:	bf00      	nop
 800323c:	2400005c 	.word	0x2400005c
 8003240:	24000aec 	.word	0x24000aec

08003244 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003244:	b480      	push	{r7}
 8003246:	af00      	add	r7, sp, #0
  return uwTick;
 8003248:	4b03      	ldr	r3, [pc, #12]	@ (8003258 <HAL_GetTick+0x14>)
 800324a:	681b      	ldr	r3, [r3, #0]
}
 800324c:	4618      	mov	r0, r3
 800324e:	46bd      	mov	sp, r7
 8003250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003254:	4770      	bx	lr
 8003256:	bf00      	nop
 8003258:	24000aec 	.word	0x24000aec

0800325c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b084      	sub	sp, #16
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003264:	f7ff ffee 	bl	8003244 <HAL_GetTick>
 8003268:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003274:	d005      	beq.n	8003282 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003276:	4b0a      	ldr	r3, [pc, #40]	@ (80032a0 <HAL_Delay+0x44>)
 8003278:	781b      	ldrb	r3, [r3, #0]
 800327a:	461a      	mov	r2, r3
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	4413      	add	r3, r2
 8003280:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003282:	bf00      	nop
 8003284:	f7ff ffde 	bl	8003244 <HAL_GetTick>
 8003288:	4602      	mov	r2, r0
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	1ad3      	subs	r3, r2, r3
 800328e:	68fa      	ldr	r2, [r7, #12]
 8003290:	429a      	cmp	r2, r3
 8003292:	d8f7      	bhi.n	8003284 <HAL_Delay+0x28>
  {
  }
}
 8003294:	bf00      	nop
 8003296:	bf00      	nop
 8003298:	3710      	adds	r7, #16
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}
 800329e:	bf00      	nop
 80032a0:	2400005c 	.word	0x2400005c

080032a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b085      	sub	sp, #20
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	f003 0307 	and.w	r3, r3, #7
 80032b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80032b4:	4b0b      	ldr	r3, [pc, #44]	@ (80032e4 <__NVIC_SetPriorityGrouping+0x40>)
 80032b6:	68db      	ldr	r3, [r3, #12]
 80032b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80032ba:	68ba      	ldr	r2, [r7, #8]
 80032bc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80032c0:	4013      	ands	r3, r2
 80032c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80032cc:	4b06      	ldr	r3, [pc, #24]	@ (80032e8 <__NVIC_SetPriorityGrouping+0x44>)
 80032ce:	4313      	orrs	r3, r2
 80032d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80032d2:	4a04      	ldr	r2, [pc, #16]	@ (80032e4 <__NVIC_SetPriorityGrouping+0x40>)
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	60d3      	str	r3, [r2, #12]
}
 80032d8:	bf00      	nop
 80032da:	3714      	adds	r7, #20
 80032dc:	46bd      	mov	sp, r7
 80032de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e2:	4770      	bx	lr
 80032e4:	e000ed00 	.word	0xe000ed00
 80032e8:	05fa0000 	.word	0x05fa0000

080032ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80032ec:	b480      	push	{r7}
 80032ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80032f0:	4b04      	ldr	r3, [pc, #16]	@ (8003304 <__NVIC_GetPriorityGrouping+0x18>)
 80032f2:	68db      	ldr	r3, [r3, #12]
 80032f4:	0a1b      	lsrs	r3, r3, #8
 80032f6:	f003 0307 	and.w	r3, r3, #7
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	46bd      	mov	sp, r7
 80032fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003302:	4770      	bx	lr
 8003304:	e000ed00 	.word	0xe000ed00

08003308 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003308:	b480      	push	{r7}
 800330a:	b083      	sub	sp, #12
 800330c:	af00      	add	r7, sp, #0
 800330e:	4603      	mov	r3, r0
 8003310:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003312:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003316:	2b00      	cmp	r3, #0
 8003318:	db0b      	blt.n	8003332 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800331a:	88fb      	ldrh	r3, [r7, #6]
 800331c:	f003 021f 	and.w	r2, r3, #31
 8003320:	4907      	ldr	r1, [pc, #28]	@ (8003340 <__NVIC_EnableIRQ+0x38>)
 8003322:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003326:	095b      	lsrs	r3, r3, #5
 8003328:	2001      	movs	r0, #1
 800332a:	fa00 f202 	lsl.w	r2, r0, r2
 800332e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003332:	bf00      	nop
 8003334:	370c      	adds	r7, #12
 8003336:	46bd      	mov	sp, r7
 8003338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333c:	4770      	bx	lr
 800333e:	bf00      	nop
 8003340:	e000e100 	.word	0xe000e100

08003344 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003344:	b480      	push	{r7}
 8003346:	b083      	sub	sp, #12
 8003348:	af00      	add	r7, sp, #0
 800334a:	4603      	mov	r3, r0
 800334c:	6039      	str	r1, [r7, #0]
 800334e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003350:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003354:	2b00      	cmp	r3, #0
 8003356:	db0a      	blt.n	800336e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	b2da      	uxtb	r2, r3
 800335c:	490c      	ldr	r1, [pc, #48]	@ (8003390 <__NVIC_SetPriority+0x4c>)
 800335e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003362:	0112      	lsls	r2, r2, #4
 8003364:	b2d2      	uxtb	r2, r2
 8003366:	440b      	add	r3, r1
 8003368:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800336c:	e00a      	b.n	8003384 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	b2da      	uxtb	r2, r3
 8003372:	4908      	ldr	r1, [pc, #32]	@ (8003394 <__NVIC_SetPriority+0x50>)
 8003374:	88fb      	ldrh	r3, [r7, #6]
 8003376:	f003 030f 	and.w	r3, r3, #15
 800337a:	3b04      	subs	r3, #4
 800337c:	0112      	lsls	r2, r2, #4
 800337e:	b2d2      	uxtb	r2, r2
 8003380:	440b      	add	r3, r1
 8003382:	761a      	strb	r2, [r3, #24]
}
 8003384:	bf00      	nop
 8003386:	370c      	adds	r7, #12
 8003388:	46bd      	mov	sp, r7
 800338a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338e:	4770      	bx	lr
 8003390:	e000e100 	.word	0xe000e100
 8003394:	e000ed00 	.word	0xe000ed00

08003398 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003398:	b480      	push	{r7}
 800339a:	b089      	sub	sp, #36	@ 0x24
 800339c:	af00      	add	r7, sp, #0
 800339e:	60f8      	str	r0, [r7, #12]
 80033a0:	60b9      	str	r1, [r7, #8]
 80033a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	f003 0307 	and.w	r3, r3, #7
 80033aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033ac:	69fb      	ldr	r3, [r7, #28]
 80033ae:	f1c3 0307 	rsb	r3, r3, #7
 80033b2:	2b04      	cmp	r3, #4
 80033b4:	bf28      	it	cs
 80033b6:	2304      	movcs	r3, #4
 80033b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033ba:	69fb      	ldr	r3, [r7, #28]
 80033bc:	3304      	adds	r3, #4
 80033be:	2b06      	cmp	r3, #6
 80033c0:	d902      	bls.n	80033c8 <NVIC_EncodePriority+0x30>
 80033c2:	69fb      	ldr	r3, [r7, #28]
 80033c4:	3b03      	subs	r3, #3
 80033c6:	e000      	b.n	80033ca <NVIC_EncodePriority+0x32>
 80033c8:	2300      	movs	r3, #0
 80033ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033cc:	f04f 32ff 	mov.w	r2, #4294967295
 80033d0:	69bb      	ldr	r3, [r7, #24]
 80033d2:	fa02 f303 	lsl.w	r3, r2, r3
 80033d6:	43da      	mvns	r2, r3
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	401a      	ands	r2, r3
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80033e0:	f04f 31ff 	mov.w	r1, #4294967295
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	fa01 f303 	lsl.w	r3, r1, r3
 80033ea:	43d9      	mvns	r1, r3
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033f0:	4313      	orrs	r3, r2
         );
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	3724      	adds	r7, #36	@ 0x24
 80033f6:	46bd      	mov	sp, r7
 80033f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fc:	4770      	bx	lr
	...

08003400 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b082      	sub	sp, #8
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	3b01      	subs	r3, #1
 800340c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003410:	d301      	bcc.n	8003416 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003412:	2301      	movs	r3, #1
 8003414:	e00f      	b.n	8003436 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003416:	4a0a      	ldr	r2, [pc, #40]	@ (8003440 <SysTick_Config+0x40>)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	3b01      	subs	r3, #1
 800341c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800341e:	210f      	movs	r1, #15
 8003420:	f04f 30ff 	mov.w	r0, #4294967295
 8003424:	f7ff ff8e 	bl	8003344 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003428:	4b05      	ldr	r3, [pc, #20]	@ (8003440 <SysTick_Config+0x40>)
 800342a:	2200      	movs	r2, #0
 800342c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800342e:	4b04      	ldr	r3, [pc, #16]	@ (8003440 <SysTick_Config+0x40>)
 8003430:	2207      	movs	r2, #7
 8003432:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003434:	2300      	movs	r3, #0
}
 8003436:	4618      	mov	r0, r3
 8003438:	3708      	adds	r7, #8
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}
 800343e:	bf00      	nop
 8003440:	e000e010 	.word	0xe000e010

08003444 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b082      	sub	sp, #8
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800344c:	6878      	ldr	r0, [r7, #4]
 800344e:	f7ff ff29 	bl	80032a4 <__NVIC_SetPriorityGrouping>
}
 8003452:	bf00      	nop
 8003454:	3708      	adds	r7, #8
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}

0800345a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800345a:	b580      	push	{r7, lr}
 800345c:	b086      	sub	sp, #24
 800345e:	af00      	add	r7, sp, #0
 8003460:	4603      	mov	r3, r0
 8003462:	60b9      	str	r1, [r7, #8]
 8003464:	607a      	str	r2, [r7, #4]
 8003466:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003468:	f7ff ff40 	bl	80032ec <__NVIC_GetPriorityGrouping>
 800346c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800346e:	687a      	ldr	r2, [r7, #4]
 8003470:	68b9      	ldr	r1, [r7, #8]
 8003472:	6978      	ldr	r0, [r7, #20]
 8003474:	f7ff ff90 	bl	8003398 <NVIC_EncodePriority>
 8003478:	4602      	mov	r2, r0
 800347a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800347e:	4611      	mov	r1, r2
 8003480:	4618      	mov	r0, r3
 8003482:	f7ff ff5f 	bl	8003344 <__NVIC_SetPriority>
}
 8003486:	bf00      	nop
 8003488:	3718      	adds	r7, #24
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}

0800348e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800348e:	b580      	push	{r7, lr}
 8003490:	b082      	sub	sp, #8
 8003492:	af00      	add	r7, sp, #0
 8003494:	4603      	mov	r3, r0
 8003496:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003498:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800349c:	4618      	mov	r0, r3
 800349e:	f7ff ff33 	bl	8003308 <__NVIC_EnableIRQ>
}
 80034a2:	bf00      	nop
 80034a4:	3708      	adds	r7, #8
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}

080034aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80034aa:	b580      	push	{r7, lr}
 80034ac:	b082      	sub	sp, #8
 80034ae:	af00      	add	r7, sp, #0
 80034b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f7ff ffa4 	bl	8003400 <SysTick_Config>
 80034b8:	4603      	mov	r3, r0
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	3708      	adds	r7, #8
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}
	...

080034c4 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80034c4:	b480      	push	{r7}
 80034c6:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80034c8:	f3bf 8f5f 	dmb	sy
}
 80034cc:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80034ce:	4b07      	ldr	r3, [pc, #28]	@ (80034ec <HAL_MPU_Disable+0x28>)
 80034d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034d2:	4a06      	ldr	r2, [pc, #24]	@ (80034ec <HAL_MPU_Disable+0x28>)
 80034d4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80034d8:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80034da:	4b05      	ldr	r3, [pc, #20]	@ (80034f0 <HAL_MPU_Disable+0x2c>)
 80034dc:	2200      	movs	r2, #0
 80034de:	605a      	str	r2, [r3, #4]
}
 80034e0:	bf00      	nop
 80034e2:	46bd      	mov	sp, r7
 80034e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e8:	4770      	bx	lr
 80034ea:	bf00      	nop
 80034ec:	e000ed00 	.word	0xe000ed00
 80034f0:	e000ed90 	.word	0xe000ed90

080034f4 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b083      	sub	sp, #12
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80034fc:	4a0b      	ldr	r2, [pc, #44]	@ (800352c <HAL_MPU_Enable+0x38>)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	f043 0301 	orr.w	r3, r3, #1
 8003504:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8003506:	4b0a      	ldr	r3, [pc, #40]	@ (8003530 <HAL_MPU_Enable+0x3c>)
 8003508:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800350a:	4a09      	ldr	r2, [pc, #36]	@ (8003530 <HAL_MPU_Enable+0x3c>)
 800350c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003510:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8003512:	f3bf 8f4f 	dsb	sy
}
 8003516:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003518:	f3bf 8f6f 	isb	sy
}
 800351c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800351e:	bf00      	nop
 8003520:	370c      	adds	r7, #12
 8003522:	46bd      	mov	sp, r7
 8003524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003528:	4770      	bx	lr
 800352a:	bf00      	nop
 800352c:	e000ed90 	.word	0xe000ed90
 8003530:	e000ed00 	.word	0xe000ed00

08003534 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8003534:	b480      	push	{r7}
 8003536:	b083      	sub	sp, #12
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	785a      	ldrb	r2, [r3, #1]
 8003540:	4b1b      	ldr	r3, [pc, #108]	@ (80035b0 <HAL_MPU_ConfigRegion+0x7c>)
 8003542:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8003544:	4b1a      	ldr	r3, [pc, #104]	@ (80035b0 <HAL_MPU_ConfigRegion+0x7c>)
 8003546:	691b      	ldr	r3, [r3, #16]
 8003548:	4a19      	ldr	r2, [pc, #100]	@ (80035b0 <HAL_MPU_ConfigRegion+0x7c>)
 800354a:	f023 0301 	bic.w	r3, r3, #1
 800354e:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8003550:	4a17      	ldr	r2, [pc, #92]	@ (80035b0 <HAL_MPU_ConfigRegion+0x7c>)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	7b1b      	ldrb	r3, [r3, #12]
 800355c:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	7adb      	ldrb	r3, [r3, #11]
 8003562:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003564:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	7a9b      	ldrb	r3, [r3, #10]
 800356a:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800356c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	7b5b      	ldrb	r3, [r3, #13]
 8003572:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003574:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	7b9b      	ldrb	r3, [r3, #14]
 800357a:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800357c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	7bdb      	ldrb	r3, [r3, #15]
 8003582:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003584:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	7a5b      	ldrb	r3, [r3, #9]
 800358a:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800358c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	7a1b      	ldrb	r3, [r3, #8]
 8003592:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003594:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8003596:	687a      	ldr	r2, [r7, #4]
 8003598:	7812      	ldrb	r2, [r2, #0]
 800359a:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800359c:	4a04      	ldr	r2, [pc, #16]	@ (80035b0 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800359e:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80035a0:	6113      	str	r3, [r2, #16]
}
 80035a2:	bf00      	nop
 80035a4:	370c      	adds	r7, #12
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr
 80035ae:	bf00      	nop
 80035b0:	e000ed90 	.word	0xe000ed90

080035b4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b086      	sub	sp, #24
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80035bc:	f7ff fe42 	bl	8003244 <HAL_GetTick>
 80035c0:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d101      	bne.n	80035cc <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	e2dc      	b.n	8003b86 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80035d2:	b2db      	uxtb	r3, r3
 80035d4:	2b02      	cmp	r3, #2
 80035d6:	d008      	beq.n	80035ea <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2280      	movs	r2, #128	@ 0x80
 80035dc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2200      	movs	r2, #0
 80035e2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	e2cd      	b.n	8003b86 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a76      	ldr	r2, [pc, #472]	@ (80037c8 <HAL_DMA_Abort+0x214>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d04a      	beq.n	800368a <HAL_DMA_Abort+0xd6>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a74      	ldr	r2, [pc, #464]	@ (80037cc <HAL_DMA_Abort+0x218>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d045      	beq.n	800368a <HAL_DMA_Abort+0xd6>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a73      	ldr	r2, [pc, #460]	@ (80037d0 <HAL_DMA_Abort+0x21c>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d040      	beq.n	800368a <HAL_DMA_Abort+0xd6>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a71      	ldr	r2, [pc, #452]	@ (80037d4 <HAL_DMA_Abort+0x220>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d03b      	beq.n	800368a <HAL_DMA_Abort+0xd6>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a70      	ldr	r2, [pc, #448]	@ (80037d8 <HAL_DMA_Abort+0x224>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d036      	beq.n	800368a <HAL_DMA_Abort+0xd6>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a6e      	ldr	r2, [pc, #440]	@ (80037dc <HAL_DMA_Abort+0x228>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d031      	beq.n	800368a <HAL_DMA_Abort+0xd6>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a6d      	ldr	r2, [pc, #436]	@ (80037e0 <HAL_DMA_Abort+0x22c>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d02c      	beq.n	800368a <HAL_DMA_Abort+0xd6>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a6b      	ldr	r2, [pc, #428]	@ (80037e4 <HAL_DMA_Abort+0x230>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d027      	beq.n	800368a <HAL_DMA_Abort+0xd6>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a6a      	ldr	r2, [pc, #424]	@ (80037e8 <HAL_DMA_Abort+0x234>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d022      	beq.n	800368a <HAL_DMA_Abort+0xd6>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a68      	ldr	r2, [pc, #416]	@ (80037ec <HAL_DMA_Abort+0x238>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d01d      	beq.n	800368a <HAL_DMA_Abort+0xd6>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a67      	ldr	r2, [pc, #412]	@ (80037f0 <HAL_DMA_Abort+0x23c>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d018      	beq.n	800368a <HAL_DMA_Abort+0xd6>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a65      	ldr	r2, [pc, #404]	@ (80037f4 <HAL_DMA_Abort+0x240>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d013      	beq.n	800368a <HAL_DMA_Abort+0xd6>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a64      	ldr	r2, [pc, #400]	@ (80037f8 <HAL_DMA_Abort+0x244>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d00e      	beq.n	800368a <HAL_DMA_Abort+0xd6>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a62      	ldr	r2, [pc, #392]	@ (80037fc <HAL_DMA_Abort+0x248>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d009      	beq.n	800368a <HAL_DMA_Abort+0xd6>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a61      	ldr	r2, [pc, #388]	@ (8003800 <HAL_DMA_Abort+0x24c>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d004      	beq.n	800368a <HAL_DMA_Abort+0xd6>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a5f      	ldr	r2, [pc, #380]	@ (8003804 <HAL_DMA_Abort+0x250>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d101      	bne.n	800368e <HAL_DMA_Abort+0xda>
 800368a:	2301      	movs	r3, #1
 800368c:	e000      	b.n	8003690 <HAL_DMA_Abort+0xdc>
 800368e:	2300      	movs	r3, #0
 8003690:	2b00      	cmp	r3, #0
 8003692:	d013      	beq.n	80036bc <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	681a      	ldr	r2, [r3, #0]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f022 021e 	bic.w	r2, r2, #30
 80036a2:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	695a      	ldr	r2, [r3, #20]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80036b2:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	617b      	str	r3, [r7, #20]
 80036ba:	e00a      	b.n	80036d2 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f022 020e 	bic.w	r2, r2, #14
 80036ca:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a3c      	ldr	r2, [pc, #240]	@ (80037c8 <HAL_DMA_Abort+0x214>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d072      	beq.n	80037c2 <HAL_DMA_Abort+0x20e>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a3a      	ldr	r2, [pc, #232]	@ (80037cc <HAL_DMA_Abort+0x218>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d06d      	beq.n	80037c2 <HAL_DMA_Abort+0x20e>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a39      	ldr	r2, [pc, #228]	@ (80037d0 <HAL_DMA_Abort+0x21c>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d068      	beq.n	80037c2 <HAL_DMA_Abort+0x20e>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a37      	ldr	r2, [pc, #220]	@ (80037d4 <HAL_DMA_Abort+0x220>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d063      	beq.n	80037c2 <HAL_DMA_Abort+0x20e>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a36      	ldr	r2, [pc, #216]	@ (80037d8 <HAL_DMA_Abort+0x224>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d05e      	beq.n	80037c2 <HAL_DMA_Abort+0x20e>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a34      	ldr	r2, [pc, #208]	@ (80037dc <HAL_DMA_Abort+0x228>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d059      	beq.n	80037c2 <HAL_DMA_Abort+0x20e>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a33      	ldr	r2, [pc, #204]	@ (80037e0 <HAL_DMA_Abort+0x22c>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d054      	beq.n	80037c2 <HAL_DMA_Abort+0x20e>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a31      	ldr	r2, [pc, #196]	@ (80037e4 <HAL_DMA_Abort+0x230>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d04f      	beq.n	80037c2 <HAL_DMA_Abort+0x20e>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a30      	ldr	r2, [pc, #192]	@ (80037e8 <HAL_DMA_Abort+0x234>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d04a      	beq.n	80037c2 <HAL_DMA_Abort+0x20e>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a2e      	ldr	r2, [pc, #184]	@ (80037ec <HAL_DMA_Abort+0x238>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d045      	beq.n	80037c2 <HAL_DMA_Abort+0x20e>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a2d      	ldr	r2, [pc, #180]	@ (80037f0 <HAL_DMA_Abort+0x23c>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d040      	beq.n	80037c2 <HAL_DMA_Abort+0x20e>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a2b      	ldr	r2, [pc, #172]	@ (80037f4 <HAL_DMA_Abort+0x240>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d03b      	beq.n	80037c2 <HAL_DMA_Abort+0x20e>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a2a      	ldr	r2, [pc, #168]	@ (80037f8 <HAL_DMA_Abort+0x244>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d036      	beq.n	80037c2 <HAL_DMA_Abort+0x20e>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a28      	ldr	r2, [pc, #160]	@ (80037fc <HAL_DMA_Abort+0x248>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d031      	beq.n	80037c2 <HAL_DMA_Abort+0x20e>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a27      	ldr	r2, [pc, #156]	@ (8003800 <HAL_DMA_Abort+0x24c>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d02c      	beq.n	80037c2 <HAL_DMA_Abort+0x20e>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a25      	ldr	r2, [pc, #148]	@ (8003804 <HAL_DMA_Abort+0x250>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d027      	beq.n	80037c2 <HAL_DMA_Abort+0x20e>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a24      	ldr	r2, [pc, #144]	@ (8003808 <HAL_DMA_Abort+0x254>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d022      	beq.n	80037c2 <HAL_DMA_Abort+0x20e>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a22      	ldr	r2, [pc, #136]	@ (800380c <HAL_DMA_Abort+0x258>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d01d      	beq.n	80037c2 <HAL_DMA_Abort+0x20e>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a21      	ldr	r2, [pc, #132]	@ (8003810 <HAL_DMA_Abort+0x25c>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d018      	beq.n	80037c2 <HAL_DMA_Abort+0x20e>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a1f      	ldr	r2, [pc, #124]	@ (8003814 <HAL_DMA_Abort+0x260>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d013      	beq.n	80037c2 <HAL_DMA_Abort+0x20e>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a1e      	ldr	r2, [pc, #120]	@ (8003818 <HAL_DMA_Abort+0x264>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d00e      	beq.n	80037c2 <HAL_DMA_Abort+0x20e>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a1c      	ldr	r2, [pc, #112]	@ (800381c <HAL_DMA_Abort+0x268>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d009      	beq.n	80037c2 <HAL_DMA_Abort+0x20e>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a1b      	ldr	r2, [pc, #108]	@ (8003820 <HAL_DMA_Abort+0x26c>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d004      	beq.n	80037c2 <HAL_DMA_Abort+0x20e>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a19      	ldr	r2, [pc, #100]	@ (8003824 <HAL_DMA_Abort+0x270>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d132      	bne.n	8003828 <HAL_DMA_Abort+0x274>
 80037c2:	2301      	movs	r3, #1
 80037c4:	e031      	b.n	800382a <HAL_DMA_Abort+0x276>
 80037c6:	bf00      	nop
 80037c8:	40020010 	.word	0x40020010
 80037cc:	40020028 	.word	0x40020028
 80037d0:	40020040 	.word	0x40020040
 80037d4:	40020058 	.word	0x40020058
 80037d8:	40020070 	.word	0x40020070
 80037dc:	40020088 	.word	0x40020088
 80037e0:	400200a0 	.word	0x400200a0
 80037e4:	400200b8 	.word	0x400200b8
 80037e8:	40020410 	.word	0x40020410
 80037ec:	40020428 	.word	0x40020428
 80037f0:	40020440 	.word	0x40020440
 80037f4:	40020458 	.word	0x40020458
 80037f8:	40020470 	.word	0x40020470
 80037fc:	40020488 	.word	0x40020488
 8003800:	400204a0 	.word	0x400204a0
 8003804:	400204b8 	.word	0x400204b8
 8003808:	58025408 	.word	0x58025408
 800380c:	5802541c 	.word	0x5802541c
 8003810:	58025430 	.word	0x58025430
 8003814:	58025444 	.word	0x58025444
 8003818:	58025458 	.word	0x58025458
 800381c:	5802546c 	.word	0x5802546c
 8003820:	58025480 	.word	0x58025480
 8003824:	58025494 	.word	0x58025494
 8003828:	2300      	movs	r3, #0
 800382a:	2b00      	cmp	r3, #0
 800382c:	d007      	beq.n	800383e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003832:	681a      	ldr	r2, [r3, #0]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003838:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800383c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a6d      	ldr	r2, [pc, #436]	@ (80039f8 <HAL_DMA_Abort+0x444>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d04a      	beq.n	80038de <HAL_DMA_Abort+0x32a>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a6b      	ldr	r2, [pc, #428]	@ (80039fc <HAL_DMA_Abort+0x448>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d045      	beq.n	80038de <HAL_DMA_Abort+0x32a>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a6a      	ldr	r2, [pc, #424]	@ (8003a00 <HAL_DMA_Abort+0x44c>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d040      	beq.n	80038de <HAL_DMA_Abort+0x32a>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a68      	ldr	r2, [pc, #416]	@ (8003a04 <HAL_DMA_Abort+0x450>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d03b      	beq.n	80038de <HAL_DMA_Abort+0x32a>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a67      	ldr	r2, [pc, #412]	@ (8003a08 <HAL_DMA_Abort+0x454>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d036      	beq.n	80038de <HAL_DMA_Abort+0x32a>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a65      	ldr	r2, [pc, #404]	@ (8003a0c <HAL_DMA_Abort+0x458>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d031      	beq.n	80038de <HAL_DMA_Abort+0x32a>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a64      	ldr	r2, [pc, #400]	@ (8003a10 <HAL_DMA_Abort+0x45c>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d02c      	beq.n	80038de <HAL_DMA_Abort+0x32a>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a62      	ldr	r2, [pc, #392]	@ (8003a14 <HAL_DMA_Abort+0x460>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d027      	beq.n	80038de <HAL_DMA_Abort+0x32a>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a61      	ldr	r2, [pc, #388]	@ (8003a18 <HAL_DMA_Abort+0x464>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d022      	beq.n	80038de <HAL_DMA_Abort+0x32a>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a5f      	ldr	r2, [pc, #380]	@ (8003a1c <HAL_DMA_Abort+0x468>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d01d      	beq.n	80038de <HAL_DMA_Abort+0x32a>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a5e      	ldr	r2, [pc, #376]	@ (8003a20 <HAL_DMA_Abort+0x46c>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d018      	beq.n	80038de <HAL_DMA_Abort+0x32a>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a5c      	ldr	r2, [pc, #368]	@ (8003a24 <HAL_DMA_Abort+0x470>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d013      	beq.n	80038de <HAL_DMA_Abort+0x32a>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a5b      	ldr	r2, [pc, #364]	@ (8003a28 <HAL_DMA_Abort+0x474>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d00e      	beq.n	80038de <HAL_DMA_Abort+0x32a>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a59      	ldr	r2, [pc, #356]	@ (8003a2c <HAL_DMA_Abort+0x478>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d009      	beq.n	80038de <HAL_DMA_Abort+0x32a>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a58      	ldr	r2, [pc, #352]	@ (8003a30 <HAL_DMA_Abort+0x47c>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d004      	beq.n	80038de <HAL_DMA_Abort+0x32a>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a56      	ldr	r2, [pc, #344]	@ (8003a34 <HAL_DMA_Abort+0x480>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d108      	bne.n	80038f0 <HAL_DMA_Abort+0x33c>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	681a      	ldr	r2, [r3, #0]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f022 0201 	bic.w	r2, r2, #1
 80038ec:	601a      	str	r2, [r3, #0]
 80038ee:	e007      	b.n	8003900 <HAL_DMA_Abort+0x34c>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f022 0201 	bic.w	r2, r2, #1
 80038fe:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003900:	e013      	b.n	800392a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003902:	f7ff fc9f 	bl	8003244 <HAL_GetTick>
 8003906:	4602      	mov	r2, r0
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	1ad3      	subs	r3, r2, r3
 800390c:	2b05      	cmp	r3, #5
 800390e:	d90c      	bls.n	800392a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2220      	movs	r2, #32
 8003914:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2203      	movs	r2, #3
 800391a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2200      	movs	r2, #0
 8003922:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	e12d      	b.n	8003b86 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f003 0301 	and.w	r3, r3, #1
 8003932:	2b00      	cmp	r3, #0
 8003934:	d1e5      	bne.n	8003902 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a2f      	ldr	r2, [pc, #188]	@ (80039f8 <HAL_DMA_Abort+0x444>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d04a      	beq.n	80039d6 <HAL_DMA_Abort+0x422>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a2d      	ldr	r2, [pc, #180]	@ (80039fc <HAL_DMA_Abort+0x448>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d045      	beq.n	80039d6 <HAL_DMA_Abort+0x422>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a2c      	ldr	r2, [pc, #176]	@ (8003a00 <HAL_DMA_Abort+0x44c>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d040      	beq.n	80039d6 <HAL_DMA_Abort+0x422>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a2a      	ldr	r2, [pc, #168]	@ (8003a04 <HAL_DMA_Abort+0x450>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d03b      	beq.n	80039d6 <HAL_DMA_Abort+0x422>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a29      	ldr	r2, [pc, #164]	@ (8003a08 <HAL_DMA_Abort+0x454>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d036      	beq.n	80039d6 <HAL_DMA_Abort+0x422>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a27      	ldr	r2, [pc, #156]	@ (8003a0c <HAL_DMA_Abort+0x458>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d031      	beq.n	80039d6 <HAL_DMA_Abort+0x422>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a26      	ldr	r2, [pc, #152]	@ (8003a10 <HAL_DMA_Abort+0x45c>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d02c      	beq.n	80039d6 <HAL_DMA_Abort+0x422>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a24      	ldr	r2, [pc, #144]	@ (8003a14 <HAL_DMA_Abort+0x460>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d027      	beq.n	80039d6 <HAL_DMA_Abort+0x422>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a23      	ldr	r2, [pc, #140]	@ (8003a18 <HAL_DMA_Abort+0x464>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d022      	beq.n	80039d6 <HAL_DMA_Abort+0x422>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a21      	ldr	r2, [pc, #132]	@ (8003a1c <HAL_DMA_Abort+0x468>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d01d      	beq.n	80039d6 <HAL_DMA_Abort+0x422>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a20      	ldr	r2, [pc, #128]	@ (8003a20 <HAL_DMA_Abort+0x46c>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d018      	beq.n	80039d6 <HAL_DMA_Abort+0x422>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a1e      	ldr	r2, [pc, #120]	@ (8003a24 <HAL_DMA_Abort+0x470>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d013      	beq.n	80039d6 <HAL_DMA_Abort+0x422>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a1d      	ldr	r2, [pc, #116]	@ (8003a28 <HAL_DMA_Abort+0x474>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d00e      	beq.n	80039d6 <HAL_DMA_Abort+0x422>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a1b      	ldr	r2, [pc, #108]	@ (8003a2c <HAL_DMA_Abort+0x478>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d009      	beq.n	80039d6 <HAL_DMA_Abort+0x422>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a1a      	ldr	r2, [pc, #104]	@ (8003a30 <HAL_DMA_Abort+0x47c>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d004      	beq.n	80039d6 <HAL_DMA_Abort+0x422>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a18      	ldr	r2, [pc, #96]	@ (8003a34 <HAL_DMA_Abort+0x480>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d101      	bne.n	80039da <HAL_DMA_Abort+0x426>
 80039d6:	2301      	movs	r3, #1
 80039d8:	e000      	b.n	80039dc <HAL_DMA_Abort+0x428>
 80039da:	2300      	movs	r3, #0
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d02b      	beq.n	8003a38 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039e4:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039ea:	f003 031f 	and.w	r3, r3, #31
 80039ee:	223f      	movs	r2, #63	@ 0x3f
 80039f0:	409a      	lsls	r2, r3
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	609a      	str	r2, [r3, #8]
 80039f6:	e02a      	b.n	8003a4e <HAL_DMA_Abort+0x49a>
 80039f8:	40020010 	.word	0x40020010
 80039fc:	40020028 	.word	0x40020028
 8003a00:	40020040 	.word	0x40020040
 8003a04:	40020058 	.word	0x40020058
 8003a08:	40020070 	.word	0x40020070
 8003a0c:	40020088 	.word	0x40020088
 8003a10:	400200a0 	.word	0x400200a0
 8003a14:	400200b8 	.word	0x400200b8
 8003a18:	40020410 	.word	0x40020410
 8003a1c:	40020428 	.word	0x40020428
 8003a20:	40020440 	.word	0x40020440
 8003a24:	40020458 	.word	0x40020458
 8003a28:	40020470 	.word	0x40020470
 8003a2c:	40020488 	.word	0x40020488
 8003a30:	400204a0 	.word	0x400204a0
 8003a34:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a3c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a42:	f003 031f 	and.w	r3, r3, #31
 8003a46:	2201      	movs	r2, #1
 8003a48:	409a      	lsls	r2, r3
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a4f      	ldr	r2, [pc, #316]	@ (8003b90 <HAL_DMA_Abort+0x5dc>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d072      	beq.n	8003b3e <HAL_DMA_Abort+0x58a>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a4d      	ldr	r2, [pc, #308]	@ (8003b94 <HAL_DMA_Abort+0x5e0>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d06d      	beq.n	8003b3e <HAL_DMA_Abort+0x58a>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a4c      	ldr	r2, [pc, #304]	@ (8003b98 <HAL_DMA_Abort+0x5e4>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d068      	beq.n	8003b3e <HAL_DMA_Abort+0x58a>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a4a      	ldr	r2, [pc, #296]	@ (8003b9c <HAL_DMA_Abort+0x5e8>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d063      	beq.n	8003b3e <HAL_DMA_Abort+0x58a>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a49      	ldr	r2, [pc, #292]	@ (8003ba0 <HAL_DMA_Abort+0x5ec>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d05e      	beq.n	8003b3e <HAL_DMA_Abort+0x58a>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a47      	ldr	r2, [pc, #284]	@ (8003ba4 <HAL_DMA_Abort+0x5f0>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d059      	beq.n	8003b3e <HAL_DMA_Abort+0x58a>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a46      	ldr	r2, [pc, #280]	@ (8003ba8 <HAL_DMA_Abort+0x5f4>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d054      	beq.n	8003b3e <HAL_DMA_Abort+0x58a>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a44      	ldr	r2, [pc, #272]	@ (8003bac <HAL_DMA_Abort+0x5f8>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d04f      	beq.n	8003b3e <HAL_DMA_Abort+0x58a>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a43      	ldr	r2, [pc, #268]	@ (8003bb0 <HAL_DMA_Abort+0x5fc>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d04a      	beq.n	8003b3e <HAL_DMA_Abort+0x58a>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a41      	ldr	r2, [pc, #260]	@ (8003bb4 <HAL_DMA_Abort+0x600>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d045      	beq.n	8003b3e <HAL_DMA_Abort+0x58a>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a40      	ldr	r2, [pc, #256]	@ (8003bb8 <HAL_DMA_Abort+0x604>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d040      	beq.n	8003b3e <HAL_DMA_Abort+0x58a>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a3e      	ldr	r2, [pc, #248]	@ (8003bbc <HAL_DMA_Abort+0x608>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d03b      	beq.n	8003b3e <HAL_DMA_Abort+0x58a>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a3d      	ldr	r2, [pc, #244]	@ (8003bc0 <HAL_DMA_Abort+0x60c>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d036      	beq.n	8003b3e <HAL_DMA_Abort+0x58a>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a3b      	ldr	r2, [pc, #236]	@ (8003bc4 <HAL_DMA_Abort+0x610>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d031      	beq.n	8003b3e <HAL_DMA_Abort+0x58a>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a3a      	ldr	r2, [pc, #232]	@ (8003bc8 <HAL_DMA_Abort+0x614>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d02c      	beq.n	8003b3e <HAL_DMA_Abort+0x58a>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a38      	ldr	r2, [pc, #224]	@ (8003bcc <HAL_DMA_Abort+0x618>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d027      	beq.n	8003b3e <HAL_DMA_Abort+0x58a>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a37      	ldr	r2, [pc, #220]	@ (8003bd0 <HAL_DMA_Abort+0x61c>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d022      	beq.n	8003b3e <HAL_DMA_Abort+0x58a>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a35      	ldr	r2, [pc, #212]	@ (8003bd4 <HAL_DMA_Abort+0x620>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d01d      	beq.n	8003b3e <HAL_DMA_Abort+0x58a>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a34      	ldr	r2, [pc, #208]	@ (8003bd8 <HAL_DMA_Abort+0x624>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d018      	beq.n	8003b3e <HAL_DMA_Abort+0x58a>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a32      	ldr	r2, [pc, #200]	@ (8003bdc <HAL_DMA_Abort+0x628>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d013      	beq.n	8003b3e <HAL_DMA_Abort+0x58a>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a31      	ldr	r2, [pc, #196]	@ (8003be0 <HAL_DMA_Abort+0x62c>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d00e      	beq.n	8003b3e <HAL_DMA_Abort+0x58a>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a2f      	ldr	r2, [pc, #188]	@ (8003be4 <HAL_DMA_Abort+0x630>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d009      	beq.n	8003b3e <HAL_DMA_Abort+0x58a>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a2e      	ldr	r2, [pc, #184]	@ (8003be8 <HAL_DMA_Abort+0x634>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d004      	beq.n	8003b3e <HAL_DMA_Abort+0x58a>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a2c      	ldr	r2, [pc, #176]	@ (8003bec <HAL_DMA_Abort+0x638>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d101      	bne.n	8003b42 <HAL_DMA_Abort+0x58e>
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e000      	b.n	8003b44 <HAL_DMA_Abort+0x590>
 8003b42:	2300      	movs	r3, #0
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d015      	beq.n	8003b74 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003b4c:	687a      	ldr	r2, [r7, #4]
 8003b4e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003b50:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d00c      	beq.n	8003b74 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b5e:	681a      	ldr	r2, [r3, #0]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b64:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003b68:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b6e:	687a      	ldr	r2, [r7, #4]
 8003b70:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003b72:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2201      	movs	r2, #1
 8003b78:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8003b84:	2300      	movs	r3, #0
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	3718      	adds	r7, #24
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}
 8003b8e:	bf00      	nop
 8003b90:	40020010 	.word	0x40020010
 8003b94:	40020028 	.word	0x40020028
 8003b98:	40020040 	.word	0x40020040
 8003b9c:	40020058 	.word	0x40020058
 8003ba0:	40020070 	.word	0x40020070
 8003ba4:	40020088 	.word	0x40020088
 8003ba8:	400200a0 	.word	0x400200a0
 8003bac:	400200b8 	.word	0x400200b8
 8003bb0:	40020410 	.word	0x40020410
 8003bb4:	40020428 	.word	0x40020428
 8003bb8:	40020440 	.word	0x40020440
 8003bbc:	40020458 	.word	0x40020458
 8003bc0:	40020470 	.word	0x40020470
 8003bc4:	40020488 	.word	0x40020488
 8003bc8:	400204a0 	.word	0x400204a0
 8003bcc:	400204b8 	.word	0x400204b8
 8003bd0:	58025408 	.word	0x58025408
 8003bd4:	5802541c 	.word	0x5802541c
 8003bd8:	58025430 	.word	0x58025430
 8003bdc:	58025444 	.word	0x58025444
 8003be0:	58025458 	.word	0x58025458
 8003be4:	5802546c 	.word	0x5802546c
 8003be8:	58025480 	.word	0x58025480
 8003bec:	58025494 	.word	0x58025494

08003bf0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b084      	sub	sp, #16
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d101      	bne.n	8003c02 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	e237      	b.n	8004072 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003c08:	b2db      	uxtb	r3, r3
 8003c0a:	2b02      	cmp	r3, #2
 8003c0c:	d004      	beq.n	8003c18 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2280      	movs	r2, #128	@ 0x80
 8003c12:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003c14:	2301      	movs	r3, #1
 8003c16:	e22c      	b.n	8004072 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a5c      	ldr	r2, [pc, #368]	@ (8003d90 <HAL_DMA_Abort_IT+0x1a0>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d04a      	beq.n	8003cb8 <HAL_DMA_Abort_IT+0xc8>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a5b      	ldr	r2, [pc, #364]	@ (8003d94 <HAL_DMA_Abort_IT+0x1a4>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d045      	beq.n	8003cb8 <HAL_DMA_Abort_IT+0xc8>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a59      	ldr	r2, [pc, #356]	@ (8003d98 <HAL_DMA_Abort_IT+0x1a8>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d040      	beq.n	8003cb8 <HAL_DMA_Abort_IT+0xc8>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a58      	ldr	r2, [pc, #352]	@ (8003d9c <HAL_DMA_Abort_IT+0x1ac>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d03b      	beq.n	8003cb8 <HAL_DMA_Abort_IT+0xc8>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a56      	ldr	r2, [pc, #344]	@ (8003da0 <HAL_DMA_Abort_IT+0x1b0>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d036      	beq.n	8003cb8 <HAL_DMA_Abort_IT+0xc8>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a55      	ldr	r2, [pc, #340]	@ (8003da4 <HAL_DMA_Abort_IT+0x1b4>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d031      	beq.n	8003cb8 <HAL_DMA_Abort_IT+0xc8>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a53      	ldr	r2, [pc, #332]	@ (8003da8 <HAL_DMA_Abort_IT+0x1b8>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d02c      	beq.n	8003cb8 <HAL_DMA_Abort_IT+0xc8>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a52      	ldr	r2, [pc, #328]	@ (8003dac <HAL_DMA_Abort_IT+0x1bc>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d027      	beq.n	8003cb8 <HAL_DMA_Abort_IT+0xc8>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a50      	ldr	r2, [pc, #320]	@ (8003db0 <HAL_DMA_Abort_IT+0x1c0>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d022      	beq.n	8003cb8 <HAL_DMA_Abort_IT+0xc8>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a4f      	ldr	r2, [pc, #316]	@ (8003db4 <HAL_DMA_Abort_IT+0x1c4>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d01d      	beq.n	8003cb8 <HAL_DMA_Abort_IT+0xc8>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a4d      	ldr	r2, [pc, #308]	@ (8003db8 <HAL_DMA_Abort_IT+0x1c8>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d018      	beq.n	8003cb8 <HAL_DMA_Abort_IT+0xc8>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a4c      	ldr	r2, [pc, #304]	@ (8003dbc <HAL_DMA_Abort_IT+0x1cc>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d013      	beq.n	8003cb8 <HAL_DMA_Abort_IT+0xc8>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a4a      	ldr	r2, [pc, #296]	@ (8003dc0 <HAL_DMA_Abort_IT+0x1d0>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d00e      	beq.n	8003cb8 <HAL_DMA_Abort_IT+0xc8>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a49      	ldr	r2, [pc, #292]	@ (8003dc4 <HAL_DMA_Abort_IT+0x1d4>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d009      	beq.n	8003cb8 <HAL_DMA_Abort_IT+0xc8>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a47      	ldr	r2, [pc, #284]	@ (8003dc8 <HAL_DMA_Abort_IT+0x1d8>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d004      	beq.n	8003cb8 <HAL_DMA_Abort_IT+0xc8>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a46      	ldr	r2, [pc, #280]	@ (8003dcc <HAL_DMA_Abort_IT+0x1dc>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d101      	bne.n	8003cbc <HAL_DMA_Abort_IT+0xcc>
 8003cb8:	2301      	movs	r3, #1
 8003cba:	e000      	b.n	8003cbe <HAL_DMA_Abort_IT+0xce>
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	f000 8086 	beq.w	8003dd0 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2204      	movs	r2, #4
 8003cc8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a2f      	ldr	r2, [pc, #188]	@ (8003d90 <HAL_DMA_Abort_IT+0x1a0>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d04a      	beq.n	8003d6c <HAL_DMA_Abort_IT+0x17c>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a2e      	ldr	r2, [pc, #184]	@ (8003d94 <HAL_DMA_Abort_IT+0x1a4>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d045      	beq.n	8003d6c <HAL_DMA_Abort_IT+0x17c>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a2c      	ldr	r2, [pc, #176]	@ (8003d98 <HAL_DMA_Abort_IT+0x1a8>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d040      	beq.n	8003d6c <HAL_DMA_Abort_IT+0x17c>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a2b      	ldr	r2, [pc, #172]	@ (8003d9c <HAL_DMA_Abort_IT+0x1ac>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d03b      	beq.n	8003d6c <HAL_DMA_Abort_IT+0x17c>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a29      	ldr	r2, [pc, #164]	@ (8003da0 <HAL_DMA_Abort_IT+0x1b0>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d036      	beq.n	8003d6c <HAL_DMA_Abort_IT+0x17c>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a28      	ldr	r2, [pc, #160]	@ (8003da4 <HAL_DMA_Abort_IT+0x1b4>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d031      	beq.n	8003d6c <HAL_DMA_Abort_IT+0x17c>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a26      	ldr	r2, [pc, #152]	@ (8003da8 <HAL_DMA_Abort_IT+0x1b8>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d02c      	beq.n	8003d6c <HAL_DMA_Abort_IT+0x17c>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a25      	ldr	r2, [pc, #148]	@ (8003dac <HAL_DMA_Abort_IT+0x1bc>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d027      	beq.n	8003d6c <HAL_DMA_Abort_IT+0x17c>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a23      	ldr	r2, [pc, #140]	@ (8003db0 <HAL_DMA_Abort_IT+0x1c0>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d022      	beq.n	8003d6c <HAL_DMA_Abort_IT+0x17c>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a22      	ldr	r2, [pc, #136]	@ (8003db4 <HAL_DMA_Abort_IT+0x1c4>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d01d      	beq.n	8003d6c <HAL_DMA_Abort_IT+0x17c>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a20      	ldr	r2, [pc, #128]	@ (8003db8 <HAL_DMA_Abort_IT+0x1c8>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d018      	beq.n	8003d6c <HAL_DMA_Abort_IT+0x17c>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a1f      	ldr	r2, [pc, #124]	@ (8003dbc <HAL_DMA_Abort_IT+0x1cc>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d013      	beq.n	8003d6c <HAL_DMA_Abort_IT+0x17c>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a1d      	ldr	r2, [pc, #116]	@ (8003dc0 <HAL_DMA_Abort_IT+0x1d0>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d00e      	beq.n	8003d6c <HAL_DMA_Abort_IT+0x17c>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a1c      	ldr	r2, [pc, #112]	@ (8003dc4 <HAL_DMA_Abort_IT+0x1d4>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d009      	beq.n	8003d6c <HAL_DMA_Abort_IT+0x17c>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a1a      	ldr	r2, [pc, #104]	@ (8003dc8 <HAL_DMA_Abort_IT+0x1d8>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d004      	beq.n	8003d6c <HAL_DMA_Abort_IT+0x17c>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a19      	ldr	r2, [pc, #100]	@ (8003dcc <HAL_DMA_Abort_IT+0x1dc>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d108      	bne.n	8003d7e <HAL_DMA_Abort_IT+0x18e>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f022 0201 	bic.w	r2, r2, #1
 8003d7a:	601a      	str	r2, [r3, #0]
 8003d7c:	e178      	b.n	8004070 <HAL_DMA_Abort_IT+0x480>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	681a      	ldr	r2, [r3, #0]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f022 0201 	bic.w	r2, r2, #1
 8003d8c:	601a      	str	r2, [r3, #0]
 8003d8e:	e16f      	b.n	8004070 <HAL_DMA_Abort_IT+0x480>
 8003d90:	40020010 	.word	0x40020010
 8003d94:	40020028 	.word	0x40020028
 8003d98:	40020040 	.word	0x40020040
 8003d9c:	40020058 	.word	0x40020058
 8003da0:	40020070 	.word	0x40020070
 8003da4:	40020088 	.word	0x40020088
 8003da8:	400200a0 	.word	0x400200a0
 8003dac:	400200b8 	.word	0x400200b8
 8003db0:	40020410 	.word	0x40020410
 8003db4:	40020428 	.word	0x40020428
 8003db8:	40020440 	.word	0x40020440
 8003dbc:	40020458 	.word	0x40020458
 8003dc0:	40020470 	.word	0x40020470
 8003dc4:	40020488 	.word	0x40020488
 8003dc8:	400204a0 	.word	0x400204a0
 8003dcc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	681a      	ldr	r2, [r3, #0]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f022 020e 	bic.w	r2, r2, #14
 8003dde:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a6c      	ldr	r2, [pc, #432]	@ (8003f98 <HAL_DMA_Abort_IT+0x3a8>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d04a      	beq.n	8003e80 <HAL_DMA_Abort_IT+0x290>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a6b      	ldr	r2, [pc, #428]	@ (8003f9c <HAL_DMA_Abort_IT+0x3ac>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d045      	beq.n	8003e80 <HAL_DMA_Abort_IT+0x290>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a69      	ldr	r2, [pc, #420]	@ (8003fa0 <HAL_DMA_Abort_IT+0x3b0>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d040      	beq.n	8003e80 <HAL_DMA_Abort_IT+0x290>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a68      	ldr	r2, [pc, #416]	@ (8003fa4 <HAL_DMA_Abort_IT+0x3b4>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d03b      	beq.n	8003e80 <HAL_DMA_Abort_IT+0x290>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a66      	ldr	r2, [pc, #408]	@ (8003fa8 <HAL_DMA_Abort_IT+0x3b8>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d036      	beq.n	8003e80 <HAL_DMA_Abort_IT+0x290>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a65      	ldr	r2, [pc, #404]	@ (8003fac <HAL_DMA_Abort_IT+0x3bc>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d031      	beq.n	8003e80 <HAL_DMA_Abort_IT+0x290>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a63      	ldr	r2, [pc, #396]	@ (8003fb0 <HAL_DMA_Abort_IT+0x3c0>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d02c      	beq.n	8003e80 <HAL_DMA_Abort_IT+0x290>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a62      	ldr	r2, [pc, #392]	@ (8003fb4 <HAL_DMA_Abort_IT+0x3c4>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d027      	beq.n	8003e80 <HAL_DMA_Abort_IT+0x290>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a60      	ldr	r2, [pc, #384]	@ (8003fb8 <HAL_DMA_Abort_IT+0x3c8>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d022      	beq.n	8003e80 <HAL_DMA_Abort_IT+0x290>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a5f      	ldr	r2, [pc, #380]	@ (8003fbc <HAL_DMA_Abort_IT+0x3cc>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d01d      	beq.n	8003e80 <HAL_DMA_Abort_IT+0x290>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a5d      	ldr	r2, [pc, #372]	@ (8003fc0 <HAL_DMA_Abort_IT+0x3d0>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d018      	beq.n	8003e80 <HAL_DMA_Abort_IT+0x290>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a5c      	ldr	r2, [pc, #368]	@ (8003fc4 <HAL_DMA_Abort_IT+0x3d4>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d013      	beq.n	8003e80 <HAL_DMA_Abort_IT+0x290>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a5a      	ldr	r2, [pc, #360]	@ (8003fc8 <HAL_DMA_Abort_IT+0x3d8>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d00e      	beq.n	8003e80 <HAL_DMA_Abort_IT+0x290>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a59      	ldr	r2, [pc, #356]	@ (8003fcc <HAL_DMA_Abort_IT+0x3dc>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d009      	beq.n	8003e80 <HAL_DMA_Abort_IT+0x290>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a57      	ldr	r2, [pc, #348]	@ (8003fd0 <HAL_DMA_Abort_IT+0x3e0>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d004      	beq.n	8003e80 <HAL_DMA_Abort_IT+0x290>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a56      	ldr	r2, [pc, #344]	@ (8003fd4 <HAL_DMA_Abort_IT+0x3e4>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d108      	bne.n	8003e92 <HAL_DMA_Abort_IT+0x2a2>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	681a      	ldr	r2, [r3, #0]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f022 0201 	bic.w	r2, r2, #1
 8003e8e:	601a      	str	r2, [r3, #0]
 8003e90:	e007      	b.n	8003ea2 <HAL_DMA_Abort_IT+0x2b2>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	681a      	ldr	r2, [r3, #0]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f022 0201 	bic.w	r2, r2, #1
 8003ea0:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a3c      	ldr	r2, [pc, #240]	@ (8003f98 <HAL_DMA_Abort_IT+0x3a8>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d072      	beq.n	8003f92 <HAL_DMA_Abort_IT+0x3a2>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a3a      	ldr	r2, [pc, #232]	@ (8003f9c <HAL_DMA_Abort_IT+0x3ac>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d06d      	beq.n	8003f92 <HAL_DMA_Abort_IT+0x3a2>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a39      	ldr	r2, [pc, #228]	@ (8003fa0 <HAL_DMA_Abort_IT+0x3b0>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d068      	beq.n	8003f92 <HAL_DMA_Abort_IT+0x3a2>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a37      	ldr	r2, [pc, #220]	@ (8003fa4 <HAL_DMA_Abort_IT+0x3b4>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d063      	beq.n	8003f92 <HAL_DMA_Abort_IT+0x3a2>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a36      	ldr	r2, [pc, #216]	@ (8003fa8 <HAL_DMA_Abort_IT+0x3b8>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d05e      	beq.n	8003f92 <HAL_DMA_Abort_IT+0x3a2>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a34      	ldr	r2, [pc, #208]	@ (8003fac <HAL_DMA_Abort_IT+0x3bc>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d059      	beq.n	8003f92 <HAL_DMA_Abort_IT+0x3a2>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a33      	ldr	r2, [pc, #204]	@ (8003fb0 <HAL_DMA_Abort_IT+0x3c0>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d054      	beq.n	8003f92 <HAL_DMA_Abort_IT+0x3a2>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a31      	ldr	r2, [pc, #196]	@ (8003fb4 <HAL_DMA_Abort_IT+0x3c4>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d04f      	beq.n	8003f92 <HAL_DMA_Abort_IT+0x3a2>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a30      	ldr	r2, [pc, #192]	@ (8003fb8 <HAL_DMA_Abort_IT+0x3c8>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d04a      	beq.n	8003f92 <HAL_DMA_Abort_IT+0x3a2>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a2e      	ldr	r2, [pc, #184]	@ (8003fbc <HAL_DMA_Abort_IT+0x3cc>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d045      	beq.n	8003f92 <HAL_DMA_Abort_IT+0x3a2>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a2d      	ldr	r2, [pc, #180]	@ (8003fc0 <HAL_DMA_Abort_IT+0x3d0>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d040      	beq.n	8003f92 <HAL_DMA_Abort_IT+0x3a2>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a2b      	ldr	r2, [pc, #172]	@ (8003fc4 <HAL_DMA_Abort_IT+0x3d4>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d03b      	beq.n	8003f92 <HAL_DMA_Abort_IT+0x3a2>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a2a      	ldr	r2, [pc, #168]	@ (8003fc8 <HAL_DMA_Abort_IT+0x3d8>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d036      	beq.n	8003f92 <HAL_DMA_Abort_IT+0x3a2>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a28      	ldr	r2, [pc, #160]	@ (8003fcc <HAL_DMA_Abort_IT+0x3dc>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d031      	beq.n	8003f92 <HAL_DMA_Abort_IT+0x3a2>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a27      	ldr	r2, [pc, #156]	@ (8003fd0 <HAL_DMA_Abort_IT+0x3e0>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d02c      	beq.n	8003f92 <HAL_DMA_Abort_IT+0x3a2>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a25      	ldr	r2, [pc, #148]	@ (8003fd4 <HAL_DMA_Abort_IT+0x3e4>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d027      	beq.n	8003f92 <HAL_DMA_Abort_IT+0x3a2>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a24      	ldr	r2, [pc, #144]	@ (8003fd8 <HAL_DMA_Abort_IT+0x3e8>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d022      	beq.n	8003f92 <HAL_DMA_Abort_IT+0x3a2>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a22      	ldr	r2, [pc, #136]	@ (8003fdc <HAL_DMA_Abort_IT+0x3ec>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d01d      	beq.n	8003f92 <HAL_DMA_Abort_IT+0x3a2>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a21      	ldr	r2, [pc, #132]	@ (8003fe0 <HAL_DMA_Abort_IT+0x3f0>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d018      	beq.n	8003f92 <HAL_DMA_Abort_IT+0x3a2>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a1f      	ldr	r2, [pc, #124]	@ (8003fe4 <HAL_DMA_Abort_IT+0x3f4>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d013      	beq.n	8003f92 <HAL_DMA_Abort_IT+0x3a2>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a1e      	ldr	r2, [pc, #120]	@ (8003fe8 <HAL_DMA_Abort_IT+0x3f8>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d00e      	beq.n	8003f92 <HAL_DMA_Abort_IT+0x3a2>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a1c      	ldr	r2, [pc, #112]	@ (8003fec <HAL_DMA_Abort_IT+0x3fc>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d009      	beq.n	8003f92 <HAL_DMA_Abort_IT+0x3a2>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a1b      	ldr	r2, [pc, #108]	@ (8003ff0 <HAL_DMA_Abort_IT+0x400>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d004      	beq.n	8003f92 <HAL_DMA_Abort_IT+0x3a2>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a19      	ldr	r2, [pc, #100]	@ (8003ff4 <HAL_DMA_Abort_IT+0x404>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d132      	bne.n	8003ff8 <HAL_DMA_Abort_IT+0x408>
 8003f92:	2301      	movs	r3, #1
 8003f94:	e031      	b.n	8003ffa <HAL_DMA_Abort_IT+0x40a>
 8003f96:	bf00      	nop
 8003f98:	40020010 	.word	0x40020010
 8003f9c:	40020028 	.word	0x40020028
 8003fa0:	40020040 	.word	0x40020040
 8003fa4:	40020058 	.word	0x40020058
 8003fa8:	40020070 	.word	0x40020070
 8003fac:	40020088 	.word	0x40020088
 8003fb0:	400200a0 	.word	0x400200a0
 8003fb4:	400200b8 	.word	0x400200b8
 8003fb8:	40020410 	.word	0x40020410
 8003fbc:	40020428 	.word	0x40020428
 8003fc0:	40020440 	.word	0x40020440
 8003fc4:	40020458 	.word	0x40020458
 8003fc8:	40020470 	.word	0x40020470
 8003fcc:	40020488 	.word	0x40020488
 8003fd0:	400204a0 	.word	0x400204a0
 8003fd4:	400204b8 	.word	0x400204b8
 8003fd8:	58025408 	.word	0x58025408
 8003fdc:	5802541c 	.word	0x5802541c
 8003fe0:	58025430 	.word	0x58025430
 8003fe4:	58025444 	.word	0x58025444
 8003fe8:	58025458 	.word	0x58025458
 8003fec:	5802546c 	.word	0x5802546c
 8003ff0:	58025480 	.word	0x58025480
 8003ff4:	58025494 	.word	0x58025494
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d028      	beq.n	8004050 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004002:	681a      	ldr	r2, [r3, #0]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004008:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800400c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004012:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004018:	f003 031f 	and.w	r3, r3, #31
 800401c:	2201      	movs	r2, #1
 800401e:	409a      	lsls	r2, r3
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004028:	687a      	ldr	r2, [r7, #4]
 800402a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800402c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004032:	2b00      	cmp	r3, #0
 8004034:	d00c      	beq.n	8004050 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800403a:	681a      	ldr	r2, [r3, #0]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004040:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004044:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800404a:	687a      	ldr	r2, [r7, #4]
 800404c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800404e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2201      	movs	r2, #1
 8004054:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2200      	movs	r2, #0
 800405c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004064:	2b00      	cmp	r3, #0
 8004066:	d003      	beq.n	8004070 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800406c:	6878      	ldr	r0, [r7, #4]
 800406e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8004070:	2300      	movs	r3, #0
}
 8004072:	4618      	mov	r0, r3
 8004074:	3710      	adds	r7, #16
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}
 800407a:	bf00      	nop

0800407c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b098      	sub	sp, #96	@ 0x60
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8004084:	4a84      	ldr	r2, [pc, #528]	@ (8004298 <HAL_FDCAN_Init+0x21c>)
 8004086:	f107 030c 	add.w	r3, r7, #12
 800408a:	4611      	mov	r1, r2
 800408c:	224c      	movs	r2, #76	@ 0x4c
 800408e:	4618      	mov	r0, r3
 8004090:	f00b fc81 	bl	800f996 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d101      	bne.n	800409e <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	e1c6      	b.n	800442c <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a7e      	ldr	r2, [pc, #504]	@ (800429c <HAL_FDCAN_Init+0x220>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d106      	bne.n	80040b6 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80040b0:	461a      	mov	r2, r3
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80040bc:	b2db      	uxtb	r3, r3
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d106      	bne.n	80040d0 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2200      	movs	r2, #0
 80040c6:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80040ca:	6878      	ldr	r0, [r7, #4]
 80040cc:	f7fc fd74 	bl	8000bb8 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	699a      	ldr	r2, [r3, #24]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f022 0210 	bic.w	r2, r2, #16
 80040de:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80040e0:	f7ff f8b0 	bl	8003244 <HAL_GetTick>
 80040e4:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80040e6:	e014      	b.n	8004112 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80040e8:	f7ff f8ac 	bl	8003244 <HAL_GetTick>
 80040ec:	4602      	mov	r2, r0
 80040ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80040f0:	1ad3      	subs	r3, r2, r3
 80040f2:	2b0a      	cmp	r3, #10
 80040f4:	d90d      	bls.n	8004112 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80040fc:	f043 0201 	orr.w	r2, r3, #1
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2203      	movs	r2, #3
 800410a:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	e18c      	b.n	800442c <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	699b      	ldr	r3, [r3, #24]
 8004118:	f003 0308 	and.w	r3, r3, #8
 800411c:	2b08      	cmp	r3, #8
 800411e:	d0e3      	beq.n	80040e8 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	699a      	ldr	r2, [r3, #24]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f042 0201 	orr.w	r2, r2, #1
 800412e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004130:	f7ff f888 	bl	8003244 <HAL_GetTick>
 8004134:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004136:	e014      	b.n	8004162 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004138:	f7ff f884 	bl	8003244 <HAL_GetTick>
 800413c:	4602      	mov	r2, r0
 800413e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004140:	1ad3      	subs	r3, r2, r3
 8004142:	2b0a      	cmp	r3, #10
 8004144:	d90d      	bls.n	8004162 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800414c:	f043 0201 	orr.w	r2, r3, #1
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2203      	movs	r2, #3
 800415a:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 800415e:	2301      	movs	r3, #1
 8004160:	e164      	b.n	800442c <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	699b      	ldr	r3, [r3, #24]
 8004168:	f003 0301 	and.w	r3, r3, #1
 800416c:	2b00      	cmp	r3, #0
 800416e:	d0e3      	beq.n	8004138 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	699a      	ldr	r2, [r3, #24]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f042 0202 	orr.w	r2, r2, #2
 800417e:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	7c1b      	ldrb	r3, [r3, #16]
 8004184:	2b01      	cmp	r3, #1
 8004186:	d108      	bne.n	800419a <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	699a      	ldr	r2, [r3, #24]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004196:	619a      	str	r2, [r3, #24]
 8004198:	e007      	b.n	80041aa <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	699a      	ldr	r2, [r3, #24]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80041a8:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	7c5b      	ldrb	r3, [r3, #17]
 80041ae:	2b01      	cmp	r3, #1
 80041b0:	d108      	bne.n	80041c4 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	699a      	ldr	r2, [r3, #24]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80041c0:	619a      	str	r2, [r3, #24]
 80041c2:	e007      	b.n	80041d4 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	699a      	ldr	r2, [r3, #24]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80041d2:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	7c9b      	ldrb	r3, [r3, #18]
 80041d8:	2b01      	cmp	r3, #1
 80041da:	d108      	bne.n	80041ee <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	699a      	ldr	r2, [r3, #24]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80041ea:	619a      	str	r2, [r3, #24]
 80041ec:	e007      	b.n	80041fe <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	699a      	ldr	r2, [r3, #24]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80041fc:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	699b      	ldr	r3, [r3, #24]
 8004204:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	689a      	ldr	r2, [r3, #8]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	430a      	orrs	r2, r1
 8004212:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	699a      	ldr	r2, [r3, #24]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8004222:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	691a      	ldr	r2, [r3, #16]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f022 0210 	bic.w	r2, r2, #16
 8004232:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	68db      	ldr	r3, [r3, #12]
 8004238:	2b01      	cmp	r3, #1
 800423a:	d108      	bne.n	800424e <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	699a      	ldr	r2, [r3, #24]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f042 0204 	orr.w	r2, r2, #4
 800424a:	619a      	str	r2, [r3, #24]
 800424c:	e030      	b.n	80042b0 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	68db      	ldr	r3, [r3, #12]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d02c      	beq.n	80042b0 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	68db      	ldr	r3, [r3, #12]
 800425a:	2b02      	cmp	r3, #2
 800425c:	d020      	beq.n	80042a0 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	699a      	ldr	r2, [r3, #24]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800426c:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	691a      	ldr	r2, [r3, #16]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f042 0210 	orr.w	r2, r2, #16
 800427c:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	68db      	ldr	r3, [r3, #12]
 8004282:	2b03      	cmp	r3, #3
 8004284:	d114      	bne.n	80042b0 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	699a      	ldr	r2, [r3, #24]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f042 0220 	orr.w	r2, r2, #32
 8004294:	619a      	str	r2, [r3, #24]
 8004296:	e00b      	b.n	80042b0 <HAL_FDCAN_Init+0x234>
 8004298:	08012acc 	.word	0x08012acc
 800429c:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	699a      	ldr	r2, [r3, #24]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f042 0220 	orr.w	r2, r2, #32
 80042ae:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	699b      	ldr	r3, [r3, #24]
 80042b4:	3b01      	subs	r3, #1
 80042b6:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	69db      	ldr	r3, [r3, #28]
 80042bc:	3b01      	subs	r3, #1
 80042be:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80042c0:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6a1b      	ldr	r3, [r3, #32]
 80042c6:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80042c8:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	695b      	ldr	r3, [r3, #20]
 80042d0:	3b01      	subs	r3, #1
 80042d2:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80042d8:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80042da:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	689b      	ldr	r3, [r3, #8]
 80042e0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80042e4:	d115      	bne.n	8004312 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042ea:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042f0:	3b01      	subs	r3, #1
 80042f2:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80042f4:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042fa:	3b01      	subs	r3, #1
 80042fc:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80042fe:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004306:	3b01      	subs	r3, #1
 8004308:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800430e:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004310:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004316:	2b00      	cmp	r3, #0
 8004318:	d00a      	beq.n	8004330 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	430a      	orrs	r2, r1
 800432c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004338:	4413      	add	r3, r2
 800433a:	2b00      	cmp	r3, #0
 800433c:	d011      	beq.n	8004362 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8004346:	f023 0107 	bic.w	r1, r3, #7
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800434e:	009b      	lsls	r3, r3, #2
 8004350:	3360      	adds	r3, #96	@ 0x60
 8004352:	443b      	add	r3, r7
 8004354:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	430a      	orrs	r2, r1
 800435e:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004366:	2b00      	cmp	r3, #0
 8004368:	d011      	beq.n	800438e <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004372:	f023 0107 	bic.w	r1, r3, #7
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800437a:	009b      	lsls	r3, r3, #2
 800437c:	3360      	adds	r3, #96	@ 0x60
 800437e:	443b      	add	r3, r7
 8004380:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	430a      	orrs	r2, r1
 800438a:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004392:	2b00      	cmp	r3, #0
 8004394:	d012      	beq.n	80043bc <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800439e:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043a6:	009b      	lsls	r3, r3, #2
 80043a8:	3360      	adds	r3, #96	@ 0x60
 80043aa:	443b      	add	r3, r7
 80043ac:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80043b0:	011a      	lsls	r2, r3, #4
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	430a      	orrs	r2, r1
 80043b8:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d012      	beq.n	80043ea <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80043cc:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043d4:	009b      	lsls	r3, r3, #2
 80043d6:	3360      	adds	r3, #96	@ 0x60
 80043d8:	443b      	add	r3, r7
 80043da:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80043de:	021a      	lsls	r2, r3, #8
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	430a      	orrs	r2, r1
 80043e6:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a11      	ldr	r2, [pc, #68]	@ (8004434 <HAL_FDCAN_Init+0x3b8>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d107      	bne.n	8004404 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	689a      	ldr	r2, [r3, #8]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	f022 0203 	bic.w	r2, r2, #3
 8004402:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2200      	movs	r2, #0
 8004408:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2200      	movs	r2, #0
 8004410:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2201      	movs	r2, #1
 8004418:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800441c:	6878      	ldr	r0, [r7, #4]
 800441e:	f000 fe13 	bl	8005048 <FDCAN_CalcultateRamBlockAddresses>
 8004422:	4603      	mov	r3, r0
 8004424:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 8004428:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 800442c:	4618      	mov	r0, r3
 800442e:	3760      	adds	r7, #96	@ 0x60
 8004430:	46bd      	mov	sp, r7
 8004432:	bd80      	pop	{r7, pc}
 8004434:	4000a000 	.word	0x4000a000

08004438 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 8004438:	b480      	push	{r7}
 800443a:	b087      	sub	sp, #28
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
 8004440:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8004448:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800444a:	7bfb      	ldrb	r3, [r7, #15]
 800444c:	2b01      	cmp	r3, #1
 800444e:	d002      	beq.n	8004456 <HAL_FDCAN_ConfigFilter+0x1e>
 8004450:	7bfb      	ldrb	r3, [r7, #15]
 8004452:	2b02      	cmp	r3, #2
 8004454:	d157      	bne.n	8004506 <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d12b      	bne.n	80044b6 <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	68db      	ldr	r3, [r3, #12]
 8004462:	2b07      	cmp	r3, #7
 8004464:	d10d      	bne.n	8004482 <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	691b      	ldr	r3, [r3, #16]
 800446a:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	69db      	ldr	r3, [r3, #28]
 8004470:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 8004472:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8004478:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 800447a:	f043 5360 	orr.w	r3, r3, #939524096	@ 0x38000000
 800447e:	617b      	str	r3, [r7, #20]
 8004480:	e00e      	b.n	80044a0 <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	689b      	ldr	r3, [r3, #8]
 8004486:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	68db      	ldr	r3, [r3, #12]
 800448c:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800448e:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	691b      	ldr	r3, [r3, #16]
 8004494:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 8004496:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800449c:	4313      	orrs	r3, r2
 800449e:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	009b      	lsls	r3, r3, #2
 80044aa:	4413      	add	r3, r2
 80044ac:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	697a      	ldr	r2, [r7, #20]
 80044b2:	601a      	str	r2, [r3, #0]
 80044b4:	e025      	b.n	8004502 <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	68db      	ldr	r3, [r3, #12]
 80044ba:	075a      	lsls	r2, r3, #29
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	691b      	ldr	r3, [r3, #16]
 80044c0:	4313      	orrs	r3, r2
 80044c2:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	68db      	ldr	r3, [r3, #12]
 80044c8:	2b07      	cmp	r3, #7
 80044ca:	d103      	bne.n	80044d4 <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	699b      	ldr	r3, [r3, #24]
 80044d0:	613b      	str	r3, [r7, #16]
 80044d2:	e006      	b.n	80044e2 <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	689b      	ldr	r3, [r3, #8]
 80044d8:	079a      	lsls	r2, r3, #30
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	695b      	ldr	r3, [r3, #20]
 80044de:	4313      	orrs	r3, r2
 80044e0:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	00db      	lsls	r3, r3, #3
 80044ec:	4413      	add	r3, r2
 80044ee:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	697a      	ldr	r2, [r7, #20]
 80044f4:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	3304      	adds	r3, #4
 80044fa:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	693a      	ldr	r2, [r7, #16]
 8004500:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8004502:	2300      	movs	r3, #0
 8004504:	e008      	b.n	8004518 <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800450c:	f043 0202 	orr.w	r2, r3, #2
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8004516:	2301      	movs	r3, #1
  }
}
 8004518:	4618      	mov	r0, r3
 800451a:	371c      	adds	r7, #28
 800451c:	46bd      	mov	sp, r7
 800451e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004522:	4770      	bx	lr

08004524 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 8004524:	b480      	push	{r7}
 8004526:	b085      	sub	sp, #20
 8004528:	af00      	add	r7, sp, #0
 800452a:	60f8      	str	r0, [r7, #12]
 800452c:	60b9      	str	r1, [r7, #8]
 800452e:	607a      	str	r2, [r7, #4]
 8004530:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8004538:	b2db      	uxtb	r3, r3
 800453a:	2b01      	cmp	r3, #1
 800453c:	d110      	bne.n	8004560 <HAL_FDCAN_ConfigGlobalFilter+0x3c>
  {
    /* Configure global filter */
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	011a      	lsls	r2, r3, #4
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	009b      	lsls	r3, r3, #2
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8004546:	431a      	orrs	r2, r3
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	005b      	lsls	r3, r3, #1
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 800454c:	ea42 0103 	orr.w	r1, r2, r3
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 8004554:	69ba      	ldr	r2, [r7, #24]
 8004556:	430a      	orrs	r2, r1
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8004558:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
                             (RejectRemoteExt << FDCAN_GFC_RRFE_Pos));

    /* Return function status */
    return HAL_OK;
 800455c:	2300      	movs	r3, #0
 800455e:	e008      	b.n	8004572 <HAL_FDCAN_ConfigGlobalFilter+0x4e>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004566:	f043 0204 	orr.w	r2, r3, #4
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8004570:	2301      	movs	r3, #1
  }
}
 8004572:	4618      	mov	r0, r3
 8004574:	3714      	adds	r7, #20
 8004576:	46bd      	mov	sp, r7
 8004578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457c:	4770      	bx	lr

0800457e <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 800457e:	b480      	push	{r7}
 8004580:	b083      	sub	sp, #12
 8004582:	af00      	add	r7, sp, #0
 8004584:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800458c:	b2db      	uxtb	r3, r3
 800458e:	2b01      	cmp	r3, #1
 8004590:	d111      	bne.n	80045b6 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2202      	movs	r2, #2
 8004596:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	699a      	ldr	r2, [r3, #24]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f022 0201 	bic.w	r2, r2, #1
 80045a8:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2200      	movs	r2, #0
 80045ae:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Return function status */
    return HAL_OK;
 80045b2:	2300      	movs	r3, #0
 80045b4:	e008      	b.n	80045c8 <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80045bc:	f043 0204 	orr.w	r2, r3, #4
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 80045c6:	2301      	movs	r3, #1
  }
}
 80045c8:	4618      	mov	r0, r3
 80045ca:	370c      	adds	r7, #12
 80045cc:	46bd      	mov	sp, r7
 80045ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d2:	4770      	bx	lr

080045d4 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b086      	sub	sp, #24
 80045d8:	af00      	add	r7, sp, #0
 80045da:	60f8      	str	r0, [r7, #12]
 80045dc:	60b9      	str	r1, [r7, #8]
 80045de:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80045e6:	b2db      	uxtb	r3, r3
 80045e8:	2b02      	cmp	r3, #2
 80045ea:	d141      	bne.n	8004670 <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80045f4:	f003 537c 	and.w	r3, r3, #1056964608	@ 0x3f000000
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d109      	bne.n	8004610 <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004602:	f043 0220 	orr.w	r2, r3, #32
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 800460c:	2301      	movs	r3, #1
 800460e:	e038      	b.n	8004682 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8004618:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800461c:	2b00      	cmp	r3, #0
 800461e:	d009      	beq.n	8004634 <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004626:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 8004630:	2301      	movs	r3, #1
 8004632:	e026      	b.n	8004682 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800463c:	0c1b      	lsrs	r3, r3, #16
 800463e:	f003 031f 	and.w	r3, r3, #31
 8004642:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	687a      	ldr	r2, [r7, #4]
 8004648:	68b9      	ldr	r1, [r7, #8]
 800464a:	68f8      	ldr	r0, [r7, #12]
 800464c:	f000 fe82 	bl	8005354 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	2101      	movs	r1, #1
 8004656:	697a      	ldr	r2, [r7, #20]
 8004658:	fa01 f202 	lsl.w	r2, r1, r2
 800465c:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8004660:	2201      	movs	r2, #1
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	409a      	lsls	r2, r3
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    }

    /* Return function status */
    return HAL_OK;
 800466c:	2300      	movs	r3, #0
 800466e:	e008      	b.n	8004682 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004676:	f043 0208 	orr.w	r2, r3, #8
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8004680:	2301      	movs	r3, #1
  }
}
 8004682:	4618      	mov	r0, r3
 8004684:	3718      	adds	r7, #24
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}
	...

0800468c <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 800468c:	b480      	push	{r7}
 800468e:	b08b      	sub	sp, #44	@ 0x2c
 8004690:	af00      	add	r7, sp, #0
 8004692:	60f8      	str	r0, [r7, #12]
 8004694:	60b9      	str	r1, [r7, #8]
 8004696:	607a      	str	r2, [r7, #4]
 8004698:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 800469a:	2300      	movs	r3, #0
 800469c:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80046a4:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 80046a6:	7efb      	ldrb	r3, [r7, #27]
 80046a8:	2b02      	cmp	r3, #2
 80046aa:	f040 8149 	bne.w	8004940 <HAL_FDCAN_GetRxMessage+0x2b4>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	2b40      	cmp	r3, #64	@ 0x40
 80046b2:	d14c      	bne.n	800474e <HAL_FDCAN_GetRxMessage+0xc2>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80046bc:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d109      	bne.n	80046d8 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80046ca:	f043 0220 	orr.w	r2, r3, #32
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 80046d4:	2301      	movs	r3, #1
 80046d6:	e13c      	b.n	8004952 <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80046e0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d109      	bne.n	80046fc <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80046ee:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 80046f8:	2301      	movs	r3, #1
 80046fa:	e12a      	b.n	8004952 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004704:	0e1b      	lsrs	r3, r3, #24
 8004706:	f003 0301 	and.w	r3, r3, #1
 800470a:	2b01      	cmp	r3, #1
 800470c:	d10a      	bne.n	8004724 <HAL_FDCAN_GetRxMessage+0x98>
        {
          if (((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004716:	0fdb      	lsrs	r3, r3, #31
 8004718:	f003 0301 	and.w	r3, r3, #1
 800471c:	2b01      	cmp	r3, #1
 800471e:	d101      	bne.n	8004724 <HAL_FDCAN_GetRxMessage+0x98>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8004720:	2301      	movs	r3, #1
 8004722:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800472c:	0a1b      	lsrs	r3, r3, #8
 800472e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004732:	69fa      	ldr	r2, [r7, #28]
 8004734:	4413      	add	r3, r2
 8004736:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004740:	69f9      	ldr	r1, [r7, #28]
 8004742:	fb01 f303 	mul.w	r3, r1, r3
 8004746:	009b      	lsls	r3, r3, #2
 8004748:	4413      	add	r3, r2
 800474a:	627b      	str	r3, [r7, #36]	@ 0x24
 800474c:	e068      	b.n	8004820 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	2b41      	cmp	r3, #65	@ 0x41
 8004752:	d14c      	bne.n	80047ee <HAL_FDCAN_GetRxMessage+0x162>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800475c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004760:	2b00      	cmp	r3, #0
 8004762:	d109      	bne.n	8004778 <HAL_FDCAN_GetRxMessage+0xec>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800476a:	f043 0220 	orr.w	r2, r3, #32
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8004774:	2301      	movs	r3, #1
 8004776:	e0ec      	b.n	8004952 <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004780:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004784:	2b00      	cmp	r3, #0
 8004786:	d109      	bne.n	800479c <HAL_FDCAN_GetRxMessage+0x110>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800478e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8004798:	2301      	movs	r3, #1
 800479a:	e0da      	b.n	8004952 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80047a4:	0e1b      	lsrs	r3, r3, #24
 80047a6:	f003 0301 	and.w	r3, r3, #1
 80047aa:	2b01      	cmp	r3, #1
 80047ac:	d10a      	bne.n	80047c4 <HAL_FDCAN_GetRxMessage+0x138>
        {
          if (((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80047b6:	0fdb      	lsrs	r3, r3, #31
 80047b8:	f003 0301 	and.w	r3, r3, #1
 80047bc:	2b01      	cmp	r3, #1
 80047be:	d101      	bne.n	80047c4 <HAL_FDCAN_GetRxMessage+0x138>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80047c0:	2301      	movs	r3, #1
 80047c2:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80047cc:	0a1b      	lsrs	r3, r3, #8
 80047ce:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80047d2:	69fa      	ldr	r2, [r7, #28]
 80047d4:	4413      	add	r3, r2
 80047d6:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047e0:	69f9      	ldr	r1, [r7, #28]
 80047e2:	fb01 f303 	mul.w	r3, r1, r3
 80047e6:	009b      	lsls	r3, r3, #2
 80047e8:	4413      	add	r3, r2
 80047ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80047ec:	e018      	b.n	8004820 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80047f2:	68ba      	ldr	r2, [r7, #8]
 80047f4:	429a      	cmp	r2, r3
 80047f6:	d309      	bcc.n	800480c <HAL_FDCAN_GetRxMessage+0x180>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80047fe:	f043 0220 	orr.w	r2, r3, #32
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8004808:	2301      	movs	r3, #1
 800480a:	e0a2      	b.n	8004952 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004814:	68b9      	ldr	r1, [r7, #8]
 8004816:	fb01 f303 	mul.w	r3, r1, r3
 800481a:	009b      	lsls	r3, r3, #2
 800481c:	4413      	add	r3, r2
 800481e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8004820:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d107      	bne.n	8004844 <HAL_FDCAN_GetRxMessage+0x1b8>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8004834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	0c9b      	lsrs	r3, r3, #18
 800483a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	601a      	str	r2, [r3, #0]
 8004842:	e005      	b.n	8004850 <HAL_FDCAN_GetRxMessage+0x1c4>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8004844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8004850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 800485c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8004868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800486a:	3304      	adds	r3, #4
 800486c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 800486e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	b29a      	uxth	r2, r3
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8004878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	0c1b      	lsrs	r3, r3, #16
 800487e:	f003 020f 	and.w	r2, r3, #15
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8004886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8004892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 800489e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	0e1b      	lsrs	r3, r3, #24
 80048a4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 80048ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	0fda      	lsrs	r2, r3, #31
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 80048b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048b8:	3304      	adds	r3, #4
 80048ba:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 80048bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048be:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 80048c0:	2300      	movs	r3, #0
 80048c2:	623b      	str	r3, [r7, #32]
 80048c4:	e00a      	b.n	80048dc <HAL_FDCAN_GetRxMessage+0x250>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 80048c6:	697a      	ldr	r2, [r7, #20]
 80048c8:	6a3b      	ldr	r3, [r7, #32]
 80048ca:	441a      	add	r2, r3
 80048cc:	6839      	ldr	r1, [r7, #0]
 80048ce:	6a3b      	ldr	r3, [r7, #32]
 80048d0:	440b      	add	r3, r1
 80048d2:	7812      	ldrb	r2, [r2, #0]
 80048d4:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 80048d6:	6a3b      	ldr	r3, [r7, #32]
 80048d8:	3301      	adds	r3, #1
 80048da:	623b      	str	r3, [r7, #32]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	68db      	ldr	r3, [r3, #12]
 80048e0:	4a1f      	ldr	r2, [pc, #124]	@ (8004960 <HAL_FDCAN_GetRxMessage+0x2d4>)
 80048e2:	5cd3      	ldrb	r3, [r2, r3]
 80048e4:	461a      	mov	r2, r3
 80048e6:	6a3b      	ldr	r3, [r7, #32]
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d3ec      	bcc.n	80048c6 <HAL_FDCAN_GetRxMessage+0x23a>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	2b40      	cmp	r3, #64	@ 0x40
 80048f0:	d105      	bne.n	80048fe <HAL_FDCAN_GetRxMessage+0x272>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	69fa      	ldr	r2, [r7, #28]
 80048f8:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
 80048fc:	e01e      	b.n	800493c <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	2b41      	cmp	r3, #65	@ 0x41
 8004902:	d105      	bne.n	8004910 <HAL_FDCAN_GetRxMessage+0x284>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	69fa      	ldr	r2, [r7, #28]
 800490a:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
 800490e:	e015      	b.n	800493c <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	2b1f      	cmp	r3, #31
 8004914:	d808      	bhi.n	8004928 <HAL_FDCAN_GetRxMessage+0x29c>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1U << RxLocation);
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	2101      	movs	r1, #1
 800491c:	68ba      	ldr	r2, [r7, #8]
 800491e:	fa01 f202 	lsl.w	r2, r1, r2
 8004922:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 8004926:	e009      	b.n	800493c <HAL_FDCAN_GetRxMessage+0x2b0>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1U << (RxLocation & 0x1FU));
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	f003 021f 	and.w	r2, r3, #31
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	2101      	movs	r1, #1
 8004934:	fa01 f202 	lsl.w	r2, r1, r2
 8004938:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 800493c:	2300      	movs	r3, #0
 800493e:	e008      	b.n	8004952 <HAL_FDCAN_GetRxMessage+0x2c6>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004946:	f043 0208 	orr.w	r2, r3, #8
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8004950:	2301      	movs	r3, #1
  }
}
 8004952:	4618      	mov	r0, r3
 8004954:	372c      	adds	r7, #44	@ 0x2c
 8004956:	46bd      	mov	sp, r7
 8004958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495c:	4770      	bx	lr
 800495e:	bf00      	nop
 8004960:	08012d5c 	.word	0x08012d5c

08004964 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8004964:	b480      	push	{r7}
 8004966:	b087      	sub	sp, #28
 8004968:	af00      	add	r7, sp, #0
 800496a:	60f8      	str	r0, [r7, #12]
 800496c:	60b9      	str	r1, [r7, #8]
 800496e:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8004976:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8004978:	7dfb      	ldrb	r3, [r7, #23]
 800497a:	2b01      	cmp	r3, #1
 800497c:	d002      	beq.n	8004984 <HAL_FDCAN_ActivateNotification+0x20>
 800497e:	7dfb      	ldrb	r3, [r7, #23]
 8004980:	2b02      	cmp	r3, #2
 8004982:	d155      	bne.n	8004a30 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	4013      	ands	r3, r2
 800498e:	2b00      	cmp	r3, #0
 8004990:	d108      	bne.n	80049a4 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f042 0201 	orr.w	r2, r2, #1
 80049a0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80049a2:	e014      	b.n	80049ce <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	4013      	ands	r3, r2
 80049ae:	68ba      	ldr	r2, [r7, #8]
 80049b0:	429a      	cmp	r2, r3
 80049b2:	d108      	bne.n	80049c6 <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f042 0202 	orr.w	r2, r2, #2
 80049c2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80049c4:	e003      	b.n	80049ce <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	2203      	movs	r2, #3
 80049cc:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d009      	beq.n	80049ec <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	687a      	ldr	r2, [r7, #4]
 80049e6:	430a      	orrs	r2, r1
 80049e8:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d009      	beq.n	8004a0a <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f8d3 10e4 	ldr.w	r1, [r3, #228]	@ 0xe4
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	687a      	ldr	r2, [r7, #4]
 8004a04:	430a      	orrs	r2, r1
 8004a06:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004a10:	68ba      	ldr	r2, [r7, #8]
 8004a12:	4b0f      	ldr	r3, [pc, #60]	@ (8004a50 <HAL_FDCAN_ActivateNotification+0xec>)
 8004a14:	4013      	ands	r3, r2
 8004a16:	68fa      	ldr	r2, [r7, #12]
 8004a18:	6812      	ldr	r2, [r2, #0]
 8004a1a:	430b      	orrs	r3, r1
 8004a1c:	6553      	str	r3, [r2, #84]	@ 0x54
 8004a1e:	4b0d      	ldr	r3, [pc, #52]	@ (8004a54 <HAL_FDCAN_ActivateNotification+0xf0>)
 8004a20:	695a      	ldr	r2, [r3, #20]
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	0f9b      	lsrs	r3, r3, #30
 8004a26:	490b      	ldr	r1, [pc, #44]	@ (8004a54 <HAL_FDCAN_ActivateNotification+0xf0>)
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	e008      	b.n	8004a42 <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004a36:	f043 0202 	orr.w	r2, r3, #2
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8004a40:	2301      	movs	r3, #1
  }
}
 8004a42:	4618      	mov	r0, r3
 8004a44:	371c      	adds	r7, #28
 8004a46:	46bd      	mov	sp, r7
 8004a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4c:	4770      	bx	lr
 8004a4e:	bf00      	nop
 8004a50:	3fcfffff 	.word	0x3fcfffff
 8004a54:	4000a800 	.word	0x4000a800

08004a58 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b096      	sub	sp, #88	@ 0x58
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8004a60:	4b95      	ldr	r3, [pc, #596]	@ (8004cb8 <HAL_FDCAN_IRQHandler+0x260>)
 8004a62:	691b      	ldr	r3, [r3, #16]
 8004a64:	079b      	lsls	r3, r3, #30
 8004a66:	657b      	str	r3, [r7, #84]	@ 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8004a68:	4b93      	ldr	r3, [pc, #588]	@ (8004cb8 <HAL_FDCAN_IRQHandler+0x260>)
 8004a6a:	695b      	ldr	r3, [r3, #20]
 8004a6c:	079b      	lsls	r3, r3, #30
 8004a6e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004a70:	4013      	ands	r3, r2
 8004a72:	657b      	str	r3, [r7, #84]	@ 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a7a:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8004a7e:	653b      	str	r3, [r7, #80]	@ 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a86:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004a88:	4013      	ands	r3, r2
 8004a8a:	653b      	str	r3, [r7, #80]	@ 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a92:	f003 030f 	and.w	r3, r3, #15
 8004a96:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a9e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004aa0:	4013      	ands	r3, r2
 8004aa2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004aaa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004aae:	64bb      	str	r3, [r7, #72]	@ 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ab6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004ab8:	4013      	ands	r3, r2
 8004aba:	64bb      	str	r3, [r7, #72]	@ 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ac2:	f003 5371 	and.w	r3, r3, #1010827264	@ 0x3c400000
 8004ac6:	647b      	str	r3, [r7, #68]	@ 0x44
  Errors &= hfdcan->Instance->IE;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ace:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004ad0:	4013      	ands	r3, r2
 8004ad2:	647b      	str	r3, [r7, #68]	@ 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ada:	f003 7360 	and.w	r3, r3, #58720256	@ 0x3800000
 8004ade:	643b      	str	r3, [r7, #64]	@ 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ae6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004ae8:	4013      	ands	r3, r2
 8004aea:	643b      	str	r3, [r7, #64]	@ 0x40
  itsourceIE = hfdcan->Instance->IE;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004af2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  itflagIR = hfdcan->Instance->IR;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004afa:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8004afc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004afe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d00f      	beq.n	8004b26 <HAL_FDCAN_IRQHandler+0xce>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8004b06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d00a      	beq.n	8004b26 <HAL_FDCAN_IRQHandler+0xce>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004b18:	651a      	str	r2, [r3, #80]	@ 0x50
 8004b1a:	4b67      	ldr	r3, [pc, #412]	@ (8004cb8 <HAL_FDCAN_IRQHandler+0x260>)
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8004b20:	6878      	ldr	r0, [r7, #4]
 8004b22:	f000 fa44 	bl	8004fae <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8004b26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d01c      	beq.n	8004b6a <HAL_FDCAN_IRQHandler+0x112>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8004b30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b32:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d017      	beq.n	8004b6a <HAL_FDCAN_IRQHandler+0x112>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004b42:	637b      	str	r3, [r7, #52]	@ 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004b4c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004b4e:	4013      	ands	r3, r2
 8004b50:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004b5a:	651a      	str	r2, [r3, #80]	@ 0x50
 8004b5c:	4b56      	ldr	r3, [pc, #344]	@ (8004cb8 <HAL_FDCAN_IRQHandler+0x260>)
 8004b5e:	2200      	movs	r2, #0
 8004b60:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8004b62:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8004b64:	6878      	ldr	r0, [r7, #4]
 8004b66:	f000 f9f9 	bl	8004f5c <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 8004b6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d00d      	beq.n	8004b8c <HAL_FDCAN_IRQHandler+0x134>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681a      	ldr	r2, [r3, #0]
 8004b74:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004b76:	4b51      	ldr	r3, [pc, #324]	@ (8004cbc <HAL_FDCAN_IRQHandler+0x264>)
 8004b78:	400b      	ands	r3, r1
 8004b7a:	6513      	str	r3, [r2, #80]	@ 0x50
 8004b7c:	4a4e      	ldr	r2, [pc, #312]	@ (8004cb8 <HAL_FDCAN_IRQHandler+0x260>)
 8004b7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b80:	0f9b      	lsrs	r3, r3, #30
 8004b82:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8004b84:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004b86:	6878      	ldr	r0, [r7, #4]
 8004b88:	f000 f9b2 	bl	8004ef0 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8004b8c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d00d      	beq.n	8004bae <HAL_FDCAN_IRQHandler+0x156>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681a      	ldr	r2, [r3, #0]
 8004b96:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004b98:	4b48      	ldr	r3, [pc, #288]	@ (8004cbc <HAL_FDCAN_IRQHandler+0x264>)
 8004b9a:	400b      	ands	r3, r1
 8004b9c:	6513      	str	r3, [r2, #80]	@ 0x50
 8004b9e:	4a46      	ldr	r2, [pc, #280]	@ (8004cb8 <HAL_FDCAN_IRQHandler+0x260>)
 8004ba0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004ba2:	0f9b      	lsrs	r3, r3, #30
 8004ba4:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8004ba6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004ba8:	6878      	ldr	r0, [r7, #4]
 8004baa:	f000 f9ac 	bl	8004f06 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8004bae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d00d      	beq.n	8004bd0 <HAL_FDCAN_IRQHandler+0x178>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681a      	ldr	r2, [r3, #0]
 8004bb8:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8004bba:	4b40      	ldr	r3, [pc, #256]	@ (8004cbc <HAL_FDCAN_IRQHandler+0x264>)
 8004bbc:	400b      	ands	r3, r1
 8004bbe:	6513      	str	r3, [r2, #80]	@ 0x50
 8004bc0:	4a3d      	ldr	r2, [pc, #244]	@ (8004cb8 <HAL_FDCAN_IRQHandler+0x260>)
 8004bc2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004bc4:	0f9b      	lsrs	r3, r3, #30
 8004bc6:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8004bc8:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	f7fc f914 	bl	8000df8 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8004bd0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d00d      	beq.n	8004bf2 <HAL_FDCAN_IRQHandler+0x19a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681a      	ldr	r2, [r3, #0]
 8004bda:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8004bdc:	4b37      	ldr	r3, [pc, #220]	@ (8004cbc <HAL_FDCAN_IRQHandler+0x264>)
 8004bde:	400b      	ands	r3, r1
 8004be0:	6513      	str	r3, [r2, #80]	@ 0x50
 8004be2:	4a35      	ldr	r2, [pc, #212]	@ (8004cb8 <HAL_FDCAN_IRQHandler+0x260>)
 8004be4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004be6:	0f9b      	lsrs	r3, r3, #30
 8004be8:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8004bea:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8004bec:	6878      	ldr	r0, [r7, #4]
 8004bee:	f000 f995 	bl	8004f1c <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8004bf2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004bf4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d00f      	beq.n	8004c1c <HAL_FDCAN_IRQHandler+0x1c4>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8004bfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bfe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d00a      	beq.n	8004c1c <HAL_FDCAN_IRQHandler+0x1c4>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004c0e:	651a      	str	r2, [r3, #80]	@ 0x50
 8004c10:	4b29      	ldr	r3, [pc, #164]	@ (8004cb8 <HAL_FDCAN_IRQHandler+0x260>)
 8004c12:	2200      	movs	r2, #0
 8004c14:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8004c16:	6878      	ldr	r0, [r7, #4]
 8004c18:	f000 f98b 	bl	8004f32 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 8004c1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c1e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d01c      	beq.n	8004c60 <HAL_FDCAN_IRQHandler+0x208>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8004c26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c28:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d017      	beq.n	8004c60 <HAL_FDCAN_IRQHandler+0x208>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004c38:	633b      	str	r3, [r7, #48]	@ 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004c42:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c44:	4013      	ands	r3, r2
 8004c46:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004c50:	651a      	str	r2, [r3, #80]	@ 0x50
 8004c52:	4b19      	ldr	r3, [pc, #100]	@ (8004cb8 <HAL_FDCAN_IRQHandler+0x260>)
 8004c54:	2200      	movs	r2, #0
 8004c56:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8004c58:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f000 f973 	bl	8004f46 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 8004c60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c62:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d00f      	beq.n	8004c8a <HAL_FDCAN_IRQHandler+0x232>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 8004c6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c6c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d00a      	beq.n	8004c8a <HAL_FDCAN_IRQHandler+0x232>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8004c7c:	651a      	str	r2, [r3, #80]	@ 0x50
 8004c7e:	4b0e      	ldr	r3, [pc, #56]	@ (8004cb8 <HAL_FDCAN_IRQHandler+0x260>)
 8004c80:	2200      	movs	r2, #0
 8004c82:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8004c84:	6878      	ldr	r0, [r7, #4]
 8004c86:	f000 f974 	bl	8004f72 <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8004c8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c8c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d015      	beq.n	8004cc0 <HAL_FDCAN_IRQHandler+0x268>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8004c94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c96:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d010      	beq.n	8004cc0 <HAL_FDCAN_IRQHandler+0x268>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8004ca6:	651a      	str	r2, [r3, #80]	@ 0x50
 8004ca8:	4b03      	ldr	r3, [pc, #12]	@ (8004cb8 <HAL_FDCAN_IRQHandler+0x260>)
 8004caa:	2200      	movs	r2, #0
 8004cac:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	f000 f969 	bl	8004f86 <HAL_FDCAN_TimestampWraparoundCallback>
 8004cb4:	e004      	b.n	8004cc0 <HAL_FDCAN_IRQHandler+0x268>
 8004cb6:	bf00      	nop
 8004cb8:	4000a800 	.word	0x4000a800
 8004cbc:	3fcfffff 	.word	0x3fcfffff
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8004cc0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004cc2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d00f      	beq.n	8004cea <HAL_FDCAN_IRQHandler+0x292>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8004cca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ccc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d00a      	beq.n	8004cea <HAL_FDCAN_IRQHandler+0x292>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8004cdc:	651a      	str	r2, [r3, #80]	@ 0x50
 8004cde:	4b81      	ldr	r3, [pc, #516]	@ (8004ee4 <HAL_FDCAN_IRQHandler+0x48c>)
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8004ce4:	6878      	ldr	r0, [r7, #4]
 8004ce6:	f000 f958 	bl	8004f9a <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8004cea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004cec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d014      	beq.n	8004d1e <HAL_FDCAN_IRQHandler+0x2c6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8004cf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cf6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d00f      	beq.n	8004d1e <HAL_FDCAN_IRQHandler+0x2c6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004d06:	651a      	str	r2, [r3, #80]	@ 0x50
 8004d08:	4b76      	ldr	r3, [pc, #472]	@ (8004ee4 <HAL_FDCAN_IRQHandler+0x48c>)
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004d14:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8004d1e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d00d      	beq.n	8004d40 <HAL_FDCAN_IRQHandler+0x2e8>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681a      	ldr	r2, [r3, #0]
 8004d28:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004d2a:	4b6f      	ldr	r3, [pc, #444]	@ (8004ee8 <HAL_FDCAN_IRQHandler+0x490>)
 8004d2c:	400b      	ands	r3, r1
 8004d2e:	6513      	str	r3, [r2, #80]	@ 0x50
 8004d30:	4a6c      	ldr	r2, [pc, #432]	@ (8004ee4 <HAL_FDCAN_IRQHandler+0x48c>)
 8004d32:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d34:	0f9b      	lsrs	r3, r3, #30
 8004d36:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8004d38:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004d3a:	6878      	ldr	r0, [r7, #4]
 8004d3c:	f000 f94b 	bl	8004fd6 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8004d40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d011      	beq.n	8004d6a <HAL_FDCAN_IRQHandler+0x312>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681a      	ldr	r2, [r3, #0]
 8004d4a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004d4c:	4b66      	ldr	r3, [pc, #408]	@ (8004ee8 <HAL_FDCAN_IRQHandler+0x490>)
 8004d4e:	400b      	ands	r3, r1
 8004d50:	6513      	str	r3, [r2, #80]	@ 0x50
 8004d52:	4a64      	ldr	r2, [pc, #400]	@ (8004ee4 <HAL_FDCAN_IRQHandler+0x48c>)
 8004d54:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d56:	0f9b      	lsrs	r3, r3, #30
 8004d58:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8004d60:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d62:	431a      	orrs	r2, r3
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a5f      	ldr	r2, [pc, #380]	@ (8004eec <HAL_FDCAN_IRQHandler+0x494>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	f040 80aa 	bne.w	8004eca <HAL_FDCAN_IRQHandler+0x472>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	689b      	ldr	r3, [r3, #8]
 8004d7c:	f003 0303 	and.w	r3, r3, #3
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	f000 80a2 	beq.w	8004eca <HAL_FDCAN_IRQHandler+0x472>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	6a1b      	ldr	r3, [r3, #32]
 8004d8c:	f003 030f 	and.w	r3, r3, #15
 8004d90:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d98:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004d9a:	4013      	ands	r3, r2
 8004d9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	6a1b      	ldr	r3, [r3, #32]
 8004da4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004da8:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004db0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004db2:	4013      	ands	r3, r2
 8004db4:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	6a1b      	ldr	r3, [r3, #32]
 8004dbc:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8004dc0:	627b      	str	r3, [r7, #36]	@ 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dc8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004dca:	4013      	ands	r3, r2
 8004dcc:	627b      	str	r3, [r7, #36]	@ 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	685b      	ldr	r3, [r3, #4]
 8004dd2:	6a1b      	ldr	r3, [r3, #32]
 8004dd4:	f403 43fc 	and.w	r3, r3, #32256	@ 0x7e00
 8004dd8:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004de0:	6a3a      	ldr	r2, [r7, #32]
 8004de2:	4013      	ands	r3, r2
 8004de4:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	6a1b      	ldr	r3, [r3, #32]
 8004dec:	f403 23f0 	and.w	r3, r3, #491520	@ 0x78000
 8004df0:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004df8:	69fa      	ldr	r2, [r7, #28]
 8004dfa:	4013      	ands	r3, r2
 8004dfc:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	685b      	ldr	r3, [r3, #4]
 8004e02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e04:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	6a1b      	ldr	r3, [r3, #32]
 8004e0c:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8004e0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d007      	beq.n	8004e24 <HAL_FDCAN_IRQHandler+0x3cc>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004e1a:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8004e1c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	f000 f8e4 	bl	8004fec <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 8004e24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d007      	beq.n	8004e3a <HAL_FDCAN_IRQHandler+0x3e2>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004e30:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8004e32:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004e34:	6878      	ldr	r0, [r7, #4]
 8004e36:	f000 f8e4 	bl	8005002 <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 8004e3a:	69bb      	ldr	r3, [r7, #24]
 8004e3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d019      	beq.n	8004e78 <HAL_FDCAN_IRQHandler+0x420>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 8004e44:	697b      	ldr	r3, [r7, #20]
 8004e46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d014      	beq.n	8004e78 <HAL_FDCAN_IRQHandler+0x420>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e54:	0c1b      	lsrs	r3, r3, #16
 8004e56:	b29b      	uxth	r3, r3
 8004e58:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	685b      	ldr	r3, [r3, #4]
 8004e5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e60:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004e64:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	2240      	movs	r2, #64	@ 0x40
 8004e6c:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8004e6e:	68fa      	ldr	r2, [r7, #12]
 8004e70:	6939      	ldr	r1, [r7, #16]
 8004e72:	6878      	ldr	r0, [r7, #4]
 8004e74:	f000 f8d0 	bl	8005018 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8004e78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d007      	beq.n	8004e8e <HAL_FDCAN_IRQHandler+0x436>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e84:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8004e86:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004e88:	6878      	ldr	r0, [r7, #4]
 8004e8a:	f000 f8d1 	bl	8005030 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 8004e8e:	6a3b      	ldr	r3, [r7, #32]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d00b      	beq.n	8004eac <HAL_FDCAN_IRQHandler+0x454>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	6a3a      	ldr	r2, [r7, #32]
 8004e9a:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8004ea2:	6a3b      	ldr	r3, [r7, #32]
 8004ea4:	431a      	orrs	r2, r3
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8004eac:	69fb      	ldr	r3, [r7, #28]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d00b      	beq.n	8004eca <HAL_FDCAN_IRQHandler+0x472>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	69fa      	ldr	r2, [r7, #28]
 8004eb8:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8004ec0:	69fb      	ldr	r3, [r7, #28]
 8004ec2:	431a      	orrs	r2, r3
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d002      	beq.n	8004eda <HAL_FDCAN_IRQHandler+0x482>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8004ed4:	6878      	ldr	r0, [r7, #4]
 8004ed6:	f000 f874 	bl	8004fc2 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8004eda:	bf00      	nop
 8004edc:	3758      	adds	r7, #88	@ 0x58
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}
 8004ee2:	bf00      	nop
 8004ee4:	4000a800 	.word	0x4000a800
 8004ee8:	3fcfffff 	.word	0x3fcfffff
 8004eec:	4000a000 	.word	0x4000a000

08004ef0 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b083      	sub	sp, #12
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
 8004ef8:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 8004efa:	bf00      	nop
 8004efc:	370c      	adds	r7, #12
 8004efe:	46bd      	mov	sp, r7
 8004f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f04:	4770      	bx	lr

08004f06 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8004f06:	b480      	push	{r7}
 8004f08:	b083      	sub	sp, #12
 8004f0a:	af00      	add	r7, sp, #0
 8004f0c:	6078      	str	r0, [r7, #4]
 8004f0e:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8004f10:	bf00      	nop
 8004f12:	370c      	adds	r7, #12
 8004f14:	46bd      	mov	sp, r7
 8004f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1a:	4770      	bx	lr

08004f1c <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	b083      	sub	sp, #12
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
 8004f24:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8004f26:	bf00      	nop
 8004f28:	370c      	adds	r7, #12
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f30:	4770      	bx	lr

08004f32 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004f32:	b480      	push	{r7}
 8004f34:	b083      	sub	sp, #12
 8004f36:	af00      	add	r7, sp, #0
 8004f38:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8004f3a:	bf00      	nop
 8004f3c:	370c      	adds	r7, #12
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f44:	4770      	bx	lr

08004f46 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8004f46:	b480      	push	{r7}
 8004f48:	b083      	sub	sp, #12
 8004f4a:	af00      	add	r7, sp, #0
 8004f4c:	6078      	str	r0, [r7, #4]
 8004f4e:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8004f50:	bf00      	nop
 8004f52:	370c      	adds	r7, #12
 8004f54:	46bd      	mov	sp, r7
 8004f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5a:	4770      	bx	lr

08004f5c <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	b083      	sub	sp, #12
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
 8004f64:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8004f66:	bf00      	nop
 8004f68:	370c      	adds	r7, #12
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f70:	4770      	bx	lr

08004f72 <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004f72:	b480      	push	{r7}
 8004f74:	b083      	sub	sp, #12
 8004f76:	af00      	add	r7, sp, #0
 8004f78:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 8004f7a:	bf00      	nop
 8004f7c:	370c      	adds	r7, #12
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f84:	4770      	bx	lr

08004f86 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004f86:	b480      	push	{r7}
 8004f88:	b083      	sub	sp, #12
 8004f8a:	af00      	add	r7, sp, #0
 8004f8c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8004f8e:	bf00      	nop
 8004f90:	370c      	adds	r7, #12
 8004f92:	46bd      	mov	sp, r7
 8004f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f98:	4770      	bx	lr

08004f9a <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004f9a:	b480      	push	{r7}
 8004f9c:	b083      	sub	sp, #12
 8004f9e:	af00      	add	r7, sp, #0
 8004fa0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8004fa2:	bf00      	nop
 8004fa4:	370c      	adds	r7, #12
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fac:	4770      	bx	lr

08004fae <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004fae:	b480      	push	{r7}
 8004fb0:	b083      	sub	sp, #12
 8004fb2:	af00      	add	r7, sp, #0
 8004fb4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8004fb6:	bf00      	nop
 8004fb8:	370c      	adds	r7, #12
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc0:	4770      	bx	lr

08004fc2 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004fc2:	b480      	push	{r7}
 8004fc4:	b083      	sub	sp, #12
 8004fc6:	af00      	add	r7, sp, #0
 8004fc8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8004fca:	bf00      	nop
 8004fcc:	370c      	adds	r7, #12
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd4:	4770      	bx	lr

08004fd6 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8004fd6:	b480      	push	{r7}
 8004fd8:	b083      	sub	sp, #12
 8004fda:	af00      	add	r7, sp, #0
 8004fdc:	6078      	str	r0, [r7, #4]
 8004fde:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8004fe0:	bf00      	nop
 8004fe2:	370c      	adds	r7, #12
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fea:	4770      	bx	lr

08004fec <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 8004fec:	b480      	push	{r7}
 8004fee:	b083      	sub	sp, #12
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
 8004ff4:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 8004ff6:	bf00      	nop
 8004ff8:	370c      	adds	r7, #12
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005000:	4770      	bx	lr

08005002 <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 8005002:	b480      	push	{r7}
 8005004:	b083      	sub	sp, #12
 8005006:	af00      	add	r7, sp, #0
 8005008:	6078      	str	r0, [r7, #4]
 800500a:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 800500c:	bf00      	nop
 800500e:	370c      	adds	r7, #12
 8005010:	46bd      	mov	sp, r7
 8005012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005016:	4770      	bx	lr

08005018 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 8005018:	b480      	push	{r7}
 800501a:	b085      	sub	sp, #20
 800501c:	af00      	add	r7, sp, #0
 800501e:	60f8      	str	r0, [r7, #12]
 8005020:	60b9      	str	r1, [r7, #8]
 8005022:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 8005024:	bf00      	nop
 8005026:	3714      	adds	r7, #20
 8005028:	46bd      	mov	sp, r7
 800502a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502e:	4770      	bx	lr

08005030 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 8005030:	b480      	push	{r7}
 8005032:	b083      	sub	sp, #12
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
 8005038:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 800503a:	bf00      	nop
 800503c:	370c      	adds	r7, #12
 800503e:	46bd      	mov	sp, r7
 8005040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005044:	4770      	bx	lr
	...

08005048 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8005048:	b480      	push	{r7}
 800504a:	b085      	sub	sp, #20
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005054:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800505e:	4ba7      	ldr	r3, [pc, #668]	@ (80052fc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005060:	4013      	ands	r3, r2
 8005062:	68ba      	ldr	r2, [r7, #8]
 8005064:	0091      	lsls	r1, r2, #2
 8005066:	687a      	ldr	r2, [r7, #4]
 8005068:	6812      	ldr	r2, [r2, #0]
 800506a:	430b      	orrs	r3, r1
 800506c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005078:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005080:	041a      	lsls	r2, r3, #16
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	430a      	orrs	r2, r1
 8005088:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005090:	68ba      	ldr	r2, [r7, #8]
 8005092:	4413      	add	r3, r2
 8005094:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800509e:	4b97      	ldr	r3, [pc, #604]	@ (80052fc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80050a0:	4013      	ands	r3, r2
 80050a2:	68ba      	ldr	r2, [r7, #8]
 80050a4:	0091      	lsls	r1, r2, #2
 80050a6:	687a      	ldr	r2, [r7, #4]
 80050a8:	6812      	ldr	r2, [r2, #0]
 80050aa:	430b      	orrs	r3, r1
 80050ac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050b8:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050c0:	041a      	lsls	r2, r3, #16
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	430a      	orrs	r2, r1
 80050c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050d0:	005b      	lsls	r3, r3, #1
 80050d2:	68ba      	ldr	r2, [r7, #8]
 80050d4:	4413      	add	r3, r2
 80050d6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80050e0:	4b86      	ldr	r3, [pc, #536]	@ (80052fc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80050e2:	4013      	ands	r3, r2
 80050e4:	68ba      	ldr	r2, [r7, #8]
 80050e6:	0091      	lsls	r1, r2, #2
 80050e8:	687a      	ldr	r2, [r7, #4]
 80050ea:	6812      	ldr	r2, [r2, #0]
 80050ec:	430b      	orrs	r3, r1
 80050ee:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80050fa:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005102:	041a      	lsls	r2, r3, #16
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	430a      	orrs	r2, r1
 800510a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005112:	687a      	ldr	r2, [r7, #4]
 8005114:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8005116:	fb02 f303 	mul.w	r3, r2, r3
 800511a:	68ba      	ldr	r2, [r7, #8]
 800511c:	4413      	add	r3, r2
 800511e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8005128:	4b74      	ldr	r3, [pc, #464]	@ (80052fc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800512a:	4013      	ands	r3, r2
 800512c:	68ba      	ldr	r2, [r7, #8]
 800512e:	0091      	lsls	r1, r2, #2
 8005130:	687a      	ldr	r2, [r7, #4]
 8005132:	6812      	ldr	r2, [r2, #0]
 8005134:	430b      	orrs	r3, r1
 8005136:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005142:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800514a:	041a      	lsls	r2, r3, #16
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	430a      	orrs	r2, r1
 8005152:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800515a:	687a      	ldr	r2, [r7, #4]
 800515c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800515e:	fb02 f303 	mul.w	r3, r2, r3
 8005162:	68ba      	ldr	r2, [r7, #8]
 8005164:	4413      	add	r3, r2
 8005166:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 8005170:	4b62      	ldr	r3, [pc, #392]	@ (80052fc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005172:	4013      	ands	r3, r2
 8005174:	68ba      	ldr	r2, [r7, #8]
 8005176:	0091      	lsls	r1, r2, #2
 8005178:	687a      	ldr	r2, [r7, #4]
 800517a:	6812      	ldr	r2, [r2, #0]
 800517c:	430b      	orrs	r3, r1
 800517e:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005186:	687a      	ldr	r2, [r7, #4]
 8005188:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800518a:	fb02 f303 	mul.w	r3, r2, r3
 800518e:	68ba      	ldr	r2, [r7, #8]
 8005190:	4413      	add	r3, r2
 8005192:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 800519c:	4b57      	ldr	r3, [pc, #348]	@ (80052fc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800519e:	4013      	ands	r3, r2
 80051a0:	68ba      	ldr	r2, [r7, #8]
 80051a2:	0091      	lsls	r1, r2, #2
 80051a4:	687a      	ldr	r2, [r7, #4]
 80051a6:	6812      	ldr	r2, [r2, #0]
 80051a8:	430b      	orrs	r3, r1
 80051aa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80051b6:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051be:	041a      	lsls	r2, r3, #16
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	430a      	orrs	r2, r1
 80051c6:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051ce:	005b      	lsls	r3, r3, #1
 80051d0:	68ba      	ldr	r2, [r7, #8]
 80051d2:	4413      	add	r3, r2
 80051d4:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 80051de:	4b47      	ldr	r3, [pc, #284]	@ (80052fc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80051e0:	4013      	ands	r3, r2
 80051e2:	68ba      	ldr	r2, [r7, #8]
 80051e4:	0091      	lsls	r1, r2, #2
 80051e6:	687a      	ldr	r2, [r7, #4]
 80051e8:	6812      	ldr	r2, [r2, #0]
 80051ea:	430b      	orrs	r3, r1
 80051ec:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80051f8:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005200:	041a      	lsls	r2, r3, #16
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	430a      	orrs	r2, r1
 8005208:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005214:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800521c:	061a      	lsls	r2, r3, #24
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	430a      	orrs	r2, r1
 8005224:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800522c:	4b34      	ldr	r3, [pc, #208]	@ (8005300 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 800522e:	4413      	add	r3, r2
 8005230:	009a      	lsls	r2, r3, #2
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800523e:	009b      	lsls	r3, r3, #2
 8005240:	441a      	add	r2, r3
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800524e:	00db      	lsls	r3, r3, #3
 8005250:	441a      	add	r2, r3
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800525e:	6879      	ldr	r1, [r7, #4]
 8005260:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 8005262:	fb01 f303 	mul.w	r3, r1, r3
 8005266:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8005268:	441a      	add	r2, r3
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005276:	6879      	ldr	r1, [r7, #4]
 8005278:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 800527a:	fb01 f303 	mul.w	r3, r1, r3
 800527e:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8005280:	441a      	add	r2, r3
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800528e:	6879      	ldr	r1, [r7, #4]
 8005290:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 8005292:	fb01 f303 	mul.w	r3, r1, r3
 8005296:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8005298:	441a      	add	r2, r3
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052aa:	00db      	lsls	r3, r3, #3
 80052ac:	441a      	add	r2, r3
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052be:	6879      	ldr	r1, [r7, #4]
 80052c0:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 80052c2:	fb01 f303 	mul.w	r3, r1, r3
 80052c6:	009b      	lsls	r3, r3, #2
 80052c8:	441a      	add	r2, r3
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80052da:	6879      	ldr	r1, [r7, #4]
 80052dc:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 80052de:	fb01 f303 	mul.w	r3, r1, r3
 80052e2:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 80052e4:	441a      	add	r2, r3
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052f2:	4a04      	ldr	r2, [pc, #16]	@ (8005304 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d915      	bls.n	8005324 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 80052f8:	e006      	b.n	8005308 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 80052fa:	bf00      	nop
 80052fc:	ffff0003 	.word	0xffff0003
 8005300:	10002b00 	.word	0x10002b00
 8005304:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800530e:	f043 0220 	orr.w	r2, r3, #32
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2203      	movs	r2, #3
 800531c:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 8005320:	2301      	movs	r3, #1
 8005322:	e010      	b.n	8005346 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005328:	60fb      	str	r3, [r7, #12]
 800532a:	e005      	b.n	8005338 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	2200      	movs	r2, #0
 8005330:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	3304      	adds	r3, #4
 8005336:	60fb      	str	r3, [r7, #12]
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800533e:	68fa      	ldr	r2, [r7, #12]
 8005340:	429a      	cmp	r2, r3
 8005342:	d3f3      	bcc.n	800532c <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8005344:	2300      	movs	r3, #0
}
 8005346:	4618      	mov	r0, r3
 8005348:	3714      	adds	r7, #20
 800534a:	46bd      	mov	sp, r7
 800534c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005350:	4770      	bx	lr
 8005352:	bf00      	nop

08005354 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8005354:	b480      	push	{r7}
 8005356:	b089      	sub	sp, #36	@ 0x24
 8005358:	af00      	add	r7, sp, #0
 800535a:	60f8      	str	r0, [r7, #12]
 800535c:	60b9      	str	r1, [r7, #8]
 800535e:	607a      	str	r2, [r7, #4]
 8005360:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	685b      	ldr	r3, [r3, #4]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d10a      	bne.n	8005380 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800536a:	68bb      	ldr	r3, [r7, #8]
 800536c:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8005372:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800537a:	4313      	orrs	r3, r2
 800537c:	61fb      	str	r3, [r7, #28]
 800537e:	e00a      	b.n	8005396 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8005388:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 800538e:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005390:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005394:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	6a1b      	ldr	r3, [r3, #32]
 800539a:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80053a0:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 80053a6:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 80053ac:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 80053ae:	68bb      	ldr	r3, [r7, #8]
 80053b0:	68db      	ldr	r3, [r3, #12]
 80053b2:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80053b4:	4313      	orrs	r3, r2
 80053b6:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80053c2:	6839      	ldr	r1, [r7, #0]
 80053c4:	fb01 f303 	mul.w	r3, r1, r3
 80053c8:	009b      	lsls	r3, r3, #2
 80053ca:	4413      	add	r3, r2
 80053cc:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 80053ce:	69bb      	ldr	r3, [r7, #24]
 80053d0:	69fa      	ldr	r2, [r7, #28]
 80053d2:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80053d4:	69bb      	ldr	r3, [r7, #24]
 80053d6:	3304      	adds	r3, #4
 80053d8:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 80053da:	69bb      	ldr	r3, [r7, #24]
 80053dc:	693a      	ldr	r2, [r7, #16]
 80053de:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80053e0:	69bb      	ldr	r3, [r7, #24]
 80053e2:	3304      	adds	r3, #4
 80053e4:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80053e6:	2300      	movs	r3, #0
 80053e8:	617b      	str	r3, [r7, #20]
 80053ea:	e020      	b.n	800542e <FDCAN_CopyMessageToRAM+0xda>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	3303      	adds	r3, #3
 80053f0:	687a      	ldr	r2, [r7, #4]
 80053f2:	4413      	add	r3, r2
 80053f4:	781b      	ldrb	r3, [r3, #0]
 80053f6:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80053f8:	697b      	ldr	r3, [r7, #20]
 80053fa:	3302      	adds	r3, #2
 80053fc:	6879      	ldr	r1, [r7, #4]
 80053fe:	440b      	add	r3, r1
 8005400:	781b      	ldrb	r3, [r3, #0]
 8005402:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8005404:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	3301      	adds	r3, #1
 800540a:	6879      	ldr	r1, [r7, #4]
 800540c:	440b      	add	r3, r1
 800540e:	781b      	ldrb	r3, [r3, #0]
 8005410:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8005412:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8005414:	6879      	ldr	r1, [r7, #4]
 8005416:	697a      	ldr	r2, [r7, #20]
 8005418:	440a      	add	r2, r1
 800541a:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 800541c:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800541e:	69bb      	ldr	r3, [r7, #24]
 8005420:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8005422:	69bb      	ldr	r3, [r7, #24]
 8005424:	3304      	adds	r3, #4
 8005426:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8005428:	697b      	ldr	r3, [r7, #20]
 800542a:	3304      	adds	r3, #4
 800542c:	617b      	str	r3, [r7, #20]
 800542e:	68bb      	ldr	r3, [r7, #8]
 8005430:	68db      	ldr	r3, [r3, #12]
 8005432:	4a06      	ldr	r2, [pc, #24]	@ (800544c <FDCAN_CopyMessageToRAM+0xf8>)
 8005434:	5cd3      	ldrb	r3, [r2, r3]
 8005436:	461a      	mov	r2, r3
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	4293      	cmp	r3, r2
 800543c:	d3d6      	bcc.n	80053ec <FDCAN_CopyMessageToRAM+0x98>
  }
}
 800543e:	bf00      	nop
 8005440:	bf00      	nop
 8005442:	3724      	adds	r7, #36	@ 0x24
 8005444:	46bd      	mov	sp, r7
 8005446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544a:	4770      	bx	lr
 800544c:	08012d5c 	.word	0x08012d5c

08005450 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005450:	b480      	push	{r7}
 8005452:	b089      	sub	sp, #36	@ 0x24
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
 8005458:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800545a:	2300      	movs	r3, #0
 800545c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800545e:	4b86      	ldr	r3, [pc, #536]	@ (8005678 <HAL_GPIO_Init+0x228>)
 8005460:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005462:	e18c      	b.n	800577e <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	681a      	ldr	r2, [r3, #0]
 8005468:	2101      	movs	r1, #1
 800546a:	69fb      	ldr	r3, [r7, #28]
 800546c:	fa01 f303 	lsl.w	r3, r1, r3
 8005470:	4013      	ands	r3, r2
 8005472:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005474:	693b      	ldr	r3, [r7, #16]
 8005476:	2b00      	cmp	r3, #0
 8005478:	f000 817e 	beq.w	8005778 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	685b      	ldr	r3, [r3, #4]
 8005480:	f003 0303 	and.w	r3, r3, #3
 8005484:	2b01      	cmp	r3, #1
 8005486:	d005      	beq.n	8005494 <HAL_GPIO_Init+0x44>
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	685b      	ldr	r3, [r3, #4]
 800548c:	f003 0303 	and.w	r3, r3, #3
 8005490:	2b02      	cmp	r3, #2
 8005492:	d130      	bne.n	80054f6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	689b      	ldr	r3, [r3, #8]
 8005498:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800549a:	69fb      	ldr	r3, [r7, #28]
 800549c:	005b      	lsls	r3, r3, #1
 800549e:	2203      	movs	r2, #3
 80054a0:	fa02 f303 	lsl.w	r3, r2, r3
 80054a4:	43db      	mvns	r3, r3
 80054a6:	69ba      	ldr	r2, [r7, #24]
 80054a8:	4013      	ands	r3, r2
 80054aa:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	68da      	ldr	r2, [r3, #12]
 80054b0:	69fb      	ldr	r3, [r7, #28]
 80054b2:	005b      	lsls	r3, r3, #1
 80054b4:	fa02 f303 	lsl.w	r3, r2, r3
 80054b8:	69ba      	ldr	r2, [r7, #24]
 80054ba:	4313      	orrs	r3, r2
 80054bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	69ba      	ldr	r2, [r7, #24]
 80054c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80054ca:	2201      	movs	r2, #1
 80054cc:	69fb      	ldr	r3, [r7, #28]
 80054ce:	fa02 f303 	lsl.w	r3, r2, r3
 80054d2:	43db      	mvns	r3, r3
 80054d4:	69ba      	ldr	r2, [r7, #24]
 80054d6:	4013      	ands	r3, r2
 80054d8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	685b      	ldr	r3, [r3, #4]
 80054de:	091b      	lsrs	r3, r3, #4
 80054e0:	f003 0201 	and.w	r2, r3, #1
 80054e4:	69fb      	ldr	r3, [r7, #28]
 80054e6:	fa02 f303 	lsl.w	r3, r2, r3
 80054ea:	69ba      	ldr	r2, [r7, #24]
 80054ec:	4313      	orrs	r3, r2
 80054ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	69ba      	ldr	r2, [r7, #24]
 80054f4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	685b      	ldr	r3, [r3, #4]
 80054fa:	f003 0303 	and.w	r3, r3, #3
 80054fe:	2b03      	cmp	r3, #3
 8005500:	d017      	beq.n	8005532 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	68db      	ldr	r3, [r3, #12]
 8005506:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005508:	69fb      	ldr	r3, [r7, #28]
 800550a:	005b      	lsls	r3, r3, #1
 800550c:	2203      	movs	r2, #3
 800550e:	fa02 f303 	lsl.w	r3, r2, r3
 8005512:	43db      	mvns	r3, r3
 8005514:	69ba      	ldr	r2, [r7, #24]
 8005516:	4013      	ands	r3, r2
 8005518:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	689a      	ldr	r2, [r3, #8]
 800551e:	69fb      	ldr	r3, [r7, #28]
 8005520:	005b      	lsls	r3, r3, #1
 8005522:	fa02 f303 	lsl.w	r3, r2, r3
 8005526:	69ba      	ldr	r2, [r7, #24]
 8005528:	4313      	orrs	r3, r2
 800552a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	69ba      	ldr	r2, [r7, #24]
 8005530:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	685b      	ldr	r3, [r3, #4]
 8005536:	f003 0303 	and.w	r3, r3, #3
 800553a:	2b02      	cmp	r3, #2
 800553c:	d123      	bne.n	8005586 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800553e:	69fb      	ldr	r3, [r7, #28]
 8005540:	08da      	lsrs	r2, r3, #3
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	3208      	adds	r2, #8
 8005546:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800554a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800554c:	69fb      	ldr	r3, [r7, #28]
 800554e:	f003 0307 	and.w	r3, r3, #7
 8005552:	009b      	lsls	r3, r3, #2
 8005554:	220f      	movs	r2, #15
 8005556:	fa02 f303 	lsl.w	r3, r2, r3
 800555a:	43db      	mvns	r3, r3
 800555c:	69ba      	ldr	r2, [r7, #24]
 800555e:	4013      	ands	r3, r2
 8005560:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	691a      	ldr	r2, [r3, #16]
 8005566:	69fb      	ldr	r3, [r7, #28]
 8005568:	f003 0307 	and.w	r3, r3, #7
 800556c:	009b      	lsls	r3, r3, #2
 800556e:	fa02 f303 	lsl.w	r3, r2, r3
 8005572:	69ba      	ldr	r2, [r7, #24]
 8005574:	4313      	orrs	r3, r2
 8005576:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005578:	69fb      	ldr	r3, [r7, #28]
 800557a:	08da      	lsrs	r2, r3, #3
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	3208      	adds	r2, #8
 8005580:	69b9      	ldr	r1, [r7, #24]
 8005582:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800558c:	69fb      	ldr	r3, [r7, #28]
 800558e:	005b      	lsls	r3, r3, #1
 8005590:	2203      	movs	r2, #3
 8005592:	fa02 f303 	lsl.w	r3, r2, r3
 8005596:	43db      	mvns	r3, r3
 8005598:	69ba      	ldr	r2, [r7, #24]
 800559a:	4013      	ands	r3, r2
 800559c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	685b      	ldr	r3, [r3, #4]
 80055a2:	f003 0203 	and.w	r2, r3, #3
 80055a6:	69fb      	ldr	r3, [r7, #28]
 80055a8:	005b      	lsls	r3, r3, #1
 80055aa:	fa02 f303 	lsl.w	r3, r2, r3
 80055ae:	69ba      	ldr	r2, [r7, #24]
 80055b0:	4313      	orrs	r3, r2
 80055b2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	69ba      	ldr	r2, [r7, #24]
 80055b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	f000 80d8 	beq.w	8005778 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80055c8:	4b2c      	ldr	r3, [pc, #176]	@ (800567c <HAL_GPIO_Init+0x22c>)
 80055ca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80055ce:	4a2b      	ldr	r2, [pc, #172]	@ (800567c <HAL_GPIO_Init+0x22c>)
 80055d0:	f043 0302 	orr.w	r3, r3, #2
 80055d4:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80055d8:	4b28      	ldr	r3, [pc, #160]	@ (800567c <HAL_GPIO_Init+0x22c>)
 80055da:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80055de:	f003 0302 	and.w	r3, r3, #2
 80055e2:	60fb      	str	r3, [r7, #12]
 80055e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80055e6:	4a26      	ldr	r2, [pc, #152]	@ (8005680 <HAL_GPIO_Init+0x230>)
 80055e8:	69fb      	ldr	r3, [r7, #28]
 80055ea:	089b      	lsrs	r3, r3, #2
 80055ec:	3302      	adds	r3, #2
 80055ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80055f4:	69fb      	ldr	r3, [r7, #28]
 80055f6:	f003 0303 	and.w	r3, r3, #3
 80055fa:	009b      	lsls	r3, r3, #2
 80055fc:	220f      	movs	r2, #15
 80055fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005602:	43db      	mvns	r3, r3
 8005604:	69ba      	ldr	r2, [r7, #24]
 8005606:	4013      	ands	r3, r2
 8005608:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	4a1d      	ldr	r2, [pc, #116]	@ (8005684 <HAL_GPIO_Init+0x234>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d04a      	beq.n	80056a8 <HAL_GPIO_Init+0x258>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	4a1c      	ldr	r2, [pc, #112]	@ (8005688 <HAL_GPIO_Init+0x238>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d02b      	beq.n	8005672 <HAL_GPIO_Init+0x222>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	4a1b      	ldr	r2, [pc, #108]	@ (800568c <HAL_GPIO_Init+0x23c>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d025      	beq.n	800566e <HAL_GPIO_Init+0x21e>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	4a1a      	ldr	r2, [pc, #104]	@ (8005690 <HAL_GPIO_Init+0x240>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d01f      	beq.n	800566a <HAL_GPIO_Init+0x21a>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	4a19      	ldr	r2, [pc, #100]	@ (8005694 <HAL_GPIO_Init+0x244>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d019      	beq.n	8005666 <HAL_GPIO_Init+0x216>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	4a18      	ldr	r2, [pc, #96]	@ (8005698 <HAL_GPIO_Init+0x248>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d013      	beq.n	8005662 <HAL_GPIO_Init+0x212>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	4a17      	ldr	r2, [pc, #92]	@ (800569c <HAL_GPIO_Init+0x24c>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d00d      	beq.n	800565e <HAL_GPIO_Init+0x20e>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	4a16      	ldr	r2, [pc, #88]	@ (80056a0 <HAL_GPIO_Init+0x250>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d007      	beq.n	800565a <HAL_GPIO_Init+0x20a>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	4a15      	ldr	r2, [pc, #84]	@ (80056a4 <HAL_GPIO_Init+0x254>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d101      	bne.n	8005656 <HAL_GPIO_Init+0x206>
 8005652:	2309      	movs	r3, #9
 8005654:	e029      	b.n	80056aa <HAL_GPIO_Init+0x25a>
 8005656:	230a      	movs	r3, #10
 8005658:	e027      	b.n	80056aa <HAL_GPIO_Init+0x25a>
 800565a:	2307      	movs	r3, #7
 800565c:	e025      	b.n	80056aa <HAL_GPIO_Init+0x25a>
 800565e:	2306      	movs	r3, #6
 8005660:	e023      	b.n	80056aa <HAL_GPIO_Init+0x25a>
 8005662:	2305      	movs	r3, #5
 8005664:	e021      	b.n	80056aa <HAL_GPIO_Init+0x25a>
 8005666:	2304      	movs	r3, #4
 8005668:	e01f      	b.n	80056aa <HAL_GPIO_Init+0x25a>
 800566a:	2303      	movs	r3, #3
 800566c:	e01d      	b.n	80056aa <HAL_GPIO_Init+0x25a>
 800566e:	2302      	movs	r3, #2
 8005670:	e01b      	b.n	80056aa <HAL_GPIO_Init+0x25a>
 8005672:	2301      	movs	r3, #1
 8005674:	e019      	b.n	80056aa <HAL_GPIO_Init+0x25a>
 8005676:	bf00      	nop
 8005678:	58000080 	.word	0x58000080
 800567c:	58024400 	.word	0x58024400
 8005680:	58000400 	.word	0x58000400
 8005684:	58020000 	.word	0x58020000
 8005688:	58020400 	.word	0x58020400
 800568c:	58020800 	.word	0x58020800
 8005690:	58020c00 	.word	0x58020c00
 8005694:	58021000 	.word	0x58021000
 8005698:	58021400 	.word	0x58021400
 800569c:	58021800 	.word	0x58021800
 80056a0:	58021c00 	.word	0x58021c00
 80056a4:	58022400 	.word	0x58022400
 80056a8:	2300      	movs	r3, #0
 80056aa:	69fa      	ldr	r2, [r7, #28]
 80056ac:	f002 0203 	and.w	r2, r2, #3
 80056b0:	0092      	lsls	r2, r2, #2
 80056b2:	4093      	lsls	r3, r2
 80056b4:	69ba      	ldr	r2, [r7, #24]
 80056b6:	4313      	orrs	r3, r2
 80056b8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80056ba:	4938      	ldr	r1, [pc, #224]	@ (800579c <HAL_GPIO_Init+0x34c>)
 80056bc:	69fb      	ldr	r3, [r7, #28]
 80056be:	089b      	lsrs	r3, r3, #2
 80056c0:	3302      	adds	r3, #2
 80056c2:	69ba      	ldr	r2, [r7, #24]
 80056c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80056c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80056d0:	693b      	ldr	r3, [r7, #16]
 80056d2:	43db      	mvns	r3, r3
 80056d4:	69ba      	ldr	r2, [r7, #24]
 80056d6:	4013      	ands	r3, r2
 80056d8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	685b      	ldr	r3, [r3, #4]
 80056de:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d003      	beq.n	80056ee <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80056e6:	69ba      	ldr	r2, [r7, #24]
 80056e8:	693b      	ldr	r3, [r7, #16]
 80056ea:	4313      	orrs	r3, r2
 80056ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80056ee:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80056f2:	69bb      	ldr	r3, [r7, #24]
 80056f4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80056f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80056fe:	693b      	ldr	r3, [r7, #16]
 8005700:	43db      	mvns	r3, r3
 8005702:	69ba      	ldr	r2, [r7, #24]
 8005704:	4013      	ands	r3, r2
 8005706:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	685b      	ldr	r3, [r3, #4]
 800570c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005710:	2b00      	cmp	r3, #0
 8005712:	d003      	beq.n	800571c <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8005714:	69ba      	ldr	r2, [r7, #24]
 8005716:	693b      	ldr	r3, [r7, #16]
 8005718:	4313      	orrs	r3, r2
 800571a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800571c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005720:	69bb      	ldr	r3, [r7, #24]
 8005722:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005724:	697b      	ldr	r3, [r7, #20]
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800572a:	693b      	ldr	r3, [r7, #16]
 800572c:	43db      	mvns	r3, r3
 800572e:	69ba      	ldr	r2, [r7, #24]
 8005730:	4013      	ands	r3, r2
 8005732:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	685b      	ldr	r3, [r3, #4]
 8005738:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800573c:	2b00      	cmp	r3, #0
 800573e:	d003      	beq.n	8005748 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8005740:	69ba      	ldr	r2, [r7, #24]
 8005742:	693b      	ldr	r3, [r7, #16]
 8005744:	4313      	orrs	r3, r2
 8005746:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005748:	697b      	ldr	r3, [r7, #20]
 800574a:	69ba      	ldr	r2, [r7, #24]
 800574c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800574e:	697b      	ldr	r3, [r7, #20]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005754:	693b      	ldr	r3, [r7, #16]
 8005756:	43db      	mvns	r3, r3
 8005758:	69ba      	ldr	r2, [r7, #24]
 800575a:	4013      	ands	r3, r2
 800575c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	685b      	ldr	r3, [r3, #4]
 8005762:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005766:	2b00      	cmp	r3, #0
 8005768:	d003      	beq.n	8005772 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800576a:	69ba      	ldr	r2, [r7, #24]
 800576c:	693b      	ldr	r3, [r7, #16]
 800576e:	4313      	orrs	r3, r2
 8005770:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005772:	697b      	ldr	r3, [r7, #20]
 8005774:	69ba      	ldr	r2, [r7, #24]
 8005776:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005778:	69fb      	ldr	r3, [r7, #28]
 800577a:	3301      	adds	r3, #1
 800577c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	681a      	ldr	r2, [r3, #0]
 8005782:	69fb      	ldr	r3, [r7, #28]
 8005784:	fa22 f303 	lsr.w	r3, r2, r3
 8005788:	2b00      	cmp	r3, #0
 800578a:	f47f ae6b 	bne.w	8005464 <HAL_GPIO_Init+0x14>
  }
}
 800578e:	bf00      	nop
 8005790:	bf00      	nop
 8005792:	3724      	adds	r7, #36	@ 0x24
 8005794:	46bd      	mov	sp, r7
 8005796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579a:	4770      	bx	lr
 800579c:	58000400 	.word	0x58000400

080057a0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b084      	sub	sp, #16
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80057a8:	4b19      	ldr	r3, [pc, #100]	@ (8005810 <HAL_PWREx_ConfigSupply+0x70>)
 80057aa:	68db      	ldr	r3, [r3, #12]
 80057ac:	f003 0304 	and.w	r3, r3, #4
 80057b0:	2b04      	cmp	r3, #4
 80057b2:	d00a      	beq.n	80057ca <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80057b4:	4b16      	ldr	r3, [pc, #88]	@ (8005810 <HAL_PWREx_ConfigSupply+0x70>)
 80057b6:	68db      	ldr	r3, [r3, #12]
 80057b8:	f003 0307 	and.w	r3, r3, #7
 80057bc:	687a      	ldr	r2, [r7, #4]
 80057be:	429a      	cmp	r2, r3
 80057c0:	d001      	beq.n	80057c6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80057c2:	2301      	movs	r3, #1
 80057c4:	e01f      	b.n	8005806 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80057c6:	2300      	movs	r3, #0
 80057c8:	e01d      	b.n	8005806 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80057ca:	4b11      	ldr	r3, [pc, #68]	@ (8005810 <HAL_PWREx_ConfigSupply+0x70>)
 80057cc:	68db      	ldr	r3, [r3, #12]
 80057ce:	f023 0207 	bic.w	r2, r3, #7
 80057d2:	490f      	ldr	r1, [pc, #60]	@ (8005810 <HAL_PWREx_ConfigSupply+0x70>)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	4313      	orrs	r3, r2
 80057d8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80057da:	f7fd fd33 	bl	8003244 <HAL_GetTick>
 80057de:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80057e0:	e009      	b.n	80057f6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80057e2:	f7fd fd2f 	bl	8003244 <HAL_GetTick>
 80057e6:	4602      	mov	r2, r0
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	1ad3      	subs	r3, r2, r3
 80057ec:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80057f0:	d901      	bls.n	80057f6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80057f2:	2301      	movs	r3, #1
 80057f4:	e007      	b.n	8005806 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80057f6:	4b06      	ldr	r3, [pc, #24]	@ (8005810 <HAL_PWREx_ConfigSupply+0x70>)
 80057f8:	685b      	ldr	r3, [r3, #4]
 80057fa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80057fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005802:	d1ee      	bne.n	80057e2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005804:	2300      	movs	r3, #0
}
 8005806:	4618      	mov	r0, r3
 8005808:	3710      	adds	r7, #16
 800580a:	46bd      	mov	sp, r7
 800580c:	bd80      	pop	{r7, pc}
 800580e:	bf00      	nop
 8005810:	58024800 	.word	0x58024800

08005814 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b08c      	sub	sp, #48	@ 0x30
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d101      	bne.n	8005826 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005822:	2301      	movs	r3, #1
 8005824:	e3c8      	b.n	8005fb8 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f003 0301 	and.w	r3, r3, #1
 800582e:	2b00      	cmp	r3, #0
 8005830:	f000 8087 	beq.w	8005942 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005834:	4b88      	ldr	r3, [pc, #544]	@ (8005a58 <HAL_RCC_OscConfig+0x244>)
 8005836:	691b      	ldr	r3, [r3, #16]
 8005838:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800583c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800583e:	4b86      	ldr	r3, [pc, #536]	@ (8005a58 <HAL_RCC_OscConfig+0x244>)
 8005840:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005842:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005844:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005846:	2b10      	cmp	r3, #16
 8005848:	d007      	beq.n	800585a <HAL_RCC_OscConfig+0x46>
 800584a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800584c:	2b18      	cmp	r3, #24
 800584e:	d110      	bne.n	8005872 <HAL_RCC_OscConfig+0x5e>
 8005850:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005852:	f003 0303 	and.w	r3, r3, #3
 8005856:	2b02      	cmp	r3, #2
 8005858:	d10b      	bne.n	8005872 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800585a:	4b7f      	ldr	r3, [pc, #508]	@ (8005a58 <HAL_RCC_OscConfig+0x244>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005862:	2b00      	cmp	r3, #0
 8005864:	d06c      	beq.n	8005940 <HAL_RCC_OscConfig+0x12c>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d168      	bne.n	8005940 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800586e:	2301      	movs	r3, #1
 8005870:	e3a2      	b.n	8005fb8 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	685b      	ldr	r3, [r3, #4]
 8005876:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800587a:	d106      	bne.n	800588a <HAL_RCC_OscConfig+0x76>
 800587c:	4b76      	ldr	r3, [pc, #472]	@ (8005a58 <HAL_RCC_OscConfig+0x244>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4a75      	ldr	r2, [pc, #468]	@ (8005a58 <HAL_RCC_OscConfig+0x244>)
 8005882:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005886:	6013      	str	r3, [r2, #0]
 8005888:	e02e      	b.n	80058e8 <HAL_RCC_OscConfig+0xd4>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	685b      	ldr	r3, [r3, #4]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d10c      	bne.n	80058ac <HAL_RCC_OscConfig+0x98>
 8005892:	4b71      	ldr	r3, [pc, #452]	@ (8005a58 <HAL_RCC_OscConfig+0x244>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4a70      	ldr	r2, [pc, #448]	@ (8005a58 <HAL_RCC_OscConfig+0x244>)
 8005898:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800589c:	6013      	str	r3, [r2, #0]
 800589e:	4b6e      	ldr	r3, [pc, #440]	@ (8005a58 <HAL_RCC_OscConfig+0x244>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a6d      	ldr	r2, [pc, #436]	@ (8005a58 <HAL_RCC_OscConfig+0x244>)
 80058a4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80058a8:	6013      	str	r3, [r2, #0]
 80058aa:	e01d      	b.n	80058e8 <HAL_RCC_OscConfig+0xd4>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	685b      	ldr	r3, [r3, #4]
 80058b0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80058b4:	d10c      	bne.n	80058d0 <HAL_RCC_OscConfig+0xbc>
 80058b6:	4b68      	ldr	r3, [pc, #416]	@ (8005a58 <HAL_RCC_OscConfig+0x244>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4a67      	ldr	r2, [pc, #412]	@ (8005a58 <HAL_RCC_OscConfig+0x244>)
 80058bc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80058c0:	6013      	str	r3, [r2, #0]
 80058c2:	4b65      	ldr	r3, [pc, #404]	@ (8005a58 <HAL_RCC_OscConfig+0x244>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4a64      	ldr	r2, [pc, #400]	@ (8005a58 <HAL_RCC_OscConfig+0x244>)
 80058c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80058cc:	6013      	str	r3, [r2, #0]
 80058ce:	e00b      	b.n	80058e8 <HAL_RCC_OscConfig+0xd4>
 80058d0:	4b61      	ldr	r3, [pc, #388]	@ (8005a58 <HAL_RCC_OscConfig+0x244>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4a60      	ldr	r2, [pc, #384]	@ (8005a58 <HAL_RCC_OscConfig+0x244>)
 80058d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80058da:	6013      	str	r3, [r2, #0]
 80058dc:	4b5e      	ldr	r3, [pc, #376]	@ (8005a58 <HAL_RCC_OscConfig+0x244>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4a5d      	ldr	r2, [pc, #372]	@ (8005a58 <HAL_RCC_OscConfig+0x244>)
 80058e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80058e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	685b      	ldr	r3, [r3, #4]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d013      	beq.n	8005918 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058f0:	f7fd fca8 	bl	8003244 <HAL_GetTick>
 80058f4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80058f6:	e008      	b.n	800590a <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80058f8:	f7fd fca4 	bl	8003244 <HAL_GetTick>
 80058fc:	4602      	mov	r2, r0
 80058fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005900:	1ad3      	subs	r3, r2, r3
 8005902:	2b64      	cmp	r3, #100	@ 0x64
 8005904:	d901      	bls.n	800590a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005906:	2303      	movs	r3, #3
 8005908:	e356      	b.n	8005fb8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800590a:	4b53      	ldr	r3, [pc, #332]	@ (8005a58 <HAL_RCC_OscConfig+0x244>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005912:	2b00      	cmp	r3, #0
 8005914:	d0f0      	beq.n	80058f8 <HAL_RCC_OscConfig+0xe4>
 8005916:	e014      	b.n	8005942 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005918:	f7fd fc94 	bl	8003244 <HAL_GetTick>
 800591c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800591e:	e008      	b.n	8005932 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005920:	f7fd fc90 	bl	8003244 <HAL_GetTick>
 8005924:	4602      	mov	r2, r0
 8005926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005928:	1ad3      	subs	r3, r2, r3
 800592a:	2b64      	cmp	r3, #100	@ 0x64
 800592c:	d901      	bls.n	8005932 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800592e:	2303      	movs	r3, #3
 8005930:	e342      	b.n	8005fb8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005932:	4b49      	ldr	r3, [pc, #292]	@ (8005a58 <HAL_RCC_OscConfig+0x244>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800593a:	2b00      	cmp	r3, #0
 800593c:	d1f0      	bne.n	8005920 <HAL_RCC_OscConfig+0x10c>
 800593e:	e000      	b.n	8005942 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005940:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f003 0302 	and.w	r3, r3, #2
 800594a:	2b00      	cmp	r3, #0
 800594c:	f000 808c 	beq.w	8005a68 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005950:	4b41      	ldr	r3, [pc, #260]	@ (8005a58 <HAL_RCC_OscConfig+0x244>)
 8005952:	691b      	ldr	r3, [r3, #16]
 8005954:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005958:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800595a:	4b3f      	ldr	r3, [pc, #252]	@ (8005a58 <HAL_RCC_OscConfig+0x244>)
 800595c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800595e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005960:	6a3b      	ldr	r3, [r7, #32]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d007      	beq.n	8005976 <HAL_RCC_OscConfig+0x162>
 8005966:	6a3b      	ldr	r3, [r7, #32]
 8005968:	2b18      	cmp	r3, #24
 800596a:	d137      	bne.n	80059dc <HAL_RCC_OscConfig+0x1c8>
 800596c:	69fb      	ldr	r3, [r7, #28]
 800596e:	f003 0303 	and.w	r3, r3, #3
 8005972:	2b00      	cmp	r3, #0
 8005974:	d132      	bne.n	80059dc <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005976:	4b38      	ldr	r3, [pc, #224]	@ (8005a58 <HAL_RCC_OscConfig+0x244>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f003 0304 	and.w	r3, r3, #4
 800597e:	2b00      	cmp	r3, #0
 8005980:	d005      	beq.n	800598e <HAL_RCC_OscConfig+0x17a>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	68db      	ldr	r3, [r3, #12]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d101      	bne.n	800598e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800598a:	2301      	movs	r3, #1
 800598c:	e314      	b.n	8005fb8 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800598e:	4b32      	ldr	r3, [pc, #200]	@ (8005a58 <HAL_RCC_OscConfig+0x244>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f023 0219 	bic.w	r2, r3, #25
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	68db      	ldr	r3, [r3, #12]
 800599a:	492f      	ldr	r1, [pc, #188]	@ (8005a58 <HAL_RCC_OscConfig+0x244>)
 800599c:	4313      	orrs	r3, r2
 800599e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059a0:	f7fd fc50 	bl	8003244 <HAL_GetTick>
 80059a4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80059a6:	e008      	b.n	80059ba <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80059a8:	f7fd fc4c 	bl	8003244 <HAL_GetTick>
 80059ac:	4602      	mov	r2, r0
 80059ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059b0:	1ad3      	subs	r3, r2, r3
 80059b2:	2b02      	cmp	r3, #2
 80059b4:	d901      	bls.n	80059ba <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80059b6:	2303      	movs	r3, #3
 80059b8:	e2fe      	b.n	8005fb8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80059ba:	4b27      	ldr	r3, [pc, #156]	@ (8005a58 <HAL_RCC_OscConfig+0x244>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f003 0304 	and.w	r3, r3, #4
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d0f0      	beq.n	80059a8 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059c6:	4b24      	ldr	r3, [pc, #144]	@ (8005a58 <HAL_RCC_OscConfig+0x244>)
 80059c8:	685b      	ldr	r3, [r3, #4]
 80059ca:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	691b      	ldr	r3, [r3, #16]
 80059d2:	061b      	lsls	r3, r3, #24
 80059d4:	4920      	ldr	r1, [pc, #128]	@ (8005a58 <HAL_RCC_OscConfig+0x244>)
 80059d6:	4313      	orrs	r3, r2
 80059d8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80059da:	e045      	b.n	8005a68 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	68db      	ldr	r3, [r3, #12]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d026      	beq.n	8005a32 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80059e4:	4b1c      	ldr	r3, [pc, #112]	@ (8005a58 <HAL_RCC_OscConfig+0x244>)
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f023 0219 	bic.w	r2, r3, #25
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	68db      	ldr	r3, [r3, #12]
 80059f0:	4919      	ldr	r1, [pc, #100]	@ (8005a58 <HAL_RCC_OscConfig+0x244>)
 80059f2:	4313      	orrs	r3, r2
 80059f4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059f6:	f7fd fc25 	bl	8003244 <HAL_GetTick>
 80059fa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80059fc:	e008      	b.n	8005a10 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80059fe:	f7fd fc21 	bl	8003244 <HAL_GetTick>
 8005a02:	4602      	mov	r2, r0
 8005a04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a06:	1ad3      	subs	r3, r2, r3
 8005a08:	2b02      	cmp	r3, #2
 8005a0a:	d901      	bls.n	8005a10 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8005a0c:	2303      	movs	r3, #3
 8005a0e:	e2d3      	b.n	8005fb8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005a10:	4b11      	ldr	r3, [pc, #68]	@ (8005a58 <HAL_RCC_OscConfig+0x244>)
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f003 0304 	and.w	r3, r3, #4
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d0f0      	beq.n	80059fe <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a1c:	4b0e      	ldr	r3, [pc, #56]	@ (8005a58 <HAL_RCC_OscConfig+0x244>)
 8005a1e:	685b      	ldr	r3, [r3, #4]
 8005a20:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	691b      	ldr	r3, [r3, #16]
 8005a28:	061b      	lsls	r3, r3, #24
 8005a2a:	490b      	ldr	r1, [pc, #44]	@ (8005a58 <HAL_RCC_OscConfig+0x244>)
 8005a2c:	4313      	orrs	r3, r2
 8005a2e:	604b      	str	r3, [r1, #4]
 8005a30:	e01a      	b.n	8005a68 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005a32:	4b09      	ldr	r3, [pc, #36]	@ (8005a58 <HAL_RCC_OscConfig+0x244>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4a08      	ldr	r2, [pc, #32]	@ (8005a58 <HAL_RCC_OscConfig+0x244>)
 8005a38:	f023 0301 	bic.w	r3, r3, #1
 8005a3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a3e:	f7fd fc01 	bl	8003244 <HAL_GetTick>
 8005a42:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005a44:	e00a      	b.n	8005a5c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a46:	f7fd fbfd 	bl	8003244 <HAL_GetTick>
 8005a4a:	4602      	mov	r2, r0
 8005a4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a4e:	1ad3      	subs	r3, r2, r3
 8005a50:	2b02      	cmp	r3, #2
 8005a52:	d903      	bls.n	8005a5c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8005a54:	2303      	movs	r3, #3
 8005a56:	e2af      	b.n	8005fb8 <HAL_RCC_OscConfig+0x7a4>
 8005a58:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005a5c:	4b96      	ldr	r3, [pc, #600]	@ (8005cb8 <HAL_RCC_OscConfig+0x4a4>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f003 0304 	and.w	r3, r3, #4
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d1ee      	bne.n	8005a46 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f003 0310 	and.w	r3, r3, #16
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d06a      	beq.n	8005b4a <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005a74:	4b90      	ldr	r3, [pc, #576]	@ (8005cb8 <HAL_RCC_OscConfig+0x4a4>)
 8005a76:	691b      	ldr	r3, [r3, #16]
 8005a78:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005a7c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005a7e:	4b8e      	ldr	r3, [pc, #568]	@ (8005cb8 <HAL_RCC_OscConfig+0x4a4>)
 8005a80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a82:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005a84:	69bb      	ldr	r3, [r7, #24]
 8005a86:	2b08      	cmp	r3, #8
 8005a88:	d007      	beq.n	8005a9a <HAL_RCC_OscConfig+0x286>
 8005a8a:	69bb      	ldr	r3, [r7, #24]
 8005a8c:	2b18      	cmp	r3, #24
 8005a8e:	d11b      	bne.n	8005ac8 <HAL_RCC_OscConfig+0x2b4>
 8005a90:	697b      	ldr	r3, [r7, #20]
 8005a92:	f003 0303 	and.w	r3, r3, #3
 8005a96:	2b01      	cmp	r3, #1
 8005a98:	d116      	bne.n	8005ac8 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005a9a:	4b87      	ldr	r3, [pc, #540]	@ (8005cb8 <HAL_RCC_OscConfig+0x4a4>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d005      	beq.n	8005ab2 <HAL_RCC_OscConfig+0x29e>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	69db      	ldr	r3, [r3, #28]
 8005aaa:	2b80      	cmp	r3, #128	@ 0x80
 8005aac:	d001      	beq.n	8005ab2 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8005aae:	2301      	movs	r3, #1
 8005ab0:	e282      	b.n	8005fb8 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005ab2:	4b81      	ldr	r3, [pc, #516]	@ (8005cb8 <HAL_RCC_OscConfig+0x4a4>)
 8005ab4:	68db      	ldr	r3, [r3, #12]
 8005ab6:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6a1b      	ldr	r3, [r3, #32]
 8005abe:	061b      	lsls	r3, r3, #24
 8005ac0:	497d      	ldr	r1, [pc, #500]	@ (8005cb8 <HAL_RCC_OscConfig+0x4a4>)
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005ac6:	e040      	b.n	8005b4a <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	69db      	ldr	r3, [r3, #28]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d023      	beq.n	8005b18 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005ad0:	4b79      	ldr	r3, [pc, #484]	@ (8005cb8 <HAL_RCC_OscConfig+0x4a4>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4a78      	ldr	r2, [pc, #480]	@ (8005cb8 <HAL_RCC_OscConfig+0x4a4>)
 8005ad6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ada:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005adc:	f7fd fbb2 	bl	8003244 <HAL_GetTick>
 8005ae0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005ae2:	e008      	b.n	8005af6 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005ae4:	f7fd fbae 	bl	8003244 <HAL_GetTick>
 8005ae8:	4602      	mov	r2, r0
 8005aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aec:	1ad3      	subs	r3, r2, r3
 8005aee:	2b02      	cmp	r3, #2
 8005af0:	d901      	bls.n	8005af6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005af2:	2303      	movs	r3, #3
 8005af4:	e260      	b.n	8005fb8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005af6:	4b70      	ldr	r3, [pc, #448]	@ (8005cb8 <HAL_RCC_OscConfig+0x4a4>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d0f0      	beq.n	8005ae4 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005b02:	4b6d      	ldr	r3, [pc, #436]	@ (8005cb8 <HAL_RCC_OscConfig+0x4a4>)
 8005b04:	68db      	ldr	r3, [r3, #12]
 8005b06:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6a1b      	ldr	r3, [r3, #32]
 8005b0e:	061b      	lsls	r3, r3, #24
 8005b10:	4969      	ldr	r1, [pc, #420]	@ (8005cb8 <HAL_RCC_OscConfig+0x4a4>)
 8005b12:	4313      	orrs	r3, r2
 8005b14:	60cb      	str	r3, [r1, #12]
 8005b16:	e018      	b.n	8005b4a <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005b18:	4b67      	ldr	r3, [pc, #412]	@ (8005cb8 <HAL_RCC_OscConfig+0x4a4>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4a66      	ldr	r2, [pc, #408]	@ (8005cb8 <HAL_RCC_OscConfig+0x4a4>)
 8005b1e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005b22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b24:	f7fd fb8e 	bl	8003244 <HAL_GetTick>
 8005b28:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005b2a:	e008      	b.n	8005b3e <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005b2c:	f7fd fb8a 	bl	8003244 <HAL_GetTick>
 8005b30:	4602      	mov	r2, r0
 8005b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b34:	1ad3      	subs	r3, r2, r3
 8005b36:	2b02      	cmp	r3, #2
 8005b38:	d901      	bls.n	8005b3e <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8005b3a:	2303      	movs	r3, #3
 8005b3c:	e23c      	b.n	8005fb8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005b3e:	4b5e      	ldr	r3, [pc, #376]	@ (8005cb8 <HAL_RCC_OscConfig+0x4a4>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d1f0      	bne.n	8005b2c <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f003 0308 	and.w	r3, r3, #8
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d036      	beq.n	8005bc4 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	695b      	ldr	r3, [r3, #20]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d019      	beq.n	8005b92 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005b5e:	4b56      	ldr	r3, [pc, #344]	@ (8005cb8 <HAL_RCC_OscConfig+0x4a4>)
 8005b60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b62:	4a55      	ldr	r2, [pc, #340]	@ (8005cb8 <HAL_RCC_OscConfig+0x4a4>)
 8005b64:	f043 0301 	orr.w	r3, r3, #1
 8005b68:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b6a:	f7fd fb6b 	bl	8003244 <HAL_GetTick>
 8005b6e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005b70:	e008      	b.n	8005b84 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005b72:	f7fd fb67 	bl	8003244 <HAL_GetTick>
 8005b76:	4602      	mov	r2, r0
 8005b78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b7a:	1ad3      	subs	r3, r2, r3
 8005b7c:	2b02      	cmp	r3, #2
 8005b7e:	d901      	bls.n	8005b84 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8005b80:	2303      	movs	r3, #3
 8005b82:	e219      	b.n	8005fb8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005b84:	4b4c      	ldr	r3, [pc, #304]	@ (8005cb8 <HAL_RCC_OscConfig+0x4a4>)
 8005b86:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b88:	f003 0302 	and.w	r3, r3, #2
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d0f0      	beq.n	8005b72 <HAL_RCC_OscConfig+0x35e>
 8005b90:	e018      	b.n	8005bc4 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005b92:	4b49      	ldr	r3, [pc, #292]	@ (8005cb8 <HAL_RCC_OscConfig+0x4a4>)
 8005b94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b96:	4a48      	ldr	r2, [pc, #288]	@ (8005cb8 <HAL_RCC_OscConfig+0x4a4>)
 8005b98:	f023 0301 	bic.w	r3, r3, #1
 8005b9c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b9e:	f7fd fb51 	bl	8003244 <HAL_GetTick>
 8005ba2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005ba4:	e008      	b.n	8005bb8 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005ba6:	f7fd fb4d 	bl	8003244 <HAL_GetTick>
 8005baa:	4602      	mov	r2, r0
 8005bac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bae:	1ad3      	subs	r3, r2, r3
 8005bb0:	2b02      	cmp	r3, #2
 8005bb2:	d901      	bls.n	8005bb8 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8005bb4:	2303      	movs	r3, #3
 8005bb6:	e1ff      	b.n	8005fb8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005bb8:	4b3f      	ldr	r3, [pc, #252]	@ (8005cb8 <HAL_RCC_OscConfig+0x4a4>)
 8005bba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005bbc:	f003 0302 	and.w	r3, r3, #2
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d1f0      	bne.n	8005ba6 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f003 0320 	and.w	r3, r3, #32
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d036      	beq.n	8005c3e <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	699b      	ldr	r3, [r3, #24]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d019      	beq.n	8005c0c <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005bd8:	4b37      	ldr	r3, [pc, #220]	@ (8005cb8 <HAL_RCC_OscConfig+0x4a4>)
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4a36      	ldr	r2, [pc, #216]	@ (8005cb8 <HAL_RCC_OscConfig+0x4a4>)
 8005bde:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005be2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005be4:	f7fd fb2e 	bl	8003244 <HAL_GetTick>
 8005be8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005bea:	e008      	b.n	8005bfe <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005bec:	f7fd fb2a 	bl	8003244 <HAL_GetTick>
 8005bf0:	4602      	mov	r2, r0
 8005bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bf4:	1ad3      	subs	r3, r2, r3
 8005bf6:	2b02      	cmp	r3, #2
 8005bf8:	d901      	bls.n	8005bfe <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8005bfa:	2303      	movs	r3, #3
 8005bfc:	e1dc      	b.n	8005fb8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005bfe:	4b2e      	ldr	r3, [pc, #184]	@ (8005cb8 <HAL_RCC_OscConfig+0x4a4>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d0f0      	beq.n	8005bec <HAL_RCC_OscConfig+0x3d8>
 8005c0a:	e018      	b.n	8005c3e <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005c0c:	4b2a      	ldr	r3, [pc, #168]	@ (8005cb8 <HAL_RCC_OscConfig+0x4a4>)
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	4a29      	ldr	r2, [pc, #164]	@ (8005cb8 <HAL_RCC_OscConfig+0x4a4>)
 8005c12:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005c16:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005c18:	f7fd fb14 	bl	8003244 <HAL_GetTick>
 8005c1c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005c1e:	e008      	b.n	8005c32 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005c20:	f7fd fb10 	bl	8003244 <HAL_GetTick>
 8005c24:	4602      	mov	r2, r0
 8005c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c28:	1ad3      	subs	r3, r2, r3
 8005c2a:	2b02      	cmp	r3, #2
 8005c2c:	d901      	bls.n	8005c32 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8005c2e:	2303      	movs	r3, #3
 8005c30:	e1c2      	b.n	8005fb8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005c32:	4b21      	ldr	r3, [pc, #132]	@ (8005cb8 <HAL_RCC_OscConfig+0x4a4>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d1f0      	bne.n	8005c20 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f003 0304 	and.w	r3, r3, #4
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	f000 8086 	beq.w	8005d58 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005c4c:	4b1b      	ldr	r3, [pc, #108]	@ (8005cbc <HAL_RCC_OscConfig+0x4a8>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4a1a      	ldr	r2, [pc, #104]	@ (8005cbc <HAL_RCC_OscConfig+0x4a8>)
 8005c52:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005c56:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005c58:	f7fd faf4 	bl	8003244 <HAL_GetTick>
 8005c5c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005c5e:	e008      	b.n	8005c72 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c60:	f7fd faf0 	bl	8003244 <HAL_GetTick>
 8005c64:	4602      	mov	r2, r0
 8005c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c68:	1ad3      	subs	r3, r2, r3
 8005c6a:	2b64      	cmp	r3, #100	@ 0x64
 8005c6c:	d901      	bls.n	8005c72 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8005c6e:	2303      	movs	r3, #3
 8005c70:	e1a2      	b.n	8005fb8 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005c72:	4b12      	ldr	r3, [pc, #72]	@ (8005cbc <HAL_RCC_OscConfig+0x4a8>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d0f0      	beq.n	8005c60 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	689b      	ldr	r3, [r3, #8]
 8005c82:	2b01      	cmp	r3, #1
 8005c84:	d106      	bne.n	8005c94 <HAL_RCC_OscConfig+0x480>
 8005c86:	4b0c      	ldr	r3, [pc, #48]	@ (8005cb8 <HAL_RCC_OscConfig+0x4a4>)
 8005c88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c8a:	4a0b      	ldr	r2, [pc, #44]	@ (8005cb8 <HAL_RCC_OscConfig+0x4a4>)
 8005c8c:	f043 0301 	orr.w	r3, r3, #1
 8005c90:	6713      	str	r3, [r2, #112]	@ 0x70
 8005c92:	e032      	b.n	8005cfa <HAL_RCC_OscConfig+0x4e6>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	689b      	ldr	r3, [r3, #8]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d111      	bne.n	8005cc0 <HAL_RCC_OscConfig+0x4ac>
 8005c9c:	4b06      	ldr	r3, [pc, #24]	@ (8005cb8 <HAL_RCC_OscConfig+0x4a4>)
 8005c9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ca0:	4a05      	ldr	r2, [pc, #20]	@ (8005cb8 <HAL_RCC_OscConfig+0x4a4>)
 8005ca2:	f023 0301 	bic.w	r3, r3, #1
 8005ca6:	6713      	str	r3, [r2, #112]	@ 0x70
 8005ca8:	4b03      	ldr	r3, [pc, #12]	@ (8005cb8 <HAL_RCC_OscConfig+0x4a4>)
 8005caa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cac:	4a02      	ldr	r2, [pc, #8]	@ (8005cb8 <HAL_RCC_OscConfig+0x4a4>)
 8005cae:	f023 0304 	bic.w	r3, r3, #4
 8005cb2:	6713      	str	r3, [r2, #112]	@ 0x70
 8005cb4:	e021      	b.n	8005cfa <HAL_RCC_OscConfig+0x4e6>
 8005cb6:	bf00      	nop
 8005cb8:	58024400 	.word	0x58024400
 8005cbc:	58024800 	.word	0x58024800
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	689b      	ldr	r3, [r3, #8]
 8005cc4:	2b05      	cmp	r3, #5
 8005cc6:	d10c      	bne.n	8005ce2 <HAL_RCC_OscConfig+0x4ce>
 8005cc8:	4b83      	ldr	r3, [pc, #524]	@ (8005ed8 <HAL_RCC_OscConfig+0x6c4>)
 8005cca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ccc:	4a82      	ldr	r2, [pc, #520]	@ (8005ed8 <HAL_RCC_OscConfig+0x6c4>)
 8005cce:	f043 0304 	orr.w	r3, r3, #4
 8005cd2:	6713      	str	r3, [r2, #112]	@ 0x70
 8005cd4:	4b80      	ldr	r3, [pc, #512]	@ (8005ed8 <HAL_RCC_OscConfig+0x6c4>)
 8005cd6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cd8:	4a7f      	ldr	r2, [pc, #508]	@ (8005ed8 <HAL_RCC_OscConfig+0x6c4>)
 8005cda:	f043 0301 	orr.w	r3, r3, #1
 8005cde:	6713      	str	r3, [r2, #112]	@ 0x70
 8005ce0:	e00b      	b.n	8005cfa <HAL_RCC_OscConfig+0x4e6>
 8005ce2:	4b7d      	ldr	r3, [pc, #500]	@ (8005ed8 <HAL_RCC_OscConfig+0x6c4>)
 8005ce4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ce6:	4a7c      	ldr	r2, [pc, #496]	@ (8005ed8 <HAL_RCC_OscConfig+0x6c4>)
 8005ce8:	f023 0301 	bic.w	r3, r3, #1
 8005cec:	6713      	str	r3, [r2, #112]	@ 0x70
 8005cee:	4b7a      	ldr	r3, [pc, #488]	@ (8005ed8 <HAL_RCC_OscConfig+0x6c4>)
 8005cf0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cf2:	4a79      	ldr	r2, [pc, #484]	@ (8005ed8 <HAL_RCC_OscConfig+0x6c4>)
 8005cf4:	f023 0304 	bic.w	r3, r3, #4
 8005cf8:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	689b      	ldr	r3, [r3, #8]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d015      	beq.n	8005d2e <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d02:	f7fd fa9f 	bl	8003244 <HAL_GetTick>
 8005d06:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005d08:	e00a      	b.n	8005d20 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d0a:	f7fd fa9b 	bl	8003244 <HAL_GetTick>
 8005d0e:	4602      	mov	r2, r0
 8005d10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d12:	1ad3      	subs	r3, r2, r3
 8005d14:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d901      	bls.n	8005d20 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8005d1c:	2303      	movs	r3, #3
 8005d1e:	e14b      	b.n	8005fb8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005d20:	4b6d      	ldr	r3, [pc, #436]	@ (8005ed8 <HAL_RCC_OscConfig+0x6c4>)
 8005d22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d24:	f003 0302 	and.w	r3, r3, #2
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d0ee      	beq.n	8005d0a <HAL_RCC_OscConfig+0x4f6>
 8005d2c:	e014      	b.n	8005d58 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d2e:	f7fd fa89 	bl	8003244 <HAL_GetTick>
 8005d32:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005d34:	e00a      	b.n	8005d4c <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d36:	f7fd fa85 	bl	8003244 <HAL_GetTick>
 8005d3a:	4602      	mov	r2, r0
 8005d3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d3e:	1ad3      	subs	r3, r2, r3
 8005d40:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d901      	bls.n	8005d4c <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8005d48:	2303      	movs	r3, #3
 8005d4a:	e135      	b.n	8005fb8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005d4c:	4b62      	ldr	r3, [pc, #392]	@ (8005ed8 <HAL_RCC_OscConfig+0x6c4>)
 8005d4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d50:	f003 0302 	and.w	r3, r3, #2
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d1ee      	bne.n	8005d36 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	f000 812a 	beq.w	8005fb6 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005d62:	4b5d      	ldr	r3, [pc, #372]	@ (8005ed8 <HAL_RCC_OscConfig+0x6c4>)
 8005d64:	691b      	ldr	r3, [r3, #16]
 8005d66:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005d6a:	2b18      	cmp	r3, #24
 8005d6c:	f000 80ba 	beq.w	8005ee4 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d74:	2b02      	cmp	r3, #2
 8005d76:	f040 8095 	bne.w	8005ea4 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d7a:	4b57      	ldr	r3, [pc, #348]	@ (8005ed8 <HAL_RCC_OscConfig+0x6c4>)
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4a56      	ldr	r2, [pc, #344]	@ (8005ed8 <HAL_RCC_OscConfig+0x6c4>)
 8005d80:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005d84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d86:	f7fd fa5d 	bl	8003244 <HAL_GetTick>
 8005d8a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005d8c:	e008      	b.n	8005da0 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d8e:	f7fd fa59 	bl	8003244 <HAL_GetTick>
 8005d92:	4602      	mov	r2, r0
 8005d94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d96:	1ad3      	subs	r3, r2, r3
 8005d98:	2b02      	cmp	r3, #2
 8005d9a:	d901      	bls.n	8005da0 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8005d9c:	2303      	movs	r3, #3
 8005d9e:	e10b      	b.n	8005fb8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005da0:	4b4d      	ldr	r3, [pc, #308]	@ (8005ed8 <HAL_RCC_OscConfig+0x6c4>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d1f0      	bne.n	8005d8e <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005dac:	4b4a      	ldr	r3, [pc, #296]	@ (8005ed8 <HAL_RCC_OscConfig+0x6c4>)
 8005dae:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005db0:	4b4a      	ldr	r3, [pc, #296]	@ (8005edc <HAL_RCC_OscConfig+0x6c8>)
 8005db2:	4013      	ands	r3, r2
 8005db4:	687a      	ldr	r2, [r7, #4]
 8005db6:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8005db8:	687a      	ldr	r2, [r7, #4]
 8005dba:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005dbc:	0112      	lsls	r2, r2, #4
 8005dbe:	430a      	orrs	r2, r1
 8005dc0:	4945      	ldr	r1, [pc, #276]	@ (8005ed8 <HAL_RCC_OscConfig+0x6c4>)
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	628b      	str	r3, [r1, #40]	@ 0x28
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005dca:	3b01      	subs	r3, #1
 8005dcc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005dd4:	3b01      	subs	r3, #1
 8005dd6:	025b      	lsls	r3, r3, #9
 8005dd8:	b29b      	uxth	r3, r3
 8005dda:	431a      	orrs	r2, r3
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005de0:	3b01      	subs	r3, #1
 8005de2:	041b      	lsls	r3, r3, #16
 8005de4:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005de8:	431a      	orrs	r2, r3
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005dee:	3b01      	subs	r3, #1
 8005df0:	061b      	lsls	r3, r3, #24
 8005df2:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005df6:	4938      	ldr	r1, [pc, #224]	@ (8005ed8 <HAL_RCC_OscConfig+0x6c4>)
 8005df8:	4313      	orrs	r3, r2
 8005dfa:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8005dfc:	4b36      	ldr	r3, [pc, #216]	@ (8005ed8 <HAL_RCC_OscConfig+0x6c4>)
 8005dfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e00:	4a35      	ldr	r2, [pc, #212]	@ (8005ed8 <HAL_RCC_OscConfig+0x6c4>)
 8005e02:	f023 0301 	bic.w	r3, r3, #1
 8005e06:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005e08:	4b33      	ldr	r3, [pc, #204]	@ (8005ed8 <HAL_RCC_OscConfig+0x6c4>)
 8005e0a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005e0c:	4b34      	ldr	r3, [pc, #208]	@ (8005ee0 <HAL_RCC_OscConfig+0x6cc>)
 8005e0e:	4013      	ands	r3, r2
 8005e10:	687a      	ldr	r2, [r7, #4]
 8005e12:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005e14:	00d2      	lsls	r2, r2, #3
 8005e16:	4930      	ldr	r1, [pc, #192]	@ (8005ed8 <HAL_RCC_OscConfig+0x6c4>)
 8005e18:	4313      	orrs	r3, r2
 8005e1a:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005e1c:	4b2e      	ldr	r3, [pc, #184]	@ (8005ed8 <HAL_RCC_OscConfig+0x6c4>)
 8005e1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e20:	f023 020c 	bic.w	r2, r3, #12
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e28:	492b      	ldr	r1, [pc, #172]	@ (8005ed8 <HAL_RCC_OscConfig+0x6c4>)
 8005e2a:	4313      	orrs	r3, r2
 8005e2c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005e2e:	4b2a      	ldr	r3, [pc, #168]	@ (8005ed8 <HAL_RCC_OscConfig+0x6c4>)
 8005e30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e32:	f023 0202 	bic.w	r2, r3, #2
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e3a:	4927      	ldr	r1, [pc, #156]	@ (8005ed8 <HAL_RCC_OscConfig+0x6c4>)
 8005e3c:	4313      	orrs	r3, r2
 8005e3e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005e40:	4b25      	ldr	r3, [pc, #148]	@ (8005ed8 <HAL_RCC_OscConfig+0x6c4>)
 8005e42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e44:	4a24      	ldr	r2, [pc, #144]	@ (8005ed8 <HAL_RCC_OscConfig+0x6c4>)
 8005e46:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e4a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e4c:	4b22      	ldr	r3, [pc, #136]	@ (8005ed8 <HAL_RCC_OscConfig+0x6c4>)
 8005e4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e50:	4a21      	ldr	r2, [pc, #132]	@ (8005ed8 <HAL_RCC_OscConfig+0x6c4>)
 8005e52:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005e56:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005e58:	4b1f      	ldr	r3, [pc, #124]	@ (8005ed8 <HAL_RCC_OscConfig+0x6c4>)
 8005e5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e5c:	4a1e      	ldr	r2, [pc, #120]	@ (8005ed8 <HAL_RCC_OscConfig+0x6c4>)
 8005e5e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005e62:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8005e64:	4b1c      	ldr	r3, [pc, #112]	@ (8005ed8 <HAL_RCC_OscConfig+0x6c4>)
 8005e66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e68:	4a1b      	ldr	r2, [pc, #108]	@ (8005ed8 <HAL_RCC_OscConfig+0x6c4>)
 8005e6a:	f043 0301 	orr.w	r3, r3, #1
 8005e6e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005e70:	4b19      	ldr	r3, [pc, #100]	@ (8005ed8 <HAL_RCC_OscConfig+0x6c4>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4a18      	ldr	r2, [pc, #96]	@ (8005ed8 <HAL_RCC_OscConfig+0x6c4>)
 8005e76:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005e7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e7c:	f7fd f9e2 	bl	8003244 <HAL_GetTick>
 8005e80:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005e82:	e008      	b.n	8005e96 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e84:	f7fd f9de 	bl	8003244 <HAL_GetTick>
 8005e88:	4602      	mov	r2, r0
 8005e8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e8c:	1ad3      	subs	r3, r2, r3
 8005e8e:	2b02      	cmp	r3, #2
 8005e90:	d901      	bls.n	8005e96 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8005e92:	2303      	movs	r3, #3
 8005e94:	e090      	b.n	8005fb8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005e96:	4b10      	ldr	r3, [pc, #64]	@ (8005ed8 <HAL_RCC_OscConfig+0x6c4>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d0f0      	beq.n	8005e84 <HAL_RCC_OscConfig+0x670>
 8005ea2:	e088      	b.n	8005fb6 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ea4:	4b0c      	ldr	r3, [pc, #48]	@ (8005ed8 <HAL_RCC_OscConfig+0x6c4>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4a0b      	ldr	r2, [pc, #44]	@ (8005ed8 <HAL_RCC_OscConfig+0x6c4>)
 8005eaa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005eae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005eb0:	f7fd f9c8 	bl	8003244 <HAL_GetTick>
 8005eb4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005eb6:	e008      	b.n	8005eca <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005eb8:	f7fd f9c4 	bl	8003244 <HAL_GetTick>
 8005ebc:	4602      	mov	r2, r0
 8005ebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ec0:	1ad3      	subs	r3, r2, r3
 8005ec2:	2b02      	cmp	r3, #2
 8005ec4:	d901      	bls.n	8005eca <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8005ec6:	2303      	movs	r3, #3
 8005ec8:	e076      	b.n	8005fb8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005eca:	4b03      	ldr	r3, [pc, #12]	@ (8005ed8 <HAL_RCC_OscConfig+0x6c4>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d1f0      	bne.n	8005eb8 <HAL_RCC_OscConfig+0x6a4>
 8005ed6:	e06e      	b.n	8005fb6 <HAL_RCC_OscConfig+0x7a2>
 8005ed8:	58024400 	.word	0x58024400
 8005edc:	fffffc0c 	.word	0xfffffc0c
 8005ee0:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005ee4:	4b36      	ldr	r3, [pc, #216]	@ (8005fc0 <HAL_RCC_OscConfig+0x7ac>)
 8005ee6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ee8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005eea:	4b35      	ldr	r3, [pc, #212]	@ (8005fc0 <HAL_RCC_OscConfig+0x7ac>)
 8005eec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005eee:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ef4:	2b01      	cmp	r3, #1
 8005ef6:	d031      	beq.n	8005f5c <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ef8:	693b      	ldr	r3, [r7, #16]
 8005efa:	f003 0203 	and.w	r2, r3, #3
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005f02:	429a      	cmp	r2, r3
 8005f04:	d12a      	bne.n	8005f5c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005f06:	693b      	ldr	r3, [r7, #16]
 8005f08:	091b      	lsrs	r3, r3, #4
 8005f0a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f12:	429a      	cmp	r2, r3
 8005f14:	d122      	bne.n	8005f5c <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f20:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005f22:	429a      	cmp	r2, r3
 8005f24:	d11a      	bne.n	8005f5c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	0a5b      	lsrs	r3, r3, #9
 8005f2a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f32:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005f34:	429a      	cmp	r2, r3
 8005f36:	d111      	bne.n	8005f5c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	0c1b      	lsrs	r3, r3, #16
 8005f3c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f44:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005f46:	429a      	cmp	r2, r3
 8005f48:	d108      	bne.n	8005f5c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	0e1b      	lsrs	r3, r3, #24
 8005f4e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f56:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005f58:	429a      	cmp	r2, r3
 8005f5a:	d001      	beq.n	8005f60 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8005f5c:	2301      	movs	r3, #1
 8005f5e:	e02b      	b.n	8005fb8 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8005f60:	4b17      	ldr	r3, [pc, #92]	@ (8005fc0 <HAL_RCC_OscConfig+0x7ac>)
 8005f62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f64:	08db      	lsrs	r3, r3, #3
 8005f66:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005f6a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005f70:	693a      	ldr	r2, [r7, #16]
 8005f72:	429a      	cmp	r2, r3
 8005f74:	d01f      	beq.n	8005fb6 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8005f76:	4b12      	ldr	r3, [pc, #72]	@ (8005fc0 <HAL_RCC_OscConfig+0x7ac>)
 8005f78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f7a:	4a11      	ldr	r2, [pc, #68]	@ (8005fc0 <HAL_RCC_OscConfig+0x7ac>)
 8005f7c:	f023 0301 	bic.w	r3, r3, #1
 8005f80:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005f82:	f7fd f95f 	bl	8003244 <HAL_GetTick>
 8005f86:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005f88:	bf00      	nop
 8005f8a:	f7fd f95b 	bl	8003244 <HAL_GetTick>
 8005f8e:	4602      	mov	r2, r0
 8005f90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d0f9      	beq.n	8005f8a <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005f96:	4b0a      	ldr	r3, [pc, #40]	@ (8005fc0 <HAL_RCC_OscConfig+0x7ac>)
 8005f98:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005f9a:	4b0a      	ldr	r3, [pc, #40]	@ (8005fc4 <HAL_RCC_OscConfig+0x7b0>)
 8005f9c:	4013      	ands	r3, r2
 8005f9e:	687a      	ldr	r2, [r7, #4]
 8005fa0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005fa2:	00d2      	lsls	r2, r2, #3
 8005fa4:	4906      	ldr	r1, [pc, #24]	@ (8005fc0 <HAL_RCC_OscConfig+0x7ac>)
 8005fa6:	4313      	orrs	r3, r2
 8005fa8:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8005faa:	4b05      	ldr	r3, [pc, #20]	@ (8005fc0 <HAL_RCC_OscConfig+0x7ac>)
 8005fac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fae:	4a04      	ldr	r2, [pc, #16]	@ (8005fc0 <HAL_RCC_OscConfig+0x7ac>)
 8005fb0:	f043 0301 	orr.w	r3, r3, #1
 8005fb4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8005fb6:	2300      	movs	r3, #0
}
 8005fb8:	4618      	mov	r0, r3
 8005fba:	3730      	adds	r7, #48	@ 0x30
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	bd80      	pop	{r7, pc}
 8005fc0:	58024400 	.word	0x58024400
 8005fc4:	ffff0007 	.word	0xffff0007

08005fc8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b086      	sub	sp, #24
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
 8005fd0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d101      	bne.n	8005fdc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005fd8:	2301      	movs	r3, #1
 8005fda:	e19c      	b.n	8006316 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005fdc:	4b8a      	ldr	r3, [pc, #552]	@ (8006208 <HAL_RCC_ClockConfig+0x240>)
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f003 030f 	and.w	r3, r3, #15
 8005fe4:	683a      	ldr	r2, [r7, #0]
 8005fe6:	429a      	cmp	r2, r3
 8005fe8:	d910      	bls.n	800600c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005fea:	4b87      	ldr	r3, [pc, #540]	@ (8006208 <HAL_RCC_ClockConfig+0x240>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f023 020f 	bic.w	r2, r3, #15
 8005ff2:	4985      	ldr	r1, [pc, #532]	@ (8006208 <HAL_RCC_ClockConfig+0x240>)
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	4313      	orrs	r3, r2
 8005ff8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ffa:	4b83      	ldr	r3, [pc, #524]	@ (8006208 <HAL_RCC_ClockConfig+0x240>)
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f003 030f 	and.w	r3, r3, #15
 8006002:	683a      	ldr	r2, [r7, #0]
 8006004:	429a      	cmp	r2, r3
 8006006:	d001      	beq.n	800600c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006008:	2301      	movs	r3, #1
 800600a:	e184      	b.n	8006316 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f003 0304 	and.w	r3, r3, #4
 8006014:	2b00      	cmp	r3, #0
 8006016:	d010      	beq.n	800603a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	691a      	ldr	r2, [r3, #16]
 800601c:	4b7b      	ldr	r3, [pc, #492]	@ (800620c <HAL_RCC_ClockConfig+0x244>)
 800601e:	699b      	ldr	r3, [r3, #24]
 8006020:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006024:	429a      	cmp	r2, r3
 8006026:	d908      	bls.n	800603a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006028:	4b78      	ldr	r3, [pc, #480]	@ (800620c <HAL_RCC_ClockConfig+0x244>)
 800602a:	699b      	ldr	r3, [r3, #24]
 800602c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	691b      	ldr	r3, [r3, #16]
 8006034:	4975      	ldr	r1, [pc, #468]	@ (800620c <HAL_RCC_ClockConfig+0x244>)
 8006036:	4313      	orrs	r3, r2
 8006038:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f003 0308 	and.w	r3, r3, #8
 8006042:	2b00      	cmp	r3, #0
 8006044:	d010      	beq.n	8006068 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	695a      	ldr	r2, [r3, #20]
 800604a:	4b70      	ldr	r3, [pc, #448]	@ (800620c <HAL_RCC_ClockConfig+0x244>)
 800604c:	69db      	ldr	r3, [r3, #28]
 800604e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006052:	429a      	cmp	r2, r3
 8006054:	d908      	bls.n	8006068 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006056:	4b6d      	ldr	r3, [pc, #436]	@ (800620c <HAL_RCC_ClockConfig+0x244>)
 8006058:	69db      	ldr	r3, [r3, #28]
 800605a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	695b      	ldr	r3, [r3, #20]
 8006062:	496a      	ldr	r1, [pc, #424]	@ (800620c <HAL_RCC_ClockConfig+0x244>)
 8006064:	4313      	orrs	r3, r2
 8006066:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f003 0310 	and.w	r3, r3, #16
 8006070:	2b00      	cmp	r3, #0
 8006072:	d010      	beq.n	8006096 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	699a      	ldr	r2, [r3, #24]
 8006078:	4b64      	ldr	r3, [pc, #400]	@ (800620c <HAL_RCC_ClockConfig+0x244>)
 800607a:	69db      	ldr	r3, [r3, #28]
 800607c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006080:	429a      	cmp	r2, r3
 8006082:	d908      	bls.n	8006096 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006084:	4b61      	ldr	r3, [pc, #388]	@ (800620c <HAL_RCC_ClockConfig+0x244>)
 8006086:	69db      	ldr	r3, [r3, #28]
 8006088:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	699b      	ldr	r3, [r3, #24]
 8006090:	495e      	ldr	r1, [pc, #376]	@ (800620c <HAL_RCC_ClockConfig+0x244>)
 8006092:	4313      	orrs	r3, r2
 8006094:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f003 0320 	and.w	r3, r3, #32
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d010      	beq.n	80060c4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	69da      	ldr	r2, [r3, #28]
 80060a6:	4b59      	ldr	r3, [pc, #356]	@ (800620c <HAL_RCC_ClockConfig+0x244>)
 80060a8:	6a1b      	ldr	r3, [r3, #32]
 80060aa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80060ae:	429a      	cmp	r2, r3
 80060b0:	d908      	bls.n	80060c4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80060b2:	4b56      	ldr	r3, [pc, #344]	@ (800620c <HAL_RCC_ClockConfig+0x244>)
 80060b4:	6a1b      	ldr	r3, [r3, #32]
 80060b6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	69db      	ldr	r3, [r3, #28]
 80060be:	4953      	ldr	r1, [pc, #332]	@ (800620c <HAL_RCC_ClockConfig+0x244>)
 80060c0:	4313      	orrs	r3, r2
 80060c2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f003 0302 	and.w	r3, r3, #2
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d010      	beq.n	80060f2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	68da      	ldr	r2, [r3, #12]
 80060d4:	4b4d      	ldr	r3, [pc, #308]	@ (800620c <HAL_RCC_ClockConfig+0x244>)
 80060d6:	699b      	ldr	r3, [r3, #24]
 80060d8:	f003 030f 	and.w	r3, r3, #15
 80060dc:	429a      	cmp	r2, r3
 80060de:	d908      	bls.n	80060f2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80060e0:	4b4a      	ldr	r3, [pc, #296]	@ (800620c <HAL_RCC_ClockConfig+0x244>)
 80060e2:	699b      	ldr	r3, [r3, #24]
 80060e4:	f023 020f 	bic.w	r2, r3, #15
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	68db      	ldr	r3, [r3, #12]
 80060ec:	4947      	ldr	r1, [pc, #284]	@ (800620c <HAL_RCC_ClockConfig+0x244>)
 80060ee:	4313      	orrs	r3, r2
 80060f0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f003 0301 	and.w	r3, r3, #1
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d055      	beq.n	80061aa <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80060fe:	4b43      	ldr	r3, [pc, #268]	@ (800620c <HAL_RCC_ClockConfig+0x244>)
 8006100:	699b      	ldr	r3, [r3, #24]
 8006102:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	689b      	ldr	r3, [r3, #8]
 800610a:	4940      	ldr	r1, [pc, #256]	@ (800620c <HAL_RCC_ClockConfig+0x244>)
 800610c:	4313      	orrs	r3, r2
 800610e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	685b      	ldr	r3, [r3, #4]
 8006114:	2b02      	cmp	r3, #2
 8006116:	d107      	bne.n	8006128 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006118:	4b3c      	ldr	r3, [pc, #240]	@ (800620c <HAL_RCC_ClockConfig+0x244>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006120:	2b00      	cmp	r3, #0
 8006122:	d121      	bne.n	8006168 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006124:	2301      	movs	r3, #1
 8006126:	e0f6      	b.n	8006316 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	685b      	ldr	r3, [r3, #4]
 800612c:	2b03      	cmp	r3, #3
 800612e:	d107      	bne.n	8006140 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006130:	4b36      	ldr	r3, [pc, #216]	@ (800620c <HAL_RCC_ClockConfig+0x244>)
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006138:	2b00      	cmp	r3, #0
 800613a:	d115      	bne.n	8006168 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800613c:	2301      	movs	r3, #1
 800613e:	e0ea      	b.n	8006316 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	685b      	ldr	r3, [r3, #4]
 8006144:	2b01      	cmp	r3, #1
 8006146:	d107      	bne.n	8006158 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006148:	4b30      	ldr	r3, [pc, #192]	@ (800620c <HAL_RCC_ClockConfig+0x244>)
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006150:	2b00      	cmp	r3, #0
 8006152:	d109      	bne.n	8006168 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006154:	2301      	movs	r3, #1
 8006156:	e0de      	b.n	8006316 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006158:	4b2c      	ldr	r3, [pc, #176]	@ (800620c <HAL_RCC_ClockConfig+0x244>)
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f003 0304 	and.w	r3, r3, #4
 8006160:	2b00      	cmp	r3, #0
 8006162:	d101      	bne.n	8006168 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006164:	2301      	movs	r3, #1
 8006166:	e0d6      	b.n	8006316 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006168:	4b28      	ldr	r3, [pc, #160]	@ (800620c <HAL_RCC_ClockConfig+0x244>)
 800616a:	691b      	ldr	r3, [r3, #16]
 800616c:	f023 0207 	bic.w	r2, r3, #7
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	685b      	ldr	r3, [r3, #4]
 8006174:	4925      	ldr	r1, [pc, #148]	@ (800620c <HAL_RCC_ClockConfig+0x244>)
 8006176:	4313      	orrs	r3, r2
 8006178:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800617a:	f7fd f863 	bl	8003244 <HAL_GetTick>
 800617e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006180:	e00a      	b.n	8006198 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006182:	f7fd f85f 	bl	8003244 <HAL_GetTick>
 8006186:	4602      	mov	r2, r0
 8006188:	697b      	ldr	r3, [r7, #20]
 800618a:	1ad3      	subs	r3, r2, r3
 800618c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006190:	4293      	cmp	r3, r2
 8006192:	d901      	bls.n	8006198 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8006194:	2303      	movs	r3, #3
 8006196:	e0be      	b.n	8006316 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006198:	4b1c      	ldr	r3, [pc, #112]	@ (800620c <HAL_RCC_ClockConfig+0x244>)
 800619a:	691b      	ldr	r3, [r3, #16]
 800619c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	685b      	ldr	r3, [r3, #4]
 80061a4:	00db      	lsls	r3, r3, #3
 80061a6:	429a      	cmp	r2, r3
 80061a8:	d1eb      	bne.n	8006182 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f003 0302 	and.w	r3, r3, #2
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d010      	beq.n	80061d8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	68da      	ldr	r2, [r3, #12]
 80061ba:	4b14      	ldr	r3, [pc, #80]	@ (800620c <HAL_RCC_ClockConfig+0x244>)
 80061bc:	699b      	ldr	r3, [r3, #24]
 80061be:	f003 030f 	and.w	r3, r3, #15
 80061c2:	429a      	cmp	r2, r3
 80061c4:	d208      	bcs.n	80061d8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80061c6:	4b11      	ldr	r3, [pc, #68]	@ (800620c <HAL_RCC_ClockConfig+0x244>)
 80061c8:	699b      	ldr	r3, [r3, #24]
 80061ca:	f023 020f 	bic.w	r2, r3, #15
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	68db      	ldr	r3, [r3, #12]
 80061d2:	490e      	ldr	r1, [pc, #56]	@ (800620c <HAL_RCC_ClockConfig+0x244>)
 80061d4:	4313      	orrs	r3, r2
 80061d6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80061d8:	4b0b      	ldr	r3, [pc, #44]	@ (8006208 <HAL_RCC_ClockConfig+0x240>)
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f003 030f 	and.w	r3, r3, #15
 80061e0:	683a      	ldr	r2, [r7, #0]
 80061e2:	429a      	cmp	r2, r3
 80061e4:	d214      	bcs.n	8006210 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80061e6:	4b08      	ldr	r3, [pc, #32]	@ (8006208 <HAL_RCC_ClockConfig+0x240>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f023 020f 	bic.w	r2, r3, #15
 80061ee:	4906      	ldr	r1, [pc, #24]	@ (8006208 <HAL_RCC_ClockConfig+0x240>)
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	4313      	orrs	r3, r2
 80061f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80061f6:	4b04      	ldr	r3, [pc, #16]	@ (8006208 <HAL_RCC_ClockConfig+0x240>)
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f003 030f 	and.w	r3, r3, #15
 80061fe:	683a      	ldr	r2, [r7, #0]
 8006200:	429a      	cmp	r2, r3
 8006202:	d005      	beq.n	8006210 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006204:	2301      	movs	r3, #1
 8006206:	e086      	b.n	8006316 <HAL_RCC_ClockConfig+0x34e>
 8006208:	52002000 	.word	0x52002000
 800620c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f003 0304 	and.w	r3, r3, #4
 8006218:	2b00      	cmp	r3, #0
 800621a:	d010      	beq.n	800623e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	691a      	ldr	r2, [r3, #16]
 8006220:	4b3f      	ldr	r3, [pc, #252]	@ (8006320 <HAL_RCC_ClockConfig+0x358>)
 8006222:	699b      	ldr	r3, [r3, #24]
 8006224:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006228:	429a      	cmp	r2, r3
 800622a:	d208      	bcs.n	800623e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800622c:	4b3c      	ldr	r3, [pc, #240]	@ (8006320 <HAL_RCC_ClockConfig+0x358>)
 800622e:	699b      	ldr	r3, [r3, #24]
 8006230:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	691b      	ldr	r3, [r3, #16]
 8006238:	4939      	ldr	r1, [pc, #228]	@ (8006320 <HAL_RCC_ClockConfig+0x358>)
 800623a:	4313      	orrs	r3, r2
 800623c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f003 0308 	and.w	r3, r3, #8
 8006246:	2b00      	cmp	r3, #0
 8006248:	d010      	beq.n	800626c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	695a      	ldr	r2, [r3, #20]
 800624e:	4b34      	ldr	r3, [pc, #208]	@ (8006320 <HAL_RCC_ClockConfig+0x358>)
 8006250:	69db      	ldr	r3, [r3, #28]
 8006252:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006256:	429a      	cmp	r2, r3
 8006258:	d208      	bcs.n	800626c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800625a:	4b31      	ldr	r3, [pc, #196]	@ (8006320 <HAL_RCC_ClockConfig+0x358>)
 800625c:	69db      	ldr	r3, [r3, #28]
 800625e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	695b      	ldr	r3, [r3, #20]
 8006266:	492e      	ldr	r1, [pc, #184]	@ (8006320 <HAL_RCC_ClockConfig+0x358>)
 8006268:	4313      	orrs	r3, r2
 800626a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f003 0310 	and.w	r3, r3, #16
 8006274:	2b00      	cmp	r3, #0
 8006276:	d010      	beq.n	800629a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	699a      	ldr	r2, [r3, #24]
 800627c:	4b28      	ldr	r3, [pc, #160]	@ (8006320 <HAL_RCC_ClockConfig+0x358>)
 800627e:	69db      	ldr	r3, [r3, #28]
 8006280:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006284:	429a      	cmp	r2, r3
 8006286:	d208      	bcs.n	800629a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006288:	4b25      	ldr	r3, [pc, #148]	@ (8006320 <HAL_RCC_ClockConfig+0x358>)
 800628a:	69db      	ldr	r3, [r3, #28]
 800628c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	699b      	ldr	r3, [r3, #24]
 8006294:	4922      	ldr	r1, [pc, #136]	@ (8006320 <HAL_RCC_ClockConfig+0x358>)
 8006296:	4313      	orrs	r3, r2
 8006298:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f003 0320 	and.w	r3, r3, #32
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d010      	beq.n	80062c8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	69da      	ldr	r2, [r3, #28]
 80062aa:	4b1d      	ldr	r3, [pc, #116]	@ (8006320 <HAL_RCC_ClockConfig+0x358>)
 80062ac:	6a1b      	ldr	r3, [r3, #32]
 80062ae:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80062b2:	429a      	cmp	r2, r3
 80062b4:	d208      	bcs.n	80062c8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80062b6:	4b1a      	ldr	r3, [pc, #104]	@ (8006320 <HAL_RCC_ClockConfig+0x358>)
 80062b8:	6a1b      	ldr	r3, [r3, #32]
 80062ba:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	69db      	ldr	r3, [r3, #28]
 80062c2:	4917      	ldr	r1, [pc, #92]	@ (8006320 <HAL_RCC_ClockConfig+0x358>)
 80062c4:	4313      	orrs	r3, r2
 80062c6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80062c8:	f000 f834 	bl	8006334 <HAL_RCC_GetSysClockFreq>
 80062cc:	4602      	mov	r2, r0
 80062ce:	4b14      	ldr	r3, [pc, #80]	@ (8006320 <HAL_RCC_ClockConfig+0x358>)
 80062d0:	699b      	ldr	r3, [r3, #24]
 80062d2:	0a1b      	lsrs	r3, r3, #8
 80062d4:	f003 030f 	and.w	r3, r3, #15
 80062d8:	4912      	ldr	r1, [pc, #72]	@ (8006324 <HAL_RCC_ClockConfig+0x35c>)
 80062da:	5ccb      	ldrb	r3, [r1, r3]
 80062dc:	f003 031f 	and.w	r3, r3, #31
 80062e0:	fa22 f303 	lsr.w	r3, r2, r3
 80062e4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80062e6:	4b0e      	ldr	r3, [pc, #56]	@ (8006320 <HAL_RCC_ClockConfig+0x358>)
 80062e8:	699b      	ldr	r3, [r3, #24]
 80062ea:	f003 030f 	and.w	r3, r3, #15
 80062ee:	4a0d      	ldr	r2, [pc, #52]	@ (8006324 <HAL_RCC_ClockConfig+0x35c>)
 80062f0:	5cd3      	ldrb	r3, [r2, r3]
 80062f2:	f003 031f 	and.w	r3, r3, #31
 80062f6:	693a      	ldr	r2, [r7, #16]
 80062f8:	fa22 f303 	lsr.w	r3, r2, r3
 80062fc:	4a0a      	ldr	r2, [pc, #40]	@ (8006328 <HAL_RCC_ClockConfig+0x360>)
 80062fe:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006300:	4a0a      	ldr	r2, [pc, #40]	@ (800632c <HAL_RCC_ClockConfig+0x364>)
 8006302:	693b      	ldr	r3, [r7, #16]
 8006304:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8006306:	4b0a      	ldr	r3, [pc, #40]	@ (8006330 <HAL_RCC_ClockConfig+0x368>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4618      	mov	r0, r3
 800630c:	f7fc ff50 	bl	80031b0 <HAL_InitTick>
 8006310:	4603      	mov	r3, r0
 8006312:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006314:	7bfb      	ldrb	r3, [r7, #15]
}
 8006316:	4618      	mov	r0, r3
 8006318:	3718      	adds	r7, #24
 800631a:	46bd      	mov	sp, r7
 800631c:	bd80      	pop	{r7, pc}
 800631e:	bf00      	nop
 8006320:	58024400 	.word	0x58024400
 8006324:	08012d4c 	.word	0x08012d4c
 8006328:	24000024 	.word	0x24000024
 800632c:	24000020 	.word	0x24000020
 8006330:	24000058 	.word	0x24000058

08006334 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006334:	b480      	push	{r7}
 8006336:	b089      	sub	sp, #36	@ 0x24
 8006338:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800633a:	4bb3      	ldr	r3, [pc, #716]	@ (8006608 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800633c:	691b      	ldr	r3, [r3, #16]
 800633e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006342:	2b18      	cmp	r3, #24
 8006344:	f200 8155 	bhi.w	80065f2 <HAL_RCC_GetSysClockFreq+0x2be>
 8006348:	a201      	add	r2, pc, #4	@ (adr r2, 8006350 <HAL_RCC_GetSysClockFreq+0x1c>)
 800634a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800634e:	bf00      	nop
 8006350:	080063b5 	.word	0x080063b5
 8006354:	080065f3 	.word	0x080065f3
 8006358:	080065f3 	.word	0x080065f3
 800635c:	080065f3 	.word	0x080065f3
 8006360:	080065f3 	.word	0x080065f3
 8006364:	080065f3 	.word	0x080065f3
 8006368:	080065f3 	.word	0x080065f3
 800636c:	080065f3 	.word	0x080065f3
 8006370:	080063db 	.word	0x080063db
 8006374:	080065f3 	.word	0x080065f3
 8006378:	080065f3 	.word	0x080065f3
 800637c:	080065f3 	.word	0x080065f3
 8006380:	080065f3 	.word	0x080065f3
 8006384:	080065f3 	.word	0x080065f3
 8006388:	080065f3 	.word	0x080065f3
 800638c:	080065f3 	.word	0x080065f3
 8006390:	080063e1 	.word	0x080063e1
 8006394:	080065f3 	.word	0x080065f3
 8006398:	080065f3 	.word	0x080065f3
 800639c:	080065f3 	.word	0x080065f3
 80063a0:	080065f3 	.word	0x080065f3
 80063a4:	080065f3 	.word	0x080065f3
 80063a8:	080065f3 	.word	0x080065f3
 80063ac:	080065f3 	.word	0x080065f3
 80063b0:	080063e7 	.word	0x080063e7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80063b4:	4b94      	ldr	r3, [pc, #592]	@ (8006608 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f003 0320 	and.w	r3, r3, #32
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d009      	beq.n	80063d4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80063c0:	4b91      	ldr	r3, [pc, #580]	@ (8006608 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	08db      	lsrs	r3, r3, #3
 80063c6:	f003 0303 	and.w	r3, r3, #3
 80063ca:	4a90      	ldr	r2, [pc, #576]	@ (800660c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80063cc:	fa22 f303 	lsr.w	r3, r2, r3
 80063d0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80063d2:	e111      	b.n	80065f8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80063d4:	4b8d      	ldr	r3, [pc, #564]	@ (800660c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80063d6:	61bb      	str	r3, [r7, #24]
      break;
 80063d8:	e10e      	b.n	80065f8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80063da:	4b8d      	ldr	r3, [pc, #564]	@ (8006610 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80063dc:	61bb      	str	r3, [r7, #24]
      break;
 80063de:	e10b      	b.n	80065f8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80063e0:	4b8c      	ldr	r3, [pc, #560]	@ (8006614 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80063e2:	61bb      	str	r3, [r7, #24]
      break;
 80063e4:	e108      	b.n	80065f8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80063e6:	4b88      	ldr	r3, [pc, #544]	@ (8006608 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80063e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063ea:	f003 0303 	and.w	r3, r3, #3
 80063ee:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80063f0:	4b85      	ldr	r3, [pc, #532]	@ (8006608 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80063f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063f4:	091b      	lsrs	r3, r3, #4
 80063f6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80063fa:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80063fc:	4b82      	ldr	r3, [pc, #520]	@ (8006608 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80063fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006400:	f003 0301 	and.w	r3, r3, #1
 8006404:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006406:	4b80      	ldr	r3, [pc, #512]	@ (8006608 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006408:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800640a:	08db      	lsrs	r3, r3, #3
 800640c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006410:	68fa      	ldr	r2, [r7, #12]
 8006412:	fb02 f303 	mul.w	r3, r2, r3
 8006416:	ee07 3a90 	vmov	s15, r3
 800641a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800641e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8006422:	693b      	ldr	r3, [r7, #16]
 8006424:	2b00      	cmp	r3, #0
 8006426:	f000 80e1 	beq.w	80065ec <HAL_RCC_GetSysClockFreq+0x2b8>
 800642a:	697b      	ldr	r3, [r7, #20]
 800642c:	2b02      	cmp	r3, #2
 800642e:	f000 8083 	beq.w	8006538 <HAL_RCC_GetSysClockFreq+0x204>
 8006432:	697b      	ldr	r3, [r7, #20]
 8006434:	2b02      	cmp	r3, #2
 8006436:	f200 80a1 	bhi.w	800657c <HAL_RCC_GetSysClockFreq+0x248>
 800643a:	697b      	ldr	r3, [r7, #20]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d003      	beq.n	8006448 <HAL_RCC_GetSysClockFreq+0x114>
 8006440:	697b      	ldr	r3, [r7, #20]
 8006442:	2b01      	cmp	r3, #1
 8006444:	d056      	beq.n	80064f4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006446:	e099      	b.n	800657c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006448:	4b6f      	ldr	r3, [pc, #444]	@ (8006608 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f003 0320 	and.w	r3, r3, #32
 8006450:	2b00      	cmp	r3, #0
 8006452:	d02d      	beq.n	80064b0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006454:	4b6c      	ldr	r3, [pc, #432]	@ (8006608 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	08db      	lsrs	r3, r3, #3
 800645a:	f003 0303 	and.w	r3, r3, #3
 800645e:	4a6b      	ldr	r2, [pc, #428]	@ (800660c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006460:	fa22 f303 	lsr.w	r3, r2, r3
 8006464:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	ee07 3a90 	vmov	s15, r3
 800646c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006470:	693b      	ldr	r3, [r7, #16]
 8006472:	ee07 3a90 	vmov	s15, r3
 8006476:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800647a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800647e:	4b62      	ldr	r3, [pc, #392]	@ (8006608 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006480:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006482:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006486:	ee07 3a90 	vmov	s15, r3
 800648a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800648e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006492:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8006618 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006496:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800649a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800649e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80064a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80064a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064aa:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80064ae:	e087      	b.n	80065c0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80064b0:	693b      	ldr	r3, [r7, #16]
 80064b2:	ee07 3a90 	vmov	s15, r3
 80064b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064ba:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800661c <HAL_RCC_GetSysClockFreq+0x2e8>
 80064be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80064c2:	4b51      	ldr	r3, [pc, #324]	@ (8006608 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80064c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064ca:	ee07 3a90 	vmov	s15, r3
 80064ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064d2:	ed97 6a02 	vldr	s12, [r7, #8]
 80064d6:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8006618 <HAL_RCC_GetSysClockFreq+0x2e4>
 80064da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80064de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80064e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80064e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80064ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064ee:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80064f2:	e065      	b.n	80065c0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80064f4:	693b      	ldr	r3, [r7, #16]
 80064f6:	ee07 3a90 	vmov	s15, r3
 80064fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064fe:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8006620 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006502:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006506:	4b40      	ldr	r3, [pc, #256]	@ (8006608 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006508:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800650a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800650e:	ee07 3a90 	vmov	s15, r3
 8006512:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006516:	ed97 6a02 	vldr	s12, [r7, #8]
 800651a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8006618 <HAL_RCC_GetSysClockFreq+0x2e4>
 800651e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006522:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006526:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800652a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800652e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006532:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006536:	e043      	b.n	80065c0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006538:	693b      	ldr	r3, [r7, #16]
 800653a:	ee07 3a90 	vmov	s15, r3
 800653e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006542:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8006624 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006546:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800654a:	4b2f      	ldr	r3, [pc, #188]	@ (8006608 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800654c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800654e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006552:	ee07 3a90 	vmov	s15, r3
 8006556:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800655a:	ed97 6a02 	vldr	s12, [r7, #8]
 800655e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8006618 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006562:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006566:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800656a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800656e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006572:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006576:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800657a:	e021      	b.n	80065c0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800657c:	693b      	ldr	r3, [r7, #16]
 800657e:	ee07 3a90 	vmov	s15, r3
 8006582:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006586:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8006620 <HAL_RCC_GetSysClockFreq+0x2ec>
 800658a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800658e:	4b1e      	ldr	r3, [pc, #120]	@ (8006608 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006592:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006596:	ee07 3a90 	vmov	s15, r3
 800659a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800659e:	ed97 6a02 	vldr	s12, [r7, #8]
 80065a2:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8006618 <HAL_RCC_GetSysClockFreq+0x2e4>
 80065a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80065aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80065ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80065b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80065b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065ba:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80065be:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80065c0:	4b11      	ldr	r3, [pc, #68]	@ (8006608 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80065c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065c4:	0a5b      	lsrs	r3, r3, #9
 80065c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80065ca:	3301      	adds	r3, #1
 80065cc:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	ee07 3a90 	vmov	s15, r3
 80065d4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80065d8:	edd7 6a07 	vldr	s13, [r7, #28]
 80065dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80065e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80065e4:	ee17 3a90 	vmov	r3, s15
 80065e8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80065ea:	e005      	b.n	80065f8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80065ec:	2300      	movs	r3, #0
 80065ee:	61bb      	str	r3, [r7, #24]
      break;
 80065f0:	e002      	b.n	80065f8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80065f2:	4b07      	ldr	r3, [pc, #28]	@ (8006610 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80065f4:	61bb      	str	r3, [r7, #24]
      break;
 80065f6:	bf00      	nop
  }

  return sysclockfreq;
 80065f8:	69bb      	ldr	r3, [r7, #24]
}
 80065fa:	4618      	mov	r0, r3
 80065fc:	3724      	adds	r7, #36	@ 0x24
 80065fe:	46bd      	mov	sp, r7
 8006600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006604:	4770      	bx	lr
 8006606:	bf00      	nop
 8006608:	58024400 	.word	0x58024400
 800660c:	03d09000 	.word	0x03d09000
 8006610:	003d0900 	.word	0x003d0900
 8006614:	017d7840 	.word	0x017d7840
 8006618:	46000000 	.word	0x46000000
 800661c:	4c742400 	.word	0x4c742400
 8006620:	4a742400 	.word	0x4a742400
 8006624:	4bbebc20 	.word	0x4bbebc20

08006628 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b082      	sub	sp, #8
 800662c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800662e:	f7ff fe81 	bl	8006334 <HAL_RCC_GetSysClockFreq>
 8006632:	4602      	mov	r2, r0
 8006634:	4b10      	ldr	r3, [pc, #64]	@ (8006678 <HAL_RCC_GetHCLKFreq+0x50>)
 8006636:	699b      	ldr	r3, [r3, #24]
 8006638:	0a1b      	lsrs	r3, r3, #8
 800663a:	f003 030f 	and.w	r3, r3, #15
 800663e:	490f      	ldr	r1, [pc, #60]	@ (800667c <HAL_RCC_GetHCLKFreq+0x54>)
 8006640:	5ccb      	ldrb	r3, [r1, r3]
 8006642:	f003 031f 	and.w	r3, r3, #31
 8006646:	fa22 f303 	lsr.w	r3, r2, r3
 800664a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800664c:	4b0a      	ldr	r3, [pc, #40]	@ (8006678 <HAL_RCC_GetHCLKFreq+0x50>)
 800664e:	699b      	ldr	r3, [r3, #24]
 8006650:	f003 030f 	and.w	r3, r3, #15
 8006654:	4a09      	ldr	r2, [pc, #36]	@ (800667c <HAL_RCC_GetHCLKFreq+0x54>)
 8006656:	5cd3      	ldrb	r3, [r2, r3]
 8006658:	f003 031f 	and.w	r3, r3, #31
 800665c:	687a      	ldr	r2, [r7, #4]
 800665e:	fa22 f303 	lsr.w	r3, r2, r3
 8006662:	4a07      	ldr	r2, [pc, #28]	@ (8006680 <HAL_RCC_GetHCLKFreq+0x58>)
 8006664:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006666:	4a07      	ldr	r2, [pc, #28]	@ (8006684 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800666c:	4b04      	ldr	r3, [pc, #16]	@ (8006680 <HAL_RCC_GetHCLKFreq+0x58>)
 800666e:	681b      	ldr	r3, [r3, #0]
}
 8006670:	4618      	mov	r0, r3
 8006672:	3708      	adds	r7, #8
 8006674:	46bd      	mov	sp, r7
 8006676:	bd80      	pop	{r7, pc}
 8006678:	58024400 	.word	0x58024400
 800667c:	08012d4c 	.word	0x08012d4c
 8006680:	24000024 	.word	0x24000024
 8006684:	24000020 	.word	0x24000020

08006688 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800668c:	f7ff ffcc 	bl	8006628 <HAL_RCC_GetHCLKFreq>
 8006690:	4602      	mov	r2, r0
 8006692:	4b06      	ldr	r3, [pc, #24]	@ (80066ac <HAL_RCC_GetPCLK1Freq+0x24>)
 8006694:	69db      	ldr	r3, [r3, #28]
 8006696:	091b      	lsrs	r3, r3, #4
 8006698:	f003 0307 	and.w	r3, r3, #7
 800669c:	4904      	ldr	r1, [pc, #16]	@ (80066b0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800669e:	5ccb      	ldrb	r3, [r1, r3]
 80066a0:	f003 031f 	and.w	r3, r3, #31
 80066a4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80066a8:	4618      	mov	r0, r3
 80066aa:	bd80      	pop	{r7, pc}
 80066ac:	58024400 	.word	0x58024400
 80066b0:	08012d4c 	.word	0x08012d4c

080066b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80066b8:	f7ff ffb6 	bl	8006628 <HAL_RCC_GetHCLKFreq>
 80066bc:	4602      	mov	r2, r0
 80066be:	4b06      	ldr	r3, [pc, #24]	@ (80066d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80066c0:	69db      	ldr	r3, [r3, #28]
 80066c2:	0a1b      	lsrs	r3, r3, #8
 80066c4:	f003 0307 	and.w	r3, r3, #7
 80066c8:	4904      	ldr	r1, [pc, #16]	@ (80066dc <HAL_RCC_GetPCLK2Freq+0x28>)
 80066ca:	5ccb      	ldrb	r3, [r1, r3]
 80066cc:	f003 031f 	and.w	r3, r3, #31
 80066d0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80066d4:	4618      	mov	r0, r3
 80066d6:	bd80      	pop	{r7, pc}
 80066d8:	58024400 	.word	0x58024400
 80066dc:	08012d4c 	.word	0x08012d4c

080066e0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80066e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80066e4:	b0c6      	sub	sp, #280	@ 0x118
 80066e6:	af00      	add	r7, sp, #0
 80066e8:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80066ec:	2300      	movs	r3, #0
 80066ee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80066f2:	2300      	movs	r3, #0
 80066f4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80066f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006700:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8006704:	2500      	movs	r5, #0
 8006706:	ea54 0305 	orrs.w	r3, r4, r5
 800670a:	d049      	beq.n	80067a0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800670c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006710:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006712:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006716:	d02f      	beq.n	8006778 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006718:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800671c:	d828      	bhi.n	8006770 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800671e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006722:	d01a      	beq.n	800675a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006724:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006728:	d822      	bhi.n	8006770 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800672a:	2b00      	cmp	r3, #0
 800672c:	d003      	beq.n	8006736 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800672e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006732:	d007      	beq.n	8006744 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006734:	e01c      	b.n	8006770 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006736:	4bab      	ldr	r3, [pc, #684]	@ (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006738:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800673a:	4aaa      	ldr	r2, [pc, #680]	@ (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800673c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006740:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006742:	e01a      	b.n	800677a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006744:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006748:	3308      	adds	r3, #8
 800674a:	2102      	movs	r1, #2
 800674c:	4618      	mov	r0, r3
 800674e:	f001 fc25 	bl	8007f9c <RCCEx_PLL2_Config>
 8006752:	4603      	mov	r3, r0
 8006754:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006758:	e00f      	b.n	800677a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800675a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800675e:	3328      	adds	r3, #40	@ 0x28
 8006760:	2102      	movs	r1, #2
 8006762:	4618      	mov	r0, r3
 8006764:	f001 fccc 	bl	8008100 <RCCEx_PLL3_Config>
 8006768:	4603      	mov	r3, r0
 800676a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800676e:	e004      	b.n	800677a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006770:	2301      	movs	r3, #1
 8006772:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006776:	e000      	b.n	800677a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8006778:	bf00      	nop
    }

    if (ret == HAL_OK)
 800677a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800677e:	2b00      	cmp	r3, #0
 8006780:	d10a      	bne.n	8006798 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006782:	4b98      	ldr	r3, [pc, #608]	@ (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006784:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006786:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800678a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800678e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006790:	4a94      	ldr	r2, [pc, #592]	@ (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006792:	430b      	orrs	r3, r1
 8006794:	6513      	str	r3, [r2, #80]	@ 0x50
 8006796:	e003      	b.n	80067a0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006798:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800679c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80067a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067a8:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80067ac:	f04f 0900 	mov.w	r9, #0
 80067b0:	ea58 0309 	orrs.w	r3, r8, r9
 80067b4:	d047      	beq.n	8006846 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80067b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067bc:	2b04      	cmp	r3, #4
 80067be:	d82a      	bhi.n	8006816 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80067c0:	a201      	add	r2, pc, #4	@ (adr r2, 80067c8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80067c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067c6:	bf00      	nop
 80067c8:	080067dd 	.word	0x080067dd
 80067cc:	080067eb 	.word	0x080067eb
 80067d0:	08006801 	.word	0x08006801
 80067d4:	0800681f 	.word	0x0800681f
 80067d8:	0800681f 	.word	0x0800681f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80067dc:	4b81      	ldr	r3, [pc, #516]	@ (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80067de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067e0:	4a80      	ldr	r2, [pc, #512]	@ (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80067e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80067e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80067e8:	e01a      	b.n	8006820 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80067ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067ee:	3308      	adds	r3, #8
 80067f0:	2100      	movs	r1, #0
 80067f2:	4618      	mov	r0, r3
 80067f4:	f001 fbd2 	bl	8007f9c <RCCEx_PLL2_Config>
 80067f8:	4603      	mov	r3, r0
 80067fa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80067fe:	e00f      	b.n	8006820 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006800:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006804:	3328      	adds	r3, #40	@ 0x28
 8006806:	2100      	movs	r1, #0
 8006808:	4618      	mov	r0, r3
 800680a:	f001 fc79 	bl	8008100 <RCCEx_PLL3_Config>
 800680e:	4603      	mov	r3, r0
 8006810:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006814:	e004      	b.n	8006820 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006816:	2301      	movs	r3, #1
 8006818:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800681c:	e000      	b.n	8006820 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800681e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006820:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006824:	2b00      	cmp	r3, #0
 8006826:	d10a      	bne.n	800683e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006828:	4b6e      	ldr	r3, [pc, #440]	@ (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800682a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800682c:	f023 0107 	bic.w	r1, r3, #7
 8006830:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006834:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006836:	4a6b      	ldr	r2, [pc, #428]	@ (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006838:	430b      	orrs	r3, r1
 800683a:	6513      	str	r3, [r2, #80]	@ 0x50
 800683c:	e003      	b.n	8006846 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800683e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006842:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006846:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800684a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800684e:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8006852:	f04f 0b00 	mov.w	fp, #0
 8006856:	ea5a 030b 	orrs.w	r3, sl, fp
 800685a:	d05b      	beq.n	8006914 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800685c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006860:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006864:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8006868:	d03b      	beq.n	80068e2 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800686a:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800686e:	d834      	bhi.n	80068da <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006870:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006874:	d037      	beq.n	80068e6 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8006876:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800687a:	d82e      	bhi.n	80068da <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800687c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006880:	d033      	beq.n	80068ea <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8006882:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006886:	d828      	bhi.n	80068da <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006888:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800688c:	d01a      	beq.n	80068c4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800688e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006892:	d822      	bhi.n	80068da <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006894:	2b00      	cmp	r3, #0
 8006896:	d003      	beq.n	80068a0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8006898:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800689c:	d007      	beq.n	80068ae <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800689e:	e01c      	b.n	80068da <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80068a0:	4b50      	ldr	r3, [pc, #320]	@ (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80068a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068a4:	4a4f      	ldr	r2, [pc, #316]	@ (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80068a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80068aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80068ac:	e01e      	b.n	80068ec <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80068ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068b2:	3308      	adds	r3, #8
 80068b4:	2100      	movs	r1, #0
 80068b6:	4618      	mov	r0, r3
 80068b8:	f001 fb70 	bl	8007f9c <RCCEx_PLL2_Config>
 80068bc:	4603      	mov	r3, r0
 80068be:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80068c2:	e013      	b.n	80068ec <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80068c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068c8:	3328      	adds	r3, #40	@ 0x28
 80068ca:	2100      	movs	r1, #0
 80068cc:	4618      	mov	r0, r3
 80068ce:	f001 fc17 	bl	8008100 <RCCEx_PLL3_Config>
 80068d2:	4603      	mov	r3, r0
 80068d4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80068d8:	e008      	b.n	80068ec <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80068da:	2301      	movs	r3, #1
 80068dc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80068e0:	e004      	b.n	80068ec <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80068e2:	bf00      	nop
 80068e4:	e002      	b.n	80068ec <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80068e6:	bf00      	nop
 80068e8:	e000      	b.n	80068ec <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80068ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80068ec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d10b      	bne.n	800690c <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80068f4:	4b3b      	ldr	r3, [pc, #236]	@ (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80068f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068f8:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80068fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006900:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006904:	4a37      	ldr	r2, [pc, #220]	@ (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006906:	430b      	orrs	r3, r1
 8006908:	6593      	str	r3, [r2, #88]	@ 0x58
 800690a:	e003      	b.n	8006914 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800690c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006910:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006914:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800691c:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8006920:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006924:	2300      	movs	r3, #0
 8006926:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800692a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800692e:	460b      	mov	r3, r1
 8006930:	4313      	orrs	r3, r2
 8006932:	d05d      	beq.n	80069f0 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8006934:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006938:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800693c:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8006940:	d03b      	beq.n	80069ba <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8006942:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8006946:	d834      	bhi.n	80069b2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006948:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800694c:	d037      	beq.n	80069be <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800694e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006952:	d82e      	bhi.n	80069b2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006954:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006958:	d033      	beq.n	80069c2 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800695a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800695e:	d828      	bhi.n	80069b2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006960:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006964:	d01a      	beq.n	800699c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8006966:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800696a:	d822      	bhi.n	80069b2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800696c:	2b00      	cmp	r3, #0
 800696e:	d003      	beq.n	8006978 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006970:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006974:	d007      	beq.n	8006986 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8006976:	e01c      	b.n	80069b2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006978:	4b1a      	ldr	r3, [pc, #104]	@ (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800697a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800697c:	4a19      	ldr	r2, [pc, #100]	@ (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800697e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006982:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006984:	e01e      	b.n	80069c4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006986:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800698a:	3308      	adds	r3, #8
 800698c:	2100      	movs	r1, #0
 800698e:	4618      	mov	r0, r3
 8006990:	f001 fb04 	bl	8007f9c <RCCEx_PLL2_Config>
 8006994:	4603      	mov	r3, r0
 8006996:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800699a:	e013      	b.n	80069c4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800699c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069a0:	3328      	adds	r3, #40	@ 0x28
 80069a2:	2100      	movs	r1, #0
 80069a4:	4618      	mov	r0, r3
 80069a6:	f001 fbab 	bl	8008100 <RCCEx_PLL3_Config>
 80069aa:	4603      	mov	r3, r0
 80069ac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80069b0:	e008      	b.n	80069c4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80069b2:	2301      	movs	r3, #1
 80069b4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80069b8:	e004      	b.n	80069c4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80069ba:	bf00      	nop
 80069bc:	e002      	b.n	80069c4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80069be:	bf00      	nop
 80069c0:	e000      	b.n	80069c4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80069c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80069c4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d10d      	bne.n	80069e8 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80069cc:	4b05      	ldr	r3, [pc, #20]	@ (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80069ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80069d0:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80069d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069d8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80069dc:	4a01      	ldr	r2, [pc, #4]	@ (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80069de:	430b      	orrs	r3, r1
 80069e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80069e2:	e005      	b.n	80069f0 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80069e4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069e8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80069ec:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80069f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069f8:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80069fc:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006a00:	2300      	movs	r3, #0
 8006a02:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006a06:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8006a0a:	460b      	mov	r3, r1
 8006a0c:	4313      	orrs	r3, r2
 8006a0e:	d03a      	beq.n	8006a86 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8006a10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006a16:	2b30      	cmp	r3, #48	@ 0x30
 8006a18:	d01f      	beq.n	8006a5a <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8006a1a:	2b30      	cmp	r3, #48	@ 0x30
 8006a1c:	d819      	bhi.n	8006a52 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8006a1e:	2b20      	cmp	r3, #32
 8006a20:	d00c      	beq.n	8006a3c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8006a22:	2b20      	cmp	r3, #32
 8006a24:	d815      	bhi.n	8006a52 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d019      	beq.n	8006a5e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8006a2a:	2b10      	cmp	r3, #16
 8006a2c:	d111      	bne.n	8006a52 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a2e:	4baa      	ldr	r3, [pc, #680]	@ (8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006a30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a32:	4aa9      	ldr	r2, [pc, #676]	@ (8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006a34:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006a38:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8006a3a:	e011      	b.n	8006a60 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006a3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a40:	3308      	adds	r3, #8
 8006a42:	2102      	movs	r1, #2
 8006a44:	4618      	mov	r0, r3
 8006a46:	f001 faa9 	bl	8007f9c <RCCEx_PLL2_Config>
 8006a4a:	4603      	mov	r3, r0
 8006a4c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8006a50:	e006      	b.n	8006a60 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006a52:	2301      	movs	r3, #1
 8006a54:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006a58:	e002      	b.n	8006a60 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8006a5a:	bf00      	nop
 8006a5c:	e000      	b.n	8006a60 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8006a5e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a60:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d10a      	bne.n	8006a7e <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8006a68:	4b9b      	ldr	r3, [pc, #620]	@ (8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006a6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006a6c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8006a70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006a76:	4a98      	ldr	r2, [pc, #608]	@ (8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006a78:	430b      	orrs	r3, r1
 8006a7a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006a7c:	e003      	b.n	8006a86 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a7e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006a82:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006a86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a8e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8006a92:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006a96:	2300      	movs	r3, #0
 8006a98:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006a9c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8006aa0:	460b      	mov	r3, r1
 8006aa2:	4313      	orrs	r3, r2
 8006aa4:	d051      	beq.n	8006b4a <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8006aa6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006aaa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006aac:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006ab0:	d035      	beq.n	8006b1e <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8006ab2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006ab6:	d82e      	bhi.n	8006b16 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8006ab8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006abc:	d031      	beq.n	8006b22 <HAL_RCCEx_PeriphCLKConfig+0x442>
 8006abe:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006ac2:	d828      	bhi.n	8006b16 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8006ac4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006ac8:	d01a      	beq.n	8006b00 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8006aca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006ace:	d822      	bhi.n	8006b16 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d003      	beq.n	8006adc <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8006ad4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ad8:	d007      	beq.n	8006aea <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8006ada:	e01c      	b.n	8006b16 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006adc:	4b7e      	ldr	r3, [pc, #504]	@ (8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006ade:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ae0:	4a7d      	ldr	r2, [pc, #500]	@ (8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006ae2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006ae6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006ae8:	e01c      	b.n	8006b24 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006aea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006aee:	3308      	adds	r3, #8
 8006af0:	2100      	movs	r1, #0
 8006af2:	4618      	mov	r0, r3
 8006af4:	f001 fa52 	bl	8007f9c <RCCEx_PLL2_Config>
 8006af8:	4603      	mov	r3, r0
 8006afa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006afe:	e011      	b.n	8006b24 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006b00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b04:	3328      	adds	r3, #40	@ 0x28
 8006b06:	2100      	movs	r1, #0
 8006b08:	4618      	mov	r0, r3
 8006b0a:	f001 faf9 	bl	8008100 <RCCEx_PLL3_Config>
 8006b0e:	4603      	mov	r3, r0
 8006b10:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006b14:	e006      	b.n	8006b24 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b16:	2301      	movs	r3, #1
 8006b18:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006b1c:	e002      	b.n	8006b24 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8006b1e:	bf00      	nop
 8006b20:	e000      	b.n	8006b24 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8006b22:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b24:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d10a      	bne.n	8006b42 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006b2c:	4b6a      	ldr	r3, [pc, #424]	@ (8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006b2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b30:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8006b34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b3a:	4a67      	ldr	r2, [pc, #412]	@ (8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006b3c:	430b      	orrs	r3, r1
 8006b3e:	6513      	str	r3, [r2, #80]	@ 0x50
 8006b40:	e003      	b.n	8006b4a <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b42:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006b46:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006b4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b52:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8006b56:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006b60:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8006b64:	460b      	mov	r3, r1
 8006b66:	4313      	orrs	r3, r2
 8006b68:	d053      	beq.n	8006c12 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8006b6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006b70:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006b74:	d033      	beq.n	8006bde <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8006b76:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006b7a:	d82c      	bhi.n	8006bd6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006b7c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006b80:	d02f      	beq.n	8006be2 <HAL_RCCEx_PeriphCLKConfig+0x502>
 8006b82:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006b86:	d826      	bhi.n	8006bd6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006b88:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006b8c:	d02b      	beq.n	8006be6 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8006b8e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006b92:	d820      	bhi.n	8006bd6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006b94:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006b98:	d012      	beq.n	8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8006b9a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006b9e:	d81a      	bhi.n	8006bd6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d022      	beq.n	8006bea <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8006ba4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ba8:	d115      	bne.n	8006bd6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006baa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bae:	3308      	adds	r3, #8
 8006bb0:	2101      	movs	r1, #1
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	f001 f9f2 	bl	8007f9c <RCCEx_PLL2_Config>
 8006bb8:	4603      	mov	r3, r0
 8006bba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006bbe:	e015      	b.n	8006bec <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006bc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bc4:	3328      	adds	r3, #40	@ 0x28
 8006bc6:	2101      	movs	r1, #1
 8006bc8:	4618      	mov	r0, r3
 8006bca:	f001 fa99 	bl	8008100 <RCCEx_PLL3_Config>
 8006bce:	4603      	mov	r3, r0
 8006bd0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006bd4:	e00a      	b.n	8006bec <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006bd6:	2301      	movs	r3, #1
 8006bd8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006bdc:	e006      	b.n	8006bec <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006bde:	bf00      	nop
 8006be0:	e004      	b.n	8006bec <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006be2:	bf00      	nop
 8006be4:	e002      	b.n	8006bec <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006be6:	bf00      	nop
 8006be8:	e000      	b.n	8006bec <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006bea:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006bec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d10a      	bne.n	8006c0a <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006bf4:	4b38      	ldr	r3, [pc, #224]	@ (8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006bf6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006bf8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8006bfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006c02:	4a35      	ldr	r2, [pc, #212]	@ (8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006c04:	430b      	orrs	r3, r1
 8006c06:	6513      	str	r3, [r2, #80]	@ 0x50
 8006c08:	e003      	b.n	8006c12 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c0a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006c0e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006c12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c1a:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8006c1e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006c22:	2300      	movs	r3, #0
 8006c24:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006c28:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006c2c:	460b      	mov	r3, r1
 8006c2e:	4313      	orrs	r3, r2
 8006c30:	d058      	beq.n	8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8006c32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c36:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006c3a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006c3e:	d033      	beq.n	8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8006c40:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006c44:	d82c      	bhi.n	8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006c46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c4a:	d02f      	beq.n	8006cac <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8006c4c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c50:	d826      	bhi.n	8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006c52:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006c56:	d02b      	beq.n	8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8006c58:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006c5c:	d820      	bhi.n	8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006c5e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006c62:	d012      	beq.n	8006c8a <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8006c64:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006c68:	d81a      	bhi.n	8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d022      	beq.n	8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8006c6e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006c72:	d115      	bne.n	8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006c74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c78:	3308      	adds	r3, #8
 8006c7a:	2101      	movs	r1, #1
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	f001 f98d 	bl	8007f9c <RCCEx_PLL2_Config>
 8006c82:	4603      	mov	r3, r0
 8006c84:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006c88:	e015      	b.n	8006cb6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006c8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c8e:	3328      	adds	r3, #40	@ 0x28
 8006c90:	2101      	movs	r1, #1
 8006c92:	4618      	mov	r0, r3
 8006c94:	f001 fa34 	bl	8008100 <RCCEx_PLL3_Config>
 8006c98:	4603      	mov	r3, r0
 8006c9a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006c9e:	e00a      	b.n	8006cb6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8006ca0:	2301      	movs	r3, #1
 8006ca2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006ca6:	e006      	b.n	8006cb6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006ca8:	bf00      	nop
 8006caa:	e004      	b.n	8006cb6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006cac:	bf00      	nop
 8006cae:	e002      	b.n	8006cb6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006cb0:	bf00      	nop
 8006cb2:	e000      	b.n	8006cb6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006cb4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006cb6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d10e      	bne.n	8006cdc <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006cbe:	4b06      	ldr	r3, [pc, #24]	@ (8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006cc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006cc2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006cc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cca:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006cce:	4a02      	ldr	r2, [pc, #8]	@ (8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006cd0:	430b      	orrs	r3, r1
 8006cd2:	6593      	str	r3, [r2, #88]	@ 0x58
 8006cd4:	e006      	b.n	8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8006cd6:	bf00      	nop
 8006cd8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cdc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006ce0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006ce4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cec:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8006cf0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006cfa:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8006cfe:	460b      	mov	r3, r1
 8006d00:	4313      	orrs	r3, r2
 8006d02:	d037      	beq.n	8006d74 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8006d04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d08:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006d0a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006d0e:	d00e      	beq.n	8006d2e <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8006d10:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006d14:	d816      	bhi.n	8006d44 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d018      	beq.n	8006d4c <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8006d1a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006d1e:	d111      	bne.n	8006d44 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d20:	4bc4      	ldr	r3, [pc, #784]	@ (8007034 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006d22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d24:	4ac3      	ldr	r2, [pc, #780]	@ (8007034 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006d26:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006d2a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006d2c:	e00f      	b.n	8006d4e <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006d2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d32:	3308      	adds	r3, #8
 8006d34:	2101      	movs	r1, #1
 8006d36:	4618      	mov	r0, r3
 8006d38:	f001 f930 	bl	8007f9c <RCCEx_PLL2_Config>
 8006d3c:	4603      	mov	r3, r0
 8006d3e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006d42:	e004      	b.n	8006d4e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006d44:	2301      	movs	r3, #1
 8006d46:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006d4a:	e000      	b.n	8006d4e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8006d4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d4e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d10a      	bne.n	8006d6c <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006d56:	4bb7      	ldr	r3, [pc, #732]	@ (8007034 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006d58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d5a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006d5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d62:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006d64:	4ab3      	ldr	r2, [pc, #716]	@ (8007034 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006d66:	430b      	orrs	r3, r1
 8006d68:	6513      	str	r3, [r2, #80]	@ 0x50
 8006d6a:	e003      	b.n	8006d74 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d6c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006d70:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006d74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d7c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8006d80:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006d84:	2300      	movs	r3, #0
 8006d86:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006d8a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8006d8e:	460b      	mov	r3, r1
 8006d90:	4313      	orrs	r3, r2
 8006d92:	d039      	beq.n	8006e08 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8006d94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d98:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006d9a:	2b03      	cmp	r3, #3
 8006d9c:	d81c      	bhi.n	8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8006d9e:	a201      	add	r2, pc, #4	@ (adr r2, 8006da4 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8006da0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006da4:	08006de1 	.word	0x08006de1
 8006da8:	08006db5 	.word	0x08006db5
 8006dac:	08006dc3 	.word	0x08006dc3
 8006db0:	08006de1 	.word	0x08006de1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006db4:	4b9f      	ldr	r3, [pc, #636]	@ (8007034 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006db6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006db8:	4a9e      	ldr	r2, [pc, #632]	@ (8007034 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006dba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006dbe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006dc0:	e00f      	b.n	8006de2 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006dc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006dc6:	3308      	adds	r3, #8
 8006dc8:	2102      	movs	r1, #2
 8006dca:	4618      	mov	r0, r3
 8006dcc:	f001 f8e6 	bl	8007f9c <RCCEx_PLL2_Config>
 8006dd0:	4603      	mov	r3, r0
 8006dd2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006dd6:	e004      	b.n	8006de2 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006dd8:	2301      	movs	r3, #1
 8006dda:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006dde:	e000      	b.n	8006de2 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8006de0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006de2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d10a      	bne.n	8006e00 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006dea:	4b92      	ldr	r3, [pc, #584]	@ (8007034 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006dec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006dee:	f023 0103 	bic.w	r1, r3, #3
 8006df2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006df6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006df8:	4a8e      	ldr	r2, [pc, #568]	@ (8007034 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006dfa:	430b      	orrs	r3, r1
 8006dfc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006dfe:	e003      	b.n	8006e08 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e00:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006e04:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006e08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e10:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8006e14:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006e18:	2300      	movs	r3, #0
 8006e1a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006e1e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006e22:	460b      	mov	r3, r1
 8006e24:	4313      	orrs	r3, r2
 8006e26:	f000 8099 	beq.w	8006f5c <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006e2a:	4b83      	ldr	r3, [pc, #524]	@ (8007038 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	4a82      	ldr	r2, [pc, #520]	@ (8007038 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006e30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006e34:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006e36:	f7fc fa05 	bl	8003244 <HAL_GetTick>
 8006e3a:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006e3e:	e00b      	b.n	8006e58 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006e40:	f7fc fa00 	bl	8003244 <HAL_GetTick>
 8006e44:	4602      	mov	r2, r0
 8006e46:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8006e4a:	1ad3      	subs	r3, r2, r3
 8006e4c:	2b64      	cmp	r3, #100	@ 0x64
 8006e4e:	d903      	bls.n	8006e58 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8006e50:	2303      	movs	r3, #3
 8006e52:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006e56:	e005      	b.n	8006e64 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006e58:	4b77      	ldr	r3, [pc, #476]	@ (8007038 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d0ed      	beq.n	8006e40 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8006e64:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d173      	bne.n	8006f54 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006e6c:	4b71      	ldr	r3, [pc, #452]	@ (8007034 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006e6e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006e70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e74:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006e78:	4053      	eors	r3, r2
 8006e7a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d015      	beq.n	8006eae <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006e82:	4b6c      	ldr	r3, [pc, #432]	@ (8007034 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006e84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e86:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006e8a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006e8e:	4b69      	ldr	r3, [pc, #420]	@ (8007034 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006e90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e92:	4a68      	ldr	r2, [pc, #416]	@ (8007034 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006e94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006e98:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006e9a:	4b66      	ldr	r3, [pc, #408]	@ (8007034 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006e9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e9e:	4a65      	ldr	r2, [pc, #404]	@ (8007034 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006ea0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006ea4:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006ea6:	4a63      	ldr	r2, [pc, #396]	@ (8007034 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006ea8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006eac:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006eae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006eb2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006eb6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006eba:	d118      	bne.n	8006eee <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ebc:	f7fc f9c2 	bl	8003244 <HAL_GetTick>
 8006ec0:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006ec4:	e00d      	b.n	8006ee2 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ec6:	f7fc f9bd 	bl	8003244 <HAL_GetTick>
 8006eca:	4602      	mov	r2, r0
 8006ecc:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8006ed0:	1ad2      	subs	r2, r2, r3
 8006ed2:	f241 3388 	movw	r3, #5000	@ 0x1388
 8006ed6:	429a      	cmp	r2, r3
 8006ed8:	d903      	bls.n	8006ee2 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8006eda:	2303      	movs	r3, #3
 8006edc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8006ee0:	e005      	b.n	8006eee <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006ee2:	4b54      	ldr	r3, [pc, #336]	@ (8007034 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006ee4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ee6:	f003 0302 	and.w	r3, r3, #2
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d0eb      	beq.n	8006ec6 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8006eee:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d129      	bne.n	8006f4a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006ef6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006efa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006efe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006f02:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006f06:	d10e      	bne.n	8006f26 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8006f08:	4b4a      	ldr	r3, [pc, #296]	@ (8007034 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006f0a:	691b      	ldr	r3, [r3, #16]
 8006f0c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8006f10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f14:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006f18:	091a      	lsrs	r2, r3, #4
 8006f1a:	4b48      	ldr	r3, [pc, #288]	@ (800703c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006f1c:	4013      	ands	r3, r2
 8006f1e:	4a45      	ldr	r2, [pc, #276]	@ (8007034 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006f20:	430b      	orrs	r3, r1
 8006f22:	6113      	str	r3, [r2, #16]
 8006f24:	e005      	b.n	8006f32 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8006f26:	4b43      	ldr	r3, [pc, #268]	@ (8007034 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006f28:	691b      	ldr	r3, [r3, #16]
 8006f2a:	4a42      	ldr	r2, [pc, #264]	@ (8007034 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006f2c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006f30:	6113      	str	r3, [r2, #16]
 8006f32:	4b40      	ldr	r3, [pc, #256]	@ (8007034 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006f34:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8006f36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f3a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006f3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006f42:	4a3c      	ldr	r2, [pc, #240]	@ (8007034 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006f44:	430b      	orrs	r3, r1
 8006f46:	6713      	str	r3, [r2, #112]	@ 0x70
 8006f48:	e008      	b.n	8006f5c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006f4a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006f4e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8006f52:	e003      	b.n	8006f5c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f54:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006f58:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006f5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f64:	f002 0301 	and.w	r3, r2, #1
 8006f68:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006f72:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8006f76:	460b      	mov	r3, r1
 8006f78:	4313      	orrs	r3, r2
 8006f7a:	f000 808f 	beq.w	800709c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8006f7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f82:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006f84:	2b28      	cmp	r3, #40	@ 0x28
 8006f86:	d871      	bhi.n	800706c <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8006f88:	a201      	add	r2, pc, #4	@ (adr r2, 8006f90 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8006f8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f8e:	bf00      	nop
 8006f90:	08007075 	.word	0x08007075
 8006f94:	0800706d 	.word	0x0800706d
 8006f98:	0800706d 	.word	0x0800706d
 8006f9c:	0800706d 	.word	0x0800706d
 8006fa0:	0800706d 	.word	0x0800706d
 8006fa4:	0800706d 	.word	0x0800706d
 8006fa8:	0800706d 	.word	0x0800706d
 8006fac:	0800706d 	.word	0x0800706d
 8006fb0:	08007041 	.word	0x08007041
 8006fb4:	0800706d 	.word	0x0800706d
 8006fb8:	0800706d 	.word	0x0800706d
 8006fbc:	0800706d 	.word	0x0800706d
 8006fc0:	0800706d 	.word	0x0800706d
 8006fc4:	0800706d 	.word	0x0800706d
 8006fc8:	0800706d 	.word	0x0800706d
 8006fcc:	0800706d 	.word	0x0800706d
 8006fd0:	08007057 	.word	0x08007057
 8006fd4:	0800706d 	.word	0x0800706d
 8006fd8:	0800706d 	.word	0x0800706d
 8006fdc:	0800706d 	.word	0x0800706d
 8006fe0:	0800706d 	.word	0x0800706d
 8006fe4:	0800706d 	.word	0x0800706d
 8006fe8:	0800706d 	.word	0x0800706d
 8006fec:	0800706d 	.word	0x0800706d
 8006ff0:	08007075 	.word	0x08007075
 8006ff4:	0800706d 	.word	0x0800706d
 8006ff8:	0800706d 	.word	0x0800706d
 8006ffc:	0800706d 	.word	0x0800706d
 8007000:	0800706d 	.word	0x0800706d
 8007004:	0800706d 	.word	0x0800706d
 8007008:	0800706d 	.word	0x0800706d
 800700c:	0800706d 	.word	0x0800706d
 8007010:	08007075 	.word	0x08007075
 8007014:	0800706d 	.word	0x0800706d
 8007018:	0800706d 	.word	0x0800706d
 800701c:	0800706d 	.word	0x0800706d
 8007020:	0800706d 	.word	0x0800706d
 8007024:	0800706d 	.word	0x0800706d
 8007028:	0800706d 	.word	0x0800706d
 800702c:	0800706d 	.word	0x0800706d
 8007030:	08007075 	.word	0x08007075
 8007034:	58024400 	.word	0x58024400
 8007038:	58024800 	.word	0x58024800
 800703c:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007040:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007044:	3308      	adds	r3, #8
 8007046:	2101      	movs	r1, #1
 8007048:	4618      	mov	r0, r3
 800704a:	f000 ffa7 	bl	8007f9c <RCCEx_PLL2_Config>
 800704e:	4603      	mov	r3, r0
 8007050:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007054:	e00f      	b.n	8007076 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007056:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800705a:	3328      	adds	r3, #40	@ 0x28
 800705c:	2101      	movs	r1, #1
 800705e:	4618      	mov	r0, r3
 8007060:	f001 f84e 	bl	8008100 <RCCEx_PLL3_Config>
 8007064:	4603      	mov	r3, r0
 8007066:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800706a:	e004      	b.n	8007076 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800706c:	2301      	movs	r3, #1
 800706e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007072:	e000      	b.n	8007076 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8007074:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007076:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800707a:	2b00      	cmp	r3, #0
 800707c:	d10a      	bne.n	8007094 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800707e:	4bbf      	ldr	r3, [pc, #764]	@ (800737c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007080:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007082:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8007086:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800708a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800708c:	4abb      	ldr	r2, [pc, #748]	@ (800737c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800708e:	430b      	orrs	r3, r1
 8007090:	6553      	str	r3, [r2, #84]	@ 0x54
 8007092:	e003      	b.n	800709c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007094:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007098:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800709c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070a4:	f002 0302 	and.w	r3, r2, #2
 80070a8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80070ac:	2300      	movs	r3, #0
 80070ae:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80070b2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80070b6:	460b      	mov	r3, r1
 80070b8:	4313      	orrs	r3, r2
 80070ba:	d041      	beq.n	8007140 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80070bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80070c2:	2b05      	cmp	r3, #5
 80070c4:	d824      	bhi.n	8007110 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 80070c6:	a201      	add	r2, pc, #4	@ (adr r2, 80070cc <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 80070c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070cc:	08007119 	.word	0x08007119
 80070d0:	080070e5 	.word	0x080070e5
 80070d4:	080070fb 	.word	0x080070fb
 80070d8:	08007119 	.word	0x08007119
 80070dc:	08007119 	.word	0x08007119
 80070e0:	08007119 	.word	0x08007119
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80070e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070e8:	3308      	adds	r3, #8
 80070ea:	2101      	movs	r1, #1
 80070ec:	4618      	mov	r0, r3
 80070ee:	f000 ff55 	bl	8007f9c <RCCEx_PLL2_Config>
 80070f2:	4603      	mov	r3, r0
 80070f4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80070f8:	e00f      	b.n	800711a <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80070fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070fe:	3328      	adds	r3, #40	@ 0x28
 8007100:	2101      	movs	r1, #1
 8007102:	4618      	mov	r0, r3
 8007104:	f000 fffc 	bl	8008100 <RCCEx_PLL3_Config>
 8007108:	4603      	mov	r3, r0
 800710a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800710e:	e004      	b.n	800711a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007110:	2301      	movs	r3, #1
 8007112:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007116:	e000      	b.n	800711a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8007118:	bf00      	nop
    }

    if (ret == HAL_OK)
 800711a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800711e:	2b00      	cmp	r3, #0
 8007120:	d10a      	bne.n	8007138 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007122:	4b96      	ldr	r3, [pc, #600]	@ (800737c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007124:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007126:	f023 0107 	bic.w	r1, r3, #7
 800712a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800712e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007130:	4a92      	ldr	r2, [pc, #584]	@ (800737c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007132:	430b      	orrs	r3, r1
 8007134:	6553      	str	r3, [r2, #84]	@ 0x54
 8007136:	e003      	b.n	8007140 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007138:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800713c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007140:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007148:	f002 0304 	and.w	r3, r2, #4
 800714c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007150:	2300      	movs	r3, #0
 8007152:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007156:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800715a:	460b      	mov	r3, r1
 800715c:	4313      	orrs	r3, r2
 800715e:	d044      	beq.n	80071ea <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8007160:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007164:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007168:	2b05      	cmp	r3, #5
 800716a:	d825      	bhi.n	80071b8 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800716c:	a201      	add	r2, pc, #4	@ (adr r2, 8007174 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800716e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007172:	bf00      	nop
 8007174:	080071c1 	.word	0x080071c1
 8007178:	0800718d 	.word	0x0800718d
 800717c:	080071a3 	.word	0x080071a3
 8007180:	080071c1 	.word	0x080071c1
 8007184:	080071c1 	.word	0x080071c1
 8007188:	080071c1 	.word	0x080071c1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800718c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007190:	3308      	adds	r3, #8
 8007192:	2101      	movs	r1, #1
 8007194:	4618      	mov	r0, r3
 8007196:	f000 ff01 	bl	8007f9c <RCCEx_PLL2_Config>
 800719a:	4603      	mov	r3, r0
 800719c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80071a0:	e00f      	b.n	80071c2 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80071a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071a6:	3328      	adds	r3, #40	@ 0x28
 80071a8:	2101      	movs	r1, #1
 80071aa:	4618      	mov	r0, r3
 80071ac:	f000 ffa8 	bl	8008100 <RCCEx_PLL3_Config>
 80071b0:	4603      	mov	r3, r0
 80071b2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80071b6:	e004      	b.n	80071c2 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80071b8:	2301      	movs	r3, #1
 80071ba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80071be:	e000      	b.n	80071c2 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 80071c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80071c2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d10b      	bne.n	80071e2 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80071ca:	4b6c      	ldr	r3, [pc, #432]	@ (800737c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80071cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80071ce:	f023 0107 	bic.w	r1, r3, #7
 80071d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80071da:	4a68      	ldr	r2, [pc, #416]	@ (800737c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80071dc:	430b      	orrs	r3, r1
 80071de:	6593      	str	r3, [r2, #88]	@ 0x58
 80071e0:	e003      	b.n	80071ea <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071e2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80071e6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80071ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071f2:	f002 0320 	and.w	r3, r2, #32
 80071f6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80071fa:	2300      	movs	r3, #0
 80071fc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007200:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8007204:	460b      	mov	r3, r1
 8007206:	4313      	orrs	r3, r2
 8007208:	d055      	beq.n	80072b6 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800720a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800720e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007212:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007216:	d033      	beq.n	8007280 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8007218:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800721c:	d82c      	bhi.n	8007278 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800721e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007222:	d02f      	beq.n	8007284 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8007224:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007228:	d826      	bhi.n	8007278 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800722a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800722e:	d02b      	beq.n	8007288 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8007230:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007234:	d820      	bhi.n	8007278 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8007236:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800723a:	d012      	beq.n	8007262 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800723c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007240:	d81a      	bhi.n	8007278 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8007242:	2b00      	cmp	r3, #0
 8007244:	d022      	beq.n	800728c <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8007246:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800724a:	d115      	bne.n	8007278 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800724c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007250:	3308      	adds	r3, #8
 8007252:	2100      	movs	r1, #0
 8007254:	4618      	mov	r0, r3
 8007256:	f000 fea1 	bl	8007f9c <RCCEx_PLL2_Config>
 800725a:	4603      	mov	r3, r0
 800725c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007260:	e015      	b.n	800728e <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007262:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007266:	3328      	adds	r3, #40	@ 0x28
 8007268:	2102      	movs	r1, #2
 800726a:	4618      	mov	r0, r3
 800726c:	f000 ff48 	bl	8008100 <RCCEx_PLL3_Config>
 8007270:	4603      	mov	r3, r0
 8007272:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007276:	e00a      	b.n	800728e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007278:	2301      	movs	r3, #1
 800727a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800727e:	e006      	b.n	800728e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8007280:	bf00      	nop
 8007282:	e004      	b.n	800728e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8007284:	bf00      	nop
 8007286:	e002      	b.n	800728e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8007288:	bf00      	nop
 800728a:	e000      	b.n	800728e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800728c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800728e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007292:	2b00      	cmp	r3, #0
 8007294:	d10b      	bne.n	80072ae <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007296:	4b39      	ldr	r3, [pc, #228]	@ (800737c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007298:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800729a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800729e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80072a6:	4a35      	ldr	r2, [pc, #212]	@ (800737c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80072a8:	430b      	orrs	r3, r1
 80072aa:	6553      	str	r3, [r2, #84]	@ 0x54
 80072ac:	e003      	b.n	80072b6 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072ae:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80072b2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80072b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072be:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80072c2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80072c6:	2300      	movs	r3, #0
 80072c8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80072cc:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80072d0:	460b      	mov	r3, r1
 80072d2:	4313      	orrs	r3, r2
 80072d4:	d058      	beq.n	8007388 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80072d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072da:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80072de:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80072e2:	d033      	beq.n	800734c <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 80072e4:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80072e8:	d82c      	bhi.n	8007344 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80072ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80072ee:	d02f      	beq.n	8007350 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80072f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80072f4:	d826      	bhi.n	8007344 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80072f6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80072fa:	d02b      	beq.n	8007354 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80072fc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007300:	d820      	bhi.n	8007344 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8007302:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007306:	d012      	beq.n	800732e <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8007308:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800730c:	d81a      	bhi.n	8007344 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800730e:	2b00      	cmp	r3, #0
 8007310:	d022      	beq.n	8007358 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8007312:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007316:	d115      	bne.n	8007344 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007318:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800731c:	3308      	adds	r3, #8
 800731e:	2100      	movs	r1, #0
 8007320:	4618      	mov	r0, r3
 8007322:	f000 fe3b 	bl	8007f9c <RCCEx_PLL2_Config>
 8007326:	4603      	mov	r3, r0
 8007328:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800732c:	e015      	b.n	800735a <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800732e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007332:	3328      	adds	r3, #40	@ 0x28
 8007334:	2102      	movs	r1, #2
 8007336:	4618      	mov	r0, r3
 8007338:	f000 fee2 	bl	8008100 <RCCEx_PLL3_Config>
 800733c:	4603      	mov	r3, r0
 800733e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007342:	e00a      	b.n	800735a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007344:	2301      	movs	r3, #1
 8007346:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800734a:	e006      	b.n	800735a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800734c:	bf00      	nop
 800734e:	e004      	b.n	800735a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8007350:	bf00      	nop
 8007352:	e002      	b.n	800735a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8007354:	bf00      	nop
 8007356:	e000      	b.n	800735a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8007358:	bf00      	nop
    }

    if (ret == HAL_OK)
 800735a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800735e:	2b00      	cmp	r3, #0
 8007360:	d10e      	bne.n	8007380 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007362:	4b06      	ldr	r3, [pc, #24]	@ (800737c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007364:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007366:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800736a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800736e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007372:	4a02      	ldr	r2, [pc, #8]	@ (800737c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007374:	430b      	orrs	r3, r1
 8007376:	6593      	str	r3, [r2, #88]	@ 0x58
 8007378:	e006      	b.n	8007388 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800737a:	bf00      	nop
 800737c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007380:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007384:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007388:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800738c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007390:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8007394:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007398:	2300      	movs	r3, #0
 800739a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800739e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80073a2:	460b      	mov	r3, r1
 80073a4:	4313      	orrs	r3, r2
 80073a6:	d055      	beq.n	8007454 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80073a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073ac:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80073b0:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80073b4:	d033      	beq.n	800741e <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 80073b6:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80073ba:	d82c      	bhi.n	8007416 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80073bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80073c0:	d02f      	beq.n	8007422 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 80073c2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80073c6:	d826      	bhi.n	8007416 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80073c8:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80073cc:	d02b      	beq.n	8007426 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 80073ce:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80073d2:	d820      	bhi.n	8007416 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80073d4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80073d8:	d012      	beq.n	8007400 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 80073da:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80073de:	d81a      	bhi.n	8007416 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d022      	beq.n	800742a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80073e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80073e8:	d115      	bne.n	8007416 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80073ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073ee:	3308      	adds	r3, #8
 80073f0:	2100      	movs	r1, #0
 80073f2:	4618      	mov	r0, r3
 80073f4:	f000 fdd2 	bl	8007f9c <RCCEx_PLL2_Config>
 80073f8:	4603      	mov	r3, r0
 80073fa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80073fe:	e015      	b.n	800742c <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007400:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007404:	3328      	adds	r3, #40	@ 0x28
 8007406:	2102      	movs	r1, #2
 8007408:	4618      	mov	r0, r3
 800740a:	f000 fe79 	bl	8008100 <RCCEx_PLL3_Config>
 800740e:	4603      	mov	r3, r0
 8007410:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007414:	e00a      	b.n	800742c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007416:	2301      	movs	r3, #1
 8007418:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800741c:	e006      	b.n	800742c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800741e:	bf00      	nop
 8007420:	e004      	b.n	800742c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8007422:	bf00      	nop
 8007424:	e002      	b.n	800742c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8007426:	bf00      	nop
 8007428:	e000      	b.n	800742c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800742a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800742c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007430:	2b00      	cmp	r3, #0
 8007432:	d10b      	bne.n	800744c <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007434:	4ba0      	ldr	r3, [pc, #640]	@ (80076b8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007436:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007438:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800743c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007440:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007444:	4a9c      	ldr	r2, [pc, #624]	@ (80076b8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007446:	430b      	orrs	r3, r1
 8007448:	6593      	str	r3, [r2, #88]	@ 0x58
 800744a:	e003      	b.n	8007454 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800744c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007450:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8007454:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800745c:	f002 0308 	and.w	r3, r2, #8
 8007460:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007464:	2300      	movs	r3, #0
 8007466:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800746a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800746e:	460b      	mov	r3, r1
 8007470:	4313      	orrs	r3, r2
 8007472:	d01e      	beq.n	80074b2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8007474:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007478:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800747c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007480:	d10c      	bne.n	800749c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007482:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007486:	3328      	adds	r3, #40	@ 0x28
 8007488:	2102      	movs	r1, #2
 800748a:	4618      	mov	r0, r3
 800748c:	f000 fe38 	bl	8008100 <RCCEx_PLL3_Config>
 8007490:	4603      	mov	r3, r0
 8007492:	2b00      	cmp	r3, #0
 8007494:	d002      	beq.n	800749c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8007496:	2301      	movs	r3, #1
 8007498:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800749c:	4b86      	ldr	r3, [pc, #536]	@ (80076b8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800749e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80074a0:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80074a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80074ac:	4a82      	ldr	r2, [pc, #520]	@ (80076b8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80074ae:	430b      	orrs	r3, r1
 80074b0:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80074b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074ba:	f002 0310 	and.w	r3, r2, #16
 80074be:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80074c2:	2300      	movs	r3, #0
 80074c4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80074c8:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80074cc:	460b      	mov	r3, r1
 80074ce:	4313      	orrs	r3, r2
 80074d0:	d01e      	beq.n	8007510 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80074d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80074da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80074de:	d10c      	bne.n	80074fa <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80074e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074e4:	3328      	adds	r3, #40	@ 0x28
 80074e6:	2102      	movs	r1, #2
 80074e8:	4618      	mov	r0, r3
 80074ea:	f000 fe09 	bl	8008100 <RCCEx_PLL3_Config>
 80074ee:	4603      	mov	r3, r0
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d002      	beq.n	80074fa <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 80074f4:	2301      	movs	r3, #1
 80074f6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80074fa:	4b6f      	ldr	r3, [pc, #444]	@ (80076b8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80074fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80074fe:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007502:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007506:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800750a:	4a6b      	ldr	r2, [pc, #428]	@ (80076b8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800750c:	430b      	orrs	r3, r1
 800750e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007510:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007518:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800751c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800751e:	2300      	movs	r3, #0
 8007520:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007522:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8007526:	460b      	mov	r3, r1
 8007528:	4313      	orrs	r3, r2
 800752a:	d03e      	beq.n	80075aa <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800752c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007530:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007534:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007538:	d022      	beq.n	8007580 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800753a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800753e:	d81b      	bhi.n	8007578 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8007540:	2b00      	cmp	r3, #0
 8007542:	d003      	beq.n	800754c <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8007544:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007548:	d00b      	beq.n	8007562 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800754a:	e015      	b.n	8007578 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800754c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007550:	3308      	adds	r3, #8
 8007552:	2100      	movs	r1, #0
 8007554:	4618      	mov	r0, r3
 8007556:	f000 fd21 	bl	8007f9c <RCCEx_PLL2_Config>
 800755a:	4603      	mov	r3, r0
 800755c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007560:	e00f      	b.n	8007582 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007562:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007566:	3328      	adds	r3, #40	@ 0x28
 8007568:	2102      	movs	r1, #2
 800756a:	4618      	mov	r0, r3
 800756c:	f000 fdc8 	bl	8008100 <RCCEx_PLL3_Config>
 8007570:	4603      	mov	r3, r0
 8007572:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007576:	e004      	b.n	8007582 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007578:	2301      	movs	r3, #1
 800757a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800757e:	e000      	b.n	8007582 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8007580:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007582:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007586:	2b00      	cmp	r3, #0
 8007588:	d10b      	bne.n	80075a2 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800758a:	4b4b      	ldr	r3, [pc, #300]	@ (80076b8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800758c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800758e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8007592:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007596:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800759a:	4a47      	ldr	r2, [pc, #284]	@ (80076b8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800759c:	430b      	orrs	r3, r1
 800759e:	6593      	str	r3, [r2, #88]	@ 0x58
 80075a0:	e003      	b.n	80075aa <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075a2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80075a6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80075aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075b2:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80075b6:	673b      	str	r3, [r7, #112]	@ 0x70
 80075b8:	2300      	movs	r3, #0
 80075ba:	677b      	str	r3, [r7, #116]	@ 0x74
 80075bc:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80075c0:	460b      	mov	r3, r1
 80075c2:	4313      	orrs	r3, r2
 80075c4:	d03b      	beq.n	800763e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80075c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80075ce:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80075d2:	d01f      	beq.n	8007614 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80075d4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80075d8:	d818      	bhi.n	800760c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 80075da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80075de:	d003      	beq.n	80075e8 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 80075e0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80075e4:	d007      	beq.n	80075f6 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 80075e6:	e011      	b.n	800760c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80075e8:	4b33      	ldr	r3, [pc, #204]	@ (80076b8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80075ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075ec:	4a32      	ldr	r2, [pc, #200]	@ (80076b8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80075ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80075f2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80075f4:	e00f      	b.n	8007616 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80075f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075fa:	3328      	adds	r3, #40	@ 0x28
 80075fc:	2101      	movs	r1, #1
 80075fe:	4618      	mov	r0, r3
 8007600:	f000 fd7e 	bl	8008100 <RCCEx_PLL3_Config>
 8007604:	4603      	mov	r3, r0
 8007606:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800760a:	e004      	b.n	8007616 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800760c:	2301      	movs	r3, #1
 800760e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007612:	e000      	b.n	8007616 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8007614:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007616:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800761a:	2b00      	cmp	r3, #0
 800761c:	d10b      	bne.n	8007636 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800761e:	4b26      	ldr	r3, [pc, #152]	@ (80076b8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007620:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007622:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007626:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800762a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800762e:	4a22      	ldr	r2, [pc, #136]	@ (80076b8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007630:	430b      	orrs	r3, r1
 8007632:	6553      	str	r3, [r2, #84]	@ 0x54
 8007634:	e003      	b.n	800763e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007636:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800763a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800763e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007646:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800764a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800764c:	2300      	movs	r3, #0
 800764e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007650:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8007654:	460b      	mov	r3, r1
 8007656:	4313      	orrs	r3, r2
 8007658:	d034      	beq.n	80076c4 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800765a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800765e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007660:	2b00      	cmp	r3, #0
 8007662:	d003      	beq.n	800766c <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8007664:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007668:	d007      	beq.n	800767a <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800766a:	e011      	b.n	8007690 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800766c:	4b12      	ldr	r3, [pc, #72]	@ (80076b8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800766e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007670:	4a11      	ldr	r2, [pc, #68]	@ (80076b8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007672:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007676:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007678:	e00e      	b.n	8007698 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800767a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800767e:	3308      	adds	r3, #8
 8007680:	2102      	movs	r1, #2
 8007682:	4618      	mov	r0, r3
 8007684:	f000 fc8a 	bl	8007f9c <RCCEx_PLL2_Config>
 8007688:	4603      	mov	r3, r0
 800768a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800768e:	e003      	b.n	8007698 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8007690:	2301      	movs	r3, #1
 8007692:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007696:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007698:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800769c:	2b00      	cmp	r3, #0
 800769e:	d10d      	bne.n	80076bc <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80076a0:	4b05      	ldr	r3, [pc, #20]	@ (80076b8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80076a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80076a4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80076a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80076ae:	4a02      	ldr	r2, [pc, #8]	@ (80076b8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80076b0:	430b      	orrs	r3, r1
 80076b2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80076b4:	e006      	b.n	80076c4 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 80076b6:	bf00      	nop
 80076b8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076bc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80076c0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80076c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076cc:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80076d0:	663b      	str	r3, [r7, #96]	@ 0x60
 80076d2:	2300      	movs	r3, #0
 80076d4:	667b      	str	r3, [r7, #100]	@ 0x64
 80076d6:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80076da:	460b      	mov	r3, r1
 80076dc:	4313      	orrs	r3, r2
 80076de:	d00c      	beq.n	80076fa <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80076e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076e4:	3328      	adds	r3, #40	@ 0x28
 80076e6:	2102      	movs	r1, #2
 80076e8:	4618      	mov	r0, r3
 80076ea:	f000 fd09 	bl	8008100 <RCCEx_PLL3_Config>
 80076ee:	4603      	mov	r3, r0
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d002      	beq.n	80076fa <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 80076f4:	2301      	movs	r3, #1
 80076f6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80076fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007702:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8007706:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007708:	2300      	movs	r3, #0
 800770a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800770c:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8007710:	460b      	mov	r3, r1
 8007712:	4313      	orrs	r3, r2
 8007714:	d036      	beq.n	8007784 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8007716:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800771a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800771c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007720:	d018      	beq.n	8007754 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8007722:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007726:	d811      	bhi.n	800774c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8007728:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800772c:	d014      	beq.n	8007758 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800772e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007732:	d80b      	bhi.n	800774c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8007734:	2b00      	cmp	r3, #0
 8007736:	d011      	beq.n	800775c <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8007738:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800773c:	d106      	bne.n	800774c <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800773e:	4bb7      	ldr	r3, [pc, #732]	@ (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007740:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007742:	4ab6      	ldr	r2, [pc, #728]	@ (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007744:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007748:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800774a:	e008      	b.n	800775e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800774c:	2301      	movs	r3, #1
 800774e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007752:	e004      	b.n	800775e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8007754:	bf00      	nop
 8007756:	e002      	b.n	800775e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8007758:	bf00      	nop
 800775a:	e000      	b.n	800775e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800775c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800775e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007762:	2b00      	cmp	r3, #0
 8007764:	d10a      	bne.n	800777c <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007766:	4bad      	ldr	r3, [pc, #692]	@ (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007768:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800776a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800776e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007772:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007774:	4aa9      	ldr	r2, [pc, #676]	@ (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007776:	430b      	orrs	r3, r1
 8007778:	6553      	str	r3, [r2, #84]	@ 0x54
 800777a:	e003      	b.n	8007784 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800777c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007780:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007784:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800778c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8007790:	653b      	str	r3, [r7, #80]	@ 0x50
 8007792:	2300      	movs	r3, #0
 8007794:	657b      	str	r3, [r7, #84]	@ 0x54
 8007796:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800779a:	460b      	mov	r3, r1
 800779c:	4313      	orrs	r3, r2
 800779e:	d009      	beq.n	80077b4 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80077a0:	4b9e      	ldr	r3, [pc, #632]	@ (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80077a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80077a4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80077a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80077ae:	4a9b      	ldr	r2, [pc, #620]	@ (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80077b0:	430b      	orrs	r3, r1
 80077b2:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80077b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077bc:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80077c0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80077c2:	2300      	movs	r3, #0
 80077c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80077c6:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80077ca:	460b      	mov	r3, r1
 80077cc:	4313      	orrs	r3, r2
 80077ce:	d009      	beq.n	80077e4 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80077d0:	4b92      	ldr	r3, [pc, #584]	@ (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80077d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80077d4:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80077d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077dc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80077de:	4a8f      	ldr	r2, [pc, #572]	@ (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80077e0:	430b      	orrs	r3, r1
 80077e2:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80077e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077ec:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80077f0:	643b      	str	r3, [r7, #64]	@ 0x40
 80077f2:	2300      	movs	r3, #0
 80077f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80077f6:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80077fa:	460b      	mov	r3, r1
 80077fc:	4313      	orrs	r3, r2
 80077fe:	d00e      	beq.n	800781e <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007800:	4b86      	ldr	r3, [pc, #536]	@ (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007802:	691b      	ldr	r3, [r3, #16]
 8007804:	4a85      	ldr	r2, [pc, #532]	@ (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007806:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800780a:	6113      	str	r3, [r2, #16]
 800780c:	4b83      	ldr	r3, [pc, #524]	@ (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800780e:	6919      	ldr	r1, [r3, #16]
 8007810:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007814:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007818:	4a80      	ldr	r2, [pc, #512]	@ (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800781a:	430b      	orrs	r3, r1
 800781c:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800781e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007826:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800782a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800782c:	2300      	movs	r3, #0
 800782e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007830:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8007834:	460b      	mov	r3, r1
 8007836:	4313      	orrs	r3, r2
 8007838:	d009      	beq.n	800784e <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800783a:	4b78      	ldr	r3, [pc, #480]	@ (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800783c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800783e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007842:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007846:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007848:	4a74      	ldr	r2, [pc, #464]	@ (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800784a:	430b      	orrs	r3, r1
 800784c:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800784e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007856:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800785a:	633b      	str	r3, [r7, #48]	@ 0x30
 800785c:	2300      	movs	r3, #0
 800785e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007860:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8007864:	460b      	mov	r3, r1
 8007866:	4313      	orrs	r3, r2
 8007868:	d00a      	beq.n	8007880 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800786a:	4b6c      	ldr	r3, [pc, #432]	@ (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800786c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800786e:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8007872:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007876:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800787a:	4a68      	ldr	r2, [pc, #416]	@ (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800787c:	430b      	orrs	r3, r1
 800787e:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8007880:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007888:	2100      	movs	r1, #0
 800788a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800788c:	f003 0301 	and.w	r3, r3, #1
 8007890:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007892:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8007896:	460b      	mov	r3, r1
 8007898:	4313      	orrs	r3, r2
 800789a:	d011      	beq.n	80078c0 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800789c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078a0:	3308      	adds	r3, #8
 80078a2:	2100      	movs	r1, #0
 80078a4:	4618      	mov	r0, r3
 80078a6:	f000 fb79 	bl	8007f9c <RCCEx_PLL2_Config>
 80078aa:	4603      	mov	r3, r0
 80078ac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80078b0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d003      	beq.n	80078c0 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078b8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80078bc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80078c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078c8:	2100      	movs	r1, #0
 80078ca:	6239      	str	r1, [r7, #32]
 80078cc:	f003 0302 	and.w	r3, r3, #2
 80078d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80078d2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80078d6:	460b      	mov	r3, r1
 80078d8:	4313      	orrs	r3, r2
 80078da:	d011      	beq.n	8007900 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80078dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078e0:	3308      	adds	r3, #8
 80078e2:	2101      	movs	r1, #1
 80078e4:	4618      	mov	r0, r3
 80078e6:	f000 fb59 	bl	8007f9c <RCCEx_PLL2_Config>
 80078ea:	4603      	mov	r3, r0
 80078ec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80078f0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d003      	beq.n	8007900 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078f8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80078fc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8007900:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007908:	2100      	movs	r1, #0
 800790a:	61b9      	str	r1, [r7, #24]
 800790c:	f003 0304 	and.w	r3, r3, #4
 8007910:	61fb      	str	r3, [r7, #28]
 8007912:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007916:	460b      	mov	r3, r1
 8007918:	4313      	orrs	r3, r2
 800791a:	d011      	beq.n	8007940 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800791c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007920:	3308      	adds	r3, #8
 8007922:	2102      	movs	r1, #2
 8007924:	4618      	mov	r0, r3
 8007926:	f000 fb39 	bl	8007f9c <RCCEx_PLL2_Config>
 800792a:	4603      	mov	r3, r0
 800792c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8007930:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007934:	2b00      	cmp	r3, #0
 8007936:	d003      	beq.n	8007940 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007938:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800793c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8007940:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007948:	2100      	movs	r1, #0
 800794a:	6139      	str	r1, [r7, #16]
 800794c:	f003 0308 	and.w	r3, r3, #8
 8007950:	617b      	str	r3, [r7, #20]
 8007952:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007956:	460b      	mov	r3, r1
 8007958:	4313      	orrs	r3, r2
 800795a:	d011      	beq.n	8007980 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800795c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007960:	3328      	adds	r3, #40	@ 0x28
 8007962:	2100      	movs	r1, #0
 8007964:	4618      	mov	r0, r3
 8007966:	f000 fbcb 	bl	8008100 <RCCEx_PLL3_Config>
 800796a:	4603      	mov	r3, r0
 800796c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8007970:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007974:	2b00      	cmp	r3, #0
 8007976:	d003      	beq.n	8007980 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007978:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800797c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8007980:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007988:	2100      	movs	r1, #0
 800798a:	60b9      	str	r1, [r7, #8]
 800798c:	f003 0310 	and.w	r3, r3, #16
 8007990:	60fb      	str	r3, [r7, #12]
 8007992:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007996:	460b      	mov	r3, r1
 8007998:	4313      	orrs	r3, r2
 800799a:	d011      	beq.n	80079c0 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800799c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079a0:	3328      	adds	r3, #40	@ 0x28
 80079a2:	2101      	movs	r1, #1
 80079a4:	4618      	mov	r0, r3
 80079a6:	f000 fbab 	bl	8008100 <RCCEx_PLL3_Config>
 80079aa:	4603      	mov	r3, r0
 80079ac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80079b0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d003      	beq.n	80079c0 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079b8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80079bc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80079c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079c8:	2100      	movs	r1, #0
 80079ca:	6039      	str	r1, [r7, #0]
 80079cc:	f003 0320 	and.w	r3, r3, #32
 80079d0:	607b      	str	r3, [r7, #4]
 80079d2:	e9d7 1200 	ldrd	r1, r2, [r7]
 80079d6:	460b      	mov	r3, r1
 80079d8:	4313      	orrs	r3, r2
 80079da:	d011      	beq.n	8007a00 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80079dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079e0:	3328      	adds	r3, #40	@ 0x28
 80079e2:	2102      	movs	r1, #2
 80079e4:	4618      	mov	r0, r3
 80079e6:	f000 fb8b 	bl	8008100 <RCCEx_PLL3_Config>
 80079ea:	4603      	mov	r3, r0
 80079ec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80079f0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d003      	beq.n	8007a00 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079f8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80079fc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8007a00:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d101      	bne.n	8007a0c <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8007a08:	2300      	movs	r3, #0
 8007a0a:	e000      	b.n	8007a0e <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8007a0c:	2301      	movs	r3, #1
}
 8007a0e:	4618      	mov	r0, r3
 8007a10:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8007a14:	46bd      	mov	sp, r7
 8007a16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007a1a:	bf00      	nop
 8007a1c:	58024400 	.word	0x58024400

08007a20 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007a24:	f7fe fe00 	bl	8006628 <HAL_RCC_GetHCLKFreq>
 8007a28:	4602      	mov	r2, r0
 8007a2a:	4b06      	ldr	r3, [pc, #24]	@ (8007a44 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007a2c:	6a1b      	ldr	r3, [r3, #32]
 8007a2e:	091b      	lsrs	r3, r3, #4
 8007a30:	f003 0307 	and.w	r3, r3, #7
 8007a34:	4904      	ldr	r1, [pc, #16]	@ (8007a48 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007a36:	5ccb      	ldrb	r3, [r1, r3]
 8007a38:	f003 031f 	and.w	r3, r3, #31
 8007a3c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007a40:	4618      	mov	r0, r3
 8007a42:	bd80      	pop	{r7, pc}
 8007a44:	58024400 	.word	0x58024400
 8007a48:	08012d4c 	.word	0x08012d4c

08007a4c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8007a4c:	b480      	push	{r7}
 8007a4e:	b089      	sub	sp, #36	@ 0x24
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007a54:	4ba1      	ldr	r3, [pc, #644]	@ (8007cdc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007a56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a58:	f003 0303 	and.w	r3, r3, #3
 8007a5c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8007a5e:	4b9f      	ldr	r3, [pc, #636]	@ (8007cdc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007a60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a62:	0b1b      	lsrs	r3, r3, #12
 8007a64:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007a68:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007a6a:	4b9c      	ldr	r3, [pc, #624]	@ (8007cdc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007a6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a6e:	091b      	lsrs	r3, r3, #4
 8007a70:	f003 0301 	and.w	r3, r3, #1
 8007a74:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8007a76:	4b99      	ldr	r3, [pc, #612]	@ (8007cdc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007a78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a7a:	08db      	lsrs	r3, r3, #3
 8007a7c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007a80:	693a      	ldr	r2, [r7, #16]
 8007a82:	fb02 f303 	mul.w	r3, r2, r3
 8007a86:	ee07 3a90 	vmov	s15, r3
 8007a8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a8e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007a92:	697b      	ldr	r3, [r7, #20]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	f000 8111 	beq.w	8007cbc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007a9a:	69bb      	ldr	r3, [r7, #24]
 8007a9c:	2b02      	cmp	r3, #2
 8007a9e:	f000 8083 	beq.w	8007ba8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007aa2:	69bb      	ldr	r3, [r7, #24]
 8007aa4:	2b02      	cmp	r3, #2
 8007aa6:	f200 80a1 	bhi.w	8007bec <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007aaa:	69bb      	ldr	r3, [r7, #24]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d003      	beq.n	8007ab8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007ab0:	69bb      	ldr	r3, [r7, #24]
 8007ab2:	2b01      	cmp	r3, #1
 8007ab4:	d056      	beq.n	8007b64 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007ab6:	e099      	b.n	8007bec <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007ab8:	4b88      	ldr	r3, [pc, #544]	@ (8007cdc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	f003 0320 	and.w	r3, r3, #32
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d02d      	beq.n	8007b20 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007ac4:	4b85      	ldr	r3, [pc, #532]	@ (8007cdc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	08db      	lsrs	r3, r3, #3
 8007aca:	f003 0303 	and.w	r3, r3, #3
 8007ace:	4a84      	ldr	r2, [pc, #528]	@ (8007ce0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007ad0:	fa22 f303 	lsr.w	r3, r2, r3
 8007ad4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007ad6:	68bb      	ldr	r3, [r7, #8]
 8007ad8:	ee07 3a90 	vmov	s15, r3
 8007adc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ae0:	697b      	ldr	r3, [r7, #20]
 8007ae2:	ee07 3a90 	vmov	s15, r3
 8007ae6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007aea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007aee:	4b7b      	ldr	r3, [pc, #492]	@ (8007cdc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007af0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007af2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007af6:	ee07 3a90 	vmov	s15, r3
 8007afa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007afe:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b02:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007ce4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007b06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b0e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007b12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b1a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007b1e:	e087      	b.n	8007c30 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007b20:	697b      	ldr	r3, [r7, #20]
 8007b22:	ee07 3a90 	vmov	s15, r3
 8007b26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b2a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007ce8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007b2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b32:	4b6a      	ldr	r3, [pc, #424]	@ (8007cdc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007b34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b3a:	ee07 3a90 	vmov	s15, r3
 8007b3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b42:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b46:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007ce4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007b4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b52:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007b56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b5e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007b62:	e065      	b.n	8007c30 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007b64:	697b      	ldr	r3, [r7, #20]
 8007b66:	ee07 3a90 	vmov	s15, r3
 8007b6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b6e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007cec <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007b72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b76:	4b59      	ldr	r3, [pc, #356]	@ (8007cdc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007b78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b7e:	ee07 3a90 	vmov	s15, r3
 8007b82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b86:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b8a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007ce4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007b8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b96:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007b9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ba2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007ba6:	e043      	b.n	8007c30 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007ba8:	697b      	ldr	r3, [r7, #20]
 8007baa:	ee07 3a90 	vmov	s15, r3
 8007bae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bb2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007cf0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007bb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007bba:	4b48      	ldr	r3, [pc, #288]	@ (8007cdc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007bbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bc2:	ee07 3a90 	vmov	s15, r3
 8007bc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007bca:	ed97 6a03 	vldr	s12, [r7, #12]
 8007bce:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007ce4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007bd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007bd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007bda:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007bde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007be2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007be6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007bea:	e021      	b.n	8007c30 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007bec:	697b      	ldr	r3, [r7, #20]
 8007bee:	ee07 3a90 	vmov	s15, r3
 8007bf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bf6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007cec <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007bfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007bfe:	4b37      	ldr	r3, [pc, #220]	@ (8007cdc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007c00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c06:	ee07 3a90 	vmov	s15, r3
 8007c0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c12:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007ce4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007c16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c1e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007c22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007c2e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8007c30:	4b2a      	ldr	r3, [pc, #168]	@ (8007cdc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007c32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c34:	0a5b      	lsrs	r3, r3, #9
 8007c36:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007c3a:	ee07 3a90 	vmov	s15, r3
 8007c3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c42:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007c46:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007c4a:	edd7 6a07 	vldr	s13, [r7, #28]
 8007c4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007c52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007c56:	ee17 2a90 	vmov	r2, s15
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8007c5e:	4b1f      	ldr	r3, [pc, #124]	@ (8007cdc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007c60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c62:	0c1b      	lsrs	r3, r3, #16
 8007c64:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007c68:	ee07 3a90 	vmov	s15, r3
 8007c6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c70:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007c74:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007c78:	edd7 6a07 	vldr	s13, [r7, #28]
 8007c7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007c80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007c84:	ee17 2a90 	vmov	r2, s15
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007c8c:	4b13      	ldr	r3, [pc, #76]	@ (8007cdc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007c8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c90:	0e1b      	lsrs	r3, r3, #24
 8007c92:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007c96:	ee07 3a90 	vmov	s15, r3
 8007c9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c9e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007ca2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007ca6:	edd7 6a07 	vldr	s13, [r7, #28]
 8007caa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007cae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007cb2:	ee17 2a90 	vmov	r2, s15
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007cba:	e008      	b.n	8007cce <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2200      	movs	r2, #0
 8007ccc:	609a      	str	r2, [r3, #8]
}
 8007cce:	bf00      	nop
 8007cd0:	3724      	adds	r7, #36	@ 0x24
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd8:	4770      	bx	lr
 8007cda:	bf00      	nop
 8007cdc:	58024400 	.word	0x58024400
 8007ce0:	03d09000 	.word	0x03d09000
 8007ce4:	46000000 	.word	0x46000000
 8007ce8:	4c742400 	.word	0x4c742400
 8007cec:	4a742400 	.word	0x4a742400
 8007cf0:	4bbebc20 	.word	0x4bbebc20

08007cf4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007cf4:	b480      	push	{r7}
 8007cf6:	b089      	sub	sp, #36	@ 0x24
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007cfc:	4ba1      	ldr	r3, [pc, #644]	@ (8007f84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007cfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d00:	f003 0303 	and.w	r3, r3, #3
 8007d04:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8007d06:	4b9f      	ldr	r3, [pc, #636]	@ (8007f84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007d08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d0a:	0d1b      	lsrs	r3, r3, #20
 8007d0c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007d10:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007d12:	4b9c      	ldr	r3, [pc, #624]	@ (8007f84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007d14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d16:	0a1b      	lsrs	r3, r3, #8
 8007d18:	f003 0301 	and.w	r3, r3, #1
 8007d1c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8007d1e:	4b99      	ldr	r3, [pc, #612]	@ (8007f84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007d20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d22:	08db      	lsrs	r3, r3, #3
 8007d24:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007d28:	693a      	ldr	r2, [r7, #16]
 8007d2a:	fb02 f303 	mul.w	r3, r2, r3
 8007d2e:	ee07 3a90 	vmov	s15, r3
 8007d32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d36:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007d3a:	697b      	ldr	r3, [r7, #20]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	f000 8111 	beq.w	8007f64 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007d42:	69bb      	ldr	r3, [r7, #24]
 8007d44:	2b02      	cmp	r3, #2
 8007d46:	f000 8083 	beq.w	8007e50 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007d4a:	69bb      	ldr	r3, [r7, #24]
 8007d4c:	2b02      	cmp	r3, #2
 8007d4e:	f200 80a1 	bhi.w	8007e94 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007d52:	69bb      	ldr	r3, [r7, #24]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d003      	beq.n	8007d60 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007d58:	69bb      	ldr	r3, [r7, #24]
 8007d5a:	2b01      	cmp	r3, #1
 8007d5c:	d056      	beq.n	8007e0c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007d5e:	e099      	b.n	8007e94 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007d60:	4b88      	ldr	r3, [pc, #544]	@ (8007f84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	f003 0320 	and.w	r3, r3, #32
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d02d      	beq.n	8007dc8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007d6c:	4b85      	ldr	r3, [pc, #532]	@ (8007f84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	08db      	lsrs	r3, r3, #3
 8007d72:	f003 0303 	and.w	r3, r3, #3
 8007d76:	4a84      	ldr	r2, [pc, #528]	@ (8007f88 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007d78:	fa22 f303 	lsr.w	r3, r2, r3
 8007d7c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007d7e:	68bb      	ldr	r3, [r7, #8]
 8007d80:	ee07 3a90 	vmov	s15, r3
 8007d84:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d88:	697b      	ldr	r3, [r7, #20]
 8007d8a:	ee07 3a90 	vmov	s15, r3
 8007d8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d96:	4b7b      	ldr	r3, [pc, #492]	@ (8007f84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007d98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d9e:	ee07 3a90 	vmov	s15, r3
 8007da2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007da6:	ed97 6a03 	vldr	s12, [r7, #12]
 8007daa:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007f8c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007dae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007db2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007db6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007dba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007dbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007dc2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007dc6:	e087      	b.n	8007ed8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007dc8:	697b      	ldr	r3, [r7, #20]
 8007dca:	ee07 3a90 	vmov	s15, r3
 8007dce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007dd2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007f90 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007dd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007dda:	4b6a      	ldr	r3, [pc, #424]	@ (8007f84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007ddc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007dde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007de2:	ee07 3a90 	vmov	s15, r3
 8007de6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007dea:	ed97 6a03 	vldr	s12, [r7, #12]
 8007dee:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007f8c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007df2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007df6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007dfa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007dfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e06:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007e0a:	e065      	b.n	8007ed8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007e0c:	697b      	ldr	r3, [r7, #20]
 8007e0e:	ee07 3a90 	vmov	s15, r3
 8007e12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e16:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007f94 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007e1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e1e:	4b59      	ldr	r3, [pc, #356]	@ (8007f84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007e20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e26:	ee07 3a90 	vmov	s15, r3
 8007e2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e32:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007f8c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007e36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e3e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007e42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e4a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007e4e:	e043      	b.n	8007ed8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007e50:	697b      	ldr	r3, [r7, #20]
 8007e52:	ee07 3a90 	vmov	s15, r3
 8007e56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e5a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007f98 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007e5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e62:	4b48      	ldr	r3, [pc, #288]	@ (8007f84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007e64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e6a:	ee07 3a90 	vmov	s15, r3
 8007e6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e72:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e76:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007f8c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007e7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e82:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007e86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e8e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007e92:	e021      	b.n	8007ed8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007e94:	697b      	ldr	r3, [r7, #20]
 8007e96:	ee07 3a90 	vmov	s15, r3
 8007e9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e9e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007f94 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007ea2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ea6:	4b37      	ldr	r3, [pc, #220]	@ (8007f84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007ea8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007eaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007eae:	ee07 3a90 	vmov	s15, r3
 8007eb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007eb6:	ed97 6a03 	vldr	s12, [r7, #12]
 8007eba:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007f8c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007ebe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ec2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ec6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007eca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ece:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ed2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007ed6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8007ed8:	4b2a      	ldr	r3, [pc, #168]	@ (8007f84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007eda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007edc:	0a5b      	lsrs	r3, r3, #9
 8007ede:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007ee2:	ee07 3a90 	vmov	s15, r3
 8007ee6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007eea:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007eee:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007ef2:	edd7 6a07 	vldr	s13, [r7, #28]
 8007ef6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007efa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007efe:	ee17 2a90 	vmov	r2, s15
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8007f06:	4b1f      	ldr	r3, [pc, #124]	@ (8007f84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007f08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f0a:	0c1b      	lsrs	r3, r3, #16
 8007f0c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007f10:	ee07 3a90 	vmov	s15, r3
 8007f14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f18:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007f1c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007f20:	edd7 6a07 	vldr	s13, [r7, #28]
 8007f24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007f28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007f2c:	ee17 2a90 	vmov	r2, s15
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007f34:	4b13      	ldr	r3, [pc, #76]	@ (8007f84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007f36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f38:	0e1b      	lsrs	r3, r3, #24
 8007f3a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007f3e:	ee07 3a90 	vmov	s15, r3
 8007f42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f46:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007f4a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007f4e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007f52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007f56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007f5a:	ee17 2a90 	vmov	r2, s15
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007f62:	e008      	b.n	8007f76 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2200      	movs	r2, #0
 8007f68:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2200      	movs	r2, #0
 8007f74:	609a      	str	r2, [r3, #8]
}
 8007f76:	bf00      	nop
 8007f78:	3724      	adds	r7, #36	@ 0x24
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f80:	4770      	bx	lr
 8007f82:	bf00      	nop
 8007f84:	58024400 	.word	0x58024400
 8007f88:	03d09000 	.word	0x03d09000
 8007f8c:	46000000 	.word	0x46000000
 8007f90:	4c742400 	.word	0x4c742400
 8007f94:	4a742400 	.word	0x4a742400
 8007f98:	4bbebc20 	.word	0x4bbebc20

08007f9c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b084      	sub	sp, #16
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
 8007fa4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007faa:	4b53      	ldr	r3, [pc, #332]	@ (80080f8 <RCCEx_PLL2_Config+0x15c>)
 8007fac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fae:	f003 0303 	and.w	r3, r3, #3
 8007fb2:	2b03      	cmp	r3, #3
 8007fb4:	d101      	bne.n	8007fba <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007fb6:	2301      	movs	r3, #1
 8007fb8:	e099      	b.n	80080ee <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007fba:	4b4f      	ldr	r3, [pc, #316]	@ (80080f8 <RCCEx_PLL2_Config+0x15c>)
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	4a4e      	ldr	r2, [pc, #312]	@ (80080f8 <RCCEx_PLL2_Config+0x15c>)
 8007fc0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007fc4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007fc6:	f7fb f93d 	bl	8003244 <HAL_GetTick>
 8007fca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007fcc:	e008      	b.n	8007fe0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007fce:	f7fb f939 	bl	8003244 <HAL_GetTick>
 8007fd2:	4602      	mov	r2, r0
 8007fd4:	68bb      	ldr	r3, [r7, #8]
 8007fd6:	1ad3      	subs	r3, r2, r3
 8007fd8:	2b02      	cmp	r3, #2
 8007fda:	d901      	bls.n	8007fe0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007fdc:	2303      	movs	r3, #3
 8007fde:	e086      	b.n	80080ee <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007fe0:	4b45      	ldr	r3, [pc, #276]	@ (80080f8 <RCCEx_PLL2_Config+0x15c>)
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d1f0      	bne.n	8007fce <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007fec:	4b42      	ldr	r3, [pc, #264]	@ (80080f8 <RCCEx_PLL2_Config+0x15c>)
 8007fee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ff0:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	031b      	lsls	r3, r3, #12
 8007ffa:	493f      	ldr	r1, [pc, #252]	@ (80080f8 <RCCEx_PLL2_Config+0x15c>)
 8007ffc:	4313      	orrs	r3, r2
 8007ffe:	628b      	str	r3, [r1, #40]	@ 0x28
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	685b      	ldr	r3, [r3, #4]
 8008004:	3b01      	subs	r3, #1
 8008006:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	689b      	ldr	r3, [r3, #8]
 800800e:	3b01      	subs	r3, #1
 8008010:	025b      	lsls	r3, r3, #9
 8008012:	b29b      	uxth	r3, r3
 8008014:	431a      	orrs	r2, r3
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	68db      	ldr	r3, [r3, #12]
 800801a:	3b01      	subs	r3, #1
 800801c:	041b      	lsls	r3, r3, #16
 800801e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008022:	431a      	orrs	r2, r3
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	691b      	ldr	r3, [r3, #16]
 8008028:	3b01      	subs	r3, #1
 800802a:	061b      	lsls	r3, r3, #24
 800802c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008030:	4931      	ldr	r1, [pc, #196]	@ (80080f8 <RCCEx_PLL2_Config+0x15c>)
 8008032:	4313      	orrs	r3, r2
 8008034:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008036:	4b30      	ldr	r3, [pc, #192]	@ (80080f8 <RCCEx_PLL2_Config+0x15c>)
 8008038:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800803a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	695b      	ldr	r3, [r3, #20]
 8008042:	492d      	ldr	r1, [pc, #180]	@ (80080f8 <RCCEx_PLL2_Config+0x15c>)
 8008044:	4313      	orrs	r3, r2
 8008046:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008048:	4b2b      	ldr	r3, [pc, #172]	@ (80080f8 <RCCEx_PLL2_Config+0x15c>)
 800804a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800804c:	f023 0220 	bic.w	r2, r3, #32
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	699b      	ldr	r3, [r3, #24]
 8008054:	4928      	ldr	r1, [pc, #160]	@ (80080f8 <RCCEx_PLL2_Config+0x15c>)
 8008056:	4313      	orrs	r3, r2
 8008058:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800805a:	4b27      	ldr	r3, [pc, #156]	@ (80080f8 <RCCEx_PLL2_Config+0x15c>)
 800805c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800805e:	4a26      	ldr	r2, [pc, #152]	@ (80080f8 <RCCEx_PLL2_Config+0x15c>)
 8008060:	f023 0310 	bic.w	r3, r3, #16
 8008064:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008066:	4b24      	ldr	r3, [pc, #144]	@ (80080f8 <RCCEx_PLL2_Config+0x15c>)
 8008068:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800806a:	4b24      	ldr	r3, [pc, #144]	@ (80080fc <RCCEx_PLL2_Config+0x160>)
 800806c:	4013      	ands	r3, r2
 800806e:	687a      	ldr	r2, [r7, #4]
 8008070:	69d2      	ldr	r2, [r2, #28]
 8008072:	00d2      	lsls	r2, r2, #3
 8008074:	4920      	ldr	r1, [pc, #128]	@ (80080f8 <RCCEx_PLL2_Config+0x15c>)
 8008076:	4313      	orrs	r3, r2
 8008078:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800807a:	4b1f      	ldr	r3, [pc, #124]	@ (80080f8 <RCCEx_PLL2_Config+0x15c>)
 800807c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800807e:	4a1e      	ldr	r2, [pc, #120]	@ (80080f8 <RCCEx_PLL2_Config+0x15c>)
 8008080:	f043 0310 	orr.w	r3, r3, #16
 8008084:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008086:	683b      	ldr	r3, [r7, #0]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d106      	bne.n	800809a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800808c:	4b1a      	ldr	r3, [pc, #104]	@ (80080f8 <RCCEx_PLL2_Config+0x15c>)
 800808e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008090:	4a19      	ldr	r2, [pc, #100]	@ (80080f8 <RCCEx_PLL2_Config+0x15c>)
 8008092:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008096:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008098:	e00f      	b.n	80080ba <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800809a:	683b      	ldr	r3, [r7, #0]
 800809c:	2b01      	cmp	r3, #1
 800809e:	d106      	bne.n	80080ae <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80080a0:	4b15      	ldr	r3, [pc, #84]	@ (80080f8 <RCCEx_PLL2_Config+0x15c>)
 80080a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080a4:	4a14      	ldr	r2, [pc, #80]	@ (80080f8 <RCCEx_PLL2_Config+0x15c>)
 80080a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80080aa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80080ac:	e005      	b.n	80080ba <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80080ae:	4b12      	ldr	r3, [pc, #72]	@ (80080f8 <RCCEx_PLL2_Config+0x15c>)
 80080b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080b2:	4a11      	ldr	r2, [pc, #68]	@ (80080f8 <RCCEx_PLL2_Config+0x15c>)
 80080b4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80080b8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80080ba:	4b0f      	ldr	r3, [pc, #60]	@ (80080f8 <RCCEx_PLL2_Config+0x15c>)
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	4a0e      	ldr	r2, [pc, #56]	@ (80080f8 <RCCEx_PLL2_Config+0x15c>)
 80080c0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80080c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80080c6:	f7fb f8bd 	bl	8003244 <HAL_GetTick>
 80080ca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80080cc:	e008      	b.n	80080e0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80080ce:	f7fb f8b9 	bl	8003244 <HAL_GetTick>
 80080d2:	4602      	mov	r2, r0
 80080d4:	68bb      	ldr	r3, [r7, #8]
 80080d6:	1ad3      	subs	r3, r2, r3
 80080d8:	2b02      	cmp	r3, #2
 80080da:	d901      	bls.n	80080e0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80080dc:	2303      	movs	r3, #3
 80080de:	e006      	b.n	80080ee <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80080e0:	4b05      	ldr	r3, [pc, #20]	@ (80080f8 <RCCEx_PLL2_Config+0x15c>)
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d0f0      	beq.n	80080ce <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80080ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80080ee:	4618      	mov	r0, r3
 80080f0:	3710      	adds	r7, #16
 80080f2:	46bd      	mov	sp, r7
 80080f4:	bd80      	pop	{r7, pc}
 80080f6:	bf00      	nop
 80080f8:	58024400 	.word	0x58024400
 80080fc:	ffff0007 	.word	0xffff0007

08008100 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008100:	b580      	push	{r7, lr}
 8008102:	b084      	sub	sp, #16
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
 8008108:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800810a:	2300      	movs	r3, #0
 800810c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800810e:	4b53      	ldr	r3, [pc, #332]	@ (800825c <RCCEx_PLL3_Config+0x15c>)
 8008110:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008112:	f003 0303 	and.w	r3, r3, #3
 8008116:	2b03      	cmp	r3, #3
 8008118:	d101      	bne.n	800811e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800811a:	2301      	movs	r3, #1
 800811c:	e099      	b.n	8008252 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800811e:	4b4f      	ldr	r3, [pc, #316]	@ (800825c <RCCEx_PLL3_Config+0x15c>)
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	4a4e      	ldr	r2, [pc, #312]	@ (800825c <RCCEx_PLL3_Config+0x15c>)
 8008124:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008128:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800812a:	f7fb f88b 	bl	8003244 <HAL_GetTick>
 800812e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008130:	e008      	b.n	8008144 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008132:	f7fb f887 	bl	8003244 <HAL_GetTick>
 8008136:	4602      	mov	r2, r0
 8008138:	68bb      	ldr	r3, [r7, #8]
 800813a:	1ad3      	subs	r3, r2, r3
 800813c:	2b02      	cmp	r3, #2
 800813e:	d901      	bls.n	8008144 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008140:	2303      	movs	r3, #3
 8008142:	e086      	b.n	8008252 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008144:	4b45      	ldr	r3, [pc, #276]	@ (800825c <RCCEx_PLL3_Config+0x15c>)
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800814c:	2b00      	cmp	r3, #0
 800814e:	d1f0      	bne.n	8008132 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008150:	4b42      	ldr	r3, [pc, #264]	@ (800825c <RCCEx_PLL3_Config+0x15c>)
 8008152:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008154:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	051b      	lsls	r3, r3, #20
 800815e:	493f      	ldr	r1, [pc, #252]	@ (800825c <RCCEx_PLL3_Config+0x15c>)
 8008160:	4313      	orrs	r3, r2
 8008162:	628b      	str	r3, [r1, #40]	@ 0x28
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	685b      	ldr	r3, [r3, #4]
 8008168:	3b01      	subs	r3, #1
 800816a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	689b      	ldr	r3, [r3, #8]
 8008172:	3b01      	subs	r3, #1
 8008174:	025b      	lsls	r3, r3, #9
 8008176:	b29b      	uxth	r3, r3
 8008178:	431a      	orrs	r2, r3
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	68db      	ldr	r3, [r3, #12]
 800817e:	3b01      	subs	r3, #1
 8008180:	041b      	lsls	r3, r3, #16
 8008182:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008186:	431a      	orrs	r2, r3
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	691b      	ldr	r3, [r3, #16]
 800818c:	3b01      	subs	r3, #1
 800818e:	061b      	lsls	r3, r3, #24
 8008190:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008194:	4931      	ldr	r1, [pc, #196]	@ (800825c <RCCEx_PLL3_Config+0x15c>)
 8008196:	4313      	orrs	r3, r2
 8008198:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800819a:	4b30      	ldr	r3, [pc, #192]	@ (800825c <RCCEx_PLL3_Config+0x15c>)
 800819c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800819e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	695b      	ldr	r3, [r3, #20]
 80081a6:	492d      	ldr	r1, [pc, #180]	@ (800825c <RCCEx_PLL3_Config+0x15c>)
 80081a8:	4313      	orrs	r3, r2
 80081aa:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80081ac:	4b2b      	ldr	r3, [pc, #172]	@ (800825c <RCCEx_PLL3_Config+0x15c>)
 80081ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081b0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	699b      	ldr	r3, [r3, #24]
 80081b8:	4928      	ldr	r1, [pc, #160]	@ (800825c <RCCEx_PLL3_Config+0x15c>)
 80081ba:	4313      	orrs	r3, r2
 80081bc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80081be:	4b27      	ldr	r3, [pc, #156]	@ (800825c <RCCEx_PLL3_Config+0x15c>)
 80081c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081c2:	4a26      	ldr	r2, [pc, #152]	@ (800825c <RCCEx_PLL3_Config+0x15c>)
 80081c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80081c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80081ca:	4b24      	ldr	r3, [pc, #144]	@ (800825c <RCCEx_PLL3_Config+0x15c>)
 80081cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80081ce:	4b24      	ldr	r3, [pc, #144]	@ (8008260 <RCCEx_PLL3_Config+0x160>)
 80081d0:	4013      	ands	r3, r2
 80081d2:	687a      	ldr	r2, [r7, #4]
 80081d4:	69d2      	ldr	r2, [r2, #28]
 80081d6:	00d2      	lsls	r2, r2, #3
 80081d8:	4920      	ldr	r1, [pc, #128]	@ (800825c <RCCEx_PLL3_Config+0x15c>)
 80081da:	4313      	orrs	r3, r2
 80081dc:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80081de:	4b1f      	ldr	r3, [pc, #124]	@ (800825c <RCCEx_PLL3_Config+0x15c>)
 80081e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081e2:	4a1e      	ldr	r2, [pc, #120]	@ (800825c <RCCEx_PLL3_Config+0x15c>)
 80081e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80081e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d106      	bne.n	80081fe <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80081f0:	4b1a      	ldr	r3, [pc, #104]	@ (800825c <RCCEx_PLL3_Config+0x15c>)
 80081f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081f4:	4a19      	ldr	r2, [pc, #100]	@ (800825c <RCCEx_PLL3_Config+0x15c>)
 80081f6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80081fa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80081fc:	e00f      	b.n	800821e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80081fe:	683b      	ldr	r3, [r7, #0]
 8008200:	2b01      	cmp	r3, #1
 8008202:	d106      	bne.n	8008212 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008204:	4b15      	ldr	r3, [pc, #84]	@ (800825c <RCCEx_PLL3_Config+0x15c>)
 8008206:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008208:	4a14      	ldr	r2, [pc, #80]	@ (800825c <RCCEx_PLL3_Config+0x15c>)
 800820a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800820e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008210:	e005      	b.n	800821e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008212:	4b12      	ldr	r3, [pc, #72]	@ (800825c <RCCEx_PLL3_Config+0x15c>)
 8008214:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008216:	4a11      	ldr	r2, [pc, #68]	@ (800825c <RCCEx_PLL3_Config+0x15c>)
 8008218:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800821c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800821e:	4b0f      	ldr	r3, [pc, #60]	@ (800825c <RCCEx_PLL3_Config+0x15c>)
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	4a0e      	ldr	r2, [pc, #56]	@ (800825c <RCCEx_PLL3_Config+0x15c>)
 8008224:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008228:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800822a:	f7fb f80b 	bl	8003244 <HAL_GetTick>
 800822e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008230:	e008      	b.n	8008244 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008232:	f7fb f807 	bl	8003244 <HAL_GetTick>
 8008236:	4602      	mov	r2, r0
 8008238:	68bb      	ldr	r3, [r7, #8]
 800823a:	1ad3      	subs	r3, r2, r3
 800823c:	2b02      	cmp	r3, #2
 800823e:	d901      	bls.n	8008244 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008240:	2303      	movs	r3, #3
 8008242:	e006      	b.n	8008252 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008244:	4b05      	ldr	r3, [pc, #20]	@ (800825c <RCCEx_PLL3_Config+0x15c>)
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800824c:	2b00      	cmp	r3, #0
 800824e:	d0f0      	beq.n	8008232 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008250:	7bfb      	ldrb	r3, [r7, #15]
}
 8008252:	4618      	mov	r0, r3
 8008254:	3710      	adds	r7, #16
 8008256:	46bd      	mov	sp, r7
 8008258:	bd80      	pop	{r7, pc}
 800825a:	bf00      	nop
 800825c:	58024400 	.word	0x58024400
 8008260:	ffff0007 	.word	0xffff0007

08008264 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008264:	b580      	push	{r7, lr}
 8008266:	b082      	sub	sp, #8
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d101      	bne.n	8008276 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008272:	2301      	movs	r3, #1
 8008274:	e049      	b.n	800830a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800827c:	b2db      	uxtb	r3, r3
 800827e:	2b00      	cmp	r3, #0
 8008280:	d106      	bne.n	8008290 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	2200      	movs	r2, #0
 8008286:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800828a:	6878      	ldr	r0, [r7, #4]
 800828c:	f7fa f824 	bl	80022d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2202      	movs	r2, #2
 8008294:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681a      	ldr	r2, [r3, #0]
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	3304      	adds	r3, #4
 80082a0:	4619      	mov	r1, r3
 80082a2:	4610      	mov	r0, r2
 80082a4:	f000 fb12 	bl	80088cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2201      	movs	r2, #1
 80082ac:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	2201      	movs	r2, #1
 80082b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2201      	movs	r2, #1
 80082bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2201      	movs	r2, #1
 80082c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2201      	movs	r2, #1
 80082cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2201      	movs	r2, #1
 80082d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	2201      	movs	r2, #1
 80082dc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	2201      	movs	r2, #1
 80082e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2201      	movs	r2, #1
 80082ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	2201      	movs	r2, #1
 80082f4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	2201      	movs	r2, #1
 80082fc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	2201      	movs	r2, #1
 8008304:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008308:	2300      	movs	r3, #0
}
 800830a:	4618      	mov	r0, r3
 800830c:	3708      	adds	r7, #8
 800830e:	46bd      	mov	sp, r7
 8008310:	bd80      	pop	{r7, pc}
	...

08008314 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008314:	b480      	push	{r7}
 8008316:	b085      	sub	sp, #20
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008322:	b2db      	uxtb	r3, r3
 8008324:	2b01      	cmp	r3, #1
 8008326:	d001      	beq.n	800832c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008328:	2301      	movs	r3, #1
 800832a:	e05e      	b.n	80083ea <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2202      	movs	r2, #2
 8008330:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	68da      	ldr	r2, [r3, #12]
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	f042 0201 	orr.w	r2, r2, #1
 8008342:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	4a2b      	ldr	r2, [pc, #172]	@ (80083f8 <HAL_TIM_Base_Start_IT+0xe4>)
 800834a:	4293      	cmp	r3, r2
 800834c:	d02c      	beq.n	80083a8 <HAL_TIM_Base_Start_IT+0x94>
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008356:	d027      	beq.n	80083a8 <HAL_TIM_Base_Start_IT+0x94>
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	4a27      	ldr	r2, [pc, #156]	@ (80083fc <HAL_TIM_Base_Start_IT+0xe8>)
 800835e:	4293      	cmp	r3, r2
 8008360:	d022      	beq.n	80083a8 <HAL_TIM_Base_Start_IT+0x94>
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	4a26      	ldr	r2, [pc, #152]	@ (8008400 <HAL_TIM_Base_Start_IT+0xec>)
 8008368:	4293      	cmp	r3, r2
 800836a:	d01d      	beq.n	80083a8 <HAL_TIM_Base_Start_IT+0x94>
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	4a24      	ldr	r2, [pc, #144]	@ (8008404 <HAL_TIM_Base_Start_IT+0xf0>)
 8008372:	4293      	cmp	r3, r2
 8008374:	d018      	beq.n	80083a8 <HAL_TIM_Base_Start_IT+0x94>
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	4a23      	ldr	r2, [pc, #140]	@ (8008408 <HAL_TIM_Base_Start_IT+0xf4>)
 800837c:	4293      	cmp	r3, r2
 800837e:	d013      	beq.n	80083a8 <HAL_TIM_Base_Start_IT+0x94>
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	4a21      	ldr	r2, [pc, #132]	@ (800840c <HAL_TIM_Base_Start_IT+0xf8>)
 8008386:	4293      	cmp	r3, r2
 8008388:	d00e      	beq.n	80083a8 <HAL_TIM_Base_Start_IT+0x94>
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	4a20      	ldr	r2, [pc, #128]	@ (8008410 <HAL_TIM_Base_Start_IT+0xfc>)
 8008390:	4293      	cmp	r3, r2
 8008392:	d009      	beq.n	80083a8 <HAL_TIM_Base_Start_IT+0x94>
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	4a1e      	ldr	r2, [pc, #120]	@ (8008414 <HAL_TIM_Base_Start_IT+0x100>)
 800839a:	4293      	cmp	r3, r2
 800839c:	d004      	beq.n	80083a8 <HAL_TIM_Base_Start_IT+0x94>
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	4a1d      	ldr	r2, [pc, #116]	@ (8008418 <HAL_TIM_Base_Start_IT+0x104>)
 80083a4:	4293      	cmp	r3, r2
 80083a6:	d115      	bne.n	80083d4 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	689a      	ldr	r2, [r3, #8]
 80083ae:	4b1b      	ldr	r3, [pc, #108]	@ (800841c <HAL_TIM_Base_Start_IT+0x108>)
 80083b0:	4013      	ands	r3, r2
 80083b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	2b06      	cmp	r3, #6
 80083b8:	d015      	beq.n	80083e6 <HAL_TIM_Base_Start_IT+0xd2>
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80083c0:	d011      	beq.n	80083e6 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	681a      	ldr	r2, [r3, #0]
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	f042 0201 	orr.w	r2, r2, #1
 80083d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80083d2:	e008      	b.n	80083e6 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	681a      	ldr	r2, [r3, #0]
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	f042 0201 	orr.w	r2, r2, #1
 80083e2:	601a      	str	r2, [r3, #0]
 80083e4:	e000      	b.n	80083e8 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80083e6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80083e8:	2300      	movs	r3, #0
}
 80083ea:	4618      	mov	r0, r3
 80083ec:	3714      	adds	r7, #20
 80083ee:	46bd      	mov	sp, r7
 80083f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f4:	4770      	bx	lr
 80083f6:	bf00      	nop
 80083f8:	40010000 	.word	0x40010000
 80083fc:	40000400 	.word	0x40000400
 8008400:	40000800 	.word	0x40000800
 8008404:	40000c00 	.word	0x40000c00
 8008408:	40010400 	.word	0x40010400
 800840c:	40001800 	.word	0x40001800
 8008410:	40014000 	.word	0x40014000
 8008414:	4000e000 	.word	0x4000e000
 8008418:	4000e400 	.word	0x4000e400
 800841c:	00010007 	.word	0x00010007

08008420 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8008420:	b480      	push	{r7}
 8008422:	b083      	sub	sp, #12
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	68da      	ldr	r2, [r3, #12]
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	f022 0201 	bic.w	r2, r2, #1
 8008436:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	6a1a      	ldr	r2, [r3, #32]
 800843e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8008442:	4013      	ands	r3, r2
 8008444:	2b00      	cmp	r3, #0
 8008446:	d10f      	bne.n	8008468 <HAL_TIM_Base_Stop_IT+0x48>
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	6a1a      	ldr	r2, [r3, #32]
 800844e:	f240 4344 	movw	r3, #1092	@ 0x444
 8008452:	4013      	ands	r3, r2
 8008454:	2b00      	cmp	r3, #0
 8008456:	d107      	bne.n	8008468 <HAL_TIM_Base_Stop_IT+0x48>
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	681a      	ldr	r2, [r3, #0]
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	f022 0201 	bic.w	r2, r2, #1
 8008466:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2201      	movs	r2, #1
 800846c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8008470:	2300      	movs	r3, #0
}
 8008472:	4618      	mov	r0, r3
 8008474:	370c      	adds	r7, #12
 8008476:	46bd      	mov	sp, r7
 8008478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847c:	4770      	bx	lr

0800847e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800847e:	b580      	push	{r7, lr}
 8008480:	b084      	sub	sp, #16
 8008482:	af00      	add	r7, sp, #0
 8008484:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	68db      	ldr	r3, [r3, #12]
 800848c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	691b      	ldr	r3, [r3, #16]
 8008494:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008496:	68bb      	ldr	r3, [r7, #8]
 8008498:	f003 0302 	and.w	r3, r3, #2
 800849c:	2b00      	cmp	r3, #0
 800849e:	d020      	beq.n	80084e2 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	f003 0302 	and.w	r3, r3, #2
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d01b      	beq.n	80084e2 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	f06f 0202 	mvn.w	r2, #2
 80084b2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	2201      	movs	r2, #1
 80084b8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	699b      	ldr	r3, [r3, #24]
 80084c0:	f003 0303 	and.w	r3, r3, #3
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d003      	beq.n	80084d0 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80084c8:	6878      	ldr	r0, [r7, #4]
 80084ca:	f000 f9e1 	bl	8008890 <HAL_TIM_IC_CaptureCallback>
 80084ce:	e005      	b.n	80084dc <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80084d0:	6878      	ldr	r0, [r7, #4]
 80084d2:	f000 f9d3 	bl	800887c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80084d6:	6878      	ldr	r0, [r7, #4]
 80084d8:	f000 f9e4 	bl	80088a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	2200      	movs	r2, #0
 80084e0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80084e2:	68bb      	ldr	r3, [r7, #8]
 80084e4:	f003 0304 	and.w	r3, r3, #4
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d020      	beq.n	800852e <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	f003 0304 	and.w	r3, r3, #4
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d01b      	beq.n	800852e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	f06f 0204 	mvn.w	r2, #4
 80084fe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	2202      	movs	r2, #2
 8008504:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	699b      	ldr	r3, [r3, #24]
 800850c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008510:	2b00      	cmp	r3, #0
 8008512:	d003      	beq.n	800851c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008514:	6878      	ldr	r0, [r7, #4]
 8008516:	f000 f9bb 	bl	8008890 <HAL_TIM_IC_CaptureCallback>
 800851a:	e005      	b.n	8008528 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800851c:	6878      	ldr	r0, [r7, #4]
 800851e:	f000 f9ad 	bl	800887c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008522:	6878      	ldr	r0, [r7, #4]
 8008524:	f000 f9be 	bl	80088a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	2200      	movs	r2, #0
 800852c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800852e:	68bb      	ldr	r3, [r7, #8]
 8008530:	f003 0308 	and.w	r3, r3, #8
 8008534:	2b00      	cmp	r3, #0
 8008536:	d020      	beq.n	800857a <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	f003 0308 	and.w	r3, r3, #8
 800853e:	2b00      	cmp	r3, #0
 8008540:	d01b      	beq.n	800857a <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	f06f 0208 	mvn.w	r2, #8
 800854a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	2204      	movs	r2, #4
 8008550:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	69db      	ldr	r3, [r3, #28]
 8008558:	f003 0303 	and.w	r3, r3, #3
 800855c:	2b00      	cmp	r3, #0
 800855e:	d003      	beq.n	8008568 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008560:	6878      	ldr	r0, [r7, #4]
 8008562:	f000 f995 	bl	8008890 <HAL_TIM_IC_CaptureCallback>
 8008566:	e005      	b.n	8008574 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008568:	6878      	ldr	r0, [r7, #4]
 800856a:	f000 f987 	bl	800887c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800856e:	6878      	ldr	r0, [r7, #4]
 8008570:	f000 f998 	bl	80088a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	2200      	movs	r2, #0
 8008578:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800857a:	68bb      	ldr	r3, [r7, #8]
 800857c:	f003 0310 	and.w	r3, r3, #16
 8008580:	2b00      	cmp	r3, #0
 8008582:	d020      	beq.n	80085c6 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	f003 0310 	and.w	r3, r3, #16
 800858a:	2b00      	cmp	r3, #0
 800858c:	d01b      	beq.n	80085c6 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	f06f 0210 	mvn.w	r2, #16
 8008596:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	2208      	movs	r2, #8
 800859c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	69db      	ldr	r3, [r3, #28]
 80085a4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d003      	beq.n	80085b4 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80085ac:	6878      	ldr	r0, [r7, #4]
 80085ae:	f000 f96f 	bl	8008890 <HAL_TIM_IC_CaptureCallback>
 80085b2:	e005      	b.n	80085c0 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80085b4:	6878      	ldr	r0, [r7, #4]
 80085b6:	f000 f961 	bl	800887c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80085ba:	6878      	ldr	r0, [r7, #4]
 80085bc:	f000 f972 	bl	80088a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	2200      	movs	r2, #0
 80085c4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80085c6:	68bb      	ldr	r3, [r7, #8]
 80085c8:	f003 0301 	and.w	r3, r3, #1
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d00c      	beq.n	80085ea <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	f003 0301 	and.w	r3, r3, #1
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d007      	beq.n	80085ea <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	f06f 0201 	mvn.w	r2, #1
 80085e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80085e4:	6878      	ldr	r0, [r7, #4]
 80085e6:	f7f9 fa7b 	bl	8001ae0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80085ea:	68bb      	ldr	r3, [r7, #8]
 80085ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d104      	bne.n	80085fe <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80085f4:	68bb      	ldr	r3, [r7, #8]
 80085f6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d00c      	beq.n	8008618 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008604:	2b00      	cmp	r3, #0
 8008606:	d007      	beq.n	8008618 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8008610:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008612:	6878      	ldr	r0, [r7, #4]
 8008614:	f000 fb50 	bl	8008cb8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8008618:	68bb      	ldr	r3, [r7, #8]
 800861a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800861e:	2b00      	cmp	r3, #0
 8008620:	d00c      	beq.n	800863c <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008628:	2b00      	cmp	r3, #0
 800862a:	d007      	beq.n	800863c <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8008634:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008636:	6878      	ldr	r0, [r7, #4]
 8008638:	f000 fb48 	bl	8008ccc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800863c:	68bb      	ldr	r3, [r7, #8]
 800863e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008642:	2b00      	cmp	r3, #0
 8008644:	d00c      	beq.n	8008660 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800864c:	2b00      	cmp	r3, #0
 800864e:	d007      	beq.n	8008660 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008658:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800865a:	6878      	ldr	r0, [r7, #4]
 800865c:	f000 f92c 	bl	80088b8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008660:	68bb      	ldr	r3, [r7, #8]
 8008662:	f003 0320 	and.w	r3, r3, #32
 8008666:	2b00      	cmp	r3, #0
 8008668:	d00c      	beq.n	8008684 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	f003 0320 	and.w	r3, r3, #32
 8008670:	2b00      	cmp	r3, #0
 8008672:	d007      	beq.n	8008684 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	f06f 0220 	mvn.w	r2, #32
 800867c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800867e:	6878      	ldr	r0, [r7, #4]
 8008680:	f000 fb10 	bl	8008ca4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008684:	bf00      	nop
 8008686:	3710      	adds	r7, #16
 8008688:	46bd      	mov	sp, r7
 800868a:	bd80      	pop	{r7, pc}

0800868c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800868c:	b580      	push	{r7, lr}
 800868e:	b084      	sub	sp, #16
 8008690:	af00      	add	r7, sp, #0
 8008692:	6078      	str	r0, [r7, #4]
 8008694:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008696:	2300      	movs	r3, #0
 8008698:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80086a0:	2b01      	cmp	r3, #1
 80086a2:	d101      	bne.n	80086a8 <HAL_TIM_ConfigClockSource+0x1c>
 80086a4:	2302      	movs	r3, #2
 80086a6:	e0dc      	b.n	8008862 <HAL_TIM_ConfigClockSource+0x1d6>
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	2201      	movs	r2, #1
 80086ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	2202      	movs	r2, #2
 80086b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	689b      	ldr	r3, [r3, #8]
 80086be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80086c0:	68ba      	ldr	r2, [r7, #8]
 80086c2:	4b6a      	ldr	r3, [pc, #424]	@ (800886c <HAL_TIM_ConfigClockSource+0x1e0>)
 80086c4:	4013      	ands	r3, r2
 80086c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80086c8:	68bb      	ldr	r3, [r7, #8]
 80086ca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80086ce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	68ba      	ldr	r2, [r7, #8]
 80086d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80086d8:	683b      	ldr	r3, [r7, #0]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	4a64      	ldr	r2, [pc, #400]	@ (8008870 <HAL_TIM_ConfigClockSource+0x1e4>)
 80086de:	4293      	cmp	r3, r2
 80086e0:	f000 80a9 	beq.w	8008836 <HAL_TIM_ConfigClockSource+0x1aa>
 80086e4:	4a62      	ldr	r2, [pc, #392]	@ (8008870 <HAL_TIM_ConfigClockSource+0x1e4>)
 80086e6:	4293      	cmp	r3, r2
 80086e8:	f200 80ae 	bhi.w	8008848 <HAL_TIM_ConfigClockSource+0x1bc>
 80086ec:	4a61      	ldr	r2, [pc, #388]	@ (8008874 <HAL_TIM_ConfigClockSource+0x1e8>)
 80086ee:	4293      	cmp	r3, r2
 80086f0:	f000 80a1 	beq.w	8008836 <HAL_TIM_ConfigClockSource+0x1aa>
 80086f4:	4a5f      	ldr	r2, [pc, #380]	@ (8008874 <HAL_TIM_ConfigClockSource+0x1e8>)
 80086f6:	4293      	cmp	r3, r2
 80086f8:	f200 80a6 	bhi.w	8008848 <HAL_TIM_ConfigClockSource+0x1bc>
 80086fc:	4a5e      	ldr	r2, [pc, #376]	@ (8008878 <HAL_TIM_ConfigClockSource+0x1ec>)
 80086fe:	4293      	cmp	r3, r2
 8008700:	f000 8099 	beq.w	8008836 <HAL_TIM_ConfigClockSource+0x1aa>
 8008704:	4a5c      	ldr	r2, [pc, #368]	@ (8008878 <HAL_TIM_ConfigClockSource+0x1ec>)
 8008706:	4293      	cmp	r3, r2
 8008708:	f200 809e 	bhi.w	8008848 <HAL_TIM_ConfigClockSource+0x1bc>
 800870c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008710:	f000 8091 	beq.w	8008836 <HAL_TIM_ConfigClockSource+0x1aa>
 8008714:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008718:	f200 8096 	bhi.w	8008848 <HAL_TIM_ConfigClockSource+0x1bc>
 800871c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008720:	f000 8089 	beq.w	8008836 <HAL_TIM_ConfigClockSource+0x1aa>
 8008724:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008728:	f200 808e 	bhi.w	8008848 <HAL_TIM_ConfigClockSource+0x1bc>
 800872c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008730:	d03e      	beq.n	80087b0 <HAL_TIM_ConfigClockSource+0x124>
 8008732:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008736:	f200 8087 	bhi.w	8008848 <HAL_TIM_ConfigClockSource+0x1bc>
 800873a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800873e:	f000 8086 	beq.w	800884e <HAL_TIM_ConfigClockSource+0x1c2>
 8008742:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008746:	d87f      	bhi.n	8008848 <HAL_TIM_ConfigClockSource+0x1bc>
 8008748:	2b70      	cmp	r3, #112	@ 0x70
 800874a:	d01a      	beq.n	8008782 <HAL_TIM_ConfigClockSource+0xf6>
 800874c:	2b70      	cmp	r3, #112	@ 0x70
 800874e:	d87b      	bhi.n	8008848 <HAL_TIM_ConfigClockSource+0x1bc>
 8008750:	2b60      	cmp	r3, #96	@ 0x60
 8008752:	d050      	beq.n	80087f6 <HAL_TIM_ConfigClockSource+0x16a>
 8008754:	2b60      	cmp	r3, #96	@ 0x60
 8008756:	d877      	bhi.n	8008848 <HAL_TIM_ConfigClockSource+0x1bc>
 8008758:	2b50      	cmp	r3, #80	@ 0x50
 800875a:	d03c      	beq.n	80087d6 <HAL_TIM_ConfigClockSource+0x14a>
 800875c:	2b50      	cmp	r3, #80	@ 0x50
 800875e:	d873      	bhi.n	8008848 <HAL_TIM_ConfigClockSource+0x1bc>
 8008760:	2b40      	cmp	r3, #64	@ 0x40
 8008762:	d058      	beq.n	8008816 <HAL_TIM_ConfigClockSource+0x18a>
 8008764:	2b40      	cmp	r3, #64	@ 0x40
 8008766:	d86f      	bhi.n	8008848 <HAL_TIM_ConfigClockSource+0x1bc>
 8008768:	2b30      	cmp	r3, #48	@ 0x30
 800876a:	d064      	beq.n	8008836 <HAL_TIM_ConfigClockSource+0x1aa>
 800876c:	2b30      	cmp	r3, #48	@ 0x30
 800876e:	d86b      	bhi.n	8008848 <HAL_TIM_ConfigClockSource+0x1bc>
 8008770:	2b20      	cmp	r3, #32
 8008772:	d060      	beq.n	8008836 <HAL_TIM_ConfigClockSource+0x1aa>
 8008774:	2b20      	cmp	r3, #32
 8008776:	d867      	bhi.n	8008848 <HAL_TIM_ConfigClockSource+0x1bc>
 8008778:	2b00      	cmp	r3, #0
 800877a:	d05c      	beq.n	8008836 <HAL_TIM_ConfigClockSource+0x1aa>
 800877c:	2b10      	cmp	r3, #16
 800877e:	d05a      	beq.n	8008836 <HAL_TIM_ConfigClockSource+0x1aa>
 8008780:	e062      	b.n	8008848 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008786:	683b      	ldr	r3, [r7, #0]
 8008788:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800878a:	683b      	ldr	r3, [r7, #0]
 800878c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800878e:	683b      	ldr	r3, [r7, #0]
 8008790:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008792:	f000 f9cb 	bl	8008b2c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	689b      	ldr	r3, [r3, #8]
 800879c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800879e:	68bb      	ldr	r3, [r7, #8]
 80087a0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80087a4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	68ba      	ldr	r2, [r7, #8]
 80087ac:	609a      	str	r2, [r3, #8]
      break;
 80087ae:	e04f      	b.n	8008850 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80087b4:	683b      	ldr	r3, [r7, #0]
 80087b6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80087b8:	683b      	ldr	r3, [r7, #0]
 80087ba:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80087bc:	683b      	ldr	r3, [r7, #0]
 80087be:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80087c0:	f000 f9b4 	bl	8008b2c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	689a      	ldr	r2, [r3, #8]
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80087d2:	609a      	str	r2, [r3, #8]
      break;
 80087d4:	e03c      	b.n	8008850 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80087da:	683b      	ldr	r3, [r7, #0]
 80087dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80087de:	683b      	ldr	r3, [r7, #0]
 80087e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80087e2:	461a      	mov	r2, r3
 80087e4:	f000 f924 	bl	8008a30 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	2150      	movs	r1, #80	@ 0x50
 80087ee:	4618      	mov	r0, r3
 80087f0:	f000 f97e 	bl	8008af0 <TIM_ITRx_SetConfig>
      break;
 80087f4:	e02c      	b.n	8008850 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80087fa:	683b      	ldr	r3, [r7, #0]
 80087fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80087fe:	683b      	ldr	r3, [r7, #0]
 8008800:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008802:	461a      	mov	r2, r3
 8008804:	f000 f943 	bl	8008a8e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	2160      	movs	r1, #96	@ 0x60
 800880e:	4618      	mov	r0, r3
 8008810:	f000 f96e 	bl	8008af0 <TIM_ITRx_SetConfig>
      break;
 8008814:	e01c      	b.n	8008850 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800881a:	683b      	ldr	r3, [r7, #0]
 800881c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800881e:	683b      	ldr	r3, [r7, #0]
 8008820:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008822:	461a      	mov	r2, r3
 8008824:	f000 f904 	bl	8008a30 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	2140      	movs	r1, #64	@ 0x40
 800882e:	4618      	mov	r0, r3
 8008830:	f000 f95e 	bl	8008af0 <TIM_ITRx_SetConfig>
      break;
 8008834:	e00c      	b.n	8008850 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681a      	ldr	r2, [r3, #0]
 800883a:	683b      	ldr	r3, [r7, #0]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	4619      	mov	r1, r3
 8008840:	4610      	mov	r0, r2
 8008842:	f000 f955 	bl	8008af0 <TIM_ITRx_SetConfig>
      break;
 8008846:	e003      	b.n	8008850 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8008848:	2301      	movs	r3, #1
 800884a:	73fb      	strb	r3, [r7, #15]
      break;
 800884c:	e000      	b.n	8008850 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800884e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	2201      	movs	r2, #1
 8008854:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	2200      	movs	r2, #0
 800885c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008860:	7bfb      	ldrb	r3, [r7, #15]
}
 8008862:	4618      	mov	r0, r3
 8008864:	3710      	adds	r7, #16
 8008866:	46bd      	mov	sp, r7
 8008868:	bd80      	pop	{r7, pc}
 800886a:	bf00      	nop
 800886c:	ffceff88 	.word	0xffceff88
 8008870:	00100040 	.word	0x00100040
 8008874:	00100030 	.word	0x00100030
 8008878:	00100020 	.word	0x00100020

0800887c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800887c:	b480      	push	{r7}
 800887e:	b083      	sub	sp, #12
 8008880:	af00      	add	r7, sp, #0
 8008882:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008884:	bf00      	nop
 8008886:	370c      	adds	r7, #12
 8008888:	46bd      	mov	sp, r7
 800888a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888e:	4770      	bx	lr

08008890 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008890:	b480      	push	{r7}
 8008892:	b083      	sub	sp, #12
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008898:	bf00      	nop
 800889a:	370c      	adds	r7, #12
 800889c:	46bd      	mov	sp, r7
 800889e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a2:	4770      	bx	lr

080088a4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80088a4:	b480      	push	{r7}
 80088a6:	b083      	sub	sp, #12
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80088ac:	bf00      	nop
 80088ae:	370c      	adds	r7, #12
 80088b0:	46bd      	mov	sp, r7
 80088b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b6:	4770      	bx	lr

080088b8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80088b8:	b480      	push	{r7}
 80088ba:	b083      	sub	sp, #12
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80088c0:	bf00      	nop
 80088c2:	370c      	adds	r7, #12
 80088c4:	46bd      	mov	sp, r7
 80088c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ca:	4770      	bx	lr

080088cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80088cc:	b480      	push	{r7}
 80088ce:	b085      	sub	sp, #20
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]
 80088d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	4a4a      	ldr	r2, [pc, #296]	@ (8008a08 <TIM_Base_SetConfig+0x13c>)
 80088e0:	4293      	cmp	r3, r2
 80088e2:	d013      	beq.n	800890c <TIM_Base_SetConfig+0x40>
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80088ea:	d00f      	beq.n	800890c <TIM_Base_SetConfig+0x40>
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	4a47      	ldr	r2, [pc, #284]	@ (8008a0c <TIM_Base_SetConfig+0x140>)
 80088f0:	4293      	cmp	r3, r2
 80088f2:	d00b      	beq.n	800890c <TIM_Base_SetConfig+0x40>
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	4a46      	ldr	r2, [pc, #280]	@ (8008a10 <TIM_Base_SetConfig+0x144>)
 80088f8:	4293      	cmp	r3, r2
 80088fa:	d007      	beq.n	800890c <TIM_Base_SetConfig+0x40>
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	4a45      	ldr	r2, [pc, #276]	@ (8008a14 <TIM_Base_SetConfig+0x148>)
 8008900:	4293      	cmp	r3, r2
 8008902:	d003      	beq.n	800890c <TIM_Base_SetConfig+0x40>
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	4a44      	ldr	r2, [pc, #272]	@ (8008a18 <TIM_Base_SetConfig+0x14c>)
 8008908:	4293      	cmp	r3, r2
 800890a:	d108      	bne.n	800891e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008912:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008914:	683b      	ldr	r3, [r7, #0]
 8008916:	685b      	ldr	r3, [r3, #4]
 8008918:	68fa      	ldr	r2, [r7, #12]
 800891a:	4313      	orrs	r3, r2
 800891c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	4a39      	ldr	r2, [pc, #228]	@ (8008a08 <TIM_Base_SetConfig+0x13c>)
 8008922:	4293      	cmp	r3, r2
 8008924:	d027      	beq.n	8008976 <TIM_Base_SetConfig+0xaa>
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800892c:	d023      	beq.n	8008976 <TIM_Base_SetConfig+0xaa>
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	4a36      	ldr	r2, [pc, #216]	@ (8008a0c <TIM_Base_SetConfig+0x140>)
 8008932:	4293      	cmp	r3, r2
 8008934:	d01f      	beq.n	8008976 <TIM_Base_SetConfig+0xaa>
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	4a35      	ldr	r2, [pc, #212]	@ (8008a10 <TIM_Base_SetConfig+0x144>)
 800893a:	4293      	cmp	r3, r2
 800893c:	d01b      	beq.n	8008976 <TIM_Base_SetConfig+0xaa>
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	4a34      	ldr	r2, [pc, #208]	@ (8008a14 <TIM_Base_SetConfig+0x148>)
 8008942:	4293      	cmp	r3, r2
 8008944:	d017      	beq.n	8008976 <TIM_Base_SetConfig+0xaa>
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	4a33      	ldr	r2, [pc, #204]	@ (8008a18 <TIM_Base_SetConfig+0x14c>)
 800894a:	4293      	cmp	r3, r2
 800894c:	d013      	beq.n	8008976 <TIM_Base_SetConfig+0xaa>
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	4a32      	ldr	r2, [pc, #200]	@ (8008a1c <TIM_Base_SetConfig+0x150>)
 8008952:	4293      	cmp	r3, r2
 8008954:	d00f      	beq.n	8008976 <TIM_Base_SetConfig+0xaa>
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	4a31      	ldr	r2, [pc, #196]	@ (8008a20 <TIM_Base_SetConfig+0x154>)
 800895a:	4293      	cmp	r3, r2
 800895c:	d00b      	beq.n	8008976 <TIM_Base_SetConfig+0xaa>
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	4a30      	ldr	r2, [pc, #192]	@ (8008a24 <TIM_Base_SetConfig+0x158>)
 8008962:	4293      	cmp	r3, r2
 8008964:	d007      	beq.n	8008976 <TIM_Base_SetConfig+0xaa>
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	4a2f      	ldr	r2, [pc, #188]	@ (8008a28 <TIM_Base_SetConfig+0x15c>)
 800896a:	4293      	cmp	r3, r2
 800896c:	d003      	beq.n	8008976 <TIM_Base_SetConfig+0xaa>
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	4a2e      	ldr	r2, [pc, #184]	@ (8008a2c <TIM_Base_SetConfig+0x160>)
 8008972:	4293      	cmp	r3, r2
 8008974:	d108      	bne.n	8008988 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800897c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800897e:	683b      	ldr	r3, [r7, #0]
 8008980:	68db      	ldr	r3, [r3, #12]
 8008982:	68fa      	ldr	r2, [r7, #12]
 8008984:	4313      	orrs	r3, r2
 8008986:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800898e:	683b      	ldr	r3, [r7, #0]
 8008990:	695b      	ldr	r3, [r3, #20]
 8008992:	4313      	orrs	r3, r2
 8008994:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	68fa      	ldr	r2, [r7, #12]
 800899a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800899c:	683b      	ldr	r3, [r7, #0]
 800899e:	689a      	ldr	r2, [r3, #8]
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80089a4:	683b      	ldr	r3, [r7, #0]
 80089a6:	681a      	ldr	r2, [r3, #0]
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	4a16      	ldr	r2, [pc, #88]	@ (8008a08 <TIM_Base_SetConfig+0x13c>)
 80089b0:	4293      	cmp	r3, r2
 80089b2:	d00f      	beq.n	80089d4 <TIM_Base_SetConfig+0x108>
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	4a18      	ldr	r2, [pc, #96]	@ (8008a18 <TIM_Base_SetConfig+0x14c>)
 80089b8:	4293      	cmp	r3, r2
 80089ba:	d00b      	beq.n	80089d4 <TIM_Base_SetConfig+0x108>
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	4a17      	ldr	r2, [pc, #92]	@ (8008a1c <TIM_Base_SetConfig+0x150>)
 80089c0:	4293      	cmp	r3, r2
 80089c2:	d007      	beq.n	80089d4 <TIM_Base_SetConfig+0x108>
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	4a16      	ldr	r2, [pc, #88]	@ (8008a20 <TIM_Base_SetConfig+0x154>)
 80089c8:	4293      	cmp	r3, r2
 80089ca:	d003      	beq.n	80089d4 <TIM_Base_SetConfig+0x108>
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	4a15      	ldr	r2, [pc, #84]	@ (8008a24 <TIM_Base_SetConfig+0x158>)
 80089d0:	4293      	cmp	r3, r2
 80089d2:	d103      	bne.n	80089dc <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80089d4:	683b      	ldr	r3, [r7, #0]
 80089d6:	691a      	ldr	r2, [r3, #16]
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	2201      	movs	r2, #1
 80089e0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	691b      	ldr	r3, [r3, #16]
 80089e6:	f003 0301 	and.w	r3, r3, #1
 80089ea:	2b01      	cmp	r3, #1
 80089ec:	d105      	bne.n	80089fa <TIM_Base_SetConfig+0x12e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	691b      	ldr	r3, [r3, #16]
 80089f2:	f023 0201 	bic.w	r2, r3, #1
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	611a      	str	r2, [r3, #16]
  }
}
 80089fa:	bf00      	nop
 80089fc:	3714      	adds	r7, #20
 80089fe:	46bd      	mov	sp, r7
 8008a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a04:	4770      	bx	lr
 8008a06:	bf00      	nop
 8008a08:	40010000 	.word	0x40010000
 8008a0c:	40000400 	.word	0x40000400
 8008a10:	40000800 	.word	0x40000800
 8008a14:	40000c00 	.word	0x40000c00
 8008a18:	40010400 	.word	0x40010400
 8008a1c:	40014000 	.word	0x40014000
 8008a20:	40014400 	.word	0x40014400
 8008a24:	40014800 	.word	0x40014800
 8008a28:	4000e000 	.word	0x4000e000
 8008a2c:	4000e400 	.word	0x4000e400

08008a30 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008a30:	b480      	push	{r7}
 8008a32:	b087      	sub	sp, #28
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	60f8      	str	r0, [r7, #12]
 8008a38:	60b9      	str	r1, [r7, #8]
 8008a3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	6a1b      	ldr	r3, [r3, #32]
 8008a40:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	6a1b      	ldr	r3, [r3, #32]
 8008a46:	f023 0201 	bic.w	r2, r3, #1
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	699b      	ldr	r3, [r3, #24]
 8008a52:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008a54:	693b      	ldr	r3, [r7, #16]
 8008a56:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008a5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	011b      	lsls	r3, r3, #4
 8008a60:	693a      	ldr	r2, [r7, #16]
 8008a62:	4313      	orrs	r3, r2
 8008a64:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008a66:	697b      	ldr	r3, [r7, #20]
 8008a68:	f023 030a 	bic.w	r3, r3, #10
 8008a6c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008a6e:	697a      	ldr	r2, [r7, #20]
 8008a70:	68bb      	ldr	r3, [r7, #8]
 8008a72:	4313      	orrs	r3, r2
 8008a74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	693a      	ldr	r2, [r7, #16]
 8008a7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	697a      	ldr	r2, [r7, #20]
 8008a80:	621a      	str	r2, [r3, #32]
}
 8008a82:	bf00      	nop
 8008a84:	371c      	adds	r7, #28
 8008a86:	46bd      	mov	sp, r7
 8008a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8c:	4770      	bx	lr

08008a8e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008a8e:	b480      	push	{r7}
 8008a90:	b087      	sub	sp, #28
 8008a92:	af00      	add	r7, sp, #0
 8008a94:	60f8      	str	r0, [r7, #12]
 8008a96:	60b9      	str	r1, [r7, #8]
 8008a98:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	6a1b      	ldr	r3, [r3, #32]
 8008a9e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	6a1b      	ldr	r3, [r3, #32]
 8008aa4:	f023 0210 	bic.w	r2, r3, #16
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	699b      	ldr	r3, [r3, #24]
 8008ab0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008ab2:	693b      	ldr	r3, [r7, #16]
 8008ab4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008ab8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	031b      	lsls	r3, r3, #12
 8008abe:	693a      	ldr	r2, [r7, #16]
 8008ac0:	4313      	orrs	r3, r2
 8008ac2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008ac4:	697b      	ldr	r3, [r7, #20]
 8008ac6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008aca:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008acc:	68bb      	ldr	r3, [r7, #8]
 8008ace:	011b      	lsls	r3, r3, #4
 8008ad0:	697a      	ldr	r2, [r7, #20]
 8008ad2:	4313      	orrs	r3, r2
 8008ad4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	693a      	ldr	r2, [r7, #16]
 8008ada:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	697a      	ldr	r2, [r7, #20]
 8008ae0:	621a      	str	r2, [r3, #32]
}
 8008ae2:	bf00      	nop
 8008ae4:	371c      	adds	r7, #28
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aec:	4770      	bx	lr
	...

08008af0 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008af0:	b480      	push	{r7}
 8008af2:	b085      	sub	sp, #20
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	6078      	str	r0, [r7, #4]
 8008af8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	689b      	ldr	r3, [r3, #8]
 8008afe:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008b00:	68fa      	ldr	r2, [r7, #12]
 8008b02:	4b09      	ldr	r3, [pc, #36]	@ (8008b28 <TIM_ITRx_SetConfig+0x38>)
 8008b04:	4013      	ands	r3, r2
 8008b06:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008b08:	683a      	ldr	r2, [r7, #0]
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	4313      	orrs	r3, r2
 8008b0e:	f043 0307 	orr.w	r3, r3, #7
 8008b12:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	68fa      	ldr	r2, [r7, #12]
 8008b18:	609a      	str	r2, [r3, #8]
}
 8008b1a:	bf00      	nop
 8008b1c:	3714      	adds	r7, #20
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b24:	4770      	bx	lr
 8008b26:	bf00      	nop
 8008b28:	ffcfff8f 	.word	0xffcfff8f

08008b2c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008b2c:	b480      	push	{r7}
 8008b2e:	b087      	sub	sp, #28
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	60f8      	str	r0, [r7, #12]
 8008b34:	60b9      	str	r1, [r7, #8]
 8008b36:	607a      	str	r2, [r7, #4]
 8008b38:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	689b      	ldr	r3, [r3, #8]
 8008b3e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008b40:	697b      	ldr	r3, [r7, #20]
 8008b42:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008b46:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008b48:	683b      	ldr	r3, [r7, #0]
 8008b4a:	021a      	lsls	r2, r3, #8
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	431a      	orrs	r2, r3
 8008b50:	68bb      	ldr	r3, [r7, #8]
 8008b52:	4313      	orrs	r3, r2
 8008b54:	697a      	ldr	r2, [r7, #20]
 8008b56:	4313      	orrs	r3, r2
 8008b58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	697a      	ldr	r2, [r7, #20]
 8008b5e:	609a      	str	r2, [r3, #8]
}
 8008b60:	bf00      	nop
 8008b62:	371c      	adds	r7, #28
 8008b64:	46bd      	mov	sp, r7
 8008b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6a:	4770      	bx	lr

08008b6c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008b6c:	b480      	push	{r7}
 8008b6e:	b085      	sub	sp, #20
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
 8008b74:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008b7c:	2b01      	cmp	r3, #1
 8008b7e:	d101      	bne.n	8008b84 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008b80:	2302      	movs	r3, #2
 8008b82:	e077      	b.n	8008c74 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	2201      	movs	r2, #1
 8008b88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	2202      	movs	r2, #2
 8008b90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	685b      	ldr	r3, [r3, #4]
 8008b9a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	689b      	ldr	r3, [r3, #8]
 8008ba2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	4a35      	ldr	r2, [pc, #212]	@ (8008c80 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008baa:	4293      	cmp	r3, r2
 8008bac:	d004      	beq.n	8008bb8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	4a34      	ldr	r2, [pc, #208]	@ (8008c84 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008bb4:	4293      	cmp	r3, r2
 8008bb6:	d108      	bne.n	8008bca <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008bbe:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008bc0:	683b      	ldr	r3, [r7, #0]
 8008bc2:	685b      	ldr	r3, [r3, #4]
 8008bc4:	68fa      	ldr	r2, [r7, #12]
 8008bc6:	4313      	orrs	r3, r2
 8008bc8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008bd0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008bd2:	683b      	ldr	r3, [r7, #0]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	68fa      	ldr	r2, [r7, #12]
 8008bd8:	4313      	orrs	r3, r2
 8008bda:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	68fa      	ldr	r2, [r7, #12]
 8008be2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	4a25      	ldr	r2, [pc, #148]	@ (8008c80 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008bea:	4293      	cmp	r3, r2
 8008bec:	d02c      	beq.n	8008c48 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008bf6:	d027      	beq.n	8008c48 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	4a22      	ldr	r2, [pc, #136]	@ (8008c88 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8008bfe:	4293      	cmp	r3, r2
 8008c00:	d022      	beq.n	8008c48 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	4a21      	ldr	r2, [pc, #132]	@ (8008c8c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8008c08:	4293      	cmp	r3, r2
 8008c0a:	d01d      	beq.n	8008c48 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	4a1f      	ldr	r2, [pc, #124]	@ (8008c90 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8008c12:	4293      	cmp	r3, r2
 8008c14:	d018      	beq.n	8008c48 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	4a1a      	ldr	r2, [pc, #104]	@ (8008c84 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008c1c:	4293      	cmp	r3, r2
 8008c1e:	d013      	beq.n	8008c48 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	4a1b      	ldr	r2, [pc, #108]	@ (8008c94 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8008c26:	4293      	cmp	r3, r2
 8008c28:	d00e      	beq.n	8008c48 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	4a1a      	ldr	r2, [pc, #104]	@ (8008c98 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8008c30:	4293      	cmp	r3, r2
 8008c32:	d009      	beq.n	8008c48 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	4a18      	ldr	r2, [pc, #96]	@ (8008c9c <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8008c3a:	4293      	cmp	r3, r2
 8008c3c:	d004      	beq.n	8008c48 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	4a17      	ldr	r2, [pc, #92]	@ (8008ca0 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8008c44:	4293      	cmp	r3, r2
 8008c46:	d10c      	bne.n	8008c62 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008c48:	68bb      	ldr	r3, [r7, #8]
 8008c4a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008c4e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008c50:	683b      	ldr	r3, [r7, #0]
 8008c52:	689b      	ldr	r3, [r3, #8]
 8008c54:	68ba      	ldr	r2, [r7, #8]
 8008c56:	4313      	orrs	r3, r2
 8008c58:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	68ba      	ldr	r2, [r7, #8]
 8008c60:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	2201      	movs	r2, #1
 8008c66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	2200      	movs	r2, #0
 8008c6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008c72:	2300      	movs	r3, #0
}
 8008c74:	4618      	mov	r0, r3
 8008c76:	3714      	adds	r7, #20
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7e:	4770      	bx	lr
 8008c80:	40010000 	.word	0x40010000
 8008c84:	40010400 	.word	0x40010400
 8008c88:	40000400 	.word	0x40000400
 8008c8c:	40000800 	.word	0x40000800
 8008c90:	40000c00 	.word	0x40000c00
 8008c94:	40001800 	.word	0x40001800
 8008c98:	40014000 	.word	0x40014000
 8008c9c:	4000e000 	.word	0x4000e000
 8008ca0:	4000e400 	.word	0x4000e400

08008ca4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008ca4:	b480      	push	{r7}
 8008ca6:	b083      	sub	sp, #12
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008cac:	bf00      	nop
 8008cae:	370c      	adds	r7, #12
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb6:	4770      	bx	lr

08008cb8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008cb8:	b480      	push	{r7}
 8008cba:	b083      	sub	sp, #12
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008cc0:	bf00      	nop
 8008cc2:	370c      	adds	r7, #12
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cca:	4770      	bx	lr

08008ccc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008ccc:	b480      	push	{r7}
 8008cce:	b083      	sub	sp, #12
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008cd4:	bf00      	nop
 8008cd6:	370c      	adds	r7, #12
 8008cd8:	46bd      	mov	sp, r7
 8008cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cde:	4770      	bx	lr

08008ce0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008ce0:	b580      	push	{r7, lr}
 8008ce2:	b082      	sub	sp, #8
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d101      	bne.n	8008cf2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008cee:	2301      	movs	r3, #1
 8008cf0:	e042      	b.n	8008d78 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d106      	bne.n	8008d0a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	2200      	movs	r2, #0
 8008d00:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008d04:	6878      	ldr	r0, [r7, #4]
 8008d06:	f7f9 fe51 	bl	80029ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	2224      	movs	r2, #36	@ 0x24
 8008d0e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	681a      	ldr	r2, [r3, #0]
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	f022 0201 	bic.w	r2, r2, #1
 8008d20:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d002      	beq.n	8008d30 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008d2a:	6878      	ldr	r0, [r7, #4]
 8008d2c:	f001 fc10 	bl	800a550 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008d30:	6878      	ldr	r0, [r7, #4]
 8008d32:	f000 fda1 	bl	8009878 <UART_SetConfig>
 8008d36:	4603      	mov	r3, r0
 8008d38:	2b01      	cmp	r3, #1
 8008d3a:	d101      	bne.n	8008d40 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008d3c:	2301      	movs	r3, #1
 8008d3e:	e01b      	b.n	8008d78 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	685a      	ldr	r2, [r3, #4]
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008d4e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	689a      	ldr	r2, [r3, #8]
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008d5e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	681a      	ldr	r2, [r3, #0]
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	f042 0201 	orr.w	r2, r2, #1
 8008d6e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008d70:	6878      	ldr	r0, [r7, #4]
 8008d72:	f001 fc8f 	bl	800a694 <UART_CheckIdleState>
 8008d76:	4603      	mov	r3, r0
}
 8008d78:	4618      	mov	r0, r3
 8008d7a:	3708      	adds	r7, #8
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	bd80      	pop	{r7, pc}

08008d80 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008d80:	b580      	push	{r7, lr}
 8008d82:	b08a      	sub	sp, #40	@ 0x28
 8008d84:	af02      	add	r7, sp, #8
 8008d86:	60f8      	str	r0, [r7, #12]
 8008d88:	60b9      	str	r1, [r7, #8]
 8008d8a:	603b      	str	r3, [r7, #0]
 8008d8c:	4613      	mov	r3, r2
 8008d8e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008d96:	2b20      	cmp	r3, #32
 8008d98:	d17b      	bne.n	8008e92 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8008d9a:	68bb      	ldr	r3, [r7, #8]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d002      	beq.n	8008da6 <HAL_UART_Transmit+0x26>
 8008da0:	88fb      	ldrh	r3, [r7, #6]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d101      	bne.n	8008daa <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008da6:	2301      	movs	r3, #1
 8008da8:	e074      	b.n	8008e94 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	2200      	movs	r2, #0
 8008dae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	2221      	movs	r2, #33	@ 0x21
 8008db6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008dba:	f7fa fa43 	bl	8003244 <HAL_GetTick>
 8008dbe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	88fa      	ldrh	r2, [r7, #6]
 8008dc4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	88fa      	ldrh	r2, [r7, #6]
 8008dcc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	689b      	ldr	r3, [r3, #8]
 8008dd4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008dd8:	d108      	bne.n	8008dec <HAL_UART_Transmit+0x6c>
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	691b      	ldr	r3, [r3, #16]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d104      	bne.n	8008dec <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008de2:	2300      	movs	r3, #0
 8008de4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008de6:	68bb      	ldr	r3, [r7, #8]
 8008de8:	61bb      	str	r3, [r7, #24]
 8008dea:	e003      	b.n	8008df4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008dec:	68bb      	ldr	r3, [r7, #8]
 8008dee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008df0:	2300      	movs	r3, #0
 8008df2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008df4:	e030      	b.n	8008e58 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008df6:	683b      	ldr	r3, [r7, #0]
 8008df8:	9300      	str	r3, [sp, #0]
 8008dfa:	697b      	ldr	r3, [r7, #20]
 8008dfc:	2200      	movs	r2, #0
 8008dfe:	2180      	movs	r1, #128	@ 0x80
 8008e00:	68f8      	ldr	r0, [r7, #12]
 8008e02:	f001 fcf1 	bl	800a7e8 <UART_WaitOnFlagUntilTimeout>
 8008e06:	4603      	mov	r3, r0
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d005      	beq.n	8008e18 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	2220      	movs	r2, #32
 8008e10:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8008e14:	2303      	movs	r3, #3
 8008e16:	e03d      	b.n	8008e94 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8008e18:	69fb      	ldr	r3, [r7, #28]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d10b      	bne.n	8008e36 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008e1e:	69bb      	ldr	r3, [r7, #24]
 8008e20:	881b      	ldrh	r3, [r3, #0]
 8008e22:	461a      	mov	r2, r3
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008e2c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8008e2e:	69bb      	ldr	r3, [r7, #24]
 8008e30:	3302      	adds	r3, #2
 8008e32:	61bb      	str	r3, [r7, #24]
 8008e34:	e007      	b.n	8008e46 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008e36:	69fb      	ldr	r3, [r7, #28]
 8008e38:	781a      	ldrb	r2, [r3, #0]
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8008e40:	69fb      	ldr	r3, [r7, #28]
 8008e42:	3301      	adds	r3, #1
 8008e44:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008e4c:	b29b      	uxth	r3, r3
 8008e4e:	3b01      	subs	r3, #1
 8008e50:	b29a      	uxth	r2, r3
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008e5e:	b29b      	uxth	r3, r3
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d1c8      	bne.n	8008df6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008e64:	683b      	ldr	r3, [r7, #0]
 8008e66:	9300      	str	r3, [sp, #0]
 8008e68:	697b      	ldr	r3, [r7, #20]
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	2140      	movs	r1, #64	@ 0x40
 8008e6e:	68f8      	ldr	r0, [r7, #12]
 8008e70:	f001 fcba 	bl	800a7e8 <UART_WaitOnFlagUntilTimeout>
 8008e74:	4603      	mov	r3, r0
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d005      	beq.n	8008e86 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	2220      	movs	r2, #32
 8008e7e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8008e82:	2303      	movs	r3, #3
 8008e84:	e006      	b.n	8008e94 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	2220      	movs	r2, #32
 8008e8a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8008e8e:	2300      	movs	r3, #0
 8008e90:	e000      	b.n	8008e94 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8008e92:	2302      	movs	r3, #2
  }
}
 8008e94:	4618      	mov	r0, r3
 8008e96:	3720      	adds	r7, #32
 8008e98:	46bd      	mov	sp, r7
 8008e9a:	bd80      	pop	{r7, pc}

08008e9c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008e9c:	b580      	push	{r7, lr}
 8008e9e:	b08a      	sub	sp, #40	@ 0x28
 8008ea0:	af02      	add	r7, sp, #8
 8008ea2:	60f8      	str	r0, [r7, #12]
 8008ea4:	60b9      	str	r1, [r7, #8]
 8008ea6:	603b      	str	r3, [r7, #0]
 8008ea8:	4613      	mov	r3, r2
 8008eaa:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008eb2:	2b20      	cmp	r3, #32
 8008eb4:	f040 80b5 	bne.w	8009022 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8008eb8:	68bb      	ldr	r3, [r7, #8]
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d002      	beq.n	8008ec4 <HAL_UART_Receive+0x28>
 8008ebe:	88fb      	ldrh	r3, [r7, #6]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d101      	bne.n	8008ec8 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8008ec4:	2301      	movs	r3, #1
 8008ec6:	e0ad      	b.n	8009024 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	2200      	movs	r2, #0
 8008ecc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	2222      	movs	r2, #34	@ 0x22
 8008ed4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	2200      	movs	r2, #0
 8008edc:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008ede:	f7fa f9b1 	bl	8003244 <HAL_GetTick>
 8008ee2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	88fa      	ldrh	r2, [r7, #6]
 8008ee8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	88fa      	ldrh	r2, [r7, #6]
 8008ef0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	689b      	ldr	r3, [r3, #8]
 8008ef8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008efc:	d10e      	bne.n	8008f1c <HAL_UART_Receive+0x80>
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	691b      	ldr	r3, [r3, #16]
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d105      	bne.n	8008f12 <HAL_UART_Receive+0x76>
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8008f0c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008f10:	e02d      	b.n	8008f6e <HAL_UART_Receive+0xd2>
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	22ff      	movs	r2, #255	@ 0xff
 8008f16:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008f1a:	e028      	b.n	8008f6e <HAL_UART_Receive+0xd2>
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	689b      	ldr	r3, [r3, #8]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d10d      	bne.n	8008f40 <HAL_UART_Receive+0xa4>
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	691b      	ldr	r3, [r3, #16]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d104      	bne.n	8008f36 <HAL_UART_Receive+0x9a>
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	22ff      	movs	r2, #255	@ 0xff
 8008f30:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008f34:	e01b      	b.n	8008f6e <HAL_UART_Receive+0xd2>
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	227f      	movs	r2, #127	@ 0x7f
 8008f3a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008f3e:	e016      	b.n	8008f6e <HAL_UART_Receive+0xd2>
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	689b      	ldr	r3, [r3, #8]
 8008f44:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008f48:	d10d      	bne.n	8008f66 <HAL_UART_Receive+0xca>
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	691b      	ldr	r3, [r3, #16]
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d104      	bne.n	8008f5c <HAL_UART_Receive+0xc0>
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	227f      	movs	r2, #127	@ 0x7f
 8008f56:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008f5a:	e008      	b.n	8008f6e <HAL_UART_Receive+0xd2>
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	223f      	movs	r2, #63	@ 0x3f
 8008f60:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008f64:	e003      	b.n	8008f6e <HAL_UART_Receive+0xd2>
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	2200      	movs	r2, #0
 8008f6a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008f74:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	689b      	ldr	r3, [r3, #8]
 8008f7a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008f7e:	d108      	bne.n	8008f92 <HAL_UART_Receive+0xf6>
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	691b      	ldr	r3, [r3, #16]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d104      	bne.n	8008f92 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8008f88:	2300      	movs	r3, #0
 8008f8a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008f8c:	68bb      	ldr	r3, [r7, #8]
 8008f8e:	61bb      	str	r3, [r7, #24]
 8008f90:	e003      	b.n	8008f9a <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8008f92:	68bb      	ldr	r3, [r7, #8]
 8008f94:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008f96:	2300      	movs	r3, #0
 8008f98:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8008f9a:	e036      	b.n	800900a <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8008f9c:	683b      	ldr	r3, [r7, #0]
 8008f9e:	9300      	str	r3, [sp, #0]
 8008fa0:	697b      	ldr	r3, [r7, #20]
 8008fa2:	2200      	movs	r2, #0
 8008fa4:	2120      	movs	r1, #32
 8008fa6:	68f8      	ldr	r0, [r7, #12]
 8008fa8:	f001 fc1e 	bl	800a7e8 <UART_WaitOnFlagUntilTimeout>
 8008fac:	4603      	mov	r3, r0
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d005      	beq.n	8008fbe <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	2220      	movs	r2, #32
 8008fb6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 8008fba:	2303      	movs	r3, #3
 8008fbc:	e032      	b.n	8009024 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8008fbe:	69fb      	ldr	r3, [r7, #28]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d10c      	bne.n	8008fde <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fca:	b29a      	uxth	r2, r3
 8008fcc:	8a7b      	ldrh	r3, [r7, #18]
 8008fce:	4013      	ands	r3, r2
 8008fd0:	b29a      	uxth	r2, r3
 8008fd2:	69bb      	ldr	r3, [r7, #24]
 8008fd4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8008fd6:	69bb      	ldr	r3, [r7, #24]
 8008fd8:	3302      	adds	r3, #2
 8008fda:	61bb      	str	r3, [r7, #24]
 8008fdc:	e00c      	b.n	8008ff8 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fe4:	b2da      	uxtb	r2, r3
 8008fe6:	8a7b      	ldrh	r3, [r7, #18]
 8008fe8:	b2db      	uxtb	r3, r3
 8008fea:	4013      	ands	r3, r2
 8008fec:	b2da      	uxtb	r2, r3
 8008fee:	69fb      	ldr	r3, [r7, #28]
 8008ff0:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8008ff2:	69fb      	ldr	r3, [r7, #28]
 8008ff4:	3301      	adds	r3, #1
 8008ff6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008ffe:	b29b      	uxth	r3, r3
 8009000:	3b01      	subs	r3, #1
 8009002:	b29a      	uxth	r2, r3
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009010:	b29b      	uxth	r3, r3
 8009012:	2b00      	cmp	r3, #0
 8009014:	d1c2      	bne.n	8008f9c <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	2220      	movs	r2, #32
 800901a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 800901e:	2300      	movs	r3, #0
 8009020:	e000      	b.n	8009024 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8009022:	2302      	movs	r3, #2
  }
}
 8009024:	4618      	mov	r0, r3
 8009026:	3720      	adds	r7, #32
 8009028:	46bd      	mov	sp, r7
 800902a:	bd80      	pop	{r7, pc}

0800902c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800902c:	b580      	push	{r7, lr}
 800902e:	b08a      	sub	sp, #40	@ 0x28
 8009030:	af00      	add	r7, sp, #0
 8009032:	60f8      	str	r0, [r7, #12]
 8009034:	60b9      	str	r1, [r7, #8]
 8009036:	4613      	mov	r3, r2
 8009038:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009040:	2b20      	cmp	r3, #32
 8009042:	d137      	bne.n	80090b4 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8009044:	68bb      	ldr	r3, [r7, #8]
 8009046:	2b00      	cmp	r3, #0
 8009048:	d002      	beq.n	8009050 <HAL_UART_Receive_IT+0x24>
 800904a:	88fb      	ldrh	r3, [r7, #6]
 800904c:	2b00      	cmp	r3, #0
 800904e:	d101      	bne.n	8009054 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8009050:	2301      	movs	r3, #1
 8009052:	e030      	b.n	80090b6 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	2200      	movs	r2, #0
 8009058:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	4a18      	ldr	r2, [pc, #96]	@ (80090c0 <HAL_UART_Receive_IT+0x94>)
 8009060:	4293      	cmp	r3, r2
 8009062:	d01f      	beq.n	80090a4 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	685b      	ldr	r3, [r3, #4]
 800906a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800906e:	2b00      	cmp	r3, #0
 8009070:	d018      	beq.n	80090a4 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009078:	697b      	ldr	r3, [r7, #20]
 800907a:	e853 3f00 	ldrex	r3, [r3]
 800907e:	613b      	str	r3, [r7, #16]
   return(result);
 8009080:	693b      	ldr	r3, [r7, #16]
 8009082:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009086:	627b      	str	r3, [r7, #36]	@ 0x24
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	461a      	mov	r2, r3
 800908e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009090:	623b      	str	r3, [r7, #32]
 8009092:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009094:	69f9      	ldr	r1, [r7, #28]
 8009096:	6a3a      	ldr	r2, [r7, #32]
 8009098:	e841 2300 	strex	r3, r2, [r1]
 800909c:	61bb      	str	r3, [r7, #24]
   return(result);
 800909e:	69bb      	ldr	r3, [r7, #24]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d1e6      	bne.n	8009072 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80090a4:	88fb      	ldrh	r3, [r7, #6]
 80090a6:	461a      	mov	r2, r3
 80090a8:	68b9      	ldr	r1, [r7, #8]
 80090aa:	68f8      	ldr	r0, [r7, #12]
 80090ac:	f001 fc0a 	bl	800a8c4 <UART_Start_Receive_IT>
 80090b0:	4603      	mov	r3, r0
 80090b2:	e000      	b.n	80090b6 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80090b4:	2302      	movs	r3, #2
  }
}
 80090b6:	4618      	mov	r0, r3
 80090b8:	3728      	adds	r7, #40	@ 0x28
 80090ba:	46bd      	mov	sp, r7
 80090bc:	bd80      	pop	{r7, pc}
 80090be:	bf00      	nop
 80090c0:	58000c00 	.word	0x58000c00

080090c4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80090c4:	b580      	push	{r7, lr}
 80090c6:	b0ba      	sub	sp, #232	@ 0xe8
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	69db      	ldr	r3, [r3, #28]
 80090d2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	689b      	ldr	r3, [r3, #8]
 80090e6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80090ea:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80090ee:	f640 030f 	movw	r3, #2063	@ 0x80f
 80090f2:	4013      	ands	r3, r2
 80090f4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80090f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d11b      	bne.n	8009138 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009100:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009104:	f003 0320 	and.w	r3, r3, #32
 8009108:	2b00      	cmp	r3, #0
 800910a:	d015      	beq.n	8009138 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800910c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009110:	f003 0320 	and.w	r3, r3, #32
 8009114:	2b00      	cmp	r3, #0
 8009116:	d105      	bne.n	8009124 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009118:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800911c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009120:	2b00      	cmp	r3, #0
 8009122:	d009      	beq.n	8009138 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009128:	2b00      	cmp	r3, #0
 800912a:	f000 8377 	beq.w	800981c <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009132:	6878      	ldr	r0, [r7, #4]
 8009134:	4798      	blx	r3
      }
      return;
 8009136:	e371      	b.n	800981c <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009138:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800913c:	2b00      	cmp	r3, #0
 800913e:	f000 8123 	beq.w	8009388 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009142:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009146:	4b8d      	ldr	r3, [pc, #564]	@ (800937c <HAL_UART_IRQHandler+0x2b8>)
 8009148:	4013      	ands	r3, r2
 800914a:	2b00      	cmp	r3, #0
 800914c:	d106      	bne.n	800915c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800914e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8009152:	4b8b      	ldr	r3, [pc, #556]	@ (8009380 <HAL_UART_IRQHandler+0x2bc>)
 8009154:	4013      	ands	r3, r2
 8009156:	2b00      	cmp	r3, #0
 8009158:	f000 8116 	beq.w	8009388 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800915c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009160:	f003 0301 	and.w	r3, r3, #1
 8009164:	2b00      	cmp	r3, #0
 8009166:	d011      	beq.n	800918c <HAL_UART_IRQHandler+0xc8>
 8009168:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800916c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009170:	2b00      	cmp	r3, #0
 8009172:	d00b      	beq.n	800918c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	2201      	movs	r2, #1
 800917a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009182:	f043 0201 	orr.w	r2, r3, #1
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800918c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009190:	f003 0302 	and.w	r3, r3, #2
 8009194:	2b00      	cmp	r3, #0
 8009196:	d011      	beq.n	80091bc <HAL_UART_IRQHandler+0xf8>
 8009198:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800919c:	f003 0301 	and.w	r3, r3, #1
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d00b      	beq.n	80091bc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	2202      	movs	r2, #2
 80091aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80091b2:	f043 0204 	orr.w	r2, r3, #4
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80091bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80091c0:	f003 0304 	and.w	r3, r3, #4
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d011      	beq.n	80091ec <HAL_UART_IRQHandler+0x128>
 80091c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80091cc:	f003 0301 	and.w	r3, r3, #1
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d00b      	beq.n	80091ec <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	2204      	movs	r2, #4
 80091da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80091e2:	f043 0202 	orr.w	r2, r3, #2
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80091ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80091f0:	f003 0308 	and.w	r3, r3, #8
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d017      	beq.n	8009228 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80091f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80091fc:	f003 0320 	and.w	r3, r3, #32
 8009200:	2b00      	cmp	r3, #0
 8009202:	d105      	bne.n	8009210 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009204:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009208:	4b5c      	ldr	r3, [pc, #368]	@ (800937c <HAL_UART_IRQHandler+0x2b8>)
 800920a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800920c:	2b00      	cmp	r3, #0
 800920e:	d00b      	beq.n	8009228 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	2208      	movs	r2, #8
 8009216:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800921e:	f043 0208 	orr.w	r2, r3, #8
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009228:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800922c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009230:	2b00      	cmp	r3, #0
 8009232:	d012      	beq.n	800925a <HAL_UART_IRQHandler+0x196>
 8009234:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009238:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800923c:	2b00      	cmp	r3, #0
 800923e:	d00c      	beq.n	800925a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009248:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009250:	f043 0220 	orr.w	r2, r3, #32
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009260:	2b00      	cmp	r3, #0
 8009262:	f000 82dd 	beq.w	8009820 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009266:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800926a:	f003 0320 	and.w	r3, r3, #32
 800926e:	2b00      	cmp	r3, #0
 8009270:	d013      	beq.n	800929a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009272:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009276:	f003 0320 	and.w	r3, r3, #32
 800927a:	2b00      	cmp	r3, #0
 800927c:	d105      	bne.n	800928a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800927e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009282:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009286:	2b00      	cmp	r3, #0
 8009288:	d007      	beq.n	800929a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800928e:	2b00      	cmp	r3, #0
 8009290:	d003      	beq.n	800929a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009296:	6878      	ldr	r0, [r7, #4]
 8009298:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80092a0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	689b      	ldr	r3, [r3, #8]
 80092aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80092ae:	2b40      	cmp	r3, #64	@ 0x40
 80092b0:	d005      	beq.n	80092be <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80092b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80092b6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d054      	beq.n	8009368 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80092be:	6878      	ldr	r0, [r7, #4]
 80092c0:	f001 fc22 	bl	800ab08 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	689b      	ldr	r3, [r3, #8]
 80092ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80092ce:	2b40      	cmp	r3, #64	@ 0x40
 80092d0:	d146      	bne.n	8009360 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	3308      	adds	r3, #8
 80092d8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80092e0:	e853 3f00 	ldrex	r3, [r3]
 80092e4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80092e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80092ec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80092f0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	3308      	adds	r3, #8
 80092fa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80092fe:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009302:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009306:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800930a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800930e:	e841 2300 	strex	r3, r2, [r1]
 8009312:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8009316:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800931a:	2b00      	cmp	r3, #0
 800931c:	d1d9      	bne.n	80092d2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009324:	2b00      	cmp	r3, #0
 8009326:	d017      	beq.n	8009358 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800932e:	4a15      	ldr	r2, [pc, #84]	@ (8009384 <HAL_UART_IRQHandler+0x2c0>)
 8009330:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009338:	4618      	mov	r0, r3
 800933a:	f7fa fc59 	bl	8003bf0 <HAL_DMA_Abort_IT>
 800933e:	4603      	mov	r3, r0
 8009340:	2b00      	cmp	r3, #0
 8009342:	d019      	beq.n	8009378 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800934a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800934c:	687a      	ldr	r2, [r7, #4]
 800934e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8009352:	4610      	mov	r0, r2
 8009354:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009356:	e00f      	b.n	8009378 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009358:	6878      	ldr	r0, [r7, #4]
 800935a:	f000 fa77 	bl	800984c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800935e:	e00b      	b.n	8009378 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009360:	6878      	ldr	r0, [r7, #4]
 8009362:	f000 fa73 	bl	800984c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009366:	e007      	b.n	8009378 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009368:	6878      	ldr	r0, [r7, #4]
 800936a:	f000 fa6f 	bl	800984c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	2200      	movs	r2, #0
 8009372:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8009376:	e253      	b.n	8009820 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009378:	bf00      	nop
    return;
 800937a:	e251      	b.n	8009820 <HAL_UART_IRQHandler+0x75c>
 800937c:	10000001 	.word	0x10000001
 8009380:	04000120 	.word	0x04000120
 8009384:	0800abd5 	.word	0x0800abd5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800938c:	2b01      	cmp	r3, #1
 800938e:	f040 81e7 	bne.w	8009760 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009392:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009396:	f003 0310 	and.w	r3, r3, #16
 800939a:	2b00      	cmp	r3, #0
 800939c:	f000 81e0 	beq.w	8009760 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80093a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80093a4:	f003 0310 	and.w	r3, r3, #16
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	f000 81d9 	beq.w	8009760 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	2210      	movs	r2, #16
 80093b4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	689b      	ldr	r3, [r3, #8]
 80093bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80093c0:	2b40      	cmp	r3, #64	@ 0x40
 80093c2:	f040 8151 	bne.w	8009668 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	4a96      	ldr	r2, [pc, #600]	@ (8009628 <HAL_UART_IRQHandler+0x564>)
 80093d0:	4293      	cmp	r3, r2
 80093d2:	d068      	beq.n	80094a6 <HAL_UART_IRQHandler+0x3e2>
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	4a93      	ldr	r2, [pc, #588]	@ (800962c <HAL_UART_IRQHandler+0x568>)
 80093de:	4293      	cmp	r3, r2
 80093e0:	d061      	beq.n	80094a6 <HAL_UART_IRQHandler+0x3e2>
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	4a91      	ldr	r2, [pc, #580]	@ (8009630 <HAL_UART_IRQHandler+0x56c>)
 80093ec:	4293      	cmp	r3, r2
 80093ee:	d05a      	beq.n	80094a6 <HAL_UART_IRQHandler+0x3e2>
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	4a8e      	ldr	r2, [pc, #568]	@ (8009634 <HAL_UART_IRQHandler+0x570>)
 80093fa:	4293      	cmp	r3, r2
 80093fc:	d053      	beq.n	80094a6 <HAL_UART_IRQHandler+0x3e2>
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	4a8c      	ldr	r2, [pc, #560]	@ (8009638 <HAL_UART_IRQHandler+0x574>)
 8009408:	4293      	cmp	r3, r2
 800940a:	d04c      	beq.n	80094a6 <HAL_UART_IRQHandler+0x3e2>
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	4a89      	ldr	r2, [pc, #548]	@ (800963c <HAL_UART_IRQHandler+0x578>)
 8009416:	4293      	cmp	r3, r2
 8009418:	d045      	beq.n	80094a6 <HAL_UART_IRQHandler+0x3e2>
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	4a87      	ldr	r2, [pc, #540]	@ (8009640 <HAL_UART_IRQHandler+0x57c>)
 8009424:	4293      	cmp	r3, r2
 8009426:	d03e      	beq.n	80094a6 <HAL_UART_IRQHandler+0x3e2>
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	4a84      	ldr	r2, [pc, #528]	@ (8009644 <HAL_UART_IRQHandler+0x580>)
 8009432:	4293      	cmp	r3, r2
 8009434:	d037      	beq.n	80094a6 <HAL_UART_IRQHandler+0x3e2>
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	4a82      	ldr	r2, [pc, #520]	@ (8009648 <HAL_UART_IRQHandler+0x584>)
 8009440:	4293      	cmp	r3, r2
 8009442:	d030      	beq.n	80094a6 <HAL_UART_IRQHandler+0x3e2>
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	4a7f      	ldr	r2, [pc, #508]	@ (800964c <HAL_UART_IRQHandler+0x588>)
 800944e:	4293      	cmp	r3, r2
 8009450:	d029      	beq.n	80094a6 <HAL_UART_IRQHandler+0x3e2>
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	4a7d      	ldr	r2, [pc, #500]	@ (8009650 <HAL_UART_IRQHandler+0x58c>)
 800945c:	4293      	cmp	r3, r2
 800945e:	d022      	beq.n	80094a6 <HAL_UART_IRQHandler+0x3e2>
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	4a7a      	ldr	r2, [pc, #488]	@ (8009654 <HAL_UART_IRQHandler+0x590>)
 800946a:	4293      	cmp	r3, r2
 800946c:	d01b      	beq.n	80094a6 <HAL_UART_IRQHandler+0x3e2>
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	4a78      	ldr	r2, [pc, #480]	@ (8009658 <HAL_UART_IRQHandler+0x594>)
 8009478:	4293      	cmp	r3, r2
 800947a:	d014      	beq.n	80094a6 <HAL_UART_IRQHandler+0x3e2>
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	4a75      	ldr	r2, [pc, #468]	@ (800965c <HAL_UART_IRQHandler+0x598>)
 8009486:	4293      	cmp	r3, r2
 8009488:	d00d      	beq.n	80094a6 <HAL_UART_IRQHandler+0x3e2>
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	4a73      	ldr	r2, [pc, #460]	@ (8009660 <HAL_UART_IRQHandler+0x59c>)
 8009494:	4293      	cmp	r3, r2
 8009496:	d006      	beq.n	80094a6 <HAL_UART_IRQHandler+0x3e2>
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	4a70      	ldr	r2, [pc, #448]	@ (8009664 <HAL_UART_IRQHandler+0x5a0>)
 80094a2:	4293      	cmp	r3, r2
 80094a4:	d106      	bne.n	80094b4 <HAL_UART_IRQHandler+0x3f0>
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	685b      	ldr	r3, [r3, #4]
 80094b0:	b29b      	uxth	r3, r3
 80094b2:	e005      	b.n	80094c0 <HAL_UART_IRQHandler+0x3fc>
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	685b      	ldr	r3, [r3, #4]
 80094be:	b29b      	uxth	r3, r3
 80094c0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80094c4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	f000 81ab 	beq.w	8009824 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80094d4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80094d8:	429a      	cmp	r2, r3
 80094da:	f080 81a3 	bcs.w	8009824 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80094e4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80094ee:	69db      	ldr	r3, [r3, #28]
 80094f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80094f4:	f000 8087 	beq.w	8009606 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009500:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009504:	e853 3f00 	ldrex	r3, [r3]
 8009508:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800950c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009510:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009514:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	461a      	mov	r2, r3
 800951e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009522:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009526:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800952a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800952e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009532:	e841 2300 	strex	r3, r2, [r1]
 8009536:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800953a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800953e:	2b00      	cmp	r3, #0
 8009540:	d1da      	bne.n	80094f8 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	3308      	adds	r3, #8
 8009548:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800954a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800954c:	e853 3f00 	ldrex	r3, [r3]
 8009550:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009552:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009554:	f023 0301 	bic.w	r3, r3, #1
 8009558:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	3308      	adds	r3, #8
 8009562:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009566:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800956a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800956c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800956e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009572:	e841 2300 	strex	r3, r2, [r1]
 8009576:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009578:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800957a:	2b00      	cmp	r3, #0
 800957c:	d1e1      	bne.n	8009542 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	3308      	adds	r3, #8
 8009584:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009586:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009588:	e853 3f00 	ldrex	r3, [r3]
 800958c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800958e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009590:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009594:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	3308      	adds	r3, #8
 800959e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80095a2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80095a4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095a6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80095a8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80095aa:	e841 2300 	strex	r3, r2, [r1]
 80095ae:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80095b0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d1e3      	bne.n	800957e <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	2220      	movs	r2, #32
 80095ba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	2200      	movs	r2, #0
 80095c2:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80095cc:	e853 3f00 	ldrex	r3, [r3]
 80095d0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80095d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80095d4:	f023 0310 	bic.w	r3, r3, #16
 80095d8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	461a      	mov	r2, r3
 80095e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80095e6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80095e8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095ea:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80095ec:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80095ee:	e841 2300 	strex	r3, r2, [r1]
 80095f2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80095f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d1e4      	bne.n	80095c4 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009600:	4618      	mov	r0, r3
 8009602:	f7f9 ffd7 	bl	80035b4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	2202      	movs	r2, #2
 800960a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009618:	b29b      	uxth	r3, r3
 800961a:	1ad3      	subs	r3, r2, r3
 800961c:	b29b      	uxth	r3, r3
 800961e:	4619      	mov	r1, r3
 8009620:	6878      	ldr	r0, [r7, #4]
 8009622:	f000 f91d 	bl	8009860 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009626:	e0fd      	b.n	8009824 <HAL_UART_IRQHandler+0x760>
 8009628:	40020010 	.word	0x40020010
 800962c:	40020028 	.word	0x40020028
 8009630:	40020040 	.word	0x40020040
 8009634:	40020058 	.word	0x40020058
 8009638:	40020070 	.word	0x40020070
 800963c:	40020088 	.word	0x40020088
 8009640:	400200a0 	.word	0x400200a0
 8009644:	400200b8 	.word	0x400200b8
 8009648:	40020410 	.word	0x40020410
 800964c:	40020428 	.word	0x40020428
 8009650:	40020440 	.word	0x40020440
 8009654:	40020458 	.word	0x40020458
 8009658:	40020470 	.word	0x40020470
 800965c:	40020488 	.word	0x40020488
 8009660:	400204a0 	.word	0x400204a0
 8009664:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009674:	b29b      	uxth	r3, r3
 8009676:	1ad3      	subs	r3, r2, r3
 8009678:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009682:	b29b      	uxth	r3, r3
 8009684:	2b00      	cmp	r3, #0
 8009686:	f000 80cf 	beq.w	8009828 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800968a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800968e:	2b00      	cmp	r3, #0
 8009690:	f000 80ca 	beq.w	8009828 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800969a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800969c:	e853 3f00 	ldrex	r3, [r3]
 80096a0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80096a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80096a4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80096a8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	461a      	mov	r2, r3
 80096b2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80096b6:	647b      	str	r3, [r7, #68]	@ 0x44
 80096b8:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096ba:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80096bc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80096be:	e841 2300 	strex	r3, r2, [r1]
 80096c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80096c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d1e4      	bne.n	8009694 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	3308      	adds	r3, #8
 80096d0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096d4:	e853 3f00 	ldrex	r3, [r3]
 80096d8:	623b      	str	r3, [r7, #32]
   return(result);
 80096da:	6a3a      	ldr	r2, [r7, #32]
 80096dc:	4b55      	ldr	r3, [pc, #340]	@ (8009834 <HAL_UART_IRQHandler+0x770>)
 80096de:	4013      	ands	r3, r2
 80096e0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	3308      	adds	r3, #8
 80096ea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80096ee:	633a      	str	r2, [r7, #48]	@ 0x30
 80096f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096f2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80096f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80096f6:	e841 2300 	strex	r3, r2, [r1]
 80096fa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80096fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d1e3      	bne.n	80096ca <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	2220      	movs	r2, #32
 8009706:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	2200      	movs	r2, #0
 800970e:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	2200      	movs	r2, #0
 8009714:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800971c:	693b      	ldr	r3, [r7, #16]
 800971e:	e853 3f00 	ldrex	r3, [r3]
 8009722:	60fb      	str	r3, [r7, #12]
   return(result);
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	f023 0310 	bic.w	r3, r3, #16
 800972a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	461a      	mov	r2, r3
 8009734:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009738:	61fb      	str	r3, [r7, #28]
 800973a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800973c:	69b9      	ldr	r1, [r7, #24]
 800973e:	69fa      	ldr	r2, [r7, #28]
 8009740:	e841 2300 	strex	r3, r2, [r1]
 8009744:	617b      	str	r3, [r7, #20]
   return(result);
 8009746:	697b      	ldr	r3, [r7, #20]
 8009748:	2b00      	cmp	r3, #0
 800974a:	d1e4      	bne.n	8009716 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	2202      	movs	r2, #2
 8009750:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009752:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009756:	4619      	mov	r1, r3
 8009758:	6878      	ldr	r0, [r7, #4]
 800975a:	f000 f881 	bl	8009860 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800975e:	e063      	b.n	8009828 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009760:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009764:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009768:	2b00      	cmp	r3, #0
 800976a:	d00e      	beq.n	800978a <HAL_UART_IRQHandler+0x6c6>
 800976c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009770:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009774:	2b00      	cmp	r3, #0
 8009776:	d008      	beq.n	800978a <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8009780:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009782:	6878      	ldr	r0, [r7, #4]
 8009784:	f001 ff84 	bl	800b690 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009788:	e051      	b.n	800982e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800978a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800978e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009792:	2b00      	cmp	r3, #0
 8009794:	d014      	beq.n	80097c0 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009796:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800979a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d105      	bne.n	80097ae <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80097a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80097a6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d008      	beq.n	80097c0 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d03a      	beq.n	800982c <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80097ba:	6878      	ldr	r0, [r7, #4]
 80097bc:	4798      	blx	r3
    }
    return;
 80097be:	e035      	b.n	800982c <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80097c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80097c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d009      	beq.n	80097e0 <HAL_UART_IRQHandler+0x71c>
 80097cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80097d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d003      	beq.n	80097e0 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 80097d8:	6878      	ldr	r0, [r7, #4]
 80097da:	f001 fa11 	bl	800ac00 <UART_EndTransmit_IT>
    return;
 80097de:	e026      	b.n	800982e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80097e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80097e4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d009      	beq.n	8009800 <HAL_UART_IRQHandler+0x73c>
 80097ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80097f0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d003      	beq.n	8009800 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80097f8:	6878      	ldr	r0, [r7, #4]
 80097fa:	f001 ff5d 	bl	800b6b8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80097fe:	e016      	b.n	800982e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009800:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009804:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009808:	2b00      	cmp	r3, #0
 800980a:	d010      	beq.n	800982e <HAL_UART_IRQHandler+0x76a>
 800980c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009810:	2b00      	cmp	r3, #0
 8009812:	da0c      	bge.n	800982e <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009814:	6878      	ldr	r0, [r7, #4]
 8009816:	f001 ff45 	bl	800b6a4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800981a:	e008      	b.n	800982e <HAL_UART_IRQHandler+0x76a>
      return;
 800981c:	bf00      	nop
 800981e:	e006      	b.n	800982e <HAL_UART_IRQHandler+0x76a>
    return;
 8009820:	bf00      	nop
 8009822:	e004      	b.n	800982e <HAL_UART_IRQHandler+0x76a>
      return;
 8009824:	bf00      	nop
 8009826:	e002      	b.n	800982e <HAL_UART_IRQHandler+0x76a>
      return;
 8009828:	bf00      	nop
 800982a:	e000      	b.n	800982e <HAL_UART_IRQHandler+0x76a>
    return;
 800982c:	bf00      	nop
  }
}
 800982e:	37e8      	adds	r7, #232	@ 0xe8
 8009830:	46bd      	mov	sp, r7
 8009832:	bd80      	pop	{r7, pc}
 8009834:	effffffe 	.word	0xeffffffe

08009838 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009838:	b480      	push	{r7}
 800983a:	b083      	sub	sp, #12
 800983c:	af00      	add	r7, sp, #0
 800983e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009840:	bf00      	nop
 8009842:	370c      	adds	r7, #12
 8009844:	46bd      	mov	sp, r7
 8009846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984a:	4770      	bx	lr

0800984c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800984c:	b480      	push	{r7}
 800984e:	b083      	sub	sp, #12
 8009850:	af00      	add	r7, sp, #0
 8009852:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009854:	bf00      	nop
 8009856:	370c      	adds	r7, #12
 8009858:	46bd      	mov	sp, r7
 800985a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800985e:	4770      	bx	lr

08009860 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009860:	b480      	push	{r7}
 8009862:	b083      	sub	sp, #12
 8009864:	af00      	add	r7, sp, #0
 8009866:	6078      	str	r0, [r7, #4]
 8009868:	460b      	mov	r3, r1
 800986a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800986c:	bf00      	nop
 800986e:	370c      	adds	r7, #12
 8009870:	46bd      	mov	sp, r7
 8009872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009876:	4770      	bx	lr

08009878 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009878:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800987c:	b092      	sub	sp, #72	@ 0x48
 800987e:	af00      	add	r7, sp, #0
 8009880:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009882:	2300      	movs	r3, #0
 8009884:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009888:	697b      	ldr	r3, [r7, #20]
 800988a:	689a      	ldr	r2, [r3, #8]
 800988c:	697b      	ldr	r3, [r7, #20]
 800988e:	691b      	ldr	r3, [r3, #16]
 8009890:	431a      	orrs	r2, r3
 8009892:	697b      	ldr	r3, [r7, #20]
 8009894:	695b      	ldr	r3, [r3, #20]
 8009896:	431a      	orrs	r2, r3
 8009898:	697b      	ldr	r3, [r7, #20]
 800989a:	69db      	ldr	r3, [r3, #28]
 800989c:	4313      	orrs	r3, r2
 800989e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80098a0:	697b      	ldr	r3, [r7, #20]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	681a      	ldr	r2, [r3, #0]
 80098a6:	4bbe      	ldr	r3, [pc, #760]	@ (8009ba0 <UART_SetConfig+0x328>)
 80098a8:	4013      	ands	r3, r2
 80098aa:	697a      	ldr	r2, [r7, #20]
 80098ac:	6812      	ldr	r2, [r2, #0]
 80098ae:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80098b0:	430b      	orrs	r3, r1
 80098b2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80098b4:	697b      	ldr	r3, [r7, #20]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	685b      	ldr	r3, [r3, #4]
 80098ba:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80098be:	697b      	ldr	r3, [r7, #20]
 80098c0:	68da      	ldr	r2, [r3, #12]
 80098c2:	697b      	ldr	r3, [r7, #20]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	430a      	orrs	r2, r1
 80098c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80098ca:	697b      	ldr	r3, [r7, #20]
 80098cc:	699b      	ldr	r3, [r3, #24]
 80098ce:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80098d0:	697b      	ldr	r3, [r7, #20]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	4ab3      	ldr	r2, [pc, #716]	@ (8009ba4 <UART_SetConfig+0x32c>)
 80098d6:	4293      	cmp	r3, r2
 80098d8:	d004      	beq.n	80098e4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80098da:	697b      	ldr	r3, [r7, #20]
 80098dc:	6a1b      	ldr	r3, [r3, #32]
 80098de:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80098e0:	4313      	orrs	r3, r2
 80098e2:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80098e4:	697b      	ldr	r3, [r7, #20]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	689a      	ldr	r2, [r3, #8]
 80098ea:	4baf      	ldr	r3, [pc, #700]	@ (8009ba8 <UART_SetConfig+0x330>)
 80098ec:	4013      	ands	r3, r2
 80098ee:	697a      	ldr	r2, [r7, #20]
 80098f0:	6812      	ldr	r2, [r2, #0]
 80098f2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80098f4:	430b      	orrs	r3, r1
 80098f6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80098f8:	697b      	ldr	r3, [r7, #20]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098fe:	f023 010f 	bic.w	r1, r3, #15
 8009902:	697b      	ldr	r3, [r7, #20]
 8009904:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009906:	697b      	ldr	r3, [r7, #20]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	430a      	orrs	r2, r1
 800990c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800990e:	697b      	ldr	r3, [r7, #20]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	4aa6      	ldr	r2, [pc, #664]	@ (8009bac <UART_SetConfig+0x334>)
 8009914:	4293      	cmp	r3, r2
 8009916:	d177      	bne.n	8009a08 <UART_SetConfig+0x190>
 8009918:	4ba5      	ldr	r3, [pc, #660]	@ (8009bb0 <UART_SetConfig+0x338>)
 800991a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800991c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009920:	2b28      	cmp	r3, #40	@ 0x28
 8009922:	d86d      	bhi.n	8009a00 <UART_SetConfig+0x188>
 8009924:	a201      	add	r2, pc, #4	@ (adr r2, 800992c <UART_SetConfig+0xb4>)
 8009926:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800992a:	bf00      	nop
 800992c:	080099d1 	.word	0x080099d1
 8009930:	08009a01 	.word	0x08009a01
 8009934:	08009a01 	.word	0x08009a01
 8009938:	08009a01 	.word	0x08009a01
 800993c:	08009a01 	.word	0x08009a01
 8009940:	08009a01 	.word	0x08009a01
 8009944:	08009a01 	.word	0x08009a01
 8009948:	08009a01 	.word	0x08009a01
 800994c:	080099d9 	.word	0x080099d9
 8009950:	08009a01 	.word	0x08009a01
 8009954:	08009a01 	.word	0x08009a01
 8009958:	08009a01 	.word	0x08009a01
 800995c:	08009a01 	.word	0x08009a01
 8009960:	08009a01 	.word	0x08009a01
 8009964:	08009a01 	.word	0x08009a01
 8009968:	08009a01 	.word	0x08009a01
 800996c:	080099e1 	.word	0x080099e1
 8009970:	08009a01 	.word	0x08009a01
 8009974:	08009a01 	.word	0x08009a01
 8009978:	08009a01 	.word	0x08009a01
 800997c:	08009a01 	.word	0x08009a01
 8009980:	08009a01 	.word	0x08009a01
 8009984:	08009a01 	.word	0x08009a01
 8009988:	08009a01 	.word	0x08009a01
 800998c:	080099e9 	.word	0x080099e9
 8009990:	08009a01 	.word	0x08009a01
 8009994:	08009a01 	.word	0x08009a01
 8009998:	08009a01 	.word	0x08009a01
 800999c:	08009a01 	.word	0x08009a01
 80099a0:	08009a01 	.word	0x08009a01
 80099a4:	08009a01 	.word	0x08009a01
 80099a8:	08009a01 	.word	0x08009a01
 80099ac:	080099f1 	.word	0x080099f1
 80099b0:	08009a01 	.word	0x08009a01
 80099b4:	08009a01 	.word	0x08009a01
 80099b8:	08009a01 	.word	0x08009a01
 80099bc:	08009a01 	.word	0x08009a01
 80099c0:	08009a01 	.word	0x08009a01
 80099c4:	08009a01 	.word	0x08009a01
 80099c8:	08009a01 	.word	0x08009a01
 80099cc:	080099f9 	.word	0x080099f9
 80099d0:	2301      	movs	r3, #1
 80099d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099d6:	e326      	b.n	800a026 <UART_SetConfig+0x7ae>
 80099d8:	2304      	movs	r3, #4
 80099da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099de:	e322      	b.n	800a026 <UART_SetConfig+0x7ae>
 80099e0:	2308      	movs	r3, #8
 80099e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099e6:	e31e      	b.n	800a026 <UART_SetConfig+0x7ae>
 80099e8:	2310      	movs	r3, #16
 80099ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099ee:	e31a      	b.n	800a026 <UART_SetConfig+0x7ae>
 80099f0:	2320      	movs	r3, #32
 80099f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099f6:	e316      	b.n	800a026 <UART_SetConfig+0x7ae>
 80099f8:	2340      	movs	r3, #64	@ 0x40
 80099fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099fe:	e312      	b.n	800a026 <UART_SetConfig+0x7ae>
 8009a00:	2380      	movs	r3, #128	@ 0x80
 8009a02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a06:	e30e      	b.n	800a026 <UART_SetConfig+0x7ae>
 8009a08:	697b      	ldr	r3, [r7, #20]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	4a69      	ldr	r2, [pc, #420]	@ (8009bb4 <UART_SetConfig+0x33c>)
 8009a0e:	4293      	cmp	r3, r2
 8009a10:	d130      	bne.n	8009a74 <UART_SetConfig+0x1fc>
 8009a12:	4b67      	ldr	r3, [pc, #412]	@ (8009bb0 <UART_SetConfig+0x338>)
 8009a14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009a16:	f003 0307 	and.w	r3, r3, #7
 8009a1a:	2b05      	cmp	r3, #5
 8009a1c:	d826      	bhi.n	8009a6c <UART_SetConfig+0x1f4>
 8009a1e:	a201      	add	r2, pc, #4	@ (adr r2, 8009a24 <UART_SetConfig+0x1ac>)
 8009a20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a24:	08009a3d 	.word	0x08009a3d
 8009a28:	08009a45 	.word	0x08009a45
 8009a2c:	08009a4d 	.word	0x08009a4d
 8009a30:	08009a55 	.word	0x08009a55
 8009a34:	08009a5d 	.word	0x08009a5d
 8009a38:	08009a65 	.word	0x08009a65
 8009a3c:	2300      	movs	r3, #0
 8009a3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a42:	e2f0      	b.n	800a026 <UART_SetConfig+0x7ae>
 8009a44:	2304      	movs	r3, #4
 8009a46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a4a:	e2ec      	b.n	800a026 <UART_SetConfig+0x7ae>
 8009a4c:	2308      	movs	r3, #8
 8009a4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a52:	e2e8      	b.n	800a026 <UART_SetConfig+0x7ae>
 8009a54:	2310      	movs	r3, #16
 8009a56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a5a:	e2e4      	b.n	800a026 <UART_SetConfig+0x7ae>
 8009a5c:	2320      	movs	r3, #32
 8009a5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a62:	e2e0      	b.n	800a026 <UART_SetConfig+0x7ae>
 8009a64:	2340      	movs	r3, #64	@ 0x40
 8009a66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a6a:	e2dc      	b.n	800a026 <UART_SetConfig+0x7ae>
 8009a6c:	2380      	movs	r3, #128	@ 0x80
 8009a6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a72:	e2d8      	b.n	800a026 <UART_SetConfig+0x7ae>
 8009a74:	697b      	ldr	r3, [r7, #20]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	4a4f      	ldr	r2, [pc, #316]	@ (8009bb8 <UART_SetConfig+0x340>)
 8009a7a:	4293      	cmp	r3, r2
 8009a7c:	d130      	bne.n	8009ae0 <UART_SetConfig+0x268>
 8009a7e:	4b4c      	ldr	r3, [pc, #304]	@ (8009bb0 <UART_SetConfig+0x338>)
 8009a80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009a82:	f003 0307 	and.w	r3, r3, #7
 8009a86:	2b05      	cmp	r3, #5
 8009a88:	d826      	bhi.n	8009ad8 <UART_SetConfig+0x260>
 8009a8a:	a201      	add	r2, pc, #4	@ (adr r2, 8009a90 <UART_SetConfig+0x218>)
 8009a8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a90:	08009aa9 	.word	0x08009aa9
 8009a94:	08009ab1 	.word	0x08009ab1
 8009a98:	08009ab9 	.word	0x08009ab9
 8009a9c:	08009ac1 	.word	0x08009ac1
 8009aa0:	08009ac9 	.word	0x08009ac9
 8009aa4:	08009ad1 	.word	0x08009ad1
 8009aa8:	2300      	movs	r3, #0
 8009aaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009aae:	e2ba      	b.n	800a026 <UART_SetConfig+0x7ae>
 8009ab0:	2304      	movs	r3, #4
 8009ab2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ab6:	e2b6      	b.n	800a026 <UART_SetConfig+0x7ae>
 8009ab8:	2308      	movs	r3, #8
 8009aba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009abe:	e2b2      	b.n	800a026 <UART_SetConfig+0x7ae>
 8009ac0:	2310      	movs	r3, #16
 8009ac2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ac6:	e2ae      	b.n	800a026 <UART_SetConfig+0x7ae>
 8009ac8:	2320      	movs	r3, #32
 8009aca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ace:	e2aa      	b.n	800a026 <UART_SetConfig+0x7ae>
 8009ad0:	2340      	movs	r3, #64	@ 0x40
 8009ad2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ad6:	e2a6      	b.n	800a026 <UART_SetConfig+0x7ae>
 8009ad8:	2380      	movs	r3, #128	@ 0x80
 8009ada:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ade:	e2a2      	b.n	800a026 <UART_SetConfig+0x7ae>
 8009ae0:	697b      	ldr	r3, [r7, #20]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	4a35      	ldr	r2, [pc, #212]	@ (8009bbc <UART_SetConfig+0x344>)
 8009ae6:	4293      	cmp	r3, r2
 8009ae8:	d130      	bne.n	8009b4c <UART_SetConfig+0x2d4>
 8009aea:	4b31      	ldr	r3, [pc, #196]	@ (8009bb0 <UART_SetConfig+0x338>)
 8009aec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009aee:	f003 0307 	and.w	r3, r3, #7
 8009af2:	2b05      	cmp	r3, #5
 8009af4:	d826      	bhi.n	8009b44 <UART_SetConfig+0x2cc>
 8009af6:	a201      	add	r2, pc, #4	@ (adr r2, 8009afc <UART_SetConfig+0x284>)
 8009af8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009afc:	08009b15 	.word	0x08009b15
 8009b00:	08009b1d 	.word	0x08009b1d
 8009b04:	08009b25 	.word	0x08009b25
 8009b08:	08009b2d 	.word	0x08009b2d
 8009b0c:	08009b35 	.word	0x08009b35
 8009b10:	08009b3d 	.word	0x08009b3d
 8009b14:	2300      	movs	r3, #0
 8009b16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b1a:	e284      	b.n	800a026 <UART_SetConfig+0x7ae>
 8009b1c:	2304      	movs	r3, #4
 8009b1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b22:	e280      	b.n	800a026 <UART_SetConfig+0x7ae>
 8009b24:	2308      	movs	r3, #8
 8009b26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b2a:	e27c      	b.n	800a026 <UART_SetConfig+0x7ae>
 8009b2c:	2310      	movs	r3, #16
 8009b2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b32:	e278      	b.n	800a026 <UART_SetConfig+0x7ae>
 8009b34:	2320      	movs	r3, #32
 8009b36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b3a:	e274      	b.n	800a026 <UART_SetConfig+0x7ae>
 8009b3c:	2340      	movs	r3, #64	@ 0x40
 8009b3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b42:	e270      	b.n	800a026 <UART_SetConfig+0x7ae>
 8009b44:	2380      	movs	r3, #128	@ 0x80
 8009b46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b4a:	e26c      	b.n	800a026 <UART_SetConfig+0x7ae>
 8009b4c:	697b      	ldr	r3, [r7, #20]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	4a1b      	ldr	r2, [pc, #108]	@ (8009bc0 <UART_SetConfig+0x348>)
 8009b52:	4293      	cmp	r3, r2
 8009b54:	d142      	bne.n	8009bdc <UART_SetConfig+0x364>
 8009b56:	4b16      	ldr	r3, [pc, #88]	@ (8009bb0 <UART_SetConfig+0x338>)
 8009b58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009b5a:	f003 0307 	and.w	r3, r3, #7
 8009b5e:	2b05      	cmp	r3, #5
 8009b60:	d838      	bhi.n	8009bd4 <UART_SetConfig+0x35c>
 8009b62:	a201      	add	r2, pc, #4	@ (adr r2, 8009b68 <UART_SetConfig+0x2f0>)
 8009b64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b68:	08009b81 	.word	0x08009b81
 8009b6c:	08009b89 	.word	0x08009b89
 8009b70:	08009b91 	.word	0x08009b91
 8009b74:	08009b99 	.word	0x08009b99
 8009b78:	08009bc5 	.word	0x08009bc5
 8009b7c:	08009bcd 	.word	0x08009bcd
 8009b80:	2300      	movs	r3, #0
 8009b82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b86:	e24e      	b.n	800a026 <UART_SetConfig+0x7ae>
 8009b88:	2304      	movs	r3, #4
 8009b8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b8e:	e24a      	b.n	800a026 <UART_SetConfig+0x7ae>
 8009b90:	2308      	movs	r3, #8
 8009b92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b96:	e246      	b.n	800a026 <UART_SetConfig+0x7ae>
 8009b98:	2310      	movs	r3, #16
 8009b9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b9e:	e242      	b.n	800a026 <UART_SetConfig+0x7ae>
 8009ba0:	cfff69f3 	.word	0xcfff69f3
 8009ba4:	58000c00 	.word	0x58000c00
 8009ba8:	11fff4ff 	.word	0x11fff4ff
 8009bac:	40011000 	.word	0x40011000
 8009bb0:	58024400 	.word	0x58024400
 8009bb4:	40004400 	.word	0x40004400
 8009bb8:	40004800 	.word	0x40004800
 8009bbc:	40004c00 	.word	0x40004c00
 8009bc0:	40005000 	.word	0x40005000
 8009bc4:	2320      	movs	r3, #32
 8009bc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009bca:	e22c      	b.n	800a026 <UART_SetConfig+0x7ae>
 8009bcc:	2340      	movs	r3, #64	@ 0x40
 8009bce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009bd2:	e228      	b.n	800a026 <UART_SetConfig+0x7ae>
 8009bd4:	2380      	movs	r3, #128	@ 0x80
 8009bd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009bda:	e224      	b.n	800a026 <UART_SetConfig+0x7ae>
 8009bdc:	697b      	ldr	r3, [r7, #20]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	4ab1      	ldr	r2, [pc, #708]	@ (8009ea8 <UART_SetConfig+0x630>)
 8009be2:	4293      	cmp	r3, r2
 8009be4:	d176      	bne.n	8009cd4 <UART_SetConfig+0x45c>
 8009be6:	4bb1      	ldr	r3, [pc, #708]	@ (8009eac <UART_SetConfig+0x634>)
 8009be8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009bea:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009bee:	2b28      	cmp	r3, #40	@ 0x28
 8009bf0:	d86c      	bhi.n	8009ccc <UART_SetConfig+0x454>
 8009bf2:	a201      	add	r2, pc, #4	@ (adr r2, 8009bf8 <UART_SetConfig+0x380>)
 8009bf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bf8:	08009c9d 	.word	0x08009c9d
 8009bfc:	08009ccd 	.word	0x08009ccd
 8009c00:	08009ccd 	.word	0x08009ccd
 8009c04:	08009ccd 	.word	0x08009ccd
 8009c08:	08009ccd 	.word	0x08009ccd
 8009c0c:	08009ccd 	.word	0x08009ccd
 8009c10:	08009ccd 	.word	0x08009ccd
 8009c14:	08009ccd 	.word	0x08009ccd
 8009c18:	08009ca5 	.word	0x08009ca5
 8009c1c:	08009ccd 	.word	0x08009ccd
 8009c20:	08009ccd 	.word	0x08009ccd
 8009c24:	08009ccd 	.word	0x08009ccd
 8009c28:	08009ccd 	.word	0x08009ccd
 8009c2c:	08009ccd 	.word	0x08009ccd
 8009c30:	08009ccd 	.word	0x08009ccd
 8009c34:	08009ccd 	.word	0x08009ccd
 8009c38:	08009cad 	.word	0x08009cad
 8009c3c:	08009ccd 	.word	0x08009ccd
 8009c40:	08009ccd 	.word	0x08009ccd
 8009c44:	08009ccd 	.word	0x08009ccd
 8009c48:	08009ccd 	.word	0x08009ccd
 8009c4c:	08009ccd 	.word	0x08009ccd
 8009c50:	08009ccd 	.word	0x08009ccd
 8009c54:	08009ccd 	.word	0x08009ccd
 8009c58:	08009cb5 	.word	0x08009cb5
 8009c5c:	08009ccd 	.word	0x08009ccd
 8009c60:	08009ccd 	.word	0x08009ccd
 8009c64:	08009ccd 	.word	0x08009ccd
 8009c68:	08009ccd 	.word	0x08009ccd
 8009c6c:	08009ccd 	.word	0x08009ccd
 8009c70:	08009ccd 	.word	0x08009ccd
 8009c74:	08009ccd 	.word	0x08009ccd
 8009c78:	08009cbd 	.word	0x08009cbd
 8009c7c:	08009ccd 	.word	0x08009ccd
 8009c80:	08009ccd 	.word	0x08009ccd
 8009c84:	08009ccd 	.word	0x08009ccd
 8009c88:	08009ccd 	.word	0x08009ccd
 8009c8c:	08009ccd 	.word	0x08009ccd
 8009c90:	08009ccd 	.word	0x08009ccd
 8009c94:	08009ccd 	.word	0x08009ccd
 8009c98:	08009cc5 	.word	0x08009cc5
 8009c9c:	2301      	movs	r3, #1
 8009c9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ca2:	e1c0      	b.n	800a026 <UART_SetConfig+0x7ae>
 8009ca4:	2304      	movs	r3, #4
 8009ca6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009caa:	e1bc      	b.n	800a026 <UART_SetConfig+0x7ae>
 8009cac:	2308      	movs	r3, #8
 8009cae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009cb2:	e1b8      	b.n	800a026 <UART_SetConfig+0x7ae>
 8009cb4:	2310      	movs	r3, #16
 8009cb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009cba:	e1b4      	b.n	800a026 <UART_SetConfig+0x7ae>
 8009cbc:	2320      	movs	r3, #32
 8009cbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009cc2:	e1b0      	b.n	800a026 <UART_SetConfig+0x7ae>
 8009cc4:	2340      	movs	r3, #64	@ 0x40
 8009cc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009cca:	e1ac      	b.n	800a026 <UART_SetConfig+0x7ae>
 8009ccc:	2380      	movs	r3, #128	@ 0x80
 8009cce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009cd2:	e1a8      	b.n	800a026 <UART_SetConfig+0x7ae>
 8009cd4:	697b      	ldr	r3, [r7, #20]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	4a75      	ldr	r2, [pc, #468]	@ (8009eb0 <UART_SetConfig+0x638>)
 8009cda:	4293      	cmp	r3, r2
 8009cdc:	d130      	bne.n	8009d40 <UART_SetConfig+0x4c8>
 8009cde:	4b73      	ldr	r3, [pc, #460]	@ (8009eac <UART_SetConfig+0x634>)
 8009ce0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009ce2:	f003 0307 	and.w	r3, r3, #7
 8009ce6:	2b05      	cmp	r3, #5
 8009ce8:	d826      	bhi.n	8009d38 <UART_SetConfig+0x4c0>
 8009cea:	a201      	add	r2, pc, #4	@ (adr r2, 8009cf0 <UART_SetConfig+0x478>)
 8009cec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cf0:	08009d09 	.word	0x08009d09
 8009cf4:	08009d11 	.word	0x08009d11
 8009cf8:	08009d19 	.word	0x08009d19
 8009cfc:	08009d21 	.word	0x08009d21
 8009d00:	08009d29 	.word	0x08009d29
 8009d04:	08009d31 	.word	0x08009d31
 8009d08:	2300      	movs	r3, #0
 8009d0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d0e:	e18a      	b.n	800a026 <UART_SetConfig+0x7ae>
 8009d10:	2304      	movs	r3, #4
 8009d12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d16:	e186      	b.n	800a026 <UART_SetConfig+0x7ae>
 8009d18:	2308      	movs	r3, #8
 8009d1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d1e:	e182      	b.n	800a026 <UART_SetConfig+0x7ae>
 8009d20:	2310      	movs	r3, #16
 8009d22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d26:	e17e      	b.n	800a026 <UART_SetConfig+0x7ae>
 8009d28:	2320      	movs	r3, #32
 8009d2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d2e:	e17a      	b.n	800a026 <UART_SetConfig+0x7ae>
 8009d30:	2340      	movs	r3, #64	@ 0x40
 8009d32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d36:	e176      	b.n	800a026 <UART_SetConfig+0x7ae>
 8009d38:	2380      	movs	r3, #128	@ 0x80
 8009d3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d3e:	e172      	b.n	800a026 <UART_SetConfig+0x7ae>
 8009d40:	697b      	ldr	r3, [r7, #20]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	4a5b      	ldr	r2, [pc, #364]	@ (8009eb4 <UART_SetConfig+0x63c>)
 8009d46:	4293      	cmp	r3, r2
 8009d48:	d130      	bne.n	8009dac <UART_SetConfig+0x534>
 8009d4a:	4b58      	ldr	r3, [pc, #352]	@ (8009eac <UART_SetConfig+0x634>)
 8009d4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009d4e:	f003 0307 	and.w	r3, r3, #7
 8009d52:	2b05      	cmp	r3, #5
 8009d54:	d826      	bhi.n	8009da4 <UART_SetConfig+0x52c>
 8009d56:	a201      	add	r2, pc, #4	@ (adr r2, 8009d5c <UART_SetConfig+0x4e4>)
 8009d58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d5c:	08009d75 	.word	0x08009d75
 8009d60:	08009d7d 	.word	0x08009d7d
 8009d64:	08009d85 	.word	0x08009d85
 8009d68:	08009d8d 	.word	0x08009d8d
 8009d6c:	08009d95 	.word	0x08009d95
 8009d70:	08009d9d 	.word	0x08009d9d
 8009d74:	2300      	movs	r3, #0
 8009d76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d7a:	e154      	b.n	800a026 <UART_SetConfig+0x7ae>
 8009d7c:	2304      	movs	r3, #4
 8009d7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d82:	e150      	b.n	800a026 <UART_SetConfig+0x7ae>
 8009d84:	2308      	movs	r3, #8
 8009d86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d8a:	e14c      	b.n	800a026 <UART_SetConfig+0x7ae>
 8009d8c:	2310      	movs	r3, #16
 8009d8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d92:	e148      	b.n	800a026 <UART_SetConfig+0x7ae>
 8009d94:	2320      	movs	r3, #32
 8009d96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d9a:	e144      	b.n	800a026 <UART_SetConfig+0x7ae>
 8009d9c:	2340      	movs	r3, #64	@ 0x40
 8009d9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009da2:	e140      	b.n	800a026 <UART_SetConfig+0x7ae>
 8009da4:	2380      	movs	r3, #128	@ 0x80
 8009da6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009daa:	e13c      	b.n	800a026 <UART_SetConfig+0x7ae>
 8009dac:	697b      	ldr	r3, [r7, #20]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	4a41      	ldr	r2, [pc, #260]	@ (8009eb8 <UART_SetConfig+0x640>)
 8009db2:	4293      	cmp	r3, r2
 8009db4:	f040 8082 	bne.w	8009ebc <UART_SetConfig+0x644>
 8009db8:	4b3c      	ldr	r3, [pc, #240]	@ (8009eac <UART_SetConfig+0x634>)
 8009dba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009dbc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009dc0:	2b28      	cmp	r3, #40	@ 0x28
 8009dc2:	d86d      	bhi.n	8009ea0 <UART_SetConfig+0x628>
 8009dc4:	a201      	add	r2, pc, #4	@ (adr r2, 8009dcc <UART_SetConfig+0x554>)
 8009dc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dca:	bf00      	nop
 8009dcc:	08009e71 	.word	0x08009e71
 8009dd0:	08009ea1 	.word	0x08009ea1
 8009dd4:	08009ea1 	.word	0x08009ea1
 8009dd8:	08009ea1 	.word	0x08009ea1
 8009ddc:	08009ea1 	.word	0x08009ea1
 8009de0:	08009ea1 	.word	0x08009ea1
 8009de4:	08009ea1 	.word	0x08009ea1
 8009de8:	08009ea1 	.word	0x08009ea1
 8009dec:	08009e79 	.word	0x08009e79
 8009df0:	08009ea1 	.word	0x08009ea1
 8009df4:	08009ea1 	.word	0x08009ea1
 8009df8:	08009ea1 	.word	0x08009ea1
 8009dfc:	08009ea1 	.word	0x08009ea1
 8009e00:	08009ea1 	.word	0x08009ea1
 8009e04:	08009ea1 	.word	0x08009ea1
 8009e08:	08009ea1 	.word	0x08009ea1
 8009e0c:	08009e81 	.word	0x08009e81
 8009e10:	08009ea1 	.word	0x08009ea1
 8009e14:	08009ea1 	.word	0x08009ea1
 8009e18:	08009ea1 	.word	0x08009ea1
 8009e1c:	08009ea1 	.word	0x08009ea1
 8009e20:	08009ea1 	.word	0x08009ea1
 8009e24:	08009ea1 	.word	0x08009ea1
 8009e28:	08009ea1 	.word	0x08009ea1
 8009e2c:	08009e89 	.word	0x08009e89
 8009e30:	08009ea1 	.word	0x08009ea1
 8009e34:	08009ea1 	.word	0x08009ea1
 8009e38:	08009ea1 	.word	0x08009ea1
 8009e3c:	08009ea1 	.word	0x08009ea1
 8009e40:	08009ea1 	.word	0x08009ea1
 8009e44:	08009ea1 	.word	0x08009ea1
 8009e48:	08009ea1 	.word	0x08009ea1
 8009e4c:	08009e91 	.word	0x08009e91
 8009e50:	08009ea1 	.word	0x08009ea1
 8009e54:	08009ea1 	.word	0x08009ea1
 8009e58:	08009ea1 	.word	0x08009ea1
 8009e5c:	08009ea1 	.word	0x08009ea1
 8009e60:	08009ea1 	.word	0x08009ea1
 8009e64:	08009ea1 	.word	0x08009ea1
 8009e68:	08009ea1 	.word	0x08009ea1
 8009e6c:	08009e99 	.word	0x08009e99
 8009e70:	2301      	movs	r3, #1
 8009e72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e76:	e0d6      	b.n	800a026 <UART_SetConfig+0x7ae>
 8009e78:	2304      	movs	r3, #4
 8009e7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e7e:	e0d2      	b.n	800a026 <UART_SetConfig+0x7ae>
 8009e80:	2308      	movs	r3, #8
 8009e82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e86:	e0ce      	b.n	800a026 <UART_SetConfig+0x7ae>
 8009e88:	2310      	movs	r3, #16
 8009e8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e8e:	e0ca      	b.n	800a026 <UART_SetConfig+0x7ae>
 8009e90:	2320      	movs	r3, #32
 8009e92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e96:	e0c6      	b.n	800a026 <UART_SetConfig+0x7ae>
 8009e98:	2340      	movs	r3, #64	@ 0x40
 8009e9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e9e:	e0c2      	b.n	800a026 <UART_SetConfig+0x7ae>
 8009ea0:	2380      	movs	r3, #128	@ 0x80
 8009ea2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ea6:	e0be      	b.n	800a026 <UART_SetConfig+0x7ae>
 8009ea8:	40011400 	.word	0x40011400
 8009eac:	58024400 	.word	0x58024400
 8009eb0:	40007800 	.word	0x40007800
 8009eb4:	40007c00 	.word	0x40007c00
 8009eb8:	40011800 	.word	0x40011800
 8009ebc:	697b      	ldr	r3, [r7, #20]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	4aad      	ldr	r2, [pc, #692]	@ (800a178 <UART_SetConfig+0x900>)
 8009ec2:	4293      	cmp	r3, r2
 8009ec4:	d176      	bne.n	8009fb4 <UART_SetConfig+0x73c>
 8009ec6:	4bad      	ldr	r3, [pc, #692]	@ (800a17c <UART_SetConfig+0x904>)
 8009ec8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009eca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009ece:	2b28      	cmp	r3, #40	@ 0x28
 8009ed0:	d86c      	bhi.n	8009fac <UART_SetConfig+0x734>
 8009ed2:	a201      	add	r2, pc, #4	@ (adr r2, 8009ed8 <UART_SetConfig+0x660>)
 8009ed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ed8:	08009f7d 	.word	0x08009f7d
 8009edc:	08009fad 	.word	0x08009fad
 8009ee0:	08009fad 	.word	0x08009fad
 8009ee4:	08009fad 	.word	0x08009fad
 8009ee8:	08009fad 	.word	0x08009fad
 8009eec:	08009fad 	.word	0x08009fad
 8009ef0:	08009fad 	.word	0x08009fad
 8009ef4:	08009fad 	.word	0x08009fad
 8009ef8:	08009f85 	.word	0x08009f85
 8009efc:	08009fad 	.word	0x08009fad
 8009f00:	08009fad 	.word	0x08009fad
 8009f04:	08009fad 	.word	0x08009fad
 8009f08:	08009fad 	.word	0x08009fad
 8009f0c:	08009fad 	.word	0x08009fad
 8009f10:	08009fad 	.word	0x08009fad
 8009f14:	08009fad 	.word	0x08009fad
 8009f18:	08009f8d 	.word	0x08009f8d
 8009f1c:	08009fad 	.word	0x08009fad
 8009f20:	08009fad 	.word	0x08009fad
 8009f24:	08009fad 	.word	0x08009fad
 8009f28:	08009fad 	.word	0x08009fad
 8009f2c:	08009fad 	.word	0x08009fad
 8009f30:	08009fad 	.word	0x08009fad
 8009f34:	08009fad 	.word	0x08009fad
 8009f38:	08009f95 	.word	0x08009f95
 8009f3c:	08009fad 	.word	0x08009fad
 8009f40:	08009fad 	.word	0x08009fad
 8009f44:	08009fad 	.word	0x08009fad
 8009f48:	08009fad 	.word	0x08009fad
 8009f4c:	08009fad 	.word	0x08009fad
 8009f50:	08009fad 	.word	0x08009fad
 8009f54:	08009fad 	.word	0x08009fad
 8009f58:	08009f9d 	.word	0x08009f9d
 8009f5c:	08009fad 	.word	0x08009fad
 8009f60:	08009fad 	.word	0x08009fad
 8009f64:	08009fad 	.word	0x08009fad
 8009f68:	08009fad 	.word	0x08009fad
 8009f6c:	08009fad 	.word	0x08009fad
 8009f70:	08009fad 	.word	0x08009fad
 8009f74:	08009fad 	.word	0x08009fad
 8009f78:	08009fa5 	.word	0x08009fa5
 8009f7c:	2301      	movs	r3, #1
 8009f7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f82:	e050      	b.n	800a026 <UART_SetConfig+0x7ae>
 8009f84:	2304      	movs	r3, #4
 8009f86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f8a:	e04c      	b.n	800a026 <UART_SetConfig+0x7ae>
 8009f8c:	2308      	movs	r3, #8
 8009f8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f92:	e048      	b.n	800a026 <UART_SetConfig+0x7ae>
 8009f94:	2310      	movs	r3, #16
 8009f96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f9a:	e044      	b.n	800a026 <UART_SetConfig+0x7ae>
 8009f9c:	2320      	movs	r3, #32
 8009f9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009fa2:	e040      	b.n	800a026 <UART_SetConfig+0x7ae>
 8009fa4:	2340      	movs	r3, #64	@ 0x40
 8009fa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009faa:	e03c      	b.n	800a026 <UART_SetConfig+0x7ae>
 8009fac:	2380      	movs	r3, #128	@ 0x80
 8009fae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009fb2:	e038      	b.n	800a026 <UART_SetConfig+0x7ae>
 8009fb4:	697b      	ldr	r3, [r7, #20]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	4a71      	ldr	r2, [pc, #452]	@ (800a180 <UART_SetConfig+0x908>)
 8009fba:	4293      	cmp	r3, r2
 8009fbc:	d130      	bne.n	800a020 <UART_SetConfig+0x7a8>
 8009fbe:	4b6f      	ldr	r3, [pc, #444]	@ (800a17c <UART_SetConfig+0x904>)
 8009fc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009fc2:	f003 0307 	and.w	r3, r3, #7
 8009fc6:	2b05      	cmp	r3, #5
 8009fc8:	d826      	bhi.n	800a018 <UART_SetConfig+0x7a0>
 8009fca:	a201      	add	r2, pc, #4	@ (adr r2, 8009fd0 <UART_SetConfig+0x758>)
 8009fcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fd0:	08009fe9 	.word	0x08009fe9
 8009fd4:	08009ff1 	.word	0x08009ff1
 8009fd8:	08009ff9 	.word	0x08009ff9
 8009fdc:	0800a001 	.word	0x0800a001
 8009fe0:	0800a009 	.word	0x0800a009
 8009fe4:	0800a011 	.word	0x0800a011
 8009fe8:	2302      	movs	r3, #2
 8009fea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009fee:	e01a      	b.n	800a026 <UART_SetConfig+0x7ae>
 8009ff0:	2304      	movs	r3, #4
 8009ff2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ff6:	e016      	b.n	800a026 <UART_SetConfig+0x7ae>
 8009ff8:	2308      	movs	r3, #8
 8009ffa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ffe:	e012      	b.n	800a026 <UART_SetConfig+0x7ae>
 800a000:	2310      	movs	r3, #16
 800a002:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a006:	e00e      	b.n	800a026 <UART_SetConfig+0x7ae>
 800a008:	2320      	movs	r3, #32
 800a00a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a00e:	e00a      	b.n	800a026 <UART_SetConfig+0x7ae>
 800a010:	2340      	movs	r3, #64	@ 0x40
 800a012:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a016:	e006      	b.n	800a026 <UART_SetConfig+0x7ae>
 800a018:	2380      	movs	r3, #128	@ 0x80
 800a01a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a01e:	e002      	b.n	800a026 <UART_SetConfig+0x7ae>
 800a020:	2380      	movs	r3, #128	@ 0x80
 800a022:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a026:	697b      	ldr	r3, [r7, #20]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	4a55      	ldr	r2, [pc, #340]	@ (800a180 <UART_SetConfig+0x908>)
 800a02c:	4293      	cmp	r3, r2
 800a02e:	f040 80f8 	bne.w	800a222 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a032:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a036:	2b20      	cmp	r3, #32
 800a038:	dc46      	bgt.n	800a0c8 <UART_SetConfig+0x850>
 800a03a:	2b02      	cmp	r3, #2
 800a03c:	db75      	blt.n	800a12a <UART_SetConfig+0x8b2>
 800a03e:	3b02      	subs	r3, #2
 800a040:	2b1e      	cmp	r3, #30
 800a042:	d872      	bhi.n	800a12a <UART_SetConfig+0x8b2>
 800a044:	a201      	add	r2, pc, #4	@ (adr r2, 800a04c <UART_SetConfig+0x7d4>)
 800a046:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a04a:	bf00      	nop
 800a04c:	0800a0cf 	.word	0x0800a0cf
 800a050:	0800a12b 	.word	0x0800a12b
 800a054:	0800a0d7 	.word	0x0800a0d7
 800a058:	0800a12b 	.word	0x0800a12b
 800a05c:	0800a12b 	.word	0x0800a12b
 800a060:	0800a12b 	.word	0x0800a12b
 800a064:	0800a0e7 	.word	0x0800a0e7
 800a068:	0800a12b 	.word	0x0800a12b
 800a06c:	0800a12b 	.word	0x0800a12b
 800a070:	0800a12b 	.word	0x0800a12b
 800a074:	0800a12b 	.word	0x0800a12b
 800a078:	0800a12b 	.word	0x0800a12b
 800a07c:	0800a12b 	.word	0x0800a12b
 800a080:	0800a12b 	.word	0x0800a12b
 800a084:	0800a0f7 	.word	0x0800a0f7
 800a088:	0800a12b 	.word	0x0800a12b
 800a08c:	0800a12b 	.word	0x0800a12b
 800a090:	0800a12b 	.word	0x0800a12b
 800a094:	0800a12b 	.word	0x0800a12b
 800a098:	0800a12b 	.word	0x0800a12b
 800a09c:	0800a12b 	.word	0x0800a12b
 800a0a0:	0800a12b 	.word	0x0800a12b
 800a0a4:	0800a12b 	.word	0x0800a12b
 800a0a8:	0800a12b 	.word	0x0800a12b
 800a0ac:	0800a12b 	.word	0x0800a12b
 800a0b0:	0800a12b 	.word	0x0800a12b
 800a0b4:	0800a12b 	.word	0x0800a12b
 800a0b8:	0800a12b 	.word	0x0800a12b
 800a0bc:	0800a12b 	.word	0x0800a12b
 800a0c0:	0800a12b 	.word	0x0800a12b
 800a0c4:	0800a11d 	.word	0x0800a11d
 800a0c8:	2b40      	cmp	r3, #64	@ 0x40
 800a0ca:	d02a      	beq.n	800a122 <UART_SetConfig+0x8aa>
 800a0cc:	e02d      	b.n	800a12a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a0ce:	f7fd fca7 	bl	8007a20 <HAL_RCCEx_GetD3PCLK1Freq>
 800a0d2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a0d4:	e02f      	b.n	800a136 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a0d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a0da:	4618      	mov	r0, r3
 800a0dc:	f7fd fcb6 	bl	8007a4c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a0e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a0e4:	e027      	b.n	800a136 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a0e6:	f107 0318 	add.w	r3, r7, #24
 800a0ea:	4618      	mov	r0, r3
 800a0ec:	f7fd fe02 	bl	8007cf4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a0f0:	69fb      	ldr	r3, [r7, #28]
 800a0f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a0f4:	e01f      	b.n	800a136 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a0f6:	4b21      	ldr	r3, [pc, #132]	@ (800a17c <UART_SetConfig+0x904>)
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	f003 0320 	and.w	r3, r3, #32
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d009      	beq.n	800a116 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a102:	4b1e      	ldr	r3, [pc, #120]	@ (800a17c <UART_SetConfig+0x904>)
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	08db      	lsrs	r3, r3, #3
 800a108:	f003 0303 	and.w	r3, r3, #3
 800a10c:	4a1d      	ldr	r2, [pc, #116]	@ (800a184 <UART_SetConfig+0x90c>)
 800a10e:	fa22 f303 	lsr.w	r3, r2, r3
 800a112:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a114:	e00f      	b.n	800a136 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800a116:	4b1b      	ldr	r3, [pc, #108]	@ (800a184 <UART_SetConfig+0x90c>)
 800a118:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a11a:	e00c      	b.n	800a136 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a11c:	4b1a      	ldr	r3, [pc, #104]	@ (800a188 <UART_SetConfig+0x910>)
 800a11e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a120:	e009      	b.n	800a136 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a122:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a126:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a128:	e005      	b.n	800a136 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800a12a:	2300      	movs	r3, #0
 800a12c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a12e:	2301      	movs	r3, #1
 800a130:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a134:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a136:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a138:	2b00      	cmp	r3, #0
 800a13a:	f000 81ee 	beq.w	800a51a <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a13e:	697b      	ldr	r3, [r7, #20]
 800a140:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a142:	4a12      	ldr	r2, [pc, #72]	@ (800a18c <UART_SetConfig+0x914>)
 800a144:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a148:	461a      	mov	r2, r3
 800a14a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a14c:	fbb3 f3f2 	udiv	r3, r3, r2
 800a150:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a152:	697b      	ldr	r3, [r7, #20]
 800a154:	685a      	ldr	r2, [r3, #4]
 800a156:	4613      	mov	r3, r2
 800a158:	005b      	lsls	r3, r3, #1
 800a15a:	4413      	add	r3, r2
 800a15c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a15e:	429a      	cmp	r2, r3
 800a160:	d305      	bcc.n	800a16e <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a162:	697b      	ldr	r3, [r7, #20]
 800a164:	685b      	ldr	r3, [r3, #4]
 800a166:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a168:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a16a:	429a      	cmp	r2, r3
 800a16c:	d910      	bls.n	800a190 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800a16e:	2301      	movs	r3, #1
 800a170:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a174:	e1d1      	b.n	800a51a <UART_SetConfig+0xca2>
 800a176:	bf00      	nop
 800a178:	40011c00 	.word	0x40011c00
 800a17c:	58024400 	.word	0x58024400
 800a180:	58000c00 	.word	0x58000c00
 800a184:	03d09000 	.word	0x03d09000
 800a188:	003d0900 	.word	0x003d0900
 800a18c:	08012d6c 	.word	0x08012d6c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a190:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a192:	2200      	movs	r2, #0
 800a194:	60bb      	str	r3, [r7, #8]
 800a196:	60fa      	str	r2, [r7, #12]
 800a198:	697b      	ldr	r3, [r7, #20]
 800a19a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a19c:	4ac0      	ldr	r2, [pc, #768]	@ (800a4a0 <UART_SetConfig+0xc28>)
 800a19e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a1a2:	b29b      	uxth	r3, r3
 800a1a4:	2200      	movs	r2, #0
 800a1a6:	603b      	str	r3, [r7, #0]
 800a1a8:	607a      	str	r2, [r7, #4]
 800a1aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a1ae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a1b2:	f7f6 fac1 	bl	8000738 <__aeabi_uldivmod>
 800a1b6:	4602      	mov	r2, r0
 800a1b8:	460b      	mov	r3, r1
 800a1ba:	4610      	mov	r0, r2
 800a1bc:	4619      	mov	r1, r3
 800a1be:	f04f 0200 	mov.w	r2, #0
 800a1c2:	f04f 0300 	mov.w	r3, #0
 800a1c6:	020b      	lsls	r3, r1, #8
 800a1c8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a1cc:	0202      	lsls	r2, r0, #8
 800a1ce:	6979      	ldr	r1, [r7, #20]
 800a1d0:	6849      	ldr	r1, [r1, #4]
 800a1d2:	0849      	lsrs	r1, r1, #1
 800a1d4:	2000      	movs	r0, #0
 800a1d6:	460c      	mov	r4, r1
 800a1d8:	4605      	mov	r5, r0
 800a1da:	eb12 0804 	adds.w	r8, r2, r4
 800a1de:	eb43 0905 	adc.w	r9, r3, r5
 800a1e2:	697b      	ldr	r3, [r7, #20]
 800a1e4:	685b      	ldr	r3, [r3, #4]
 800a1e6:	2200      	movs	r2, #0
 800a1e8:	469a      	mov	sl, r3
 800a1ea:	4693      	mov	fp, r2
 800a1ec:	4652      	mov	r2, sl
 800a1ee:	465b      	mov	r3, fp
 800a1f0:	4640      	mov	r0, r8
 800a1f2:	4649      	mov	r1, r9
 800a1f4:	f7f6 faa0 	bl	8000738 <__aeabi_uldivmod>
 800a1f8:	4602      	mov	r2, r0
 800a1fa:	460b      	mov	r3, r1
 800a1fc:	4613      	mov	r3, r2
 800a1fe:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a200:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a202:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a206:	d308      	bcc.n	800a21a <UART_SetConfig+0x9a2>
 800a208:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a20a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a20e:	d204      	bcs.n	800a21a <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800a210:	697b      	ldr	r3, [r7, #20]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a216:	60da      	str	r2, [r3, #12]
 800a218:	e17f      	b.n	800a51a <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800a21a:	2301      	movs	r3, #1
 800a21c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a220:	e17b      	b.n	800a51a <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a222:	697b      	ldr	r3, [r7, #20]
 800a224:	69db      	ldr	r3, [r3, #28]
 800a226:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a22a:	f040 80bd 	bne.w	800a3a8 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800a22e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a232:	2b20      	cmp	r3, #32
 800a234:	dc48      	bgt.n	800a2c8 <UART_SetConfig+0xa50>
 800a236:	2b00      	cmp	r3, #0
 800a238:	db7b      	blt.n	800a332 <UART_SetConfig+0xaba>
 800a23a:	2b20      	cmp	r3, #32
 800a23c:	d879      	bhi.n	800a332 <UART_SetConfig+0xaba>
 800a23e:	a201      	add	r2, pc, #4	@ (adr r2, 800a244 <UART_SetConfig+0x9cc>)
 800a240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a244:	0800a2cf 	.word	0x0800a2cf
 800a248:	0800a2d7 	.word	0x0800a2d7
 800a24c:	0800a333 	.word	0x0800a333
 800a250:	0800a333 	.word	0x0800a333
 800a254:	0800a2df 	.word	0x0800a2df
 800a258:	0800a333 	.word	0x0800a333
 800a25c:	0800a333 	.word	0x0800a333
 800a260:	0800a333 	.word	0x0800a333
 800a264:	0800a2ef 	.word	0x0800a2ef
 800a268:	0800a333 	.word	0x0800a333
 800a26c:	0800a333 	.word	0x0800a333
 800a270:	0800a333 	.word	0x0800a333
 800a274:	0800a333 	.word	0x0800a333
 800a278:	0800a333 	.word	0x0800a333
 800a27c:	0800a333 	.word	0x0800a333
 800a280:	0800a333 	.word	0x0800a333
 800a284:	0800a2ff 	.word	0x0800a2ff
 800a288:	0800a333 	.word	0x0800a333
 800a28c:	0800a333 	.word	0x0800a333
 800a290:	0800a333 	.word	0x0800a333
 800a294:	0800a333 	.word	0x0800a333
 800a298:	0800a333 	.word	0x0800a333
 800a29c:	0800a333 	.word	0x0800a333
 800a2a0:	0800a333 	.word	0x0800a333
 800a2a4:	0800a333 	.word	0x0800a333
 800a2a8:	0800a333 	.word	0x0800a333
 800a2ac:	0800a333 	.word	0x0800a333
 800a2b0:	0800a333 	.word	0x0800a333
 800a2b4:	0800a333 	.word	0x0800a333
 800a2b8:	0800a333 	.word	0x0800a333
 800a2bc:	0800a333 	.word	0x0800a333
 800a2c0:	0800a333 	.word	0x0800a333
 800a2c4:	0800a325 	.word	0x0800a325
 800a2c8:	2b40      	cmp	r3, #64	@ 0x40
 800a2ca:	d02e      	beq.n	800a32a <UART_SetConfig+0xab2>
 800a2cc:	e031      	b.n	800a332 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a2ce:	f7fc f9db 	bl	8006688 <HAL_RCC_GetPCLK1Freq>
 800a2d2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a2d4:	e033      	b.n	800a33e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a2d6:	f7fc f9ed 	bl	80066b4 <HAL_RCC_GetPCLK2Freq>
 800a2da:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a2dc:	e02f      	b.n	800a33e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a2de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a2e2:	4618      	mov	r0, r3
 800a2e4:	f7fd fbb2 	bl	8007a4c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a2e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a2ec:	e027      	b.n	800a33e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a2ee:	f107 0318 	add.w	r3, r7, #24
 800a2f2:	4618      	mov	r0, r3
 800a2f4:	f7fd fcfe 	bl	8007cf4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a2f8:	69fb      	ldr	r3, [r7, #28]
 800a2fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a2fc:	e01f      	b.n	800a33e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a2fe:	4b69      	ldr	r3, [pc, #420]	@ (800a4a4 <UART_SetConfig+0xc2c>)
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	f003 0320 	and.w	r3, r3, #32
 800a306:	2b00      	cmp	r3, #0
 800a308:	d009      	beq.n	800a31e <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a30a:	4b66      	ldr	r3, [pc, #408]	@ (800a4a4 <UART_SetConfig+0xc2c>)
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	08db      	lsrs	r3, r3, #3
 800a310:	f003 0303 	and.w	r3, r3, #3
 800a314:	4a64      	ldr	r2, [pc, #400]	@ (800a4a8 <UART_SetConfig+0xc30>)
 800a316:	fa22 f303 	lsr.w	r3, r2, r3
 800a31a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a31c:	e00f      	b.n	800a33e <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800a31e:	4b62      	ldr	r3, [pc, #392]	@ (800a4a8 <UART_SetConfig+0xc30>)
 800a320:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a322:	e00c      	b.n	800a33e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a324:	4b61      	ldr	r3, [pc, #388]	@ (800a4ac <UART_SetConfig+0xc34>)
 800a326:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a328:	e009      	b.n	800a33e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a32a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a32e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a330:	e005      	b.n	800a33e <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800a332:	2300      	movs	r3, #0
 800a334:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a336:	2301      	movs	r3, #1
 800a338:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a33c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a33e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a340:	2b00      	cmp	r3, #0
 800a342:	f000 80ea 	beq.w	800a51a <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a346:	697b      	ldr	r3, [r7, #20]
 800a348:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a34a:	4a55      	ldr	r2, [pc, #340]	@ (800a4a0 <UART_SetConfig+0xc28>)
 800a34c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a350:	461a      	mov	r2, r3
 800a352:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a354:	fbb3 f3f2 	udiv	r3, r3, r2
 800a358:	005a      	lsls	r2, r3, #1
 800a35a:	697b      	ldr	r3, [r7, #20]
 800a35c:	685b      	ldr	r3, [r3, #4]
 800a35e:	085b      	lsrs	r3, r3, #1
 800a360:	441a      	add	r2, r3
 800a362:	697b      	ldr	r3, [r7, #20]
 800a364:	685b      	ldr	r3, [r3, #4]
 800a366:	fbb2 f3f3 	udiv	r3, r2, r3
 800a36a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a36c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a36e:	2b0f      	cmp	r3, #15
 800a370:	d916      	bls.n	800a3a0 <UART_SetConfig+0xb28>
 800a372:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a374:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a378:	d212      	bcs.n	800a3a0 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a37a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a37c:	b29b      	uxth	r3, r3
 800a37e:	f023 030f 	bic.w	r3, r3, #15
 800a382:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a384:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a386:	085b      	lsrs	r3, r3, #1
 800a388:	b29b      	uxth	r3, r3
 800a38a:	f003 0307 	and.w	r3, r3, #7
 800a38e:	b29a      	uxth	r2, r3
 800a390:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a392:	4313      	orrs	r3, r2
 800a394:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800a396:	697b      	ldr	r3, [r7, #20]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800a39c:	60da      	str	r2, [r3, #12]
 800a39e:	e0bc      	b.n	800a51a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800a3a0:	2301      	movs	r3, #1
 800a3a2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a3a6:	e0b8      	b.n	800a51a <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a3a8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a3ac:	2b20      	cmp	r3, #32
 800a3ae:	dc4b      	bgt.n	800a448 <UART_SetConfig+0xbd0>
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	f2c0 8087 	blt.w	800a4c4 <UART_SetConfig+0xc4c>
 800a3b6:	2b20      	cmp	r3, #32
 800a3b8:	f200 8084 	bhi.w	800a4c4 <UART_SetConfig+0xc4c>
 800a3bc:	a201      	add	r2, pc, #4	@ (adr r2, 800a3c4 <UART_SetConfig+0xb4c>)
 800a3be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3c2:	bf00      	nop
 800a3c4:	0800a44f 	.word	0x0800a44f
 800a3c8:	0800a457 	.word	0x0800a457
 800a3cc:	0800a4c5 	.word	0x0800a4c5
 800a3d0:	0800a4c5 	.word	0x0800a4c5
 800a3d4:	0800a45f 	.word	0x0800a45f
 800a3d8:	0800a4c5 	.word	0x0800a4c5
 800a3dc:	0800a4c5 	.word	0x0800a4c5
 800a3e0:	0800a4c5 	.word	0x0800a4c5
 800a3e4:	0800a46f 	.word	0x0800a46f
 800a3e8:	0800a4c5 	.word	0x0800a4c5
 800a3ec:	0800a4c5 	.word	0x0800a4c5
 800a3f0:	0800a4c5 	.word	0x0800a4c5
 800a3f4:	0800a4c5 	.word	0x0800a4c5
 800a3f8:	0800a4c5 	.word	0x0800a4c5
 800a3fc:	0800a4c5 	.word	0x0800a4c5
 800a400:	0800a4c5 	.word	0x0800a4c5
 800a404:	0800a47f 	.word	0x0800a47f
 800a408:	0800a4c5 	.word	0x0800a4c5
 800a40c:	0800a4c5 	.word	0x0800a4c5
 800a410:	0800a4c5 	.word	0x0800a4c5
 800a414:	0800a4c5 	.word	0x0800a4c5
 800a418:	0800a4c5 	.word	0x0800a4c5
 800a41c:	0800a4c5 	.word	0x0800a4c5
 800a420:	0800a4c5 	.word	0x0800a4c5
 800a424:	0800a4c5 	.word	0x0800a4c5
 800a428:	0800a4c5 	.word	0x0800a4c5
 800a42c:	0800a4c5 	.word	0x0800a4c5
 800a430:	0800a4c5 	.word	0x0800a4c5
 800a434:	0800a4c5 	.word	0x0800a4c5
 800a438:	0800a4c5 	.word	0x0800a4c5
 800a43c:	0800a4c5 	.word	0x0800a4c5
 800a440:	0800a4c5 	.word	0x0800a4c5
 800a444:	0800a4b7 	.word	0x0800a4b7
 800a448:	2b40      	cmp	r3, #64	@ 0x40
 800a44a:	d037      	beq.n	800a4bc <UART_SetConfig+0xc44>
 800a44c:	e03a      	b.n	800a4c4 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a44e:	f7fc f91b 	bl	8006688 <HAL_RCC_GetPCLK1Freq>
 800a452:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a454:	e03c      	b.n	800a4d0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a456:	f7fc f92d 	bl	80066b4 <HAL_RCC_GetPCLK2Freq>
 800a45a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a45c:	e038      	b.n	800a4d0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a45e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a462:	4618      	mov	r0, r3
 800a464:	f7fd faf2 	bl	8007a4c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a468:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a46a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a46c:	e030      	b.n	800a4d0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a46e:	f107 0318 	add.w	r3, r7, #24
 800a472:	4618      	mov	r0, r3
 800a474:	f7fd fc3e 	bl	8007cf4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a478:	69fb      	ldr	r3, [r7, #28]
 800a47a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a47c:	e028      	b.n	800a4d0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a47e:	4b09      	ldr	r3, [pc, #36]	@ (800a4a4 <UART_SetConfig+0xc2c>)
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	f003 0320 	and.w	r3, r3, #32
 800a486:	2b00      	cmp	r3, #0
 800a488:	d012      	beq.n	800a4b0 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a48a:	4b06      	ldr	r3, [pc, #24]	@ (800a4a4 <UART_SetConfig+0xc2c>)
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	08db      	lsrs	r3, r3, #3
 800a490:	f003 0303 	and.w	r3, r3, #3
 800a494:	4a04      	ldr	r2, [pc, #16]	@ (800a4a8 <UART_SetConfig+0xc30>)
 800a496:	fa22 f303 	lsr.w	r3, r2, r3
 800a49a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a49c:	e018      	b.n	800a4d0 <UART_SetConfig+0xc58>
 800a49e:	bf00      	nop
 800a4a0:	08012d6c 	.word	0x08012d6c
 800a4a4:	58024400 	.word	0x58024400
 800a4a8:	03d09000 	.word	0x03d09000
 800a4ac:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800a4b0:	4b24      	ldr	r3, [pc, #144]	@ (800a544 <UART_SetConfig+0xccc>)
 800a4b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a4b4:	e00c      	b.n	800a4d0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a4b6:	4b24      	ldr	r3, [pc, #144]	@ (800a548 <UART_SetConfig+0xcd0>)
 800a4b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a4ba:	e009      	b.n	800a4d0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a4bc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a4c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a4c2:	e005      	b.n	800a4d0 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800a4c4:	2300      	movs	r3, #0
 800a4c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a4c8:	2301      	movs	r3, #1
 800a4ca:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a4ce:	bf00      	nop
    }

    if (pclk != 0U)
 800a4d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d021      	beq.n	800a51a <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a4d6:	697b      	ldr	r3, [r7, #20]
 800a4d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4da:	4a1c      	ldr	r2, [pc, #112]	@ (800a54c <UART_SetConfig+0xcd4>)
 800a4dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a4e0:	461a      	mov	r2, r3
 800a4e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a4e4:	fbb3 f2f2 	udiv	r2, r3, r2
 800a4e8:	697b      	ldr	r3, [r7, #20]
 800a4ea:	685b      	ldr	r3, [r3, #4]
 800a4ec:	085b      	lsrs	r3, r3, #1
 800a4ee:	441a      	add	r2, r3
 800a4f0:	697b      	ldr	r3, [r7, #20]
 800a4f2:	685b      	ldr	r3, [r3, #4]
 800a4f4:	fbb2 f3f3 	udiv	r3, r2, r3
 800a4f8:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a4fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4fc:	2b0f      	cmp	r3, #15
 800a4fe:	d909      	bls.n	800a514 <UART_SetConfig+0xc9c>
 800a500:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a502:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a506:	d205      	bcs.n	800a514 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a508:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a50a:	b29a      	uxth	r2, r3
 800a50c:	697b      	ldr	r3, [r7, #20]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	60da      	str	r2, [r3, #12]
 800a512:	e002      	b.n	800a51a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800a514:	2301      	movs	r3, #1
 800a516:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a51a:	697b      	ldr	r3, [r7, #20]
 800a51c:	2201      	movs	r2, #1
 800a51e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800a522:	697b      	ldr	r3, [r7, #20]
 800a524:	2201      	movs	r2, #1
 800a526:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a52a:	697b      	ldr	r3, [r7, #20]
 800a52c:	2200      	movs	r2, #0
 800a52e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800a530:	697b      	ldr	r3, [r7, #20]
 800a532:	2200      	movs	r2, #0
 800a534:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800a536:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800a53a:	4618      	mov	r0, r3
 800a53c:	3748      	adds	r7, #72	@ 0x48
 800a53e:	46bd      	mov	sp, r7
 800a540:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a544:	03d09000 	.word	0x03d09000
 800a548:	003d0900 	.word	0x003d0900
 800a54c:	08012d6c 	.word	0x08012d6c

0800a550 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a550:	b480      	push	{r7}
 800a552:	b083      	sub	sp, #12
 800a554:	af00      	add	r7, sp, #0
 800a556:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a55c:	f003 0308 	and.w	r3, r3, #8
 800a560:	2b00      	cmp	r3, #0
 800a562:	d00a      	beq.n	800a57a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	685b      	ldr	r3, [r3, #4]
 800a56a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	430a      	orrs	r2, r1
 800a578:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a57e:	f003 0301 	and.w	r3, r3, #1
 800a582:	2b00      	cmp	r3, #0
 800a584:	d00a      	beq.n	800a59c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	685b      	ldr	r3, [r3, #4]
 800a58c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	430a      	orrs	r2, r1
 800a59a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5a0:	f003 0302 	and.w	r3, r3, #2
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d00a      	beq.n	800a5be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	685b      	ldr	r3, [r3, #4]
 800a5ae:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	430a      	orrs	r2, r1
 800a5bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5c2:	f003 0304 	and.w	r3, r3, #4
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d00a      	beq.n	800a5e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	685b      	ldr	r3, [r3, #4]
 800a5d0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	430a      	orrs	r2, r1
 800a5de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5e4:	f003 0310 	and.w	r3, r3, #16
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d00a      	beq.n	800a602 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	689b      	ldr	r3, [r3, #8]
 800a5f2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	430a      	orrs	r2, r1
 800a600:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a606:	f003 0320 	and.w	r3, r3, #32
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d00a      	beq.n	800a624 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	689b      	ldr	r3, [r3, #8]
 800a614:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	430a      	orrs	r2, r1
 800a622:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a628:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d01a      	beq.n	800a666 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	685b      	ldr	r3, [r3, #4]
 800a636:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	430a      	orrs	r2, r1
 800a644:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a64a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a64e:	d10a      	bne.n	800a666 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	685b      	ldr	r3, [r3, #4]
 800a656:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	430a      	orrs	r2, r1
 800a664:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a66a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d00a      	beq.n	800a688 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	685b      	ldr	r3, [r3, #4]
 800a678:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	430a      	orrs	r2, r1
 800a686:	605a      	str	r2, [r3, #4]
  }
}
 800a688:	bf00      	nop
 800a68a:	370c      	adds	r7, #12
 800a68c:	46bd      	mov	sp, r7
 800a68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a692:	4770      	bx	lr

0800a694 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a694:	b580      	push	{r7, lr}
 800a696:	b098      	sub	sp, #96	@ 0x60
 800a698:	af02      	add	r7, sp, #8
 800a69a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	2200      	movs	r2, #0
 800a6a0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a6a4:	f7f8 fdce 	bl	8003244 <HAL_GetTick>
 800a6a8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	f003 0308 	and.w	r3, r3, #8
 800a6b4:	2b08      	cmp	r3, #8
 800a6b6:	d12f      	bne.n	800a718 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a6b8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a6bc:	9300      	str	r3, [sp, #0]
 800a6be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a6c0:	2200      	movs	r2, #0
 800a6c2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a6c6:	6878      	ldr	r0, [r7, #4]
 800a6c8:	f000 f88e 	bl	800a7e8 <UART_WaitOnFlagUntilTimeout>
 800a6cc:	4603      	mov	r3, r0
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d022      	beq.n	800a718 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6da:	e853 3f00 	ldrex	r3, [r3]
 800a6de:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a6e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6e2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a6e6:	653b      	str	r3, [r7, #80]	@ 0x50
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	461a      	mov	r2, r3
 800a6ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a6f0:	647b      	str	r3, [r7, #68]	@ 0x44
 800a6f2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6f4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a6f6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a6f8:	e841 2300 	strex	r3, r2, [r1]
 800a6fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a6fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a700:	2b00      	cmp	r3, #0
 800a702:	d1e6      	bne.n	800a6d2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	2220      	movs	r2, #32
 800a708:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	2200      	movs	r2, #0
 800a710:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a714:	2303      	movs	r3, #3
 800a716:	e063      	b.n	800a7e0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	f003 0304 	and.w	r3, r3, #4
 800a722:	2b04      	cmp	r3, #4
 800a724:	d149      	bne.n	800a7ba <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a726:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a72a:	9300      	str	r3, [sp, #0]
 800a72c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a72e:	2200      	movs	r2, #0
 800a730:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a734:	6878      	ldr	r0, [r7, #4]
 800a736:	f000 f857 	bl	800a7e8 <UART_WaitOnFlagUntilTimeout>
 800a73a:	4603      	mov	r3, r0
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d03c      	beq.n	800a7ba <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a748:	e853 3f00 	ldrex	r3, [r3]
 800a74c:	623b      	str	r3, [r7, #32]
   return(result);
 800a74e:	6a3b      	ldr	r3, [r7, #32]
 800a750:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a754:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	461a      	mov	r2, r3
 800a75c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a75e:	633b      	str	r3, [r7, #48]	@ 0x30
 800a760:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a762:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a764:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a766:	e841 2300 	strex	r3, r2, [r1]
 800a76a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a76c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d1e6      	bne.n	800a740 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	3308      	adds	r3, #8
 800a778:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a77a:	693b      	ldr	r3, [r7, #16]
 800a77c:	e853 3f00 	ldrex	r3, [r3]
 800a780:	60fb      	str	r3, [r7, #12]
   return(result);
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	f023 0301 	bic.w	r3, r3, #1
 800a788:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	3308      	adds	r3, #8
 800a790:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a792:	61fa      	str	r2, [r7, #28]
 800a794:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a796:	69b9      	ldr	r1, [r7, #24]
 800a798:	69fa      	ldr	r2, [r7, #28]
 800a79a:	e841 2300 	strex	r3, r2, [r1]
 800a79e:	617b      	str	r3, [r7, #20]
   return(result);
 800a7a0:	697b      	ldr	r3, [r7, #20]
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d1e5      	bne.n	800a772 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	2220      	movs	r2, #32
 800a7aa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	2200      	movs	r2, #0
 800a7b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a7b6:	2303      	movs	r3, #3
 800a7b8:	e012      	b.n	800a7e0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	2220      	movs	r2, #32
 800a7be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	2220      	movs	r2, #32
 800a7c6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	2200      	movs	r2, #0
 800a7ce:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	2200      	movs	r2, #0
 800a7d4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	2200      	movs	r2, #0
 800a7da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a7de:	2300      	movs	r3, #0
}
 800a7e0:	4618      	mov	r0, r3
 800a7e2:	3758      	adds	r7, #88	@ 0x58
 800a7e4:	46bd      	mov	sp, r7
 800a7e6:	bd80      	pop	{r7, pc}

0800a7e8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a7e8:	b580      	push	{r7, lr}
 800a7ea:	b084      	sub	sp, #16
 800a7ec:	af00      	add	r7, sp, #0
 800a7ee:	60f8      	str	r0, [r7, #12]
 800a7f0:	60b9      	str	r1, [r7, #8]
 800a7f2:	603b      	str	r3, [r7, #0]
 800a7f4:	4613      	mov	r3, r2
 800a7f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a7f8:	e04f      	b.n	800a89a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a7fa:	69bb      	ldr	r3, [r7, #24]
 800a7fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a800:	d04b      	beq.n	800a89a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a802:	f7f8 fd1f 	bl	8003244 <HAL_GetTick>
 800a806:	4602      	mov	r2, r0
 800a808:	683b      	ldr	r3, [r7, #0]
 800a80a:	1ad3      	subs	r3, r2, r3
 800a80c:	69ba      	ldr	r2, [r7, #24]
 800a80e:	429a      	cmp	r2, r3
 800a810:	d302      	bcc.n	800a818 <UART_WaitOnFlagUntilTimeout+0x30>
 800a812:	69bb      	ldr	r3, [r7, #24]
 800a814:	2b00      	cmp	r3, #0
 800a816:	d101      	bne.n	800a81c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a818:	2303      	movs	r3, #3
 800a81a:	e04e      	b.n	800a8ba <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	f003 0304 	and.w	r3, r3, #4
 800a826:	2b00      	cmp	r3, #0
 800a828:	d037      	beq.n	800a89a <UART_WaitOnFlagUntilTimeout+0xb2>
 800a82a:	68bb      	ldr	r3, [r7, #8]
 800a82c:	2b80      	cmp	r3, #128	@ 0x80
 800a82e:	d034      	beq.n	800a89a <UART_WaitOnFlagUntilTimeout+0xb2>
 800a830:	68bb      	ldr	r3, [r7, #8]
 800a832:	2b40      	cmp	r3, #64	@ 0x40
 800a834:	d031      	beq.n	800a89a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	69db      	ldr	r3, [r3, #28]
 800a83c:	f003 0308 	and.w	r3, r3, #8
 800a840:	2b08      	cmp	r3, #8
 800a842:	d110      	bne.n	800a866 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	2208      	movs	r2, #8
 800a84a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a84c:	68f8      	ldr	r0, [r7, #12]
 800a84e:	f000 f95b 	bl	800ab08 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	2208      	movs	r2, #8
 800a856:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	2200      	movs	r2, #0
 800a85e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a862:	2301      	movs	r3, #1
 800a864:	e029      	b.n	800a8ba <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	69db      	ldr	r3, [r3, #28]
 800a86c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a870:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a874:	d111      	bne.n	800a89a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a87e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a880:	68f8      	ldr	r0, [r7, #12]
 800a882:	f000 f941 	bl	800ab08 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	2220      	movs	r2, #32
 800a88a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	2200      	movs	r2, #0
 800a892:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a896:	2303      	movs	r3, #3
 800a898:	e00f      	b.n	800a8ba <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	69da      	ldr	r2, [r3, #28]
 800a8a0:	68bb      	ldr	r3, [r7, #8]
 800a8a2:	4013      	ands	r3, r2
 800a8a4:	68ba      	ldr	r2, [r7, #8]
 800a8a6:	429a      	cmp	r2, r3
 800a8a8:	bf0c      	ite	eq
 800a8aa:	2301      	moveq	r3, #1
 800a8ac:	2300      	movne	r3, #0
 800a8ae:	b2db      	uxtb	r3, r3
 800a8b0:	461a      	mov	r2, r3
 800a8b2:	79fb      	ldrb	r3, [r7, #7]
 800a8b4:	429a      	cmp	r2, r3
 800a8b6:	d0a0      	beq.n	800a7fa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a8b8:	2300      	movs	r3, #0
}
 800a8ba:	4618      	mov	r0, r3
 800a8bc:	3710      	adds	r7, #16
 800a8be:	46bd      	mov	sp, r7
 800a8c0:	bd80      	pop	{r7, pc}
	...

0800a8c4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a8c4:	b480      	push	{r7}
 800a8c6:	b0a3      	sub	sp, #140	@ 0x8c
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	60f8      	str	r0, [r7, #12]
 800a8cc:	60b9      	str	r1, [r7, #8]
 800a8ce:	4613      	mov	r3, r2
 800a8d0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	68ba      	ldr	r2, [r7, #8]
 800a8d6:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	88fa      	ldrh	r2, [r7, #6]
 800a8dc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	88fa      	ldrh	r2, [r7, #6]
 800a8e4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	2200      	movs	r2, #0
 800a8ec:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	689b      	ldr	r3, [r3, #8]
 800a8f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a8f6:	d10e      	bne.n	800a916 <UART_Start_Receive_IT+0x52>
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	691b      	ldr	r3, [r3, #16]
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d105      	bne.n	800a90c <UART_Start_Receive_IT+0x48>
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800a906:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a90a:	e02d      	b.n	800a968 <UART_Start_Receive_IT+0xa4>
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	22ff      	movs	r2, #255	@ 0xff
 800a910:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a914:	e028      	b.n	800a968 <UART_Start_Receive_IT+0xa4>
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	689b      	ldr	r3, [r3, #8]
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d10d      	bne.n	800a93a <UART_Start_Receive_IT+0x76>
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	691b      	ldr	r3, [r3, #16]
 800a922:	2b00      	cmp	r3, #0
 800a924:	d104      	bne.n	800a930 <UART_Start_Receive_IT+0x6c>
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	22ff      	movs	r2, #255	@ 0xff
 800a92a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a92e:	e01b      	b.n	800a968 <UART_Start_Receive_IT+0xa4>
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	227f      	movs	r2, #127	@ 0x7f
 800a934:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a938:	e016      	b.n	800a968 <UART_Start_Receive_IT+0xa4>
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	689b      	ldr	r3, [r3, #8]
 800a93e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a942:	d10d      	bne.n	800a960 <UART_Start_Receive_IT+0x9c>
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	691b      	ldr	r3, [r3, #16]
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d104      	bne.n	800a956 <UART_Start_Receive_IT+0x92>
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	227f      	movs	r2, #127	@ 0x7f
 800a950:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a954:	e008      	b.n	800a968 <UART_Start_Receive_IT+0xa4>
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	223f      	movs	r2, #63	@ 0x3f
 800a95a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a95e:	e003      	b.n	800a968 <UART_Start_Receive_IT+0xa4>
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	2200      	movs	r2, #0
 800a964:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	2200      	movs	r2, #0
 800a96c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	2222      	movs	r2, #34	@ 0x22
 800a974:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	3308      	adds	r3, #8
 800a97e:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a980:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a982:	e853 3f00 	ldrex	r3, [r3]
 800a986:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800a988:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a98a:	f043 0301 	orr.w	r3, r3, #1
 800a98e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	3308      	adds	r3, #8
 800a998:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800a99c:	673a      	str	r2, [r7, #112]	@ 0x70
 800a99e:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9a0:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800a9a2:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800a9a4:	e841 2300 	strex	r3, r2, [r1]
 800a9a8:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800a9aa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d1e3      	bne.n	800a978 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a9b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a9b8:	d14f      	bne.n	800aa5a <UART_Start_Receive_IT+0x196>
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800a9c0:	88fa      	ldrh	r2, [r7, #6]
 800a9c2:	429a      	cmp	r2, r3
 800a9c4:	d349      	bcc.n	800aa5a <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	689b      	ldr	r3, [r3, #8]
 800a9ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a9ce:	d107      	bne.n	800a9e0 <UART_Start_Receive_IT+0x11c>
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	691b      	ldr	r3, [r3, #16]
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d103      	bne.n	800a9e0 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	4a47      	ldr	r2, [pc, #284]	@ (800aaf8 <UART_Start_Receive_IT+0x234>)
 800a9dc:	675a      	str	r2, [r3, #116]	@ 0x74
 800a9de:	e002      	b.n	800a9e6 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	4a46      	ldr	r2, [pc, #280]	@ (800aafc <UART_Start_Receive_IT+0x238>)
 800a9e4:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	691b      	ldr	r3, [r3, #16]
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d01a      	beq.n	800aa24 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a9f6:	e853 3f00 	ldrex	r3, [r3]
 800a9fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800a9fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a9fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800aa02:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	461a      	mov	r2, r3
 800aa0c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800aa10:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800aa12:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa14:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800aa16:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800aa18:	e841 2300 	strex	r3, r2, [r1]
 800aa1c:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800aa1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d1e4      	bne.n	800a9ee <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	3308      	adds	r3, #8
 800aa2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aa2e:	e853 3f00 	ldrex	r3, [r3]
 800aa32:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800aa34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa36:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800aa3a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	3308      	adds	r3, #8
 800aa42:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800aa44:	64ba      	str	r2, [r7, #72]	@ 0x48
 800aa46:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa48:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800aa4a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800aa4c:	e841 2300 	strex	r3, r2, [r1]
 800aa50:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800aa52:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d1e5      	bne.n	800aa24 <UART_Start_Receive_IT+0x160>
 800aa58:	e046      	b.n	800aae8 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	689b      	ldr	r3, [r3, #8]
 800aa5e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800aa62:	d107      	bne.n	800aa74 <UART_Start_Receive_IT+0x1b0>
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	691b      	ldr	r3, [r3, #16]
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d103      	bne.n	800aa74 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	4a24      	ldr	r2, [pc, #144]	@ (800ab00 <UART_Start_Receive_IT+0x23c>)
 800aa70:	675a      	str	r2, [r3, #116]	@ 0x74
 800aa72:	e002      	b.n	800aa7a <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	4a23      	ldr	r2, [pc, #140]	@ (800ab04 <UART_Start_Receive_IT+0x240>)
 800aa78:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	691b      	ldr	r3, [r3, #16]
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d019      	beq.n	800aab6 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa8a:	e853 3f00 	ldrex	r3, [r3]
 800aa8e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800aa90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa92:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800aa96:	677b      	str	r3, [r7, #116]	@ 0x74
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	461a      	mov	r2, r3
 800aa9e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800aaa0:	637b      	str	r3, [r7, #52]	@ 0x34
 800aaa2:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aaa4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800aaa6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800aaa8:	e841 2300 	strex	r3, r2, [r1]
 800aaac:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800aaae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d1e6      	bne.n	800aa82 <UART_Start_Receive_IT+0x1be>
 800aab4:	e018      	b.n	800aae8 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aabc:	697b      	ldr	r3, [r7, #20]
 800aabe:	e853 3f00 	ldrex	r3, [r3]
 800aac2:	613b      	str	r3, [r7, #16]
   return(result);
 800aac4:	693b      	ldr	r3, [r7, #16]
 800aac6:	f043 0320 	orr.w	r3, r3, #32
 800aaca:	67bb      	str	r3, [r7, #120]	@ 0x78
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	461a      	mov	r2, r3
 800aad2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800aad4:	623b      	str	r3, [r7, #32]
 800aad6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aad8:	69f9      	ldr	r1, [r7, #28]
 800aada:	6a3a      	ldr	r2, [r7, #32]
 800aadc:	e841 2300 	strex	r3, r2, [r1]
 800aae0:	61bb      	str	r3, [r7, #24]
   return(result);
 800aae2:	69bb      	ldr	r3, [r7, #24]
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d1e6      	bne.n	800aab6 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800aae8:	2300      	movs	r3, #0
}
 800aaea:	4618      	mov	r0, r3
 800aaec:	378c      	adds	r7, #140	@ 0x8c
 800aaee:	46bd      	mov	sp, r7
 800aaf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf4:	4770      	bx	lr
 800aaf6:	bf00      	nop
 800aaf8:	0800b329 	.word	0x0800b329
 800aafc:	0800afc9 	.word	0x0800afc9
 800ab00:	0800ae11 	.word	0x0800ae11
 800ab04:	0800ac59 	.word	0x0800ac59

0800ab08 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ab08:	b480      	push	{r7}
 800ab0a:	b095      	sub	sp, #84	@ 0x54
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab18:	e853 3f00 	ldrex	r3, [r3]
 800ab1c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ab1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab20:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ab24:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	461a      	mov	r2, r3
 800ab2c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ab2e:	643b      	str	r3, [r7, #64]	@ 0x40
 800ab30:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab32:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ab34:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ab36:	e841 2300 	strex	r3, r2, [r1]
 800ab3a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ab3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d1e6      	bne.n	800ab10 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	3308      	adds	r3, #8
 800ab48:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab4a:	6a3b      	ldr	r3, [r7, #32]
 800ab4c:	e853 3f00 	ldrex	r3, [r3]
 800ab50:	61fb      	str	r3, [r7, #28]
   return(result);
 800ab52:	69fa      	ldr	r2, [r7, #28]
 800ab54:	4b1e      	ldr	r3, [pc, #120]	@ (800abd0 <UART_EndRxTransfer+0xc8>)
 800ab56:	4013      	ands	r3, r2
 800ab58:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	3308      	adds	r3, #8
 800ab60:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ab62:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ab64:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab66:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ab68:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ab6a:	e841 2300 	strex	r3, r2, [r1]
 800ab6e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ab70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d1e5      	bne.n	800ab42 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ab7a:	2b01      	cmp	r3, #1
 800ab7c:	d118      	bne.n	800abb0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	e853 3f00 	ldrex	r3, [r3]
 800ab8a:	60bb      	str	r3, [r7, #8]
   return(result);
 800ab8c:	68bb      	ldr	r3, [r7, #8]
 800ab8e:	f023 0310 	bic.w	r3, r3, #16
 800ab92:	647b      	str	r3, [r7, #68]	@ 0x44
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	461a      	mov	r2, r3
 800ab9a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ab9c:	61bb      	str	r3, [r7, #24]
 800ab9e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aba0:	6979      	ldr	r1, [r7, #20]
 800aba2:	69ba      	ldr	r2, [r7, #24]
 800aba4:	e841 2300 	strex	r3, r2, [r1]
 800aba8:	613b      	str	r3, [r7, #16]
   return(result);
 800abaa:	693b      	ldr	r3, [r7, #16]
 800abac:	2b00      	cmp	r3, #0
 800abae:	d1e6      	bne.n	800ab7e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	2220      	movs	r2, #32
 800abb4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	2200      	movs	r2, #0
 800abbc:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	2200      	movs	r2, #0
 800abc2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800abc4:	bf00      	nop
 800abc6:	3754      	adds	r7, #84	@ 0x54
 800abc8:	46bd      	mov	sp, r7
 800abca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abce:	4770      	bx	lr
 800abd0:	effffffe 	.word	0xeffffffe

0800abd4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800abd4:	b580      	push	{r7, lr}
 800abd6:	b084      	sub	sp, #16
 800abd8:	af00      	add	r7, sp, #0
 800abda:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800abe0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	2200      	movs	r2, #0
 800abe6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	2200      	movs	r2, #0
 800abee:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800abf2:	68f8      	ldr	r0, [r7, #12]
 800abf4:	f7fe fe2a 	bl	800984c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800abf8:	bf00      	nop
 800abfa:	3710      	adds	r7, #16
 800abfc:	46bd      	mov	sp, r7
 800abfe:	bd80      	pop	{r7, pc}

0800ac00 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ac00:	b580      	push	{r7, lr}
 800ac02:	b088      	sub	sp, #32
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	e853 3f00 	ldrex	r3, [r3]
 800ac14:	60bb      	str	r3, [r7, #8]
   return(result);
 800ac16:	68bb      	ldr	r3, [r7, #8]
 800ac18:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ac1c:	61fb      	str	r3, [r7, #28]
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	461a      	mov	r2, r3
 800ac24:	69fb      	ldr	r3, [r7, #28]
 800ac26:	61bb      	str	r3, [r7, #24]
 800ac28:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac2a:	6979      	ldr	r1, [r7, #20]
 800ac2c:	69ba      	ldr	r2, [r7, #24]
 800ac2e:	e841 2300 	strex	r3, r2, [r1]
 800ac32:	613b      	str	r3, [r7, #16]
   return(result);
 800ac34:	693b      	ldr	r3, [r7, #16]
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d1e6      	bne.n	800ac08 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	2220      	movs	r2, #32
 800ac3e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	2200      	movs	r2, #0
 800ac46:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ac48:	6878      	ldr	r0, [r7, #4]
 800ac4a:	f7fe fdf5 	bl	8009838 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ac4e:	bf00      	nop
 800ac50:	3720      	adds	r7, #32
 800ac52:	46bd      	mov	sp, r7
 800ac54:	bd80      	pop	{r7, pc}
	...

0800ac58 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800ac58:	b580      	push	{r7, lr}
 800ac5a:	b09c      	sub	sp, #112	@ 0x70
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800ac66:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ac70:	2b22      	cmp	r3, #34	@ 0x22
 800ac72:	f040 80be 	bne.w	800adf2 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac7c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800ac80:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800ac84:	b2d9      	uxtb	r1, r3
 800ac86:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800ac8a:	b2da      	uxtb	r2, r3
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ac90:	400a      	ands	r2, r1
 800ac92:	b2d2      	uxtb	r2, r2
 800ac94:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ac9a:	1c5a      	adds	r2, r3, #1
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800aca6:	b29b      	uxth	r3, r3
 800aca8:	3b01      	subs	r3, #1
 800acaa:	b29a      	uxth	r2, r3
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800acb8:	b29b      	uxth	r3, r3
 800acba:	2b00      	cmp	r3, #0
 800acbc:	f040 80a1 	bne.w	800ae02 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acc6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800acc8:	e853 3f00 	ldrex	r3, [r3]
 800accc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800acce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800acd0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800acd4:	66bb      	str	r3, [r7, #104]	@ 0x68
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	461a      	mov	r2, r3
 800acdc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800acde:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ace0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ace2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800ace4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ace6:	e841 2300 	strex	r3, r2, [r1]
 800acea:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800acec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d1e6      	bne.n	800acc0 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	3308      	adds	r3, #8
 800acf8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acfc:	e853 3f00 	ldrex	r3, [r3]
 800ad00:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ad02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad04:	f023 0301 	bic.w	r3, r3, #1
 800ad08:	667b      	str	r3, [r7, #100]	@ 0x64
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	3308      	adds	r3, #8
 800ad10:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800ad12:	647a      	str	r2, [r7, #68]	@ 0x44
 800ad14:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad16:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ad18:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ad1a:	e841 2300 	strex	r3, r2, [r1]
 800ad1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ad20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d1e5      	bne.n	800acf2 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	2220      	movs	r2, #32
 800ad2a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	2200      	movs	r2, #0
 800ad32:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	2200      	movs	r2, #0
 800ad38:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	4a33      	ldr	r2, [pc, #204]	@ (800ae0c <UART_RxISR_8BIT+0x1b4>)
 800ad40:	4293      	cmp	r3, r2
 800ad42:	d01f      	beq.n	800ad84 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	685b      	ldr	r3, [r3, #4]
 800ad4a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d018      	beq.n	800ad84 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad5a:	e853 3f00 	ldrex	r3, [r3]
 800ad5e:	623b      	str	r3, [r7, #32]
   return(result);
 800ad60:	6a3b      	ldr	r3, [r7, #32]
 800ad62:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800ad66:	663b      	str	r3, [r7, #96]	@ 0x60
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	461a      	mov	r2, r3
 800ad6e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ad70:	633b      	str	r3, [r7, #48]	@ 0x30
 800ad72:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad74:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ad76:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ad78:	e841 2300 	strex	r3, r2, [r1]
 800ad7c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ad7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d1e6      	bne.n	800ad52 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ad88:	2b01      	cmp	r3, #1
 800ad8a:	d12e      	bne.n	800adea <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	2200      	movs	r2, #0
 800ad90:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad98:	693b      	ldr	r3, [r7, #16]
 800ad9a:	e853 3f00 	ldrex	r3, [r3]
 800ad9e:	60fb      	str	r3, [r7, #12]
   return(result);
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	f023 0310 	bic.w	r3, r3, #16
 800ada6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	461a      	mov	r2, r3
 800adae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800adb0:	61fb      	str	r3, [r7, #28]
 800adb2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adb4:	69b9      	ldr	r1, [r7, #24]
 800adb6:	69fa      	ldr	r2, [r7, #28]
 800adb8:	e841 2300 	strex	r3, r2, [r1]
 800adbc:	617b      	str	r3, [r7, #20]
   return(result);
 800adbe:	697b      	ldr	r3, [r7, #20]
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d1e6      	bne.n	800ad92 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	69db      	ldr	r3, [r3, #28]
 800adca:	f003 0310 	and.w	r3, r3, #16
 800adce:	2b10      	cmp	r3, #16
 800add0:	d103      	bne.n	800adda <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	2210      	movs	r2, #16
 800add8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ade0:	4619      	mov	r1, r3
 800ade2:	6878      	ldr	r0, [r7, #4]
 800ade4:	f7fe fd3c 	bl	8009860 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ade8:	e00b      	b.n	800ae02 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800adea:	6878      	ldr	r0, [r7, #4]
 800adec:	f7f6 fd62 	bl	80018b4 <HAL_UART_RxCpltCallback>
}
 800adf0:	e007      	b.n	800ae02 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	699a      	ldr	r2, [r3, #24]
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	f042 0208 	orr.w	r2, r2, #8
 800ae00:	619a      	str	r2, [r3, #24]
}
 800ae02:	bf00      	nop
 800ae04:	3770      	adds	r7, #112	@ 0x70
 800ae06:	46bd      	mov	sp, r7
 800ae08:	bd80      	pop	{r7, pc}
 800ae0a:	bf00      	nop
 800ae0c:	58000c00 	.word	0x58000c00

0800ae10 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800ae10:	b580      	push	{r7, lr}
 800ae12:	b09c      	sub	sp, #112	@ 0x70
 800ae14:	af00      	add	r7, sp, #0
 800ae16:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800ae1e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ae28:	2b22      	cmp	r3, #34	@ 0x22
 800ae2a:	f040 80be 	bne.w	800afaa <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae34:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ae3c:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800ae3e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800ae42:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800ae46:	4013      	ands	r3, r2
 800ae48:	b29a      	uxth	r2, r3
 800ae4a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ae4c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ae52:	1c9a      	adds	r2, r3, #2
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ae5e:	b29b      	uxth	r3, r3
 800ae60:	3b01      	subs	r3, #1
 800ae62:	b29a      	uxth	r2, r3
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ae70:	b29b      	uxth	r3, r3
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	f040 80a1 	bne.w	800afba <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae7e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ae80:	e853 3f00 	ldrex	r3, [r3]
 800ae84:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800ae86:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ae88:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ae8c:	667b      	str	r3, [r7, #100]	@ 0x64
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	461a      	mov	r2, r3
 800ae94:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ae96:	657b      	str	r3, [r7, #84]	@ 0x54
 800ae98:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae9a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800ae9c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ae9e:	e841 2300 	strex	r3, r2, [r1]
 800aea2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800aea4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d1e6      	bne.n	800ae78 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	3308      	adds	r3, #8
 800aeb0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aeb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aeb4:	e853 3f00 	ldrex	r3, [r3]
 800aeb8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800aeba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aebc:	f023 0301 	bic.w	r3, r3, #1
 800aec0:	663b      	str	r3, [r7, #96]	@ 0x60
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	3308      	adds	r3, #8
 800aec8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800aeca:	643a      	str	r2, [r7, #64]	@ 0x40
 800aecc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aece:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800aed0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800aed2:	e841 2300 	strex	r3, r2, [r1]
 800aed6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800aed8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d1e5      	bne.n	800aeaa <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	2220      	movs	r2, #32
 800aee2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	2200      	movs	r2, #0
 800aeea:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	2200      	movs	r2, #0
 800aef0:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	4a33      	ldr	r2, [pc, #204]	@ (800afc4 <UART_RxISR_16BIT+0x1b4>)
 800aef8:	4293      	cmp	r3, r2
 800aefa:	d01f      	beq.n	800af3c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	685b      	ldr	r3, [r3, #4]
 800af02:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800af06:	2b00      	cmp	r3, #0
 800af08:	d018      	beq.n	800af3c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af10:	6a3b      	ldr	r3, [r7, #32]
 800af12:	e853 3f00 	ldrex	r3, [r3]
 800af16:	61fb      	str	r3, [r7, #28]
   return(result);
 800af18:	69fb      	ldr	r3, [r7, #28]
 800af1a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800af1e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	461a      	mov	r2, r3
 800af26:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800af28:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800af2a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af2c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800af2e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800af30:	e841 2300 	strex	r3, r2, [r1]
 800af34:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800af36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d1e6      	bne.n	800af0a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800af40:	2b01      	cmp	r3, #1
 800af42:	d12e      	bne.n	800afa2 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	2200      	movs	r2, #0
 800af48:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	e853 3f00 	ldrex	r3, [r3]
 800af56:	60bb      	str	r3, [r7, #8]
   return(result);
 800af58:	68bb      	ldr	r3, [r7, #8]
 800af5a:	f023 0310 	bic.w	r3, r3, #16
 800af5e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	461a      	mov	r2, r3
 800af66:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800af68:	61bb      	str	r3, [r7, #24]
 800af6a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af6c:	6979      	ldr	r1, [r7, #20]
 800af6e:	69ba      	ldr	r2, [r7, #24]
 800af70:	e841 2300 	strex	r3, r2, [r1]
 800af74:	613b      	str	r3, [r7, #16]
   return(result);
 800af76:	693b      	ldr	r3, [r7, #16]
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d1e6      	bne.n	800af4a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	69db      	ldr	r3, [r3, #28]
 800af82:	f003 0310 	and.w	r3, r3, #16
 800af86:	2b10      	cmp	r3, #16
 800af88:	d103      	bne.n	800af92 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	2210      	movs	r2, #16
 800af90:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800af98:	4619      	mov	r1, r3
 800af9a:	6878      	ldr	r0, [r7, #4]
 800af9c:	f7fe fc60 	bl	8009860 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800afa0:	e00b      	b.n	800afba <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800afa2:	6878      	ldr	r0, [r7, #4]
 800afa4:	f7f6 fc86 	bl	80018b4 <HAL_UART_RxCpltCallback>
}
 800afa8:	e007      	b.n	800afba <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	699a      	ldr	r2, [r3, #24]
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	f042 0208 	orr.w	r2, r2, #8
 800afb8:	619a      	str	r2, [r3, #24]
}
 800afba:	bf00      	nop
 800afbc:	3770      	adds	r7, #112	@ 0x70
 800afbe:	46bd      	mov	sp, r7
 800afc0:	bd80      	pop	{r7, pc}
 800afc2:	bf00      	nop
 800afc4:	58000c00 	.word	0x58000c00

0800afc8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800afc8:	b580      	push	{r7, lr}
 800afca:	b0ac      	sub	sp, #176	@ 0xb0
 800afcc:	af00      	add	r7, sp, #0
 800afce:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800afd6:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	69db      	ldr	r3, [r3, #28]
 800afe0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	689b      	ldr	r3, [r3, #8]
 800aff4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800affe:	2b22      	cmp	r3, #34	@ 0x22
 800b000:	f040 8180 	bne.w	800b304 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800b00a:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b00e:	e123      	b.n	800b258 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b016:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800b01a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800b01e:	b2d9      	uxtb	r1, r3
 800b020:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800b024:	b2da      	uxtb	r2, r3
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b02a:	400a      	ands	r2, r1
 800b02c:	b2d2      	uxtb	r2, r2
 800b02e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b034:	1c5a      	adds	r2, r3, #1
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b040:	b29b      	uxth	r3, r3
 800b042:	3b01      	subs	r3, #1
 800b044:	b29a      	uxth	r2, r3
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	69db      	ldr	r3, [r3, #28]
 800b052:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800b056:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b05a:	f003 0307 	and.w	r3, r3, #7
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d053      	beq.n	800b10a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b062:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b066:	f003 0301 	and.w	r3, r3, #1
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d011      	beq.n	800b092 <UART_RxISR_8BIT_FIFOEN+0xca>
 800b06e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800b072:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b076:	2b00      	cmp	r3, #0
 800b078:	d00b      	beq.n	800b092 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	2201      	movs	r2, #1
 800b080:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b088:	f043 0201 	orr.w	r2, r3, #1
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b092:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b096:	f003 0302 	and.w	r3, r3, #2
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d011      	beq.n	800b0c2 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800b09e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b0a2:	f003 0301 	and.w	r3, r3, #1
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d00b      	beq.n	800b0c2 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	2202      	movs	r2, #2
 800b0b0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b0b8:	f043 0204 	orr.w	r2, r3, #4
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b0c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b0c6:	f003 0304 	and.w	r3, r3, #4
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d011      	beq.n	800b0f2 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800b0ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b0d2:	f003 0301 	and.w	r3, r3, #1
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d00b      	beq.n	800b0f2 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	2204      	movs	r2, #4
 800b0e0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b0e8:	f043 0202 	orr.w	r2, r3, #2
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d006      	beq.n	800b10a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b0fc:	6878      	ldr	r0, [r7, #4]
 800b0fe:	f7fe fba5 	bl	800984c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	2200      	movs	r2, #0
 800b106:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b110:	b29b      	uxth	r3, r3
 800b112:	2b00      	cmp	r3, #0
 800b114:	f040 80a0 	bne.w	800b258 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b11e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b120:	e853 3f00 	ldrex	r3, [r3]
 800b124:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800b126:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b128:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b12c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	461a      	mov	r2, r3
 800b136:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b13a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800b13c:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b13e:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800b140:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800b142:	e841 2300 	strex	r3, r2, [r1]
 800b146:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800b148:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d1e4      	bne.n	800b118 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	3308      	adds	r3, #8
 800b154:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b156:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b158:	e853 3f00 	ldrex	r3, [r3]
 800b15c:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800b15e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b160:	4b6e      	ldr	r3, [pc, #440]	@ (800b31c <UART_RxISR_8BIT_FIFOEN+0x354>)
 800b162:	4013      	ands	r3, r2
 800b164:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	3308      	adds	r3, #8
 800b16e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800b172:	66ba      	str	r2, [r7, #104]	@ 0x68
 800b174:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b176:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800b178:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800b17a:	e841 2300 	strex	r3, r2, [r1]
 800b17e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800b180:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b182:	2b00      	cmp	r3, #0
 800b184:	d1e3      	bne.n	800b14e <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	2220      	movs	r2, #32
 800b18a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	2200      	movs	r2, #0
 800b192:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	2200      	movs	r2, #0
 800b198:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	4a60      	ldr	r2, [pc, #384]	@ (800b320 <UART_RxISR_8BIT_FIFOEN+0x358>)
 800b1a0:	4293      	cmp	r3, r2
 800b1a2:	d021      	beq.n	800b1e8 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	685b      	ldr	r3, [r3, #4]
 800b1aa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d01a      	beq.n	800b1e8 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1b8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b1ba:	e853 3f00 	ldrex	r3, [r3]
 800b1be:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800b1c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b1c2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b1c6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	461a      	mov	r2, r3
 800b1d0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800b1d4:	657b      	str	r3, [r7, #84]	@ 0x54
 800b1d6:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1d8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b1da:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800b1dc:	e841 2300 	strex	r3, r2, [r1]
 800b1e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800b1e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d1e4      	bne.n	800b1b2 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b1ec:	2b01      	cmp	r3, #1
 800b1ee:	d130      	bne.n	800b252 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	2200      	movs	r2, #0
 800b1f4:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b1fe:	e853 3f00 	ldrex	r3, [r3]
 800b202:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b204:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b206:	f023 0310 	bic.w	r3, r3, #16
 800b20a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	461a      	mov	r2, r3
 800b214:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b218:	643b      	str	r3, [r7, #64]	@ 0x40
 800b21a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b21c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b21e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b220:	e841 2300 	strex	r3, r2, [r1]
 800b224:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b226:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d1e4      	bne.n	800b1f6 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	69db      	ldr	r3, [r3, #28]
 800b232:	f003 0310 	and.w	r3, r3, #16
 800b236:	2b10      	cmp	r3, #16
 800b238:	d103      	bne.n	800b242 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	2210      	movs	r2, #16
 800b240:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b248:	4619      	mov	r1, r3
 800b24a:	6878      	ldr	r0, [r7, #4]
 800b24c:	f7fe fb08 	bl	8009860 <HAL_UARTEx_RxEventCallback>
 800b250:	e002      	b.n	800b258 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800b252:	6878      	ldr	r0, [r7, #4]
 800b254:	f7f6 fb2e 	bl	80018b4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b258:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d006      	beq.n	800b26e <UART_RxISR_8BIT_FIFOEN+0x2a6>
 800b260:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b264:	f003 0320 	and.w	r3, r3, #32
 800b268:	2b00      	cmp	r3, #0
 800b26a:	f47f aed1 	bne.w	800b010 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b274:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800b278:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d049      	beq.n	800b314 <UART_RxISR_8BIT_FIFOEN+0x34c>
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800b286:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800b28a:	429a      	cmp	r2, r3
 800b28c:	d242      	bcs.n	800b314 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	3308      	adds	r3, #8
 800b294:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b296:	6a3b      	ldr	r3, [r7, #32]
 800b298:	e853 3f00 	ldrex	r3, [r3]
 800b29c:	61fb      	str	r3, [r7, #28]
   return(result);
 800b29e:	69fb      	ldr	r3, [r7, #28]
 800b2a0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b2a4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	3308      	adds	r3, #8
 800b2ae:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800b2b2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b2b4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2b6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b2b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b2ba:	e841 2300 	strex	r3, r2, [r1]
 800b2be:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b2c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d1e3      	bne.n	800b28e <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	4a16      	ldr	r2, [pc, #88]	@ (800b324 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800b2ca:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	e853 3f00 	ldrex	r3, [r3]
 800b2d8:	60bb      	str	r3, [r7, #8]
   return(result);
 800b2da:	68bb      	ldr	r3, [r7, #8]
 800b2dc:	f043 0320 	orr.w	r3, r3, #32
 800b2e0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	461a      	mov	r2, r3
 800b2ea:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800b2ee:	61bb      	str	r3, [r7, #24]
 800b2f0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2f2:	6979      	ldr	r1, [r7, #20]
 800b2f4:	69ba      	ldr	r2, [r7, #24]
 800b2f6:	e841 2300 	strex	r3, r2, [r1]
 800b2fa:	613b      	str	r3, [r7, #16]
   return(result);
 800b2fc:	693b      	ldr	r3, [r7, #16]
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d1e4      	bne.n	800b2cc <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b302:	e007      	b.n	800b314 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	699a      	ldr	r2, [r3, #24]
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	f042 0208 	orr.w	r2, r2, #8
 800b312:	619a      	str	r2, [r3, #24]
}
 800b314:	bf00      	nop
 800b316:	37b0      	adds	r7, #176	@ 0xb0
 800b318:	46bd      	mov	sp, r7
 800b31a:	bd80      	pop	{r7, pc}
 800b31c:	effffffe 	.word	0xeffffffe
 800b320:	58000c00 	.word	0x58000c00
 800b324:	0800ac59 	.word	0x0800ac59

0800b328 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800b328:	b580      	push	{r7, lr}
 800b32a:	b0ae      	sub	sp, #184	@ 0xb8
 800b32c:	af00      	add	r7, sp, #0
 800b32e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800b336:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	69db      	ldr	r3, [r3, #28]
 800b340:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	689b      	ldr	r3, [r3, #8]
 800b354:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b35e:	2b22      	cmp	r3, #34	@ 0x22
 800b360:	f040 8184 	bne.w	800b66c <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800b36a:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b36e:	e127      	b.n	800b5c0 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b376:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b37e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800b382:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800b386:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800b38a:	4013      	ands	r3, r2
 800b38c:	b29a      	uxth	r2, r3
 800b38e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b392:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b398:	1c9a      	adds	r2, r3, #2
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b3a4:	b29b      	uxth	r3, r3
 800b3a6:	3b01      	subs	r3, #1
 800b3a8:	b29a      	uxth	r2, r3
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	69db      	ldr	r3, [r3, #28]
 800b3b6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800b3ba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b3be:	f003 0307 	and.w	r3, r3, #7
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d053      	beq.n	800b46e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b3c6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b3ca:	f003 0301 	and.w	r3, r3, #1
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d011      	beq.n	800b3f6 <UART_RxISR_16BIT_FIFOEN+0xce>
 800b3d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b3d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d00b      	beq.n	800b3f6 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	2201      	movs	r2, #1
 800b3e4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b3ec:	f043 0201 	orr.w	r2, r3, #1
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b3f6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b3fa:	f003 0302 	and.w	r3, r3, #2
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d011      	beq.n	800b426 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800b402:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b406:	f003 0301 	and.w	r3, r3, #1
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d00b      	beq.n	800b426 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	2202      	movs	r2, #2
 800b414:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b41c:	f043 0204 	orr.w	r2, r3, #4
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b426:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b42a:	f003 0304 	and.w	r3, r3, #4
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d011      	beq.n	800b456 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800b432:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b436:	f003 0301 	and.w	r3, r3, #1
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d00b      	beq.n	800b456 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	2204      	movs	r2, #4
 800b444:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b44c:	f043 0202 	orr.w	r2, r3, #2
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d006      	beq.n	800b46e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b460:	6878      	ldr	r0, [r7, #4]
 800b462:	f7fe f9f3 	bl	800984c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	2200      	movs	r2, #0
 800b46a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b474:	b29b      	uxth	r3, r3
 800b476:	2b00      	cmp	r3, #0
 800b478:	f040 80a2 	bne.w	800b5c0 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b482:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b484:	e853 3f00 	ldrex	r3, [r3]
 800b488:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800b48a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b48c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b490:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	461a      	mov	r2, r3
 800b49a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b49e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b4a2:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4a4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800b4a6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800b4aa:	e841 2300 	strex	r3, r2, [r1]
 800b4ae:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800b4b0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d1e2      	bne.n	800b47c <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	3308      	adds	r3, #8
 800b4bc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4be:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b4c0:	e853 3f00 	ldrex	r3, [r3]
 800b4c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800b4c6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800b4c8:	4b6e      	ldr	r3, [pc, #440]	@ (800b684 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 800b4ca:	4013      	ands	r3, r2
 800b4cc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	3308      	adds	r3, #8
 800b4d6:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800b4da:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800b4dc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4de:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800b4e0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b4e2:	e841 2300 	strex	r3, r2, [r1]
 800b4e6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800b4e8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d1e3      	bne.n	800b4b6 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	2220      	movs	r2, #32
 800b4f2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	2200      	movs	r2, #0
 800b4fa:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	2200      	movs	r2, #0
 800b500:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	4a60      	ldr	r2, [pc, #384]	@ (800b688 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800b508:	4293      	cmp	r3, r2
 800b50a:	d021      	beq.n	800b550 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	685b      	ldr	r3, [r3, #4]
 800b512:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b516:	2b00      	cmp	r3, #0
 800b518:	d01a      	beq.n	800b550 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b520:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b522:	e853 3f00 	ldrex	r3, [r3]
 800b526:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b528:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b52a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b52e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	461a      	mov	r2, r3
 800b538:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800b53c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b53e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b540:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b542:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b544:	e841 2300 	strex	r3, r2, [r1]
 800b548:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b54a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d1e4      	bne.n	800b51a <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b554:	2b01      	cmp	r3, #1
 800b556:	d130      	bne.n	800b5ba <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	2200      	movs	r2, #0
 800b55c:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b564:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b566:	e853 3f00 	ldrex	r3, [r3]
 800b56a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b56c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b56e:	f023 0310 	bic.w	r3, r3, #16
 800b572:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	461a      	mov	r2, r3
 800b57c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800b580:	647b      	str	r3, [r7, #68]	@ 0x44
 800b582:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b584:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b586:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b588:	e841 2300 	strex	r3, r2, [r1]
 800b58c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b58e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b590:	2b00      	cmp	r3, #0
 800b592:	d1e4      	bne.n	800b55e <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	69db      	ldr	r3, [r3, #28]
 800b59a:	f003 0310 	and.w	r3, r3, #16
 800b59e:	2b10      	cmp	r3, #16
 800b5a0:	d103      	bne.n	800b5aa <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	2210      	movs	r2, #16
 800b5a8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b5b0:	4619      	mov	r1, r3
 800b5b2:	6878      	ldr	r0, [r7, #4]
 800b5b4:	f7fe f954 	bl	8009860 <HAL_UARTEx_RxEventCallback>
 800b5b8:	e002      	b.n	800b5c0 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800b5ba:	6878      	ldr	r0, [r7, #4]
 800b5bc:	f7f6 f97a 	bl	80018b4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b5c0:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d006      	beq.n	800b5d6 <UART_RxISR_16BIT_FIFOEN+0x2ae>
 800b5c8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b5cc:	f003 0320 	and.w	r3, r3, #32
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	f47f aecd 	bne.w	800b370 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b5dc:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800b5e0:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d049      	beq.n	800b67c <UART_RxISR_16BIT_FIFOEN+0x354>
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800b5ee:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800b5f2:	429a      	cmp	r2, r3
 800b5f4:	d242      	bcs.n	800b67c <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	3308      	adds	r3, #8
 800b5fc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b600:	e853 3f00 	ldrex	r3, [r3]
 800b604:	623b      	str	r3, [r7, #32]
   return(result);
 800b606:	6a3b      	ldr	r3, [r7, #32]
 800b608:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b60c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	3308      	adds	r3, #8
 800b616:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800b61a:	633a      	str	r2, [r7, #48]	@ 0x30
 800b61c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b61e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b620:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b622:	e841 2300 	strex	r3, r2, [r1]
 800b626:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b628:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d1e3      	bne.n	800b5f6 <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	4a16      	ldr	r2, [pc, #88]	@ (800b68c <UART_RxISR_16BIT_FIFOEN+0x364>)
 800b632:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b63a:	693b      	ldr	r3, [r7, #16]
 800b63c:	e853 3f00 	ldrex	r3, [r3]
 800b640:	60fb      	str	r3, [r7, #12]
   return(result);
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	f043 0320 	orr.w	r3, r3, #32
 800b648:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	461a      	mov	r2, r3
 800b652:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b656:	61fb      	str	r3, [r7, #28]
 800b658:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b65a:	69b9      	ldr	r1, [r7, #24]
 800b65c:	69fa      	ldr	r2, [r7, #28]
 800b65e:	e841 2300 	strex	r3, r2, [r1]
 800b662:	617b      	str	r3, [r7, #20]
   return(result);
 800b664:	697b      	ldr	r3, [r7, #20]
 800b666:	2b00      	cmp	r3, #0
 800b668:	d1e4      	bne.n	800b634 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b66a:	e007      	b.n	800b67c <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	699a      	ldr	r2, [r3, #24]
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	f042 0208 	orr.w	r2, r2, #8
 800b67a:	619a      	str	r2, [r3, #24]
}
 800b67c:	bf00      	nop
 800b67e:	37b8      	adds	r7, #184	@ 0xb8
 800b680:	46bd      	mov	sp, r7
 800b682:	bd80      	pop	{r7, pc}
 800b684:	effffffe 	.word	0xeffffffe
 800b688:	58000c00 	.word	0x58000c00
 800b68c:	0800ae11 	.word	0x0800ae11

0800b690 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b690:	b480      	push	{r7}
 800b692:	b083      	sub	sp, #12
 800b694:	af00      	add	r7, sp, #0
 800b696:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b698:	bf00      	nop
 800b69a:	370c      	adds	r7, #12
 800b69c:	46bd      	mov	sp, r7
 800b69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a2:	4770      	bx	lr

0800b6a4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b6a4:	b480      	push	{r7}
 800b6a6:	b083      	sub	sp, #12
 800b6a8:	af00      	add	r7, sp, #0
 800b6aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b6ac:	bf00      	nop
 800b6ae:	370c      	adds	r7, #12
 800b6b0:	46bd      	mov	sp, r7
 800b6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6b6:	4770      	bx	lr

0800b6b8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b6b8:	b480      	push	{r7}
 800b6ba:	b083      	sub	sp, #12
 800b6bc:	af00      	add	r7, sp, #0
 800b6be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b6c0:	bf00      	nop
 800b6c2:	370c      	adds	r7, #12
 800b6c4:	46bd      	mov	sp, r7
 800b6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ca:	4770      	bx	lr

0800b6cc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b6cc:	b480      	push	{r7}
 800b6ce:	b085      	sub	sp, #20
 800b6d0:	af00      	add	r7, sp, #0
 800b6d2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b6da:	2b01      	cmp	r3, #1
 800b6dc:	d101      	bne.n	800b6e2 <HAL_UARTEx_DisableFifoMode+0x16>
 800b6de:	2302      	movs	r3, #2
 800b6e0:	e027      	b.n	800b732 <HAL_UARTEx_DisableFifoMode+0x66>
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	2201      	movs	r2, #1
 800b6e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	2224      	movs	r2, #36	@ 0x24
 800b6ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	681a      	ldr	r2, [r3, #0]
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	f022 0201 	bic.w	r2, r2, #1
 800b708:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b710:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	2200      	movs	r2, #0
 800b716:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	68fa      	ldr	r2, [r7, #12]
 800b71e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	2220      	movs	r2, #32
 800b724:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	2200      	movs	r2, #0
 800b72c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b730:	2300      	movs	r3, #0
}
 800b732:	4618      	mov	r0, r3
 800b734:	3714      	adds	r7, #20
 800b736:	46bd      	mov	sp, r7
 800b738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b73c:	4770      	bx	lr

0800b73e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b73e:	b580      	push	{r7, lr}
 800b740:	b084      	sub	sp, #16
 800b742:	af00      	add	r7, sp, #0
 800b744:	6078      	str	r0, [r7, #4]
 800b746:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b74e:	2b01      	cmp	r3, #1
 800b750:	d101      	bne.n	800b756 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b752:	2302      	movs	r3, #2
 800b754:	e02d      	b.n	800b7b2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	2201      	movs	r2, #1
 800b75a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	2224      	movs	r2, #36	@ 0x24
 800b762:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	681a      	ldr	r2, [r3, #0]
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	f022 0201 	bic.w	r2, r2, #1
 800b77c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	689b      	ldr	r3, [r3, #8]
 800b784:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	683a      	ldr	r2, [r7, #0]
 800b78e:	430a      	orrs	r2, r1
 800b790:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b792:	6878      	ldr	r0, [r7, #4]
 800b794:	f000 f850 	bl	800b838 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	68fa      	ldr	r2, [r7, #12]
 800b79e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	2220      	movs	r2, #32
 800b7a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	2200      	movs	r2, #0
 800b7ac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b7b0:	2300      	movs	r3, #0
}
 800b7b2:	4618      	mov	r0, r3
 800b7b4:	3710      	adds	r7, #16
 800b7b6:	46bd      	mov	sp, r7
 800b7b8:	bd80      	pop	{r7, pc}

0800b7ba <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b7ba:	b580      	push	{r7, lr}
 800b7bc:	b084      	sub	sp, #16
 800b7be:	af00      	add	r7, sp, #0
 800b7c0:	6078      	str	r0, [r7, #4]
 800b7c2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b7ca:	2b01      	cmp	r3, #1
 800b7cc:	d101      	bne.n	800b7d2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b7ce:	2302      	movs	r3, #2
 800b7d0:	e02d      	b.n	800b82e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	2201      	movs	r2, #1
 800b7d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	2224      	movs	r2, #36	@ 0x24
 800b7de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	681a      	ldr	r2, [r3, #0]
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	f022 0201 	bic.w	r2, r2, #1
 800b7f8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	689b      	ldr	r3, [r3, #8]
 800b800:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	683a      	ldr	r2, [r7, #0]
 800b80a:	430a      	orrs	r2, r1
 800b80c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b80e:	6878      	ldr	r0, [r7, #4]
 800b810:	f000 f812 	bl	800b838 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	68fa      	ldr	r2, [r7, #12]
 800b81a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	2220      	movs	r2, #32
 800b820:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	2200      	movs	r2, #0
 800b828:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b82c:	2300      	movs	r3, #0
}
 800b82e:	4618      	mov	r0, r3
 800b830:	3710      	adds	r7, #16
 800b832:	46bd      	mov	sp, r7
 800b834:	bd80      	pop	{r7, pc}
	...

0800b838 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b838:	b480      	push	{r7}
 800b83a:	b085      	sub	sp, #20
 800b83c:	af00      	add	r7, sp, #0
 800b83e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b844:	2b00      	cmp	r3, #0
 800b846:	d108      	bne.n	800b85a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	2201      	movs	r2, #1
 800b84c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	2201      	movs	r2, #1
 800b854:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b858:	e031      	b.n	800b8be <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b85a:	2310      	movs	r3, #16
 800b85c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b85e:	2310      	movs	r3, #16
 800b860:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	689b      	ldr	r3, [r3, #8]
 800b868:	0e5b      	lsrs	r3, r3, #25
 800b86a:	b2db      	uxtb	r3, r3
 800b86c:	f003 0307 	and.w	r3, r3, #7
 800b870:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	689b      	ldr	r3, [r3, #8]
 800b878:	0f5b      	lsrs	r3, r3, #29
 800b87a:	b2db      	uxtb	r3, r3
 800b87c:	f003 0307 	and.w	r3, r3, #7
 800b880:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b882:	7bbb      	ldrb	r3, [r7, #14]
 800b884:	7b3a      	ldrb	r2, [r7, #12]
 800b886:	4911      	ldr	r1, [pc, #68]	@ (800b8cc <UARTEx_SetNbDataToProcess+0x94>)
 800b888:	5c8a      	ldrb	r2, [r1, r2]
 800b88a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b88e:	7b3a      	ldrb	r2, [r7, #12]
 800b890:	490f      	ldr	r1, [pc, #60]	@ (800b8d0 <UARTEx_SetNbDataToProcess+0x98>)
 800b892:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b894:	fb93 f3f2 	sdiv	r3, r3, r2
 800b898:	b29a      	uxth	r2, r3
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b8a0:	7bfb      	ldrb	r3, [r7, #15]
 800b8a2:	7b7a      	ldrb	r2, [r7, #13]
 800b8a4:	4909      	ldr	r1, [pc, #36]	@ (800b8cc <UARTEx_SetNbDataToProcess+0x94>)
 800b8a6:	5c8a      	ldrb	r2, [r1, r2]
 800b8a8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b8ac:	7b7a      	ldrb	r2, [r7, #13]
 800b8ae:	4908      	ldr	r1, [pc, #32]	@ (800b8d0 <UARTEx_SetNbDataToProcess+0x98>)
 800b8b0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b8b2:	fb93 f3f2 	sdiv	r3, r3, r2
 800b8b6:	b29a      	uxth	r2, r3
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800b8be:	bf00      	nop
 800b8c0:	3714      	adds	r7, #20
 800b8c2:	46bd      	mov	sp, r7
 800b8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c8:	4770      	bx	lr
 800b8ca:	bf00      	nop
 800b8cc:	08012d84 	.word	0x08012d84
 800b8d0:	08012d8c 	.word	0x08012d8c

0800b8d4 <Data_Analyse>:
/**
 * @brief 数据解析函数  如更换MCU平台或更换软件库，只需将串口接收到的值传入该函数即可解析
 * @param  rec 串口接收到的字节数据
 */
void Data_Analyse(uint8_t rec)
{
 800b8d4:	b480      	push	{r7}
 800b8d6:	b083      	sub	sp, #12
 800b8d8:	af00      	add	r7, sp, #0
 800b8da:	4603      	mov	r3, r0
 800b8dc:	71fb      	strb	r3, [r7, #7]
		float ActVal[6];
	} posture;
	static uint8_t count = 0;
	static uint8_t i = 0;

	ch = rec;
 800b8de:	4a48      	ldr	r2, [pc, #288]	@ (800ba00 <Data_Analyse+0x12c>)
 800b8e0:	79fb      	ldrb	r3, [r7, #7]
 800b8e2:	7013      	strb	r3, [r2, #0]
//	HAL_UART_Transmit(&huart10, &ch, 1, 0xff);
//	HAL_UART_Transmit(&huart10, (uint8_t*) ch, 1, 0xff);
	switch (count)
 800b8e4:	4b47      	ldr	r3, [pc, #284]	@ (800ba04 <Data_Analyse+0x130>)
 800b8e6:	781b      	ldrb	r3, [r3, #0]
 800b8e8:	2b04      	cmp	r3, #4
 800b8ea:	d87c      	bhi.n	800b9e6 <Data_Analyse+0x112>
 800b8ec:	a201      	add	r2, pc, #4	@ (adr r2, 800b8f4 <Data_Analyse+0x20>)
 800b8ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8f2:	bf00      	nop
 800b8f4:	0800b909 	.word	0x0800b909
 800b8f8:	0800b927 	.word	0x0800b927
 800b8fc:	0800b953 	.word	0x0800b953
 800b900:	0800b989 	.word	0x0800b989
 800b904:	0800b9a7 	.word	0x0800b9a7
	{
	case 0:
		if (ch == 0x0d)
 800b908:	4b3d      	ldr	r3, [pc, #244]	@ (800ba00 <Data_Analyse+0x12c>)
 800b90a:	781b      	ldrb	r3, [r3, #0]
 800b90c:	2b0d      	cmp	r3, #13
 800b90e:	d106      	bne.n	800b91e <Data_Analyse+0x4a>
			count++;
 800b910:	4b3c      	ldr	r3, [pc, #240]	@ (800ba04 <Data_Analyse+0x130>)
 800b912:	781b      	ldrb	r3, [r3, #0]
 800b914:	3301      	adds	r3, #1
 800b916:	b2da      	uxtb	r2, r3
 800b918:	4b3a      	ldr	r3, [pc, #232]	@ (800ba04 <Data_Analyse+0x130>)
 800b91a:	701a      	strb	r2, [r3, #0]
		else
			count = 0;
		break;
 800b91c:	e06a      	b.n	800b9f4 <Data_Analyse+0x120>
			count = 0;
 800b91e:	4b39      	ldr	r3, [pc, #228]	@ (800ba04 <Data_Analyse+0x130>)
 800b920:	2200      	movs	r2, #0
 800b922:	701a      	strb	r2, [r3, #0]
		break;
 800b924:	e066      	b.n	800b9f4 <Data_Analyse+0x120>
	case 1:
		if (ch == 0x0a)
 800b926:	4b36      	ldr	r3, [pc, #216]	@ (800ba00 <Data_Analyse+0x12c>)
 800b928:	781b      	ldrb	r3, [r3, #0]
 800b92a:	2b0a      	cmp	r3, #10
 800b92c:	d109      	bne.n	800b942 <Data_Analyse+0x6e>
		{
			i = 0;
 800b92e:	4b36      	ldr	r3, [pc, #216]	@ (800ba08 <Data_Analyse+0x134>)
 800b930:	2200      	movs	r2, #0
 800b932:	701a      	strb	r2, [r3, #0]
			count++;
 800b934:	4b33      	ldr	r3, [pc, #204]	@ (800ba04 <Data_Analyse+0x130>)
 800b936:	781b      	ldrb	r3, [r3, #0]
 800b938:	3301      	adds	r3, #1
 800b93a:	b2da      	uxtb	r2, r3
 800b93c:	4b31      	ldr	r3, [pc, #196]	@ (800ba04 <Data_Analyse+0x130>)
 800b93e:	701a      	strb	r2, [r3, #0]
		}
		else if (ch == 0x0d)
			;
		else
			count = 0;
		break;
 800b940:	e055      	b.n	800b9ee <Data_Analyse+0x11a>
		else if (ch == 0x0d)
 800b942:	4b2f      	ldr	r3, [pc, #188]	@ (800ba00 <Data_Analyse+0x12c>)
 800b944:	781b      	ldrb	r3, [r3, #0]
 800b946:	2b0d      	cmp	r3, #13
 800b948:	d051      	beq.n	800b9ee <Data_Analyse+0x11a>
			count = 0;
 800b94a:	4b2e      	ldr	r3, [pc, #184]	@ (800ba04 <Data_Analyse+0x130>)
 800b94c:	2200      	movs	r2, #0
 800b94e:	701a      	strb	r2, [r3, #0]
		break;
 800b950:	e04d      	b.n	800b9ee <Data_Analyse+0x11a>
	case 2:
		posture.date[i] = ch;
 800b952:	4b2d      	ldr	r3, [pc, #180]	@ (800ba08 <Data_Analyse+0x134>)
 800b954:	781b      	ldrb	r3, [r3, #0]
 800b956:	461a      	mov	r2, r3
 800b958:	4b29      	ldr	r3, [pc, #164]	@ (800ba00 <Data_Analyse+0x12c>)
 800b95a:	7819      	ldrb	r1, [r3, #0]
 800b95c:	4b2b      	ldr	r3, [pc, #172]	@ (800ba0c <Data_Analyse+0x138>)
 800b95e:	5499      	strb	r1, [r3, r2]
		i++;
 800b960:	4b29      	ldr	r3, [pc, #164]	@ (800ba08 <Data_Analyse+0x134>)
 800b962:	781b      	ldrb	r3, [r3, #0]
 800b964:	3301      	adds	r3, #1
 800b966:	b2da      	uxtb	r2, r3
 800b968:	4b27      	ldr	r3, [pc, #156]	@ (800ba08 <Data_Analyse+0x134>)
 800b96a:	701a      	strb	r2, [r3, #0]
		if (i >= 24)
 800b96c:	4b26      	ldr	r3, [pc, #152]	@ (800ba08 <Data_Analyse+0x134>)
 800b96e:	781b      	ldrb	r3, [r3, #0]
 800b970:	2b17      	cmp	r3, #23
 800b972:	d93e      	bls.n	800b9f2 <Data_Analyse+0x11e>
		{
			i = 0;
 800b974:	4b24      	ldr	r3, [pc, #144]	@ (800ba08 <Data_Analyse+0x134>)
 800b976:	2200      	movs	r2, #0
 800b978:	701a      	strb	r2, [r3, #0]
			count++;
 800b97a:	4b22      	ldr	r3, [pc, #136]	@ (800ba04 <Data_Analyse+0x130>)
 800b97c:	781b      	ldrb	r3, [r3, #0]
 800b97e:	3301      	adds	r3, #1
 800b980:	b2da      	uxtb	r2, r3
 800b982:	4b20      	ldr	r3, [pc, #128]	@ (800ba04 <Data_Analyse+0x130>)
 800b984:	701a      	strb	r2, [r3, #0]
		}
		break;
 800b986:	e034      	b.n	800b9f2 <Data_Analyse+0x11e>
	case 3:
		if (ch == 0x0a)
 800b988:	4b1d      	ldr	r3, [pc, #116]	@ (800ba00 <Data_Analyse+0x12c>)
 800b98a:	781b      	ldrb	r3, [r3, #0]
 800b98c:	2b0a      	cmp	r3, #10
 800b98e:	d106      	bne.n	800b99e <Data_Analyse+0xca>
			count++;
 800b990:	4b1c      	ldr	r3, [pc, #112]	@ (800ba04 <Data_Analyse+0x130>)
 800b992:	781b      	ldrb	r3, [r3, #0]
 800b994:	3301      	adds	r3, #1
 800b996:	b2da      	uxtb	r2, r3
 800b998:	4b1a      	ldr	r3, [pc, #104]	@ (800ba04 <Data_Analyse+0x130>)
 800b99a:	701a      	strb	r2, [r3, #0]
		else
			count = 0;
		break;
 800b99c:	e02a      	b.n	800b9f4 <Data_Analyse+0x120>
			count = 0;
 800b99e:	4b19      	ldr	r3, [pc, #100]	@ (800ba04 <Data_Analyse+0x130>)
 800b9a0:	2200      	movs	r2, #0
 800b9a2:	701a      	strb	r2, [r3, #0]
		break;
 800b9a4:	e026      	b.n	800b9f4 <Data_Analyse+0x120>
	case 4:
		if (ch == 0x0d)
 800b9a6:	4b16      	ldr	r3, [pc, #88]	@ (800ba00 <Data_Analyse+0x12c>)
 800b9a8:	781b      	ldrb	r3, [r3, #0]
 800b9aa:	2b0d      	cmp	r3, #13
 800b9ac:	d117      	bne.n	800b9de <Data_Analyse+0x10a>
		{
			zangle = posture.ActVal[0];
 800b9ae:	4b17      	ldr	r3, [pc, #92]	@ (800ba0c <Data_Analyse+0x138>)
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	4a17      	ldr	r2, [pc, #92]	@ (800ba10 <Data_Analyse+0x13c>)
 800b9b4:	6013      	str	r3, [r2, #0]
			xangle = posture.ActVal[1];
 800b9b6:	4b15      	ldr	r3, [pc, #84]	@ (800ba0c <Data_Analyse+0x138>)
 800b9b8:	685b      	ldr	r3, [r3, #4]
 800b9ba:	4a16      	ldr	r2, [pc, #88]	@ (800ba14 <Data_Analyse+0x140>)
 800b9bc:	6013      	str	r3, [r2, #0]
			yangle = posture.ActVal[2];
 800b9be:	4b13      	ldr	r3, [pc, #76]	@ (800ba0c <Data_Analyse+0x138>)
 800b9c0:	689b      	ldr	r3, [r3, #8]
 800b9c2:	4a15      	ldr	r2, [pc, #84]	@ (800ba18 <Data_Analyse+0x144>)
 800b9c4:	6013      	str	r3, [r2, #0]
			pos_x = posture.ActVal[3];
 800b9c6:	4b11      	ldr	r3, [pc, #68]	@ (800ba0c <Data_Analyse+0x138>)
 800b9c8:	68db      	ldr	r3, [r3, #12]
 800b9ca:	4a14      	ldr	r2, [pc, #80]	@ (800ba1c <Data_Analyse+0x148>)
 800b9cc:	6013      	str	r3, [r2, #0]
			pos_y = posture.ActVal[4];
 800b9ce:	4b0f      	ldr	r3, [pc, #60]	@ (800ba0c <Data_Analyse+0x138>)
 800b9d0:	691b      	ldr	r3, [r3, #16]
 800b9d2:	4a13      	ldr	r2, [pc, #76]	@ (800ba20 <Data_Analyse+0x14c>)
 800b9d4:	6013      	str	r3, [r2, #0]
			w_z = posture.ActVal[5];
 800b9d6:	4b0d      	ldr	r3, [pc, #52]	@ (800ba0c <Data_Analyse+0x138>)
 800b9d8:	695b      	ldr	r3, [r3, #20]
 800b9da:	4a12      	ldr	r2, [pc, #72]	@ (800ba24 <Data_Analyse+0x150>)
 800b9dc:	6013      	str	r3, [r2, #0]
		}
		count = 0;
 800b9de:	4b09      	ldr	r3, [pc, #36]	@ (800ba04 <Data_Analyse+0x130>)
 800b9e0:	2200      	movs	r2, #0
 800b9e2:	701a      	strb	r2, [r3, #0]
		break;
 800b9e4:	e006      	b.n	800b9f4 <Data_Analyse+0x120>
	default:
		count = 0;
 800b9e6:	4b07      	ldr	r3, [pc, #28]	@ (800ba04 <Data_Analyse+0x130>)
 800b9e8:	2200      	movs	r2, #0
 800b9ea:	701a      	strb	r2, [r3, #0]
		break;
 800b9ec:	e002      	b.n	800b9f4 <Data_Analyse+0x120>
		break;
 800b9ee:	bf00      	nop
 800b9f0:	e000      	b.n	800b9f4 <Data_Analyse+0x120>
		break;
 800b9f2:	bf00      	nop
	}
}
 800b9f4:	bf00      	nop
 800b9f6:	370c      	adds	r7, #12
 800b9f8:	46bd      	mov	sp, r7
 800b9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9fe:	4770      	bx	lr
 800ba00:	24000b08 	.word	0x24000b08
 800ba04:	24000b09 	.word	0x24000b09
 800ba08:	24000b0a 	.word	0x24000b0a
 800ba0c:	24000b0c 	.word	0x24000b0c
 800ba10:	24000af8 	.word	0x24000af8
 800ba14:	24000afc 	.word	0x24000afc
 800ba18:	24000b00 	.word	0x24000b00
 800ba1c:	24000af0 	.word	0x24000af0
 800ba20:	24000af4 	.word	0x24000af4
 800ba24:	24000b04 	.word	0x24000b04

0800ba28 <Move_Arm>:
extern float tx_target;
extern float ty_target;
extern bool TX2_ENABLE;
//控制单个舵机运动
//参数：sevoID:舵机ID，Position:转动角度（这里以270°为例）,Time:转动时间
void Move_Arm(uint8_t servoID, int16_t Position, uint16_t Time) {
 800ba28:	b580      	push	{r7, lr}
 800ba2a:	b086      	sub	sp, #24
 800ba2c:	af00      	add	r7, sp, #0
 800ba2e:	4603      	mov	r3, r0
 800ba30:	71fb      	strb	r3, [r7, #7]
 800ba32:	460b      	mov	r3, r1
 800ba34:	80bb      	strh	r3, [r7, #4]
 800ba36:	4613      	mov	r3, r2
 800ba38:	807b      	strh	r3, [r7, #2]
	uint8_t TxBuf[11];
	if (servoID > 31 || !(Time > 0) || Position > 32767) {
 800ba3a:	79fb      	ldrb	r3, [r7, #7]
 800ba3c:	2b1f      	cmp	r3, #31
 800ba3e:	d82b      	bhi.n	800ba98 <Move_Arm+0x70>
 800ba40:	887b      	ldrh	r3, [r7, #2]
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d028      	beq.n	800ba98 <Move_Arm+0x70>
		return;
	}
	TxBuf[0] = FRAME_HEADER;
 800ba46:	2355      	movs	r3, #85	@ 0x55
 800ba48:	733b      	strb	r3, [r7, #12]
	TxBuf[1] = FRAME_HEADER;
 800ba4a:	2355      	movs	r3, #85	@ 0x55
 800ba4c:	737b      	strb	r3, [r7, #13]
	TxBuf[2] = 8;
 800ba4e:	2308      	movs	r3, #8
 800ba50:	73bb      	strb	r3, [r7, #14]
	TxBuf[3] = CMD_SERVO_MOVE;
 800ba52:	2303      	movs	r3, #3
 800ba54:	73fb      	strb	r3, [r7, #15]
	TxBuf[4] = 1;
 800ba56:	2301      	movs	r3, #1
 800ba58:	743b      	strb	r3, [r7, #16]
	TxBuf[5] = (uint8_t) Time;
 800ba5a:	887b      	ldrh	r3, [r7, #2]
 800ba5c:	b2db      	uxtb	r3, r3
 800ba5e:	747b      	strb	r3, [r7, #17]
	TxBuf[6] = (uint8_t) (Time >> 8);
 800ba60:	887b      	ldrh	r3, [r7, #2]
 800ba62:	0a1b      	lsrs	r3, r3, #8
 800ba64:	b29b      	uxth	r3, r3
 800ba66:	b2db      	uxtb	r3, r3
 800ba68:	74bb      	strb	r3, [r7, #18]
	TxBuf[7] = servoID;
 800ba6a:	79fb      	ldrb	r3, [r7, #7]
 800ba6c:	74fb      	strb	r3, [r7, #19]
	TxBuf[8] = (uint8_t) Position;
 800ba6e:	88bb      	ldrh	r3, [r7, #4]
 800ba70:	b2db      	uxtb	r3, r3
 800ba72:	753b      	strb	r3, [r7, #20]
	TxBuf[9] = (uint8_t) (Position >> 8);
 800ba74:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800ba78:	121b      	asrs	r3, r3, #8
 800ba7a:	b21b      	sxth	r3, r3
 800ba7c:	b2db      	uxtb	r3, r3
 800ba7e:	757b      	strb	r3, [r7, #21]

	HAL_UART_Transmit(&jixiebi_usart, TxBuf, 10, 0xffff);
 800ba80:	f107 010c 	add.w	r1, r7, #12
 800ba84:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ba88:	220a      	movs	r2, #10
 800ba8a:	4805      	ldr	r0, [pc, #20]	@ (800baa0 <Move_Arm+0x78>)
 800ba8c:	f7fd f978 	bl	8008d80 <HAL_UART_Transmit>
	HAL_Delay(5);
 800ba90:	2005      	movs	r0, #5
 800ba92:	f7f7 fbe3 	bl	800325c <HAL_Delay>
 800ba96:	e000      	b.n	800ba9a <Move_Arm+0x72>
		return;
 800ba98:	bf00      	nop

}
 800ba9a:	3718      	adds	r7, #24
 800ba9c:	46bd      	mov	sp, r7
 800ba9e:	bd80      	pop	{r7, pc}
 800baa0:	2400064c 	.word	0x2400064c

0800baa4 <Start>:

}

extern int QR_Flag;
void Start(void) //下降14000
{
 800baa4:	b580      	push	{r7, lr}
 800baa6:	b082      	sub	sp, #8
 800baa8:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart10, (uint8_t*) "我来扫码辣\n", sizeof("我来扫码辣\n") - 1,0xffff);
 800baaa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800baae:	2210      	movs	r2, #16
 800bab0:	4914      	ldr	r1, [pc, #80]	@ (800bb04 <Start+0x60>)
 800bab2:	4815      	ldr	r0, [pc, #84]	@ (800bb08 <Start+0x64>)
 800bab4:	f7fd f964 	bl	8008d80 <HAL_UART_Transmit>
	bool temp = Move_Line(RunSpeed, RunAcc, 8250);
 800bab8:	f242 023a 	movw	r2, #8250	@ 0x203a
 800babc:	2178      	movs	r1, #120	@ 0x78
 800babe:	2064      	movs	r0, #100	@ 0x64
 800bac0:	f000 fb36 	bl	800c130 <Move_Line>
 800bac4:	4603      	mov	r3, r0
 800bac6:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(50);
 800bac8:	2032      	movs	r0, #50	@ 0x32
 800baca:	f7f7 fbc7 	bl	800325c <HAL_Delay>
	while(temp != true)
 800bace:	e007      	b.n	800bae0 <Start+0x3c>
	{
		temp = Move_Line(RunSpeed, RunAcc, 8250);
 800bad0:	f242 023a 	movw	r2, #8250	@ 0x203a
 800bad4:	2178      	movs	r1, #120	@ 0x78
 800bad6:	2064      	movs	r0, #100	@ 0x64
 800bad8:	f000 fb2a 	bl	800c130 <Move_Line>
 800badc:	4603      	mov	r3, r0
 800bade:	71fb      	strb	r3, [r7, #7]
	while(temp != true)
 800bae0:	79fb      	ldrb	r3, [r7, #7]
 800bae2:	f083 0301 	eor.w	r3, r3, #1
 800bae6:	b2db      	uxtb	r3, r3
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d1f1      	bne.n	800bad0 <Start+0x2c>
	}
	HAL_UART_Transmit(&huart10, (uint8_t*) "确认接收\n", sizeof("确认接收\n") - 1,0xffff);
 800baec:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800baf0:	220d      	movs	r2, #13
 800baf2:	4906      	ldr	r1, [pc, #24]	@ (800bb0c <Start+0x68>)
 800baf4:	4804      	ldr	r0, [pc, #16]	@ (800bb08 <Start+0x64>)
 800baf6:	f7fd f943 	bl	8008d80 <HAL_UART_Transmit>
//	}
	// 扫码完成后将爪子提起来
//	Move_Arm(6, 900, 300);
//	Drop_Location_jiang(320, 160, 8600);
	
}
 800bafa:	bf00      	nop
 800bafc:	3708      	adds	r7, #8
 800bafe:	46bd      	mov	sp, r7
 800bb00:	bd80      	pop	{r7, pc}
 800bb02:	bf00      	nop
 800bb04:	08012b18 	.word	0x08012b18
 800bb08:	24000a58 	.word	0x24000a58
 800bb0c:	08012b2c 	.word	0x08012b2c

0800bb10 <Emm_V5_Pos_Control>:
 * @param    raF ：相位/绝对标志，false为相对运动，true为绝对值运动
 * @param    snF ：多机同步标志 ，false为不启用，true为启用
 * @retval   地址 + 功能码 + 命令状态 + 校验字节
 */
void Emm_V5_Pos_Control(uint8_t addr, uint8_t dir, uint16_t vel, uint8_t acc,
		uint32_t clk, bool raF, bool snF) {
 800bb10:	b590      	push	{r4, r7, lr}
 800bb12:	b083      	sub	sp, #12
 800bb14:	af00      	add	r7, sp, #0
 800bb16:	4604      	mov	r4, r0
 800bb18:	4608      	mov	r0, r1
 800bb1a:	4611      	mov	r1, r2
 800bb1c:	461a      	mov	r2, r3
 800bb1e:	4623      	mov	r3, r4
 800bb20:	71fb      	strb	r3, [r7, #7]
 800bb22:	4603      	mov	r3, r0
 800bb24:	71bb      	strb	r3, [r7, #6]
 800bb26:	460b      	mov	r3, r1
 800bb28:	80bb      	strh	r3, [r7, #4]
 800bb2a:	4613      	mov	r3, r2
 800bb2c:	70fb      	strb	r3, [r7, #3]

	// 装载命令
	cmd[0] = addr;                      // 地址
 800bb2e:	4a20      	ldr	r2, [pc, #128]	@ (800bbb0 <Emm_V5_Pos_Control+0xa0>)
 800bb30:	79fb      	ldrb	r3, [r7, #7]
 800bb32:	7013      	strb	r3, [r2, #0]
	cmd[1] = 0xFD;                      // 功能码
 800bb34:	4b1e      	ldr	r3, [pc, #120]	@ (800bbb0 <Emm_V5_Pos_Control+0xa0>)
 800bb36:	22fd      	movs	r2, #253	@ 0xfd
 800bb38:	705a      	strb	r2, [r3, #1]
	cmd[2] = dir;                       // 方向
 800bb3a:	4a1d      	ldr	r2, [pc, #116]	@ (800bbb0 <Emm_V5_Pos_Control+0xa0>)
 800bb3c:	79bb      	ldrb	r3, [r7, #6]
 800bb3e:	7093      	strb	r3, [r2, #2]
	cmd[3] = (uint8_t) (vel >> 8);       // 速度(RPM)高8位字节
 800bb40:	88bb      	ldrh	r3, [r7, #4]
 800bb42:	0a1b      	lsrs	r3, r3, #8
 800bb44:	b29b      	uxth	r3, r3
 800bb46:	b2da      	uxtb	r2, r3
 800bb48:	4b19      	ldr	r3, [pc, #100]	@ (800bbb0 <Emm_V5_Pos_Control+0xa0>)
 800bb4a:	70da      	strb	r2, [r3, #3]
	cmd[4] = (uint8_t) (vel >> 0);       // 速度(RPM)低8位字节
 800bb4c:	88bb      	ldrh	r3, [r7, #4]
 800bb4e:	b2da      	uxtb	r2, r3
 800bb50:	4b17      	ldr	r3, [pc, #92]	@ (800bbb0 <Emm_V5_Pos_Control+0xa0>)
 800bb52:	711a      	strb	r2, [r3, #4]
	cmd[5] = acc;                       // 加速度，注意：0是直接启动
 800bb54:	4a16      	ldr	r2, [pc, #88]	@ (800bbb0 <Emm_V5_Pos_Control+0xa0>)
 800bb56:	78fb      	ldrb	r3, [r7, #3]
 800bb58:	7153      	strb	r3, [r2, #5]
	cmd[6] = (uint8_t) (clk >> 24);      // 脉冲数(bit24 - bit31)
 800bb5a:	69bb      	ldr	r3, [r7, #24]
 800bb5c:	0e1b      	lsrs	r3, r3, #24
 800bb5e:	b2da      	uxtb	r2, r3
 800bb60:	4b13      	ldr	r3, [pc, #76]	@ (800bbb0 <Emm_V5_Pos_Control+0xa0>)
 800bb62:	719a      	strb	r2, [r3, #6]
	cmd[7] = (uint8_t) (clk >> 16);      // 脉冲数(bit16 - bit23)
 800bb64:	69bb      	ldr	r3, [r7, #24]
 800bb66:	0c1b      	lsrs	r3, r3, #16
 800bb68:	b2da      	uxtb	r2, r3
 800bb6a:	4b11      	ldr	r3, [pc, #68]	@ (800bbb0 <Emm_V5_Pos_Control+0xa0>)
 800bb6c:	71da      	strb	r2, [r3, #7]
	cmd[8] = (uint8_t) (clk >> 8);       // 脉冲数(bit8  - bit15)
 800bb6e:	69bb      	ldr	r3, [r7, #24]
 800bb70:	0a1b      	lsrs	r3, r3, #8
 800bb72:	b2da      	uxtb	r2, r3
 800bb74:	4b0e      	ldr	r3, [pc, #56]	@ (800bbb0 <Emm_V5_Pos_Control+0xa0>)
 800bb76:	721a      	strb	r2, [r3, #8]
	cmd[9] = (uint8_t) (clk >> 0);       // 脉冲数(bit0  - bit7 )
 800bb78:	69bb      	ldr	r3, [r7, #24]
 800bb7a:	b2da      	uxtb	r2, r3
 800bb7c:	4b0c      	ldr	r3, [pc, #48]	@ (800bbb0 <Emm_V5_Pos_Control+0xa0>)
 800bb7e:	725a      	strb	r2, [r3, #9]
	cmd[10] = raF;                       // 相位/绝对标志，false为相对运动，true为绝对值运动
 800bb80:	7f3a      	ldrb	r2, [r7, #28]
 800bb82:	4b0b      	ldr	r3, [pc, #44]	@ (800bbb0 <Emm_V5_Pos_Control+0xa0>)
 800bb84:	729a      	strb	r2, [r3, #10]
	cmd[11] = snF;                       // 多机同步运动标志，false为不启用，true为启用
 800bb86:	f897 2020 	ldrb.w	r2, [r7, #32]
 800bb8a:	4b09      	ldr	r3, [pc, #36]	@ (800bbb0 <Emm_V5_Pos_Control+0xa0>)
 800bb8c:	72da      	strb	r2, [r3, #11]
	cmd[12] = 0x6B;                      // 校验字节
 800bb8e:	4b08      	ldr	r3, [pc, #32]	@ (800bbb0 <Emm_V5_Pos_Control+0xa0>)
 800bb90:	226b      	movs	r2, #107	@ 0x6b
 800bb92:	731a      	strb	r2, [r3, #12]

	// 发送命令
	FDCAN_Send_Msg(cmd, 13);
 800bb94:	210d      	movs	r1, #13
 800bb96:	4806      	ldr	r0, [pc, #24]	@ (800bbb0 <Emm_V5_Pos_Control+0xa0>)
 800bb98:	f7f5 f87e 	bl	8000c98 <FDCAN_Send_Msg>
	HAL_Delay(10);
 800bb9c:	200a      	movs	r0, #10
 800bb9e:	f7f7 fb5d 	bl	800325c <HAL_Delay>
	Emm_mode = 1;
 800bba2:	4b04      	ldr	r3, [pc, #16]	@ (800bbb4 <Emm_V5_Pos_Control+0xa4>)
 800bba4:	2201      	movs	r2, #1
 800bba6:	701a      	strb	r2, [r3, #0]
}
 800bba8:	bf00      	nop
 800bbaa:	370c      	adds	r7, #12
 800bbac:	46bd      	mov	sp, r7
 800bbae:	bd90      	pop	{r4, r7, pc}
 800bbb0:	24000b24 	.word	0x24000b24
 800bbb4:	240002b4 	.word	0x240002b4

0800bbb8 <Emm_V5_Stop_Now>:
 * @brief    立即停止（所有控制模式都通用）
 * @param    addr  ：电机地址
 * @param    snF   ：多机同步标志，false为不启用，true为启用
 * @retval   地址 + 功能码 + 命令状态 + 校验字节
 */
void Emm_V5_Stop_Now(uint8_t addr, bool snF) {
 800bbb8:	b580      	push	{r7, lr}
 800bbba:	b082      	sub	sp, #8
 800bbbc:	af00      	add	r7, sp, #0
 800bbbe:	4603      	mov	r3, r0
 800bbc0:	460a      	mov	r2, r1
 800bbc2:	71fb      	strb	r3, [r7, #7]
 800bbc4:	4613      	mov	r3, r2
 800bbc6:	71bb      	strb	r3, [r7, #6]

	// 装载命令
	cmd[0] = addr;                       // 地址
 800bbc8:	4a0b      	ldr	r2, [pc, #44]	@ (800bbf8 <Emm_V5_Stop_Now+0x40>)
 800bbca:	79fb      	ldrb	r3, [r7, #7]
 800bbcc:	7013      	strb	r3, [r2, #0]
	cmd[1] = 0xFE;                       // 功能码
 800bbce:	4b0a      	ldr	r3, [pc, #40]	@ (800bbf8 <Emm_V5_Stop_Now+0x40>)
 800bbd0:	22fe      	movs	r2, #254	@ 0xfe
 800bbd2:	705a      	strb	r2, [r3, #1]
	cmd[2] = 0x98;                       // 辅助码
 800bbd4:	4b08      	ldr	r3, [pc, #32]	@ (800bbf8 <Emm_V5_Stop_Now+0x40>)
 800bbd6:	2298      	movs	r2, #152	@ 0x98
 800bbd8:	709a      	strb	r2, [r3, #2]
	cmd[3] = snF;                        // 多机同步运动标志
 800bbda:	79ba      	ldrb	r2, [r7, #6]
 800bbdc:	4b06      	ldr	r3, [pc, #24]	@ (800bbf8 <Emm_V5_Stop_Now+0x40>)
 800bbde:	70da      	strb	r2, [r3, #3]
	cmd[4] = 0x6B;                       // 校验字节
 800bbe0:	4b05      	ldr	r3, [pc, #20]	@ (800bbf8 <Emm_V5_Stop_Now+0x40>)
 800bbe2:	226b      	movs	r2, #107	@ 0x6b
 800bbe4:	711a      	strb	r2, [r3, #4]

	// 发送命令
	FDCAN_Send_Msg(cmd, 5);
 800bbe6:	2105      	movs	r1, #5
 800bbe8:	4803      	ldr	r0, [pc, #12]	@ (800bbf8 <Emm_V5_Stop_Now+0x40>)
 800bbea:	f7f5 f855 	bl	8000c98 <FDCAN_Send_Msg>
}
 800bbee:	bf00      	nop
 800bbf0:	3708      	adds	r7, #8
 800bbf2:	46bd      	mov	sp, r7
 800bbf4:	bd80      	pop	{r7, pc}
 800bbf6:	bf00      	nop
 800bbf8:	24000b24 	.word	0x24000b24

0800bbfc <Emm_V5_Synchronous_motion>:
/**
 * @brief    多机同步运动
 * @param    addr  ：电机地址
 * @retval   地址 + 功能码 + 命令状态 + 校验字节
 */
void Emm_V5_Synchronous_motion(void) {
 800bbfc:	b580      	push	{r7, lr}
 800bbfe:	af00      	add	r7, sp, #0

	// 装载命令
	cmd[0] = 0x00;                       // 地址
 800bc00:	4b0a      	ldr	r3, [pc, #40]	@ (800bc2c <Emm_V5_Synchronous_motion+0x30>)
 800bc02:	2200      	movs	r2, #0
 800bc04:	701a      	strb	r2, [r3, #0]
	cmd[1] = 0xFF;                       // 功能码
 800bc06:	4b09      	ldr	r3, [pc, #36]	@ (800bc2c <Emm_V5_Synchronous_motion+0x30>)
 800bc08:	22ff      	movs	r2, #255	@ 0xff
 800bc0a:	705a      	strb	r2, [r3, #1]
	cmd[2] = 0x66;                       // 辅助码
 800bc0c:	4b07      	ldr	r3, [pc, #28]	@ (800bc2c <Emm_V5_Synchronous_motion+0x30>)
 800bc0e:	2266      	movs	r2, #102	@ 0x66
 800bc10:	709a      	strb	r2, [r3, #2]
	cmd[3] = 0x6B;                       // 校验字节
 800bc12:	4b06      	ldr	r3, [pc, #24]	@ (800bc2c <Emm_V5_Synchronous_motion+0x30>)
 800bc14:	226b      	movs	r2, #107	@ 0x6b
 800bc16:	70da      	strb	r2, [r3, #3]

	// 发送命令
	FDCAN_Send_Msg(cmd, 4);
 800bc18:	2104      	movs	r1, #4
 800bc1a:	4804      	ldr	r0, [pc, #16]	@ (800bc2c <Emm_V5_Synchronous_motion+0x30>)
 800bc1c:	f7f5 f83c 	bl	8000c98 <FDCAN_Send_Msg>
	HAL_Delay(5);
 800bc20:	2005      	movs	r0, #5
 800bc22:	f7f7 fb1b 	bl	800325c <HAL_Delay>
}
 800bc26:	bf00      	nop
 800bc28:	bd80      	pop	{r7, pc}
 800bc2a:	bf00      	nop
 800bc2c:	24000b24 	.word	0x24000b24

0800bc30 <limit>:
float A_out;
float TX_X_out;
float TX_Y_out;

// 输出限幅
float limit(float x, float min, float max) {
 800bc30:	b480      	push	{r7}
 800bc32:	b085      	sub	sp, #20
 800bc34:	af00      	add	r7, sp, #0
 800bc36:	ed87 0a03 	vstr	s0, [r7, #12]
 800bc3a:	edc7 0a02 	vstr	s1, [r7, #8]
 800bc3e:	ed87 1a01 	vstr	s2, [r7, #4]
	x = (x > max) ? max : ((x < min) ? min : x);
 800bc42:	ed97 7a03 	vldr	s14, [r7, #12]
 800bc46:	edd7 7a01 	vldr	s15, [r7, #4]
 800bc4a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800bc4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc52:	dd01      	ble.n	800bc58 <limit+0x28>
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	e00b      	b.n	800bc70 <limit+0x40>
 800bc58:	ed97 7a03 	vldr	s14, [r7, #12]
 800bc5c:	edd7 7a02 	vldr	s15, [r7, #8]
 800bc60:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800bc64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc68:	d501      	bpl.n	800bc6e <limit+0x3e>
 800bc6a:	68bb      	ldr	r3, [r7, #8]
 800bc6c:	e000      	b.n	800bc70 <limit+0x40>
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	60fb      	str	r3, [r7, #12]
	return x;
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	ee07 3a90 	vmov	s15, r3
}
 800bc78:	eeb0 0a67 	vmov.f32	s0, s15
 800bc7c:	3714      	adds	r7, #20
 800bc7e:	46bd      	mov	sp, r7
 800bc80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc84:	4770      	bx	lr
	...

0800bc88 <PID_Init>:
		return in;
	}
}

//	初始化PID结构体
void PID_Init(void) {
 800bc88:	b480      	push	{r7}
 800bc8a:	af00      	add	r7, sp, #0
	//======================X=====================//   20   60
	XPID.P = 20;    //0.57    0  0.1
 800bc8c:	4b69      	ldr	r3, [pc, #420]	@ (800be34 <PID_Init+0x1ac>)
 800bc8e:	4a6a      	ldr	r2, [pc, #424]	@ (800be38 <PID_Init+0x1b0>)
 800bc90:	601a      	str	r2, [r3, #0]
	XPID.I = 0;
 800bc92:	4b68      	ldr	r3, [pc, #416]	@ (800be34 <PID_Init+0x1ac>)
 800bc94:	f04f 0200 	mov.w	r2, #0
 800bc98:	609a      	str	r2, [r3, #8]
	XPID.D = 60;
 800bc9a:	4b66      	ldr	r3, [pc, #408]	@ (800be34 <PID_Init+0x1ac>)
 800bc9c:	4a67      	ldr	r2, [pc, #412]	@ (800be3c <PID_Init+0x1b4>)
 800bc9e:	615a      	str	r2, [r3, #20]

	XPID.I_LIMIT = 100.0;
 800bca0:	4b64      	ldr	r3, [pc, #400]	@ (800be34 <PID_Init+0x1ac>)
 800bca2:	4a67      	ldr	r2, [pc, #412]	@ (800be40 <PID_Init+0x1b8>)
 800bca4:	611a      	str	r2, [r3, #16]
	XPID.OUT_LIMIT = 100.0;
 800bca6:	4b63      	ldr	r3, [pc, #396]	@ (800be34 <PID_Init+0x1ac>)
 800bca8:	4a65      	ldr	r2, [pc, #404]	@ (800be40 <PID_Init+0x1b8>)
 800bcaa:	621a      	str	r2, [r3, #32]

	XPID.P_OUT = 0.0;
 800bcac:	4b61      	ldr	r3, [pc, #388]	@ (800be34 <PID_Init+0x1ac>)
 800bcae:	f04f 0200 	mov.w	r2, #0
 800bcb2:	605a      	str	r2, [r3, #4]
	XPID.I_OUT = 0.0;
 800bcb4:	4b5f      	ldr	r3, [pc, #380]	@ (800be34 <PID_Init+0x1ac>)
 800bcb6:	f04f 0200 	mov.w	r2, #0
 800bcba:	60da      	str	r2, [r3, #12]
	XPID.D_OUT = 0.0;
 800bcbc:	4b5d      	ldr	r3, [pc, #372]	@ (800be34 <PID_Init+0x1ac>)
 800bcbe:	f04f 0200 	mov.w	r2, #0
 800bcc2:	619a      	str	r2, [r3, #24]

	XPID.OUT = 0.0;
 800bcc4:	4b5b      	ldr	r3, [pc, #364]	@ (800be34 <PID_Init+0x1ac>)
 800bcc6:	f04f 0200 	mov.w	r2, #0
 800bcca:	61da      	str	r2, [r3, #28]

	XPID.err = 0.0;
 800bccc:	4b59      	ldr	r3, [pc, #356]	@ (800be34 <PID_Init+0x1ac>)
 800bcce:	2200      	movs	r2, #0
 800bcd0:	849a      	strh	r2, [r3, #36]	@ 0x24
	XPID.err_err = 0.0;
 800bcd2:	4b58      	ldr	r3, [pc, #352]	@ (800be34 <PID_Init+0x1ac>)
 800bcd4:	2200      	movs	r2, #0
 800bcd6:	84da      	strh	r2, [r3, #38]	@ 0x26
	XPID.err_old = 0.0;
 800bcd8:	4b56      	ldr	r3, [pc, #344]	@ (800be34 <PID_Init+0x1ac>)
 800bcda:	2200      	movs	r2, #0
 800bcdc:	851a      	strh	r2, [r3, #40]	@ 0x28

	//========= =============Y=====================//
	YPID.P = 20;    //0.89                     //0.8 0 0.01
 800bcde:	4b59      	ldr	r3, [pc, #356]	@ (800be44 <PID_Init+0x1bc>)
 800bce0:	4a55      	ldr	r2, [pc, #340]	@ (800be38 <PID_Init+0x1b0>)
 800bce2:	601a      	str	r2, [r3, #0]
	YPID.I = 0;
 800bce4:	4b57      	ldr	r3, [pc, #348]	@ (800be44 <PID_Init+0x1bc>)
 800bce6:	f04f 0200 	mov.w	r2, #0
 800bcea:	609a      	str	r2, [r3, #8]
	YPID.D = 60;    //60
 800bcec:	4b55      	ldr	r3, [pc, #340]	@ (800be44 <PID_Init+0x1bc>)
 800bcee:	4a53      	ldr	r2, [pc, #332]	@ (800be3c <PID_Init+0x1b4>)
 800bcf0:	615a      	str	r2, [r3, #20]
	YPID.I_LIMIT = 100.0;
 800bcf2:	4b54      	ldr	r3, [pc, #336]	@ (800be44 <PID_Init+0x1bc>)
 800bcf4:	4a52      	ldr	r2, [pc, #328]	@ (800be40 <PID_Init+0x1b8>)
 800bcf6:	611a      	str	r2, [r3, #16]
	YPID.OUT_LIMIT = 100.0;
 800bcf8:	4b52      	ldr	r3, [pc, #328]	@ (800be44 <PID_Init+0x1bc>)
 800bcfa:	4a51      	ldr	r2, [pc, #324]	@ (800be40 <PID_Init+0x1b8>)
 800bcfc:	621a      	str	r2, [r3, #32]

	YPID.P_OUT = 0.0;
 800bcfe:	4b51      	ldr	r3, [pc, #324]	@ (800be44 <PID_Init+0x1bc>)
 800bd00:	f04f 0200 	mov.w	r2, #0
 800bd04:	605a      	str	r2, [r3, #4]
	YPID.I_OUT = 0.0;
 800bd06:	4b4f      	ldr	r3, [pc, #316]	@ (800be44 <PID_Init+0x1bc>)
 800bd08:	f04f 0200 	mov.w	r2, #0
 800bd0c:	60da      	str	r2, [r3, #12]
	YPID.D_OUT = 0.0;
 800bd0e:	4b4d      	ldr	r3, [pc, #308]	@ (800be44 <PID_Init+0x1bc>)
 800bd10:	f04f 0200 	mov.w	r2, #0
 800bd14:	619a      	str	r2, [r3, #24]

	YPID.OUT = 0.0;
 800bd16:	4b4b      	ldr	r3, [pc, #300]	@ (800be44 <PID_Init+0x1bc>)
 800bd18:	f04f 0200 	mov.w	r2, #0
 800bd1c:	61da      	str	r2, [r3, #28]

	YPID.err = 0.0;
 800bd1e:	4b49      	ldr	r3, [pc, #292]	@ (800be44 <PID_Init+0x1bc>)
 800bd20:	2200      	movs	r2, #0
 800bd22:	849a      	strh	r2, [r3, #36]	@ 0x24
	YPID.err_err = 0.0;
 800bd24:	4b47      	ldr	r3, [pc, #284]	@ (800be44 <PID_Init+0x1bc>)
 800bd26:	2200      	movs	r2, #0
 800bd28:	84da      	strh	r2, [r3, #38]	@ 0x26
	YPID.err_old = 0.0;
 800bd2a:	4b46      	ldr	r3, [pc, #280]	@ (800be44 <PID_Init+0x1bc>)
 800bd2c:	2200      	movs	r2, #0
 800bd2e:	851a      	strh	r2, [r3, #40]	@ 0x28

	//======================A=====================//
	APID.P = 0.9;
 800bd30:	4b45      	ldr	r3, [pc, #276]	@ (800be48 <PID_Init+0x1c0>)
 800bd32:	4a46      	ldr	r2, [pc, #280]	@ (800be4c <PID_Init+0x1c4>)
 800bd34:	601a      	str	r2, [r3, #0]
	APID.I = 0.0;
 800bd36:	4b44      	ldr	r3, [pc, #272]	@ (800be48 <PID_Init+0x1c0>)
 800bd38:	f04f 0200 	mov.w	r2, #0
 800bd3c:	609a      	str	r2, [r3, #8]
	APID.D = 0.0;
 800bd3e:	4b42      	ldr	r3, [pc, #264]	@ (800be48 <PID_Init+0x1c0>)
 800bd40:	f04f 0200 	mov.w	r2, #0
 800bd44:	615a      	str	r2, [r3, #20]

	APID.I_LIMIT = 1000.0;
 800bd46:	4b40      	ldr	r3, [pc, #256]	@ (800be48 <PID_Init+0x1c0>)
 800bd48:	4a41      	ldr	r2, [pc, #260]	@ (800be50 <PID_Init+0x1c8>)
 800bd4a:	611a      	str	r2, [r3, #16]
	APID.OUT_LIMIT = 2350.0;
 800bd4c:	4b3e      	ldr	r3, [pc, #248]	@ (800be48 <PID_Init+0x1c0>)
 800bd4e:	4a41      	ldr	r2, [pc, #260]	@ (800be54 <PID_Init+0x1cc>)
 800bd50:	621a      	str	r2, [r3, #32]

	APID.P_OUT = 0.0;
 800bd52:	4b3d      	ldr	r3, [pc, #244]	@ (800be48 <PID_Init+0x1c0>)
 800bd54:	f04f 0200 	mov.w	r2, #0
 800bd58:	605a      	str	r2, [r3, #4]
	APID.I_OUT = 0.0;
 800bd5a:	4b3b      	ldr	r3, [pc, #236]	@ (800be48 <PID_Init+0x1c0>)
 800bd5c:	f04f 0200 	mov.w	r2, #0
 800bd60:	60da      	str	r2, [r3, #12]
	APID.D_OUT = 0.0;
 800bd62:	4b39      	ldr	r3, [pc, #228]	@ (800be48 <PID_Init+0x1c0>)
 800bd64:	f04f 0200 	mov.w	r2, #0
 800bd68:	619a      	str	r2, [r3, #24]

	APID.OUT = 0.0;
 800bd6a:	4b37      	ldr	r3, [pc, #220]	@ (800be48 <PID_Init+0x1c0>)
 800bd6c:	f04f 0200 	mov.w	r2, #0
 800bd70:	61da      	str	r2, [r3, #28]

	APID.err = 0.0;
 800bd72:	4b35      	ldr	r3, [pc, #212]	@ (800be48 <PID_Init+0x1c0>)
 800bd74:	2200      	movs	r2, #0
 800bd76:	849a      	strh	r2, [r3, #36]	@ 0x24
	APID.err_err = 0.0;
 800bd78:	4b33      	ldr	r3, [pc, #204]	@ (800be48 <PID_Init+0x1c0>)
 800bd7a:	2200      	movs	r2, #0
 800bd7c:	84da      	strh	r2, [r3, #38]	@ 0x26
	APID.err_old = 0.0;
 800bd7e:	4b32      	ldr	r3, [pc, #200]	@ (800be48 <PID_Init+0x1c0>)
 800bd80:	2200      	movs	r2, #0
 800bd82:	851a      	strh	r2, [r3, #40]	@ 0x28
	//======================TX=====================//
	TXPID.P = 1;
 800bd84:	4b34      	ldr	r3, [pc, #208]	@ (800be58 <PID_Init+0x1d0>)
 800bd86:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800bd8a:	601a      	str	r2, [r3, #0]
	TXPID.I = 0;
 800bd8c:	4b32      	ldr	r3, [pc, #200]	@ (800be58 <PID_Init+0x1d0>)
 800bd8e:	f04f 0200 	mov.w	r2, #0
 800bd92:	609a      	str	r2, [r3, #8]
	TXPID.D = 0.3;
 800bd94:	4b30      	ldr	r3, [pc, #192]	@ (800be58 <PID_Init+0x1d0>)
 800bd96:	4a31      	ldr	r2, [pc, #196]	@ (800be5c <PID_Init+0x1d4>)
 800bd98:	615a      	str	r2, [r3, #20]

	TXPID.I_LIMIT = 100.0;
 800bd9a:	4b2f      	ldr	r3, [pc, #188]	@ (800be58 <PID_Init+0x1d0>)
 800bd9c:	4a28      	ldr	r2, [pc, #160]	@ (800be40 <PID_Init+0x1b8>)
 800bd9e:	611a      	str	r2, [r3, #16]
	TXPID.OUT_LIMIT = 300.0;
 800bda0:	4b2d      	ldr	r3, [pc, #180]	@ (800be58 <PID_Init+0x1d0>)
 800bda2:	4a2f      	ldr	r2, [pc, #188]	@ (800be60 <PID_Init+0x1d8>)
 800bda4:	621a      	str	r2, [r3, #32]

	TXPID.P_OUT = 0.0;
 800bda6:	4b2c      	ldr	r3, [pc, #176]	@ (800be58 <PID_Init+0x1d0>)
 800bda8:	f04f 0200 	mov.w	r2, #0
 800bdac:	605a      	str	r2, [r3, #4]
	TXPID.I_OUT = 0.0;
 800bdae:	4b2a      	ldr	r3, [pc, #168]	@ (800be58 <PID_Init+0x1d0>)
 800bdb0:	f04f 0200 	mov.w	r2, #0
 800bdb4:	60da      	str	r2, [r3, #12]
	TXPID.D_OUT = 0.0;
 800bdb6:	4b28      	ldr	r3, [pc, #160]	@ (800be58 <PID_Init+0x1d0>)
 800bdb8:	f04f 0200 	mov.w	r2, #0
 800bdbc:	619a      	str	r2, [r3, #24]

	TXPID.OUT = 0.0;
 800bdbe:	4b26      	ldr	r3, [pc, #152]	@ (800be58 <PID_Init+0x1d0>)
 800bdc0:	f04f 0200 	mov.w	r2, #0
 800bdc4:	61da      	str	r2, [r3, #28]

	TXPID.err = 0.0;
 800bdc6:	4b24      	ldr	r3, [pc, #144]	@ (800be58 <PID_Init+0x1d0>)
 800bdc8:	2200      	movs	r2, #0
 800bdca:	849a      	strh	r2, [r3, #36]	@ 0x24
	TXPID.err_err = 0.0;
 800bdcc:	4b22      	ldr	r3, [pc, #136]	@ (800be58 <PID_Init+0x1d0>)
 800bdce:	2200      	movs	r2, #0
 800bdd0:	84da      	strh	r2, [r3, #38]	@ 0x26
	TXPID.err_old = 0.0;
 800bdd2:	4b21      	ldr	r3, [pc, #132]	@ (800be58 <PID_Init+0x1d0>)
 800bdd4:	2200      	movs	r2, #0
 800bdd6:	851a      	strh	r2, [r3, #40]	@ 0x28

	//======================TY=====================//
	TYPID.P = -1;
 800bdd8:	4b22      	ldr	r3, [pc, #136]	@ (800be64 <PID_Init+0x1dc>)
 800bdda:	4a23      	ldr	r2, [pc, #140]	@ (800be68 <PID_Init+0x1e0>)
 800bddc:	601a      	str	r2, [r3, #0]
	TYPID.I = -0;      //0.9  0.01   0.3
 800bdde:	4b21      	ldr	r3, [pc, #132]	@ (800be64 <PID_Init+0x1dc>)
 800bde0:	f04f 0200 	mov.w	r2, #0
 800bde4:	609a      	str	r2, [r3, #8]
	//0.9 0 0.2
	TYPID.D = -0.3;
 800bde6:	4b1f      	ldr	r3, [pc, #124]	@ (800be64 <PID_Init+0x1dc>)
 800bde8:	4a20      	ldr	r2, [pc, #128]	@ (800be6c <PID_Init+0x1e4>)
 800bdea:	615a      	str	r2, [r3, #20]

	TYPID.I_LIMIT = 100.0;
 800bdec:	4b1d      	ldr	r3, [pc, #116]	@ (800be64 <PID_Init+0x1dc>)
 800bdee:	4a14      	ldr	r2, [pc, #80]	@ (800be40 <PID_Init+0x1b8>)
 800bdf0:	611a      	str	r2, [r3, #16]
	TYPID.OUT_LIMIT = 300.0;
 800bdf2:	4b1c      	ldr	r3, [pc, #112]	@ (800be64 <PID_Init+0x1dc>)
 800bdf4:	4a1a      	ldr	r2, [pc, #104]	@ (800be60 <PID_Init+0x1d8>)
 800bdf6:	621a      	str	r2, [r3, #32]

	TYPID.P_OUT = 0.0;
 800bdf8:	4b1a      	ldr	r3, [pc, #104]	@ (800be64 <PID_Init+0x1dc>)
 800bdfa:	f04f 0200 	mov.w	r2, #0
 800bdfe:	605a      	str	r2, [r3, #4]
	TYPID.I_OUT = 0.0;
 800be00:	4b18      	ldr	r3, [pc, #96]	@ (800be64 <PID_Init+0x1dc>)
 800be02:	f04f 0200 	mov.w	r2, #0
 800be06:	60da      	str	r2, [r3, #12]
	TYPID.D_OUT = 0.0;
 800be08:	4b16      	ldr	r3, [pc, #88]	@ (800be64 <PID_Init+0x1dc>)
 800be0a:	f04f 0200 	mov.w	r2, #0
 800be0e:	619a      	str	r2, [r3, #24]

	TYPID.OUT = 0.0;
 800be10:	4b14      	ldr	r3, [pc, #80]	@ (800be64 <PID_Init+0x1dc>)
 800be12:	f04f 0200 	mov.w	r2, #0
 800be16:	61da      	str	r2, [r3, #28]

	TYPID.err = 0.0;
 800be18:	4b12      	ldr	r3, [pc, #72]	@ (800be64 <PID_Init+0x1dc>)
 800be1a:	2200      	movs	r2, #0
 800be1c:	849a      	strh	r2, [r3, #36]	@ 0x24
	TYPID.err_err = 0.0;
 800be1e:	4b11      	ldr	r3, [pc, #68]	@ (800be64 <PID_Init+0x1dc>)
 800be20:	2200      	movs	r2, #0
 800be22:	84da      	strh	r2, [r3, #38]	@ 0x26
	TYPID.err_old = 0.0;
 800be24:	4b0f      	ldr	r3, [pc, #60]	@ (800be64 <PID_Init+0x1dc>)
 800be26:	2200      	movs	r2, #0
 800be28:	851a      	strh	r2, [r3, #40]	@ 0x28
}
 800be2a:	bf00      	nop
 800be2c:	46bd      	mov	sp, r7
 800be2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be32:	4770      	bx	lr
 800be34:	24000b3c 	.word	0x24000b3c
 800be38:	41a00000 	.word	0x41a00000
 800be3c:	42700000 	.word	0x42700000
 800be40:	42c80000 	.word	0x42c80000
 800be44:	24000b68 	.word	0x24000b68
 800be48:	24000b94 	.word	0x24000b94
 800be4c:	3f666666 	.word	0x3f666666
 800be50:	447a0000 	.word	0x447a0000
 800be54:	4512e000 	.word	0x4512e000
 800be58:	24000bc0 	.word	0x24000bc0
 800be5c:	3e99999a 	.word	0x3e99999a
 800be60:	43960000 	.word	0x43960000
 800be64:	24000bec 	.word	0x24000bec
 800be68:	bf800000 	.word	0xbf800000
 800be6c:	be99999a 	.word	0xbe99999a

0800be70 <Tx_X_Ctrl>:
	PID->err_old = PID->err;

	return PID->OUT;
}
/* TX的X轴调整 */
short Tx_X_Ctrl(_PID *PID, float goal) {
 800be70:	b580      	push	{r7, lr}
 800be72:	b082      	sub	sp, #8
 800be74:	af00      	add	r7, sp, #0
 800be76:	6078      	str	r0, [r7, #4]
 800be78:	ed87 0a00 	vstr	s0, [r7]
	PID->err = Tx_NOW - goal;
 800be7c:	4b4e      	ldr	r3, [pc, #312]	@ (800bfb8 <Tx_X_Ctrl+0x148>)
 800be7e:	ed93 7a00 	vldr	s14, [r3]
 800be82:	edd7 7a00 	vldr	s15, [r7]
 800be86:	ee77 7a67 	vsub.f32	s15, s14, s15
 800be8a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800be8e:	ee17 3a90 	vmov	r3, s15
 800be92:	b21a      	sxth	r2, r3
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	849a      	strh	r2, [r3, #36]	@ 0x24

	PID->err_err = PID->err - PID->err_old;
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 800be9e:	b29a      	uxth	r2, r3
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	@ 0x28
 800bea6:	b29b      	uxth	r3, r3
 800bea8:	1ad3      	subs	r3, r2, r3
 800beaa:	b29b      	uxth	r3, r3
 800beac:	b21a      	sxth	r2, r3
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	84da      	strh	r2, [r3, #38]	@ 0x26

	PID->P_OUT = PID->P * PID->err;
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	ed93 7a00 	vldr	s14, [r3]
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 800bebe:	ee07 3a90 	vmov	s15, r3
 800bec2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bec6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	edc3 7a01 	vstr	s15, [r3, #4]
	PID->I_OUT += PID->I * PID->err;
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	ed93 7a03 	vldr	s14, [r3, #12]
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	edd3 6a02 	vldr	s13, [r3, #8]
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 800bee2:	ee07 3a90 	vmov	s15, r3
 800bee6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800beea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800beee:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	edc3 7a03 	vstr	s15, [r3, #12]
	PID->D_OUT = PID->D * PID->err_err;
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	ed93 7a05 	vldr	s14, [r3, #20]
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	@ 0x26
 800bf04:	ee07 3a90 	vmov	s15, r3
 800bf08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bf0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	edc3 7a06 	vstr	s15, [r3, #24]

	PID->I_OUT = limit(PID->I_OUT, -PID->I_LIMIT, PID->I_LIMIT);
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	ed93 7a03 	vldr	s14, [r3, #12]
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	edd3 7a04 	vldr	s15, [r3, #16]
 800bf22:	eef1 7a67 	vneg.f32	s15, s15
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	edd3 6a04 	vldr	s13, [r3, #16]
 800bf2c:	eeb0 1a66 	vmov.f32	s2, s13
 800bf30:	eef0 0a67 	vmov.f32	s1, s15
 800bf34:	eeb0 0a47 	vmov.f32	s0, s14
 800bf38:	f7ff fe7a 	bl	800bc30 <limit>
 800bf3c:	eef0 7a40 	vmov.f32	s15, s0
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	edc3 7a03 	vstr	s15, [r3, #12]

	PID->OUT = PID->P_OUT + PID->I_OUT + PID->D_OUT;
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	ed93 7a01 	vldr	s14, [r3, #4]
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	edd3 7a03 	vldr	s15, [r3, #12]
 800bf52:	ee37 7a27 	vadd.f32	s14, s14, s15
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	edd3 7a06 	vldr	s15, [r3, #24]
 800bf5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	edc3 7a07 	vstr	s15, [r3, #28]

	PID->OUT = limit(PID->OUT, -PID->OUT_LIMIT, PID->OUT_LIMIT);
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	ed93 7a07 	vldr	s14, [r3, #28]
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	edd3 7a08 	vldr	s15, [r3, #32]
 800bf72:	eef1 7a67 	vneg.f32	s15, s15
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	edd3 6a08 	vldr	s13, [r3, #32]
 800bf7c:	eeb0 1a66 	vmov.f32	s2, s13
 800bf80:	eef0 0a67 	vmov.f32	s1, s15
 800bf84:	eeb0 0a47 	vmov.f32	s0, s14
 800bf88:	f7ff fe52 	bl	800bc30 <limit>
 800bf8c:	eef0 7a40 	vmov.f32	s15, s0
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	edc3 7a07 	vstr	s15, [r3, #28]

	PID->err_old = PID->err;
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	f9b3 2024 	ldrsh.w	r2, [r3, #36]	@ 0x24
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	851a      	strh	r2, [r3, #40]	@ 0x28

	return PID->OUT;
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	edd3 7a07 	vldr	s15, [r3, #28]
 800bfa6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bfaa:	ee17 3a90 	vmov	r3, s15
 800bfae:	b21b      	sxth	r3, r3
}
 800bfb0:	4618      	mov	r0, r3
 800bfb2:	3708      	adds	r7, #8
 800bfb4:	46bd      	mov	sp, r7
 800bfb6:	bd80      	pop	{r7, pc}
 800bfb8:	2400046c 	.word	0x2400046c

0800bfbc <Tx_Y_Ctrl>:

/* TX的Y轴调整 */
short Tx_Y_Ctrl(_PID *PID, float goal) {
 800bfbc:	b580      	push	{r7, lr}
 800bfbe:	b082      	sub	sp, #8
 800bfc0:	af00      	add	r7, sp, #0
 800bfc2:	6078      	str	r0, [r7, #4]
 800bfc4:	ed87 0a00 	vstr	s0, [r7]
	PID->err = Ty_NOW - goal;
 800bfc8:	4b4e      	ldr	r3, [pc, #312]	@ (800c104 <Tx_Y_Ctrl+0x148>)
 800bfca:	ed93 7a00 	vldr	s14, [r3]
 800bfce:	edd7 7a00 	vldr	s15, [r7]
 800bfd2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bfd6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bfda:	ee17 3a90 	vmov	r3, s15
 800bfde:	b21a      	sxth	r2, r3
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	849a      	strh	r2, [r3, #36]	@ 0x24

	PID->err_err = PID->err - PID->err_old;
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 800bfea:	b29a      	uxth	r2, r3
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	@ 0x28
 800bff2:	b29b      	uxth	r3, r3
 800bff4:	1ad3      	subs	r3, r2, r3
 800bff6:	b29b      	uxth	r3, r3
 800bff8:	b21a      	sxth	r2, r3
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	84da      	strh	r2, [r3, #38]	@ 0x26

	PID->P_OUT = PID->P * PID->err;
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	ed93 7a00 	vldr	s14, [r3]
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 800c00a:	ee07 3a90 	vmov	s15, r3
 800c00e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c012:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	edc3 7a01 	vstr	s15, [r3, #4]
	PID->I_OUT += PID->I * PID->err;
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	ed93 7a03 	vldr	s14, [r3, #12]
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	edd3 6a02 	vldr	s13, [r3, #8]
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 800c02e:	ee07 3a90 	vmov	s15, r3
 800c032:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c036:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c03a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	edc3 7a03 	vstr	s15, [r3, #12]
	PID->D_OUT = PID->D * PID->err_err;
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	ed93 7a05 	vldr	s14, [r3, #20]
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	@ 0x26
 800c050:	ee07 3a90 	vmov	s15, r3
 800c054:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c058:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	edc3 7a06 	vstr	s15, [r3, #24]

	PID->I_OUT = limit(PID->I_OUT, -PID->I_LIMIT, PID->I_LIMIT);
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	ed93 7a03 	vldr	s14, [r3, #12]
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	edd3 7a04 	vldr	s15, [r3, #16]
 800c06e:	eef1 7a67 	vneg.f32	s15, s15
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	edd3 6a04 	vldr	s13, [r3, #16]
 800c078:	eeb0 1a66 	vmov.f32	s2, s13
 800c07c:	eef0 0a67 	vmov.f32	s1, s15
 800c080:	eeb0 0a47 	vmov.f32	s0, s14
 800c084:	f7ff fdd4 	bl	800bc30 <limit>
 800c088:	eef0 7a40 	vmov.f32	s15, s0
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	edc3 7a03 	vstr	s15, [r3, #12]

	PID->OUT = PID->P_OUT + PID->I_OUT + PID->D_OUT;
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	ed93 7a01 	vldr	s14, [r3, #4]
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	edd3 7a03 	vldr	s15, [r3, #12]
 800c09e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	edd3 7a06 	vldr	s15, [r3, #24]
 800c0a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	edc3 7a07 	vstr	s15, [r3, #28]

	PID->OUT = limit(PID->OUT, -PID->OUT_LIMIT, PID->OUT_LIMIT);
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	ed93 7a07 	vldr	s14, [r3, #28]
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	edd3 7a08 	vldr	s15, [r3, #32]
 800c0be:	eef1 7a67 	vneg.f32	s15, s15
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	edd3 6a08 	vldr	s13, [r3, #32]
 800c0c8:	eeb0 1a66 	vmov.f32	s2, s13
 800c0cc:	eef0 0a67 	vmov.f32	s1, s15
 800c0d0:	eeb0 0a47 	vmov.f32	s0, s14
 800c0d4:	f7ff fdac 	bl	800bc30 <limit>
 800c0d8:	eef0 7a40 	vmov.f32	s15, s0
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	edc3 7a07 	vstr	s15, [r3, #28]

	PID->err_old = PID->err;
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	f9b3 2024 	ldrsh.w	r2, [r3, #36]	@ 0x24
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	851a      	strh	r2, [r3, #40]	@ 0x28

	return PID->OUT;
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	edd3 7a07 	vldr	s15, [r3, #28]
 800c0f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c0f6:	ee17 3a90 	vmov	r3, s15
 800c0fa:	b21b      	sxth	r3, r3
}
 800c0fc:	4618      	mov	r0, r3
 800c0fe:	3708      	adds	r7, #8
 800c100:	46bd      	mov	sp, r7
 800c102:	bd80      	pop	{r7, pc}
 800c104:	24000470 	.word	0x24000470

0800c108 <GetRxFlag>:
extern uint8_t broadcast_flag;

int time5_jiancha = 0;

uint8_t GetRxFlag(void)
{
 800c108:	b480      	push	{r7}
 800c10a:	af00      	add	r7, sp, #0
	if (RxFlag == 1)
 800c10c:	4b07      	ldr	r3, [pc, #28]	@ (800c12c <GetRxFlag+0x24>)
 800c10e:	781b      	ldrb	r3, [r3, #0]
 800c110:	2b01      	cmp	r3, #1
 800c112:	d104      	bne.n	800c11e <GetRxFlag+0x16>
	{
		RxFlag = 0;
 800c114:	4b05      	ldr	r3, [pc, #20]	@ (800c12c <GetRxFlag+0x24>)
 800c116:	2200      	movs	r2, #0
 800c118:	701a      	strb	r2, [r3, #0]
		return 1;
 800c11a:	2301      	movs	r3, #1
 800c11c:	e000      	b.n	800c120 <GetRxFlag+0x18>
	}
	return 0;
 800c11e:	2300      	movs	r3, #0
}
 800c120:	4618      	mov	r0, r3
 800c122:	46bd      	mov	sp, r7
 800c124:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c128:	4770      	bx	lr
 800c12a:	bf00      	nop
 800c12c:	240002b5 	.word	0x240002b5

0800c130 <Move_Line>:
//		;
////	RxFlag = 0;·
//	HAL_Delay(30);
//}
bool Move_Line(u16 speed, u8 acc, u32 length)
{
 800c130:	b580      	push	{r7, lr}
 800c132:	b086      	sub	sp, #24
 800c134:	af04      	add	r7, sp, #16
 800c136:	4603      	mov	r3, r0
 800c138:	603a      	str	r2, [r7, #0]
 800c13a:	80fb      	strh	r3, [r7, #6]
 800c13c:	460b      	mov	r3, r1
 800c13e:	717b      	strb	r3, [r7, #5]
	// 查询当前是否有阻塞操作,有阻塞操作，结束函数并返回false
	if (Choke_Flag == true)
 800c140:	4b49      	ldr	r3, [pc, #292]	@ (800c268 <Move_Line+0x138>)
 800c142:	781b      	ldrb	r3, [r3, #0]
 800c144:	2b00      	cmp	r3, #0
 800c146:	d001      	beq.n	800c14c <Move_Line+0x1c>
		return false;
 800c148:	2300      	movs	r3, #0
 800c14a:	e088      	b.n	800c25e <Move_Line+0x12e>
	else
		Choke_Flag = true;
 800c14c:	4b46      	ldr	r3, [pc, #280]	@ (800c268 <Move_Line+0x138>)
 800c14e:	2201      	movs	r2, #1
 800c150:	701a      	strb	r2, [r3, #0]
	// 无阻塞操作，申请阻塞
	Apply_Chock = true;
 800c152:	4b46      	ldr	r3, [pc, #280]	@ (800c26c <Move_Line+0x13c>)
 800c154:	2201      	movs	r2, #1
 800c156:	701a      	strb	r2, [r3, #0]
	// 底盘步进电机移动
	Emm_V5_Pos_Control(1, 0, speed, acc, length, 0, true);
 800c158:	7979      	ldrb	r1, [r7, #5]
 800c15a:	88fa      	ldrh	r2, [r7, #6]
 800c15c:	2301      	movs	r3, #1
 800c15e:	9302      	str	r3, [sp, #8]
 800c160:	2300      	movs	r3, #0
 800c162:	9301      	str	r3, [sp, #4]
 800c164:	683b      	ldr	r3, [r7, #0]
 800c166:	9300      	str	r3, [sp, #0]
 800c168:	460b      	mov	r3, r1
 800c16a:	2100      	movs	r1, #0
 800c16c:	2001      	movs	r0, #1
 800c16e:	f7ff fccf 	bl	800bb10 <Emm_V5_Pos_Control>
	Emm_V5_Pos_Control(2, 0, speed, acc, length, 0, true);
 800c172:	7979      	ldrb	r1, [r7, #5]
 800c174:	88fa      	ldrh	r2, [r7, #6]
 800c176:	2301      	movs	r3, #1
 800c178:	9302      	str	r3, [sp, #8]
 800c17a:	2300      	movs	r3, #0
 800c17c:	9301      	str	r3, [sp, #4]
 800c17e:	683b      	ldr	r3, [r7, #0]
 800c180:	9300      	str	r3, [sp, #0]
 800c182:	460b      	mov	r3, r1
 800c184:	2100      	movs	r1, #0
 800c186:	2002      	movs	r0, #2
 800c188:	f7ff fcc2 	bl	800bb10 <Emm_V5_Pos_Control>
	Emm_V5_Pos_Control(3, 0, speed, acc, length, 0, true);
 800c18c:	7979      	ldrb	r1, [r7, #5]
 800c18e:	88fa      	ldrh	r2, [r7, #6]
 800c190:	2301      	movs	r3, #1
 800c192:	9302      	str	r3, [sp, #8]
 800c194:	2300      	movs	r3, #0
 800c196:	9301      	str	r3, [sp, #4]
 800c198:	683b      	ldr	r3, [r7, #0]
 800c19a:	9300      	str	r3, [sp, #0]
 800c19c:	460b      	mov	r3, r1
 800c19e:	2100      	movs	r1, #0
 800c1a0:	2003      	movs	r0, #3
 800c1a2:	f7ff fcb5 	bl	800bb10 <Emm_V5_Pos_Control>
	Emm_V5_Pos_Control(4, 0, speed, acc, length, 0, true);
 800c1a6:	7979      	ldrb	r1, [r7, #5]
 800c1a8:	88fa      	ldrh	r2, [r7, #6]
 800c1aa:	2301      	movs	r3, #1
 800c1ac:	9302      	str	r3, [sp, #8]
 800c1ae:	2300      	movs	r3, #0
 800c1b0:	9301      	str	r3, [sp, #4]
 800c1b2:	683b      	ldr	r3, [r7, #0]
 800c1b4:	9300      	str	r3, [sp, #0]
 800c1b6:	460b      	mov	r3, r1
 800c1b8:	2100      	movs	r1, #0
 800c1ba:	2004      	movs	r0, #4
 800c1bc:	f7ff fca8 	bl	800bb10 <Emm_V5_Pos_Control>
	// 触发多机同步开始运动
	Emm_V5_Synchronous_motion();
 800c1c0:	f7ff fd1c 	bl	800bbfc <Emm_V5_Synchronous_motion>
	HAL_Delay(5);
 800c1c4:	2005      	movs	r0, #5
 800c1c6:	f7f7 f849 	bl	800325c <HAL_Delay>
	while(broadcast_flag == 0){
 800c1ca:	e035      	b.n	800c238 <Move_Line+0x108>
		// 在broadcast_flag = 1时跳出去
		// 底盘步进电机移动
		Emm_V5_Pos_Control(1, 0, speed, acc, length, 0, true);
 800c1cc:	7979      	ldrb	r1, [r7, #5]
 800c1ce:	88fa      	ldrh	r2, [r7, #6]
 800c1d0:	2301      	movs	r3, #1
 800c1d2:	9302      	str	r3, [sp, #8]
 800c1d4:	2300      	movs	r3, #0
 800c1d6:	9301      	str	r3, [sp, #4]
 800c1d8:	683b      	ldr	r3, [r7, #0]
 800c1da:	9300      	str	r3, [sp, #0]
 800c1dc:	460b      	mov	r3, r1
 800c1de:	2100      	movs	r1, #0
 800c1e0:	2001      	movs	r0, #1
 800c1e2:	f7ff fc95 	bl	800bb10 <Emm_V5_Pos_Control>
		Emm_V5_Pos_Control(2, 0, speed, acc, length, 0, true);
 800c1e6:	7979      	ldrb	r1, [r7, #5]
 800c1e8:	88fa      	ldrh	r2, [r7, #6]
 800c1ea:	2301      	movs	r3, #1
 800c1ec:	9302      	str	r3, [sp, #8]
 800c1ee:	2300      	movs	r3, #0
 800c1f0:	9301      	str	r3, [sp, #4]
 800c1f2:	683b      	ldr	r3, [r7, #0]
 800c1f4:	9300      	str	r3, [sp, #0]
 800c1f6:	460b      	mov	r3, r1
 800c1f8:	2100      	movs	r1, #0
 800c1fa:	2002      	movs	r0, #2
 800c1fc:	f7ff fc88 	bl	800bb10 <Emm_V5_Pos_Control>
		Emm_V5_Pos_Control(3, 0, speed, acc, length, 0, true);
 800c200:	7979      	ldrb	r1, [r7, #5]
 800c202:	88fa      	ldrh	r2, [r7, #6]
 800c204:	2301      	movs	r3, #1
 800c206:	9302      	str	r3, [sp, #8]
 800c208:	2300      	movs	r3, #0
 800c20a:	9301      	str	r3, [sp, #4]
 800c20c:	683b      	ldr	r3, [r7, #0]
 800c20e:	9300      	str	r3, [sp, #0]
 800c210:	460b      	mov	r3, r1
 800c212:	2100      	movs	r1, #0
 800c214:	2003      	movs	r0, #3
 800c216:	f7ff fc7b 	bl	800bb10 <Emm_V5_Pos_Control>
		Emm_V5_Pos_Control(4, 0, speed, acc, length, 0, true);
 800c21a:	7979      	ldrb	r1, [r7, #5]
 800c21c:	88fa      	ldrh	r2, [r7, #6]
 800c21e:	2301      	movs	r3, #1
 800c220:	9302      	str	r3, [sp, #8]
 800c222:	2300      	movs	r3, #0
 800c224:	9301      	str	r3, [sp, #4]
 800c226:	683b      	ldr	r3, [r7, #0]
 800c228:	9300      	str	r3, [sp, #0]
 800c22a:	460b      	mov	r3, r1
 800c22c:	2100      	movs	r1, #0
 800c22e:	2004      	movs	r0, #4
 800c230:	f7ff fc6e 	bl	800bb10 <Emm_V5_Pos_Control>
		// 触发多机同步开始运动
		Emm_V5_Synchronous_motion();
 800c234:	f7ff fce2 	bl	800bbfc <Emm_V5_Synchronous_motion>
	while(broadcast_flag == 0){
 800c238:	4b0d      	ldr	r3, [pc, #52]	@ (800c270 <Move_Line+0x140>)
 800c23a:	781b      	ldrb	r3, [r3, #0]
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d0c5      	beq.n	800c1cc <Move_Line+0x9c>
	}
	broadcast_flag = 0;
 800c240:	4b0b      	ldr	r3, [pc, #44]	@ (800c270 <Move_Line+0x140>)
 800c242:	2200      	movs	r2, #0
 800c244:	701a      	strb	r2, [r3, #0]
	// 使能阻塞定时器中断
	HAL_TIM_Base_Start_IT(&htim12);
 800c246:	480b      	ldr	r0, [pc, #44]	@ (800c274 <Move_Line+0x144>)
 800c248:	f7fc f864 	bl	8008314 <HAL_TIM_Base_Start_IT>
	Call_Flag = true;
 800c24c:	4b0a      	ldr	r3, [pc, #40]	@ (800c278 <Move_Line+0x148>)
 800c24e:	2201      	movs	r2, #1
 800c250:	701a      	strb	r2, [r3, #0]
	while(Apply_Chock == true)
 800c252:	bf00      	nop
 800c254:	4b05      	ldr	r3, [pc, #20]	@ (800c26c <Move_Line+0x13c>)
 800c256:	781b      	ldrb	r3, [r3, #0]
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d1fb      	bne.n	800c254 <Move_Line+0x124>
	{
//		还在阻塞
	}
	return true;
 800c25c:	2301      	movs	r3, #1
}
 800c25e:	4618      	mov	r0, r3
 800c260:	3708      	adds	r7, #8
 800c262:	46bd      	mov	sp, r7
 800c264:	bd80      	pop	{r7, pc}
 800c266:	bf00      	nop
 800c268:	24000c20 	.word	0x24000c20
 800c26c:	24000c21 	.word	0x24000c21
 800c270:	24000362 	.word	0x24000362
 800c274:	2400056c 	.word	0x2400056c
 800c278:	24000c22 	.word	0x24000c22

0800c27c <Move_Left>:
bool Move_Left(u16 speed, u8 acc, u32 length)
{
 800c27c:	b580      	push	{r7, lr}
 800c27e:	b086      	sub	sp, #24
 800c280:	af04      	add	r7, sp, #16
 800c282:	4603      	mov	r3, r0
 800c284:	603a      	str	r2, [r7, #0]
 800c286:	80fb      	strh	r3, [r7, #6]
 800c288:	460b      	mov	r3, r1
 800c28a:	717b      	strb	r3, [r7, #5]
	// 查询当前是否有阻塞操作,有阻塞操作，结束函数并返回false
	if (Choke_Flag == true)
 800c28c:	4b46      	ldr	r3, [pc, #280]	@ (800c3a8 <Move_Left+0x12c>)
 800c28e:	781b      	ldrb	r3, [r3, #0]
 800c290:	2b00      	cmp	r3, #0
 800c292:	d001      	beq.n	800c298 <Move_Left+0x1c>
		return false;
 800c294:	2300      	movs	r3, #0
 800c296:	e083      	b.n	800c3a0 <Move_Left+0x124>
	else
		Choke_Flag = true;
 800c298:	4b43      	ldr	r3, [pc, #268]	@ (800c3a8 <Move_Left+0x12c>)
 800c29a:	2201      	movs	r2, #1
 800c29c:	701a      	strb	r2, [r3, #0]
	// 无阻塞操作，申请阻塞
	Apply_Chock = true;
 800c29e:	4b43      	ldr	r3, [pc, #268]	@ (800c3ac <Move_Left+0x130>)
 800c2a0:	2201      	movs	r2, #1
 800c2a2:	701a      	strb	r2, [r3, #0]
	// 底盘步进电机移动
	Emm_V5_Pos_Control(1, 1, speed, acc, length, 0, true);
 800c2a4:	7979      	ldrb	r1, [r7, #5]
 800c2a6:	88fa      	ldrh	r2, [r7, #6]
 800c2a8:	2301      	movs	r3, #1
 800c2aa:	9302      	str	r3, [sp, #8]
 800c2ac:	2300      	movs	r3, #0
 800c2ae:	9301      	str	r3, [sp, #4]
 800c2b0:	683b      	ldr	r3, [r7, #0]
 800c2b2:	9300      	str	r3, [sp, #0]
 800c2b4:	460b      	mov	r3, r1
 800c2b6:	2101      	movs	r1, #1
 800c2b8:	2001      	movs	r0, #1
 800c2ba:	f7ff fc29 	bl	800bb10 <Emm_V5_Pos_Control>
	Emm_V5_Pos_Control(2, 0, speed, acc, length, 0, true);
 800c2be:	7979      	ldrb	r1, [r7, #5]
 800c2c0:	88fa      	ldrh	r2, [r7, #6]
 800c2c2:	2301      	movs	r3, #1
 800c2c4:	9302      	str	r3, [sp, #8]
 800c2c6:	2300      	movs	r3, #0
 800c2c8:	9301      	str	r3, [sp, #4]
 800c2ca:	683b      	ldr	r3, [r7, #0]
 800c2cc:	9300      	str	r3, [sp, #0]
 800c2ce:	460b      	mov	r3, r1
 800c2d0:	2100      	movs	r1, #0
 800c2d2:	2002      	movs	r0, #2
 800c2d4:	f7ff fc1c 	bl	800bb10 <Emm_V5_Pos_Control>
	Emm_V5_Pos_Control(3, 1, speed, acc, length, 0, true);
 800c2d8:	7979      	ldrb	r1, [r7, #5]
 800c2da:	88fa      	ldrh	r2, [r7, #6]
 800c2dc:	2301      	movs	r3, #1
 800c2de:	9302      	str	r3, [sp, #8]
 800c2e0:	2300      	movs	r3, #0
 800c2e2:	9301      	str	r3, [sp, #4]
 800c2e4:	683b      	ldr	r3, [r7, #0]
 800c2e6:	9300      	str	r3, [sp, #0]
 800c2e8:	460b      	mov	r3, r1
 800c2ea:	2101      	movs	r1, #1
 800c2ec:	2003      	movs	r0, #3
 800c2ee:	f7ff fc0f 	bl	800bb10 <Emm_V5_Pos_Control>
	Emm_V5_Pos_Control(4, 0, speed, acc, length, 0, true);
 800c2f2:	7979      	ldrb	r1, [r7, #5]
 800c2f4:	88fa      	ldrh	r2, [r7, #6]
 800c2f6:	2301      	movs	r3, #1
 800c2f8:	9302      	str	r3, [sp, #8]
 800c2fa:	2300      	movs	r3, #0
 800c2fc:	9301      	str	r3, [sp, #4]
 800c2fe:	683b      	ldr	r3, [r7, #0]
 800c300:	9300      	str	r3, [sp, #0]
 800c302:	460b      	mov	r3, r1
 800c304:	2100      	movs	r1, #0
 800c306:	2004      	movs	r0, #4
 800c308:	f7ff fc02 	bl	800bb10 <Emm_V5_Pos_Control>
	// 触发多机同步开始运动
	Emm_V5_Synchronous_motion();
 800c30c:	f7ff fc76 	bl	800bbfc <Emm_V5_Synchronous_motion>
	HAL_Delay(10);
 800c310:	200a      	movs	r0, #10
 800c312:	f7f6 ffa3 	bl	800325c <HAL_Delay>
	while(broadcast_flag == 0){
 800c316:	e035      	b.n	800c384 <Move_Left+0x108>
		// 在broadcast_flag = 1时跳出去
		// 底盘步进电机移动
		Emm_V5_Pos_Control(1, 1, speed, acc, length, 0, true);
 800c318:	7979      	ldrb	r1, [r7, #5]
 800c31a:	88fa      	ldrh	r2, [r7, #6]
 800c31c:	2301      	movs	r3, #1
 800c31e:	9302      	str	r3, [sp, #8]
 800c320:	2300      	movs	r3, #0
 800c322:	9301      	str	r3, [sp, #4]
 800c324:	683b      	ldr	r3, [r7, #0]
 800c326:	9300      	str	r3, [sp, #0]
 800c328:	460b      	mov	r3, r1
 800c32a:	2101      	movs	r1, #1
 800c32c:	2001      	movs	r0, #1
 800c32e:	f7ff fbef 	bl	800bb10 <Emm_V5_Pos_Control>
		Emm_V5_Pos_Control(2, 0, speed, acc, length, 0, true);
 800c332:	7979      	ldrb	r1, [r7, #5]
 800c334:	88fa      	ldrh	r2, [r7, #6]
 800c336:	2301      	movs	r3, #1
 800c338:	9302      	str	r3, [sp, #8]
 800c33a:	2300      	movs	r3, #0
 800c33c:	9301      	str	r3, [sp, #4]
 800c33e:	683b      	ldr	r3, [r7, #0]
 800c340:	9300      	str	r3, [sp, #0]
 800c342:	460b      	mov	r3, r1
 800c344:	2100      	movs	r1, #0
 800c346:	2002      	movs	r0, #2
 800c348:	f7ff fbe2 	bl	800bb10 <Emm_V5_Pos_Control>
		Emm_V5_Pos_Control(3, 1, speed, acc, length, 0, true);
 800c34c:	7979      	ldrb	r1, [r7, #5]
 800c34e:	88fa      	ldrh	r2, [r7, #6]
 800c350:	2301      	movs	r3, #1
 800c352:	9302      	str	r3, [sp, #8]
 800c354:	2300      	movs	r3, #0
 800c356:	9301      	str	r3, [sp, #4]
 800c358:	683b      	ldr	r3, [r7, #0]
 800c35a:	9300      	str	r3, [sp, #0]
 800c35c:	460b      	mov	r3, r1
 800c35e:	2101      	movs	r1, #1
 800c360:	2003      	movs	r0, #3
 800c362:	f7ff fbd5 	bl	800bb10 <Emm_V5_Pos_Control>
		Emm_V5_Pos_Control(4, 0, speed, acc, length, 0, true);
 800c366:	7979      	ldrb	r1, [r7, #5]
 800c368:	88fa      	ldrh	r2, [r7, #6]
 800c36a:	2301      	movs	r3, #1
 800c36c:	9302      	str	r3, [sp, #8]
 800c36e:	2300      	movs	r3, #0
 800c370:	9301      	str	r3, [sp, #4]
 800c372:	683b      	ldr	r3, [r7, #0]
 800c374:	9300      	str	r3, [sp, #0]
 800c376:	460b      	mov	r3, r1
 800c378:	2100      	movs	r1, #0
 800c37a:	2004      	movs	r0, #4
 800c37c:	f7ff fbc8 	bl	800bb10 <Emm_V5_Pos_Control>
		// 触发多机同步开始运动
		Emm_V5_Synchronous_motion();
 800c380:	f7ff fc3c 	bl	800bbfc <Emm_V5_Synchronous_motion>
	while(broadcast_flag == 0){
 800c384:	4b0a      	ldr	r3, [pc, #40]	@ (800c3b0 <Move_Left+0x134>)
 800c386:	781b      	ldrb	r3, [r3, #0]
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d0c5      	beq.n	800c318 <Move_Left+0x9c>
	}
	broadcast_flag = 0;
 800c38c:	4b08      	ldr	r3, [pc, #32]	@ (800c3b0 <Move_Left+0x134>)
 800c38e:	2200      	movs	r2, #0
 800c390:	701a      	strb	r2, [r3, #0]
	// 使能阻塞定时器中断
	HAL_TIM_Base_Start_IT(&htim12);
 800c392:	4808      	ldr	r0, [pc, #32]	@ (800c3b4 <Move_Left+0x138>)
 800c394:	f7fb ffbe 	bl	8008314 <HAL_TIM_Base_Start_IT>
	Call_Flag = true;
 800c398:	4b07      	ldr	r3, [pc, #28]	@ (800c3b8 <Move_Left+0x13c>)
 800c39a:	2201      	movs	r2, #1
 800c39c:	701a      	strb	r2, [r3, #0]
//	while(Apply_Chock == true)
//	{
////		还在阻塞
//		;
//	}
	return true;
 800c39e:	2301      	movs	r3, #1
}
 800c3a0:	4618      	mov	r0, r3
 800c3a2:	3708      	adds	r7, #8
 800c3a4:	46bd      	mov	sp, r7
 800c3a6:	bd80      	pop	{r7, pc}
 800c3a8:	24000c20 	.word	0x24000c20
 800c3ac:	24000c21 	.word	0x24000c21
 800c3b0:	24000362 	.word	0x24000362
 800c3b4:	2400056c 	.word	0x2400056c
 800c3b8:	24000c22 	.word	0x24000c22

0800c3bc <Move_Back>:

bool Move_Back(u16 speed, u8 acc, u32 length)
{
 800c3bc:	b580      	push	{r7, lr}
 800c3be:	b086      	sub	sp, #24
 800c3c0:	af04      	add	r7, sp, #16
 800c3c2:	4603      	mov	r3, r0
 800c3c4:	603a      	str	r2, [r7, #0]
 800c3c6:	80fb      	strh	r3, [r7, #6]
 800c3c8:	460b      	mov	r3, r1
 800c3ca:	717b      	strb	r3, [r7, #5]
	// 查询当前是否有阻塞操作,有阻塞操作，结束函数并返回false
	if (Choke_Flag == true)
 800c3cc:	4b49      	ldr	r3, [pc, #292]	@ (800c4f4 <Move_Back+0x138>)
 800c3ce:	781b      	ldrb	r3, [r3, #0]
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d001      	beq.n	800c3d8 <Move_Back+0x1c>
		return false;
 800c3d4:	2300      	movs	r3, #0
 800c3d6:	e088      	b.n	800c4ea <Move_Back+0x12e>
	else
		Choke_Flag = true;
 800c3d8:	4b46      	ldr	r3, [pc, #280]	@ (800c4f4 <Move_Back+0x138>)
 800c3da:	2201      	movs	r2, #1
 800c3dc:	701a      	strb	r2, [r3, #0]
	// 无阻塞操作，申请阻塞
	Apply_Chock = true;
 800c3de:	4b46      	ldr	r3, [pc, #280]	@ (800c4f8 <Move_Back+0x13c>)
 800c3e0:	2201      	movs	r2, #1
 800c3e2:	701a      	strb	r2, [r3, #0]
	// 底盘步进电机移动
	Emm_V5_Pos_Control(1, 1, speed, acc, length, 0, true);
 800c3e4:	7979      	ldrb	r1, [r7, #5]
 800c3e6:	88fa      	ldrh	r2, [r7, #6]
 800c3e8:	2301      	movs	r3, #1
 800c3ea:	9302      	str	r3, [sp, #8]
 800c3ec:	2300      	movs	r3, #0
 800c3ee:	9301      	str	r3, [sp, #4]
 800c3f0:	683b      	ldr	r3, [r7, #0]
 800c3f2:	9300      	str	r3, [sp, #0]
 800c3f4:	460b      	mov	r3, r1
 800c3f6:	2101      	movs	r1, #1
 800c3f8:	2001      	movs	r0, #1
 800c3fa:	f7ff fb89 	bl	800bb10 <Emm_V5_Pos_Control>
	Emm_V5_Pos_Control(2, 1, speed, acc, length, 0, true);
 800c3fe:	7979      	ldrb	r1, [r7, #5]
 800c400:	88fa      	ldrh	r2, [r7, #6]
 800c402:	2301      	movs	r3, #1
 800c404:	9302      	str	r3, [sp, #8]
 800c406:	2300      	movs	r3, #0
 800c408:	9301      	str	r3, [sp, #4]
 800c40a:	683b      	ldr	r3, [r7, #0]
 800c40c:	9300      	str	r3, [sp, #0]
 800c40e:	460b      	mov	r3, r1
 800c410:	2101      	movs	r1, #1
 800c412:	2002      	movs	r0, #2
 800c414:	f7ff fb7c 	bl	800bb10 <Emm_V5_Pos_Control>
	Emm_V5_Pos_Control(3, 1, speed, acc, length, 0, true);
 800c418:	7979      	ldrb	r1, [r7, #5]
 800c41a:	88fa      	ldrh	r2, [r7, #6]
 800c41c:	2301      	movs	r3, #1
 800c41e:	9302      	str	r3, [sp, #8]
 800c420:	2300      	movs	r3, #0
 800c422:	9301      	str	r3, [sp, #4]
 800c424:	683b      	ldr	r3, [r7, #0]
 800c426:	9300      	str	r3, [sp, #0]
 800c428:	460b      	mov	r3, r1
 800c42a:	2101      	movs	r1, #1
 800c42c:	2003      	movs	r0, #3
 800c42e:	f7ff fb6f 	bl	800bb10 <Emm_V5_Pos_Control>
	Emm_V5_Pos_Control(4, 1, speed, acc, length, 0, true);
 800c432:	7979      	ldrb	r1, [r7, #5]
 800c434:	88fa      	ldrh	r2, [r7, #6]
 800c436:	2301      	movs	r3, #1
 800c438:	9302      	str	r3, [sp, #8]
 800c43a:	2300      	movs	r3, #0
 800c43c:	9301      	str	r3, [sp, #4]
 800c43e:	683b      	ldr	r3, [r7, #0]
 800c440:	9300      	str	r3, [sp, #0]
 800c442:	460b      	mov	r3, r1
 800c444:	2101      	movs	r1, #1
 800c446:	2004      	movs	r0, #4
 800c448:	f7ff fb62 	bl	800bb10 <Emm_V5_Pos_Control>
	// 触发多机同步开始运动
	Emm_V5_Synchronous_motion();
 800c44c:	f7ff fbd6 	bl	800bbfc <Emm_V5_Synchronous_motion>
	HAL_Delay(5);
 800c450:	2005      	movs	r0, #5
 800c452:	f7f6 ff03 	bl	800325c <HAL_Delay>
	while(broadcast_flag == 0){
 800c456:	e035      	b.n	800c4c4 <Move_Back+0x108>
		// 在broadcast_flag = 1时跳出去
		// 底盘步进电机移动
		Emm_V5_Pos_Control(1, 1, speed, acc, length, 0, true);
 800c458:	7979      	ldrb	r1, [r7, #5]
 800c45a:	88fa      	ldrh	r2, [r7, #6]
 800c45c:	2301      	movs	r3, #1
 800c45e:	9302      	str	r3, [sp, #8]
 800c460:	2300      	movs	r3, #0
 800c462:	9301      	str	r3, [sp, #4]
 800c464:	683b      	ldr	r3, [r7, #0]
 800c466:	9300      	str	r3, [sp, #0]
 800c468:	460b      	mov	r3, r1
 800c46a:	2101      	movs	r1, #1
 800c46c:	2001      	movs	r0, #1
 800c46e:	f7ff fb4f 	bl	800bb10 <Emm_V5_Pos_Control>
		Emm_V5_Pos_Control(2, 1, speed, acc, length, 0, true);
 800c472:	7979      	ldrb	r1, [r7, #5]
 800c474:	88fa      	ldrh	r2, [r7, #6]
 800c476:	2301      	movs	r3, #1
 800c478:	9302      	str	r3, [sp, #8]
 800c47a:	2300      	movs	r3, #0
 800c47c:	9301      	str	r3, [sp, #4]
 800c47e:	683b      	ldr	r3, [r7, #0]
 800c480:	9300      	str	r3, [sp, #0]
 800c482:	460b      	mov	r3, r1
 800c484:	2101      	movs	r1, #1
 800c486:	2002      	movs	r0, #2
 800c488:	f7ff fb42 	bl	800bb10 <Emm_V5_Pos_Control>
		Emm_V5_Pos_Control(3, 1, speed, acc, length, 0, true);
 800c48c:	7979      	ldrb	r1, [r7, #5]
 800c48e:	88fa      	ldrh	r2, [r7, #6]
 800c490:	2301      	movs	r3, #1
 800c492:	9302      	str	r3, [sp, #8]
 800c494:	2300      	movs	r3, #0
 800c496:	9301      	str	r3, [sp, #4]
 800c498:	683b      	ldr	r3, [r7, #0]
 800c49a:	9300      	str	r3, [sp, #0]
 800c49c:	460b      	mov	r3, r1
 800c49e:	2101      	movs	r1, #1
 800c4a0:	2003      	movs	r0, #3
 800c4a2:	f7ff fb35 	bl	800bb10 <Emm_V5_Pos_Control>
		Emm_V5_Pos_Control(4, 1, speed, acc, length, 0, true);
 800c4a6:	7979      	ldrb	r1, [r7, #5]
 800c4a8:	88fa      	ldrh	r2, [r7, #6]
 800c4aa:	2301      	movs	r3, #1
 800c4ac:	9302      	str	r3, [sp, #8]
 800c4ae:	2300      	movs	r3, #0
 800c4b0:	9301      	str	r3, [sp, #4]
 800c4b2:	683b      	ldr	r3, [r7, #0]
 800c4b4:	9300      	str	r3, [sp, #0]
 800c4b6:	460b      	mov	r3, r1
 800c4b8:	2101      	movs	r1, #1
 800c4ba:	2004      	movs	r0, #4
 800c4bc:	f7ff fb28 	bl	800bb10 <Emm_V5_Pos_Control>
		// 触发多机同步开始运动
		Emm_V5_Synchronous_motion();
 800c4c0:	f7ff fb9c 	bl	800bbfc <Emm_V5_Synchronous_motion>
	while(broadcast_flag == 0){
 800c4c4:	4b0d      	ldr	r3, [pc, #52]	@ (800c4fc <Move_Back+0x140>)
 800c4c6:	781b      	ldrb	r3, [r3, #0]
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d0c5      	beq.n	800c458 <Move_Back+0x9c>
	}
	broadcast_flag = 0;
 800c4cc:	4b0b      	ldr	r3, [pc, #44]	@ (800c4fc <Move_Back+0x140>)
 800c4ce:	2200      	movs	r2, #0
 800c4d0:	701a      	strb	r2, [r3, #0]
	// 使能阻塞定时器中断
	HAL_TIM_Base_Start_IT(&htim12);
 800c4d2:	480b      	ldr	r0, [pc, #44]	@ (800c500 <Move_Back+0x144>)
 800c4d4:	f7fb ff1e 	bl	8008314 <HAL_TIM_Base_Start_IT>
	Call_Flag = true;
 800c4d8:	4b0a      	ldr	r3, [pc, #40]	@ (800c504 <Move_Back+0x148>)
 800c4da:	2201      	movs	r2, #1
 800c4dc:	701a      	strb	r2, [r3, #0]
	while(Apply_Chock == true)
 800c4de:	bf00      	nop
 800c4e0:	4b05      	ldr	r3, [pc, #20]	@ (800c4f8 <Move_Back+0x13c>)
 800c4e2:	781b      	ldrb	r3, [r3, #0]
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d1fb      	bne.n	800c4e0 <Move_Back+0x124>
	{
//		还在阻塞
	}
	return true;
 800c4e8:	2301      	movs	r3, #1
}
 800c4ea:	4618      	mov	r0, r3
 800c4ec:	3708      	adds	r7, #8
 800c4ee:	46bd      	mov	sp, r7
 800c4f0:	bd80      	pop	{r7, pc}
 800c4f2:	bf00      	nop
 800c4f4:	24000c20 	.word	0x24000c20
 800c4f8:	24000c21 	.word	0x24000c21
 800c4fc:	24000362 	.word	0x24000362
 800c500:	2400056c 	.word	0x2400056c
 800c504:	24000c22 	.word	0x24000c22

0800c508 <Move_fanxuzhuan>:

bool Move_fanxuzhuan(u16 speed, u8 acc, u32 length)
{
 800c508:	b580      	push	{r7, lr}
 800c50a:	b086      	sub	sp, #24
 800c50c:	af04      	add	r7, sp, #16
 800c50e:	4603      	mov	r3, r0
 800c510:	603a      	str	r2, [r7, #0]
 800c512:	80fb      	strh	r3, [r7, #6]
 800c514:	460b      	mov	r3, r1
 800c516:	717b      	strb	r3, [r7, #5]
	// 查询当前是否有阻塞操作,有阻塞操作，结束函数并返回false
	if (Choke_Flag == true)
 800c518:	4b49      	ldr	r3, [pc, #292]	@ (800c640 <Move_fanxuzhuan+0x138>)
 800c51a:	781b      	ldrb	r3, [r3, #0]
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d001      	beq.n	800c524 <Move_fanxuzhuan+0x1c>
		return false;
 800c520:	2300      	movs	r3, #0
 800c522:	e088      	b.n	800c636 <Move_fanxuzhuan+0x12e>
	else
		Choke_Flag = true;
 800c524:	4b46      	ldr	r3, [pc, #280]	@ (800c640 <Move_fanxuzhuan+0x138>)
 800c526:	2201      	movs	r2, #1
 800c528:	701a      	strb	r2, [r3, #0]
	// 无阻塞操作，申请阻塞
	Apply_Chock = true;
 800c52a:	4b46      	ldr	r3, [pc, #280]	@ (800c644 <Move_fanxuzhuan+0x13c>)
 800c52c:	2201      	movs	r2, #1
 800c52e:	701a      	strb	r2, [r3, #0]
	// 底盘步进电机移动
	Emm_V5_Pos_Control(1, 1, speed, acc, length, 0, true);
 800c530:	7979      	ldrb	r1, [r7, #5]
 800c532:	88fa      	ldrh	r2, [r7, #6]
 800c534:	2301      	movs	r3, #1
 800c536:	9302      	str	r3, [sp, #8]
 800c538:	2300      	movs	r3, #0
 800c53a:	9301      	str	r3, [sp, #4]
 800c53c:	683b      	ldr	r3, [r7, #0]
 800c53e:	9300      	str	r3, [sp, #0]
 800c540:	460b      	mov	r3, r1
 800c542:	2101      	movs	r1, #1
 800c544:	2001      	movs	r0, #1
 800c546:	f7ff fae3 	bl	800bb10 <Emm_V5_Pos_Control>
	Emm_V5_Pos_Control(2, 0, speed, acc, length, 0, true);
 800c54a:	7979      	ldrb	r1, [r7, #5]
 800c54c:	88fa      	ldrh	r2, [r7, #6]
 800c54e:	2301      	movs	r3, #1
 800c550:	9302      	str	r3, [sp, #8]
 800c552:	2300      	movs	r3, #0
 800c554:	9301      	str	r3, [sp, #4]
 800c556:	683b      	ldr	r3, [r7, #0]
 800c558:	9300      	str	r3, [sp, #0]
 800c55a:	460b      	mov	r3, r1
 800c55c:	2100      	movs	r1, #0
 800c55e:	2002      	movs	r0, #2
 800c560:	f7ff fad6 	bl	800bb10 <Emm_V5_Pos_Control>
	Emm_V5_Pos_Control(3, 0, speed, acc, length, 0, true);
 800c564:	7979      	ldrb	r1, [r7, #5]
 800c566:	88fa      	ldrh	r2, [r7, #6]
 800c568:	2301      	movs	r3, #1
 800c56a:	9302      	str	r3, [sp, #8]
 800c56c:	2300      	movs	r3, #0
 800c56e:	9301      	str	r3, [sp, #4]
 800c570:	683b      	ldr	r3, [r7, #0]
 800c572:	9300      	str	r3, [sp, #0]
 800c574:	460b      	mov	r3, r1
 800c576:	2100      	movs	r1, #0
 800c578:	2003      	movs	r0, #3
 800c57a:	f7ff fac9 	bl	800bb10 <Emm_V5_Pos_Control>
	Emm_V5_Pos_Control(4, 1, speed, acc, length, 0, true);
 800c57e:	7979      	ldrb	r1, [r7, #5]
 800c580:	88fa      	ldrh	r2, [r7, #6]
 800c582:	2301      	movs	r3, #1
 800c584:	9302      	str	r3, [sp, #8]
 800c586:	2300      	movs	r3, #0
 800c588:	9301      	str	r3, [sp, #4]
 800c58a:	683b      	ldr	r3, [r7, #0]
 800c58c:	9300      	str	r3, [sp, #0]
 800c58e:	460b      	mov	r3, r1
 800c590:	2101      	movs	r1, #1
 800c592:	2004      	movs	r0, #4
 800c594:	f7ff fabc 	bl	800bb10 <Emm_V5_Pos_Control>
	// 触发多机同步开始运动
	Emm_V5_Synchronous_motion();
 800c598:	f7ff fb30 	bl	800bbfc <Emm_V5_Synchronous_motion>
	HAL_Delay(5);
 800c59c:	2005      	movs	r0, #5
 800c59e:	f7f6 fe5d 	bl	800325c <HAL_Delay>
	while(broadcast_flag == 0){
 800c5a2:	e035      	b.n	800c610 <Move_fanxuzhuan+0x108>
		// 在broadcast_flag = 1时跳出去
		// 底盘步进电机移动
		Emm_V5_Pos_Control(1, 1, speed, acc, length, 0, true);
 800c5a4:	7979      	ldrb	r1, [r7, #5]
 800c5a6:	88fa      	ldrh	r2, [r7, #6]
 800c5a8:	2301      	movs	r3, #1
 800c5aa:	9302      	str	r3, [sp, #8]
 800c5ac:	2300      	movs	r3, #0
 800c5ae:	9301      	str	r3, [sp, #4]
 800c5b0:	683b      	ldr	r3, [r7, #0]
 800c5b2:	9300      	str	r3, [sp, #0]
 800c5b4:	460b      	mov	r3, r1
 800c5b6:	2101      	movs	r1, #1
 800c5b8:	2001      	movs	r0, #1
 800c5ba:	f7ff faa9 	bl	800bb10 <Emm_V5_Pos_Control>
		Emm_V5_Pos_Control(2, 0, speed, acc, length, 0, true);
 800c5be:	7979      	ldrb	r1, [r7, #5]
 800c5c0:	88fa      	ldrh	r2, [r7, #6]
 800c5c2:	2301      	movs	r3, #1
 800c5c4:	9302      	str	r3, [sp, #8]
 800c5c6:	2300      	movs	r3, #0
 800c5c8:	9301      	str	r3, [sp, #4]
 800c5ca:	683b      	ldr	r3, [r7, #0]
 800c5cc:	9300      	str	r3, [sp, #0]
 800c5ce:	460b      	mov	r3, r1
 800c5d0:	2100      	movs	r1, #0
 800c5d2:	2002      	movs	r0, #2
 800c5d4:	f7ff fa9c 	bl	800bb10 <Emm_V5_Pos_Control>
		Emm_V5_Pos_Control(3, 0, speed, acc, length, 0, true);
 800c5d8:	7979      	ldrb	r1, [r7, #5]
 800c5da:	88fa      	ldrh	r2, [r7, #6]
 800c5dc:	2301      	movs	r3, #1
 800c5de:	9302      	str	r3, [sp, #8]
 800c5e0:	2300      	movs	r3, #0
 800c5e2:	9301      	str	r3, [sp, #4]
 800c5e4:	683b      	ldr	r3, [r7, #0]
 800c5e6:	9300      	str	r3, [sp, #0]
 800c5e8:	460b      	mov	r3, r1
 800c5ea:	2100      	movs	r1, #0
 800c5ec:	2003      	movs	r0, #3
 800c5ee:	f7ff fa8f 	bl	800bb10 <Emm_V5_Pos_Control>
		Emm_V5_Pos_Control(4, 1, speed, acc, length, 0, true);
 800c5f2:	7979      	ldrb	r1, [r7, #5]
 800c5f4:	88fa      	ldrh	r2, [r7, #6]
 800c5f6:	2301      	movs	r3, #1
 800c5f8:	9302      	str	r3, [sp, #8]
 800c5fa:	2300      	movs	r3, #0
 800c5fc:	9301      	str	r3, [sp, #4]
 800c5fe:	683b      	ldr	r3, [r7, #0]
 800c600:	9300      	str	r3, [sp, #0]
 800c602:	460b      	mov	r3, r1
 800c604:	2101      	movs	r1, #1
 800c606:	2004      	movs	r0, #4
 800c608:	f7ff fa82 	bl	800bb10 <Emm_V5_Pos_Control>
		// 触发多机同步开始运动
		Emm_V5_Synchronous_motion();
 800c60c:	f7ff faf6 	bl	800bbfc <Emm_V5_Synchronous_motion>
	while(broadcast_flag == 0){
 800c610:	4b0d      	ldr	r3, [pc, #52]	@ (800c648 <Move_fanxuzhuan+0x140>)
 800c612:	781b      	ldrb	r3, [r3, #0]
 800c614:	2b00      	cmp	r3, #0
 800c616:	d0c5      	beq.n	800c5a4 <Move_fanxuzhuan+0x9c>
	}
	broadcast_flag = 0;
 800c618:	4b0b      	ldr	r3, [pc, #44]	@ (800c648 <Move_fanxuzhuan+0x140>)
 800c61a:	2200      	movs	r2, #0
 800c61c:	701a      	strb	r2, [r3, #0]
	// 使能阻塞定时器中断
	HAL_TIM_Base_Start_IT(&htim12);
 800c61e:	480b      	ldr	r0, [pc, #44]	@ (800c64c <Move_fanxuzhuan+0x144>)
 800c620:	f7fb fe78 	bl	8008314 <HAL_TIM_Base_Start_IT>
	Call_Flag = true;
 800c624:	4b0a      	ldr	r3, [pc, #40]	@ (800c650 <Move_fanxuzhuan+0x148>)
 800c626:	2201      	movs	r2, #1
 800c628:	701a      	strb	r2, [r3, #0]
	while(Apply_Chock == true)
 800c62a:	bf00      	nop
 800c62c:	4b05      	ldr	r3, [pc, #20]	@ (800c644 <Move_fanxuzhuan+0x13c>)
 800c62e:	781b      	ldrb	r3, [r3, #0]
 800c630:	2b00      	cmp	r3, #0
 800c632:	d1fb      	bne.n	800c62c <Move_fanxuzhuan+0x124>
	{
//		还在阻塞
	}
	return true;
 800c634:	2301      	movs	r3, #1
}
 800c636:	4618      	mov	r0, r3
 800c638:	3708      	adds	r7, #8
 800c63a:	46bd      	mov	sp, r7
 800c63c:	bd80      	pop	{r7, pc}
 800c63e:	bf00      	nop
 800c640:	24000c20 	.word	0x24000c20
 800c644:	24000c21 	.word	0x24000c21
 800c648:	24000362 	.word	0x24000362
 800c64c:	2400056c 	.word	0x2400056c
 800c650:	24000c22 	.word	0x24000c22

0800c654 <Move_Right>:
// //	RxFlag = 0;
// 	HAL_Delay(30);
// }

bool Move_Right(u16 speed, u8 acc, u32 length)
{
 800c654:	b580      	push	{r7, lr}
 800c656:	b086      	sub	sp, #24
 800c658:	af04      	add	r7, sp, #16
 800c65a:	4603      	mov	r3, r0
 800c65c:	603a      	str	r2, [r7, #0]
 800c65e:	80fb      	strh	r3, [r7, #6]
 800c660:	460b      	mov	r3, r1
 800c662:	717b      	strb	r3, [r7, #5]
	// 查询当前是否有阻塞操作,有阻塞操作，结束函数并返回false
	if (Choke_Flag == true)
 800c664:	4b49      	ldr	r3, [pc, #292]	@ (800c78c <Move_Right+0x138>)
 800c666:	781b      	ldrb	r3, [r3, #0]
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d001      	beq.n	800c670 <Move_Right+0x1c>
		return false;
 800c66c:	2300      	movs	r3, #0
 800c66e:	e088      	b.n	800c782 <Move_Right+0x12e>
	else
		Choke_Flag = true;
 800c670:	4b46      	ldr	r3, [pc, #280]	@ (800c78c <Move_Right+0x138>)
 800c672:	2201      	movs	r2, #1
 800c674:	701a      	strb	r2, [r3, #0]
	// 无阻塞操作，申请阻塞
	Apply_Chock = true;
 800c676:	4b46      	ldr	r3, [pc, #280]	@ (800c790 <Move_Right+0x13c>)
 800c678:	2201      	movs	r2, #1
 800c67a:	701a      	strb	r2, [r3, #0]
	// 底盘步进电机移动
	Emm_V5_Pos_Control(1, 0, speed, acc, length, 0, true);
 800c67c:	7979      	ldrb	r1, [r7, #5]
 800c67e:	88fa      	ldrh	r2, [r7, #6]
 800c680:	2301      	movs	r3, #1
 800c682:	9302      	str	r3, [sp, #8]
 800c684:	2300      	movs	r3, #0
 800c686:	9301      	str	r3, [sp, #4]
 800c688:	683b      	ldr	r3, [r7, #0]
 800c68a:	9300      	str	r3, [sp, #0]
 800c68c:	460b      	mov	r3, r1
 800c68e:	2100      	movs	r1, #0
 800c690:	2001      	movs	r0, #1
 800c692:	f7ff fa3d 	bl	800bb10 <Emm_V5_Pos_Control>
	Emm_V5_Pos_Control(2, 1, speed, acc, length, 0, true);
 800c696:	7979      	ldrb	r1, [r7, #5]
 800c698:	88fa      	ldrh	r2, [r7, #6]
 800c69a:	2301      	movs	r3, #1
 800c69c:	9302      	str	r3, [sp, #8]
 800c69e:	2300      	movs	r3, #0
 800c6a0:	9301      	str	r3, [sp, #4]
 800c6a2:	683b      	ldr	r3, [r7, #0]
 800c6a4:	9300      	str	r3, [sp, #0]
 800c6a6:	460b      	mov	r3, r1
 800c6a8:	2101      	movs	r1, #1
 800c6aa:	2002      	movs	r0, #2
 800c6ac:	f7ff fa30 	bl	800bb10 <Emm_V5_Pos_Control>
	Emm_V5_Pos_Control(3, 0, speed, acc, length, 0, true);
 800c6b0:	7979      	ldrb	r1, [r7, #5]
 800c6b2:	88fa      	ldrh	r2, [r7, #6]
 800c6b4:	2301      	movs	r3, #1
 800c6b6:	9302      	str	r3, [sp, #8]
 800c6b8:	2300      	movs	r3, #0
 800c6ba:	9301      	str	r3, [sp, #4]
 800c6bc:	683b      	ldr	r3, [r7, #0]
 800c6be:	9300      	str	r3, [sp, #0]
 800c6c0:	460b      	mov	r3, r1
 800c6c2:	2100      	movs	r1, #0
 800c6c4:	2003      	movs	r0, #3
 800c6c6:	f7ff fa23 	bl	800bb10 <Emm_V5_Pos_Control>
	Emm_V5_Pos_Control(4, 1, speed, acc, length, 0, true);
 800c6ca:	7979      	ldrb	r1, [r7, #5]
 800c6cc:	88fa      	ldrh	r2, [r7, #6]
 800c6ce:	2301      	movs	r3, #1
 800c6d0:	9302      	str	r3, [sp, #8]
 800c6d2:	2300      	movs	r3, #0
 800c6d4:	9301      	str	r3, [sp, #4]
 800c6d6:	683b      	ldr	r3, [r7, #0]
 800c6d8:	9300      	str	r3, [sp, #0]
 800c6da:	460b      	mov	r3, r1
 800c6dc:	2101      	movs	r1, #1
 800c6de:	2004      	movs	r0, #4
 800c6e0:	f7ff fa16 	bl	800bb10 <Emm_V5_Pos_Control>
	// 触发多机同步开始运动
	Emm_V5_Synchronous_motion();
 800c6e4:	f7ff fa8a 	bl	800bbfc <Emm_V5_Synchronous_motion>
	HAL_Delay(5);
 800c6e8:	2005      	movs	r0, #5
 800c6ea:	f7f6 fdb7 	bl	800325c <HAL_Delay>
	while(broadcast_flag == 0){
 800c6ee:	e035      	b.n	800c75c <Move_Right+0x108>
		// 在broadcast_flag = 1时跳出去
//		HAL_Delay(200);
		// 底盘步进电机移动
		Emm_V5_Pos_Control(1, 0, speed, acc, length, 0, true);
 800c6f0:	7979      	ldrb	r1, [r7, #5]
 800c6f2:	88fa      	ldrh	r2, [r7, #6]
 800c6f4:	2301      	movs	r3, #1
 800c6f6:	9302      	str	r3, [sp, #8]
 800c6f8:	2300      	movs	r3, #0
 800c6fa:	9301      	str	r3, [sp, #4]
 800c6fc:	683b      	ldr	r3, [r7, #0]
 800c6fe:	9300      	str	r3, [sp, #0]
 800c700:	460b      	mov	r3, r1
 800c702:	2100      	movs	r1, #0
 800c704:	2001      	movs	r0, #1
 800c706:	f7ff fa03 	bl	800bb10 <Emm_V5_Pos_Control>
		Emm_V5_Pos_Control(2, 1, speed, acc, length, 0, true);
 800c70a:	7979      	ldrb	r1, [r7, #5]
 800c70c:	88fa      	ldrh	r2, [r7, #6]
 800c70e:	2301      	movs	r3, #1
 800c710:	9302      	str	r3, [sp, #8]
 800c712:	2300      	movs	r3, #0
 800c714:	9301      	str	r3, [sp, #4]
 800c716:	683b      	ldr	r3, [r7, #0]
 800c718:	9300      	str	r3, [sp, #0]
 800c71a:	460b      	mov	r3, r1
 800c71c:	2101      	movs	r1, #1
 800c71e:	2002      	movs	r0, #2
 800c720:	f7ff f9f6 	bl	800bb10 <Emm_V5_Pos_Control>
		Emm_V5_Pos_Control(3, 0, speed, acc, length, 0, true);
 800c724:	7979      	ldrb	r1, [r7, #5]
 800c726:	88fa      	ldrh	r2, [r7, #6]
 800c728:	2301      	movs	r3, #1
 800c72a:	9302      	str	r3, [sp, #8]
 800c72c:	2300      	movs	r3, #0
 800c72e:	9301      	str	r3, [sp, #4]
 800c730:	683b      	ldr	r3, [r7, #0]
 800c732:	9300      	str	r3, [sp, #0]
 800c734:	460b      	mov	r3, r1
 800c736:	2100      	movs	r1, #0
 800c738:	2003      	movs	r0, #3
 800c73a:	f7ff f9e9 	bl	800bb10 <Emm_V5_Pos_Control>
		Emm_V5_Pos_Control(4, 1, speed, acc, length, 0, true);
 800c73e:	7979      	ldrb	r1, [r7, #5]
 800c740:	88fa      	ldrh	r2, [r7, #6]
 800c742:	2301      	movs	r3, #1
 800c744:	9302      	str	r3, [sp, #8]
 800c746:	2300      	movs	r3, #0
 800c748:	9301      	str	r3, [sp, #4]
 800c74a:	683b      	ldr	r3, [r7, #0]
 800c74c:	9300      	str	r3, [sp, #0]
 800c74e:	460b      	mov	r3, r1
 800c750:	2101      	movs	r1, #1
 800c752:	2004      	movs	r0, #4
 800c754:	f7ff f9dc 	bl	800bb10 <Emm_V5_Pos_Control>
		// 触发多机同步开始运动
		Emm_V5_Synchronous_motion();
 800c758:	f7ff fa50 	bl	800bbfc <Emm_V5_Synchronous_motion>
	while(broadcast_flag == 0){
 800c75c:	4b0d      	ldr	r3, [pc, #52]	@ (800c794 <Move_Right+0x140>)
 800c75e:	781b      	ldrb	r3, [r3, #0]
 800c760:	2b00      	cmp	r3, #0
 800c762:	d0c5      	beq.n	800c6f0 <Move_Right+0x9c>
	}
	broadcast_flag = 0;
 800c764:	4b0b      	ldr	r3, [pc, #44]	@ (800c794 <Move_Right+0x140>)
 800c766:	2200      	movs	r2, #0
 800c768:	701a      	strb	r2, [r3, #0]
	// 使能阻塞定时器中断
	HAL_TIM_Base_Start_IT(&htim12);
 800c76a:	480b      	ldr	r0, [pc, #44]	@ (800c798 <Move_Right+0x144>)
 800c76c:	f7fb fdd2 	bl	8008314 <HAL_TIM_Base_Start_IT>
	Call_Flag = true;
 800c770:	4b0a      	ldr	r3, [pc, #40]	@ (800c79c <Move_Right+0x148>)
 800c772:	2201      	movs	r2, #1
 800c774:	701a      	strb	r2, [r3, #0]
	while(Apply_Chock == true)
 800c776:	bf00      	nop
 800c778:	4b05      	ldr	r3, [pc, #20]	@ (800c790 <Move_Right+0x13c>)
 800c77a:	781b      	ldrb	r3, [r3, #0]
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d1fb      	bne.n	800c778 <Move_Right+0x124>
	{
//		还在阻塞
	}
	return true;
 800c780:	2301      	movs	r3, #1
}
 800c782:	4618      	mov	r0, r3
 800c784:	3708      	adds	r7, #8
 800c786:	46bd      	mov	sp, r7
 800c788:	bd80      	pop	{r7, pc}
 800c78a:	bf00      	nop
 800c78c:	24000c20 	.word	0x24000c20
 800c790:	24000c21 	.word	0x24000c21
 800c794:	24000362 	.word	0x24000362
 800c798:	2400056c 	.word	0x2400056c
 800c79c:	24000c22 	.word	0x24000c22

0800c7a0 <Move_zhengxuzhuan>:
////	RxFlag = 0;
//	HAL_Delay(30);
//}

bool Move_zhengxuzhuan(u16 speed, u8 acc, u32 length)
{
 800c7a0:	b580      	push	{r7, lr}
 800c7a2:	b086      	sub	sp, #24
 800c7a4:	af04      	add	r7, sp, #16
 800c7a6:	4603      	mov	r3, r0
 800c7a8:	603a      	str	r2, [r7, #0]
 800c7aa:	80fb      	strh	r3, [r7, #6]
 800c7ac:	460b      	mov	r3, r1
 800c7ae:	717b      	strb	r3, [r7, #5]
	// 查询当前是否有阻塞操作,有阻塞操作，结束函数并返回false
	if (Choke_Flag == true)
 800c7b0:	4b49      	ldr	r3, [pc, #292]	@ (800c8d8 <Move_zhengxuzhuan+0x138>)
 800c7b2:	781b      	ldrb	r3, [r3, #0]
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d001      	beq.n	800c7bc <Move_zhengxuzhuan+0x1c>
		return false;
 800c7b8:	2300      	movs	r3, #0
 800c7ba:	e088      	b.n	800c8ce <Move_zhengxuzhuan+0x12e>
	else
		Choke_Flag = true;
 800c7bc:	4b46      	ldr	r3, [pc, #280]	@ (800c8d8 <Move_zhengxuzhuan+0x138>)
 800c7be:	2201      	movs	r2, #1
 800c7c0:	701a      	strb	r2, [r3, #0]
	// 无阻塞操作，申请阻塞
	Apply_Chock = true;
 800c7c2:	4b46      	ldr	r3, [pc, #280]	@ (800c8dc <Move_zhengxuzhuan+0x13c>)
 800c7c4:	2201      	movs	r2, #1
 800c7c6:	701a      	strb	r2, [r3, #0]
	// 底盘步进电机移动
	Emm_V5_Pos_Control(1, 0, speed, acc, length, 0, true);
 800c7c8:	7979      	ldrb	r1, [r7, #5]
 800c7ca:	88fa      	ldrh	r2, [r7, #6]
 800c7cc:	2301      	movs	r3, #1
 800c7ce:	9302      	str	r3, [sp, #8]
 800c7d0:	2300      	movs	r3, #0
 800c7d2:	9301      	str	r3, [sp, #4]
 800c7d4:	683b      	ldr	r3, [r7, #0]
 800c7d6:	9300      	str	r3, [sp, #0]
 800c7d8:	460b      	mov	r3, r1
 800c7da:	2100      	movs	r1, #0
 800c7dc:	2001      	movs	r0, #1
 800c7de:	f7ff f997 	bl	800bb10 <Emm_V5_Pos_Control>
	Emm_V5_Pos_Control(2, 1, speed, acc, length, 0, true);
 800c7e2:	7979      	ldrb	r1, [r7, #5]
 800c7e4:	88fa      	ldrh	r2, [r7, #6]
 800c7e6:	2301      	movs	r3, #1
 800c7e8:	9302      	str	r3, [sp, #8]
 800c7ea:	2300      	movs	r3, #0
 800c7ec:	9301      	str	r3, [sp, #4]
 800c7ee:	683b      	ldr	r3, [r7, #0]
 800c7f0:	9300      	str	r3, [sp, #0]
 800c7f2:	460b      	mov	r3, r1
 800c7f4:	2101      	movs	r1, #1
 800c7f6:	2002      	movs	r0, #2
 800c7f8:	f7ff f98a 	bl	800bb10 <Emm_V5_Pos_Control>
	Emm_V5_Pos_Control(3, 1, speed, acc, length, 0, true);
 800c7fc:	7979      	ldrb	r1, [r7, #5]
 800c7fe:	88fa      	ldrh	r2, [r7, #6]
 800c800:	2301      	movs	r3, #1
 800c802:	9302      	str	r3, [sp, #8]
 800c804:	2300      	movs	r3, #0
 800c806:	9301      	str	r3, [sp, #4]
 800c808:	683b      	ldr	r3, [r7, #0]
 800c80a:	9300      	str	r3, [sp, #0]
 800c80c:	460b      	mov	r3, r1
 800c80e:	2101      	movs	r1, #1
 800c810:	2003      	movs	r0, #3
 800c812:	f7ff f97d 	bl	800bb10 <Emm_V5_Pos_Control>
	Emm_V5_Pos_Control(4, 0, speed, acc, length, 0, true);
 800c816:	7979      	ldrb	r1, [r7, #5]
 800c818:	88fa      	ldrh	r2, [r7, #6]
 800c81a:	2301      	movs	r3, #1
 800c81c:	9302      	str	r3, [sp, #8]
 800c81e:	2300      	movs	r3, #0
 800c820:	9301      	str	r3, [sp, #4]
 800c822:	683b      	ldr	r3, [r7, #0]
 800c824:	9300      	str	r3, [sp, #0]
 800c826:	460b      	mov	r3, r1
 800c828:	2100      	movs	r1, #0
 800c82a:	2004      	movs	r0, #4
 800c82c:	f7ff f970 	bl	800bb10 <Emm_V5_Pos_Control>
	// 触发多机同步开始运动
	Emm_V5_Synchronous_motion();
 800c830:	f7ff f9e4 	bl	800bbfc <Emm_V5_Synchronous_motion>
	HAL_Delay(5);
 800c834:	2005      	movs	r0, #5
 800c836:	f7f6 fd11 	bl	800325c <HAL_Delay>
	while(broadcast_flag == 0){
 800c83a:	e035      	b.n	800c8a8 <Move_zhengxuzhuan+0x108>
		// 在broadcast_flag = 1时跳出去
//		HAL_Delay(200);
		// 底盘步进电机移动
		Emm_V5_Pos_Control(1, 0, speed, acc, length, 0, true);
 800c83c:	7979      	ldrb	r1, [r7, #5]
 800c83e:	88fa      	ldrh	r2, [r7, #6]
 800c840:	2301      	movs	r3, #1
 800c842:	9302      	str	r3, [sp, #8]
 800c844:	2300      	movs	r3, #0
 800c846:	9301      	str	r3, [sp, #4]
 800c848:	683b      	ldr	r3, [r7, #0]
 800c84a:	9300      	str	r3, [sp, #0]
 800c84c:	460b      	mov	r3, r1
 800c84e:	2100      	movs	r1, #0
 800c850:	2001      	movs	r0, #1
 800c852:	f7ff f95d 	bl	800bb10 <Emm_V5_Pos_Control>
		Emm_V5_Pos_Control(2, 1, speed, acc, length, 0, true);
 800c856:	7979      	ldrb	r1, [r7, #5]
 800c858:	88fa      	ldrh	r2, [r7, #6]
 800c85a:	2301      	movs	r3, #1
 800c85c:	9302      	str	r3, [sp, #8]
 800c85e:	2300      	movs	r3, #0
 800c860:	9301      	str	r3, [sp, #4]
 800c862:	683b      	ldr	r3, [r7, #0]
 800c864:	9300      	str	r3, [sp, #0]
 800c866:	460b      	mov	r3, r1
 800c868:	2101      	movs	r1, #1
 800c86a:	2002      	movs	r0, #2
 800c86c:	f7ff f950 	bl	800bb10 <Emm_V5_Pos_Control>
		Emm_V5_Pos_Control(3, 1, speed, acc, length, 0, true);
 800c870:	7979      	ldrb	r1, [r7, #5]
 800c872:	88fa      	ldrh	r2, [r7, #6]
 800c874:	2301      	movs	r3, #1
 800c876:	9302      	str	r3, [sp, #8]
 800c878:	2300      	movs	r3, #0
 800c87a:	9301      	str	r3, [sp, #4]
 800c87c:	683b      	ldr	r3, [r7, #0]
 800c87e:	9300      	str	r3, [sp, #0]
 800c880:	460b      	mov	r3, r1
 800c882:	2101      	movs	r1, #1
 800c884:	2003      	movs	r0, #3
 800c886:	f7ff f943 	bl	800bb10 <Emm_V5_Pos_Control>
		Emm_V5_Pos_Control(4, 0, speed, acc, length, 0, true);
 800c88a:	7979      	ldrb	r1, [r7, #5]
 800c88c:	88fa      	ldrh	r2, [r7, #6]
 800c88e:	2301      	movs	r3, #1
 800c890:	9302      	str	r3, [sp, #8]
 800c892:	2300      	movs	r3, #0
 800c894:	9301      	str	r3, [sp, #4]
 800c896:	683b      	ldr	r3, [r7, #0]
 800c898:	9300      	str	r3, [sp, #0]
 800c89a:	460b      	mov	r3, r1
 800c89c:	2100      	movs	r1, #0
 800c89e:	2004      	movs	r0, #4
 800c8a0:	f7ff f936 	bl	800bb10 <Emm_V5_Pos_Control>
		// 触发多机同步开始运动
		Emm_V5_Synchronous_motion();
 800c8a4:	f7ff f9aa 	bl	800bbfc <Emm_V5_Synchronous_motion>
	while(broadcast_flag == 0){
 800c8a8:	4b0d      	ldr	r3, [pc, #52]	@ (800c8e0 <Move_zhengxuzhuan+0x140>)
 800c8aa:	781b      	ldrb	r3, [r3, #0]
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d0c5      	beq.n	800c83c <Move_zhengxuzhuan+0x9c>
	}
	broadcast_flag = 0;
 800c8b0:	4b0b      	ldr	r3, [pc, #44]	@ (800c8e0 <Move_zhengxuzhuan+0x140>)
 800c8b2:	2200      	movs	r2, #0
 800c8b4:	701a      	strb	r2, [r3, #0]
	// 使能阻塞定时器中断
	HAL_TIM_Base_Start_IT(&htim12);
 800c8b6:	480b      	ldr	r0, [pc, #44]	@ (800c8e4 <Move_zhengxuzhuan+0x144>)
 800c8b8:	f7fb fd2c 	bl	8008314 <HAL_TIM_Base_Start_IT>
	Call_Flag = true;
 800c8bc:	4b0a      	ldr	r3, [pc, #40]	@ (800c8e8 <Move_zhengxuzhuan+0x148>)
 800c8be:	2201      	movs	r2, #1
 800c8c0:	701a      	strb	r2, [r3, #0]
	while(Apply_Chock == true)
 800c8c2:	bf00      	nop
 800c8c4:	4b05      	ldr	r3, [pc, #20]	@ (800c8dc <Move_zhengxuzhuan+0x13c>)
 800c8c6:	781b      	ldrb	r3, [r3, #0]
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d1fb      	bne.n	800c8c4 <Move_zhengxuzhuan+0x124>
	{
//		还在阻塞
	}
	return true;
 800c8cc:	2301      	movs	r3, #1
}
 800c8ce:	4618      	mov	r0, r3
 800c8d0:	3708      	adds	r7, #8
 800c8d2:	46bd      	mov	sp, r7
 800c8d4:	bd80      	pop	{r7, pc}
 800c8d6:	bf00      	nop
 800c8d8:	24000c20 	.word	0x24000c20
 800c8dc:	24000c21 	.word	0x24000c21
 800c8e0:	24000362 	.word	0x24000362
 800c8e4:	2400056c 	.word	0x2400056c
 800c8e8:	24000c22 	.word	0x24000c22

0800c8ec <Drop_Location_jiang>:
//	if(High_Length>=14000)
//		Emm_V5_Stop_Now(5,0);
//	HAL_Delay(30);
//}
void Drop_Location_jiang(u16 speed, u8 acc, u32 length)
{
 800c8ec:	b580      	push	{r7, lr}
 800c8ee:	b088      	sub	sp, #32
 800c8f0:	af04      	add	r7, sp, #16
 800c8f2:	4603      	mov	r3, r0
 800c8f4:	603a      	str	r2, [r7, #0]
 800c8f6:	80fb      	strh	r3, [r7, #6]
 800c8f8:	460b      	mov	r3, r1
 800c8fa:	717b      	strb	r3, [r7, #5]
	int time;
	time = length / speed * 20;  //毫秒
 800c8fc:	88fb      	ldrh	r3, [r7, #6]
 800c8fe:	683a      	ldr	r2, [r7, #0]
 800c900:	fbb2 f2f3 	udiv	r2, r2, r3
 800c904:	4613      	mov	r3, r2
 800c906:	009b      	lsls	r3, r3, #2
 800c908:	4413      	add	r3, r2
 800c90a:	009b      	lsls	r3, r3, #2
 800c90c:	60fb      	str	r3, [r7, #12]
	Emm_V5_Pos_Control(5, 1, speed, acc, length, 1, 0);
 800c90e:	7979      	ldrb	r1, [r7, #5]
 800c910:	88fa      	ldrh	r2, [r7, #6]
 800c912:	2300      	movs	r3, #0
 800c914:	9302      	str	r3, [sp, #8]
 800c916:	2301      	movs	r3, #1
 800c918:	9301      	str	r3, [sp, #4]
 800c91a:	683b      	ldr	r3, [r7, #0]
 800c91c:	9300      	str	r3, [sp, #0]
 800c91e:	460b      	mov	r3, r1
 800c920:	2101      	movs	r1, #1
 800c922:	2005      	movs	r0, #5
 800c924:	f7ff f8f4 	bl	800bb10 <Emm_V5_Pos_Control>
//	检查到位回读
	Emm_mode = 1;
 800c928:	4b0f      	ldr	r3, [pc, #60]	@ (800c968 <Drop_Location_jiang+0x7c>)
 800c92a:	2201      	movs	r2, #1
 800c92c:	701a      	strb	r2, [r3, #0]
	time5_jiancha = (time + 800) / 10;
 800c92e:	68fb      	ldr	r3, [r7, #12]
 800c930:	f503 7348 	add.w	r3, r3, #800	@ 0x320
 800c934:	4a0d      	ldr	r2, [pc, #52]	@ (800c96c <Drop_Location_jiang+0x80>)
 800c936:	fb82 1203 	smull	r1, r2, r2, r3
 800c93a:	1092      	asrs	r2, r2, #2
 800c93c:	17db      	asrs	r3, r3, #31
 800c93e:	1ad3      	subs	r3, r2, r3
 800c940:	4a0b      	ldr	r2, [pc, #44]	@ (800c970 <Drop_Location_jiang+0x84>)
 800c942:	6013      	str	r3, [r2, #0]
	while ((GetRxFlag() == 0) && (time5_jiancha != 0))
 800c944:	bf00      	nop
 800c946:	f7ff fbdf 	bl	800c108 <GetRxFlag>
 800c94a:	4603      	mov	r3, r0
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	d103      	bne.n	800c958 <Drop_Location_jiang+0x6c>
 800c950:	4b07      	ldr	r3, [pc, #28]	@ (800c970 <Drop_Location_jiang+0x84>)
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	2b00      	cmp	r3, #0
 800c956:	d1f6      	bne.n	800c946 <Drop_Location_jiang+0x5a>
		;
	HAL_Delay(30);
 800c958:	201e      	movs	r0, #30
 800c95a:	f7f6 fc7f 	bl	800325c <HAL_Delay>
}
 800c95e:	bf00      	nop
 800c960:	3710      	adds	r7, #16
 800c962:	46bd      	mov	sp, r7
 800c964:	bd80      	pop	{r7, pc}
 800c966:	bf00      	nop
 800c968:	240002b4 	.word	0x240002b4
 800c96c:	66666667 	.word	0x66666667
 800c970:	24000c24 	.word	0x24000c24

0800c974 <Move_Stop>:
	Emm_V5_Synchronous_motion();  // 触发多机同步开始运动

}

void Move_Stop(void)
{
 800c974:	b580      	push	{r7, lr}
 800c976:	af00      	add	r7, sp, #0
	Emm_V5_Stop_Now(1, true);
 800c978:	2101      	movs	r1, #1
 800c97a:	2001      	movs	r0, #1
 800c97c:	f7ff f91c 	bl	800bbb8 <Emm_V5_Stop_Now>
	Emm_V5_Stop_Now(2, true);
 800c980:	2101      	movs	r1, #1
 800c982:	2002      	movs	r0, #2
 800c984:	f7ff f918 	bl	800bbb8 <Emm_V5_Stop_Now>
	Emm_V5_Stop_Now(3, true);
 800c988:	2101      	movs	r1, #1
 800c98a:	2003      	movs	r0, #3
 800c98c:	f7ff f914 	bl	800bbb8 <Emm_V5_Stop_Now>
	Emm_V5_Stop_Now(4, true);
 800c990:	2101      	movs	r1, #1
 800c992:	2004      	movs	r0, #4
 800c994:	f7ff f910 	bl	800bbb8 <Emm_V5_Stop_Now>
	Emm_V5_Synchronous_motion();  // 触发多机同步开始运动
 800c998:	f7ff f930 	bl	800bbfc <Emm_V5_Synchronous_motion>
}
 800c99c:	bf00      	nop
 800c99e:	bd80      	pop	{r7, pc}

0800c9a0 <Move_TO_jianzhi1>:
	Move_Line(RunSpeed, RunAcc, Lineclk);
	HAL_Delay(yanshi);
}

void Move_TO_jianzhi1(float Backclk, float fanzhuanclk) //粗加工区
{
 800c9a0:	b580      	push	{r7, lr}
 800c9a2:	b084      	sub	sp, #16
 800c9a4:	af00      	add	r7, sp, #0
 800c9a6:	ed87 0a01 	vstr	s0, [r7, #4]
 800c9aa:	edc7 0a00 	vstr	s1, [r7]
	HAL_UART_Transmit(&huart10, (uint8_t*) "我要后退喽\n", sizeof("我要后退喽\n") - 1,0xffff);
 800c9ae:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c9b2:	2210      	movs	r2, #16
 800c9b4:	4930      	ldr	r1, [pc, #192]	@ (800ca78 <Move_TO_jianzhi1+0xd8>)
 800c9b6:	4831      	ldr	r0, [pc, #196]	@ (800ca7c <Move_TO_jianzhi1+0xdc>)
 800c9b8:	f7fc f9e2 	bl	8008d80 <HAL_UART_Transmit>
	bool temp = Move_Back(RunSpeed, RunAcc, Backclk);
 800c9bc:	edd7 7a01 	vldr	s15, [r7, #4]
 800c9c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c9c4:	ee17 2a90 	vmov	r2, s15
 800c9c8:	2178      	movs	r1, #120	@ 0x78
 800c9ca:	2064      	movs	r0, #100	@ 0x64
 800c9cc:	f7ff fcf6 	bl	800c3bc <Move_Back>
 800c9d0:	4603      	mov	r3, r0
 800c9d2:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(50);
 800c9d4:	2032      	movs	r0, #50	@ 0x32
 800c9d6:	f7f6 fc41 	bl	800325c <HAL_Delay>
	while (temp != true)
 800c9da:	e00b      	b.n	800c9f4 <Move_TO_jianzhi1+0x54>
	{
		temp = Move_Back(RunSpeed, RunAcc, Backclk);
 800c9dc:	edd7 7a01 	vldr	s15, [r7, #4]
 800c9e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c9e4:	ee17 2a90 	vmov	r2, s15
 800c9e8:	2178      	movs	r1, #120	@ 0x78
 800c9ea:	2064      	movs	r0, #100	@ 0x64
 800c9ec:	f7ff fce6 	bl	800c3bc <Move_Back>
 800c9f0:	4603      	mov	r3, r0
 800c9f2:	73fb      	strb	r3, [r7, #15]
	while (temp != true)
 800c9f4:	7bfb      	ldrb	r3, [r7, #15]
 800c9f6:	f083 0301 	eor.w	r3, r3, #1
 800c9fa:	b2db      	uxtb	r3, r3
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d1ed      	bne.n	800c9dc <Move_TO_jianzhi1+0x3c>
	}
	HAL_UART_Transmit(&huart10, (uint8_t*) "确认接收\n", sizeof("确认接收\n") - 1,0xffff);
 800ca00:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ca04:	220d      	movs	r2, #13
 800ca06:	491e      	ldr	r1, [pc, #120]	@ (800ca80 <Move_TO_jianzhi1+0xe0>)
 800ca08:	481c      	ldr	r0, [pc, #112]	@ (800ca7c <Move_TO_jianzhi1+0xdc>)
 800ca0a:	f7fc f9b9 	bl	8008d80 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart10, (uint8_t*) "我要转45度辣\n", sizeof("我要转45度辣\n") - 1,0xffff);
 800ca0e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ca12:	2212      	movs	r2, #18
 800ca14:	491b      	ldr	r1, [pc, #108]	@ (800ca84 <Move_TO_jianzhi1+0xe4>)
 800ca16:	4819      	ldr	r0, [pc, #100]	@ (800ca7c <Move_TO_jianzhi1+0xdc>)
 800ca18:	f7fc f9b2 	bl	8008d80 <HAL_UART_Transmit>
	temp = Move_fanxuzhuan(RunSpeed, RunAcc, fanzhuanclk);
 800ca1c:	edd7 7a00 	vldr	s15, [r7]
 800ca20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ca24:	ee17 2a90 	vmov	r2, s15
 800ca28:	2178      	movs	r1, #120	@ 0x78
 800ca2a:	2064      	movs	r0, #100	@ 0x64
 800ca2c:	f7ff fd6c 	bl	800c508 <Move_fanxuzhuan>
 800ca30:	4603      	mov	r3, r0
 800ca32:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(50);
 800ca34:	2032      	movs	r0, #50	@ 0x32
 800ca36:	f7f6 fc11 	bl	800325c <HAL_Delay>
	while (temp != true)
 800ca3a:	e00b      	b.n	800ca54 <Move_TO_jianzhi1+0xb4>
	{
		temp = Move_fanxuzhuan(RunSpeed, RunAcc, fanzhuanclk);
 800ca3c:	edd7 7a00 	vldr	s15, [r7]
 800ca40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ca44:	ee17 2a90 	vmov	r2, s15
 800ca48:	2178      	movs	r1, #120	@ 0x78
 800ca4a:	2064      	movs	r0, #100	@ 0x64
 800ca4c:	f7ff fd5c 	bl	800c508 <Move_fanxuzhuan>
 800ca50:	4603      	mov	r3, r0
 800ca52:	73fb      	strb	r3, [r7, #15]
	while (temp != true)
 800ca54:	7bfb      	ldrb	r3, [r7, #15]
 800ca56:	f083 0301 	eor.w	r3, r3, #1
 800ca5a:	b2db      	uxtb	r3, r3
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d1ed      	bne.n	800ca3c <Move_TO_jianzhi1+0x9c>
	}
	HAL_UART_Transmit(&huart10, (uint8_t*) "确认接收\n", sizeof("确认接收\n") - 1,0xffff);
 800ca60:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ca64:	220d      	movs	r2, #13
 800ca66:	4906      	ldr	r1, [pc, #24]	@ (800ca80 <Move_TO_jianzhi1+0xe0>)
 800ca68:	4804      	ldr	r0, [pc, #16]	@ (800ca7c <Move_TO_jianzhi1+0xdc>)
 800ca6a:	f7fc f989 	bl	8008d80 <HAL_UART_Transmit>
}
 800ca6e:	bf00      	nop
 800ca70:	3710      	adds	r7, #16
 800ca72:	46bd      	mov	sp, r7
 800ca74:	bd80      	pop	{r7, pc}
 800ca76:	bf00      	nop
 800ca78:	08012b3c 	.word	0x08012b3c
 800ca7c:	24000a58 	.word	0x24000a58
 800ca80:	08012b50 	.word	0x08012b50
 800ca84:	08012b60 	.word	0x08012b60

0800ca88 <Move_TO_zancunqu>:

void Move_TO_zancunqu(float Lineclk, float fanzhuanclk) //暂存区
{
 800ca88:	b580      	push	{r7, lr}
 800ca8a:	b084      	sub	sp, #16
 800ca8c:	af00      	add	r7, sp, #0
 800ca8e:	ed87 0a01 	vstr	s0, [r7, #4]
 800ca92:	edc7 0a00 	vstr	s1, [r7]
	HAL_UART_Transmit(&huart10, (uint8_t*) "向十字出发喽\n", sizeof("向十字出发喽\n") - 1,0xffff);
 800ca96:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ca9a:	2213      	movs	r2, #19
 800ca9c:	4930      	ldr	r1, [pc, #192]	@ (800cb60 <Move_TO_zancunqu+0xd8>)
 800ca9e:	4831      	ldr	r0, [pc, #196]	@ (800cb64 <Move_TO_zancunqu+0xdc>)
 800caa0:	f7fc f96e 	bl	8008d80 <HAL_UART_Transmit>
	bool temp = Move_Line(RunSpeed, RunAcc, Lineclk);
 800caa4:	edd7 7a01 	vldr	s15, [r7, #4]
 800caa8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800caac:	ee17 2a90 	vmov	r2, s15
 800cab0:	2178      	movs	r1, #120	@ 0x78
 800cab2:	2064      	movs	r0, #100	@ 0x64
 800cab4:	f7ff fb3c 	bl	800c130 <Move_Line>
 800cab8:	4603      	mov	r3, r0
 800caba:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(50);
 800cabc:	2032      	movs	r0, #50	@ 0x32
 800cabe:	f7f6 fbcd 	bl	800325c <HAL_Delay>
	while (temp != true)
 800cac2:	e00b      	b.n	800cadc <Move_TO_zancunqu+0x54>
	{
		temp = Move_Line(RunSpeed, RunAcc, Lineclk);
 800cac4:	edd7 7a01 	vldr	s15, [r7, #4]
 800cac8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cacc:	ee17 2a90 	vmov	r2, s15
 800cad0:	2178      	movs	r1, #120	@ 0x78
 800cad2:	2064      	movs	r0, #100	@ 0x64
 800cad4:	f7ff fb2c 	bl	800c130 <Move_Line>
 800cad8:	4603      	mov	r3, r0
 800cada:	73fb      	strb	r3, [r7, #15]
	while (temp != true)
 800cadc:	7bfb      	ldrb	r3, [r7, #15]
 800cade:	f083 0301 	eor.w	r3, r3, #1
 800cae2:	b2db      	uxtb	r3, r3
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d1ed      	bne.n	800cac4 <Move_TO_zancunqu+0x3c>
	}
	HAL_UART_Transmit(&huart10, (uint8_t*) "收到\n", sizeof("收到\n") - 1,0xffff);
 800cae8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800caec:	2207      	movs	r2, #7
 800caee:	491e      	ldr	r1, [pc, #120]	@ (800cb68 <Move_TO_zancunqu+0xe0>)
 800caf0:	481c      	ldr	r0, [pc, #112]	@ (800cb64 <Move_TO_zancunqu+0xdc>)
 800caf2:	f7fc f945 	bl	8008d80 <HAL_UART_Transmit>
//	旋转
	HAL_UART_Transmit(&huart10, (uint8_t*) "喜不喜欢我的反旋转\n", sizeof("喜不喜欢我的反旋转\n") - 1,0xffff);
 800caf6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800cafa:	221c      	movs	r2, #28
 800cafc:	491b      	ldr	r1, [pc, #108]	@ (800cb6c <Move_TO_zancunqu+0xe4>)
 800cafe:	4819      	ldr	r0, [pc, #100]	@ (800cb64 <Move_TO_zancunqu+0xdc>)
 800cb00:	f7fc f93e 	bl	8008d80 <HAL_UART_Transmit>
	temp = Move_fanxuzhuan(RunSpeed, RunAcc, fanzhuanclk);
 800cb04:	edd7 7a00 	vldr	s15, [r7]
 800cb08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cb0c:	ee17 2a90 	vmov	r2, s15
 800cb10:	2178      	movs	r1, #120	@ 0x78
 800cb12:	2064      	movs	r0, #100	@ 0x64
 800cb14:	f7ff fcf8 	bl	800c508 <Move_fanxuzhuan>
 800cb18:	4603      	mov	r3, r0
 800cb1a:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(50);
 800cb1c:	2032      	movs	r0, #50	@ 0x32
 800cb1e:	f7f6 fb9d 	bl	800325c <HAL_Delay>

	while (temp != true)
 800cb22:	e00b      	b.n	800cb3c <Move_TO_zancunqu+0xb4>
	{
		temp = Move_fanxuzhuan(RunSpeed, RunAcc, fanzhuanclk);
 800cb24:	edd7 7a00 	vldr	s15, [r7]
 800cb28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cb2c:	ee17 2a90 	vmov	r2, s15
 800cb30:	2178      	movs	r1, #120	@ 0x78
 800cb32:	2064      	movs	r0, #100	@ 0x64
 800cb34:	f7ff fce8 	bl	800c508 <Move_fanxuzhuan>
 800cb38:	4603      	mov	r3, r0
 800cb3a:	73fb      	strb	r3, [r7, #15]
	while (temp != true)
 800cb3c:	7bfb      	ldrb	r3, [r7, #15]
 800cb3e:	f083 0301 	eor.w	r3, r3, #1
 800cb42:	b2db      	uxtb	r3, r3
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d1ed      	bne.n	800cb24 <Move_TO_zancunqu+0x9c>
//		HAL_UART_Transmit(&huart10, (uint8_t*) "反选转的temp是false\n", sizeof("反选转的temp是false\n") - 1,0xffff);
	}
	HAL_UART_Transmit(&huart10, (uint8_t*) "转个45度给你看看\n", sizeof("转个45度给你看看\n") - 1,0xffff);
 800cb48:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800cb4c:	2218      	movs	r2, #24
 800cb4e:	4908      	ldr	r1, [pc, #32]	@ (800cb70 <Move_TO_zancunqu+0xe8>)
 800cb50:	4804      	ldr	r0, [pc, #16]	@ (800cb64 <Move_TO_zancunqu+0xdc>)
 800cb52:	f7fc f915 	bl	8008d80 <HAL_UART_Transmit>
}
 800cb56:	bf00      	nop
 800cb58:	3710      	adds	r7, #16
 800cb5a:	46bd      	mov	sp, r7
 800cb5c:	bd80      	pop	{r7, pc}
 800cb5e:	bf00      	nop
 800cb60:	08012b74 	.word	0x08012b74
 800cb64:	24000a58 	.word	0x24000a58
 800cb68:	08012b88 	.word	0x08012b88
 800cb6c:	08012b90 	.word	0x08012b90
 800cb70:	08012bb0 	.word	0x08012bb0

0800cb74 <Move_TO_jianzhi2>:


void Move_TO_jianzhi2(float Backclk, float Zhengzhuanclk) //从暂存区回到原料区
{
 800cb74:	b580      	push	{r7, lr}
 800cb76:	b084      	sub	sp, #16
 800cb78:	af00      	add	r7, sp, #0
 800cb7a:	ed87 0a01 	vstr	s0, [r7, #4]
 800cb7e:	edc7 0a00 	vstr	s1, [r7]
	HAL_UART_Transmit(&huart10, (uint8_t*) "向粗加工区出发\n", sizeof("向粗加工区出发\n") - 1,0xffff);
 800cb82:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800cb86:	2216      	movs	r2, #22
 800cb88:	4930      	ldr	r1, [pc, #192]	@ (800cc4c <Move_TO_jianzhi2+0xd8>)
 800cb8a:	4831      	ldr	r0, [pc, #196]	@ (800cc50 <Move_TO_jianzhi2+0xdc>)
 800cb8c:	f7fc f8f8 	bl	8008d80 <HAL_UART_Transmit>
	bool temp = Move_Back(RunSpeed, RunAcc, Backclk);
 800cb90:	edd7 7a01 	vldr	s15, [r7, #4]
 800cb94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cb98:	ee17 2a90 	vmov	r2, s15
 800cb9c:	2178      	movs	r1, #120	@ 0x78
 800cb9e:	2064      	movs	r0, #100	@ 0x64
 800cba0:	f7ff fc0c 	bl	800c3bc <Move_Back>
 800cba4:	4603      	mov	r3, r0
 800cba6:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(50);
 800cba8:	2032      	movs	r0, #50	@ 0x32
 800cbaa:	f7f6 fb57 	bl	800325c <HAL_Delay>
	while (temp != true)
 800cbae:	e00b      	b.n	800cbc8 <Move_TO_jianzhi2+0x54>
	{
		temp = Move_Back(RunSpeed, RunAcc, Backclk);
 800cbb0:	edd7 7a01 	vldr	s15, [r7, #4]
 800cbb4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cbb8:	ee17 2a90 	vmov	r2, s15
 800cbbc:	2178      	movs	r1, #120	@ 0x78
 800cbbe:	2064      	movs	r0, #100	@ 0x64
 800cbc0:	f7ff fbfc 	bl	800c3bc <Move_Back>
 800cbc4:	4603      	mov	r3, r0
 800cbc6:	73fb      	strb	r3, [r7, #15]
	while (temp != true)
 800cbc8:	7bfb      	ldrb	r3, [r7, #15]
 800cbca:	f083 0301 	eor.w	r3, r3, #1
 800cbce:	b2db      	uxtb	r3, r3
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d1ed      	bne.n	800cbb0 <Move_TO_jianzhi2+0x3c>
//		HAL_UART_Transmit(&huart10, (uint8_t*) "后退的temp是false\n", sizeof("后退的temp是false\n") - 1,0xffff);
	}
	HAL_UART_Transmit(&huart10, (uint8_t*) "到位\n", sizeof("到位\n") - 1,0xffff);
 800cbd4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800cbd8:	2207      	movs	r2, #7
 800cbda:	491e      	ldr	r1, [pc, #120]	@ (800cc54 <Move_TO_jianzhi2+0xe0>)
 800cbdc:	481c      	ldr	r0, [pc, #112]	@ (800cc50 <Move_TO_jianzhi2+0xdc>)
 800cbde:	f7fc f8cf 	bl	8008d80 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart10, (uint8_t*) "来个正转给大家开开眼\n", sizeof("来个正转给大家开开眼\n") - 1,0xffff);
 800cbe2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800cbe6:	221f      	movs	r2, #31
 800cbe8:	491b      	ldr	r1, [pc, #108]	@ (800cc58 <Move_TO_jianzhi2+0xe4>)
 800cbea:	4819      	ldr	r0, [pc, #100]	@ (800cc50 <Move_TO_jianzhi2+0xdc>)
 800cbec:	f7fc f8c8 	bl	8008d80 <HAL_UART_Transmit>
	temp = Move_zhengxuzhuan(RunSpeed, RunAcc, Zhengzhuanclk);
 800cbf0:	edd7 7a00 	vldr	s15, [r7]
 800cbf4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cbf8:	ee17 2a90 	vmov	r2, s15
 800cbfc:	2178      	movs	r1, #120	@ 0x78
 800cbfe:	2064      	movs	r0, #100	@ 0x64
 800cc00:	f7ff fdce 	bl	800c7a0 <Move_zhengxuzhuan>
 800cc04:	4603      	mov	r3, r0
 800cc06:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(50);
 800cc08:	2032      	movs	r0, #50	@ 0x32
 800cc0a:	f7f6 fb27 	bl	800325c <HAL_Delay>
	while (temp != true)
 800cc0e:	e00b      	b.n	800cc28 <Move_TO_jianzhi2+0xb4>
	{
		temp = Move_zhengxuzhuan(RunSpeed, RunAcc, Zhengzhuanclk);
 800cc10:	edd7 7a00 	vldr	s15, [r7]
 800cc14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cc18:	ee17 2a90 	vmov	r2, s15
 800cc1c:	2178      	movs	r1, #120	@ 0x78
 800cc1e:	2064      	movs	r0, #100	@ 0x64
 800cc20:	f7ff fdbe 	bl	800c7a0 <Move_zhengxuzhuan>
 800cc24:	4603      	mov	r3, r0
 800cc26:	73fb      	strb	r3, [r7, #15]
	while (temp != true)
 800cc28:	7bfb      	ldrb	r3, [r7, #15]
 800cc2a:	f083 0301 	eor.w	r3, r3, #1
 800cc2e:	b2db      	uxtb	r3, r3
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	d1ed      	bne.n	800cc10 <Move_TO_jianzhi2+0x9c>
//		HAL_UART_Transmit(&huart10, (uint8_t*) "正旋转的temp是false\n", sizeof("正旋转的temp是false\n") - 1,0xffff);
	}
	HAL_UART_Transmit(&huart10, (uint8_t*) "转晕了家人们\n", sizeof("转晕了家人们\n") - 1,0xffff);
 800cc34:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800cc38:	2213      	movs	r2, #19
 800cc3a:	4908      	ldr	r1, [pc, #32]	@ (800cc5c <Move_TO_jianzhi2+0xe8>)
 800cc3c:	4804      	ldr	r0, [pc, #16]	@ (800cc50 <Move_TO_jianzhi2+0xdc>)
 800cc3e:	f7fc f89f 	bl	8008d80 <HAL_UART_Transmit>
}
 800cc42:	bf00      	nop
 800cc44:	3710      	adds	r7, #16
 800cc46:	46bd      	mov	sp, r7
 800cc48:	bd80      	pop	{r7, pc}
 800cc4a:	bf00      	nop
 800cc4c:	08012bcc 	.word	0x08012bcc
 800cc50:	24000a58 	.word	0x24000a58
 800cc54:	08012be4 	.word	0x08012be4
 800cc58:	08012bec 	.word	0x08012bec
 800cc5c:	08012c0c 	.word	0x08012c0c

0800cc60 <Move_TO_cujiagongqu>:
void Move_TO_cujiagongqu(float Backclk) //粗加工区
{
 800cc60:	b580      	push	{r7, lr}
 800cc62:	b084      	sub	sp, #16
 800cc64:	af00      	add	r7, sp, #0
 800cc66:	ed87 0a01 	vstr	s0, [r7, #4]
	HAL_UART_Transmit(&huart10, (uint8_t*) "粗加工区好难走啊\n", sizeof("粗加工区好难走啊\n") - 1,0xffff);
 800cc6a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800cc6e:	2219      	movs	r2, #25
 800cc70:	4918      	ldr	r1, [pc, #96]	@ (800ccd4 <Move_TO_cujiagongqu+0x74>)
 800cc72:	4819      	ldr	r0, [pc, #100]	@ (800ccd8 <Move_TO_cujiagongqu+0x78>)
 800cc74:	f7fc f884 	bl	8008d80 <HAL_UART_Transmit>
	bool temp = Move_Back(RunSpeed, RunAcc, Backclk);
 800cc78:	edd7 7a01 	vldr	s15, [r7, #4]
 800cc7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cc80:	ee17 2a90 	vmov	r2, s15
 800cc84:	2178      	movs	r1, #120	@ 0x78
 800cc86:	2064      	movs	r0, #100	@ 0x64
 800cc88:	f7ff fb98 	bl	800c3bc <Move_Back>
 800cc8c:	4603      	mov	r3, r0
 800cc8e:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(50);
 800cc90:	2032      	movs	r0, #50	@ 0x32
 800cc92:	f7f6 fae3 	bl	800325c <HAL_Delay>
	while (temp != true)
 800cc96:	e00b      	b.n	800ccb0 <Move_TO_cujiagongqu+0x50>
	{
		temp = Move_Back(RunSpeed, RunAcc, Backclk);
 800cc98:	edd7 7a01 	vldr	s15, [r7, #4]
 800cc9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cca0:	ee17 2a90 	vmov	r2, s15
 800cca4:	2178      	movs	r1, #120	@ 0x78
 800cca6:	2064      	movs	r0, #100	@ 0x64
 800cca8:	f7ff fb88 	bl	800c3bc <Move_Back>
 800ccac:	4603      	mov	r3, r0
 800ccae:	73fb      	strb	r3, [r7, #15]
	while (temp != true)
 800ccb0:	7bfb      	ldrb	r3, [r7, #15]
 800ccb2:	f083 0301 	eor.w	r3, r3, #1
 800ccb6:	b2db      	uxtb	r3, r3
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d1ed      	bne.n	800cc98 <Move_TO_cujiagongqu+0x38>
	}
	HAL_UART_Transmit(&huart10, (uint8_t*) "你说的对\n", sizeof("你说的对\n") - 1,0xffff);
 800ccbc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ccc0:	220d      	movs	r2, #13
 800ccc2:	4906      	ldr	r1, [pc, #24]	@ (800ccdc <Move_TO_cujiagongqu+0x7c>)
 800ccc4:	4804      	ldr	r0, [pc, #16]	@ (800ccd8 <Move_TO_cujiagongqu+0x78>)
 800ccc6:	f7fc f85b 	bl	8008d80 <HAL_UART_Transmit>
	// Move_Back(RunSpeed, RunAcc, Backclk);
	// HAL_Delay(yanshi);
}
 800ccca:	bf00      	nop
 800cccc:	3710      	adds	r7, #16
 800ccce:	46bd      	mov	sp, r7
 800ccd0:	bd80      	pop	{r7, pc}
 800ccd2:	bf00      	nop
 800ccd4:	08012c20 	.word	0x08012c20
 800ccd8:	24000a58 	.word	0x24000a58
 800ccdc:	08012c3c 	.word	0x08012c3c

0800cce0 <Move_TO_jianzhi3>:
void Move_TO_jianzhi3(float Backclk, float Zhengzhuanclk) //从暂存区回到原料区
{
 800cce0:	b580      	push	{r7, lr}
 800cce2:	b084      	sub	sp, #16
 800cce4:	af00      	add	r7, sp, #0
 800cce6:	ed87 0a01 	vstr	s0, [r7, #4]
 800ccea:	edc7 0a00 	vstr	s1, [r7]

	HAL_UART_Transmit(&huart10, (uint8_t*) "到拐角了家人们\n", sizeof("到拐角了家人们\n") - 1,0xffff);
 800ccee:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ccf2:	2216      	movs	r2, #22
 800ccf4:	4930      	ldr	r1, [pc, #192]	@ (800cdb8 <Move_TO_jianzhi3+0xd8>)
 800ccf6:	4831      	ldr	r0, [pc, #196]	@ (800cdbc <Move_TO_jianzhi3+0xdc>)
 800ccf8:	f7fc f842 	bl	8008d80 <HAL_UART_Transmit>
	bool temp = Move_Back(RunSpeed, RunAcc, Backclk);
 800ccfc:	edd7 7a01 	vldr	s15, [r7, #4]
 800cd00:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cd04:	ee17 2a90 	vmov	r2, s15
 800cd08:	2178      	movs	r1, #120	@ 0x78
 800cd0a:	2064      	movs	r0, #100	@ 0x64
 800cd0c:	f7ff fb56 	bl	800c3bc <Move_Back>
 800cd10:	4603      	mov	r3, r0
 800cd12:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(50);
 800cd14:	2032      	movs	r0, #50	@ 0x32
 800cd16:	f7f6 faa1 	bl	800325c <HAL_Delay>
	while (temp != true)
 800cd1a:	e00b      	b.n	800cd34 <Move_TO_jianzhi3+0x54>
	{
		temp = Move_Back(RunSpeed, RunAcc, Backclk);
 800cd1c:	edd7 7a01 	vldr	s15, [r7, #4]
 800cd20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cd24:	ee17 2a90 	vmov	r2, s15
 800cd28:	2178      	movs	r1, #120	@ 0x78
 800cd2a:	2064      	movs	r0, #100	@ 0x64
 800cd2c:	f7ff fb46 	bl	800c3bc <Move_Back>
 800cd30:	4603      	mov	r3, r0
 800cd32:	73fb      	strb	r3, [r7, #15]
	while (temp != true)
 800cd34:	7bfb      	ldrb	r3, [r7, #15]
 800cd36:	f083 0301 	eor.w	r3, r3, #1
 800cd3a:	b2db      	uxtb	r3, r3
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d1ed      	bne.n	800cd1c <Move_TO_jianzhi3+0x3c>
	}
	HAL_UART_Transmit(&huart10, (uint8_t*) "滴滴\n", sizeof("滴滴\n") - 1,0xffff);
 800cd40:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800cd44:	2207      	movs	r2, #7
 800cd46:	491e      	ldr	r1, [pc, #120]	@ (800cdc0 <Move_TO_jianzhi3+0xe0>)
 800cd48:	481c      	ldr	r0, [pc, #112]	@ (800cdbc <Move_TO_jianzhi3+0xdc>)
 800cd4a:	f7fc f819 	bl	8008d80 <HAL_UART_Transmit>
	// Move_Back(RunSpeed, RunAcc, Backclk);
	// HAL_Delay(yanshi);
	HAL_UART_Transmit(&huart10, (uint8_t*) "欸我再转\n", sizeof("欸我再转\n") - 1,0xffff);
 800cd4e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800cd52:	220d      	movs	r2, #13
 800cd54:	491b      	ldr	r1, [pc, #108]	@ (800cdc4 <Move_TO_jianzhi3+0xe4>)
 800cd56:	4819      	ldr	r0, [pc, #100]	@ (800cdbc <Move_TO_jianzhi3+0xdc>)
 800cd58:	f7fc f812 	bl	8008d80 <HAL_UART_Transmit>
	temp = Move_zhengxuzhuan(RunSpeed, RunAcc, Zhengzhuanclk);
 800cd5c:	edd7 7a00 	vldr	s15, [r7]
 800cd60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cd64:	ee17 2a90 	vmov	r2, s15
 800cd68:	2178      	movs	r1, #120	@ 0x78
 800cd6a:	2064      	movs	r0, #100	@ 0x64
 800cd6c:	f7ff fd18 	bl	800c7a0 <Move_zhengxuzhuan>
 800cd70:	4603      	mov	r3, r0
 800cd72:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(50);
 800cd74:	2032      	movs	r0, #50	@ 0x32
 800cd76:	f7f6 fa71 	bl	800325c <HAL_Delay>
	while (temp != true)
 800cd7a:	e00b      	b.n	800cd94 <Move_TO_jianzhi3+0xb4>
	{
		temp = Move_zhengxuzhuan(RunSpeed, RunAcc, Zhengzhuanclk);
 800cd7c:	edd7 7a00 	vldr	s15, [r7]
 800cd80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cd84:	ee17 2a90 	vmov	r2, s15
 800cd88:	2178      	movs	r1, #120	@ 0x78
 800cd8a:	2064      	movs	r0, #100	@ 0x64
 800cd8c:	f7ff fd08 	bl	800c7a0 <Move_zhengxuzhuan>
 800cd90:	4603      	mov	r3, r0
 800cd92:	73fb      	strb	r3, [r7, #15]
	while (temp != true)
 800cd94:	7bfb      	ldrb	r3, [r7, #15]
 800cd96:	f083 0301 	eor.w	r3, r3, #1
 800cd9a:	b2db      	uxtb	r3, r3
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d1ed      	bne.n	800cd7c <Move_TO_jianzhi3+0x9c>
	}
	HAL_UART_Transmit(&huart10, (uint8_t*) "差不多要到了吧\n", sizeof("差不多要到了吧\n") - 1,0xffff);
 800cda0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800cda4:	2216      	movs	r2, #22
 800cda6:	4908      	ldr	r1, [pc, #32]	@ (800cdc8 <Move_TO_jianzhi3+0xe8>)
 800cda8:	4804      	ldr	r0, [pc, #16]	@ (800cdbc <Move_TO_jianzhi3+0xdc>)
 800cdaa:	f7fb ffe9 	bl	8008d80 <HAL_UART_Transmit>
//	 Move_zhengxuzhuan(RunSpeed, RunAcc, Zhengzhuanclk);
//	 HAL_Delay(yanshi);
}
 800cdae:	bf00      	nop
 800cdb0:	3710      	adds	r7, #16
 800cdb2:	46bd      	mov	sp, r7
 800cdb4:	bd80      	pop	{r7, pc}
 800cdb6:	bf00      	nop
 800cdb8:	08012c4c 	.word	0x08012c4c
 800cdbc:	24000a58 	.word	0x24000a58
 800cdc0:	08012c64 	.word	0x08012c64
 800cdc4:	08012c6c 	.word	0x08012c6c
 800cdc8:	08012c7c 	.word	0x08012c7c

0800cdcc <Move_TO_fanyuanliaoqu>:
void Move_TO_fanyuanliaoqu(float Backclk) //物料区
{
 800cdcc:	b580      	push	{r7, lr}
 800cdce:	b084      	sub	sp, #16
 800cdd0:	af00      	add	r7, sp, #0
 800cdd2:	ed87 0a01 	vstr	s0, [r7, #4]
	HAL_UART_Transmit(&huart10, (uint8_t*) "回到了梦开始的地方\n", sizeof("回到了梦开始的地方\n") - 1,0xffff);
 800cdd6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800cdda:	221c      	movs	r2, #28
 800cddc:	4915      	ldr	r1, [pc, #84]	@ (800ce34 <Move_TO_fanyuanliaoqu+0x68>)
 800cdde:	4816      	ldr	r0, [pc, #88]	@ (800ce38 <Move_TO_fanyuanliaoqu+0x6c>)
 800cde0:	f7fb ffce 	bl	8008d80 <HAL_UART_Transmit>
	bool temp = Move_Back(RunSpeed, RunAcc, Backclk);
 800cde4:	edd7 7a01 	vldr	s15, [r7, #4]
 800cde8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cdec:	ee17 2a90 	vmov	r2, s15
 800cdf0:	2178      	movs	r1, #120	@ 0x78
 800cdf2:	2064      	movs	r0, #100	@ 0x64
 800cdf4:	f7ff fae2 	bl	800c3bc <Move_Back>
 800cdf8:	4603      	mov	r3, r0
 800cdfa:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(50);
 800cdfc:	2032      	movs	r0, #50	@ 0x32
 800cdfe:	f7f6 fa2d 	bl	800325c <HAL_Delay>
	while (temp != true)
 800ce02:	e00b      	b.n	800ce1c <Move_TO_fanyuanliaoqu+0x50>
	{
		temp = Move_Back(RunSpeed, RunAcc, Backclk);
 800ce04:	edd7 7a01 	vldr	s15, [r7, #4]
 800ce08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ce0c:	ee17 2a90 	vmov	r2, s15
 800ce10:	2178      	movs	r1, #120	@ 0x78
 800ce12:	2064      	movs	r0, #100	@ 0x64
 800ce14:	f7ff fad2 	bl	800c3bc <Move_Back>
 800ce18:	4603      	mov	r3, r0
 800ce1a:	73fb      	strb	r3, [r7, #15]
	while (temp != true)
 800ce1c:	7bfb      	ldrb	r3, [r7, #15]
 800ce1e:	f083 0301 	eor.w	r3, r3, #1
 800ce22:	b2db      	uxtb	r3, r3
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d1ed      	bne.n	800ce04 <Move_TO_fanyuanliaoqu+0x38>
	}
	// Move_Back(RunSpeed, RunAcc, Lineclk);
	// HAL_Delay(20000);
}
 800ce28:	bf00      	nop
 800ce2a:	bf00      	nop
 800ce2c:	3710      	adds	r7, #16
 800ce2e:	46bd      	mov	sp, r7
 800ce30:	bd80      	pop	{r7, pc}
 800ce32:	bf00      	nop
 800ce34:	08012c94 	.word	0x08012c94
 800ce38:	24000a58 	.word	0x24000a58

0800ce3c <Move_Action_Nopid_Left_Ctrl>:
// 	}
// }

//这个函数是爪子朝向左边时，也就是在原料区进行ACTION调整的
bool Move_Action_Nopid_Left_Ctrl(float x_goal, float y_goal)
{
 800ce3c:	b580      	push	{r7, lr}
 800ce3e:	b088      	sub	sp, #32
 800ce40:	af00      	add	r7, sp, #0
 800ce42:	ed87 0a01 	vstr	s0, [r7, #4]
 800ce46:	edc7 0a00 	vstr	s1, [r7]
//		取X,Y差值
		uint16_t X_Diff = (uint16_t)ABS(X_NOW - x_goal);
 800ce4a:	4bb2      	ldr	r3, [pc, #712]	@ (800d114 <Move_Action_Nopid_Left_Ctrl+0x2d8>)
 800ce4c:	ed93 7a00 	vldr	s14, [r3]
 800ce50:	edd7 7a01 	vldr	s15, [r7, #4]
 800ce54:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ce58:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800ce5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce60:	dd0c      	ble.n	800ce7c <Move_Action_Nopid_Left_Ctrl+0x40>
 800ce62:	4bac      	ldr	r3, [pc, #688]	@ (800d114 <Move_Action_Nopid_Left_Ctrl+0x2d8>)
 800ce64:	ed93 7a00 	vldr	s14, [r3]
 800ce68:	edd7 7a01 	vldr	s15, [r7, #4]
 800ce6c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ce70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ce74:	ee17 3a90 	vmov	r3, s15
 800ce78:	b29b      	uxth	r3, r3
 800ce7a:	e00d      	b.n	800ce98 <Move_Action_Nopid_Left_Ctrl+0x5c>
 800ce7c:	4ba5      	ldr	r3, [pc, #660]	@ (800d114 <Move_Action_Nopid_Left_Ctrl+0x2d8>)
 800ce7e:	ed93 7a00 	vldr	s14, [r3]
 800ce82:	edd7 7a01 	vldr	s15, [r7, #4]
 800ce86:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ce8a:	eef1 7a67 	vneg.f32	s15, s15
 800ce8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ce92:	ee17 3a90 	vmov	r3, s15
 800ce96:	b29b      	uxth	r3, r3
 800ce98:	837b      	strh	r3, [r7, #26]
		uint16_t Y_Diff = (uint16_t)ABS(Y_NOW - y_goal);
 800ce9a:	4b9f      	ldr	r3, [pc, #636]	@ (800d118 <Move_Action_Nopid_Left_Ctrl+0x2dc>)
 800ce9c:	edd3 7a00 	vldr	s15, [r3]
 800cea0:	eeb1 7a67 	vneg.f32	s14, s15
 800cea4:	edd7 7a00 	vldr	s15, [r7]
 800cea8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ceac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800ceb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ceb4:	dd0e      	ble.n	800ced4 <Move_Action_Nopid_Left_Ctrl+0x98>
 800ceb6:	4b98      	ldr	r3, [pc, #608]	@ (800d118 <Move_Action_Nopid_Left_Ctrl+0x2dc>)
 800ceb8:	edd3 7a00 	vldr	s15, [r3]
 800cebc:	eeb1 7a67 	vneg.f32	s14, s15
 800cec0:	edd7 7a00 	vldr	s15, [r7]
 800cec4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cec8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cecc:	ee17 3a90 	vmov	r3, s15
 800ced0:	b29b      	uxth	r3, r3
 800ced2:	e00f      	b.n	800cef4 <Move_Action_Nopid_Left_Ctrl+0xb8>
 800ced4:	4b90      	ldr	r3, [pc, #576]	@ (800d118 <Move_Action_Nopid_Left_Ctrl+0x2dc>)
 800ced6:	edd3 7a00 	vldr	s15, [r3]
 800ceda:	eeb1 7a67 	vneg.f32	s14, s15
 800cede:	edd7 7a00 	vldr	s15, [r7]
 800cee2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cee6:	eef1 7a67 	vneg.f32	s15, s15
 800ceea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ceee:	ee17 3a90 	vmov	r3, s15
 800cef2:	b29b      	uxth	r3, r3
 800cef4:	833b      	strh	r3, [r7, #24]
		char X_send[8];
		char Y_send[8];
		sprintf(X_send, "%d", X_Diff);
 800cef6:	8b7a      	ldrh	r2, [r7, #26]
 800cef8:	f107 0310 	add.w	r3, r7, #16
 800cefc:	4987      	ldr	r1, [pc, #540]	@ (800d11c <Move_Action_Nopid_Left_Ctrl+0x2e0>)
 800cefe:	4618      	mov	r0, r3
 800cf00:	f002 fc0c 	bl	800f71c <siprintf>
		sprintf(Y_send, "%d", Y_Diff);
 800cf04:	8b3a      	ldrh	r2, [r7, #24]
 800cf06:	f107 0308 	add.w	r3, r7, #8
 800cf0a:	4984      	ldr	r1, [pc, #528]	@ (800d11c <Move_Action_Nopid_Left_Ctrl+0x2e0>)
 800cf0c:	4618      	mov	r0, r3
 800cf0e:	f002 fc05 	bl	800f71c <siprintf>
//		差值满足要求, 结束调节
		if( X_Diff <  10 ){
 800cf12:	8b7b      	ldrh	r3, [r7, #26]
 800cf14:	2b09      	cmp	r3, #9
 800cf16:	d815      	bhi.n	800cf44 <Move_Action_Nopid_Left_Ctrl+0x108>
			HAL_UART_Transmit(&huart10, (uint8_t*) "X_Diff = ", sizeof("X_Diff = ") - 2,0xffff);
 800cf18:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800cf1c:	2208      	movs	r2, #8
 800cf1e:	4980      	ldr	r1, [pc, #512]	@ (800d120 <Move_Action_Nopid_Left_Ctrl+0x2e4>)
 800cf20:	4880      	ldr	r0, [pc, #512]	@ (800d124 <Move_Action_Nopid_Left_Ctrl+0x2e8>)
 800cf22:	f7fb ff2d 	bl	8008d80 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart10, (uint8_t*) X_send, sizeof(X_send) - 1,0xffff);
 800cf26:	f107 0110 	add.w	r1, r7, #16
 800cf2a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800cf2e:	2207      	movs	r2, #7
 800cf30:	487c      	ldr	r0, [pc, #496]	@ (800d124 <Move_Action_Nopid_Left_Ctrl+0x2e8>)
 800cf32:	f7fb ff25 	bl	8008d80 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart10, (uint8_t*) "\n", sizeof("\n= ") - 1,0xffff);
 800cf36:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800cf3a:	2203      	movs	r2, #3
 800cf3c:	497a      	ldr	r1, [pc, #488]	@ (800d128 <Move_Action_Nopid_Left_Ctrl+0x2ec>)
 800cf3e:	4879      	ldr	r0, [pc, #484]	@ (800d124 <Move_Action_Nopid_Left_Ctrl+0x2e8>)
 800cf40:	f7fb ff1e 	bl	8008d80 <HAL_UART_Transmit>
		}
		if( Y_Diff <  10 ){
 800cf44:	8b3b      	ldrh	r3, [r7, #24]
 800cf46:	2b09      	cmp	r3, #9
 800cf48:	d815      	bhi.n	800cf76 <Move_Action_Nopid_Left_Ctrl+0x13a>
			HAL_UART_Transmit(&huart10, (uint8_t*) "Y_Diff = ", sizeof("X_Diff = ") - 2,0xffff);
 800cf4a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800cf4e:	2208      	movs	r2, #8
 800cf50:	4976      	ldr	r1, [pc, #472]	@ (800d12c <Move_Action_Nopid_Left_Ctrl+0x2f0>)
 800cf52:	4874      	ldr	r0, [pc, #464]	@ (800d124 <Move_Action_Nopid_Left_Ctrl+0x2e8>)
 800cf54:	f7fb ff14 	bl	8008d80 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart10, (uint8_t*) Y_send, sizeof(Y_send) - 1,0xffff);
 800cf58:	f107 0108 	add.w	r1, r7, #8
 800cf5c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800cf60:	2207      	movs	r2, #7
 800cf62:	4870      	ldr	r0, [pc, #448]	@ (800d124 <Move_Action_Nopid_Left_Ctrl+0x2e8>)
 800cf64:	f7fb ff0c 	bl	8008d80 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart10, (uint8_t*) "\n", sizeof("\n= ") - 1,0xffff);
 800cf68:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800cf6c:	2203      	movs	r2, #3
 800cf6e:	496e      	ldr	r1, [pc, #440]	@ (800d128 <Move_Action_Nopid_Left_Ctrl+0x2ec>)
 800cf70:	486c      	ldr	r0, [pc, #432]	@ (800d124 <Move_Action_Nopid_Left_Ctrl+0x2e8>)
 800cf72:	f7fb ff05 	bl	8008d80 <HAL_UART_Transmit>
		}
		if(( X_Diff <  10 ) && ( Y_Diff < 10 ))
 800cf76:	8b7b      	ldrh	r3, [r7, #26]
 800cf78:	2b09      	cmp	r3, #9
 800cf7a:	d804      	bhi.n	800cf86 <Move_Action_Nopid_Left_Ctrl+0x14a>
 800cf7c:	8b3b      	ldrh	r3, [r7, #24]
 800cf7e:	2b09      	cmp	r3, #9
 800cf80:	d801      	bhi.n	800cf86 <Move_Action_Nopid_Left_Ctrl+0x14a>
			return true;
 800cf82:	2301      	movs	r3, #1
 800cf84:	e0c2      	b.n	800d10c <Move_Action_Nopid_Left_Ctrl+0x2d0>
		if( X_Diff >=  10 )
 800cf86:	8b7b      	ldrh	r3, [r7, #26]
 800cf88:	2b09      	cmp	r3, #9
 800cf8a:	d95b      	bls.n	800d044 <Move_Action_Nopid_Left_Ctrl+0x208>
		{
			// 当前X坐标小于目标X
			if ((X_NOW - x_goal) < 0)
 800cf8c:	4b61      	ldr	r3, [pc, #388]	@ (800d114 <Move_Action_Nopid_Left_Ctrl+0x2d8>)
 800cf8e:	ed93 7a00 	vldr	s14, [r3]
 800cf92:	edd7 7a01 	vldr	s15, [r7, #4]
 800cf96:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cf9a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800cf9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cfa2:	d521      	bpl.n	800cfe8 <Move_Action_Nopid_Left_Ctrl+0x1ac>
			{
				bool temp = Move_Left(Action_Speed, Action_Acc, X_Diff * 5);
 800cfa4:	8b7a      	ldrh	r2, [r7, #26]
 800cfa6:	4613      	mov	r3, r2
 800cfa8:	009b      	lsls	r3, r3, #2
 800cfaa:	4413      	add	r3, r2
 800cfac:	461a      	mov	r2, r3
 800cfae:	2164      	movs	r1, #100	@ 0x64
 800cfb0:	2064      	movs	r0, #100	@ 0x64
 800cfb2:	f7ff f963 	bl	800c27c <Move_Left>
 800cfb6:	4603      	mov	r3, r0
 800cfb8:	77fb      	strb	r3, [r7, #31]
				HAL_Delay(5);
 800cfba:	2005      	movs	r0, #5
 800cfbc:	f7f6 f94e 	bl	800325c <HAL_Delay>
				while (temp != true)
 800cfc0:	e00a      	b.n	800cfd8 <Move_Action_Nopid_Left_Ctrl+0x19c>
				{
					temp = Move_Left(Action_Speed, Action_Acc,X_Diff * 5);
 800cfc2:	8b7a      	ldrh	r2, [r7, #26]
 800cfc4:	4613      	mov	r3, r2
 800cfc6:	009b      	lsls	r3, r3, #2
 800cfc8:	4413      	add	r3, r2
 800cfca:	461a      	mov	r2, r3
 800cfcc:	2164      	movs	r1, #100	@ 0x64
 800cfce:	2064      	movs	r0, #100	@ 0x64
 800cfd0:	f7ff f954 	bl	800c27c <Move_Left>
 800cfd4:	4603      	mov	r3, r0
 800cfd6:	77fb      	strb	r3, [r7, #31]
				while (temp != true)
 800cfd8:	7ffb      	ldrb	r3, [r7, #31]
 800cfda:	f083 0301 	eor.w	r3, r3, #1
 800cfde:	b2db      	uxtb	r3, r3
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d1ee      	bne.n	800cfc2 <Move_Action_Nopid_Left_Ctrl+0x186>
				}
				return false;
 800cfe4:	2300      	movs	r3, #0
 800cfe6:	e091      	b.n	800d10c <Move_Action_Nopid_Left_Ctrl+0x2d0>
			}
			// 当前X坐标大于目标X
			else if ((X_NOW - x_goal) > 0)
 800cfe8:	4b4a      	ldr	r3, [pc, #296]	@ (800d114 <Move_Action_Nopid_Left_Ctrl+0x2d8>)
 800cfea:	ed93 7a00 	vldr	s14, [r3]
 800cfee:	edd7 7a01 	vldr	s15, [r7, #4]
 800cff2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cff6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800cffa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cffe:	dd21      	ble.n	800d044 <Move_Action_Nopid_Left_Ctrl+0x208>
			{
				bool temp = Move_Right(Action_Speed, Action_Acc, X_Diff * 5);
 800d000:	8b7a      	ldrh	r2, [r7, #26]
 800d002:	4613      	mov	r3, r2
 800d004:	009b      	lsls	r3, r3, #2
 800d006:	4413      	add	r3, r2
 800d008:	461a      	mov	r2, r3
 800d00a:	2164      	movs	r1, #100	@ 0x64
 800d00c:	2064      	movs	r0, #100	@ 0x64
 800d00e:	f7ff fb21 	bl	800c654 <Move_Right>
 800d012:	4603      	mov	r3, r0
 800d014:	77bb      	strb	r3, [r7, #30]
				HAL_Delay(5);
 800d016:	2005      	movs	r0, #5
 800d018:	f7f6 f920 	bl	800325c <HAL_Delay>
				while (temp != true)
 800d01c:	e00a      	b.n	800d034 <Move_Action_Nopid_Left_Ctrl+0x1f8>
				{
					temp = Move_Right(Action_Speed, Action_Acc,X_Diff * 5);
 800d01e:	8b7a      	ldrh	r2, [r7, #26]
 800d020:	4613      	mov	r3, r2
 800d022:	009b      	lsls	r3, r3, #2
 800d024:	4413      	add	r3, r2
 800d026:	461a      	mov	r2, r3
 800d028:	2164      	movs	r1, #100	@ 0x64
 800d02a:	2064      	movs	r0, #100	@ 0x64
 800d02c:	f7ff fb12 	bl	800c654 <Move_Right>
 800d030:	4603      	mov	r3, r0
 800d032:	77bb      	strb	r3, [r7, #30]
				while (temp != true)
 800d034:	7fbb      	ldrb	r3, [r7, #30]
 800d036:	f083 0301 	eor.w	r3, r3, #1
 800d03a:	b2db      	uxtb	r3, r3
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d1ee      	bne.n	800d01e <Move_Action_Nopid_Left_Ctrl+0x1e2>
				}
				return false;
 800d040:	2300      	movs	r3, #0
 800d042:	e063      	b.n	800d10c <Move_Action_Nopid_Left_Ctrl+0x2d0>
			}
		}
		if ( Y_Diff >= 10 )
 800d044:	8b3b      	ldrh	r3, [r7, #24]
 800d046:	2b09      	cmp	r3, #9
 800d048:	d95f      	bls.n	800d10a <Move_Action_Nopid_Left_Ctrl+0x2ce>
		{
			// 当前Y坐标小于目标Y
			if (Y_NOW - y_goal < 0)
 800d04a:	4b33      	ldr	r3, [pc, #204]	@ (800d118 <Move_Action_Nopid_Left_Ctrl+0x2dc>)
 800d04c:	edd3 7a00 	vldr	s15, [r3]
 800d050:	eeb1 7a67 	vneg.f32	s14, s15
 800d054:	edd7 7a00 	vldr	s15, [r7]
 800d058:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d05c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d060:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d064:	d521      	bpl.n	800d0aa <Move_Action_Nopid_Left_Ctrl+0x26e>
			{
				bool temp = Move_Line(Action_Speed, Action_Acc,Y_Diff * 5);
 800d066:	8b3a      	ldrh	r2, [r7, #24]
 800d068:	4613      	mov	r3, r2
 800d06a:	009b      	lsls	r3, r3, #2
 800d06c:	4413      	add	r3, r2
 800d06e:	461a      	mov	r2, r3
 800d070:	2164      	movs	r1, #100	@ 0x64
 800d072:	2064      	movs	r0, #100	@ 0x64
 800d074:	f7ff f85c 	bl	800c130 <Move_Line>
 800d078:	4603      	mov	r3, r0
 800d07a:	777b      	strb	r3, [r7, #29]
				HAL_Delay(5);
 800d07c:	2005      	movs	r0, #5
 800d07e:	f7f6 f8ed 	bl	800325c <HAL_Delay>
				while (temp != true)
 800d082:	e00a      	b.n	800d09a <Move_Action_Nopid_Left_Ctrl+0x25e>
				{
					temp = Move_Line(Action_Speed, Action_Acc,Y_Diff * 5);
 800d084:	8b3a      	ldrh	r2, [r7, #24]
 800d086:	4613      	mov	r3, r2
 800d088:	009b      	lsls	r3, r3, #2
 800d08a:	4413      	add	r3, r2
 800d08c:	461a      	mov	r2, r3
 800d08e:	2164      	movs	r1, #100	@ 0x64
 800d090:	2064      	movs	r0, #100	@ 0x64
 800d092:	f7ff f84d 	bl	800c130 <Move_Line>
 800d096:	4603      	mov	r3, r0
 800d098:	777b      	strb	r3, [r7, #29]
				while (temp != true)
 800d09a:	7f7b      	ldrb	r3, [r7, #29]
 800d09c:	f083 0301 	eor.w	r3, r3, #1
 800d0a0:	b2db      	uxtb	r3, r3
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d1ee      	bne.n	800d084 <Move_Action_Nopid_Left_Ctrl+0x248>
				}
				return false;
 800d0a6:	2300      	movs	r3, #0
 800d0a8:	e030      	b.n	800d10c <Move_Action_Nopid_Left_Ctrl+0x2d0>
			}
			// 当前Y坐标大于目标Y
			else if (Y_NOW - y_goal > 0)
 800d0aa:	4b1b      	ldr	r3, [pc, #108]	@ (800d118 <Move_Action_Nopid_Left_Ctrl+0x2dc>)
 800d0ac:	edd3 7a00 	vldr	s15, [r3]
 800d0b0:	eeb1 7a67 	vneg.f32	s14, s15
 800d0b4:	edd7 7a00 	vldr	s15, [r7]
 800d0b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d0bc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d0c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d0c4:	dd21      	ble.n	800d10a <Move_Action_Nopid_Left_Ctrl+0x2ce>
			{
				bool temp = Move_Back(Action_Speed, Action_Acc,Y_Diff * 5);
 800d0c6:	8b3a      	ldrh	r2, [r7, #24]
 800d0c8:	4613      	mov	r3, r2
 800d0ca:	009b      	lsls	r3, r3, #2
 800d0cc:	4413      	add	r3, r2
 800d0ce:	461a      	mov	r2, r3
 800d0d0:	2164      	movs	r1, #100	@ 0x64
 800d0d2:	2064      	movs	r0, #100	@ 0x64
 800d0d4:	f7ff f972 	bl	800c3bc <Move_Back>
 800d0d8:	4603      	mov	r3, r0
 800d0da:	773b      	strb	r3, [r7, #28]
				HAL_Delay(5);
 800d0dc:	2005      	movs	r0, #5
 800d0de:	f7f6 f8bd 	bl	800325c <HAL_Delay>
				while (temp != true)
 800d0e2:	e00a      	b.n	800d0fa <Move_Action_Nopid_Left_Ctrl+0x2be>
				{
					temp = Move_Back(Action_Speed, Action_Acc,Y_Diff* 5);
 800d0e4:	8b3a      	ldrh	r2, [r7, #24]
 800d0e6:	4613      	mov	r3, r2
 800d0e8:	009b      	lsls	r3, r3, #2
 800d0ea:	4413      	add	r3, r2
 800d0ec:	461a      	mov	r2, r3
 800d0ee:	2164      	movs	r1, #100	@ 0x64
 800d0f0:	2064      	movs	r0, #100	@ 0x64
 800d0f2:	f7ff f963 	bl	800c3bc <Move_Back>
 800d0f6:	4603      	mov	r3, r0
 800d0f8:	773b      	strb	r3, [r7, #28]
				while (temp != true)
 800d0fa:	7f3b      	ldrb	r3, [r7, #28]
 800d0fc:	f083 0301 	eor.w	r3, r3, #1
 800d100:	b2db      	uxtb	r3, r3
 800d102:	2b00      	cmp	r3, #0
 800d104:	d1ee      	bne.n	800d0e4 <Move_Action_Nopid_Left_Ctrl+0x2a8>
				}
				return false;
 800d106:	2300      	movs	r3, #0
 800d108:	e000      	b.n	800d10c <Move_Action_Nopid_Left_Ctrl+0x2d0>
			}
		}
		return false;
 800d10a:	2300      	movs	r3, #0
}
 800d10c:	4618      	mov	r0, r3
 800d10e:	3720      	adds	r7, #32
 800d110:	46bd      	mov	sp, r7
 800d112:	bd80      	pop	{r7, pc}
 800d114:	24000af0 	.word	0x24000af0
 800d118:	24000af4 	.word	0x24000af4
 800d11c:	08012cb4 	.word	0x08012cb4
 800d120:	08012cb8 	.word	0x08012cb8
 800d124:	24000a58 	.word	0x24000a58
 800d128:	08012cc4 	.word	0x08012cc4
 800d12c:	08012cc8 	.word	0x08012cc8

0800d130 <Move_Action_Nopid_Forward_Ctrl>:
//这个函数是爪子朝向前方时，第一个十字和粗加工区进行ACTION调整
bool Move_Action_Nopid_Forward_Ctrl(float x_goal, float y_goal)
{
 800d130:	b580      	push	{r7, lr}
 800d132:	b088      	sub	sp, #32
 800d134:	af00      	add	r7, sp, #0
 800d136:	ed87 0a01 	vstr	s0, [r7, #4]
 800d13a:	edc7 0a00 	vstr	s1, [r7]
	//ACTION调整
	//		取X,Y差值
	uint16_t X_Diff = (uint16_t)ABS(X_NOW - x_goal);
 800d13e:	4bb2      	ldr	r3, [pc, #712]	@ (800d408 <Move_Action_Nopid_Forward_Ctrl+0x2d8>)
 800d140:	ed93 7a00 	vldr	s14, [r3]
 800d144:	edd7 7a01 	vldr	s15, [r7, #4]
 800d148:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d14c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d150:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d154:	dd0c      	ble.n	800d170 <Move_Action_Nopid_Forward_Ctrl+0x40>
 800d156:	4bac      	ldr	r3, [pc, #688]	@ (800d408 <Move_Action_Nopid_Forward_Ctrl+0x2d8>)
 800d158:	ed93 7a00 	vldr	s14, [r3]
 800d15c:	edd7 7a01 	vldr	s15, [r7, #4]
 800d160:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d164:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d168:	ee17 3a90 	vmov	r3, s15
 800d16c:	b29b      	uxth	r3, r3
 800d16e:	e00d      	b.n	800d18c <Move_Action_Nopid_Forward_Ctrl+0x5c>
 800d170:	4ba5      	ldr	r3, [pc, #660]	@ (800d408 <Move_Action_Nopid_Forward_Ctrl+0x2d8>)
 800d172:	ed93 7a00 	vldr	s14, [r3]
 800d176:	edd7 7a01 	vldr	s15, [r7, #4]
 800d17a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d17e:	eef1 7a67 	vneg.f32	s15, s15
 800d182:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d186:	ee17 3a90 	vmov	r3, s15
 800d18a:	b29b      	uxth	r3, r3
 800d18c:	837b      	strh	r3, [r7, #26]
	uint16_t Y_Diff = (uint16_t)ABS(Y_NOW - y_goal);
 800d18e:	4b9f      	ldr	r3, [pc, #636]	@ (800d40c <Move_Action_Nopid_Forward_Ctrl+0x2dc>)
 800d190:	edd3 7a00 	vldr	s15, [r3]
 800d194:	eeb1 7a67 	vneg.f32	s14, s15
 800d198:	edd7 7a00 	vldr	s15, [r7]
 800d19c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d1a0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d1a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d1a8:	dd0e      	ble.n	800d1c8 <Move_Action_Nopid_Forward_Ctrl+0x98>
 800d1aa:	4b98      	ldr	r3, [pc, #608]	@ (800d40c <Move_Action_Nopid_Forward_Ctrl+0x2dc>)
 800d1ac:	edd3 7a00 	vldr	s15, [r3]
 800d1b0:	eeb1 7a67 	vneg.f32	s14, s15
 800d1b4:	edd7 7a00 	vldr	s15, [r7]
 800d1b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d1bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d1c0:	ee17 3a90 	vmov	r3, s15
 800d1c4:	b29b      	uxth	r3, r3
 800d1c6:	e00f      	b.n	800d1e8 <Move_Action_Nopid_Forward_Ctrl+0xb8>
 800d1c8:	4b90      	ldr	r3, [pc, #576]	@ (800d40c <Move_Action_Nopid_Forward_Ctrl+0x2dc>)
 800d1ca:	edd3 7a00 	vldr	s15, [r3]
 800d1ce:	eeb1 7a67 	vneg.f32	s14, s15
 800d1d2:	edd7 7a00 	vldr	s15, [r7]
 800d1d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d1da:	eef1 7a67 	vneg.f32	s15, s15
 800d1de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d1e2:	ee17 3a90 	vmov	r3, s15
 800d1e6:	b29b      	uxth	r3, r3
 800d1e8:	833b      	strh	r3, [r7, #24]
	char X_send[8];
	char Y_send[8];
	sprintf(X_send, "%d", X_Diff);
 800d1ea:	8b7a      	ldrh	r2, [r7, #26]
 800d1ec:	f107 0310 	add.w	r3, r7, #16
 800d1f0:	4987      	ldr	r1, [pc, #540]	@ (800d410 <Move_Action_Nopid_Forward_Ctrl+0x2e0>)
 800d1f2:	4618      	mov	r0, r3
 800d1f4:	f002 fa92 	bl	800f71c <siprintf>
	sprintf(Y_send, "%d", Y_Diff);
 800d1f8:	8b3a      	ldrh	r2, [r7, #24]
 800d1fa:	f107 0308 	add.w	r3, r7, #8
 800d1fe:	4984      	ldr	r1, [pc, #528]	@ (800d410 <Move_Action_Nopid_Forward_Ctrl+0x2e0>)
 800d200:	4618      	mov	r0, r3
 800d202:	f002 fa8b 	bl	800f71c <siprintf>
	if( X_Diff <  10 ){
 800d206:	8b7b      	ldrh	r3, [r7, #26]
 800d208:	2b09      	cmp	r3, #9
 800d20a:	d815      	bhi.n	800d238 <Move_Action_Nopid_Forward_Ctrl+0x108>
		HAL_UART_Transmit(&huart10, (uint8_t*) "X_Diff = ", sizeof("X_Diff = ") - 2,0xffff);
 800d20c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d210:	2208      	movs	r2, #8
 800d212:	4980      	ldr	r1, [pc, #512]	@ (800d414 <Move_Action_Nopid_Forward_Ctrl+0x2e4>)
 800d214:	4880      	ldr	r0, [pc, #512]	@ (800d418 <Move_Action_Nopid_Forward_Ctrl+0x2e8>)
 800d216:	f7fb fdb3 	bl	8008d80 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart10, (uint8_t*) X_send, sizeof(X_send) - 1,0xffff);
 800d21a:	f107 0110 	add.w	r1, r7, #16
 800d21e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d222:	2207      	movs	r2, #7
 800d224:	487c      	ldr	r0, [pc, #496]	@ (800d418 <Move_Action_Nopid_Forward_Ctrl+0x2e8>)
 800d226:	f7fb fdab 	bl	8008d80 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart10, (uint8_t*) "\n", sizeof("\n= ") - 1,0xffff);
 800d22a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d22e:	2203      	movs	r2, #3
 800d230:	497a      	ldr	r1, [pc, #488]	@ (800d41c <Move_Action_Nopid_Forward_Ctrl+0x2ec>)
 800d232:	4879      	ldr	r0, [pc, #484]	@ (800d418 <Move_Action_Nopid_Forward_Ctrl+0x2e8>)
 800d234:	f7fb fda4 	bl	8008d80 <HAL_UART_Transmit>
	}
	if( Y_Diff <  10 ){
 800d238:	8b3b      	ldrh	r3, [r7, #24]
 800d23a:	2b09      	cmp	r3, #9
 800d23c:	d815      	bhi.n	800d26a <Move_Action_Nopid_Forward_Ctrl+0x13a>
		HAL_UART_Transmit(&huart10, (uint8_t*) "Y_Diff = ", sizeof("X_Diff = ") - 2,0xffff);
 800d23e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d242:	2208      	movs	r2, #8
 800d244:	4976      	ldr	r1, [pc, #472]	@ (800d420 <Move_Action_Nopid_Forward_Ctrl+0x2f0>)
 800d246:	4874      	ldr	r0, [pc, #464]	@ (800d418 <Move_Action_Nopid_Forward_Ctrl+0x2e8>)
 800d248:	f7fb fd9a 	bl	8008d80 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart10, (uint8_t*) Y_send, sizeof(Y_send) - 1,0xffff);
 800d24c:	f107 0108 	add.w	r1, r7, #8
 800d250:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d254:	2207      	movs	r2, #7
 800d256:	4870      	ldr	r0, [pc, #448]	@ (800d418 <Move_Action_Nopid_Forward_Ctrl+0x2e8>)
 800d258:	f7fb fd92 	bl	8008d80 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart10, (uint8_t*) "\n", sizeof("\n= ") - 1,0xffff);
 800d25c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d260:	2203      	movs	r2, #3
 800d262:	496e      	ldr	r1, [pc, #440]	@ (800d41c <Move_Action_Nopid_Forward_Ctrl+0x2ec>)
 800d264:	486c      	ldr	r0, [pc, #432]	@ (800d418 <Move_Action_Nopid_Forward_Ctrl+0x2e8>)
 800d266:	f7fb fd8b 	bl	8008d80 <HAL_UART_Transmit>
	}
	if(( X_Diff <  10 ) && ( Y_Diff < 10 ))
 800d26a:	8b7b      	ldrh	r3, [r7, #26]
 800d26c:	2b09      	cmp	r3, #9
 800d26e:	d804      	bhi.n	800d27a <Move_Action_Nopid_Forward_Ctrl+0x14a>
 800d270:	8b3b      	ldrh	r3, [r7, #24]
 800d272:	2b09      	cmp	r3, #9
 800d274:	d801      	bhi.n	800d27a <Move_Action_Nopid_Forward_Ctrl+0x14a>
		return true;
 800d276:	2301      	movs	r3, #1
 800d278:	e0c2      	b.n	800d400 <Move_Action_Nopid_Forward_Ctrl+0x2d0>
//	X差值不满足要求
	if( X_Diff >=  10 )
 800d27a:	8b7b      	ldrh	r3, [r7, #26]
 800d27c:	2b09      	cmp	r3, #9
 800d27e:	d95b      	bls.n	800d338 <Move_Action_Nopid_Forward_Ctrl+0x208>
	{
//		X与当前目标值差值小于0
		if ((X_NOW - x_goal) < 0)
 800d280:	4b61      	ldr	r3, [pc, #388]	@ (800d408 <Move_Action_Nopid_Forward_Ctrl+0x2d8>)
 800d282:	ed93 7a00 	vldr	s14, [r3]
 800d286:	edd7 7a01 	vldr	s15, [r7, #4]
 800d28a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d28e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d292:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d296:	d521      	bpl.n	800d2dc <Move_Action_Nopid_Forward_Ctrl+0x1ac>
		{
			bool temp = Move_Line(Action_Speed, Action_Acc, X_Diff* 3);
 800d298:	8b7a      	ldrh	r2, [r7, #26]
 800d29a:	4613      	mov	r3, r2
 800d29c:	005b      	lsls	r3, r3, #1
 800d29e:	4413      	add	r3, r2
 800d2a0:	461a      	mov	r2, r3
 800d2a2:	2164      	movs	r1, #100	@ 0x64
 800d2a4:	2064      	movs	r0, #100	@ 0x64
 800d2a6:	f7fe ff43 	bl	800c130 <Move_Line>
 800d2aa:	4603      	mov	r3, r0
 800d2ac:	77fb      	strb	r3, [r7, #31]
			HAL_Delay(5);
 800d2ae:	2005      	movs	r0, #5
 800d2b0:	f7f5 ffd4 	bl	800325c <HAL_Delay>
			while (temp != true)
 800d2b4:	e00a      	b.n	800d2cc <Move_Action_Nopid_Forward_Ctrl+0x19c>
			{
				temp = Move_Line(Action_Speed, Action_Acc, X_Diff * 3);
 800d2b6:	8b7a      	ldrh	r2, [r7, #26]
 800d2b8:	4613      	mov	r3, r2
 800d2ba:	005b      	lsls	r3, r3, #1
 800d2bc:	4413      	add	r3, r2
 800d2be:	461a      	mov	r2, r3
 800d2c0:	2164      	movs	r1, #100	@ 0x64
 800d2c2:	2064      	movs	r0, #100	@ 0x64
 800d2c4:	f7fe ff34 	bl	800c130 <Move_Line>
 800d2c8:	4603      	mov	r3, r0
 800d2ca:	77fb      	strb	r3, [r7, #31]
			while (temp != true)
 800d2cc:	7ffb      	ldrb	r3, [r7, #31]
 800d2ce:	f083 0301 	eor.w	r3, r3, #1
 800d2d2:	b2db      	uxtb	r3, r3
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d1ee      	bne.n	800d2b6 <Move_Action_Nopid_Forward_Ctrl+0x186>
			}
			return false;
 800d2d8:	2300      	movs	r3, #0
 800d2da:	e091      	b.n	800d400 <Move_Action_Nopid_Forward_Ctrl+0x2d0>
		}
			// 当前X坐标大于目标X
		else if ((X_NOW - x_goal) > 0)
 800d2dc:	4b4a      	ldr	r3, [pc, #296]	@ (800d408 <Move_Action_Nopid_Forward_Ctrl+0x2d8>)
 800d2de:	ed93 7a00 	vldr	s14, [r3]
 800d2e2:	edd7 7a01 	vldr	s15, [r7, #4]
 800d2e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d2ea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d2ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d2f2:	dd21      	ble.n	800d338 <Move_Action_Nopid_Forward_Ctrl+0x208>
		{
			bool temp = Move_Back(Action_Speed, Action_Acc, X_Diff * 3);
 800d2f4:	8b7a      	ldrh	r2, [r7, #26]
 800d2f6:	4613      	mov	r3, r2
 800d2f8:	005b      	lsls	r3, r3, #1
 800d2fa:	4413      	add	r3, r2
 800d2fc:	461a      	mov	r2, r3
 800d2fe:	2164      	movs	r1, #100	@ 0x64
 800d300:	2064      	movs	r0, #100	@ 0x64
 800d302:	f7ff f85b 	bl	800c3bc <Move_Back>
 800d306:	4603      	mov	r3, r0
 800d308:	77bb      	strb	r3, [r7, #30]
			HAL_Delay(5);
 800d30a:	2005      	movs	r0, #5
 800d30c:	f7f5 ffa6 	bl	800325c <HAL_Delay>
			while (temp != true)
 800d310:	e00a      	b.n	800d328 <Move_Action_Nopid_Forward_Ctrl+0x1f8>
			{
				temp = Move_Back(Action_Speed, Action_Acc, X_Diff * 3);
 800d312:	8b7a      	ldrh	r2, [r7, #26]
 800d314:	4613      	mov	r3, r2
 800d316:	005b      	lsls	r3, r3, #1
 800d318:	4413      	add	r3, r2
 800d31a:	461a      	mov	r2, r3
 800d31c:	2164      	movs	r1, #100	@ 0x64
 800d31e:	2064      	movs	r0, #100	@ 0x64
 800d320:	f7ff f84c 	bl	800c3bc <Move_Back>
 800d324:	4603      	mov	r3, r0
 800d326:	77bb      	strb	r3, [r7, #30]
			while (temp != true)
 800d328:	7fbb      	ldrb	r3, [r7, #30]
 800d32a:	f083 0301 	eor.w	r3, r3, #1
 800d32e:	b2db      	uxtb	r3, r3
 800d330:	2b00      	cmp	r3, #0
 800d332:	d1ee      	bne.n	800d312 <Move_Action_Nopid_Forward_Ctrl+0x1e2>
			}
			return false;
 800d334:	2300      	movs	r3, #0
 800d336:	e063      	b.n	800d400 <Move_Action_Nopid_Forward_Ctrl+0x2d0>
		}
	}
	if ( Y_Diff >= 10 )
 800d338:	8b3b      	ldrh	r3, [r7, #24]
 800d33a:	2b09      	cmp	r3, #9
 800d33c:	d95f      	bls.n	800d3fe <Move_Action_Nopid_Forward_Ctrl+0x2ce>
	{
		// 当前Y坐标小于目标Y
		if ((Y_NOW - y_goal) < 0)
 800d33e:	4b33      	ldr	r3, [pc, #204]	@ (800d40c <Move_Action_Nopid_Forward_Ctrl+0x2dc>)
 800d340:	edd3 7a00 	vldr	s15, [r3]
 800d344:	eeb1 7a67 	vneg.f32	s14, s15
 800d348:	edd7 7a00 	vldr	s15, [r7]
 800d34c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d350:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d354:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d358:	d521      	bpl.n	800d39e <Move_Action_Nopid_Forward_Ctrl+0x26e>
		{
			bool temp = Move_Right(Action_Speed, Action_Acc,Y_Diff * 3);
 800d35a:	8b3a      	ldrh	r2, [r7, #24]
 800d35c:	4613      	mov	r3, r2
 800d35e:	005b      	lsls	r3, r3, #1
 800d360:	4413      	add	r3, r2
 800d362:	461a      	mov	r2, r3
 800d364:	2164      	movs	r1, #100	@ 0x64
 800d366:	2064      	movs	r0, #100	@ 0x64
 800d368:	f7ff f974 	bl	800c654 <Move_Right>
 800d36c:	4603      	mov	r3, r0
 800d36e:	777b      	strb	r3, [r7, #29]
			HAL_Delay(5);
 800d370:	2005      	movs	r0, #5
 800d372:	f7f5 ff73 	bl	800325c <HAL_Delay>
			while (temp != true)
 800d376:	e00a      	b.n	800d38e <Move_Action_Nopid_Forward_Ctrl+0x25e>
			{
				temp = Move_Right(Action_Speed, Action_Acc, Y_Diff * 3);
 800d378:	8b3a      	ldrh	r2, [r7, #24]
 800d37a:	4613      	mov	r3, r2
 800d37c:	005b      	lsls	r3, r3, #1
 800d37e:	4413      	add	r3, r2
 800d380:	461a      	mov	r2, r3
 800d382:	2164      	movs	r1, #100	@ 0x64
 800d384:	2064      	movs	r0, #100	@ 0x64
 800d386:	f7ff f965 	bl	800c654 <Move_Right>
 800d38a:	4603      	mov	r3, r0
 800d38c:	777b      	strb	r3, [r7, #29]
			while (temp != true)
 800d38e:	7f7b      	ldrb	r3, [r7, #29]
 800d390:	f083 0301 	eor.w	r3, r3, #1
 800d394:	b2db      	uxtb	r3, r3
 800d396:	2b00      	cmp	r3, #0
 800d398:	d1ee      	bne.n	800d378 <Move_Action_Nopid_Forward_Ctrl+0x248>
			}
			return false;
 800d39a:	2300      	movs	r3, #0
 800d39c:	e030      	b.n	800d400 <Move_Action_Nopid_Forward_Ctrl+0x2d0>
		}
		// 当前Y坐标大于目标Y
		else if (Y_NOW - y_goal > 0)
 800d39e:	4b1b      	ldr	r3, [pc, #108]	@ (800d40c <Move_Action_Nopid_Forward_Ctrl+0x2dc>)
 800d3a0:	edd3 7a00 	vldr	s15, [r3]
 800d3a4:	eeb1 7a67 	vneg.f32	s14, s15
 800d3a8:	edd7 7a00 	vldr	s15, [r7]
 800d3ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d3b0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d3b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d3b8:	dd21      	ble.n	800d3fe <Move_Action_Nopid_Forward_Ctrl+0x2ce>
		{
			bool temp = Move_Left(Action_Speed, Action_Acc, Y_Diff * 3);
 800d3ba:	8b3a      	ldrh	r2, [r7, #24]
 800d3bc:	4613      	mov	r3, r2
 800d3be:	005b      	lsls	r3, r3, #1
 800d3c0:	4413      	add	r3, r2
 800d3c2:	461a      	mov	r2, r3
 800d3c4:	2164      	movs	r1, #100	@ 0x64
 800d3c6:	2064      	movs	r0, #100	@ 0x64
 800d3c8:	f7fe ff58 	bl	800c27c <Move_Left>
 800d3cc:	4603      	mov	r3, r0
 800d3ce:	773b      	strb	r3, [r7, #28]
			HAL_Delay(5);
 800d3d0:	2005      	movs	r0, #5
 800d3d2:	f7f5 ff43 	bl	800325c <HAL_Delay>
			while (temp != true)
 800d3d6:	e00a      	b.n	800d3ee <Move_Action_Nopid_Forward_Ctrl+0x2be>
			{
				temp = Move_Left(Action_Speed, Action_Acc, Y_Diff * 3);
 800d3d8:	8b3a      	ldrh	r2, [r7, #24]
 800d3da:	4613      	mov	r3, r2
 800d3dc:	005b      	lsls	r3, r3, #1
 800d3de:	4413      	add	r3, r2
 800d3e0:	461a      	mov	r2, r3
 800d3e2:	2164      	movs	r1, #100	@ 0x64
 800d3e4:	2064      	movs	r0, #100	@ 0x64
 800d3e6:	f7fe ff49 	bl	800c27c <Move_Left>
 800d3ea:	4603      	mov	r3, r0
 800d3ec:	773b      	strb	r3, [r7, #28]
			while (temp != true)
 800d3ee:	7f3b      	ldrb	r3, [r7, #28]
 800d3f0:	f083 0301 	eor.w	r3, r3, #1
 800d3f4:	b2db      	uxtb	r3, r3
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d1ee      	bne.n	800d3d8 <Move_Action_Nopid_Forward_Ctrl+0x2a8>
			}
			return false;
 800d3fa:	2300      	movs	r3, #0
 800d3fc:	e000      	b.n	800d400 <Move_Action_Nopid_Forward_Ctrl+0x2d0>
		}
	}
	return false;
 800d3fe:	2300      	movs	r3, #0
}
 800d400:	4618      	mov	r0, r3
 800d402:	3720      	adds	r7, #32
 800d404:	46bd      	mov	sp, r7
 800d406:	bd80      	pop	{r7, pc}
 800d408:	24000af0 	.word	0x24000af0
 800d40c:	24000af4 	.word	0x24000af4
 800d410:	08012cb4 	.word	0x08012cb4
 800d414:	08012cb8 	.word	0x08012cb8
 800d418:	24000a58 	.word	0x24000a58
 800d41c:	08012cc4 	.word	0x08012cc4
 800d420:	08012cc8 	.word	0x08012cc8

0800d424 <Host2SCS>:
}

//1个16位数拆分为2个8位数
//DataL为低位，DataH为高位
void Host2SCS(uint8_t *DataL, uint8_t *DataH, int Data)
{
 800d424:	b480      	push	{r7}
 800d426:	b085      	sub	sp, #20
 800d428:	af00      	add	r7, sp, #0
 800d42a:	60f8      	str	r0, [r7, #12]
 800d42c:	60b9      	str	r1, [r7, #8]
 800d42e:	607a      	str	r2, [r7, #4]
	if (End)
 800d430:	4b0e      	ldr	r3, [pc, #56]	@ (800d46c <Host2SCS+0x48>)
 800d432:	781b      	ldrb	r3, [r3, #0]
 800d434:	2b00      	cmp	r3, #0
 800d436:	d009      	beq.n	800d44c <Host2SCS+0x28>
	{
		*DataL = (Data >> 8);
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	121b      	asrs	r3, r3, #8
 800d43c:	b2da      	uxtb	r2, r3
 800d43e:	68fb      	ldr	r3, [r7, #12]
 800d440:	701a      	strb	r2, [r3, #0]
		*DataH = (Data & 0xff);
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	b2da      	uxtb	r2, r3
 800d446:	68bb      	ldr	r3, [r7, #8]
 800d448:	701a      	strb	r2, [r3, #0]
	else
	{
		*DataH = (Data >> 8);
		*DataL = (Data & 0xff);
	}
}
 800d44a:	e008      	b.n	800d45e <Host2SCS+0x3a>
		*DataH = (Data >> 8);
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	121b      	asrs	r3, r3, #8
 800d450:	b2da      	uxtb	r2, r3
 800d452:	68bb      	ldr	r3, [r7, #8]
 800d454:	701a      	strb	r2, [r3, #0]
		*DataL = (Data & 0xff);
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	b2da      	uxtb	r2, r3
 800d45a:	68fb      	ldr	r3, [r7, #12]
 800d45c:	701a      	strb	r2, [r3, #0]
}
 800d45e:	bf00      	nop
 800d460:	3714      	adds	r7, #20
 800d462:	46bd      	mov	sp, r7
 800d464:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d468:	4770      	bx	lr
 800d46a:	bf00      	nop
 800d46c:	24000c2a 	.word	0x24000c2a

0800d470 <writeBuf>:
	return Data;
}

void writeBuf(uint8_t ID, uint8_t MemAddr, uint8_t *nDat, uint8_t nLen,
		uint8_t Fun)
{
 800d470:	b580      	push	{r7, lr}
 800d472:	b086      	sub	sp, #24
 800d474:	af00      	add	r7, sp, #0
 800d476:	603a      	str	r2, [r7, #0]
 800d478:	461a      	mov	r2, r3
 800d47a:	4603      	mov	r3, r0
 800d47c:	71fb      	strb	r3, [r7, #7]
 800d47e:	460b      	mov	r3, r1
 800d480:	71bb      	strb	r3, [r7, #6]
 800d482:	4613      	mov	r3, r2
 800d484:	717b      	strb	r3, [r7, #5]
	uint8_t i;
	uint8_t msgLen = 2;
 800d486:	2302      	movs	r3, #2
 800d488:	75bb      	strb	r3, [r7, #22]
	uint8_t bBuf[6];
	uint8_t CheckSum = 0;
 800d48a:	2300      	movs	r3, #0
 800d48c:	73fb      	strb	r3, [r7, #15]
	bBuf[0] = 0xff;
 800d48e:	23ff      	movs	r3, #255	@ 0xff
 800d490:	743b      	strb	r3, [r7, #16]
	bBuf[1] = 0xff;
 800d492:	23ff      	movs	r3, #255	@ 0xff
 800d494:	747b      	strb	r3, [r7, #17]
	bBuf[2] = ID;
 800d496:	79fb      	ldrb	r3, [r7, #7]
 800d498:	74bb      	strb	r3, [r7, #18]
	bBuf[4] = Fun;
 800d49a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d49e:	753b      	strb	r3, [r7, #20]
	if (nDat)
 800d4a0:	683b      	ldr	r3, [r7, #0]
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d010      	beq.n	800d4c8 <writeBuf+0x58>
	{
		msgLen += nLen + 1;
 800d4a6:	797a      	ldrb	r2, [r7, #5]
 800d4a8:	7dbb      	ldrb	r3, [r7, #22]
 800d4aa:	4413      	add	r3, r2
 800d4ac:	b2db      	uxtb	r3, r3
 800d4ae:	3301      	adds	r3, #1
 800d4b0:	75bb      	strb	r3, [r7, #22]
		bBuf[3] = msgLen;
 800d4b2:	7dbb      	ldrb	r3, [r7, #22]
 800d4b4:	74fb      	strb	r3, [r7, #19]
		bBuf[5] = MemAddr;
 800d4b6:	79bb      	ldrb	r3, [r7, #6]
 800d4b8:	757b      	strb	r3, [r7, #21]
		writeSCS(bBuf, 6);
 800d4ba:	f107 0310 	add.w	r3, r7, #16
 800d4be:	2106      	movs	r1, #6
 800d4c0:	4618      	mov	r0, r3
 800d4c2:	f000 f911 	bl	800d6e8 <writeSCS>
 800d4c6:	e007      	b.n	800d4d8 <writeBuf+0x68>

	}
	else
	{
		bBuf[3] = msgLen;
 800d4c8:	7dbb      	ldrb	r3, [r7, #22]
 800d4ca:	74fb      	strb	r3, [r7, #19]
		writeSCS(bBuf, 5);
 800d4cc:	f107 0310 	add.w	r3, r7, #16
 800d4d0:	2105      	movs	r1, #5
 800d4d2:	4618      	mov	r0, r3
 800d4d4:	f000 f908 	bl	800d6e8 <writeSCS>
	}
	CheckSum = ID + msgLen + Fun + MemAddr;
 800d4d8:	79fa      	ldrb	r2, [r7, #7]
 800d4da:	7dbb      	ldrb	r3, [r7, #22]
 800d4dc:	4413      	add	r3, r2
 800d4de:	b2da      	uxtb	r2, r3
 800d4e0:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d4e4:	4413      	add	r3, r2
 800d4e6:	b2da      	uxtb	r2, r3
 800d4e8:	79bb      	ldrb	r3, [r7, #6]
 800d4ea:	4413      	add	r3, r2
 800d4ec:	b2db      	uxtb	r3, r3
 800d4ee:	73fb      	strb	r3, [r7, #15]
	if (nDat)
 800d4f0:	683b      	ldr	r3, [r7, #0]
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	d016      	beq.n	800d524 <writeBuf+0xb4>
	{
		for (i = 0; i < nLen; i++)
 800d4f6:	2300      	movs	r3, #0
 800d4f8:	75fb      	strb	r3, [r7, #23]
 800d4fa:	e00a      	b.n	800d512 <writeBuf+0xa2>
		{
			CheckSum += nDat[i];
 800d4fc:	7dfb      	ldrb	r3, [r7, #23]
 800d4fe:	683a      	ldr	r2, [r7, #0]
 800d500:	4413      	add	r3, r2
 800d502:	781a      	ldrb	r2, [r3, #0]
 800d504:	7bfb      	ldrb	r3, [r7, #15]
 800d506:	4413      	add	r3, r2
 800d508:	b2db      	uxtb	r3, r3
 800d50a:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < nLen; i++)
 800d50c:	7dfb      	ldrb	r3, [r7, #23]
 800d50e:	3301      	adds	r3, #1
 800d510:	75fb      	strb	r3, [r7, #23]
 800d512:	7dfa      	ldrb	r2, [r7, #23]
 800d514:	797b      	ldrb	r3, [r7, #5]
 800d516:	429a      	cmp	r2, r3
 800d518:	d3f0      	bcc.n	800d4fc <writeBuf+0x8c>
		}
		writeSCS(nDat, nLen);
 800d51a:	797b      	ldrb	r3, [r7, #5]
 800d51c:	4619      	mov	r1, r3
 800d51e:	6838      	ldr	r0, [r7, #0]
 800d520:	f000 f8e2 	bl	800d6e8 <writeSCS>
	}
	CheckSum = ~CheckSum;
 800d524:	7bfb      	ldrb	r3, [r7, #15]
 800d526:	43db      	mvns	r3, r3
 800d528:	b2db      	uxtb	r3, r3
 800d52a:	73fb      	strb	r3, [r7, #15]
	writeSCS(&CheckSum, 1);
 800d52c:	f107 030f 	add.w	r3, r7, #15
 800d530:	2101      	movs	r1, #1
 800d532:	4618      	mov	r0, r3
 800d534:	f000 f8d8 	bl	800d6e8 <writeSCS>
}
 800d538:	bf00      	nop
 800d53a:	3718      	adds	r7, #24
 800d53c:	46bd      	mov	sp, r7
 800d53e:	bd80      	pop	{r7, pc}

0800d540 <genWrite>:

//普通写指令
//舵机ID，MemAddr内存表地址，写入数据，写入长度
int genWrite(uint8_t ID, uint8_t MemAddr, uint8_t *nDat, uint8_t nLen)
{
 800d540:	b580      	push	{r7, lr}
 800d542:	b084      	sub	sp, #16
 800d544:	af02      	add	r7, sp, #8
 800d546:	603a      	str	r2, [r7, #0]
 800d548:	461a      	mov	r2, r3
 800d54a:	4603      	mov	r3, r0
 800d54c:	71fb      	strb	r3, [r7, #7]
 800d54e:	460b      	mov	r3, r1
 800d550:	71bb      	strb	r3, [r7, #6]
 800d552:	4613      	mov	r3, r2
 800d554:	717b      	strb	r3, [r7, #5]
	rFlushSCS();
 800d556:	f000 f906 	bl	800d766 <rFlushSCS>
	writeBuf(ID, MemAddr, nDat, nLen, INST_WRITE);
 800d55a:	797b      	ldrb	r3, [r7, #5]
 800d55c:	79b9      	ldrb	r1, [r7, #6]
 800d55e:	79f8      	ldrb	r0, [r7, #7]
 800d560:	2203      	movs	r2, #3
 800d562:	9200      	str	r2, [sp, #0]
 800d564:	683a      	ldr	r2, [r7, #0]
 800d566:	f7ff ff83 	bl	800d470 <writeBuf>
	wFlushSCS();
 800d56a:	f000 f903 	bl	800d774 <wFlushSCS>
	return Ack(ID);
 800d56e:	79fb      	ldrb	r3, [r7, #7]
 800d570:	4618      	mov	r0, r3
 800d572:	f000 f82f 	bl	800d5d4 <Ack>
 800d576:	4603      	mov	r3, r0
}
 800d578:	4618      	mov	r0, r3
 800d57a:	3708      	adds	r7, #8
 800d57c:	46bd      	mov	sp, r7
 800d57e:	bd80      	pop	{r7, pc}

0800d580 <checkHead>:
	Error = bBuf[2];
	return bBuf[0];
}

int checkHead(void)
{
 800d580:	b580      	push	{r7, lr}
 800d582:	b082      	sub	sp, #8
 800d584:	af00      	add	r7, sp, #0
	uint8_t bDat;
	uint8_t bBuf[2] =
 800d586:	2300      	movs	r3, #0
 800d588:	80bb      	strh	r3, [r7, #4]
	{ 0, 0 };
	uint8_t Cnt = 0;
 800d58a:	2300      	movs	r3, #0
 800d58c:	71fb      	strb	r3, [r7, #7]
	while (1)
	{
		if (!readSCS(&bDat, 1))
 800d58e:	1dbb      	adds	r3, r7, #6
 800d590:	2101      	movs	r1, #1
 800d592:	4618      	mov	r0, r3
 800d594:	f000 f894 	bl	800d6c0 <readSCS>
 800d598:	4603      	mov	r3, r0
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d101      	bne.n	800d5a2 <checkHead+0x22>
		{
			return 0;
 800d59e:	2300      	movs	r3, #0
 800d5a0:	e013      	b.n	800d5ca <checkHead+0x4a>
		}
		bBuf[1] = bBuf[0];
 800d5a2:	793b      	ldrb	r3, [r7, #4]
 800d5a4:	717b      	strb	r3, [r7, #5]
		bBuf[0] = bDat;
 800d5a6:	79bb      	ldrb	r3, [r7, #6]
 800d5a8:	713b      	strb	r3, [r7, #4]
		if (bBuf[0] == 0xff && bBuf[1] == 0xff)
 800d5aa:	793b      	ldrb	r3, [r7, #4]
 800d5ac:	2bff      	cmp	r3, #255	@ 0xff
 800d5ae:	d102      	bne.n	800d5b6 <checkHead+0x36>
 800d5b0:	797b      	ldrb	r3, [r7, #5]
 800d5b2:	2bff      	cmp	r3, #255	@ 0xff
 800d5b4:	d007      	beq.n	800d5c6 <checkHead+0x46>
		{
			break;
		}
		Cnt++;
 800d5b6:	79fb      	ldrb	r3, [r7, #7]
 800d5b8:	3301      	adds	r3, #1
 800d5ba:	71fb      	strb	r3, [r7, #7]
		if (Cnt > 10)
 800d5bc:	79fb      	ldrb	r3, [r7, #7]
 800d5be:	2b0a      	cmp	r3, #10
 800d5c0:	d9e5      	bls.n	800d58e <checkHead+0xe>
		{
			return 0;
 800d5c2:	2300      	movs	r3, #0
 800d5c4:	e001      	b.n	800d5ca <checkHead+0x4a>
			break;
 800d5c6:	bf00      	nop
		}
	}
	return 1;
 800d5c8:	2301      	movs	r3, #1
}
 800d5ca:	4618      	mov	r0, r3
 800d5cc:	3708      	adds	r7, #8
 800d5ce:	46bd      	mov	sp, r7
 800d5d0:	bd80      	pop	{r7, pc}
	...

0800d5d4 <Ack>:

//指令应答
int Ack(uint8_t ID)
{
 800d5d4:	b580      	push	{r7, lr}
 800d5d6:	b084      	sub	sp, #16
 800d5d8:	af00      	add	r7, sp, #0
 800d5da:	4603      	mov	r3, r0
 800d5dc:	71fb      	strb	r3, [r7, #7]
	uint8_t bBuf[4];
	uint8_t calSum;
	Error = 0;
 800d5de:	4b1f      	ldr	r3, [pc, #124]	@ (800d65c <Ack+0x88>)
 800d5e0:	2200      	movs	r2, #0
 800d5e2:	701a      	strb	r2, [r3, #0]
	if (ID != 0xfe && Level)
 800d5e4:	79fb      	ldrb	r3, [r7, #7]
 800d5e6:	2bfe      	cmp	r3, #254	@ 0xfe
 800d5e8:	d032      	beq.n	800d650 <Ack+0x7c>
 800d5ea:	4b1d      	ldr	r3, [pc, #116]	@ (800d660 <Ack+0x8c>)
 800d5ec:	781b      	ldrb	r3, [r3, #0]
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	d02e      	beq.n	800d650 <Ack+0x7c>
	{
		if (!checkHead())
 800d5f2:	f7ff ffc5 	bl	800d580 <checkHead>
 800d5f6:	4603      	mov	r3, r0
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d101      	bne.n	800d600 <Ack+0x2c>
		{
			return 0;
 800d5fc:	2300      	movs	r3, #0
 800d5fe:	e028      	b.n	800d652 <Ack+0x7e>
		}
		if (readSCS(bBuf, 4) != 4)
 800d600:	f107 0308 	add.w	r3, r7, #8
 800d604:	2104      	movs	r1, #4
 800d606:	4618      	mov	r0, r3
 800d608:	f000 f85a 	bl	800d6c0 <readSCS>
 800d60c:	4603      	mov	r3, r0
 800d60e:	2b04      	cmp	r3, #4
 800d610:	d001      	beq.n	800d616 <Ack+0x42>
		{
			return 0;
 800d612:	2300      	movs	r3, #0
 800d614:	e01d      	b.n	800d652 <Ack+0x7e>
		}
		if (bBuf[0] != ID)
 800d616:	7a3b      	ldrb	r3, [r7, #8]
 800d618:	79fa      	ldrb	r2, [r7, #7]
 800d61a:	429a      	cmp	r2, r3
 800d61c:	d001      	beq.n	800d622 <Ack+0x4e>
		{
			return 0;
 800d61e:	2300      	movs	r3, #0
 800d620:	e017      	b.n	800d652 <Ack+0x7e>
		}
		if (bBuf[1] != 2)
 800d622:	7a7b      	ldrb	r3, [r7, #9]
 800d624:	2b02      	cmp	r3, #2
 800d626:	d001      	beq.n	800d62c <Ack+0x58>
		{
			return 0;
 800d628:	2300      	movs	r3, #0
 800d62a:	e012      	b.n	800d652 <Ack+0x7e>
		}
		calSum = ~(bBuf[0] + bBuf[1] + bBuf[2]);
 800d62c:	7a3a      	ldrb	r2, [r7, #8]
 800d62e:	7a7b      	ldrb	r3, [r7, #9]
 800d630:	4413      	add	r3, r2
 800d632:	b2da      	uxtb	r2, r3
 800d634:	7abb      	ldrb	r3, [r7, #10]
 800d636:	4413      	add	r3, r2
 800d638:	b2db      	uxtb	r3, r3
 800d63a:	43db      	mvns	r3, r3
 800d63c:	73fb      	strb	r3, [r7, #15]
		if (calSum != bBuf[3])
 800d63e:	7afb      	ldrb	r3, [r7, #11]
 800d640:	7bfa      	ldrb	r2, [r7, #15]
 800d642:	429a      	cmp	r2, r3
 800d644:	d001      	beq.n	800d64a <Ack+0x76>
		{
			return 0;
 800d646:	2300      	movs	r3, #0
 800d648:	e003      	b.n	800d652 <Ack+0x7e>
		}
		Error = bBuf[2];
 800d64a:	7aba      	ldrb	r2, [r7, #10]
 800d64c:	4b03      	ldr	r3, [pc, #12]	@ (800d65c <Ack+0x88>)
 800d64e:	701a      	strb	r2, [r3, #0]
	}
	return 1;
 800d650:	2301      	movs	r3, #1
}
 800d652:	4618      	mov	r0, r3
 800d654:	3710      	adds	r7, #16
 800d656:	46bd      	mov	sp, r7
 800d658:	bd80      	pop	{r7, pc}
 800d65a:	bf00      	nop
 800d65c:	24000c2b 	.word	0x24000c2b
 800d660:	2400005d 	.word	0x2400005d

0800d664 <Uart_Send>:
#include "stm32h7xx_hal.h"
#include "SCS_Uart.h"
#include "usart.h"

void Uart_Send(uint8_t *buf, uint16_t len)
{
 800d664:	b580      	push	{r7, lr}
 800d666:	b082      	sub	sp, #8
 800d668:	af00      	add	r7, sp, #0
 800d66a:	6078      	str	r0, [r7, #4]
 800d66c:	460b      	mov	r3, r1
 800d66e:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&huart6, buf, len, HAL_MAX_DELAY);
 800d670:	887a      	ldrh	r2, [r7, #2]
 800d672:	f04f 33ff 	mov.w	r3, #4294967295
 800d676:	6879      	ldr	r1, [r7, #4]
 800d678:	4803      	ldr	r0, [pc, #12]	@ (800d688 <Uart_Send+0x24>)
 800d67a:	f7fb fb81 	bl	8008d80 <HAL_UART_Transmit>
}
 800d67e:	bf00      	nop
 800d680:	3708      	adds	r7, #8
 800d682:	46bd      	mov	sp, r7
 800d684:	bd80      	pop	{r7, pc}
 800d686:	bf00      	nop
 800d688:	240009c4 	.word	0x240009c4

0800d68c <Uart_Read>:

int16_t Uart_Read(uint8_t *buf, uint16_t len, uint32_t timeout)
{
 800d68c:	b580      	push	{r7, lr}
 800d68e:	b084      	sub	sp, #16
 800d690:	af00      	add	r7, sp, #0
 800d692:	60f8      	str	r0, [r7, #12]
 800d694:	460b      	mov	r3, r1
 800d696:	607a      	str	r2, [r7, #4]
 800d698:	817b      	strh	r3, [r7, #10]
	if (HAL_UART_Receive(&huart6, buf, len, timeout) == HAL_OK)
 800d69a:	897a      	ldrh	r2, [r7, #10]
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	68f9      	ldr	r1, [r7, #12]
 800d6a0:	4806      	ldr	r0, [pc, #24]	@ (800d6bc <Uart_Read+0x30>)
 800d6a2:	f7fb fbfb 	bl	8008e9c <HAL_UART_Receive>
 800d6a6:	4603      	mov	r3, r0
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d102      	bne.n	800d6b2 <Uart_Read+0x26>
	{
		return len;
 800d6ac:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800d6b0:	e000      	b.n	800d6b4 <Uart_Read+0x28>
	}
	else
	{
		return 0;
 800d6b2:	2300      	movs	r3, #0
	}
}
 800d6b4:	4618      	mov	r0, r3
 800d6b6:	3710      	adds	r7, #16
 800d6b8:	46bd      	mov	sp, r7
 800d6ba:	bd80      	pop	{r7, pc}
 800d6bc:	240009c4 	.word	0x240009c4

0800d6c0 <readSCS>:
uint8_t wBuf[128];
uint8_t wLen = 0;

//UART 接收数据接口
int readSCS(unsigned char *nDat, int nLen)
{
 800d6c0:	b580      	push	{r7, lr}
 800d6c2:	b082      	sub	sp, #8
 800d6c4:	af00      	add	r7, sp, #0
 800d6c6:	6078      	str	r0, [r7, #4]
 800d6c8:	6039      	str	r1, [r7, #0]
	return Uart_Read(nDat, nLen, IOTimeOut);
 800d6ca:	683b      	ldr	r3, [r7, #0]
 800d6cc:	b29b      	uxth	r3, r3
 800d6ce:	4a05      	ldr	r2, [pc, #20]	@ (800d6e4 <readSCS+0x24>)
 800d6d0:	6812      	ldr	r2, [r2, #0]
 800d6d2:	4619      	mov	r1, r3
 800d6d4:	6878      	ldr	r0, [r7, #4]
 800d6d6:	f7ff ffd9 	bl	800d68c <Uart_Read>
 800d6da:	4603      	mov	r3, r0
}
 800d6dc:	4618      	mov	r0, r3
 800d6de:	3708      	adds	r7, #8
 800d6e0:	46bd      	mov	sp, r7
 800d6e2:	bd80      	pop	{r7, pc}
 800d6e4:	24000060 	.word	0x24000060

0800d6e8 <writeSCS>:

//UART 发送数据接口
int writeSCS(unsigned char *nDat, int nLen)
{
 800d6e8:	b480      	push	{r7}
 800d6ea:	b083      	sub	sp, #12
 800d6ec:	af00      	add	r7, sp, #0
 800d6ee:	6078      	str	r0, [r7, #4]
 800d6f0:	6039      	str	r1, [r7, #0]
	while (nLen--)
 800d6f2:	e014      	b.n	800d71e <writeSCS+0x36>
	{
		if (wLen < sizeof(wBuf))
 800d6f4:	4b10      	ldr	r3, [pc, #64]	@ (800d738 <writeSCS+0x50>)
 800d6f6:	781b      	ldrb	r3, [r3, #0]
 800d6f8:	b25b      	sxtb	r3, r3
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	db0f      	blt.n	800d71e <writeSCS+0x36>
		{
			wBuf[wLen] = *nDat;
 800d6fe:	4b0e      	ldr	r3, [pc, #56]	@ (800d738 <writeSCS+0x50>)
 800d700:	781b      	ldrb	r3, [r3, #0]
 800d702:	461a      	mov	r2, r3
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	7819      	ldrb	r1, [r3, #0]
 800d708:	4b0c      	ldr	r3, [pc, #48]	@ (800d73c <writeSCS+0x54>)
 800d70a:	5499      	strb	r1, [r3, r2]
			wLen++;
 800d70c:	4b0a      	ldr	r3, [pc, #40]	@ (800d738 <writeSCS+0x50>)
 800d70e:	781b      	ldrb	r3, [r3, #0]
 800d710:	3301      	adds	r3, #1
 800d712:	b2da      	uxtb	r2, r3
 800d714:	4b08      	ldr	r3, [pc, #32]	@ (800d738 <writeSCS+0x50>)
 800d716:	701a      	strb	r2, [r3, #0]
			nDat++;
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	3301      	adds	r3, #1
 800d71c:	607b      	str	r3, [r7, #4]
	while (nLen--)
 800d71e:	683b      	ldr	r3, [r7, #0]
 800d720:	1e5a      	subs	r2, r3, #1
 800d722:	603a      	str	r2, [r7, #0]
 800d724:	2b00      	cmp	r3, #0
 800d726:	d1e5      	bne.n	800d6f4 <writeSCS+0xc>
		}
	}
	return wLen;
 800d728:	4b03      	ldr	r3, [pc, #12]	@ (800d738 <writeSCS+0x50>)
 800d72a:	781b      	ldrb	r3, [r3, #0]
}
 800d72c:	4618      	mov	r0, r3
 800d72e:	370c      	adds	r7, #12
 800d730:	46bd      	mov	sp, r7
 800d732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d736:	4770      	bx	lr
 800d738:	24000cac 	.word	0x24000cac
 800d73c:	24000c2c 	.word	0x24000c2c

0800d740 <nopDelay>:
	return wLen;
}

//等待舵机总线切换(约8us)
void nopDelay(void)
{
 800d740:	b480      	push	{r7}
 800d742:	b083      	sub	sp, #12
 800d744:	af00      	add	r7, sp, #0
	uint16_t i = 500;
 800d746:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800d74a:	80fb      	strh	r3, [r7, #6]
	while (i--)
 800d74c:	bf00      	nop
 800d74e:	88fb      	ldrh	r3, [r7, #6]
 800d750:	1e5a      	subs	r2, r3, #1
 800d752:	80fa      	strh	r2, [r7, #6]
 800d754:	2b00      	cmp	r3, #0
 800d756:	d1fa      	bne.n	800d74e <nopDelay+0xe>
		;
}
 800d758:	bf00      	nop
 800d75a:	bf00      	nop
 800d75c:	370c      	adds	r7, #12
 800d75e:	46bd      	mov	sp, r7
 800d760:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d764:	4770      	bx	lr

0800d766 <rFlushSCS>:

//接收缓冲区刷新
void rFlushSCS()
{
 800d766:	b580      	push	{r7, lr}
 800d768:	af00      	add	r7, sp, #0
	nopDelay();
 800d76a:	f7ff ffe9 	bl	800d740 <nopDelay>
}
 800d76e:	bf00      	nop
 800d770:	bd80      	pop	{r7, pc}
	...

0800d774 <wFlushSCS>:

//发送缓冲区刷新
void wFlushSCS()
{
 800d774:	b580      	push	{r7, lr}
 800d776:	af00      	add	r7, sp, #0
	if (wLen)
 800d778:	4b07      	ldr	r3, [pc, #28]	@ (800d798 <wFlushSCS+0x24>)
 800d77a:	781b      	ldrb	r3, [r3, #0]
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	d008      	beq.n	800d792 <wFlushSCS+0x1e>
	{
		Uart_Send(wBuf, wLen);
 800d780:	4b05      	ldr	r3, [pc, #20]	@ (800d798 <wFlushSCS+0x24>)
 800d782:	781b      	ldrb	r3, [r3, #0]
 800d784:	4619      	mov	r1, r3
 800d786:	4805      	ldr	r0, [pc, #20]	@ (800d79c <wFlushSCS+0x28>)
 800d788:	f7ff ff6c 	bl	800d664 <Uart_Send>
		wLen = 0;
 800d78c:	4b02      	ldr	r3, [pc, #8]	@ (800d798 <wFlushSCS+0x24>)
 800d78e:	2200      	movs	r2, #0
 800d790:	701a      	strb	r2, [r3, #0]
	}
}
 800d792:	bf00      	nop
 800d794:	bd80      	pop	{r7, pc}
 800d796:	bf00      	nop
 800d798:	24000cac 	.word	0x24000cac
 800d79c:	24000c2c 	.word	0x24000c2c

0800d7a0 <WritePosEx>:
{
	return Err;
}

int WritePosEx(uint8_t ID, int16_t Position, uint16_t Speed, uint8_t ACC)
{
 800d7a0:	b590      	push	{r4, r7, lr}
 800d7a2:	b085      	sub	sp, #20
 800d7a4:	af00      	add	r7, sp, #0
 800d7a6:	4604      	mov	r4, r0
 800d7a8:	4608      	mov	r0, r1
 800d7aa:	4611      	mov	r1, r2
 800d7ac:	461a      	mov	r2, r3
 800d7ae:	4623      	mov	r3, r4
 800d7b0:	71fb      	strb	r3, [r7, #7]
 800d7b2:	4603      	mov	r3, r0
 800d7b4:	80bb      	strh	r3, [r7, #4]
 800d7b6:	460b      	mov	r3, r1
 800d7b8:	807b      	strh	r3, [r7, #2]
 800d7ba:	4613      	mov	r3, r2
 800d7bc:	71bb      	strb	r3, [r7, #6]
	uint8_t bBuf[7];
	if (Position < 0)
 800d7be:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	da09      	bge.n	800d7da <WritePosEx+0x3a>
	{
		Position = -Position;
 800d7c6:	88bb      	ldrh	r3, [r7, #4]
 800d7c8:	425b      	negs	r3, r3
 800d7ca:	b29b      	uxth	r3, r3
 800d7cc:	80bb      	strh	r3, [r7, #4]
		Position |= (1 << 15);
 800d7ce:	88bb      	ldrh	r3, [r7, #4]
 800d7d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d7d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d7d8:	80bb      	strh	r3, [r7, #4]
	}

	bBuf[0] = ACC;
 800d7da:	79bb      	ldrb	r3, [r7, #6]
 800d7dc:	723b      	strb	r3, [r7, #8]
	Host2SCS(bBuf + 1, bBuf + 2, Position);
 800d7de:	f107 0308 	add.w	r3, r7, #8
 800d7e2:	3301      	adds	r3, #1
 800d7e4:	f107 0108 	add.w	r1, r7, #8
 800d7e8:	3102      	adds	r1, #2
 800d7ea:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800d7ee:	4618      	mov	r0, r3
 800d7f0:	f7ff fe18 	bl	800d424 <Host2SCS>
	Host2SCS(bBuf + 3, bBuf + 4, 0);
 800d7f4:	f107 0308 	add.w	r3, r7, #8
 800d7f8:	3303      	adds	r3, #3
 800d7fa:	f107 0108 	add.w	r1, r7, #8
 800d7fe:	3104      	adds	r1, #4
 800d800:	2200      	movs	r2, #0
 800d802:	4618      	mov	r0, r3
 800d804:	f7ff fe0e 	bl	800d424 <Host2SCS>
	Host2SCS(bBuf + 5, bBuf + 6, Speed);
 800d808:	f107 0308 	add.w	r3, r7, #8
 800d80c:	3305      	adds	r3, #5
 800d80e:	f107 0108 	add.w	r1, r7, #8
 800d812:	3106      	adds	r1, #6
 800d814:	887a      	ldrh	r2, [r7, #2]
 800d816:	4618      	mov	r0, r3
 800d818:	f7ff fe04 	bl	800d424 <Host2SCS>

	return genWrite(ID, SMS_STS_ACC, bBuf, 7);
 800d81c:	f107 0208 	add.w	r2, r7, #8
 800d820:	79f8      	ldrb	r0, [r7, #7]
 800d822:	2307      	movs	r3, #7
 800d824:	2129      	movs	r1, #41	@ 0x29
 800d826:	f7ff fe8b 	bl	800d540 <genWrite>
 800d82a:	4603      	mov	r3, r0
}
 800d82c:	4618      	mov	r0, r3
 800d82e:	3714      	adds	r7, #20
 800d830:	46bd      	mov	sp, r7
 800d832:	bd90      	pop	{r4, r7, pc}

0800d834 <Action_Show>:
extern float x;
extern float y;
extern int colour;
extern char Point_Flag;

void Action_Show(void) {
 800d834:	b580      	push	{r7, lr}
 800d836:	af00      	add	r7, sp, #0
	sprintf(Z_str, "%.2f", zangle);
 800d838:	4b30      	ldr	r3, [pc, #192]	@ (800d8fc <Action_Show+0xc8>)
 800d83a:	edd3 7a00 	vldr	s15, [r3]
 800d83e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800d842:	ec53 2b17 	vmov	r2, r3, d7
 800d846:	492e      	ldr	r1, [pc, #184]	@ (800d900 <Action_Show+0xcc>)
 800d848:	482e      	ldr	r0, [pc, #184]	@ (800d904 <Action_Show+0xd0>)
 800d84a:	f001 ff67 	bl	800f71c <siprintf>
	sprintf(X_srt, "%.2f", pos_x);
 800d84e:	4b2e      	ldr	r3, [pc, #184]	@ (800d908 <Action_Show+0xd4>)
 800d850:	edd3 7a00 	vldr	s15, [r3]
 800d854:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800d858:	ec53 2b17 	vmov	r2, r3, d7
 800d85c:	4928      	ldr	r1, [pc, #160]	@ (800d900 <Action_Show+0xcc>)
 800d85e:	482b      	ldr	r0, [pc, #172]	@ (800d90c <Action_Show+0xd8>)
 800d860:	f001 ff5c 	bl	800f71c <siprintf>
	sprintf(Y_srt, "%.2f", pos_y);
 800d864:	4b2a      	ldr	r3, [pc, #168]	@ (800d910 <Action_Show+0xdc>)
 800d866:	edd3 7a00 	vldr	s15, [r3]
 800d86a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800d86e:	ec53 2b17 	vmov	r2, r3, d7
 800d872:	4923      	ldr	r1, [pc, #140]	@ (800d900 <Action_Show+0xcc>)
 800d874:	4827      	ldr	r0, [pc, #156]	@ (800d914 <Action_Show+0xe0>)
 800d876:	f001 ff51 	bl	800f71c <siprintf>
	HAL_UART_Transmit(&huart4, (uint8_t*) "Z_Angle.txt=\"",
 800d87a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d87e:	220d      	movs	r2, #13
 800d880:	4925      	ldr	r1, [pc, #148]	@ (800d918 <Action_Show+0xe4>)
 800d882:	4826      	ldr	r0, [pc, #152]	@ (800d91c <Action_Show+0xe8>)
 800d884:	f7fb fa7c 	bl	8008d80 <HAL_UART_Transmit>
			sizeof("Z_Angle.txt=\"") - 1, 0xffff);
	HAL_UART_Transmit(&huart4, (uint8_t*) Z_str, sizeof(X_srt) - 1, 0xffff);
 800d888:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d88c:	2213      	movs	r2, #19
 800d88e:	491d      	ldr	r1, [pc, #116]	@ (800d904 <Action_Show+0xd0>)
 800d890:	4822      	ldr	r0, [pc, #136]	@ (800d91c <Action_Show+0xe8>)
 800d892:	f7fb fa75 	bl	8008d80 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart4, (uint8_t*) "\"\xff\xff\xff",
 800d896:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d89a:	2204      	movs	r2, #4
 800d89c:	4920      	ldr	r1, [pc, #128]	@ (800d920 <Action_Show+0xec>)
 800d89e:	481f      	ldr	r0, [pc, #124]	@ (800d91c <Action_Show+0xe8>)
 800d8a0:	f7fb fa6e 	bl	8008d80 <HAL_UART_Transmit>
			sizeof("\"\xff\xff\xff") - 1, 0xffff);

	HAL_UART_Transmit(&huart4, (uint8_t*) "X_Point.txt=\"",
 800d8a4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d8a8:	220d      	movs	r2, #13
 800d8aa:	491e      	ldr	r1, [pc, #120]	@ (800d924 <Action_Show+0xf0>)
 800d8ac:	481b      	ldr	r0, [pc, #108]	@ (800d91c <Action_Show+0xe8>)
 800d8ae:	f7fb fa67 	bl	8008d80 <HAL_UART_Transmit>
			sizeof("X_Point.txt=\"") - 1, 0xffff);
	HAL_UART_Transmit(&huart4, (uint8_t*) X_srt, sizeof(X_srt) - 1, 0xffff);
 800d8b2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d8b6:	2213      	movs	r2, #19
 800d8b8:	4914      	ldr	r1, [pc, #80]	@ (800d90c <Action_Show+0xd8>)
 800d8ba:	4818      	ldr	r0, [pc, #96]	@ (800d91c <Action_Show+0xe8>)
 800d8bc:	f7fb fa60 	bl	8008d80 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart4, (uint8_t*) "\"\xff\xff\xff",
 800d8c0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d8c4:	2204      	movs	r2, #4
 800d8c6:	4916      	ldr	r1, [pc, #88]	@ (800d920 <Action_Show+0xec>)
 800d8c8:	4814      	ldr	r0, [pc, #80]	@ (800d91c <Action_Show+0xe8>)
 800d8ca:	f7fb fa59 	bl	8008d80 <HAL_UART_Transmit>
			sizeof("\"\xff\xff\xff") - 1, 0xffff);

	HAL_UART_Transmit(&huart4, (uint8_t*) "Y_Point.txt=\"",
 800d8ce:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d8d2:	220d      	movs	r2, #13
 800d8d4:	4914      	ldr	r1, [pc, #80]	@ (800d928 <Action_Show+0xf4>)
 800d8d6:	4811      	ldr	r0, [pc, #68]	@ (800d91c <Action_Show+0xe8>)
 800d8d8:	f7fb fa52 	bl	8008d80 <HAL_UART_Transmit>
			sizeof("Y_Point.txt=\"") - 1, 0xffff);
	HAL_UART_Transmit(&huart4, (uint8_t*) Y_srt, sizeof(X_srt) - 1, 0xffff);
 800d8dc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d8e0:	2213      	movs	r2, #19
 800d8e2:	490c      	ldr	r1, [pc, #48]	@ (800d914 <Action_Show+0xe0>)
 800d8e4:	480d      	ldr	r0, [pc, #52]	@ (800d91c <Action_Show+0xe8>)
 800d8e6:	f7fb fa4b 	bl	8008d80 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart4, (uint8_t*) "\"\xff\xff\xff",
 800d8ea:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d8ee:	2204      	movs	r2, #4
 800d8f0:	490b      	ldr	r1, [pc, #44]	@ (800d920 <Action_Show+0xec>)
 800d8f2:	480a      	ldr	r0, [pc, #40]	@ (800d91c <Action_Show+0xe8>)
 800d8f4:	f7fb fa44 	bl	8008d80 <HAL_UART_Transmit>
			sizeof("\"\xff\xff\xff") - 1, 0xffff);
}
 800d8f8:	bf00      	nop
 800d8fa:	bd80      	pop	{r7, pc}
 800d8fc:	24000af8 	.word	0x24000af8
 800d900:	08012cd4 	.word	0x08012cd4
 800d904:	24000cb0 	.word	0x24000cb0
 800d908:	24000af0 	.word	0x24000af0
 800d90c:	24000cb8 	.word	0x24000cb8
 800d910:	24000af4 	.word	0x24000af4
 800d914:	24000ccc 	.word	0x24000ccc
 800d918:	08012cdc 	.word	0x08012cdc
 800d91c:	240005b8 	.word	0x240005b8
 800d920:	08012cec 	.word	0x08012cec
 800d924:	08012cf4 	.word	0x08012cf4
 800d928:	08012d04 	.word	0x08012d04

0800d92c <QR_Show>:
//extern int QR_data[6];
void QR_Show(void) {
 800d92c:	b580      	push	{r7, lr}
 800d92e:	af00      	add	r7, sp, #0
//	HAL_UART_Transmit(&huart4, (uint8_t*) Y_pid, sizeof(Y_pid) - 1, 0xffff);
//	HAL_UART_Transmit(&huart4, (uint8_t*) "\"\xff\xff\xff",
//			sizeof("\"\xff\xff\xff") - 1, 0xffff);
//	HAL_Delay(20);

	 HAL_UART_Transmit(&huart4, (uint8_t*) "QR.txt=\"", sizeof("QR.txt=\"") - 1, 0xffff);
 800d930:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d934:	2208      	movs	r2, #8
 800d936:	490a      	ldr	r1, [pc, #40]	@ (800d960 <QR_Show+0x34>)
 800d938:	480a      	ldr	r0, [pc, #40]	@ (800d964 <QR_Show+0x38>)
 800d93a:	f7fb fa21 	bl	8008d80 <HAL_UART_Transmit>
	 HAL_UART_Transmit(&huart4, (uint8_t*) QR_data, sizeof(QR_data) - 1, 0xffff);
 800d93e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d942:	2205      	movs	r2, #5
 800d944:	4908      	ldr	r1, [pc, #32]	@ (800d968 <QR_Show+0x3c>)
 800d946:	4807      	ldr	r0, [pc, #28]	@ (800d964 <QR_Show+0x38>)
 800d948:	f7fb fa1a 	bl	8008d80 <HAL_UART_Transmit>
	 HAL_UART_Transmit(&huart4, (uint8_t*) "\"\xff\xff\xff", sizeof("\"\xff\xff\xff") - 1, 0xffff);
 800d94c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d950:	2204      	movs	r2, #4
 800d952:	4906      	ldr	r1, [pc, #24]	@ (800d96c <QR_Show+0x40>)
 800d954:	4803      	ldr	r0, [pc, #12]	@ (800d964 <QR_Show+0x38>)
 800d956:	f7fb fa13 	bl	8008d80 <HAL_UART_Transmit>

}
 800d95a:	bf00      	nop
 800d95c:	bd80      	pop	{r7, pc}
 800d95e:	bf00      	nop
 800d960:	08012d14 	.word	0x08012d14
 800d964:	240005b8 	.word	0x240005b8
 800d968:	24000000 	.word	0x24000000
 800d96c:	08012cec 	.word	0x08012cec

0800d970 <Point_Show>:
extern char Check_flag;
// 借用一下屏幕上的识别物料颜色，查看flag系统标志位
extern uint16_t flag;

// TODO：屏幕缺失字符"+",暂时判断为编码格式问题，需要通过串口助手确定编码格式
void Point_Show(void) {
 800d970:	b580      	push	{r7, lr}
 800d972:	af00      	add	r7, sp, #0
////		TX2点位数据还未接收，结束该函数
//		return ;
//	}
//	Point_Flag = 0;
//	在抓取过程中,进行颜色校验，如果颜色与抓取目标颜色不同，则放弃该帧数据，并传递放弃稳定性计算标志位
	if(Match_Flag != colour)
 800d974:	4b32      	ldr	r3, [pc, #200]	@ (800da40 <Point_Show+0xd0>)
 800d976:	781b      	ldrb	r3, [r3, #0]
 800d978:	461a      	mov	r2, r3
 800d97a:	4b32      	ldr	r3, [pc, #200]	@ (800da44 <Point_Show+0xd4>)
 800d97c:	681b      	ldr	r3, [r3, #0]
 800d97e:	429a      	cmp	r2, r3
 800d980:	d003      	beq.n	800d98a <Point_Show+0x1a>
		Check_flag = 0;
 800d982:	4b31      	ldr	r3, [pc, #196]	@ (800da48 <Point_Show+0xd8>)
 800d984:	2200      	movs	r2, #0
 800d986:	701a      	strb	r2, [r3, #0]
 800d988:	e002      	b.n	800d990 <Point_Show+0x20>
	else
		Check_flag = 1;
 800d98a:	4b2f      	ldr	r3, [pc, #188]	@ (800da48 <Point_Show+0xd8>)
 800d98c:	2201      	movs	r2, #1
 800d98e:	701a      	strb	r2, [r3, #0]
	sprintf(TX2_X_Point, "%.2f", x);
 800d990:	4b2e      	ldr	r3, [pc, #184]	@ (800da4c <Point_Show+0xdc>)
 800d992:	edd3 7a00 	vldr	s15, [r3]
 800d996:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800d99a:	ec53 2b17 	vmov	r2, r3, d7
 800d99e:	492c      	ldr	r1, [pc, #176]	@ (800da50 <Point_Show+0xe0>)
 800d9a0:	482c      	ldr	r0, [pc, #176]	@ (800da54 <Point_Show+0xe4>)
 800d9a2:	f001 febb 	bl	800f71c <siprintf>
	sprintf(TX2_Y_Point, "%.2f", y);
 800d9a6:	4b2c      	ldr	r3, [pc, #176]	@ (800da58 <Point_Show+0xe8>)
 800d9a8:	edd3 7a00 	vldr	s15, [r3]
 800d9ac:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800d9b0:	ec53 2b17 	vmov	r2, r3, d7
 800d9b4:	4926      	ldr	r1, [pc, #152]	@ (800da50 <Point_Show+0xe0>)
 800d9b6:	4829      	ldr	r0, [pc, #164]	@ (800da5c <Point_Show+0xec>)
 800d9b8:	f001 feb0 	bl	800f71c <siprintf>
	sprintf(TX2_Color, "%d", flag);
 800d9bc:	4b28      	ldr	r3, [pc, #160]	@ (800da60 <Point_Show+0xf0>)
 800d9be:	881b      	ldrh	r3, [r3, #0]
 800d9c0:	461a      	mov	r2, r3
 800d9c2:	4928      	ldr	r1, [pc, #160]	@ (800da64 <Point_Show+0xf4>)
 800d9c4:	4828      	ldr	r0, [pc, #160]	@ (800da68 <Point_Show+0xf8>)
 800d9c6:	f001 fea9 	bl	800f71c <siprintf>
//	开始发送一帧点位数据
	HAL_UART_Transmit(&huart4, (uint8_t*) "Point.txt=\"",sizeof("Point.txt=\"") - 1, 0xffff);
 800d9ca:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d9ce:	220b      	movs	r2, #11
 800d9d0:	4926      	ldr	r1, [pc, #152]	@ (800da6c <Point_Show+0xfc>)
 800d9d2:	4827      	ldr	r0, [pc, #156]	@ (800da70 <Point_Show+0x100>)
 800d9d4:	f7fb f9d4 	bl	8008d80 <HAL_UART_Transmit>
//	if(Choke_Flag == true)
//		HAL_UART_Transmit(&huart4, (uint8_t*) "true", sizeof("true") - 2, 0xffff);
//	else
//		HAL_UART_Transmit(&huart4, (uint8_t*) "false", sizeof("false") - 2, 0xffff);
	HAL_UART_Transmit(&huart4, (uint8_t*) TX2_X_Point, sizeof(TX2_X_Point) - 2, 0xffff);
 800d9d8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d9dc:	2206      	movs	r2, #6
 800d9de:	491d      	ldr	r1, [pc, #116]	@ (800da54 <Point_Show+0xe4>)
 800d9e0:	4823      	ldr	r0, [pc, #140]	@ (800da70 <Point_Show+0x100>)
 800d9e2:	f7fb f9cd 	bl	8008d80 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart4, (uint8_t*) "+", sizeof("+")-2, 0xffff);
 800d9e6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d9ea:	2200      	movs	r2, #0
 800d9ec:	4921      	ldr	r1, [pc, #132]	@ (800da74 <Point_Show+0x104>)
 800d9ee:	4820      	ldr	r0, [pc, #128]	@ (800da70 <Point_Show+0x100>)
 800d9f0:	f7fb f9c6 	bl	8008d80 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart4, (uint8_t*) TX2_Y_Point, sizeof(TX2_Y_Point) - 1, 0xffff);
 800d9f4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d9f8:	2207      	movs	r2, #7
 800d9fa:	4918      	ldr	r1, [pc, #96]	@ (800da5c <Point_Show+0xec>)
 800d9fc:	481c      	ldr	r0, [pc, #112]	@ (800da70 <Point_Show+0x100>)
 800d9fe:	f7fb f9bf 	bl	8008d80 <HAL_UART_Transmit>
//	结束发送一帧点位数据
	HAL_UART_Transmit(&huart4, (uint8_t*) "\"\xff\xff\xff",sizeof("\"\xff\xff\xff") - 1, 0xffff);
 800da02:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800da06:	2204      	movs	r2, #4
 800da08:	491b      	ldr	r1, [pc, #108]	@ (800da78 <Point_Show+0x108>)
 800da0a:	4819      	ldr	r0, [pc, #100]	@ (800da70 <Point_Show+0x100>)
 800da0c:	f7fb f9b8 	bl	8008d80 <HAL_UART_Transmit>

//	开始发送一帧颜色数据
	HAL_UART_Transmit(&huart4, (uint8_t*) "Color.txt=\"",sizeof("Color.txt=\"") - 1, 0xffff);
 800da10:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800da14:	220b      	movs	r2, #11
 800da16:	4919      	ldr	r1, [pc, #100]	@ (800da7c <Point_Show+0x10c>)
 800da18:	4815      	ldr	r0, [pc, #84]	@ (800da70 <Point_Show+0x100>)
 800da1a:	f7fb f9b1 	bl	8008d80 <HAL_UART_Transmit>

	HAL_UART_Transmit(&huart4, (uint8_t*) TX2_Color, sizeof(TX2_Color)-1 , 0xffff);
 800da1e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800da22:	2201      	movs	r2, #1
 800da24:	4910      	ldr	r1, [pc, #64]	@ (800da68 <Point_Show+0xf8>)
 800da26:	4812      	ldr	r0, [pc, #72]	@ (800da70 <Point_Show+0x100>)
 800da28:	f7fb f9aa 	bl	8008d80 <HAL_UART_Transmit>

//	结束发送一帧颜色数据
	HAL_UART_Transmit(&huart4, (uint8_t*) "\"\xff\xff\xff",sizeof("\"\xff\xff\xff") - 1, 0xffff);
 800da2c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800da30:	2204      	movs	r2, #4
 800da32:	4911      	ldr	r1, [pc, #68]	@ (800da78 <Point_Show+0x108>)
 800da34:	480e      	ldr	r0, [pc, #56]	@ (800da70 <Point_Show+0x100>)
 800da36:	f7fb f9a3 	bl	8008d80 <HAL_UART_Transmit>
}
 800da3a:	bf00      	nop
 800da3c:	bd80      	pop	{r7, pc}
 800da3e:	bf00      	nop
 800da40:	24000481 	.word	0x24000481
 800da44:	24000478 	.word	0x24000478
 800da48:	24000482 	.word	0x24000482
 800da4c:	2400046c 	.word	0x2400046c
 800da50:	08012cd4 	.word	0x08012cd4
 800da54:	24000ce0 	.word	0x24000ce0
 800da58:	24000470 	.word	0x24000470
 800da5c:	24000ce8 	.word	0x24000ce8
 800da60:	24000476 	.word	0x24000476
 800da64:	08012d20 	.word	0x08012d20
 800da68:	24000cf0 	.word	0x24000cf0
 800da6c:	08012d24 	.word	0x08012d24
 800da70:	240005b8 	.word	0x240005b8
 800da74:	08012d30 	.word	0x08012d30
 800da78:	08012cec 	.word	0x08012cec
 800da7c:	08012d34 	.word	0x08012d34

0800da80 <Check_Flag>:

void Check_Flag(uint8_t rec) {
 800da80:	b480      	push	{r7}
 800da82:	b083      	sub	sp, #12
 800da84:	af00      	add	r7, sp, #0
 800da86:	4603      	mov	r3, r0
 800da88:	71fb      	strb	r3, [r7, #7]
	static uint8_t ch;
	static uint8_t count = 0;

	ch = rec;
 800da8a:	4a45      	ldr	r2, [pc, #276]	@ (800dba0 <Check_Flag+0x120>)
 800da8c:	79fb      	ldrb	r3, [r7, #7]
 800da8e:	7013      	strb	r3, [r2, #0]

	switch (count) {
 800da90:	4b44      	ldr	r3, [pc, #272]	@ (800dba4 <Check_Flag+0x124>)
 800da92:	781b      	ldrb	r3, [r3, #0]
 800da94:	2b05      	cmp	r3, #5
 800da96:	d876      	bhi.n	800db86 <Check_Flag+0x106>
 800da98:	a201      	add	r2, pc, #4	@ (adr r2, 800daa0 <Check_Flag+0x20>)
 800da9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da9e:	bf00      	nop
 800daa0:	0800dab9 	.word	0x0800dab9
 800daa4:	0800daf1 	.word	0x0800daf1
 800daa8:	0800db17 	.word	0x0800db17
 800daac:	0800db35 	.word	0x0800db35
 800dab0:	0800db53 	.word	0x0800db53
 800dab4:	0800db71 	.word	0x0800db71
	case 0:
		if (ch == 'G')
 800dab8:	4b39      	ldr	r3, [pc, #228]	@ (800dba0 <Check_Flag+0x120>)
 800daba:	781b      	ldrb	r3, [r3, #0]
 800dabc:	2b47      	cmp	r3, #71	@ 0x47
 800dabe:	d103      	bne.n	800dac8 <Check_Flag+0x48>
			count = 1;
 800dac0:	4b38      	ldr	r3, [pc, #224]	@ (800dba4 <Check_Flag+0x124>)
 800dac2:	2201      	movs	r2, #1
 800dac4:	701a      	strb	r2, [r3, #0]
			count = 2;
		else if (ch == 'M')
			count = 4;
		else
			count = 0;
		break;
 800dac6:	e065      	b.n	800db94 <Check_Flag+0x114>
		else if (ch == 'R')
 800dac8:	4b35      	ldr	r3, [pc, #212]	@ (800dba0 <Check_Flag+0x120>)
 800daca:	781b      	ldrb	r3, [r3, #0]
 800dacc:	2b52      	cmp	r3, #82	@ 0x52
 800dace:	d103      	bne.n	800dad8 <Check_Flag+0x58>
			count = 2;
 800dad0:	4b34      	ldr	r3, [pc, #208]	@ (800dba4 <Check_Flag+0x124>)
 800dad2:	2202      	movs	r2, #2
 800dad4:	701a      	strb	r2, [r3, #0]
		break;
 800dad6:	e05d      	b.n	800db94 <Check_Flag+0x114>
		else if (ch == 'M')
 800dad8:	4b31      	ldr	r3, [pc, #196]	@ (800dba0 <Check_Flag+0x120>)
 800dada:	781b      	ldrb	r3, [r3, #0]
 800dadc:	2b4d      	cmp	r3, #77	@ 0x4d
 800dade:	d103      	bne.n	800dae8 <Check_Flag+0x68>
			count = 4;
 800dae0:	4b30      	ldr	r3, [pc, #192]	@ (800dba4 <Check_Flag+0x124>)
 800dae2:	2204      	movs	r2, #4
 800dae4:	701a      	strb	r2, [r3, #0]
		break;
 800dae6:	e055      	b.n	800db94 <Check_Flag+0x114>
			count = 0;
 800dae8:	4b2e      	ldr	r3, [pc, #184]	@ (800dba4 <Check_Flag+0x124>)
 800daea:	2200      	movs	r2, #0
 800daec:	701a      	strb	r2, [r3, #0]
		break;
 800daee:	e051      	b.n	800db94 <Check_Flag+0x114>
	case 1:
		if (ch == 'o') {
 800daf0:	4b2b      	ldr	r3, [pc, #172]	@ (800dba0 <Check_Flag+0x120>)
 800daf2:	781b      	ldrb	r3, [r3, #0]
 800daf4:	2b6f      	cmp	r3, #111	@ 0x6f
 800daf6:	d106      	bne.n	800db06 <Check_Flag+0x86>
			System_Flag = 1;
 800daf8:	4b2b      	ldr	r3, [pc, #172]	@ (800dba8 <Check_Flag+0x128>)
 800dafa:	2201      	movs	r2, #1
 800dafc:	701a      	strb	r2, [r3, #0]
			count = 0;
 800dafe:	4b29      	ldr	r3, [pc, #164]	@ (800dba4 <Check_Flag+0x124>)
 800db00:	2200      	movs	r2, #0
 800db02:	701a      	strb	r2, [r3, #0]
		} else if (ch == 'G')
			;
		else
			count = 0;
		break;
 800db04:	e043      	b.n	800db8e <Check_Flag+0x10e>
		} else if (ch == 'G')
 800db06:	4b26      	ldr	r3, [pc, #152]	@ (800dba0 <Check_Flag+0x120>)
 800db08:	781b      	ldrb	r3, [r3, #0]
 800db0a:	2b47      	cmp	r3, #71	@ 0x47
 800db0c:	d03f      	beq.n	800db8e <Check_Flag+0x10e>
			count = 0;
 800db0e:	4b25      	ldr	r3, [pc, #148]	@ (800dba4 <Check_Flag+0x124>)
 800db10:	2200      	movs	r2, #0
 800db12:	701a      	strb	r2, [r3, #0]
		break;
 800db14:	e03b      	b.n	800db8e <Check_Flag+0x10e>
	case 2:
//		此处用于判断是否进入准备模式，调整车身姿态
		if (ch == 'e')
 800db16:	4b22      	ldr	r3, [pc, #136]	@ (800dba0 <Check_Flag+0x120>)
 800db18:	781b      	ldrb	r3, [r3, #0]
 800db1a:	2b65      	cmp	r3, #101	@ 0x65
 800db1c:	d106      	bne.n	800db2c <Check_Flag+0xac>
			count++;
 800db1e:	4b21      	ldr	r3, [pc, #132]	@ (800dba4 <Check_Flag+0x124>)
 800db20:	781b      	ldrb	r3, [r3, #0]
 800db22:	3301      	adds	r3, #1
 800db24:	b2da      	uxtb	r2, r3
 800db26:	4b1f      	ldr	r3, [pc, #124]	@ (800dba4 <Check_Flag+0x124>)
 800db28:	701a      	strb	r2, [r3, #0]
		else
			count = 0;
		break;
 800db2a:	e033      	b.n	800db94 <Check_Flag+0x114>
			count = 0;
 800db2c:	4b1d      	ldr	r3, [pc, #116]	@ (800dba4 <Check_Flag+0x124>)
 800db2e:	2200      	movs	r2, #0
 800db30:	701a      	strb	r2, [r3, #0]
		break;
 800db32:	e02f      	b.n	800db94 <Check_Flag+0x114>
	case 3:
		if (ch == 'a') {
 800db34:	4b1a      	ldr	r3, [pc, #104]	@ (800dba0 <Check_Flag+0x120>)
 800db36:	781b      	ldrb	r3, [r3, #0]
 800db38:	2b61      	cmp	r3, #97	@ 0x61
 800db3a:	d106      	bne.n	800db4a <Check_Flag+0xca>
			Ready_Flag = 1;
 800db3c:	4b1b      	ldr	r3, [pc, #108]	@ (800dbac <Check_Flag+0x12c>)
 800db3e:	2201      	movs	r2, #1
 800db40:	701a      	strb	r2, [r3, #0]
			count = 0;
 800db42:	4b18      	ldr	r3, [pc, #96]	@ (800dba4 <Check_Flag+0x124>)
 800db44:	2200      	movs	r2, #0
 800db46:	701a      	strb	r2, [r3, #0]
		} else
			count = 0;
		break;
 800db48:	e024      	b.n	800db94 <Check_Flag+0x114>
			count = 0;
 800db4a:	4b16      	ldr	r3, [pc, #88]	@ (800dba4 <Check_Flag+0x124>)
 800db4c:	2200      	movs	r2, #0
 800db4e:	701a      	strb	r2, [r3, #0]
		break;
 800db50:	e020      	b.n	800db94 <Check_Flag+0x114>
	case 4:
		if (ch == 'a')
 800db52:	4b13      	ldr	r3, [pc, #76]	@ (800dba0 <Check_Flag+0x120>)
 800db54:	781b      	ldrb	r3, [r3, #0]
 800db56:	2b61      	cmp	r3, #97	@ 0x61
 800db58:	d106      	bne.n	800db68 <Check_Flag+0xe8>
			count++;
 800db5a:	4b12      	ldr	r3, [pc, #72]	@ (800dba4 <Check_Flag+0x124>)
 800db5c:	781b      	ldrb	r3, [r3, #0]
 800db5e:	3301      	adds	r3, #1
 800db60:	b2da      	uxtb	r2, r3
 800db62:	4b10      	ldr	r3, [pc, #64]	@ (800dba4 <Check_Flag+0x124>)
 800db64:	701a      	strb	r2, [r3, #0]
		else
			count = 0;
		break;
 800db66:	e015      	b.n	800db94 <Check_Flag+0x114>
			count = 0;
 800db68:	4b0e      	ldr	r3, [pc, #56]	@ (800dba4 <Check_Flag+0x124>)
 800db6a:	2200      	movs	r2, #0
 800db6c:	701a      	strb	r2, [r3, #0]
		break;
 800db6e:	e011      	b.n	800db94 <Check_Flag+0x114>
	case 5:
		if (ch == 't') {
 800db70:	4b0b      	ldr	r3, [pc, #44]	@ (800dba0 <Check_Flag+0x120>)
 800db72:	781b      	ldrb	r3, [r3, #0]
 800db74:	2b74      	cmp	r3, #116	@ 0x74
 800db76:	d10c      	bne.n	800db92 <Check_Flag+0x112>
			System_Flag = 1;
 800db78:	4b0b      	ldr	r3, [pc, #44]	@ (800dba8 <Check_Flag+0x128>)
 800db7a:	2201      	movs	r2, #1
 800db7c:	701a      	strb	r2, [r3, #0]
			count = 0;
 800db7e:	4b09      	ldr	r3, [pc, #36]	@ (800dba4 <Check_Flag+0x124>)
 800db80:	2200      	movs	r2, #0
 800db82:	701a      	strb	r2, [r3, #0]
		}
		break;
 800db84:	e005      	b.n	800db92 <Check_Flag+0x112>
	default:
		count = 0;
 800db86:	4b07      	ldr	r3, [pc, #28]	@ (800dba4 <Check_Flag+0x124>)
 800db88:	2200      	movs	r2, #0
 800db8a:	701a      	strb	r2, [r3, #0]
		break;
 800db8c:	e002      	b.n	800db94 <Check_Flag+0x114>
		break;
 800db8e:	bf00      	nop
 800db90:	e000      	b.n	800db94 <Check_Flag+0x114>
		break;
 800db92:	bf00      	nop
	}

}
 800db94:	bf00      	nop
 800db96:	370c      	adds	r7, #12
 800db98:	46bd      	mov	sp, r7
 800db9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db9e:	4770      	bx	lr
 800dba0:	24000cf4 	.word	0x24000cf4
 800dba4:	24000cf5 	.word	0x24000cf5
 800dba8:	24000cf2 	.word	0x24000cf2
 800dbac:	24000cf3 	.word	0x24000cf3

0800dbb0 <Check_Status>:
	首先，在步进电机上电以后，需要进行调零，找到一个零位用来确定后面一切操作的参考点，因此5号步进电机设置为上电回零
	但是在比赛过程中，要求车身及其垂直投影部分在未发车前全部处于发车区域，这就要求爪子在发车前是在车体内侧的，同时爪子不能处于太高处，否则违规
	因此在Check_Status()函数用于在回零操作已完成后进行调整，以满足发车条件，
*/
uint8_t Check_Status(void)
{
 800dbb0:	b580      	push	{r7, lr}
 800dbb2:	af00      	add	r7, sp, #0
//  首先控制步进电机,回到零点
	Drop_Location_jiang(200, 120, 0);
 800dbb4:	2200      	movs	r2, #0
 800dbb6:	2178      	movs	r1, #120	@ 0x78
 800dbb8:	20c8      	movs	r0, #200	@ 0xc8
 800dbba:	f7fe fe97 	bl	800c8ec <Drop_Location_jiang>
	Move_Arm(1, 50, 300);
 800dbbe:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800dbc2:	2132      	movs	r1, #50	@ 0x32
 800dbc4:	2001      	movs	r0, #1
 800dbc6:	f7fd ff2f 	bl	800ba28 <Move_Arm>
//  6号舵机900
	Move_Arm(6, 900, 300);
 800dbca:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800dbce:	f44f 7161 	mov.w	r1, #900	@ 0x384
 800dbd2:	2006      	movs	r0, #6
 800dbd4:	f7fd ff28 	bl	800ba28 <Move_Arm>
//  旋转物料结构的支撑舵机
	FT_Servo_Zero(0);
 800dbd8:	2000      	movs	r0, #0
 800dbda:	f000 f80c 	bl	800dbf6 <FT_Servo_Zero>
//  旋转爪子结构的支撑舵机
	FT_Servo_Zero(1);
 800dbde:	2001      	movs	r0, #1
 800dbe0:	f000 f809 	bl	800dbf6 <FT_Servo_Zero>
//  步进电机下降,将位置调整为最最低点
	Drop_Location_jiang(200, 120, 9000);
 800dbe4:	f242 3228 	movw	r2, #9000	@ 0x2328
 800dbe8:	2178      	movs	r1, #120	@ 0x78
 800dbea:	20c8      	movs	r0, #200	@ 0xc8
 800dbec:	f7fe fe7e 	bl	800c8ec <Drop_Location_jiang>
	return 1;
 800dbf0:	2301      	movs	r3, #1
}
 800dbf2:	4618      	mov	r0, r3
 800dbf4:	bd80      	pop	{r7, pc}

0800dbf6 <FT_Servo_Zero>:
	Move_Arm(1, 500, 300); 
}

// 将目标舵机回零
uint8_t FT_Servo_Zero(uint8_t Number)
{
 800dbf6:	b580      	push	{r7, lr}
 800dbf8:	b082      	sub	sp, #8
 800dbfa:	af00      	add	r7, sp, #0
 800dbfc:	4603      	mov	r3, r0
 800dbfe:	71fb      	strb	r3, [r7, #7]
	if(Number == 0)
 800dc00:	79fb      	ldrb	r3, [r7, #7]
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	d106      	bne.n	800dc14 <FT_Servo_Zero+0x1e>
		WritePosEx(0, 0, 0, 0);
 800dc06:	2300      	movs	r3, #0
 800dc08:	2200      	movs	r2, #0
 800dc0a:	2100      	movs	r1, #0
 800dc0c:	2000      	movs	r0, #0
 800dc0e:	f7ff fdc7 	bl	800d7a0 <WritePosEx>
 800dc12:	e009      	b.n	800dc28 <FT_Servo_Zero+0x32>
	else if (Number == 1)
 800dc14:	79fb      	ldrb	r3, [r7, #7]
 800dc16:	2b01      	cmp	r3, #1
 800dc18:	d106      	bne.n	800dc28 <FT_Servo_Zero+0x32>
		WritePosEx(1, 1020, 0, 0);
 800dc1a:	2300      	movs	r3, #0
 800dc1c:	2200      	movs	r2, #0
 800dc1e:	f44f 717f 	mov.w	r1, #1020	@ 0x3fc
 800dc22:	2001      	movs	r0, #1
 800dc24:	f7ff fdbc 	bl	800d7a0 <WritePosEx>
	return 1;
 800dc28:	2301      	movs	r3, #1
}
 800dc2a:	4618      	mov	r0, r3
 800dc2c:	3708      	adds	r7, #8
 800dc2e:	46bd      	mov	sp, r7
 800dc30:	bd80      	pop	{r7, pc}
	...

0800dc34 <malloc>:
 800dc34:	4b02      	ldr	r3, [pc, #8]	@ (800dc40 <malloc+0xc>)
 800dc36:	4601      	mov	r1, r0
 800dc38:	6818      	ldr	r0, [r3, #0]
 800dc3a:	f000 b825 	b.w	800dc88 <_malloc_r>
 800dc3e:	bf00      	nop
 800dc40:	240001dc 	.word	0x240001dc

0800dc44 <sbrk_aligned>:
 800dc44:	b570      	push	{r4, r5, r6, lr}
 800dc46:	4e0f      	ldr	r6, [pc, #60]	@ (800dc84 <sbrk_aligned+0x40>)
 800dc48:	460c      	mov	r4, r1
 800dc4a:	6831      	ldr	r1, [r6, #0]
 800dc4c:	4605      	mov	r5, r0
 800dc4e:	b911      	cbnz	r1, 800dc56 <sbrk_aligned+0x12>
 800dc50:	f001 fe52 	bl	800f8f8 <_sbrk_r>
 800dc54:	6030      	str	r0, [r6, #0]
 800dc56:	4621      	mov	r1, r4
 800dc58:	4628      	mov	r0, r5
 800dc5a:	f001 fe4d 	bl	800f8f8 <_sbrk_r>
 800dc5e:	1c43      	adds	r3, r0, #1
 800dc60:	d103      	bne.n	800dc6a <sbrk_aligned+0x26>
 800dc62:	f04f 34ff 	mov.w	r4, #4294967295
 800dc66:	4620      	mov	r0, r4
 800dc68:	bd70      	pop	{r4, r5, r6, pc}
 800dc6a:	1cc4      	adds	r4, r0, #3
 800dc6c:	f024 0403 	bic.w	r4, r4, #3
 800dc70:	42a0      	cmp	r0, r4
 800dc72:	d0f8      	beq.n	800dc66 <sbrk_aligned+0x22>
 800dc74:	1a21      	subs	r1, r4, r0
 800dc76:	4628      	mov	r0, r5
 800dc78:	f001 fe3e 	bl	800f8f8 <_sbrk_r>
 800dc7c:	3001      	adds	r0, #1
 800dc7e:	d1f2      	bne.n	800dc66 <sbrk_aligned+0x22>
 800dc80:	e7ef      	b.n	800dc62 <sbrk_aligned+0x1e>
 800dc82:	bf00      	nop
 800dc84:	24000cf8 	.word	0x24000cf8

0800dc88 <_malloc_r>:
 800dc88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dc8c:	1ccd      	adds	r5, r1, #3
 800dc8e:	f025 0503 	bic.w	r5, r5, #3
 800dc92:	3508      	adds	r5, #8
 800dc94:	2d0c      	cmp	r5, #12
 800dc96:	bf38      	it	cc
 800dc98:	250c      	movcc	r5, #12
 800dc9a:	2d00      	cmp	r5, #0
 800dc9c:	4606      	mov	r6, r0
 800dc9e:	db01      	blt.n	800dca4 <_malloc_r+0x1c>
 800dca0:	42a9      	cmp	r1, r5
 800dca2:	d904      	bls.n	800dcae <_malloc_r+0x26>
 800dca4:	230c      	movs	r3, #12
 800dca6:	6033      	str	r3, [r6, #0]
 800dca8:	2000      	movs	r0, #0
 800dcaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dcae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800dd84 <_malloc_r+0xfc>
 800dcb2:	f000 f869 	bl	800dd88 <__malloc_lock>
 800dcb6:	f8d8 3000 	ldr.w	r3, [r8]
 800dcba:	461c      	mov	r4, r3
 800dcbc:	bb44      	cbnz	r4, 800dd10 <_malloc_r+0x88>
 800dcbe:	4629      	mov	r1, r5
 800dcc0:	4630      	mov	r0, r6
 800dcc2:	f7ff ffbf 	bl	800dc44 <sbrk_aligned>
 800dcc6:	1c43      	adds	r3, r0, #1
 800dcc8:	4604      	mov	r4, r0
 800dcca:	d158      	bne.n	800dd7e <_malloc_r+0xf6>
 800dccc:	f8d8 4000 	ldr.w	r4, [r8]
 800dcd0:	4627      	mov	r7, r4
 800dcd2:	2f00      	cmp	r7, #0
 800dcd4:	d143      	bne.n	800dd5e <_malloc_r+0xd6>
 800dcd6:	2c00      	cmp	r4, #0
 800dcd8:	d04b      	beq.n	800dd72 <_malloc_r+0xea>
 800dcda:	6823      	ldr	r3, [r4, #0]
 800dcdc:	4639      	mov	r1, r7
 800dcde:	4630      	mov	r0, r6
 800dce0:	eb04 0903 	add.w	r9, r4, r3
 800dce4:	f001 fe08 	bl	800f8f8 <_sbrk_r>
 800dce8:	4581      	cmp	r9, r0
 800dcea:	d142      	bne.n	800dd72 <_malloc_r+0xea>
 800dcec:	6821      	ldr	r1, [r4, #0]
 800dcee:	1a6d      	subs	r5, r5, r1
 800dcf0:	4629      	mov	r1, r5
 800dcf2:	4630      	mov	r0, r6
 800dcf4:	f7ff ffa6 	bl	800dc44 <sbrk_aligned>
 800dcf8:	3001      	adds	r0, #1
 800dcfa:	d03a      	beq.n	800dd72 <_malloc_r+0xea>
 800dcfc:	6823      	ldr	r3, [r4, #0]
 800dcfe:	442b      	add	r3, r5
 800dd00:	6023      	str	r3, [r4, #0]
 800dd02:	f8d8 3000 	ldr.w	r3, [r8]
 800dd06:	685a      	ldr	r2, [r3, #4]
 800dd08:	bb62      	cbnz	r2, 800dd64 <_malloc_r+0xdc>
 800dd0a:	f8c8 7000 	str.w	r7, [r8]
 800dd0e:	e00f      	b.n	800dd30 <_malloc_r+0xa8>
 800dd10:	6822      	ldr	r2, [r4, #0]
 800dd12:	1b52      	subs	r2, r2, r5
 800dd14:	d420      	bmi.n	800dd58 <_malloc_r+0xd0>
 800dd16:	2a0b      	cmp	r2, #11
 800dd18:	d917      	bls.n	800dd4a <_malloc_r+0xc2>
 800dd1a:	1961      	adds	r1, r4, r5
 800dd1c:	42a3      	cmp	r3, r4
 800dd1e:	6025      	str	r5, [r4, #0]
 800dd20:	bf18      	it	ne
 800dd22:	6059      	strne	r1, [r3, #4]
 800dd24:	6863      	ldr	r3, [r4, #4]
 800dd26:	bf08      	it	eq
 800dd28:	f8c8 1000 	streq.w	r1, [r8]
 800dd2c:	5162      	str	r2, [r4, r5]
 800dd2e:	604b      	str	r3, [r1, #4]
 800dd30:	4630      	mov	r0, r6
 800dd32:	f000 f82f 	bl	800dd94 <__malloc_unlock>
 800dd36:	f104 000b 	add.w	r0, r4, #11
 800dd3a:	1d23      	adds	r3, r4, #4
 800dd3c:	f020 0007 	bic.w	r0, r0, #7
 800dd40:	1ac2      	subs	r2, r0, r3
 800dd42:	bf1c      	itt	ne
 800dd44:	1a1b      	subne	r3, r3, r0
 800dd46:	50a3      	strne	r3, [r4, r2]
 800dd48:	e7af      	b.n	800dcaa <_malloc_r+0x22>
 800dd4a:	6862      	ldr	r2, [r4, #4]
 800dd4c:	42a3      	cmp	r3, r4
 800dd4e:	bf0c      	ite	eq
 800dd50:	f8c8 2000 	streq.w	r2, [r8]
 800dd54:	605a      	strne	r2, [r3, #4]
 800dd56:	e7eb      	b.n	800dd30 <_malloc_r+0xa8>
 800dd58:	4623      	mov	r3, r4
 800dd5a:	6864      	ldr	r4, [r4, #4]
 800dd5c:	e7ae      	b.n	800dcbc <_malloc_r+0x34>
 800dd5e:	463c      	mov	r4, r7
 800dd60:	687f      	ldr	r7, [r7, #4]
 800dd62:	e7b6      	b.n	800dcd2 <_malloc_r+0x4a>
 800dd64:	461a      	mov	r2, r3
 800dd66:	685b      	ldr	r3, [r3, #4]
 800dd68:	42a3      	cmp	r3, r4
 800dd6a:	d1fb      	bne.n	800dd64 <_malloc_r+0xdc>
 800dd6c:	2300      	movs	r3, #0
 800dd6e:	6053      	str	r3, [r2, #4]
 800dd70:	e7de      	b.n	800dd30 <_malloc_r+0xa8>
 800dd72:	230c      	movs	r3, #12
 800dd74:	6033      	str	r3, [r6, #0]
 800dd76:	4630      	mov	r0, r6
 800dd78:	f000 f80c 	bl	800dd94 <__malloc_unlock>
 800dd7c:	e794      	b.n	800dca8 <_malloc_r+0x20>
 800dd7e:	6005      	str	r5, [r0, #0]
 800dd80:	e7d6      	b.n	800dd30 <_malloc_r+0xa8>
 800dd82:	bf00      	nop
 800dd84:	24000cfc 	.word	0x24000cfc

0800dd88 <__malloc_lock>:
 800dd88:	4801      	ldr	r0, [pc, #4]	@ (800dd90 <__malloc_lock+0x8>)
 800dd8a:	f001 be02 	b.w	800f992 <__retarget_lock_acquire_recursive>
 800dd8e:	bf00      	nop
 800dd90:	24000e40 	.word	0x24000e40

0800dd94 <__malloc_unlock>:
 800dd94:	4801      	ldr	r0, [pc, #4]	@ (800dd9c <__malloc_unlock+0x8>)
 800dd96:	f001 bdfd 	b.w	800f994 <__retarget_lock_release_recursive>
 800dd9a:	bf00      	nop
 800dd9c:	24000e40 	.word	0x24000e40

0800dda0 <sulp>:
 800dda0:	b570      	push	{r4, r5, r6, lr}
 800dda2:	4604      	mov	r4, r0
 800dda4:	460d      	mov	r5, r1
 800dda6:	4616      	mov	r6, r2
 800dda8:	ec45 4b10 	vmov	d0, r4, r5
 800ddac:	f003 fafc 	bl	80113a8 <__ulp>
 800ddb0:	b17e      	cbz	r6, 800ddd2 <sulp+0x32>
 800ddb2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800ddb6:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	dd09      	ble.n	800ddd2 <sulp+0x32>
 800ddbe:	051b      	lsls	r3, r3, #20
 800ddc0:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 800ddc4:	2000      	movs	r0, #0
 800ddc6:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 800ddca:	ec41 0b17 	vmov	d7, r0, r1
 800ddce:	ee20 0b07 	vmul.f64	d0, d0, d7
 800ddd2:	bd70      	pop	{r4, r5, r6, pc}
 800ddd4:	0000      	movs	r0, r0
	...

0800ddd8 <_strtod_l>:
 800ddd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dddc:	ed2d 8b0a 	vpush	{d8-d12}
 800dde0:	b097      	sub	sp, #92	@ 0x5c
 800dde2:	4688      	mov	r8, r1
 800dde4:	920e      	str	r2, [sp, #56]	@ 0x38
 800dde6:	2200      	movs	r2, #0
 800dde8:	9212      	str	r2, [sp, #72]	@ 0x48
 800ddea:	9005      	str	r0, [sp, #20]
 800ddec:	f04f 0a00 	mov.w	sl, #0
 800ddf0:	f04f 0b00 	mov.w	fp, #0
 800ddf4:	460a      	mov	r2, r1
 800ddf6:	9211      	str	r2, [sp, #68]	@ 0x44
 800ddf8:	7811      	ldrb	r1, [r2, #0]
 800ddfa:	292b      	cmp	r1, #43	@ 0x2b
 800ddfc:	d04c      	beq.n	800de98 <_strtod_l+0xc0>
 800ddfe:	d839      	bhi.n	800de74 <_strtod_l+0x9c>
 800de00:	290d      	cmp	r1, #13
 800de02:	d833      	bhi.n	800de6c <_strtod_l+0x94>
 800de04:	2908      	cmp	r1, #8
 800de06:	d833      	bhi.n	800de70 <_strtod_l+0x98>
 800de08:	2900      	cmp	r1, #0
 800de0a:	d03c      	beq.n	800de86 <_strtod_l+0xae>
 800de0c:	2200      	movs	r2, #0
 800de0e:	9208      	str	r2, [sp, #32]
 800de10:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 800de12:	782a      	ldrb	r2, [r5, #0]
 800de14:	2a30      	cmp	r2, #48	@ 0x30
 800de16:	f040 80b5 	bne.w	800df84 <_strtod_l+0x1ac>
 800de1a:	786a      	ldrb	r2, [r5, #1]
 800de1c:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800de20:	2a58      	cmp	r2, #88	@ 0x58
 800de22:	d170      	bne.n	800df06 <_strtod_l+0x12e>
 800de24:	9302      	str	r3, [sp, #8]
 800de26:	9b08      	ldr	r3, [sp, #32]
 800de28:	9301      	str	r3, [sp, #4]
 800de2a:	ab12      	add	r3, sp, #72	@ 0x48
 800de2c:	9300      	str	r3, [sp, #0]
 800de2e:	4a8b      	ldr	r2, [pc, #556]	@ (800e05c <_strtod_l+0x284>)
 800de30:	9805      	ldr	r0, [sp, #20]
 800de32:	ab13      	add	r3, sp, #76	@ 0x4c
 800de34:	a911      	add	r1, sp, #68	@ 0x44
 800de36:	f002 fc5f 	bl	80106f8 <__gethex>
 800de3a:	f010 060f 	ands.w	r6, r0, #15
 800de3e:	4604      	mov	r4, r0
 800de40:	d005      	beq.n	800de4e <_strtod_l+0x76>
 800de42:	2e06      	cmp	r6, #6
 800de44:	d12a      	bne.n	800de9c <_strtod_l+0xc4>
 800de46:	3501      	adds	r5, #1
 800de48:	2300      	movs	r3, #0
 800de4a:	9511      	str	r5, [sp, #68]	@ 0x44
 800de4c:	9308      	str	r3, [sp, #32]
 800de4e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800de50:	2b00      	cmp	r3, #0
 800de52:	f040 852f 	bne.w	800e8b4 <_strtod_l+0xadc>
 800de56:	9b08      	ldr	r3, [sp, #32]
 800de58:	ec4b ab10 	vmov	d0, sl, fp
 800de5c:	b1cb      	cbz	r3, 800de92 <_strtod_l+0xba>
 800de5e:	eeb1 0b40 	vneg.f64	d0, d0
 800de62:	b017      	add	sp, #92	@ 0x5c
 800de64:	ecbd 8b0a 	vpop	{d8-d12}
 800de68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de6c:	2920      	cmp	r1, #32
 800de6e:	d1cd      	bne.n	800de0c <_strtod_l+0x34>
 800de70:	3201      	adds	r2, #1
 800de72:	e7c0      	b.n	800ddf6 <_strtod_l+0x1e>
 800de74:	292d      	cmp	r1, #45	@ 0x2d
 800de76:	d1c9      	bne.n	800de0c <_strtod_l+0x34>
 800de78:	2101      	movs	r1, #1
 800de7a:	9108      	str	r1, [sp, #32]
 800de7c:	1c51      	adds	r1, r2, #1
 800de7e:	9111      	str	r1, [sp, #68]	@ 0x44
 800de80:	7852      	ldrb	r2, [r2, #1]
 800de82:	2a00      	cmp	r2, #0
 800de84:	d1c4      	bne.n	800de10 <_strtod_l+0x38>
 800de86:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800de88:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 800de8c:	2b00      	cmp	r3, #0
 800de8e:	f040 850f 	bne.w	800e8b0 <_strtod_l+0xad8>
 800de92:	ec4b ab10 	vmov	d0, sl, fp
 800de96:	e7e4      	b.n	800de62 <_strtod_l+0x8a>
 800de98:	2100      	movs	r1, #0
 800de9a:	e7ee      	b.n	800de7a <_strtod_l+0xa2>
 800de9c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800de9e:	b13a      	cbz	r2, 800deb0 <_strtod_l+0xd8>
 800dea0:	2135      	movs	r1, #53	@ 0x35
 800dea2:	a814      	add	r0, sp, #80	@ 0x50
 800dea4:	f003 fb77 	bl	8011596 <__copybits>
 800dea8:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800deaa:	9805      	ldr	r0, [sp, #20]
 800deac:	f002 ff48 	bl	8010d40 <_Bfree>
 800deb0:	1e73      	subs	r3, r6, #1
 800deb2:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800deb4:	2b04      	cmp	r3, #4
 800deb6:	d806      	bhi.n	800dec6 <_strtod_l+0xee>
 800deb8:	e8df f003 	tbb	[pc, r3]
 800debc:	201d0314 	.word	0x201d0314
 800dec0:	14          	.byte	0x14
 800dec1:	00          	.byte	0x00
 800dec2:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 800dec6:	05e3      	lsls	r3, r4, #23
 800dec8:	bf48      	it	mi
 800deca:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800dece:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ded2:	0d1b      	lsrs	r3, r3, #20
 800ded4:	051b      	lsls	r3, r3, #20
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	d1b9      	bne.n	800de4e <_strtod_l+0x76>
 800deda:	f001 fd2f 	bl	800f93c <__errno>
 800dede:	2322      	movs	r3, #34	@ 0x22
 800dee0:	6003      	str	r3, [r0, #0]
 800dee2:	e7b4      	b.n	800de4e <_strtod_l+0x76>
 800dee4:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 800dee8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800deec:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800def0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800def4:	e7e7      	b.n	800dec6 <_strtod_l+0xee>
 800def6:	f8df b16c 	ldr.w	fp, [pc, #364]	@ 800e064 <_strtod_l+0x28c>
 800defa:	e7e4      	b.n	800dec6 <_strtod_l+0xee>
 800defc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800df00:	f04f 3aff 	mov.w	sl, #4294967295
 800df04:	e7df      	b.n	800dec6 <_strtod_l+0xee>
 800df06:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800df08:	1c5a      	adds	r2, r3, #1
 800df0a:	9211      	str	r2, [sp, #68]	@ 0x44
 800df0c:	785b      	ldrb	r3, [r3, #1]
 800df0e:	2b30      	cmp	r3, #48	@ 0x30
 800df10:	d0f9      	beq.n	800df06 <_strtod_l+0x12e>
 800df12:	2b00      	cmp	r3, #0
 800df14:	d09b      	beq.n	800de4e <_strtod_l+0x76>
 800df16:	2301      	movs	r3, #1
 800df18:	2600      	movs	r6, #0
 800df1a:	9307      	str	r3, [sp, #28]
 800df1c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800df1e:	930a      	str	r3, [sp, #40]	@ 0x28
 800df20:	46b1      	mov	r9, r6
 800df22:	4635      	mov	r5, r6
 800df24:	220a      	movs	r2, #10
 800df26:	9811      	ldr	r0, [sp, #68]	@ 0x44
 800df28:	7804      	ldrb	r4, [r0, #0]
 800df2a:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 800df2e:	b2d9      	uxtb	r1, r3
 800df30:	2909      	cmp	r1, #9
 800df32:	d929      	bls.n	800df88 <_strtod_l+0x1b0>
 800df34:	494a      	ldr	r1, [pc, #296]	@ (800e060 <_strtod_l+0x288>)
 800df36:	2201      	movs	r2, #1
 800df38:	f001 fc94 	bl	800f864 <strncmp>
 800df3c:	b378      	cbz	r0, 800df9e <_strtod_l+0x1c6>
 800df3e:	2000      	movs	r0, #0
 800df40:	4622      	mov	r2, r4
 800df42:	462b      	mov	r3, r5
 800df44:	4607      	mov	r7, r0
 800df46:	9006      	str	r0, [sp, #24]
 800df48:	2a65      	cmp	r2, #101	@ 0x65
 800df4a:	d001      	beq.n	800df50 <_strtod_l+0x178>
 800df4c:	2a45      	cmp	r2, #69	@ 0x45
 800df4e:	d117      	bne.n	800df80 <_strtod_l+0x1a8>
 800df50:	b91b      	cbnz	r3, 800df5a <_strtod_l+0x182>
 800df52:	9b07      	ldr	r3, [sp, #28]
 800df54:	4303      	orrs	r3, r0
 800df56:	d096      	beq.n	800de86 <_strtod_l+0xae>
 800df58:	2300      	movs	r3, #0
 800df5a:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 800df5e:	f108 0201 	add.w	r2, r8, #1
 800df62:	9211      	str	r2, [sp, #68]	@ 0x44
 800df64:	f898 2001 	ldrb.w	r2, [r8, #1]
 800df68:	2a2b      	cmp	r2, #43	@ 0x2b
 800df6a:	d06b      	beq.n	800e044 <_strtod_l+0x26c>
 800df6c:	2a2d      	cmp	r2, #45	@ 0x2d
 800df6e:	d071      	beq.n	800e054 <_strtod_l+0x27c>
 800df70:	f04f 0e00 	mov.w	lr, #0
 800df74:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 800df78:	2c09      	cmp	r4, #9
 800df7a:	d979      	bls.n	800e070 <_strtod_l+0x298>
 800df7c:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 800df80:	2400      	movs	r4, #0
 800df82:	e094      	b.n	800e0ae <_strtod_l+0x2d6>
 800df84:	2300      	movs	r3, #0
 800df86:	e7c7      	b.n	800df18 <_strtod_l+0x140>
 800df88:	2d08      	cmp	r5, #8
 800df8a:	f100 0001 	add.w	r0, r0, #1
 800df8e:	bfd4      	ite	le
 800df90:	fb02 3909 	mlale	r9, r2, r9, r3
 800df94:	fb02 3606 	mlagt	r6, r2, r6, r3
 800df98:	3501      	adds	r5, #1
 800df9a:	9011      	str	r0, [sp, #68]	@ 0x44
 800df9c:	e7c3      	b.n	800df26 <_strtod_l+0x14e>
 800df9e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800dfa0:	1c5a      	adds	r2, r3, #1
 800dfa2:	9211      	str	r2, [sp, #68]	@ 0x44
 800dfa4:	785a      	ldrb	r2, [r3, #1]
 800dfa6:	b375      	cbz	r5, 800e006 <_strtod_l+0x22e>
 800dfa8:	4607      	mov	r7, r0
 800dfaa:	462b      	mov	r3, r5
 800dfac:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800dfb0:	2909      	cmp	r1, #9
 800dfb2:	d913      	bls.n	800dfdc <_strtod_l+0x204>
 800dfb4:	2101      	movs	r1, #1
 800dfb6:	9106      	str	r1, [sp, #24]
 800dfb8:	e7c6      	b.n	800df48 <_strtod_l+0x170>
 800dfba:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800dfbc:	1c5a      	adds	r2, r3, #1
 800dfbe:	9211      	str	r2, [sp, #68]	@ 0x44
 800dfc0:	785a      	ldrb	r2, [r3, #1]
 800dfc2:	3001      	adds	r0, #1
 800dfc4:	2a30      	cmp	r2, #48	@ 0x30
 800dfc6:	d0f8      	beq.n	800dfba <_strtod_l+0x1e2>
 800dfc8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800dfcc:	2b08      	cmp	r3, #8
 800dfce:	f200 8476 	bhi.w	800e8be <_strtod_l+0xae6>
 800dfd2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800dfd4:	930a      	str	r3, [sp, #40]	@ 0x28
 800dfd6:	4607      	mov	r7, r0
 800dfd8:	2000      	movs	r0, #0
 800dfda:	4603      	mov	r3, r0
 800dfdc:	3a30      	subs	r2, #48	@ 0x30
 800dfde:	f100 0101 	add.w	r1, r0, #1
 800dfe2:	d023      	beq.n	800e02c <_strtod_l+0x254>
 800dfe4:	440f      	add	r7, r1
 800dfe6:	eb00 0c03 	add.w	ip, r0, r3
 800dfea:	4619      	mov	r1, r3
 800dfec:	240a      	movs	r4, #10
 800dfee:	4561      	cmp	r1, ip
 800dff0:	d10b      	bne.n	800e00a <_strtod_l+0x232>
 800dff2:	1c5c      	adds	r4, r3, #1
 800dff4:	4403      	add	r3, r0
 800dff6:	2b08      	cmp	r3, #8
 800dff8:	4404      	add	r4, r0
 800dffa:	dc11      	bgt.n	800e020 <_strtod_l+0x248>
 800dffc:	230a      	movs	r3, #10
 800dffe:	fb03 2909 	mla	r9, r3, r9, r2
 800e002:	2100      	movs	r1, #0
 800e004:	e013      	b.n	800e02e <_strtod_l+0x256>
 800e006:	4628      	mov	r0, r5
 800e008:	e7dc      	b.n	800dfc4 <_strtod_l+0x1ec>
 800e00a:	2908      	cmp	r1, #8
 800e00c:	f101 0101 	add.w	r1, r1, #1
 800e010:	dc02      	bgt.n	800e018 <_strtod_l+0x240>
 800e012:	fb04 f909 	mul.w	r9, r4, r9
 800e016:	e7ea      	b.n	800dfee <_strtod_l+0x216>
 800e018:	2910      	cmp	r1, #16
 800e01a:	bfd8      	it	le
 800e01c:	4366      	mulle	r6, r4
 800e01e:	e7e6      	b.n	800dfee <_strtod_l+0x216>
 800e020:	2b0f      	cmp	r3, #15
 800e022:	dcee      	bgt.n	800e002 <_strtod_l+0x22a>
 800e024:	230a      	movs	r3, #10
 800e026:	fb03 2606 	mla	r6, r3, r6, r2
 800e02a:	e7ea      	b.n	800e002 <_strtod_l+0x22a>
 800e02c:	461c      	mov	r4, r3
 800e02e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e030:	1c5a      	adds	r2, r3, #1
 800e032:	9211      	str	r2, [sp, #68]	@ 0x44
 800e034:	785a      	ldrb	r2, [r3, #1]
 800e036:	4608      	mov	r0, r1
 800e038:	4623      	mov	r3, r4
 800e03a:	e7b7      	b.n	800dfac <_strtod_l+0x1d4>
 800e03c:	2301      	movs	r3, #1
 800e03e:	2700      	movs	r7, #0
 800e040:	9306      	str	r3, [sp, #24]
 800e042:	e786      	b.n	800df52 <_strtod_l+0x17a>
 800e044:	f04f 0e00 	mov.w	lr, #0
 800e048:	f108 0202 	add.w	r2, r8, #2
 800e04c:	9211      	str	r2, [sp, #68]	@ 0x44
 800e04e:	f898 2002 	ldrb.w	r2, [r8, #2]
 800e052:	e78f      	b.n	800df74 <_strtod_l+0x19c>
 800e054:	f04f 0e01 	mov.w	lr, #1
 800e058:	e7f6      	b.n	800e048 <_strtod_l+0x270>
 800e05a:	bf00      	nop
 800e05c:	08012dac 	.word	0x08012dac
 800e060:	08012d94 	.word	0x08012d94
 800e064:	7ff00000 	.word	0x7ff00000
 800e068:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800e06a:	1c54      	adds	r4, r2, #1
 800e06c:	9411      	str	r4, [sp, #68]	@ 0x44
 800e06e:	7852      	ldrb	r2, [r2, #1]
 800e070:	2a30      	cmp	r2, #48	@ 0x30
 800e072:	d0f9      	beq.n	800e068 <_strtod_l+0x290>
 800e074:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 800e078:	2c08      	cmp	r4, #8
 800e07a:	d881      	bhi.n	800df80 <_strtod_l+0x1a8>
 800e07c:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 800e080:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800e082:	9209      	str	r2, [sp, #36]	@ 0x24
 800e084:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800e086:	1c51      	adds	r1, r2, #1
 800e088:	9111      	str	r1, [sp, #68]	@ 0x44
 800e08a:	7852      	ldrb	r2, [r2, #1]
 800e08c:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 800e090:	2c09      	cmp	r4, #9
 800e092:	d938      	bls.n	800e106 <_strtod_l+0x32e>
 800e094:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 800e096:	1b0c      	subs	r4, r1, r4
 800e098:	2c08      	cmp	r4, #8
 800e09a:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 800e09e:	dc02      	bgt.n	800e0a6 <_strtod_l+0x2ce>
 800e0a0:	4564      	cmp	r4, ip
 800e0a2:	bfa8      	it	ge
 800e0a4:	4664      	movge	r4, ip
 800e0a6:	f1be 0f00 	cmp.w	lr, #0
 800e0aa:	d000      	beq.n	800e0ae <_strtod_l+0x2d6>
 800e0ac:	4264      	negs	r4, r4
 800e0ae:	2b00      	cmp	r3, #0
 800e0b0:	d14e      	bne.n	800e150 <_strtod_l+0x378>
 800e0b2:	9b07      	ldr	r3, [sp, #28]
 800e0b4:	4318      	orrs	r0, r3
 800e0b6:	f47f aeca 	bne.w	800de4e <_strtod_l+0x76>
 800e0ba:	9b06      	ldr	r3, [sp, #24]
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	f47f aee2 	bne.w	800de86 <_strtod_l+0xae>
 800e0c2:	2a69      	cmp	r2, #105	@ 0x69
 800e0c4:	d027      	beq.n	800e116 <_strtod_l+0x33e>
 800e0c6:	dc24      	bgt.n	800e112 <_strtod_l+0x33a>
 800e0c8:	2a49      	cmp	r2, #73	@ 0x49
 800e0ca:	d024      	beq.n	800e116 <_strtod_l+0x33e>
 800e0cc:	2a4e      	cmp	r2, #78	@ 0x4e
 800e0ce:	f47f aeda 	bne.w	800de86 <_strtod_l+0xae>
 800e0d2:	4997      	ldr	r1, [pc, #604]	@ (800e330 <_strtod_l+0x558>)
 800e0d4:	a811      	add	r0, sp, #68	@ 0x44
 800e0d6:	f002 fd31 	bl	8010b3c <__match>
 800e0da:	2800      	cmp	r0, #0
 800e0dc:	f43f aed3 	beq.w	800de86 <_strtod_l+0xae>
 800e0e0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e0e2:	781b      	ldrb	r3, [r3, #0]
 800e0e4:	2b28      	cmp	r3, #40	@ 0x28
 800e0e6:	d12d      	bne.n	800e144 <_strtod_l+0x36c>
 800e0e8:	4992      	ldr	r1, [pc, #584]	@ (800e334 <_strtod_l+0x55c>)
 800e0ea:	aa14      	add	r2, sp, #80	@ 0x50
 800e0ec:	a811      	add	r0, sp, #68	@ 0x44
 800e0ee:	f002 fd39 	bl	8010b64 <__hexnan>
 800e0f2:	2805      	cmp	r0, #5
 800e0f4:	d126      	bne.n	800e144 <_strtod_l+0x36c>
 800e0f6:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800e0f8:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 800e0fc:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800e100:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800e104:	e6a3      	b.n	800de4e <_strtod_l+0x76>
 800e106:	240a      	movs	r4, #10
 800e108:	fb04 2c0c 	mla	ip, r4, ip, r2
 800e10c:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 800e110:	e7b8      	b.n	800e084 <_strtod_l+0x2ac>
 800e112:	2a6e      	cmp	r2, #110	@ 0x6e
 800e114:	e7db      	b.n	800e0ce <_strtod_l+0x2f6>
 800e116:	4988      	ldr	r1, [pc, #544]	@ (800e338 <_strtod_l+0x560>)
 800e118:	a811      	add	r0, sp, #68	@ 0x44
 800e11a:	f002 fd0f 	bl	8010b3c <__match>
 800e11e:	2800      	cmp	r0, #0
 800e120:	f43f aeb1 	beq.w	800de86 <_strtod_l+0xae>
 800e124:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e126:	4985      	ldr	r1, [pc, #532]	@ (800e33c <_strtod_l+0x564>)
 800e128:	3b01      	subs	r3, #1
 800e12a:	a811      	add	r0, sp, #68	@ 0x44
 800e12c:	9311      	str	r3, [sp, #68]	@ 0x44
 800e12e:	f002 fd05 	bl	8010b3c <__match>
 800e132:	b910      	cbnz	r0, 800e13a <_strtod_l+0x362>
 800e134:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e136:	3301      	adds	r3, #1
 800e138:	9311      	str	r3, [sp, #68]	@ 0x44
 800e13a:	f8df b214 	ldr.w	fp, [pc, #532]	@ 800e350 <_strtod_l+0x578>
 800e13e:	f04f 0a00 	mov.w	sl, #0
 800e142:	e684      	b.n	800de4e <_strtod_l+0x76>
 800e144:	487e      	ldr	r0, [pc, #504]	@ (800e340 <_strtod_l+0x568>)
 800e146:	f001 fc37 	bl	800f9b8 <nan>
 800e14a:	ec5b ab10 	vmov	sl, fp, d0
 800e14e:	e67e      	b.n	800de4e <_strtod_l+0x76>
 800e150:	ee07 9a90 	vmov	s15, r9
 800e154:	1be2      	subs	r2, r4, r7
 800e156:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800e15a:	2d00      	cmp	r5, #0
 800e15c:	bf08      	it	eq
 800e15e:	461d      	moveq	r5, r3
 800e160:	2b10      	cmp	r3, #16
 800e162:	9209      	str	r2, [sp, #36]	@ 0x24
 800e164:	461a      	mov	r2, r3
 800e166:	bfa8      	it	ge
 800e168:	2210      	movge	r2, #16
 800e16a:	2b09      	cmp	r3, #9
 800e16c:	ec5b ab17 	vmov	sl, fp, d7
 800e170:	dc15      	bgt.n	800e19e <_strtod_l+0x3c6>
 800e172:	1be1      	subs	r1, r4, r7
 800e174:	2900      	cmp	r1, #0
 800e176:	f43f ae6a 	beq.w	800de4e <_strtod_l+0x76>
 800e17a:	eba4 0107 	sub.w	r1, r4, r7
 800e17e:	dd72      	ble.n	800e266 <_strtod_l+0x48e>
 800e180:	2916      	cmp	r1, #22
 800e182:	dc59      	bgt.n	800e238 <_strtod_l+0x460>
 800e184:	4b6f      	ldr	r3, [pc, #444]	@ (800e344 <_strtod_l+0x56c>)
 800e186:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e188:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e18c:	ed93 7b00 	vldr	d7, [r3]
 800e190:	ec4b ab16 	vmov	d6, sl, fp
 800e194:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e198:	ec5b ab17 	vmov	sl, fp, d7
 800e19c:	e657      	b.n	800de4e <_strtod_l+0x76>
 800e19e:	4969      	ldr	r1, [pc, #420]	@ (800e344 <_strtod_l+0x56c>)
 800e1a0:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800e1a4:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 800e1a8:	ee06 6a90 	vmov	s13, r6
 800e1ac:	2b0f      	cmp	r3, #15
 800e1ae:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 800e1b2:	eea7 6b05 	vfma.f64	d6, d7, d5
 800e1b6:	ec5b ab16 	vmov	sl, fp, d6
 800e1ba:	ddda      	ble.n	800e172 <_strtod_l+0x39a>
 800e1bc:	1a9a      	subs	r2, r3, r2
 800e1be:	1be1      	subs	r1, r4, r7
 800e1c0:	440a      	add	r2, r1
 800e1c2:	2a00      	cmp	r2, #0
 800e1c4:	f340 8094 	ble.w	800e2f0 <_strtod_l+0x518>
 800e1c8:	f012 000f 	ands.w	r0, r2, #15
 800e1cc:	d00a      	beq.n	800e1e4 <_strtod_l+0x40c>
 800e1ce:	495d      	ldr	r1, [pc, #372]	@ (800e344 <_strtod_l+0x56c>)
 800e1d0:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800e1d4:	ed91 7b00 	vldr	d7, [r1]
 800e1d8:	ec4b ab16 	vmov	d6, sl, fp
 800e1dc:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e1e0:	ec5b ab17 	vmov	sl, fp, d7
 800e1e4:	f032 020f 	bics.w	r2, r2, #15
 800e1e8:	d073      	beq.n	800e2d2 <_strtod_l+0x4fa>
 800e1ea:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 800e1ee:	dd47      	ble.n	800e280 <_strtod_l+0x4a8>
 800e1f0:	2400      	movs	r4, #0
 800e1f2:	4625      	mov	r5, r4
 800e1f4:	9407      	str	r4, [sp, #28]
 800e1f6:	4626      	mov	r6, r4
 800e1f8:	9a05      	ldr	r2, [sp, #20]
 800e1fa:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800e350 <_strtod_l+0x578>
 800e1fe:	2322      	movs	r3, #34	@ 0x22
 800e200:	6013      	str	r3, [r2, #0]
 800e202:	f04f 0a00 	mov.w	sl, #0
 800e206:	9b07      	ldr	r3, [sp, #28]
 800e208:	2b00      	cmp	r3, #0
 800e20a:	f43f ae20 	beq.w	800de4e <_strtod_l+0x76>
 800e20e:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800e210:	9805      	ldr	r0, [sp, #20]
 800e212:	f002 fd95 	bl	8010d40 <_Bfree>
 800e216:	9805      	ldr	r0, [sp, #20]
 800e218:	4631      	mov	r1, r6
 800e21a:	f002 fd91 	bl	8010d40 <_Bfree>
 800e21e:	9805      	ldr	r0, [sp, #20]
 800e220:	4629      	mov	r1, r5
 800e222:	f002 fd8d 	bl	8010d40 <_Bfree>
 800e226:	9907      	ldr	r1, [sp, #28]
 800e228:	9805      	ldr	r0, [sp, #20]
 800e22a:	f002 fd89 	bl	8010d40 <_Bfree>
 800e22e:	9805      	ldr	r0, [sp, #20]
 800e230:	4621      	mov	r1, r4
 800e232:	f002 fd85 	bl	8010d40 <_Bfree>
 800e236:	e60a      	b.n	800de4e <_strtod_l+0x76>
 800e238:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 800e23c:	1be0      	subs	r0, r4, r7
 800e23e:	4281      	cmp	r1, r0
 800e240:	dbbc      	blt.n	800e1bc <_strtod_l+0x3e4>
 800e242:	4a40      	ldr	r2, [pc, #256]	@ (800e344 <_strtod_l+0x56c>)
 800e244:	f1c3 030f 	rsb	r3, r3, #15
 800e248:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800e24c:	ed91 7b00 	vldr	d7, [r1]
 800e250:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e252:	ec4b ab16 	vmov	d6, sl, fp
 800e256:	1acb      	subs	r3, r1, r3
 800e258:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800e25c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e260:	ed92 6b00 	vldr	d6, [r2]
 800e264:	e796      	b.n	800e194 <_strtod_l+0x3bc>
 800e266:	3116      	adds	r1, #22
 800e268:	dba8      	blt.n	800e1bc <_strtod_l+0x3e4>
 800e26a:	4b36      	ldr	r3, [pc, #216]	@ (800e344 <_strtod_l+0x56c>)
 800e26c:	1b3c      	subs	r4, r7, r4
 800e26e:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800e272:	ed94 7b00 	vldr	d7, [r4]
 800e276:	ec4b ab16 	vmov	d6, sl, fp
 800e27a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800e27e:	e78b      	b.n	800e198 <_strtod_l+0x3c0>
 800e280:	2000      	movs	r0, #0
 800e282:	ec4b ab17 	vmov	d7, sl, fp
 800e286:	4e30      	ldr	r6, [pc, #192]	@ (800e348 <_strtod_l+0x570>)
 800e288:	1112      	asrs	r2, r2, #4
 800e28a:	4601      	mov	r1, r0
 800e28c:	2a01      	cmp	r2, #1
 800e28e:	dc23      	bgt.n	800e2d8 <_strtod_l+0x500>
 800e290:	b108      	cbz	r0, 800e296 <_strtod_l+0x4be>
 800e292:	ec5b ab17 	vmov	sl, fp, d7
 800e296:	4a2c      	ldr	r2, [pc, #176]	@ (800e348 <_strtod_l+0x570>)
 800e298:	482c      	ldr	r0, [pc, #176]	@ (800e34c <_strtod_l+0x574>)
 800e29a:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800e29e:	ed92 7b00 	vldr	d7, [r2]
 800e2a2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800e2a6:	ec4b ab16 	vmov	d6, sl, fp
 800e2aa:	4a29      	ldr	r2, [pc, #164]	@ (800e350 <_strtod_l+0x578>)
 800e2ac:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e2b0:	ee17 1a90 	vmov	r1, s15
 800e2b4:	400a      	ands	r2, r1
 800e2b6:	4282      	cmp	r2, r0
 800e2b8:	ec5b ab17 	vmov	sl, fp, d7
 800e2bc:	d898      	bhi.n	800e1f0 <_strtod_l+0x418>
 800e2be:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 800e2c2:	4282      	cmp	r2, r0
 800e2c4:	bf86      	itte	hi
 800e2c6:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 800e354 <_strtod_l+0x57c>
 800e2ca:	f04f 3aff 	movhi.w	sl, #4294967295
 800e2ce:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 800e2d2:	2200      	movs	r2, #0
 800e2d4:	9206      	str	r2, [sp, #24]
 800e2d6:	e076      	b.n	800e3c6 <_strtod_l+0x5ee>
 800e2d8:	f012 0f01 	tst.w	r2, #1
 800e2dc:	d004      	beq.n	800e2e8 <_strtod_l+0x510>
 800e2de:	ed96 6b00 	vldr	d6, [r6]
 800e2e2:	2001      	movs	r0, #1
 800e2e4:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e2e8:	3101      	adds	r1, #1
 800e2ea:	1052      	asrs	r2, r2, #1
 800e2ec:	3608      	adds	r6, #8
 800e2ee:	e7cd      	b.n	800e28c <_strtod_l+0x4b4>
 800e2f0:	d0ef      	beq.n	800e2d2 <_strtod_l+0x4fa>
 800e2f2:	4252      	negs	r2, r2
 800e2f4:	f012 000f 	ands.w	r0, r2, #15
 800e2f8:	d00a      	beq.n	800e310 <_strtod_l+0x538>
 800e2fa:	4912      	ldr	r1, [pc, #72]	@ (800e344 <_strtod_l+0x56c>)
 800e2fc:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800e300:	ed91 7b00 	vldr	d7, [r1]
 800e304:	ec4b ab16 	vmov	d6, sl, fp
 800e308:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800e30c:	ec5b ab17 	vmov	sl, fp, d7
 800e310:	1112      	asrs	r2, r2, #4
 800e312:	d0de      	beq.n	800e2d2 <_strtod_l+0x4fa>
 800e314:	2a1f      	cmp	r2, #31
 800e316:	dd1f      	ble.n	800e358 <_strtod_l+0x580>
 800e318:	2400      	movs	r4, #0
 800e31a:	4625      	mov	r5, r4
 800e31c:	9407      	str	r4, [sp, #28]
 800e31e:	4626      	mov	r6, r4
 800e320:	9a05      	ldr	r2, [sp, #20]
 800e322:	2322      	movs	r3, #34	@ 0x22
 800e324:	f04f 0a00 	mov.w	sl, #0
 800e328:	f04f 0b00 	mov.w	fp, #0
 800e32c:	6013      	str	r3, [r2, #0]
 800e32e:	e76a      	b.n	800e206 <_strtod_l+0x42e>
 800e330:	08012df5 	.word	0x08012df5
 800e334:	08012d98 	.word	0x08012d98
 800e338:	08012ded 	.word	0x08012ded
 800e33c:	08012e2a 	.word	0x08012e2a
 800e340:	080131d8 	.word	0x080131d8
 800e344:	08012fa8 	.word	0x08012fa8
 800e348:	08012f80 	.word	0x08012f80
 800e34c:	7ca00000 	.word	0x7ca00000
 800e350:	7ff00000 	.word	0x7ff00000
 800e354:	7fefffff 	.word	0x7fefffff
 800e358:	f012 0110 	ands.w	r1, r2, #16
 800e35c:	bf18      	it	ne
 800e35e:	216a      	movne	r1, #106	@ 0x6a
 800e360:	9106      	str	r1, [sp, #24]
 800e362:	ec4b ab17 	vmov	d7, sl, fp
 800e366:	49b0      	ldr	r1, [pc, #704]	@ (800e628 <_strtod_l+0x850>)
 800e368:	2000      	movs	r0, #0
 800e36a:	07d6      	lsls	r6, r2, #31
 800e36c:	d504      	bpl.n	800e378 <_strtod_l+0x5a0>
 800e36e:	ed91 6b00 	vldr	d6, [r1]
 800e372:	2001      	movs	r0, #1
 800e374:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e378:	1052      	asrs	r2, r2, #1
 800e37a:	f101 0108 	add.w	r1, r1, #8
 800e37e:	d1f4      	bne.n	800e36a <_strtod_l+0x592>
 800e380:	b108      	cbz	r0, 800e386 <_strtod_l+0x5ae>
 800e382:	ec5b ab17 	vmov	sl, fp, d7
 800e386:	9a06      	ldr	r2, [sp, #24]
 800e388:	b1b2      	cbz	r2, 800e3b8 <_strtod_l+0x5e0>
 800e38a:	f3cb 510a 	ubfx	r1, fp, #20, #11
 800e38e:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 800e392:	2a00      	cmp	r2, #0
 800e394:	4658      	mov	r0, fp
 800e396:	dd0f      	ble.n	800e3b8 <_strtod_l+0x5e0>
 800e398:	2a1f      	cmp	r2, #31
 800e39a:	dd55      	ble.n	800e448 <_strtod_l+0x670>
 800e39c:	2a34      	cmp	r2, #52	@ 0x34
 800e39e:	bfde      	ittt	le
 800e3a0:	f04f 32ff 	movle.w	r2, #4294967295
 800e3a4:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 800e3a8:	408a      	lslle	r2, r1
 800e3aa:	f04f 0a00 	mov.w	sl, #0
 800e3ae:	bfcc      	ite	gt
 800e3b0:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800e3b4:	ea02 0b00 	andle.w	fp, r2, r0
 800e3b8:	ec4b ab17 	vmov	d7, sl, fp
 800e3bc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e3c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e3c4:	d0a8      	beq.n	800e318 <_strtod_l+0x540>
 800e3c6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800e3c8:	9805      	ldr	r0, [sp, #20]
 800e3ca:	f8cd 9000 	str.w	r9, [sp]
 800e3ce:	462a      	mov	r2, r5
 800e3d0:	f002 fd1e 	bl	8010e10 <__s2b>
 800e3d4:	9007      	str	r0, [sp, #28]
 800e3d6:	2800      	cmp	r0, #0
 800e3d8:	f43f af0a 	beq.w	800e1f0 <_strtod_l+0x418>
 800e3dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e3de:	1b3f      	subs	r7, r7, r4
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	bfb4      	ite	lt
 800e3e4:	463b      	movlt	r3, r7
 800e3e6:	2300      	movge	r3, #0
 800e3e8:	930a      	str	r3, [sp, #40]	@ 0x28
 800e3ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e3ec:	ed9f bb8a 	vldr	d11, [pc, #552]	@ 800e618 <_strtod_l+0x840>
 800e3f0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800e3f4:	2400      	movs	r4, #0
 800e3f6:	930d      	str	r3, [sp, #52]	@ 0x34
 800e3f8:	4625      	mov	r5, r4
 800e3fa:	9b07      	ldr	r3, [sp, #28]
 800e3fc:	9805      	ldr	r0, [sp, #20]
 800e3fe:	6859      	ldr	r1, [r3, #4]
 800e400:	f002 fc5e 	bl	8010cc0 <_Balloc>
 800e404:	4606      	mov	r6, r0
 800e406:	2800      	cmp	r0, #0
 800e408:	f43f aef6 	beq.w	800e1f8 <_strtod_l+0x420>
 800e40c:	9b07      	ldr	r3, [sp, #28]
 800e40e:	691a      	ldr	r2, [r3, #16]
 800e410:	ec4b ab19 	vmov	d9, sl, fp
 800e414:	3202      	adds	r2, #2
 800e416:	f103 010c 	add.w	r1, r3, #12
 800e41a:	0092      	lsls	r2, r2, #2
 800e41c:	300c      	adds	r0, #12
 800e41e:	f001 faba 	bl	800f996 <memcpy>
 800e422:	eeb0 0b49 	vmov.f64	d0, d9
 800e426:	9805      	ldr	r0, [sp, #20]
 800e428:	aa14      	add	r2, sp, #80	@ 0x50
 800e42a:	a913      	add	r1, sp, #76	@ 0x4c
 800e42c:	f003 f82c 	bl	8011488 <__d2b>
 800e430:	9012      	str	r0, [sp, #72]	@ 0x48
 800e432:	2800      	cmp	r0, #0
 800e434:	f43f aee0 	beq.w	800e1f8 <_strtod_l+0x420>
 800e438:	9805      	ldr	r0, [sp, #20]
 800e43a:	2101      	movs	r1, #1
 800e43c:	f002 fd7e 	bl	8010f3c <__i2b>
 800e440:	4605      	mov	r5, r0
 800e442:	b940      	cbnz	r0, 800e456 <_strtod_l+0x67e>
 800e444:	2500      	movs	r5, #0
 800e446:	e6d7      	b.n	800e1f8 <_strtod_l+0x420>
 800e448:	f04f 31ff 	mov.w	r1, #4294967295
 800e44c:	fa01 f202 	lsl.w	r2, r1, r2
 800e450:	ea02 0a0a 	and.w	sl, r2, sl
 800e454:	e7b0      	b.n	800e3b8 <_strtod_l+0x5e0>
 800e456:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 800e458:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800e45a:	2f00      	cmp	r7, #0
 800e45c:	bfab      	itete	ge
 800e45e:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 800e460:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 800e462:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 800e466:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 800e46a:	bfac      	ite	ge
 800e46c:	eb07 0903 	addge.w	r9, r7, r3
 800e470:	eba3 0807 	sublt.w	r8, r3, r7
 800e474:	9b06      	ldr	r3, [sp, #24]
 800e476:	1aff      	subs	r7, r7, r3
 800e478:	4417      	add	r7, r2
 800e47a:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 800e47e:	4a6b      	ldr	r2, [pc, #428]	@ (800e62c <_strtod_l+0x854>)
 800e480:	3f01      	subs	r7, #1
 800e482:	4297      	cmp	r7, r2
 800e484:	da51      	bge.n	800e52a <_strtod_l+0x752>
 800e486:	1bd1      	subs	r1, r2, r7
 800e488:	291f      	cmp	r1, #31
 800e48a:	eba3 0301 	sub.w	r3, r3, r1
 800e48e:	f04f 0201 	mov.w	r2, #1
 800e492:	dc3e      	bgt.n	800e512 <_strtod_l+0x73a>
 800e494:	408a      	lsls	r2, r1
 800e496:	920c      	str	r2, [sp, #48]	@ 0x30
 800e498:	2200      	movs	r2, #0
 800e49a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800e49c:	eb09 0703 	add.w	r7, r9, r3
 800e4a0:	4498      	add	r8, r3
 800e4a2:	9b06      	ldr	r3, [sp, #24]
 800e4a4:	45b9      	cmp	r9, r7
 800e4a6:	4498      	add	r8, r3
 800e4a8:	464b      	mov	r3, r9
 800e4aa:	bfa8      	it	ge
 800e4ac:	463b      	movge	r3, r7
 800e4ae:	4543      	cmp	r3, r8
 800e4b0:	bfa8      	it	ge
 800e4b2:	4643      	movge	r3, r8
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	bfc2      	ittt	gt
 800e4b8:	1aff      	subgt	r7, r7, r3
 800e4ba:	eba8 0803 	subgt.w	r8, r8, r3
 800e4be:	eba9 0903 	subgt.w	r9, r9, r3
 800e4c2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	dd16      	ble.n	800e4f6 <_strtod_l+0x71e>
 800e4c8:	4629      	mov	r1, r5
 800e4ca:	9805      	ldr	r0, [sp, #20]
 800e4cc:	461a      	mov	r2, r3
 800e4ce:	f002 fdf5 	bl	80110bc <__pow5mult>
 800e4d2:	4605      	mov	r5, r0
 800e4d4:	2800      	cmp	r0, #0
 800e4d6:	d0b5      	beq.n	800e444 <_strtod_l+0x66c>
 800e4d8:	4601      	mov	r1, r0
 800e4da:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800e4dc:	9805      	ldr	r0, [sp, #20]
 800e4de:	f002 fd43 	bl	8010f68 <__multiply>
 800e4e2:	900f      	str	r0, [sp, #60]	@ 0x3c
 800e4e4:	2800      	cmp	r0, #0
 800e4e6:	f43f ae87 	beq.w	800e1f8 <_strtod_l+0x420>
 800e4ea:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800e4ec:	9805      	ldr	r0, [sp, #20]
 800e4ee:	f002 fc27 	bl	8010d40 <_Bfree>
 800e4f2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e4f4:	9312      	str	r3, [sp, #72]	@ 0x48
 800e4f6:	2f00      	cmp	r7, #0
 800e4f8:	dc1b      	bgt.n	800e532 <_strtod_l+0x75a>
 800e4fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e4fc:	2b00      	cmp	r3, #0
 800e4fe:	dd21      	ble.n	800e544 <_strtod_l+0x76c>
 800e500:	4631      	mov	r1, r6
 800e502:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e504:	9805      	ldr	r0, [sp, #20]
 800e506:	f002 fdd9 	bl	80110bc <__pow5mult>
 800e50a:	4606      	mov	r6, r0
 800e50c:	b9d0      	cbnz	r0, 800e544 <_strtod_l+0x76c>
 800e50e:	2600      	movs	r6, #0
 800e510:	e672      	b.n	800e1f8 <_strtod_l+0x420>
 800e512:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 800e516:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 800e51a:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 800e51e:	37e2      	adds	r7, #226	@ 0xe2
 800e520:	fa02 f107 	lsl.w	r1, r2, r7
 800e524:	910b      	str	r1, [sp, #44]	@ 0x2c
 800e526:	920c      	str	r2, [sp, #48]	@ 0x30
 800e528:	e7b8      	b.n	800e49c <_strtod_l+0x6c4>
 800e52a:	2200      	movs	r2, #0
 800e52c:	920b      	str	r2, [sp, #44]	@ 0x2c
 800e52e:	2201      	movs	r2, #1
 800e530:	e7f9      	b.n	800e526 <_strtod_l+0x74e>
 800e532:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800e534:	9805      	ldr	r0, [sp, #20]
 800e536:	463a      	mov	r2, r7
 800e538:	f002 fe1a 	bl	8011170 <__lshift>
 800e53c:	9012      	str	r0, [sp, #72]	@ 0x48
 800e53e:	2800      	cmp	r0, #0
 800e540:	d1db      	bne.n	800e4fa <_strtod_l+0x722>
 800e542:	e659      	b.n	800e1f8 <_strtod_l+0x420>
 800e544:	f1b8 0f00 	cmp.w	r8, #0
 800e548:	dd07      	ble.n	800e55a <_strtod_l+0x782>
 800e54a:	4631      	mov	r1, r6
 800e54c:	9805      	ldr	r0, [sp, #20]
 800e54e:	4642      	mov	r2, r8
 800e550:	f002 fe0e 	bl	8011170 <__lshift>
 800e554:	4606      	mov	r6, r0
 800e556:	2800      	cmp	r0, #0
 800e558:	d0d9      	beq.n	800e50e <_strtod_l+0x736>
 800e55a:	f1b9 0f00 	cmp.w	r9, #0
 800e55e:	dd08      	ble.n	800e572 <_strtod_l+0x79a>
 800e560:	4629      	mov	r1, r5
 800e562:	9805      	ldr	r0, [sp, #20]
 800e564:	464a      	mov	r2, r9
 800e566:	f002 fe03 	bl	8011170 <__lshift>
 800e56a:	4605      	mov	r5, r0
 800e56c:	2800      	cmp	r0, #0
 800e56e:	f43f ae43 	beq.w	800e1f8 <_strtod_l+0x420>
 800e572:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800e574:	9805      	ldr	r0, [sp, #20]
 800e576:	4632      	mov	r2, r6
 800e578:	f002 fe82 	bl	8011280 <__mdiff>
 800e57c:	4604      	mov	r4, r0
 800e57e:	2800      	cmp	r0, #0
 800e580:	f43f ae3a 	beq.w	800e1f8 <_strtod_l+0x420>
 800e584:	2300      	movs	r3, #0
 800e586:	f8d0 800c 	ldr.w	r8, [r0, #12]
 800e58a:	60c3      	str	r3, [r0, #12]
 800e58c:	4629      	mov	r1, r5
 800e58e:	f002 fe5b 	bl	8011248 <__mcmp>
 800e592:	2800      	cmp	r0, #0
 800e594:	da4e      	bge.n	800e634 <_strtod_l+0x85c>
 800e596:	ea58 080a 	orrs.w	r8, r8, sl
 800e59a:	d174      	bne.n	800e686 <_strtod_l+0x8ae>
 800e59c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e5a0:	2b00      	cmp	r3, #0
 800e5a2:	d170      	bne.n	800e686 <_strtod_l+0x8ae>
 800e5a4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e5a8:	0d1b      	lsrs	r3, r3, #20
 800e5aa:	051b      	lsls	r3, r3, #20
 800e5ac:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800e5b0:	d969      	bls.n	800e686 <_strtod_l+0x8ae>
 800e5b2:	6963      	ldr	r3, [r4, #20]
 800e5b4:	b913      	cbnz	r3, 800e5bc <_strtod_l+0x7e4>
 800e5b6:	6923      	ldr	r3, [r4, #16]
 800e5b8:	2b01      	cmp	r3, #1
 800e5ba:	dd64      	ble.n	800e686 <_strtod_l+0x8ae>
 800e5bc:	4621      	mov	r1, r4
 800e5be:	2201      	movs	r2, #1
 800e5c0:	9805      	ldr	r0, [sp, #20]
 800e5c2:	f002 fdd5 	bl	8011170 <__lshift>
 800e5c6:	4629      	mov	r1, r5
 800e5c8:	4604      	mov	r4, r0
 800e5ca:	f002 fe3d 	bl	8011248 <__mcmp>
 800e5ce:	2800      	cmp	r0, #0
 800e5d0:	dd59      	ble.n	800e686 <_strtod_l+0x8ae>
 800e5d2:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e5d6:	9a06      	ldr	r2, [sp, #24]
 800e5d8:	0d1b      	lsrs	r3, r3, #20
 800e5da:	051b      	lsls	r3, r3, #20
 800e5dc:	2a00      	cmp	r2, #0
 800e5de:	d070      	beq.n	800e6c2 <_strtod_l+0x8ea>
 800e5e0:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800e5e4:	d86d      	bhi.n	800e6c2 <_strtod_l+0x8ea>
 800e5e6:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800e5ea:	f67f ae99 	bls.w	800e320 <_strtod_l+0x548>
 800e5ee:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 800e620 <_strtod_l+0x848>
 800e5f2:	ec4b ab16 	vmov	d6, sl, fp
 800e5f6:	4b0e      	ldr	r3, [pc, #56]	@ (800e630 <_strtod_l+0x858>)
 800e5f8:	ee26 7b07 	vmul.f64	d7, d6, d7
 800e5fc:	ee17 2a90 	vmov	r2, s15
 800e600:	4013      	ands	r3, r2
 800e602:	ec5b ab17 	vmov	sl, fp, d7
 800e606:	2b00      	cmp	r3, #0
 800e608:	f47f ae01 	bne.w	800e20e <_strtod_l+0x436>
 800e60c:	9a05      	ldr	r2, [sp, #20]
 800e60e:	2322      	movs	r3, #34	@ 0x22
 800e610:	6013      	str	r3, [r2, #0]
 800e612:	e5fc      	b.n	800e20e <_strtod_l+0x436>
 800e614:	f3af 8000 	nop.w
 800e618:	ffc00000 	.word	0xffc00000
 800e61c:	41dfffff 	.word	0x41dfffff
 800e620:	00000000 	.word	0x00000000
 800e624:	39500000 	.word	0x39500000
 800e628:	08012dc0 	.word	0x08012dc0
 800e62c:	fffffc02 	.word	0xfffffc02
 800e630:	7ff00000 	.word	0x7ff00000
 800e634:	46d9      	mov	r9, fp
 800e636:	d15d      	bne.n	800e6f4 <_strtod_l+0x91c>
 800e638:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e63c:	f1b8 0f00 	cmp.w	r8, #0
 800e640:	d02a      	beq.n	800e698 <_strtod_l+0x8c0>
 800e642:	4aab      	ldr	r2, [pc, #684]	@ (800e8f0 <_strtod_l+0xb18>)
 800e644:	4293      	cmp	r3, r2
 800e646:	d12a      	bne.n	800e69e <_strtod_l+0x8c6>
 800e648:	9b06      	ldr	r3, [sp, #24]
 800e64a:	4652      	mov	r2, sl
 800e64c:	b1fb      	cbz	r3, 800e68e <_strtod_l+0x8b6>
 800e64e:	4ba9      	ldr	r3, [pc, #676]	@ (800e8f4 <_strtod_l+0xb1c>)
 800e650:	ea0b 0303 	and.w	r3, fp, r3
 800e654:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800e658:	f04f 31ff 	mov.w	r1, #4294967295
 800e65c:	d81a      	bhi.n	800e694 <_strtod_l+0x8bc>
 800e65e:	0d1b      	lsrs	r3, r3, #20
 800e660:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800e664:	fa01 f303 	lsl.w	r3, r1, r3
 800e668:	429a      	cmp	r2, r3
 800e66a:	d118      	bne.n	800e69e <_strtod_l+0x8c6>
 800e66c:	4ba2      	ldr	r3, [pc, #648]	@ (800e8f8 <_strtod_l+0xb20>)
 800e66e:	4599      	cmp	r9, r3
 800e670:	d102      	bne.n	800e678 <_strtod_l+0x8a0>
 800e672:	3201      	adds	r2, #1
 800e674:	f43f adc0 	beq.w	800e1f8 <_strtod_l+0x420>
 800e678:	4b9e      	ldr	r3, [pc, #632]	@ (800e8f4 <_strtod_l+0xb1c>)
 800e67a:	ea09 0303 	and.w	r3, r9, r3
 800e67e:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 800e682:	f04f 0a00 	mov.w	sl, #0
 800e686:	9b06      	ldr	r3, [sp, #24]
 800e688:	2b00      	cmp	r3, #0
 800e68a:	d1b0      	bne.n	800e5ee <_strtod_l+0x816>
 800e68c:	e5bf      	b.n	800e20e <_strtod_l+0x436>
 800e68e:	f04f 33ff 	mov.w	r3, #4294967295
 800e692:	e7e9      	b.n	800e668 <_strtod_l+0x890>
 800e694:	460b      	mov	r3, r1
 800e696:	e7e7      	b.n	800e668 <_strtod_l+0x890>
 800e698:	ea53 030a 	orrs.w	r3, r3, sl
 800e69c:	d099      	beq.n	800e5d2 <_strtod_l+0x7fa>
 800e69e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e6a0:	b1c3      	cbz	r3, 800e6d4 <_strtod_l+0x8fc>
 800e6a2:	ea13 0f09 	tst.w	r3, r9
 800e6a6:	d0ee      	beq.n	800e686 <_strtod_l+0x8ae>
 800e6a8:	9a06      	ldr	r2, [sp, #24]
 800e6aa:	4650      	mov	r0, sl
 800e6ac:	4659      	mov	r1, fp
 800e6ae:	f1b8 0f00 	cmp.w	r8, #0
 800e6b2:	d013      	beq.n	800e6dc <_strtod_l+0x904>
 800e6b4:	f7ff fb74 	bl	800dda0 <sulp>
 800e6b8:	ee39 7b00 	vadd.f64	d7, d9, d0
 800e6bc:	ec5b ab17 	vmov	sl, fp, d7
 800e6c0:	e7e1      	b.n	800e686 <_strtod_l+0x8ae>
 800e6c2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800e6c6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800e6ca:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800e6ce:	f04f 3aff 	mov.w	sl, #4294967295
 800e6d2:	e7d8      	b.n	800e686 <_strtod_l+0x8ae>
 800e6d4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e6d6:	ea13 0f0a 	tst.w	r3, sl
 800e6da:	e7e4      	b.n	800e6a6 <_strtod_l+0x8ce>
 800e6dc:	f7ff fb60 	bl	800dda0 <sulp>
 800e6e0:	ee39 0b40 	vsub.f64	d0, d9, d0
 800e6e4:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800e6e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e6ec:	ec5b ab10 	vmov	sl, fp, d0
 800e6f0:	d1c9      	bne.n	800e686 <_strtod_l+0x8ae>
 800e6f2:	e615      	b.n	800e320 <_strtod_l+0x548>
 800e6f4:	4629      	mov	r1, r5
 800e6f6:	4620      	mov	r0, r4
 800e6f8:	f002 ff1e 	bl	8011538 <__ratio>
 800e6fc:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 800e700:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800e704:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e708:	d85d      	bhi.n	800e7c6 <_strtod_l+0x9ee>
 800e70a:	f1b8 0f00 	cmp.w	r8, #0
 800e70e:	d164      	bne.n	800e7da <_strtod_l+0xa02>
 800e710:	f1ba 0f00 	cmp.w	sl, #0
 800e714:	d14b      	bne.n	800e7ae <_strtod_l+0x9d6>
 800e716:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e71a:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800e71e:	2b00      	cmp	r3, #0
 800e720:	d160      	bne.n	800e7e4 <_strtod_l+0xa0c>
 800e722:	eeb4 0bc8 	vcmpe.f64	d0, d8
 800e726:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800e72a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e72e:	d401      	bmi.n	800e734 <_strtod_l+0x95c>
 800e730:	ee20 8b08 	vmul.f64	d8, d0, d8
 800e734:	eeb1 ab48 	vneg.f64	d10, d8
 800e738:	486e      	ldr	r0, [pc, #440]	@ (800e8f4 <_strtod_l+0xb1c>)
 800e73a:	4970      	ldr	r1, [pc, #448]	@ (800e8fc <_strtod_l+0xb24>)
 800e73c:	ea09 0700 	and.w	r7, r9, r0
 800e740:	428f      	cmp	r7, r1
 800e742:	ec53 2b1a 	vmov	r2, r3, d10
 800e746:	d17d      	bne.n	800e844 <_strtod_l+0xa6c>
 800e748:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 800e74c:	ec4b ab1c 	vmov	d12, sl, fp
 800e750:	eeb0 0b4c 	vmov.f64	d0, d12
 800e754:	f002 fe28 	bl	80113a8 <__ulp>
 800e758:	4866      	ldr	r0, [pc, #408]	@ (800e8f4 <_strtod_l+0xb1c>)
 800e75a:	eea0 cb0a 	vfma.f64	d12, d0, d10
 800e75e:	ee1c 3a90 	vmov	r3, s25
 800e762:	4a67      	ldr	r2, [pc, #412]	@ (800e900 <_strtod_l+0xb28>)
 800e764:	ea03 0100 	and.w	r1, r3, r0
 800e768:	4291      	cmp	r1, r2
 800e76a:	ec5b ab1c 	vmov	sl, fp, d12
 800e76e:	d93c      	bls.n	800e7ea <_strtod_l+0xa12>
 800e770:	ee19 2a90 	vmov	r2, s19
 800e774:	4b60      	ldr	r3, [pc, #384]	@ (800e8f8 <_strtod_l+0xb20>)
 800e776:	429a      	cmp	r2, r3
 800e778:	d104      	bne.n	800e784 <_strtod_l+0x9ac>
 800e77a:	ee19 3a10 	vmov	r3, s18
 800e77e:	3301      	adds	r3, #1
 800e780:	f43f ad3a 	beq.w	800e1f8 <_strtod_l+0x420>
 800e784:	f8df b170 	ldr.w	fp, [pc, #368]	@ 800e8f8 <_strtod_l+0xb20>
 800e788:	f04f 3aff 	mov.w	sl, #4294967295
 800e78c:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800e78e:	9805      	ldr	r0, [sp, #20]
 800e790:	f002 fad6 	bl	8010d40 <_Bfree>
 800e794:	9805      	ldr	r0, [sp, #20]
 800e796:	4631      	mov	r1, r6
 800e798:	f002 fad2 	bl	8010d40 <_Bfree>
 800e79c:	9805      	ldr	r0, [sp, #20]
 800e79e:	4629      	mov	r1, r5
 800e7a0:	f002 face 	bl	8010d40 <_Bfree>
 800e7a4:	9805      	ldr	r0, [sp, #20]
 800e7a6:	4621      	mov	r1, r4
 800e7a8:	f002 faca 	bl	8010d40 <_Bfree>
 800e7ac:	e625      	b.n	800e3fa <_strtod_l+0x622>
 800e7ae:	f1ba 0f01 	cmp.w	sl, #1
 800e7b2:	d103      	bne.n	800e7bc <_strtod_l+0x9e4>
 800e7b4:	f1bb 0f00 	cmp.w	fp, #0
 800e7b8:	f43f adb2 	beq.w	800e320 <_strtod_l+0x548>
 800e7bc:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 800e7c0:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800e7c4:	e7b8      	b.n	800e738 <_strtod_l+0x960>
 800e7c6:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800e7ca:	ee20 8b08 	vmul.f64	d8, d0, d8
 800e7ce:	f1b8 0f00 	cmp.w	r8, #0
 800e7d2:	d0af      	beq.n	800e734 <_strtod_l+0x95c>
 800e7d4:	eeb0 ab48 	vmov.f64	d10, d8
 800e7d8:	e7ae      	b.n	800e738 <_strtod_l+0x960>
 800e7da:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 800e7de:	eeb0 8b4a 	vmov.f64	d8, d10
 800e7e2:	e7a9      	b.n	800e738 <_strtod_l+0x960>
 800e7e4:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 800e7e8:	e7a6      	b.n	800e738 <_strtod_l+0x960>
 800e7ea:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800e7ee:	9b06      	ldr	r3, [sp, #24]
 800e7f0:	46d9      	mov	r9, fp
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	d1ca      	bne.n	800e78c <_strtod_l+0x9b4>
 800e7f6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e7fa:	0d1b      	lsrs	r3, r3, #20
 800e7fc:	051b      	lsls	r3, r3, #20
 800e7fe:	429f      	cmp	r7, r3
 800e800:	d1c4      	bne.n	800e78c <_strtod_l+0x9b4>
 800e802:	ec51 0b18 	vmov	r0, r1, d8
 800e806:	f7f1 ffaf 	bl	8000768 <__aeabi_d2lz>
 800e80a:	f7f1 ff67 	bl	80006dc <__aeabi_l2d>
 800e80e:	f3cb 0913 	ubfx	r9, fp, #0, #20
 800e812:	ec41 0b17 	vmov	d7, r0, r1
 800e816:	ea49 090a 	orr.w	r9, r9, sl
 800e81a:	ea59 0908 	orrs.w	r9, r9, r8
 800e81e:	ee38 8b47 	vsub.f64	d8, d8, d7
 800e822:	d03c      	beq.n	800e89e <_strtod_l+0xac6>
 800e824:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 800e8d8 <_strtod_l+0xb00>
 800e828:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800e82c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e830:	f53f aced 	bmi.w	800e20e <_strtod_l+0x436>
 800e834:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 800e8e0 <_strtod_l+0xb08>
 800e838:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800e83c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e840:	dda4      	ble.n	800e78c <_strtod_l+0x9b4>
 800e842:	e4e4      	b.n	800e20e <_strtod_l+0x436>
 800e844:	9906      	ldr	r1, [sp, #24]
 800e846:	b1e1      	cbz	r1, 800e882 <_strtod_l+0xaaa>
 800e848:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 800e84c:	d819      	bhi.n	800e882 <_strtod_l+0xaaa>
 800e84e:	eeb4 8bcb 	vcmpe.f64	d8, d11
 800e852:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e856:	d811      	bhi.n	800e87c <_strtod_l+0xaa4>
 800e858:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 800e85c:	ee18 3a10 	vmov	r3, s16
 800e860:	2b01      	cmp	r3, #1
 800e862:	bf38      	it	cc
 800e864:	2301      	movcc	r3, #1
 800e866:	ee08 3a10 	vmov	s16, r3
 800e86a:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 800e86e:	f1b8 0f00 	cmp.w	r8, #0
 800e872:	d111      	bne.n	800e898 <_strtod_l+0xac0>
 800e874:	eeb1 7b48 	vneg.f64	d7, d8
 800e878:	ec53 2b17 	vmov	r2, r3, d7
 800e87c:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 800e880:	1bcb      	subs	r3, r1, r7
 800e882:	eeb0 0b49 	vmov.f64	d0, d9
 800e886:	ec43 2b1a 	vmov	d10, r2, r3
 800e88a:	f002 fd8d 	bl	80113a8 <__ulp>
 800e88e:	eeaa 9b00 	vfma.f64	d9, d10, d0
 800e892:	ec5b ab19 	vmov	sl, fp, d9
 800e896:	e7aa      	b.n	800e7ee <_strtod_l+0xa16>
 800e898:	eeb0 7b48 	vmov.f64	d7, d8
 800e89c:	e7ec      	b.n	800e878 <_strtod_l+0xaa0>
 800e89e:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 800e8e8 <_strtod_l+0xb10>
 800e8a2:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800e8a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e8aa:	f57f af6f 	bpl.w	800e78c <_strtod_l+0x9b4>
 800e8ae:	e4ae      	b.n	800e20e <_strtod_l+0x436>
 800e8b0:	2300      	movs	r3, #0
 800e8b2:	9308      	str	r3, [sp, #32]
 800e8b4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e8b6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e8b8:	6013      	str	r3, [r2, #0]
 800e8ba:	f7ff bacc 	b.w	800de56 <_strtod_l+0x7e>
 800e8be:	2a65      	cmp	r2, #101	@ 0x65
 800e8c0:	f43f abbc 	beq.w	800e03c <_strtod_l+0x264>
 800e8c4:	2a45      	cmp	r2, #69	@ 0x45
 800e8c6:	f43f abb9 	beq.w	800e03c <_strtod_l+0x264>
 800e8ca:	2301      	movs	r3, #1
 800e8cc:	9306      	str	r3, [sp, #24]
 800e8ce:	f7ff bbf0 	b.w	800e0b2 <_strtod_l+0x2da>
 800e8d2:	bf00      	nop
 800e8d4:	f3af 8000 	nop.w
 800e8d8:	94a03595 	.word	0x94a03595
 800e8dc:	3fdfffff 	.word	0x3fdfffff
 800e8e0:	35afe535 	.word	0x35afe535
 800e8e4:	3fe00000 	.word	0x3fe00000
 800e8e8:	94a03595 	.word	0x94a03595
 800e8ec:	3fcfffff 	.word	0x3fcfffff
 800e8f0:	000fffff 	.word	0x000fffff
 800e8f4:	7ff00000 	.word	0x7ff00000
 800e8f8:	7fefffff 	.word	0x7fefffff
 800e8fc:	7fe00000 	.word	0x7fe00000
 800e900:	7c9fffff 	.word	0x7c9fffff

0800e904 <_strtod_r>:
 800e904:	4b01      	ldr	r3, [pc, #4]	@ (800e90c <_strtod_r+0x8>)
 800e906:	f7ff ba67 	b.w	800ddd8 <_strtod_l>
 800e90a:	bf00      	nop
 800e90c:	24000070 	.word	0x24000070

0800e910 <__cvt>:
 800e910:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e912:	ed2d 8b02 	vpush	{d8}
 800e916:	eeb0 8b40 	vmov.f64	d8, d0
 800e91a:	b085      	sub	sp, #20
 800e91c:	4617      	mov	r7, r2
 800e91e:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800e920:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e922:	ee18 2a90 	vmov	r2, s17
 800e926:	f025 0520 	bic.w	r5, r5, #32
 800e92a:	2a00      	cmp	r2, #0
 800e92c:	bfb6      	itet	lt
 800e92e:	222d      	movlt	r2, #45	@ 0x2d
 800e930:	2200      	movge	r2, #0
 800e932:	eeb1 8b40 	vneglt.f64	d8, d0
 800e936:	2d46      	cmp	r5, #70	@ 0x46
 800e938:	460c      	mov	r4, r1
 800e93a:	701a      	strb	r2, [r3, #0]
 800e93c:	d004      	beq.n	800e948 <__cvt+0x38>
 800e93e:	2d45      	cmp	r5, #69	@ 0x45
 800e940:	d100      	bne.n	800e944 <__cvt+0x34>
 800e942:	3401      	adds	r4, #1
 800e944:	2102      	movs	r1, #2
 800e946:	e000      	b.n	800e94a <__cvt+0x3a>
 800e948:	2103      	movs	r1, #3
 800e94a:	ab03      	add	r3, sp, #12
 800e94c:	9301      	str	r3, [sp, #4]
 800e94e:	ab02      	add	r3, sp, #8
 800e950:	9300      	str	r3, [sp, #0]
 800e952:	4622      	mov	r2, r4
 800e954:	4633      	mov	r3, r6
 800e956:	eeb0 0b48 	vmov.f64	d0, d8
 800e95a:	f001 f8c5 	bl	800fae8 <_dtoa_r>
 800e95e:	2d47      	cmp	r5, #71	@ 0x47
 800e960:	d114      	bne.n	800e98c <__cvt+0x7c>
 800e962:	07fb      	lsls	r3, r7, #31
 800e964:	d50a      	bpl.n	800e97c <__cvt+0x6c>
 800e966:	1902      	adds	r2, r0, r4
 800e968:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800e96c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e970:	bf08      	it	eq
 800e972:	9203      	streq	r2, [sp, #12]
 800e974:	2130      	movs	r1, #48	@ 0x30
 800e976:	9b03      	ldr	r3, [sp, #12]
 800e978:	4293      	cmp	r3, r2
 800e97a:	d319      	bcc.n	800e9b0 <__cvt+0xa0>
 800e97c:	9b03      	ldr	r3, [sp, #12]
 800e97e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e980:	1a1b      	subs	r3, r3, r0
 800e982:	6013      	str	r3, [r2, #0]
 800e984:	b005      	add	sp, #20
 800e986:	ecbd 8b02 	vpop	{d8}
 800e98a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e98c:	2d46      	cmp	r5, #70	@ 0x46
 800e98e:	eb00 0204 	add.w	r2, r0, r4
 800e992:	d1e9      	bne.n	800e968 <__cvt+0x58>
 800e994:	7803      	ldrb	r3, [r0, #0]
 800e996:	2b30      	cmp	r3, #48	@ 0x30
 800e998:	d107      	bne.n	800e9aa <__cvt+0x9a>
 800e99a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800e99e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e9a2:	bf1c      	itt	ne
 800e9a4:	f1c4 0401 	rsbne	r4, r4, #1
 800e9a8:	6034      	strne	r4, [r6, #0]
 800e9aa:	6833      	ldr	r3, [r6, #0]
 800e9ac:	441a      	add	r2, r3
 800e9ae:	e7db      	b.n	800e968 <__cvt+0x58>
 800e9b0:	1c5c      	adds	r4, r3, #1
 800e9b2:	9403      	str	r4, [sp, #12]
 800e9b4:	7019      	strb	r1, [r3, #0]
 800e9b6:	e7de      	b.n	800e976 <__cvt+0x66>

0800e9b8 <__exponent>:
 800e9b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e9ba:	2900      	cmp	r1, #0
 800e9bc:	bfba      	itte	lt
 800e9be:	4249      	neglt	r1, r1
 800e9c0:	232d      	movlt	r3, #45	@ 0x2d
 800e9c2:	232b      	movge	r3, #43	@ 0x2b
 800e9c4:	2909      	cmp	r1, #9
 800e9c6:	7002      	strb	r2, [r0, #0]
 800e9c8:	7043      	strb	r3, [r0, #1]
 800e9ca:	dd29      	ble.n	800ea20 <__exponent+0x68>
 800e9cc:	f10d 0307 	add.w	r3, sp, #7
 800e9d0:	461d      	mov	r5, r3
 800e9d2:	270a      	movs	r7, #10
 800e9d4:	461a      	mov	r2, r3
 800e9d6:	fbb1 f6f7 	udiv	r6, r1, r7
 800e9da:	fb07 1416 	mls	r4, r7, r6, r1
 800e9de:	3430      	adds	r4, #48	@ 0x30
 800e9e0:	f802 4c01 	strb.w	r4, [r2, #-1]
 800e9e4:	460c      	mov	r4, r1
 800e9e6:	2c63      	cmp	r4, #99	@ 0x63
 800e9e8:	f103 33ff 	add.w	r3, r3, #4294967295
 800e9ec:	4631      	mov	r1, r6
 800e9ee:	dcf1      	bgt.n	800e9d4 <__exponent+0x1c>
 800e9f0:	3130      	adds	r1, #48	@ 0x30
 800e9f2:	1e94      	subs	r4, r2, #2
 800e9f4:	f803 1c01 	strb.w	r1, [r3, #-1]
 800e9f8:	1c41      	adds	r1, r0, #1
 800e9fa:	4623      	mov	r3, r4
 800e9fc:	42ab      	cmp	r3, r5
 800e9fe:	d30a      	bcc.n	800ea16 <__exponent+0x5e>
 800ea00:	f10d 0309 	add.w	r3, sp, #9
 800ea04:	1a9b      	subs	r3, r3, r2
 800ea06:	42ac      	cmp	r4, r5
 800ea08:	bf88      	it	hi
 800ea0a:	2300      	movhi	r3, #0
 800ea0c:	3302      	adds	r3, #2
 800ea0e:	4403      	add	r3, r0
 800ea10:	1a18      	subs	r0, r3, r0
 800ea12:	b003      	add	sp, #12
 800ea14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ea16:	f813 6b01 	ldrb.w	r6, [r3], #1
 800ea1a:	f801 6f01 	strb.w	r6, [r1, #1]!
 800ea1e:	e7ed      	b.n	800e9fc <__exponent+0x44>
 800ea20:	2330      	movs	r3, #48	@ 0x30
 800ea22:	3130      	adds	r1, #48	@ 0x30
 800ea24:	7083      	strb	r3, [r0, #2]
 800ea26:	70c1      	strb	r1, [r0, #3]
 800ea28:	1d03      	adds	r3, r0, #4
 800ea2a:	e7f1      	b.n	800ea10 <__exponent+0x58>
 800ea2c:	0000      	movs	r0, r0
	...

0800ea30 <_printf_float>:
 800ea30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea34:	b08d      	sub	sp, #52	@ 0x34
 800ea36:	460c      	mov	r4, r1
 800ea38:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800ea3c:	4616      	mov	r6, r2
 800ea3e:	461f      	mov	r7, r3
 800ea40:	4605      	mov	r5, r0
 800ea42:	f000 ff21 	bl	800f888 <_localeconv_r>
 800ea46:	f8d0 b000 	ldr.w	fp, [r0]
 800ea4a:	4658      	mov	r0, fp
 800ea4c:	f7f1 fcb0 	bl	80003b0 <strlen>
 800ea50:	2300      	movs	r3, #0
 800ea52:	930a      	str	r3, [sp, #40]	@ 0x28
 800ea54:	f8d8 3000 	ldr.w	r3, [r8]
 800ea58:	f894 9018 	ldrb.w	r9, [r4, #24]
 800ea5c:	6822      	ldr	r2, [r4, #0]
 800ea5e:	9005      	str	r0, [sp, #20]
 800ea60:	3307      	adds	r3, #7
 800ea62:	f023 0307 	bic.w	r3, r3, #7
 800ea66:	f103 0108 	add.w	r1, r3, #8
 800ea6a:	f8c8 1000 	str.w	r1, [r8]
 800ea6e:	ed93 0b00 	vldr	d0, [r3]
 800ea72:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 800ecd0 <_printf_float+0x2a0>
 800ea76:	eeb0 7bc0 	vabs.f64	d7, d0
 800ea7a:	eeb4 7b46 	vcmp.f64	d7, d6
 800ea7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea82:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 800ea86:	dd24      	ble.n	800ead2 <_printf_float+0xa2>
 800ea88:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800ea8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea90:	d502      	bpl.n	800ea98 <_printf_float+0x68>
 800ea92:	232d      	movs	r3, #45	@ 0x2d
 800ea94:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ea98:	498f      	ldr	r1, [pc, #572]	@ (800ecd8 <_printf_float+0x2a8>)
 800ea9a:	4b90      	ldr	r3, [pc, #576]	@ (800ecdc <_printf_float+0x2ac>)
 800ea9c:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 800eaa0:	bf94      	ite	ls
 800eaa2:	4688      	movls	r8, r1
 800eaa4:	4698      	movhi	r8, r3
 800eaa6:	f022 0204 	bic.w	r2, r2, #4
 800eaaa:	2303      	movs	r3, #3
 800eaac:	6123      	str	r3, [r4, #16]
 800eaae:	6022      	str	r2, [r4, #0]
 800eab0:	f04f 0a00 	mov.w	sl, #0
 800eab4:	9700      	str	r7, [sp, #0]
 800eab6:	4633      	mov	r3, r6
 800eab8:	aa0b      	add	r2, sp, #44	@ 0x2c
 800eaba:	4621      	mov	r1, r4
 800eabc:	4628      	mov	r0, r5
 800eabe:	f000 f9d1 	bl	800ee64 <_printf_common>
 800eac2:	3001      	adds	r0, #1
 800eac4:	f040 8089 	bne.w	800ebda <_printf_float+0x1aa>
 800eac8:	f04f 30ff 	mov.w	r0, #4294967295
 800eacc:	b00d      	add	sp, #52	@ 0x34
 800eace:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ead2:	eeb4 0b40 	vcmp.f64	d0, d0
 800ead6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eada:	d709      	bvc.n	800eaf0 <_printf_float+0xc0>
 800eadc:	ee10 3a90 	vmov	r3, s1
 800eae0:	2b00      	cmp	r3, #0
 800eae2:	bfbc      	itt	lt
 800eae4:	232d      	movlt	r3, #45	@ 0x2d
 800eae6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800eaea:	497d      	ldr	r1, [pc, #500]	@ (800ece0 <_printf_float+0x2b0>)
 800eaec:	4b7d      	ldr	r3, [pc, #500]	@ (800ece4 <_printf_float+0x2b4>)
 800eaee:	e7d5      	b.n	800ea9c <_printf_float+0x6c>
 800eaf0:	6863      	ldr	r3, [r4, #4]
 800eaf2:	1c59      	adds	r1, r3, #1
 800eaf4:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 800eaf8:	d139      	bne.n	800eb6e <_printf_float+0x13e>
 800eafa:	2306      	movs	r3, #6
 800eafc:	6063      	str	r3, [r4, #4]
 800eafe:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800eb02:	2300      	movs	r3, #0
 800eb04:	6022      	str	r2, [r4, #0]
 800eb06:	9303      	str	r3, [sp, #12]
 800eb08:	ab0a      	add	r3, sp, #40	@ 0x28
 800eb0a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800eb0e:	ab09      	add	r3, sp, #36	@ 0x24
 800eb10:	9300      	str	r3, [sp, #0]
 800eb12:	6861      	ldr	r1, [r4, #4]
 800eb14:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800eb18:	4628      	mov	r0, r5
 800eb1a:	f7ff fef9 	bl	800e910 <__cvt>
 800eb1e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800eb22:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800eb24:	4680      	mov	r8, r0
 800eb26:	d129      	bne.n	800eb7c <_printf_float+0x14c>
 800eb28:	1cc8      	adds	r0, r1, #3
 800eb2a:	db02      	blt.n	800eb32 <_printf_float+0x102>
 800eb2c:	6863      	ldr	r3, [r4, #4]
 800eb2e:	4299      	cmp	r1, r3
 800eb30:	dd41      	ble.n	800ebb6 <_printf_float+0x186>
 800eb32:	f1a9 0902 	sub.w	r9, r9, #2
 800eb36:	fa5f f989 	uxtb.w	r9, r9
 800eb3a:	3901      	subs	r1, #1
 800eb3c:	464a      	mov	r2, r9
 800eb3e:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800eb42:	9109      	str	r1, [sp, #36]	@ 0x24
 800eb44:	f7ff ff38 	bl	800e9b8 <__exponent>
 800eb48:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800eb4a:	1813      	adds	r3, r2, r0
 800eb4c:	2a01      	cmp	r2, #1
 800eb4e:	4682      	mov	sl, r0
 800eb50:	6123      	str	r3, [r4, #16]
 800eb52:	dc02      	bgt.n	800eb5a <_printf_float+0x12a>
 800eb54:	6822      	ldr	r2, [r4, #0]
 800eb56:	07d2      	lsls	r2, r2, #31
 800eb58:	d501      	bpl.n	800eb5e <_printf_float+0x12e>
 800eb5a:	3301      	adds	r3, #1
 800eb5c:	6123      	str	r3, [r4, #16]
 800eb5e:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800eb62:	2b00      	cmp	r3, #0
 800eb64:	d0a6      	beq.n	800eab4 <_printf_float+0x84>
 800eb66:	232d      	movs	r3, #45	@ 0x2d
 800eb68:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800eb6c:	e7a2      	b.n	800eab4 <_printf_float+0x84>
 800eb6e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800eb72:	d1c4      	bne.n	800eafe <_printf_float+0xce>
 800eb74:	2b00      	cmp	r3, #0
 800eb76:	d1c2      	bne.n	800eafe <_printf_float+0xce>
 800eb78:	2301      	movs	r3, #1
 800eb7a:	e7bf      	b.n	800eafc <_printf_float+0xcc>
 800eb7c:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800eb80:	d9db      	bls.n	800eb3a <_printf_float+0x10a>
 800eb82:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800eb86:	d118      	bne.n	800ebba <_printf_float+0x18a>
 800eb88:	2900      	cmp	r1, #0
 800eb8a:	6863      	ldr	r3, [r4, #4]
 800eb8c:	dd0b      	ble.n	800eba6 <_printf_float+0x176>
 800eb8e:	6121      	str	r1, [r4, #16]
 800eb90:	b913      	cbnz	r3, 800eb98 <_printf_float+0x168>
 800eb92:	6822      	ldr	r2, [r4, #0]
 800eb94:	07d0      	lsls	r0, r2, #31
 800eb96:	d502      	bpl.n	800eb9e <_printf_float+0x16e>
 800eb98:	3301      	adds	r3, #1
 800eb9a:	440b      	add	r3, r1
 800eb9c:	6123      	str	r3, [r4, #16]
 800eb9e:	65a1      	str	r1, [r4, #88]	@ 0x58
 800eba0:	f04f 0a00 	mov.w	sl, #0
 800eba4:	e7db      	b.n	800eb5e <_printf_float+0x12e>
 800eba6:	b913      	cbnz	r3, 800ebae <_printf_float+0x17e>
 800eba8:	6822      	ldr	r2, [r4, #0]
 800ebaa:	07d2      	lsls	r2, r2, #31
 800ebac:	d501      	bpl.n	800ebb2 <_printf_float+0x182>
 800ebae:	3302      	adds	r3, #2
 800ebb0:	e7f4      	b.n	800eb9c <_printf_float+0x16c>
 800ebb2:	2301      	movs	r3, #1
 800ebb4:	e7f2      	b.n	800eb9c <_printf_float+0x16c>
 800ebb6:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800ebba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ebbc:	4299      	cmp	r1, r3
 800ebbe:	db05      	blt.n	800ebcc <_printf_float+0x19c>
 800ebc0:	6823      	ldr	r3, [r4, #0]
 800ebc2:	6121      	str	r1, [r4, #16]
 800ebc4:	07d8      	lsls	r0, r3, #31
 800ebc6:	d5ea      	bpl.n	800eb9e <_printf_float+0x16e>
 800ebc8:	1c4b      	adds	r3, r1, #1
 800ebca:	e7e7      	b.n	800eb9c <_printf_float+0x16c>
 800ebcc:	2900      	cmp	r1, #0
 800ebce:	bfd4      	ite	le
 800ebd0:	f1c1 0202 	rsble	r2, r1, #2
 800ebd4:	2201      	movgt	r2, #1
 800ebd6:	4413      	add	r3, r2
 800ebd8:	e7e0      	b.n	800eb9c <_printf_float+0x16c>
 800ebda:	6823      	ldr	r3, [r4, #0]
 800ebdc:	055a      	lsls	r2, r3, #21
 800ebde:	d407      	bmi.n	800ebf0 <_printf_float+0x1c0>
 800ebe0:	6923      	ldr	r3, [r4, #16]
 800ebe2:	4642      	mov	r2, r8
 800ebe4:	4631      	mov	r1, r6
 800ebe6:	4628      	mov	r0, r5
 800ebe8:	47b8      	blx	r7
 800ebea:	3001      	adds	r0, #1
 800ebec:	d12a      	bne.n	800ec44 <_printf_float+0x214>
 800ebee:	e76b      	b.n	800eac8 <_printf_float+0x98>
 800ebf0:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800ebf4:	f240 80e0 	bls.w	800edb8 <_printf_float+0x388>
 800ebf8:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800ebfc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ec00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec04:	d133      	bne.n	800ec6e <_printf_float+0x23e>
 800ec06:	4a38      	ldr	r2, [pc, #224]	@ (800ece8 <_printf_float+0x2b8>)
 800ec08:	2301      	movs	r3, #1
 800ec0a:	4631      	mov	r1, r6
 800ec0c:	4628      	mov	r0, r5
 800ec0e:	47b8      	blx	r7
 800ec10:	3001      	adds	r0, #1
 800ec12:	f43f af59 	beq.w	800eac8 <_printf_float+0x98>
 800ec16:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800ec1a:	4543      	cmp	r3, r8
 800ec1c:	db02      	blt.n	800ec24 <_printf_float+0x1f4>
 800ec1e:	6823      	ldr	r3, [r4, #0]
 800ec20:	07d8      	lsls	r0, r3, #31
 800ec22:	d50f      	bpl.n	800ec44 <_printf_float+0x214>
 800ec24:	9b05      	ldr	r3, [sp, #20]
 800ec26:	465a      	mov	r2, fp
 800ec28:	4631      	mov	r1, r6
 800ec2a:	4628      	mov	r0, r5
 800ec2c:	47b8      	blx	r7
 800ec2e:	3001      	adds	r0, #1
 800ec30:	f43f af4a 	beq.w	800eac8 <_printf_float+0x98>
 800ec34:	f04f 0900 	mov.w	r9, #0
 800ec38:	f108 38ff 	add.w	r8, r8, #4294967295
 800ec3c:	f104 0a1a 	add.w	sl, r4, #26
 800ec40:	45c8      	cmp	r8, r9
 800ec42:	dc09      	bgt.n	800ec58 <_printf_float+0x228>
 800ec44:	6823      	ldr	r3, [r4, #0]
 800ec46:	079b      	lsls	r3, r3, #30
 800ec48:	f100 8107 	bmi.w	800ee5a <_printf_float+0x42a>
 800ec4c:	68e0      	ldr	r0, [r4, #12]
 800ec4e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ec50:	4298      	cmp	r0, r3
 800ec52:	bfb8      	it	lt
 800ec54:	4618      	movlt	r0, r3
 800ec56:	e739      	b.n	800eacc <_printf_float+0x9c>
 800ec58:	2301      	movs	r3, #1
 800ec5a:	4652      	mov	r2, sl
 800ec5c:	4631      	mov	r1, r6
 800ec5e:	4628      	mov	r0, r5
 800ec60:	47b8      	blx	r7
 800ec62:	3001      	adds	r0, #1
 800ec64:	f43f af30 	beq.w	800eac8 <_printf_float+0x98>
 800ec68:	f109 0901 	add.w	r9, r9, #1
 800ec6c:	e7e8      	b.n	800ec40 <_printf_float+0x210>
 800ec6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ec70:	2b00      	cmp	r3, #0
 800ec72:	dc3b      	bgt.n	800ecec <_printf_float+0x2bc>
 800ec74:	4a1c      	ldr	r2, [pc, #112]	@ (800ece8 <_printf_float+0x2b8>)
 800ec76:	2301      	movs	r3, #1
 800ec78:	4631      	mov	r1, r6
 800ec7a:	4628      	mov	r0, r5
 800ec7c:	47b8      	blx	r7
 800ec7e:	3001      	adds	r0, #1
 800ec80:	f43f af22 	beq.w	800eac8 <_printf_float+0x98>
 800ec84:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800ec88:	ea59 0303 	orrs.w	r3, r9, r3
 800ec8c:	d102      	bne.n	800ec94 <_printf_float+0x264>
 800ec8e:	6823      	ldr	r3, [r4, #0]
 800ec90:	07d9      	lsls	r1, r3, #31
 800ec92:	d5d7      	bpl.n	800ec44 <_printf_float+0x214>
 800ec94:	9b05      	ldr	r3, [sp, #20]
 800ec96:	465a      	mov	r2, fp
 800ec98:	4631      	mov	r1, r6
 800ec9a:	4628      	mov	r0, r5
 800ec9c:	47b8      	blx	r7
 800ec9e:	3001      	adds	r0, #1
 800eca0:	f43f af12 	beq.w	800eac8 <_printf_float+0x98>
 800eca4:	f04f 0a00 	mov.w	sl, #0
 800eca8:	f104 0b1a 	add.w	fp, r4, #26
 800ecac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ecae:	425b      	negs	r3, r3
 800ecb0:	4553      	cmp	r3, sl
 800ecb2:	dc01      	bgt.n	800ecb8 <_printf_float+0x288>
 800ecb4:	464b      	mov	r3, r9
 800ecb6:	e794      	b.n	800ebe2 <_printf_float+0x1b2>
 800ecb8:	2301      	movs	r3, #1
 800ecba:	465a      	mov	r2, fp
 800ecbc:	4631      	mov	r1, r6
 800ecbe:	4628      	mov	r0, r5
 800ecc0:	47b8      	blx	r7
 800ecc2:	3001      	adds	r0, #1
 800ecc4:	f43f af00 	beq.w	800eac8 <_printf_float+0x98>
 800ecc8:	f10a 0a01 	add.w	sl, sl, #1
 800eccc:	e7ee      	b.n	800ecac <_printf_float+0x27c>
 800ecce:	bf00      	nop
 800ecd0:	ffffffff 	.word	0xffffffff
 800ecd4:	7fefffff 	.word	0x7fefffff
 800ecd8:	08012de8 	.word	0x08012de8
 800ecdc:	08012dec 	.word	0x08012dec
 800ece0:	08012df0 	.word	0x08012df0
 800ece4:	08012df4 	.word	0x08012df4
 800ece8:	08013198 	.word	0x08013198
 800ecec:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ecee:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800ecf2:	4553      	cmp	r3, sl
 800ecf4:	bfa8      	it	ge
 800ecf6:	4653      	movge	r3, sl
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	4699      	mov	r9, r3
 800ecfc:	dc37      	bgt.n	800ed6e <_printf_float+0x33e>
 800ecfe:	2300      	movs	r3, #0
 800ed00:	9307      	str	r3, [sp, #28]
 800ed02:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ed06:	f104 021a 	add.w	r2, r4, #26
 800ed0a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ed0c:	9907      	ldr	r1, [sp, #28]
 800ed0e:	9306      	str	r3, [sp, #24]
 800ed10:	eba3 0309 	sub.w	r3, r3, r9
 800ed14:	428b      	cmp	r3, r1
 800ed16:	dc31      	bgt.n	800ed7c <_printf_float+0x34c>
 800ed18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ed1a:	459a      	cmp	sl, r3
 800ed1c:	dc3b      	bgt.n	800ed96 <_printf_float+0x366>
 800ed1e:	6823      	ldr	r3, [r4, #0]
 800ed20:	07da      	lsls	r2, r3, #31
 800ed22:	d438      	bmi.n	800ed96 <_printf_float+0x366>
 800ed24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ed26:	ebaa 0903 	sub.w	r9, sl, r3
 800ed2a:	9b06      	ldr	r3, [sp, #24]
 800ed2c:	ebaa 0303 	sub.w	r3, sl, r3
 800ed30:	4599      	cmp	r9, r3
 800ed32:	bfa8      	it	ge
 800ed34:	4699      	movge	r9, r3
 800ed36:	f1b9 0f00 	cmp.w	r9, #0
 800ed3a:	dc34      	bgt.n	800eda6 <_printf_float+0x376>
 800ed3c:	f04f 0800 	mov.w	r8, #0
 800ed40:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ed44:	f104 0b1a 	add.w	fp, r4, #26
 800ed48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ed4a:	ebaa 0303 	sub.w	r3, sl, r3
 800ed4e:	eba3 0309 	sub.w	r3, r3, r9
 800ed52:	4543      	cmp	r3, r8
 800ed54:	f77f af76 	ble.w	800ec44 <_printf_float+0x214>
 800ed58:	2301      	movs	r3, #1
 800ed5a:	465a      	mov	r2, fp
 800ed5c:	4631      	mov	r1, r6
 800ed5e:	4628      	mov	r0, r5
 800ed60:	47b8      	blx	r7
 800ed62:	3001      	adds	r0, #1
 800ed64:	f43f aeb0 	beq.w	800eac8 <_printf_float+0x98>
 800ed68:	f108 0801 	add.w	r8, r8, #1
 800ed6c:	e7ec      	b.n	800ed48 <_printf_float+0x318>
 800ed6e:	4642      	mov	r2, r8
 800ed70:	4631      	mov	r1, r6
 800ed72:	4628      	mov	r0, r5
 800ed74:	47b8      	blx	r7
 800ed76:	3001      	adds	r0, #1
 800ed78:	d1c1      	bne.n	800ecfe <_printf_float+0x2ce>
 800ed7a:	e6a5      	b.n	800eac8 <_printf_float+0x98>
 800ed7c:	2301      	movs	r3, #1
 800ed7e:	4631      	mov	r1, r6
 800ed80:	4628      	mov	r0, r5
 800ed82:	9206      	str	r2, [sp, #24]
 800ed84:	47b8      	blx	r7
 800ed86:	3001      	adds	r0, #1
 800ed88:	f43f ae9e 	beq.w	800eac8 <_printf_float+0x98>
 800ed8c:	9b07      	ldr	r3, [sp, #28]
 800ed8e:	9a06      	ldr	r2, [sp, #24]
 800ed90:	3301      	adds	r3, #1
 800ed92:	9307      	str	r3, [sp, #28]
 800ed94:	e7b9      	b.n	800ed0a <_printf_float+0x2da>
 800ed96:	9b05      	ldr	r3, [sp, #20]
 800ed98:	465a      	mov	r2, fp
 800ed9a:	4631      	mov	r1, r6
 800ed9c:	4628      	mov	r0, r5
 800ed9e:	47b8      	blx	r7
 800eda0:	3001      	adds	r0, #1
 800eda2:	d1bf      	bne.n	800ed24 <_printf_float+0x2f4>
 800eda4:	e690      	b.n	800eac8 <_printf_float+0x98>
 800eda6:	9a06      	ldr	r2, [sp, #24]
 800eda8:	464b      	mov	r3, r9
 800edaa:	4442      	add	r2, r8
 800edac:	4631      	mov	r1, r6
 800edae:	4628      	mov	r0, r5
 800edb0:	47b8      	blx	r7
 800edb2:	3001      	adds	r0, #1
 800edb4:	d1c2      	bne.n	800ed3c <_printf_float+0x30c>
 800edb6:	e687      	b.n	800eac8 <_printf_float+0x98>
 800edb8:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800edbc:	f1b9 0f01 	cmp.w	r9, #1
 800edc0:	dc01      	bgt.n	800edc6 <_printf_float+0x396>
 800edc2:	07db      	lsls	r3, r3, #31
 800edc4:	d536      	bpl.n	800ee34 <_printf_float+0x404>
 800edc6:	2301      	movs	r3, #1
 800edc8:	4642      	mov	r2, r8
 800edca:	4631      	mov	r1, r6
 800edcc:	4628      	mov	r0, r5
 800edce:	47b8      	blx	r7
 800edd0:	3001      	adds	r0, #1
 800edd2:	f43f ae79 	beq.w	800eac8 <_printf_float+0x98>
 800edd6:	9b05      	ldr	r3, [sp, #20]
 800edd8:	465a      	mov	r2, fp
 800edda:	4631      	mov	r1, r6
 800eddc:	4628      	mov	r0, r5
 800edde:	47b8      	blx	r7
 800ede0:	3001      	adds	r0, #1
 800ede2:	f43f ae71 	beq.w	800eac8 <_printf_float+0x98>
 800ede6:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800edea:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800edee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800edf2:	f109 39ff 	add.w	r9, r9, #4294967295
 800edf6:	d018      	beq.n	800ee2a <_printf_float+0x3fa>
 800edf8:	464b      	mov	r3, r9
 800edfa:	f108 0201 	add.w	r2, r8, #1
 800edfe:	4631      	mov	r1, r6
 800ee00:	4628      	mov	r0, r5
 800ee02:	47b8      	blx	r7
 800ee04:	3001      	adds	r0, #1
 800ee06:	d10c      	bne.n	800ee22 <_printf_float+0x3f2>
 800ee08:	e65e      	b.n	800eac8 <_printf_float+0x98>
 800ee0a:	2301      	movs	r3, #1
 800ee0c:	465a      	mov	r2, fp
 800ee0e:	4631      	mov	r1, r6
 800ee10:	4628      	mov	r0, r5
 800ee12:	47b8      	blx	r7
 800ee14:	3001      	adds	r0, #1
 800ee16:	f43f ae57 	beq.w	800eac8 <_printf_float+0x98>
 800ee1a:	f108 0801 	add.w	r8, r8, #1
 800ee1e:	45c8      	cmp	r8, r9
 800ee20:	dbf3      	blt.n	800ee0a <_printf_float+0x3da>
 800ee22:	4653      	mov	r3, sl
 800ee24:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800ee28:	e6dc      	b.n	800ebe4 <_printf_float+0x1b4>
 800ee2a:	f04f 0800 	mov.w	r8, #0
 800ee2e:	f104 0b1a 	add.w	fp, r4, #26
 800ee32:	e7f4      	b.n	800ee1e <_printf_float+0x3ee>
 800ee34:	2301      	movs	r3, #1
 800ee36:	4642      	mov	r2, r8
 800ee38:	e7e1      	b.n	800edfe <_printf_float+0x3ce>
 800ee3a:	2301      	movs	r3, #1
 800ee3c:	464a      	mov	r2, r9
 800ee3e:	4631      	mov	r1, r6
 800ee40:	4628      	mov	r0, r5
 800ee42:	47b8      	blx	r7
 800ee44:	3001      	adds	r0, #1
 800ee46:	f43f ae3f 	beq.w	800eac8 <_printf_float+0x98>
 800ee4a:	f108 0801 	add.w	r8, r8, #1
 800ee4e:	68e3      	ldr	r3, [r4, #12]
 800ee50:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ee52:	1a5b      	subs	r3, r3, r1
 800ee54:	4543      	cmp	r3, r8
 800ee56:	dcf0      	bgt.n	800ee3a <_printf_float+0x40a>
 800ee58:	e6f8      	b.n	800ec4c <_printf_float+0x21c>
 800ee5a:	f04f 0800 	mov.w	r8, #0
 800ee5e:	f104 0919 	add.w	r9, r4, #25
 800ee62:	e7f4      	b.n	800ee4e <_printf_float+0x41e>

0800ee64 <_printf_common>:
 800ee64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ee68:	4616      	mov	r6, r2
 800ee6a:	4698      	mov	r8, r3
 800ee6c:	688a      	ldr	r2, [r1, #8]
 800ee6e:	690b      	ldr	r3, [r1, #16]
 800ee70:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ee74:	4293      	cmp	r3, r2
 800ee76:	bfb8      	it	lt
 800ee78:	4613      	movlt	r3, r2
 800ee7a:	6033      	str	r3, [r6, #0]
 800ee7c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ee80:	4607      	mov	r7, r0
 800ee82:	460c      	mov	r4, r1
 800ee84:	b10a      	cbz	r2, 800ee8a <_printf_common+0x26>
 800ee86:	3301      	adds	r3, #1
 800ee88:	6033      	str	r3, [r6, #0]
 800ee8a:	6823      	ldr	r3, [r4, #0]
 800ee8c:	0699      	lsls	r1, r3, #26
 800ee8e:	bf42      	ittt	mi
 800ee90:	6833      	ldrmi	r3, [r6, #0]
 800ee92:	3302      	addmi	r3, #2
 800ee94:	6033      	strmi	r3, [r6, #0]
 800ee96:	6825      	ldr	r5, [r4, #0]
 800ee98:	f015 0506 	ands.w	r5, r5, #6
 800ee9c:	d106      	bne.n	800eeac <_printf_common+0x48>
 800ee9e:	f104 0a19 	add.w	sl, r4, #25
 800eea2:	68e3      	ldr	r3, [r4, #12]
 800eea4:	6832      	ldr	r2, [r6, #0]
 800eea6:	1a9b      	subs	r3, r3, r2
 800eea8:	42ab      	cmp	r3, r5
 800eeaa:	dc26      	bgt.n	800eefa <_printf_common+0x96>
 800eeac:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800eeb0:	6822      	ldr	r2, [r4, #0]
 800eeb2:	3b00      	subs	r3, #0
 800eeb4:	bf18      	it	ne
 800eeb6:	2301      	movne	r3, #1
 800eeb8:	0692      	lsls	r2, r2, #26
 800eeba:	d42b      	bmi.n	800ef14 <_printf_common+0xb0>
 800eebc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800eec0:	4641      	mov	r1, r8
 800eec2:	4638      	mov	r0, r7
 800eec4:	47c8      	blx	r9
 800eec6:	3001      	adds	r0, #1
 800eec8:	d01e      	beq.n	800ef08 <_printf_common+0xa4>
 800eeca:	6823      	ldr	r3, [r4, #0]
 800eecc:	6922      	ldr	r2, [r4, #16]
 800eece:	f003 0306 	and.w	r3, r3, #6
 800eed2:	2b04      	cmp	r3, #4
 800eed4:	bf02      	ittt	eq
 800eed6:	68e5      	ldreq	r5, [r4, #12]
 800eed8:	6833      	ldreq	r3, [r6, #0]
 800eeda:	1aed      	subeq	r5, r5, r3
 800eedc:	68a3      	ldr	r3, [r4, #8]
 800eede:	bf0c      	ite	eq
 800eee0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800eee4:	2500      	movne	r5, #0
 800eee6:	4293      	cmp	r3, r2
 800eee8:	bfc4      	itt	gt
 800eeea:	1a9b      	subgt	r3, r3, r2
 800eeec:	18ed      	addgt	r5, r5, r3
 800eeee:	2600      	movs	r6, #0
 800eef0:	341a      	adds	r4, #26
 800eef2:	42b5      	cmp	r5, r6
 800eef4:	d11a      	bne.n	800ef2c <_printf_common+0xc8>
 800eef6:	2000      	movs	r0, #0
 800eef8:	e008      	b.n	800ef0c <_printf_common+0xa8>
 800eefa:	2301      	movs	r3, #1
 800eefc:	4652      	mov	r2, sl
 800eefe:	4641      	mov	r1, r8
 800ef00:	4638      	mov	r0, r7
 800ef02:	47c8      	blx	r9
 800ef04:	3001      	adds	r0, #1
 800ef06:	d103      	bne.n	800ef10 <_printf_common+0xac>
 800ef08:	f04f 30ff 	mov.w	r0, #4294967295
 800ef0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ef10:	3501      	adds	r5, #1
 800ef12:	e7c6      	b.n	800eea2 <_printf_common+0x3e>
 800ef14:	18e1      	adds	r1, r4, r3
 800ef16:	1c5a      	adds	r2, r3, #1
 800ef18:	2030      	movs	r0, #48	@ 0x30
 800ef1a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ef1e:	4422      	add	r2, r4
 800ef20:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ef24:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ef28:	3302      	adds	r3, #2
 800ef2a:	e7c7      	b.n	800eebc <_printf_common+0x58>
 800ef2c:	2301      	movs	r3, #1
 800ef2e:	4622      	mov	r2, r4
 800ef30:	4641      	mov	r1, r8
 800ef32:	4638      	mov	r0, r7
 800ef34:	47c8      	blx	r9
 800ef36:	3001      	adds	r0, #1
 800ef38:	d0e6      	beq.n	800ef08 <_printf_common+0xa4>
 800ef3a:	3601      	adds	r6, #1
 800ef3c:	e7d9      	b.n	800eef2 <_printf_common+0x8e>
	...

0800ef40 <_printf_i>:
 800ef40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ef44:	7e0f      	ldrb	r7, [r1, #24]
 800ef46:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ef48:	2f78      	cmp	r7, #120	@ 0x78
 800ef4a:	4691      	mov	r9, r2
 800ef4c:	4680      	mov	r8, r0
 800ef4e:	460c      	mov	r4, r1
 800ef50:	469a      	mov	sl, r3
 800ef52:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ef56:	d807      	bhi.n	800ef68 <_printf_i+0x28>
 800ef58:	2f62      	cmp	r7, #98	@ 0x62
 800ef5a:	d80a      	bhi.n	800ef72 <_printf_i+0x32>
 800ef5c:	2f00      	cmp	r7, #0
 800ef5e:	f000 80d2 	beq.w	800f106 <_printf_i+0x1c6>
 800ef62:	2f58      	cmp	r7, #88	@ 0x58
 800ef64:	f000 80b9 	beq.w	800f0da <_printf_i+0x19a>
 800ef68:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ef6c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ef70:	e03a      	b.n	800efe8 <_printf_i+0xa8>
 800ef72:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ef76:	2b15      	cmp	r3, #21
 800ef78:	d8f6      	bhi.n	800ef68 <_printf_i+0x28>
 800ef7a:	a101      	add	r1, pc, #4	@ (adr r1, 800ef80 <_printf_i+0x40>)
 800ef7c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ef80:	0800efd9 	.word	0x0800efd9
 800ef84:	0800efed 	.word	0x0800efed
 800ef88:	0800ef69 	.word	0x0800ef69
 800ef8c:	0800ef69 	.word	0x0800ef69
 800ef90:	0800ef69 	.word	0x0800ef69
 800ef94:	0800ef69 	.word	0x0800ef69
 800ef98:	0800efed 	.word	0x0800efed
 800ef9c:	0800ef69 	.word	0x0800ef69
 800efa0:	0800ef69 	.word	0x0800ef69
 800efa4:	0800ef69 	.word	0x0800ef69
 800efa8:	0800ef69 	.word	0x0800ef69
 800efac:	0800f0ed 	.word	0x0800f0ed
 800efb0:	0800f017 	.word	0x0800f017
 800efb4:	0800f0a7 	.word	0x0800f0a7
 800efb8:	0800ef69 	.word	0x0800ef69
 800efbc:	0800ef69 	.word	0x0800ef69
 800efc0:	0800f10f 	.word	0x0800f10f
 800efc4:	0800ef69 	.word	0x0800ef69
 800efc8:	0800f017 	.word	0x0800f017
 800efcc:	0800ef69 	.word	0x0800ef69
 800efd0:	0800ef69 	.word	0x0800ef69
 800efd4:	0800f0af 	.word	0x0800f0af
 800efd8:	6833      	ldr	r3, [r6, #0]
 800efda:	1d1a      	adds	r2, r3, #4
 800efdc:	681b      	ldr	r3, [r3, #0]
 800efde:	6032      	str	r2, [r6, #0]
 800efe0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800efe4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800efe8:	2301      	movs	r3, #1
 800efea:	e09d      	b.n	800f128 <_printf_i+0x1e8>
 800efec:	6833      	ldr	r3, [r6, #0]
 800efee:	6820      	ldr	r0, [r4, #0]
 800eff0:	1d19      	adds	r1, r3, #4
 800eff2:	6031      	str	r1, [r6, #0]
 800eff4:	0606      	lsls	r6, r0, #24
 800eff6:	d501      	bpl.n	800effc <_printf_i+0xbc>
 800eff8:	681d      	ldr	r5, [r3, #0]
 800effa:	e003      	b.n	800f004 <_printf_i+0xc4>
 800effc:	0645      	lsls	r5, r0, #25
 800effe:	d5fb      	bpl.n	800eff8 <_printf_i+0xb8>
 800f000:	f9b3 5000 	ldrsh.w	r5, [r3]
 800f004:	2d00      	cmp	r5, #0
 800f006:	da03      	bge.n	800f010 <_printf_i+0xd0>
 800f008:	232d      	movs	r3, #45	@ 0x2d
 800f00a:	426d      	negs	r5, r5
 800f00c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f010:	4859      	ldr	r0, [pc, #356]	@ (800f178 <_printf_i+0x238>)
 800f012:	230a      	movs	r3, #10
 800f014:	e011      	b.n	800f03a <_printf_i+0xfa>
 800f016:	6821      	ldr	r1, [r4, #0]
 800f018:	6833      	ldr	r3, [r6, #0]
 800f01a:	0608      	lsls	r0, r1, #24
 800f01c:	f853 5b04 	ldr.w	r5, [r3], #4
 800f020:	d402      	bmi.n	800f028 <_printf_i+0xe8>
 800f022:	0649      	lsls	r1, r1, #25
 800f024:	bf48      	it	mi
 800f026:	b2ad      	uxthmi	r5, r5
 800f028:	2f6f      	cmp	r7, #111	@ 0x6f
 800f02a:	4853      	ldr	r0, [pc, #332]	@ (800f178 <_printf_i+0x238>)
 800f02c:	6033      	str	r3, [r6, #0]
 800f02e:	bf14      	ite	ne
 800f030:	230a      	movne	r3, #10
 800f032:	2308      	moveq	r3, #8
 800f034:	2100      	movs	r1, #0
 800f036:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800f03a:	6866      	ldr	r6, [r4, #4]
 800f03c:	60a6      	str	r6, [r4, #8]
 800f03e:	2e00      	cmp	r6, #0
 800f040:	bfa2      	ittt	ge
 800f042:	6821      	ldrge	r1, [r4, #0]
 800f044:	f021 0104 	bicge.w	r1, r1, #4
 800f048:	6021      	strge	r1, [r4, #0]
 800f04a:	b90d      	cbnz	r5, 800f050 <_printf_i+0x110>
 800f04c:	2e00      	cmp	r6, #0
 800f04e:	d04b      	beq.n	800f0e8 <_printf_i+0x1a8>
 800f050:	4616      	mov	r6, r2
 800f052:	fbb5 f1f3 	udiv	r1, r5, r3
 800f056:	fb03 5711 	mls	r7, r3, r1, r5
 800f05a:	5dc7      	ldrb	r7, [r0, r7]
 800f05c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f060:	462f      	mov	r7, r5
 800f062:	42bb      	cmp	r3, r7
 800f064:	460d      	mov	r5, r1
 800f066:	d9f4      	bls.n	800f052 <_printf_i+0x112>
 800f068:	2b08      	cmp	r3, #8
 800f06a:	d10b      	bne.n	800f084 <_printf_i+0x144>
 800f06c:	6823      	ldr	r3, [r4, #0]
 800f06e:	07df      	lsls	r7, r3, #31
 800f070:	d508      	bpl.n	800f084 <_printf_i+0x144>
 800f072:	6923      	ldr	r3, [r4, #16]
 800f074:	6861      	ldr	r1, [r4, #4]
 800f076:	4299      	cmp	r1, r3
 800f078:	bfde      	ittt	le
 800f07a:	2330      	movle	r3, #48	@ 0x30
 800f07c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f080:	f106 36ff 	addle.w	r6, r6, #4294967295
 800f084:	1b92      	subs	r2, r2, r6
 800f086:	6122      	str	r2, [r4, #16]
 800f088:	f8cd a000 	str.w	sl, [sp]
 800f08c:	464b      	mov	r3, r9
 800f08e:	aa03      	add	r2, sp, #12
 800f090:	4621      	mov	r1, r4
 800f092:	4640      	mov	r0, r8
 800f094:	f7ff fee6 	bl	800ee64 <_printf_common>
 800f098:	3001      	adds	r0, #1
 800f09a:	d14a      	bne.n	800f132 <_printf_i+0x1f2>
 800f09c:	f04f 30ff 	mov.w	r0, #4294967295
 800f0a0:	b004      	add	sp, #16
 800f0a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f0a6:	6823      	ldr	r3, [r4, #0]
 800f0a8:	f043 0320 	orr.w	r3, r3, #32
 800f0ac:	6023      	str	r3, [r4, #0]
 800f0ae:	4833      	ldr	r0, [pc, #204]	@ (800f17c <_printf_i+0x23c>)
 800f0b0:	2778      	movs	r7, #120	@ 0x78
 800f0b2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800f0b6:	6823      	ldr	r3, [r4, #0]
 800f0b8:	6831      	ldr	r1, [r6, #0]
 800f0ba:	061f      	lsls	r7, r3, #24
 800f0bc:	f851 5b04 	ldr.w	r5, [r1], #4
 800f0c0:	d402      	bmi.n	800f0c8 <_printf_i+0x188>
 800f0c2:	065f      	lsls	r7, r3, #25
 800f0c4:	bf48      	it	mi
 800f0c6:	b2ad      	uxthmi	r5, r5
 800f0c8:	6031      	str	r1, [r6, #0]
 800f0ca:	07d9      	lsls	r1, r3, #31
 800f0cc:	bf44      	itt	mi
 800f0ce:	f043 0320 	orrmi.w	r3, r3, #32
 800f0d2:	6023      	strmi	r3, [r4, #0]
 800f0d4:	b11d      	cbz	r5, 800f0de <_printf_i+0x19e>
 800f0d6:	2310      	movs	r3, #16
 800f0d8:	e7ac      	b.n	800f034 <_printf_i+0xf4>
 800f0da:	4827      	ldr	r0, [pc, #156]	@ (800f178 <_printf_i+0x238>)
 800f0dc:	e7e9      	b.n	800f0b2 <_printf_i+0x172>
 800f0de:	6823      	ldr	r3, [r4, #0]
 800f0e0:	f023 0320 	bic.w	r3, r3, #32
 800f0e4:	6023      	str	r3, [r4, #0]
 800f0e6:	e7f6      	b.n	800f0d6 <_printf_i+0x196>
 800f0e8:	4616      	mov	r6, r2
 800f0ea:	e7bd      	b.n	800f068 <_printf_i+0x128>
 800f0ec:	6833      	ldr	r3, [r6, #0]
 800f0ee:	6825      	ldr	r5, [r4, #0]
 800f0f0:	6961      	ldr	r1, [r4, #20]
 800f0f2:	1d18      	adds	r0, r3, #4
 800f0f4:	6030      	str	r0, [r6, #0]
 800f0f6:	062e      	lsls	r6, r5, #24
 800f0f8:	681b      	ldr	r3, [r3, #0]
 800f0fa:	d501      	bpl.n	800f100 <_printf_i+0x1c0>
 800f0fc:	6019      	str	r1, [r3, #0]
 800f0fe:	e002      	b.n	800f106 <_printf_i+0x1c6>
 800f100:	0668      	lsls	r0, r5, #25
 800f102:	d5fb      	bpl.n	800f0fc <_printf_i+0x1bc>
 800f104:	8019      	strh	r1, [r3, #0]
 800f106:	2300      	movs	r3, #0
 800f108:	6123      	str	r3, [r4, #16]
 800f10a:	4616      	mov	r6, r2
 800f10c:	e7bc      	b.n	800f088 <_printf_i+0x148>
 800f10e:	6833      	ldr	r3, [r6, #0]
 800f110:	1d1a      	adds	r2, r3, #4
 800f112:	6032      	str	r2, [r6, #0]
 800f114:	681e      	ldr	r6, [r3, #0]
 800f116:	6862      	ldr	r2, [r4, #4]
 800f118:	2100      	movs	r1, #0
 800f11a:	4630      	mov	r0, r6
 800f11c:	f7f1 f8f8 	bl	8000310 <memchr>
 800f120:	b108      	cbz	r0, 800f126 <_printf_i+0x1e6>
 800f122:	1b80      	subs	r0, r0, r6
 800f124:	6060      	str	r0, [r4, #4]
 800f126:	6863      	ldr	r3, [r4, #4]
 800f128:	6123      	str	r3, [r4, #16]
 800f12a:	2300      	movs	r3, #0
 800f12c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f130:	e7aa      	b.n	800f088 <_printf_i+0x148>
 800f132:	6923      	ldr	r3, [r4, #16]
 800f134:	4632      	mov	r2, r6
 800f136:	4649      	mov	r1, r9
 800f138:	4640      	mov	r0, r8
 800f13a:	47d0      	blx	sl
 800f13c:	3001      	adds	r0, #1
 800f13e:	d0ad      	beq.n	800f09c <_printf_i+0x15c>
 800f140:	6823      	ldr	r3, [r4, #0]
 800f142:	079b      	lsls	r3, r3, #30
 800f144:	d413      	bmi.n	800f16e <_printf_i+0x22e>
 800f146:	68e0      	ldr	r0, [r4, #12]
 800f148:	9b03      	ldr	r3, [sp, #12]
 800f14a:	4298      	cmp	r0, r3
 800f14c:	bfb8      	it	lt
 800f14e:	4618      	movlt	r0, r3
 800f150:	e7a6      	b.n	800f0a0 <_printf_i+0x160>
 800f152:	2301      	movs	r3, #1
 800f154:	4632      	mov	r2, r6
 800f156:	4649      	mov	r1, r9
 800f158:	4640      	mov	r0, r8
 800f15a:	47d0      	blx	sl
 800f15c:	3001      	adds	r0, #1
 800f15e:	d09d      	beq.n	800f09c <_printf_i+0x15c>
 800f160:	3501      	adds	r5, #1
 800f162:	68e3      	ldr	r3, [r4, #12]
 800f164:	9903      	ldr	r1, [sp, #12]
 800f166:	1a5b      	subs	r3, r3, r1
 800f168:	42ab      	cmp	r3, r5
 800f16a:	dcf2      	bgt.n	800f152 <_printf_i+0x212>
 800f16c:	e7eb      	b.n	800f146 <_printf_i+0x206>
 800f16e:	2500      	movs	r5, #0
 800f170:	f104 0619 	add.w	r6, r4, #25
 800f174:	e7f5      	b.n	800f162 <_printf_i+0x222>
 800f176:	bf00      	nop
 800f178:	08012df8 	.word	0x08012df8
 800f17c:	08012e09 	.word	0x08012e09

0800f180 <_scanf_float>:
 800f180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f184:	b087      	sub	sp, #28
 800f186:	4617      	mov	r7, r2
 800f188:	9303      	str	r3, [sp, #12]
 800f18a:	688b      	ldr	r3, [r1, #8]
 800f18c:	1e5a      	subs	r2, r3, #1
 800f18e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800f192:	bf81      	itttt	hi
 800f194:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800f198:	eb03 0b05 	addhi.w	fp, r3, r5
 800f19c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800f1a0:	608b      	strhi	r3, [r1, #8]
 800f1a2:	680b      	ldr	r3, [r1, #0]
 800f1a4:	460a      	mov	r2, r1
 800f1a6:	f04f 0500 	mov.w	r5, #0
 800f1aa:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800f1ae:	f842 3b1c 	str.w	r3, [r2], #28
 800f1b2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800f1b6:	4680      	mov	r8, r0
 800f1b8:	460c      	mov	r4, r1
 800f1ba:	bf98      	it	ls
 800f1bc:	f04f 0b00 	movls.w	fp, #0
 800f1c0:	9201      	str	r2, [sp, #4]
 800f1c2:	4616      	mov	r6, r2
 800f1c4:	46aa      	mov	sl, r5
 800f1c6:	46a9      	mov	r9, r5
 800f1c8:	9502      	str	r5, [sp, #8]
 800f1ca:	68a2      	ldr	r2, [r4, #8]
 800f1cc:	b152      	cbz	r2, 800f1e4 <_scanf_float+0x64>
 800f1ce:	683b      	ldr	r3, [r7, #0]
 800f1d0:	781b      	ldrb	r3, [r3, #0]
 800f1d2:	2b4e      	cmp	r3, #78	@ 0x4e
 800f1d4:	d864      	bhi.n	800f2a0 <_scanf_float+0x120>
 800f1d6:	2b40      	cmp	r3, #64	@ 0x40
 800f1d8:	d83c      	bhi.n	800f254 <_scanf_float+0xd4>
 800f1da:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800f1de:	b2c8      	uxtb	r0, r1
 800f1e0:	280e      	cmp	r0, #14
 800f1e2:	d93a      	bls.n	800f25a <_scanf_float+0xda>
 800f1e4:	f1b9 0f00 	cmp.w	r9, #0
 800f1e8:	d003      	beq.n	800f1f2 <_scanf_float+0x72>
 800f1ea:	6823      	ldr	r3, [r4, #0]
 800f1ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f1f0:	6023      	str	r3, [r4, #0]
 800f1f2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f1f6:	f1ba 0f01 	cmp.w	sl, #1
 800f1fa:	f200 8117 	bhi.w	800f42c <_scanf_float+0x2ac>
 800f1fe:	9b01      	ldr	r3, [sp, #4]
 800f200:	429e      	cmp	r6, r3
 800f202:	f200 8108 	bhi.w	800f416 <_scanf_float+0x296>
 800f206:	2001      	movs	r0, #1
 800f208:	b007      	add	sp, #28
 800f20a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f20e:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800f212:	2a0d      	cmp	r2, #13
 800f214:	d8e6      	bhi.n	800f1e4 <_scanf_float+0x64>
 800f216:	a101      	add	r1, pc, #4	@ (adr r1, 800f21c <_scanf_float+0x9c>)
 800f218:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800f21c:	0800f363 	.word	0x0800f363
 800f220:	0800f1e5 	.word	0x0800f1e5
 800f224:	0800f1e5 	.word	0x0800f1e5
 800f228:	0800f1e5 	.word	0x0800f1e5
 800f22c:	0800f3c3 	.word	0x0800f3c3
 800f230:	0800f39b 	.word	0x0800f39b
 800f234:	0800f1e5 	.word	0x0800f1e5
 800f238:	0800f1e5 	.word	0x0800f1e5
 800f23c:	0800f371 	.word	0x0800f371
 800f240:	0800f1e5 	.word	0x0800f1e5
 800f244:	0800f1e5 	.word	0x0800f1e5
 800f248:	0800f1e5 	.word	0x0800f1e5
 800f24c:	0800f1e5 	.word	0x0800f1e5
 800f250:	0800f329 	.word	0x0800f329
 800f254:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800f258:	e7db      	b.n	800f212 <_scanf_float+0x92>
 800f25a:	290e      	cmp	r1, #14
 800f25c:	d8c2      	bhi.n	800f1e4 <_scanf_float+0x64>
 800f25e:	a001      	add	r0, pc, #4	@ (adr r0, 800f264 <_scanf_float+0xe4>)
 800f260:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800f264:	0800f319 	.word	0x0800f319
 800f268:	0800f1e5 	.word	0x0800f1e5
 800f26c:	0800f319 	.word	0x0800f319
 800f270:	0800f3af 	.word	0x0800f3af
 800f274:	0800f1e5 	.word	0x0800f1e5
 800f278:	0800f2c1 	.word	0x0800f2c1
 800f27c:	0800f2ff 	.word	0x0800f2ff
 800f280:	0800f2ff 	.word	0x0800f2ff
 800f284:	0800f2ff 	.word	0x0800f2ff
 800f288:	0800f2ff 	.word	0x0800f2ff
 800f28c:	0800f2ff 	.word	0x0800f2ff
 800f290:	0800f2ff 	.word	0x0800f2ff
 800f294:	0800f2ff 	.word	0x0800f2ff
 800f298:	0800f2ff 	.word	0x0800f2ff
 800f29c:	0800f2ff 	.word	0x0800f2ff
 800f2a0:	2b6e      	cmp	r3, #110	@ 0x6e
 800f2a2:	d809      	bhi.n	800f2b8 <_scanf_float+0x138>
 800f2a4:	2b60      	cmp	r3, #96	@ 0x60
 800f2a6:	d8b2      	bhi.n	800f20e <_scanf_float+0x8e>
 800f2a8:	2b54      	cmp	r3, #84	@ 0x54
 800f2aa:	d07b      	beq.n	800f3a4 <_scanf_float+0x224>
 800f2ac:	2b59      	cmp	r3, #89	@ 0x59
 800f2ae:	d199      	bne.n	800f1e4 <_scanf_float+0x64>
 800f2b0:	2d07      	cmp	r5, #7
 800f2b2:	d197      	bne.n	800f1e4 <_scanf_float+0x64>
 800f2b4:	2508      	movs	r5, #8
 800f2b6:	e02c      	b.n	800f312 <_scanf_float+0x192>
 800f2b8:	2b74      	cmp	r3, #116	@ 0x74
 800f2ba:	d073      	beq.n	800f3a4 <_scanf_float+0x224>
 800f2bc:	2b79      	cmp	r3, #121	@ 0x79
 800f2be:	e7f6      	b.n	800f2ae <_scanf_float+0x12e>
 800f2c0:	6821      	ldr	r1, [r4, #0]
 800f2c2:	05c8      	lsls	r0, r1, #23
 800f2c4:	d51b      	bpl.n	800f2fe <_scanf_float+0x17e>
 800f2c6:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800f2ca:	6021      	str	r1, [r4, #0]
 800f2cc:	f109 0901 	add.w	r9, r9, #1
 800f2d0:	f1bb 0f00 	cmp.w	fp, #0
 800f2d4:	d003      	beq.n	800f2de <_scanf_float+0x15e>
 800f2d6:	3201      	adds	r2, #1
 800f2d8:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f2dc:	60a2      	str	r2, [r4, #8]
 800f2de:	68a3      	ldr	r3, [r4, #8]
 800f2e0:	3b01      	subs	r3, #1
 800f2e2:	60a3      	str	r3, [r4, #8]
 800f2e4:	6923      	ldr	r3, [r4, #16]
 800f2e6:	3301      	adds	r3, #1
 800f2e8:	6123      	str	r3, [r4, #16]
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	3b01      	subs	r3, #1
 800f2ee:	2b00      	cmp	r3, #0
 800f2f0:	607b      	str	r3, [r7, #4]
 800f2f2:	f340 8087 	ble.w	800f404 <_scanf_float+0x284>
 800f2f6:	683b      	ldr	r3, [r7, #0]
 800f2f8:	3301      	adds	r3, #1
 800f2fa:	603b      	str	r3, [r7, #0]
 800f2fc:	e765      	b.n	800f1ca <_scanf_float+0x4a>
 800f2fe:	eb1a 0105 	adds.w	r1, sl, r5
 800f302:	f47f af6f 	bne.w	800f1e4 <_scanf_float+0x64>
 800f306:	6822      	ldr	r2, [r4, #0]
 800f308:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800f30c:	6022      	str	r2, [r4, #0]
 800f30e:	460d      	mov	r5, r1
 800f310:	468a      	mov	sl, r1
 800f312:	f806 3b01 	strb.w	r3, [r6], #1
 800f316:	e7e2      	b.n	800f2de <_scanf_float+0x15e>
 800f318:	6822      	ldr	r2, [r4, #0]
 800f31a:	0610      	lsls	r0, r2, #24
 800f31c:	f57f af62 	bpl.w	800f1e4 <_scanf_float+0x64>
 800f320:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800f324:	6022      	str	r2, [r4, #0]
 800f326:	e7f4      	b.n	800f312 <_scanf_float+0x192>
 800f328:	f1ba 0f00 	cmp.w	sl, #0
 800f32c:	d10e      	bne.n	800f34c <_scanf_float+0x1cc>
 800f32e:	f1b9 0f00 	cmp.w	r9, #0
 800f332:	d10e      	bne.n	800f352 <_scanf_float+0x1d2>
 800f334:	6822      	ldr	r2, [r4, #0]
 800f336:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800f33a:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800f33e:	d108      	bne.n	800f352 <_scanf_float+0x1d2>
 800f340:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800f344:	6022      	str	r2, [r4, #0]
 800f346:	f04f 0a01 	mov.w	sl, #1
 800f34a:	e7e2      	b.n	800f312 <_scanf_float+0x192>
 800f34c:	f1ba 0f02 	cmp.w	sl, #2
 800f350:	d055      	beq.n	800f3fe <_scanf_float+0x27e>
 800f352:	2d01      	cmp	r5, #1
 800f354:	d002      	beq.n	800f35c <_scanf_float+0x1dc>
 800f356:	2d04      	cmp	r5, #4
 800f358:	f47f af44 	bne.w	800f1e4 <_scanf_float+0x64>
 800f35c:	3501      	adds	r5, #1
 800f35e:	b2ed      	uxtb	r5, r5
 800f360:	e7d7      	b.n	800f312 <_scanf_float+0x192>
 800f362:	f1ba 0f01 	cmp.w	sl, #1
 800f366:	f47f af3d 	bne.w	800f1e4 <_scanf_float+0x64>
 800f36a:	f04f 0a02 	mov.w	sl, #2
 800f36e:	e7d0      	b.n	800f312 <_scanf_float+0x192>
 800f370:	b97d      	cbnz	r5, 800f392 <_scanf_float+0x212>
 800f372:	f1b9 0f00 	cmp.w	r9, #0
 800f376:	f47f af38 	bne.w	800f1ea <_scanf_float+0x6a>
 800f37a:	6822      	ldr	r2, [r4, #0]
 800f37c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800f380:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800f384:	f040 8101 	bne.w	800f58a <_scanf_float+0x40a>
 800f388:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800f38c:	6022      	str	r2, [r4, #0]
 800f38e:	2501      	movs	r5, #1
 800f390:	e7bf      	b.n	800f312 <_scanf_float+0x192>
 800f392:	2d03      	cmp	r5, #3
 800f394:	d0e2      	beq.n	800f35c <_scanf_float+0x1dc>
 800f396:	2d05      	cmp	r5, #5
 800f398:	e7de      	b.n	800f358 <_scanf_float+0x1d8>
 800f39a:	2d02      	cmp	r5, #2
 800f39c:	f47f af22 	bne.w	800f1e4 <_scanf_float+0x64>
 800f3a0:	2503      	movs	r5, #3
 800f3a2:	e7b6      	b.n	800f312 <_scanf_float+0x192>
 800f3a4:	2d06      	cmp	r5, #6
 800f3a6:	f47f af1d 	bne.w	800f1e4 <_scanf_float+0x64>
 800f3aa:	2507      	movs	r5, #7
 800f3ac:	e7b1      	b.n	800f312 <_scanf_float+0x192>
 800f3ae:	6822      	ldr	r2, [r4, #0]
 800f3b0:	0591      	lsls	r1, r2, #22
 800f3b2:	f57f af17 	bpl.w	800f1e4 <_scanf_float+0x64>
 800f3b6:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800f3ba:	6022      	str	r2, [r4, #0]
 800f3bc:	f8cd 9008 	str.w	r9, [sp, #8]
 800f3c0:	e7a7      	b.n	800f312 <_scanf_float+0x192>
 800f3c2:	6822      	ldr	r2, [r4, #0]
 800f3c4:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800f3c8:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800f3cc:	d006      	beq.n	800f3dc <_scanf_float+0x25c>
 800f3ce:	0550      	lsls	r0, r2, #21
 800f3d0:	f57f af08 	bpl.w	800f1e4 <_scanf_float+0x64>
 800f3d4:	f1b9 0f00 	cmp.w	r9, #0
 800f3d8:	f000 80d7 	beq.w	800f58a <_scanf_float+0x40a>
 800f3dc:	0591      	lsls	r1, r2, #22
 800f3de:	bf58      	it	pl
 800f3e0:	9902      	ldrpl	r1, [sp, #8]
 800f3e2:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800f3e6:	bf58      	it	pl
 800f3e8:	eba9 0101 	subpl.w	r1, r9, r1
 800f3ec:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800f3f0:	bf58      	it	pl
 800f3f2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800f3f6:	6022      	str	r2, [r4, #0]
 800f3f8:	f04f 0900 	mov.w	r9, #0
 800f3fc:	e789      	b.n	800f312 <_scanf_float+0x192>
 800f3fe:	f04f 0a03 	mov.w	sl, #3
 800f402:	e786      	b.n	800f312 <_scanf_float+0x192>
 800f404:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800f408:	4639      	mov	r1, r7
 800f40a:	4640      	mov	r0, r8
 800f40c:	4798      	blx	r3
 800f40e:	2800      	cmp	r0, #0
 800f410:	f43f aedb 	beq.w	800f1ca <_scanf_float+0x4a>
 800f414:	e6e6      	b.n	800f1e4 <_scanf_float+0x64>
 800f416:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f41a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f41e:	463a      	mov	r2, r7
 800f420:	4640      	mov	r0, r8
 800f422:	4798      	blx	r3
 800f424:	6923      	ldr	r3, [r4, #16]
 800f426:	3b01      	subs	r3, #1
 800f428:	6123      	str	r3, [r4, #16]
 800f42a:	e6e8      	b.n	800f1fe <_scanf_float+0x7e>
 800f42c:	1e6b      	subs	r3, r5, #1
 800f42e:	2b06      	cmp	r3, #6
 800f430:	d824      	bhi.n	800f47c <_scanf_float+0x2fc>
 800f432:	2d02      	cmp	r5, #2
 800f434:	d836      	bhi.n	800f4a4 <_scanf_float+0x324>
 800f436:	9b01      	ldr	r3, [sp, #4]
 800f438:	429e      	cmp	r6, r3
 800f43a:	f67f aee4 	bls.w	800f206 <_scanf_float+0x86>
 800f43e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f442:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f446:	463a      	mov	r2, r7
 800f448:	4640      	mov	r0, r8
 800f44a:	4798      	blx	r3
 800f44c:	6923      	ldr	r3, [r4, #16]
 800f44e:	3b01      	subs	r3, #1
 800f450:	6123      	str	r3, [r4, #16]
 800f452:	e7f0      	b.n	800f436 <_scanf_float+0x2b6>
 800f454:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f458:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800f45c:	463a      	mov	r2, r7
 800f45e:	4640      	mov	r0, r8
 800f460:	4798      	blx	r3
 800f462:	6923      	ldr	r3, [r4, #16]
 800f464:	3b01      	subs	r3, #1
 800f466:	6123      	str	r3, [r4, #16]
 800f468:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f46c:	fa5f fa8a 	uxtb.w	sl, sl
 800f470:	f1ba 0f02 	cmp.w	sl, #2
 800f474:	d1ee      	bne.n	800f454 <_scanf_float+0x2d4>
 800f476:	3d03      	subs	r5, #3
 800f478:	b2ed      	uxtb	r5, r5
 800f47a:	1b76      	subs	r6, r6, r5
 800f47c:	6823      	ldr	r3, [r4, #0]
 800f47e:	05da      	lsls	r2, r3, #23
 800f480:	d530      	bpl.n	800f4e4 <_scanf_float+0x364>
 800f482:	055b      	lsls	r3, r3, #21
 800f484:	d511      	bpl.n	800f4aa <_scanf_float+0x32a>
 800f486:	9b01      	ldr	r3, [sp, #4]
 800f488:	429e      	cmp	r6, r3
 800f48a:	f67f aebc 	bls.w	800f206 <_scanf_float+0x86>
 800f48e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f492:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f496:	463a      	mov	r2, r7
 800f498:	4640      	mov	r0, r8
 800f49a:	4798      	blx	r3
 800f49c:	6923      	ldr	r3, [r4, #16]
 800f49e:	3b01      	subs	r3, #1
 800f4a0:	6123      	str	r3, [r4, #16]
 800f4a2:	e7f0      	b.n	800f486 <_scanf_float+0x306>
 800f4a4:	46aa      	mov	sl, r5
 800f4a6:	46b3      	mov	fp, r6
 800f4a8:	e7de      	b.n	800f468 <_scanf_float+0x2e8>
 800f4aa:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800f4ae:	6923      	ldr	r3, [r4, #16]
 800f4b0:	2965      	cmp	r1, #101	@ 0x65
 800f4b2:	f103 33ff 	add.w	r3, r3, #4294967295
 800f4b6:	f106 35ff 	add.w	r5, r6, #4294967295
 800f4ba:	6123      	str	r3, [r4, #16]
 800f4bc:	d00c      	beq.n	800f4d8 <_scanf_float+0x358>
 800f4be:	2945      	cmp	r1, #69	@ 0x45
 800f4c0:	d00a      	beq.n	800f4d8 <_scanf_float+0x358>
 800f4c2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f4c6:	463a      	mov	r2, r7
 800f4c8:	4640      	mov	r0, r8
 800f4ca:	4798      	blx	r3
 800f4cc:	6923      	ldr	r3, [r4, #16]
 800f4ce:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800f4d2:	3b01      	subs	r3, #1
 800f4d4:	1eb5      	subs	r5, r6, #2
 800f4d6:	6123      	str	r3, [r4, #16]
 800f4d8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f4dc:	463a      	mov	r2, r7
 800f4de:	4640      	mov	r0, r8
 800f4e0:	4798      	blx	r3
 800f4e2:	462e      	mov	r6, r5
 800f4e4:	6822      	ldr	r2, [r4, #0]
 800f4e6:	f012 0210 	ands.w	r2, r2, #16
 800f4ea:	d001      	beq.n	800f4f0 <_scanf_float+0x370>
 800f4ec:	2000      	movs	r0, #0
 800f4ee:	e68b      	b.n	800f208 <_scanf_float+0x88>
 800f4f0:	7032      	strb	r2, [r6, #0]
 800f4f2:	6823      	ldr	r3, [r4, #0]
 800f4f4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800f4f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f4fc:	d11a      	bne.n	800f534 <_scanf_float+0x3b4>
 800f4fe:	9b02      	ldr	r3, [sp, #8]
 800f500:	454b      	cmp	r3, r9
 800f502:	eba3 0209 	sub.w	r2, r3, r9
 800f506:	d121      	bne.n	800f54c <_scanf_float+0x3cc>
 800f508:	9901      	ldr	r1, [sp, #4]
 800f50a:	2200      	movs	r2, #0
 800f50c:	4640      	mov	r0, r8
 800f50e:	f7ff f9f9 	bl	800e904 <_strtod_r>
 800f512:	9b03      	ldr	r3, [sp, #12]
 800f514:	6821      	ldr	r1, [r4, #0]
 800f516:	681b      	ldr	r3, [r3, #0]
 800f518:	f011 0f02 	tst.w	r1, #2
 800f51c:	f103 0204 	add.w	r2, r3, #4
 800f520:	d01f      	beq.n	800f562 <_scanf_float+0x3e2>
 800f522:	9903      	ldr	r1, [sp, #12]
 800f524:	600a      	str	r2, [r1, #0]
 800f526:	681b      	ldr	r3, [r3, #0]
 800f528:	ed83 0b00 	vstr	d0, [r3]
 800f52c:	68e3      	ldr	r3, [r4, #12]
 800f52e:	3301      	adds	r3, #1
 800f530:	60e3      	str	r3, [r4, #12]
 800f532:	e7db      	b.n	800f4ec <_scanf_float+0x36c>
 800f534:	9b04      	ldr	r3, [sp, #16]
 800f536:	2b00      	cmp	r3, #0
 800f538:	d0e6      	beq.n	800f508 <_scanf_float+0x388>
 800f53a:	9905      	ldr	r1, [sp, #20]
 800f53c:	230a      	movs	r3, #10
 800f53e:	3101      	adds	r1, #1
 800f540:	4640      	mov	r0, r8
 800f542:	f002 f8e7 	bl	8011714 <_strtol_r>
 800f546:	9b04      	ldr	r3, [sp, #16]
 800f548:	9e05      	ldr	r6, [sp, #20]
 800f54a:	1ac2      	subs	r2, r0, r3
 800f54c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800f550:	429e      	cmp	r6, r3
 800f552:	bf28      	it	cs
 800f554:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800f558:	490d      	ldr	r1, [pc, #52]	@ (800f590 <_scanf_float+0x410>)
 800f55a:	4630      	mov	r0, r6
 800f55c:	f000 f8de 	bl	800f71c <siprintf>
 800f560:	e7d2      	b.n	800f508 <_scanf_float+0x388>
 800f562:	f011 0f04 	tst.w	r1, #4
 800f566:	9903      	ldr	r1, [sp, #12]
 800f568:	600a      	str	r2, [r1, #0]
 800f56a:	d1dc      	bne.n	800f526 <_scanf_float+0x3a6>
 800f56c:	eeb4 0b40 	vcmp.f64	d0, d0
 800f570:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f574:	681d      	ldr	r5, [r3, #0]
 800f576:	d705      	bvc.n	800f584 <_scanf_float+0x404>
 800f578:	4806      	ldr	r0, [pc, #24]	@ (800f594 <_scanf_float+0x414>)
 800f57a:	f000 fa25 	bl	800f9c8 <nanf>
 800f57e:	ed85 0a00 	vstr	s0, [r5]
 800f582:	e7d3      	b.n	800f52c <_scanf_float+0x3ac>
 800f584:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800f588:	e7f9      	b.n	800f57e <_scanf_float+0x3fe>
 800f58a:	f04f 0900 	mov.w	r9, #0
 800f58e:	e630      	b.n	800f1f2 <_scanf_float+0x72>
 800f590:	08012e1a 	.word	0x08012e1a
 800f594:	080131d8 	.word	0x080131d8

0800f598 <std>:
 800f598:	2300      	movs	r3, #0
 800f59a:	b510      	push	{r4, lr}
 800f59c:	4604      	mov	r4, r0
 800f59e:	e9c0 3300 	strd	r3, r3, [r0]
 800f5a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f5a6:	6083      	str	r3, [r0, #8]
 800f5a8:	8181      	strh	r1, [r0, #12]
 800f5aa:	6643      	str	r3, [r0, #100]	@ 0x64
 800f5ac:	81c2      	strh	r2, [r0, #14]
 800f5ae:	6183      	str	r3, [r0, #24]
 800f5b0:	4619      	mov	r1, r3
 800f5b2:	2208      	movs	r2, #8
 800f5b4:	305c      	adds	r0, #92	@ 0x5c
 800f5b6:	f000 f940 	bl	800f83a <memset>
 800f5ba:	4b0d      	ldr	r3, [pc, #52]	@ (800f5f0 <std+0x58>)
 800f5bc:	6263      	str	r3, [r4, #36]	@ 0x24
 800f5be:	4b0d      	ldr	r3, [pc, #52]	@ (800f5f4 <std+0x5c>)
 800f5c0:	62a3      	str	r3, [r4, #40]	@ 0x28
 800f5c2:	4b0d      	ldr	r3, [pc, #52]	@ (800f5f8 <std+0x60>)
 800f5c4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800f5c6:	4b0d      	ldr	r3, [pc, #52]	@ (800f5fc <std+0x64>)
 800f5c8:	6323      	str	r3, [r4, #48]	@ 0x30
 800f5ca:	4b0d      	ldr	r3, [pc, #52]	@ (800f600 <std+0x68>)
 800f5cc:	6224      	str	r4, [r4, #32]
 800f5ce:	429c      	cmp	r4, r3
 800f5d0:	d006      	beq.n	800f5e0 <std+0x48>
 800f5d2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800f5d6:	4294      	cmp	r4, r2
 800f5d8:	d002      	beq.n	800f5e0 <std+0x48>
 800f5da:	33d0      	adds	r3, #208	@ 0xd0
 800f5dc:	429c      	cmp	r4, r3
 800f5de:	d105      	bne.n	800f5ec <std+0x54>
 800f5e0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800f5e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f5e8:	f000 b9d2 	b.w	800f990 <__retarget_lock_init_recursive>
 800f5ec:	bd10      	pop	{r4, pc}
 800f5ee:	bf00      	nop
 800f5f0:	0800f7b1 	.word	0x0800f7b1
 800f5f4:	0800f7d7 	.word	0x0800f7d7
 800f5f8:	0800f80f 	.word	0x0800f80f
 800f5fc:	0800f833 	.word	0x0800f833
 800f600:	24000d00 	.word	0x24000d00

0800f604 <stdio_exit_handler>:
 800f604:	4a02      	ldr	r2, [pc, #8]	@ (800f610 <stdio_exit_handler+0xc>)
 800f606:	4903      	ldr	r1, [pc, #12]	@ (800f614 <stdio_exit_handler+0x10>)
 800f608:	4803      	ldr	r0, [pc, #12]	@ (800f618 <stdio_exit_handler+0x14>)
 800f60a:	f000 b869 	b.w	800f6e0 <_fwalk_sglue>
 800f60e:	bf00      	nop
 800f610:	24000064 	.word	0x24000064
 800f614:	0801211d 	.word	0x0801211d
 800f618:	240001e0 	.word	0x240001e0

0800f61c <cleanup_stdio>:
 800f61c:	6841      	ldr	r1, [r0, #4]
 800f61e:	4b0c      	ldr	r3, [pc, #48]	@ (800f650 <cleanup_stdio+0x34>)
 800f620:	4299      	cmp	r1, r3
 800f622:	b510      	push	{r4, lr}
 800f624:	4604      	mov	r4, r0
 800f626:	d001      	beq.n	800f62c <cleanup_stdio+0x10>
 800f628:	f002 fd78 	bl	801211c <_fflush_r>
 800f62c:	68a1      	ldr	r1, [r4, #8]
 800f62e:	4b09      	ldr	r3, [pc, #36]	@ (800f654 <cleanup_stdio+0x38>)
 800f630:	4299      	cmp	r1, r3
 800f632:	d002      	beq.n	800f63a <cleanup_stdio+0x1e>
 800f634:	4620      	mov	r0, r4
 800f636:	f002 fd71 	bl	801211c <_fflush_r>
 800f63a:	68e1      	ldr	r1, [r4, #12]
 800f63c:	4b06      	ldr	r3, [pc, #24]	@ (800f658 <cleanup_stdio+0x3c>)
 800f63e:	4299      	cmp	r1, r3
 800f640:	d004      	beq.n	800f64c <cleanup_stdio+0x30>
 800f642:	4620      	mov	r0, r4
 800f644:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f648:	f002 bd68 	b.w	801211c <_fflush_r>
 800f64c:	bd10      	pop	{r4, pc}
 800f64e:	bf00      	nop
 800f650:	24000d00 	.word	0x24000d00
 800f654:	24000d68 	.word	0x24000d68
 800f658:	24000dd0 	.word	0x24000dd0

0800f65c <global_stdio_init.part.0>:
 800f65c:	b510      	push	{r4, lr}
 800f65e:	4b0b      	ldr	r3, [pc, #44]	@ (800f68c <global_stdio_init.part.0+0x30>)
 800f660:	4c0b      	ldr	r4, [pc, #44]	@ (800f690 <global_stdio_init.part.0+0x34>)
 800f662:	4a0c      	ldr	r2, [pc, #48]	@ (800f694 <global_stdio_init.part.0+0x38>)
 800f664:	601a      	str	r2, [r3, #0]
 800f666:	4620      	mov	r0, r4
 800f668:	2200      	movs	r2, #0
 800f66a:	2104      	movs	r1, #4
 800f66c:	f7ff ff94 	bl	800f598 <std>
 800f670:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800f674:	2201      	movs	r2, #1
 800f676:	2109      	movs	r1, #9
 800f678:	f7ff ff8e 	bl	800f598 <std>
 800f67c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800f680:	2202      	movs	r2, #2
 800f682:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f686:	2112      	movs	r1, #18
 800f688:	f7ff bf86 	b.w	800f598 <std>
 800f68c:	24000e38 	.word	0x24000e38
 800f690:	24000d00 	.word	0x24000d00
 800f694:	0800f605 	.word	0x0800f605

0800f698 <__sfp_lock_acquire>:
 800f698:	4801      	ldr	r0, [pc, #4]	@ (800f6a0 <__sfp_lock_acquire+0x8>)
 800f69a:	f000 b97a 	b.w	800f992 <__retarget_lock_acquire_recursive>
 800f69e:	bf00      	nop
 800f6a0:	24000e41 	.word	0x24000e41

0800f6a4 <__sfp_lock_release>:
 800f6a4:	4801      	ldr	r0, [pc, #4]	@ (800f6ac <__sfp_lock_release+0x8>)
 800f6a6:	f000 b975 	b.w	800f994 <__retarget_lock_release_recursive>
 800f6aa:	bf00      	nop
 800f6ac:	24000e41 	.word	0x24000e41

0800f6b0 <__sinit>:
 800f6b0:	b510      	push	{r4, lr}
 800f6b2:	4604      	mov	r4, r0
 800f6b4:	f7ff fff0 	bl	800f698 <__sfp_lock_acquire>
 800f6b8:	6a23      	ldr	r3, [r4, #32]
 800f6ba:	b11b      	cbz	r3, 800f6c4 <__sinit+0x14>
 800f6bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f6c0:	f7ff bff0 	b.w	800f6a4 <__sfp_lock_release>
 800f6c4:	4b04      	ldr	r3, [pc, #16]	@ (800f6d8 <__sinit+0x28>)
 800f6c6:	6223      	str	r3, [r4, #32]
 800f6c8:	4b04      	ldr	r3, [pc, #16]	@ (800f6dc <__sinit+0x2c>)
 800f6ca:	681b      	ldr	r3, [r3, #0]
 800f6cc:	2b00      	cmp	r3, #0
 800f6ce:	d1f5      	bne.n	800f6bc <__sinit+0xc>
 800f6d0:	f7ff ffc4 	bl	800f65c <global_stdio_init.part.0>
 800f6d4:	e7f2      	b.n	800f6bc <__sinit+0xc>
 800f6d6:	bf00      	nop
 800f6d8:	0800f61d 	.word	0x0800f61d
 800f6dc:	24000e38 	.word	0x24000e38

0800f6e0 <_fwalk_sglue>:
 800f6e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f6e4:	4607      	mov	r7, r0
 800f6e6:	4688      	mov	r8, r1
 800f6e8:	4614      	mov	r4, r2
 800f6ea:	2600      	movs	r6, #0
 800f6ec:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f6f0:	f1b9 0901 	subs.w	r9, r9, #1
 800f6f4:	d505      	bpl.n	800f702 <_fwalk_sglue+0x22>
 800f6f6:	6824      	ldr	r4, [r4, #0]
 800f6f8:	2c00      	cmp	r4, #0
 800f6fa:	d1f7      	bne.n	800f6ec <_fwalk_sglue+0xc>
 800f6fc:	4630      	mov	r0, r6
 800f6fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f702:	89ab      	ldrh	r3, [r5, #12]
 800f704:	2b01      	cmp	r3, #1
 800f706:	d907      	bls.n	800f718 <_fwalk_sglue+0x38>
 800f708:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f70c:	3301      	adds	r3, #1
 800f70e:	d003      	beq.n	800f718 <_fwalk_sglue+0x38>
 800f710:	4629      	mov	r1, r5
 800f712:	4638      	mov	r0, r7
 800f714:	47c0      	blx	r8
 800f716:	4306      	orrs	r6, r0
 800f718:	3568      	adds	r5, #104	@ 0x68
 800f71a:	e7e9      	b.n	800f6f0 <_fwalk_sglue+0x10>

0800f71c <siprintf>:
 800f71c:	b40e      	push	{r1, r2, r3}
 800f71e:	b500      	push	{lr}
 800f720:	b09c      	sub	sp, #112	@ 0x70
 800f722:	ab1d      	add	r3, sp, #116	@ 0x74
 800f724:	9002      	str	r0, [sp, #8]
 800f726:	9006      	str	r0, [sp, #24]
 800f728:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800f72c:	4809      	ldr	r0, [pc, #36]	@ (800f754 <siprintf+0x38>)
 800f72e:	9107      	str	r1, [sp, #28]
 800f730:	9104      	str	r1, [sp, #16]
 800f732:	4909      	ldr	r1, [pc, #36]	@ (800f758 <siprintf+0x3c>)
 800f734:	f853 2b04 	ldr.w	r2, [r3], #4
 800f738:	9105      	str	r1, [sp, #20]
 800f73a:	6800      	ldr	r0, [r0, #0]
 800f73c:	9301      	str	r3, [sp, #4]
 800f73e:	a902      	add	r1, sp, #8
 800f740:	f002 f852 	bl	80117e8 <_svfiprintf_r>
 800f744:	9b02      	ldr	r3, [sp, #8]
 800f746:	2200      	movs	r2, #0
 800f748:	701a      	strb	r2, [r3, #0]
 800f74a:	b01c      	add	sp, #112	@ 0x70
 800f74c:	f85d eb04 	ldr.w	lr, [sp], #4
 800f750:	b003      	add	sp, #12
 800f752:	4770      	bx	lr
 800f754:	240001dc 	.word	0x240001dc
 800f758:	ffff0208 	.word	0xffff0208

0800f75c <siscanf>:
 800f75c:	b40e      	push	{r1, r2, r3}
 800f75e:	b530      	push	{r4, r5, lr}
 800f760:	b09c      	sub	sp, #112	@ 0x70
 800f762:	ac1f      	add	r4, sp, #124	@ 0x7c
 800f764:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800f768:	f854 5b04 	ldr.w	r5, [r4], #4
 800f76c:	f8ad 2014 	strh.w	r2, [sp, #20]
 800f770:	9002      	str	r0, [sp, #8]
 800f772:	9006      	str	r0, [sp, #24]
 800f774:	f7f0 fe1c 	bl	80003b0 <strlen>
 800f778:	4b0b      	ldr	r3, [pc, #44]	@ (800f7a8 <siscanf+0x4c>)
 800f77a:	9003      	str	r0, [sp, #12]
 800f77c:	9007      	str	r0, [sp, #28]
 800f77e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f780:	480a      	ldr	r0, [pc, #40]	@ (800f7ac <siscanf+0x50>)
 800f782:	9401      	str	r4, [sp, #4]
 800f784:	2300      	movs	r3, #0
 800f786:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f788:	9314      	str	r3, [sp, #80]	@ 0x50
 800f78a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800f78e:	f8ad 3016 	strh.w	r3, [sp, #22]
 800f792:	462a      	mov	r2, r5
 800f794:	4623      	mov	r3, r4
 800f796:	a902      	add	r1, sp, #8
 800f798:	6800      	ldr	r0, [r0, #0]
 800f79a:	f002 f979 	bl	8011a90 <__ssvfiscanf_r>
 800f79e:	b01c      	add	sp, #112	@ 0x70
 800f7a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f7a4:	b003      	add	sp, #12
 800f7a6:	4770      	bx	lr
 800f7a8:	0800f7d3 	.word	0x0800f7d3
 800f7ac:	240001dc 	.word	0x240001dc

0800f7b0 <__sread>:
 800f7b0:	b510      	push	{r4, lr}
 800f7b2:	460c      	mov	r4, r1
 800f7b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f7b8:	f000 f88c 	bl	800f8d4 <_read_r>
 800f7bc:	2800      	cmp	r0, #0
 800f7be:	bfab      	itete	ge
 800f7c0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800f7c2:	89a3      	ldrhlt	r3, [r4, #12]
 800f7c4:	181b      	addge	r3, r3, r0
 800f7c6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800f7ca:	bfac      	ite	ge
 800f7cc:	6563      	strge	r3, [r4, #84]	@ 0x54
 800f7ce:	81a3      	strhlt	r3, [r4, #12]
 800f7d0:	bd10      	pop	{r4, pc}

0800f7d2 <__seofread>:
 800f7d2:	2000      	movs	r0, #0
 800f7d4:	4770      	bx	lr

0800f7d6 <__swrite>:
 800f7d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f7da:	461f      	mov	r7, r3
 800f7dc:	898b      	ldrh	r3, [r1, #12]
 800f7de:	05db      	lsls	r3, r3, #23
 800f7e0:	4605      	mov	r5, r0
 800f7e2:	460c      	mov	r4, r1
 800f7e4:	4616      	mov	r6, r2
 800f7e6:	d505      	bpl.n	800f7f4 <__swrite+0x1e>
 800f7e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f7ec:	2302      	movs	r3, #2
 800f7ee:	2200      	movs	r2, #0
 800f7f0:	f000 f85e 	bl	800f8b0 <_lseek_r>
 800f7f4:	89a3      	ldrh	r3, [r4, #12]
 800f7f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f7fa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800f7fe:	81a3      	strh	r3, [r4, #12]
 800f800:	4632      	mov	r2, r6
 800f802:	463b      	mov	r3, r7
 800f804:	4628      	mov	r0, r5
 800f806:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f80a:	f000 b885 	b.w	800f918 <_write_r>

0800f80e <__sseek>:
 800f80e:	b510      	push	{r4, lr}
 800f810:	460c      	mov	r4, r1
 800f812:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f816:	f000 f84b 	bl	800f8b0 <_lseek_r>
 800f81a:	1c43      	adds	r3, r0, #1
 800f81c:	89a3      	ldrh	r3, [r4, #12]
 800f81e:	bf15      	itete	ne
 800f820:	6560      	strne	r0, [r4, #84]	@ 0x54
 800f822:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800f826:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800f82a:	81a3      	strheq	r3, [r4, #12]
 800f82c:	bf18      	it	ne
 800f82e:	81a3      	strhne	r3, [r4, #12]
 800f830:	bd10      	pop	{r4, pc}

0800f832 <__sclose>:
 800f832:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f836:	f000 b82b 	b.w	800f890 <_close_r>

0800f83a <memset>:
 800f83a:	4402      	add	r2, r0
 800f83c:	4603      	mov	r3, r0
 800f83e:	4293      	cmp	r3, r2
 800f840:	d100      	bne.n	800f844 <memset+0xa>
 800f842:	4770      	bx	lr
 800f844:	f803 1b01 	strb.w	r1, [r3], #1
 800f848:	e7f9      	b.n	800f83e <memset+0x4>

0800f84a <strchr>:
 800f84a:	b2c9      	uxtb	r1, r1
 800f84c:	4603      	mov	r3, r0
 800f84e:	4618      	mov	r0, r3
 800f850:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f854:	b112      	cbz	r2, 800f85c <strchr+0x12>
 800f856:	428a      	cmp	r2, r1
 800f858:	d1f9      	bne.n	800f84e <strchr+0x4>
 800f85a:	4770      	bx	lr
 800f85c:	2900      	cmp	r1, #0
 800f85e:	bf18      	it	ne
 800f860:	2000      	movne	r0, #0
 800f862:	4770      	bx	lr

0800f864 <strncmp>:
 800f864:	b510      	push	{r4, lr}
 800f866:	b16a      	cbz	r2, 800f884 <strncmp+0x20>
 800f868:	3901      	subs	r1, #1
 800f86a:	1884      	adds	r4, r0, r2
 800f86c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f870:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800f874:	429a      	cmp	r2, r3
 800f876:	d103      	bne.n	800f880 <strncmp+0x1c>
 800f878:	42a0      	cmp	r0, r4
 800f87a:	d001      	beq.n	800f880 <strncmp+0x1c>
 800f87c:	2a00      	cmp	r2, #0
 800f87e:	d1f5      	bne.n	800f86c <strncmp+0x8>
 800f880:	1ad0      	subs	r0, r2, r3
 800f882:	bd10      	pop	{r4, pc}
 800f884:	4610      	mov	r0, r2
 800f886:	e7fc      	b.n	800f882 <strncmp+0x1e>

0800f888 <_localeconv_r>:
 800f888:	4800      	ldr	r0, [pc, #0]	@ (800f88c <_localeconv_r+0x4>)
 800f88a:	4770      	bx	lr
 800f88c:	24000160 	.word	0x24000160

0800f890 <_close_r>:
 800f890:	b538      	push	{r3, r4, r5, lr}
 800f892:	4d06      	ldr	r5, [pc, #24]	@ (800f8ac <_close_r+0x1c>)
 800f894:	2300      	movs	r3, #0
 800f896:	4604      	mov	r4, r0
 800f898:	4608      	mov	r0, r1
 800f89a:	602b      	str	r3, [r5, #0]
 800f89c:	f7f2 fafe 	bl	8001e9c <_close>
 800f8a0:	1c43      	adds	r3, r0, #1
 800f8a2:	d102      	bne.n	800f8aa <_close_r+0x1a>
 800f8a4:	682b      	ldr	r3, [r5, #0]
 800f8a6:	b103      	cbz	r3, 800f8aa <_close_r+0x1a>
 800f8a8:	6023      	str	r3, [r4, #0]
 800f8aa:	bd38      	pop	{r3, r4, r5, pc}
 800f8ac:	24000e3c 	.word	0x24000e3c

0800f8b0 <_lseek_r>:
 800f8b0:	b538      	push	{r3, r4, r5, lr}
 800f8b2:	4d07      	ldr	r5, [pc, #28]	@ (800f8d0 <_lseek_r+0x20>)
 800f8b4:	4604      	mov	r4, r0
 800f8b6:	4608      	mov	r0, r1
 800f8b8:	4611      	mov	r1, r2
 800f8ba:	2200      	movs	r2, #0
 800f8bc:	602a      	str	r2, [r5, #0]
 800f8be:	461a      	mov	r2, r3
 800f8c0:	f7f2 fb13 	bl	8001eea <_lseek>
 800f8c4:	1c43      	adds	r3, r0, #1
 800f8c6:	d102      	bne.n	800f8ce <_lseek_r+0x1e>
 800f8c8:	682b      	ldr	r3, [r5, #0]
 800f8ca:	b103      	cbz	r3, 800f8ce <_lseek_r+0x1e>
 800f8cc:	6023      	str	r3, [r4, #0]
 800f8ce:	bd38      	pop	{r3, r4, r5, pc}
 800f8d0:	24000e3c 	.word	0x24000e3c

0800f8d4 <_read_r>:
 800f8d4:	b538      	push	{r3, r4, r5, lr}
 800f8d6:	4d07      	ldr	r5, [pc, #28]	@ (800f8f4 <_read_r+0x20>)
 800f8d8:	4604      	mov	r4, r0
 800f8da:	4608      	mov	r0, r1
 800f8dc:	4611      	mov	r1, r2
 800f8de:	2200      	movs	r2, #0
 800f8e0:	602a      	str	r2, [r5, #0]
 800f8e2:	461a      	mov	r2, r3
 800f8e4:	f7f2 faa1 	bl	8001e2a <_read>
 800f8e8:	1c43      	adds	r3, r0, #1
 800f8ea:	d102      	bne.n	800f8f2 <_read_r+0x1e>
 800f8ec:	682b      	ldr	r3, [r5, #0]
 800f8ee:	b103      	cbz	r3, 800f8f2 <_read_r+0x1e>
 800f8f0:	6023      	str	r3, [r4, #0]
 800f8f2:	bd38      	pop	{r3, r4, r5, pc}
 800f8f4:	24000e3c 	.word	0x24000e3c

0800f8f8 <_sbrk_r>:
 800f8f8:	b538      	push	{r3, r4, r5, lr}
 800f8fa:	4d06      	ldr	r5, [pc, #24]	@ (800f914 <_sbrk_r+0x1c>)
 800f8fc:	2300      	movs	r3, #0
 800f8fe:	4604      	mov	r4, r0
 800f900:	4608      	mov	r0, r1
 800f902:	602b      	str	r3, [r5, #0]
 800f904:	f7f2 fafe 	bl	8001f04 <_sbrk>
 800f908:	1c43      	adds	r3, r0, #1
 800f90a:	d102      	bne.n	800f912 <_sbrk_r+0x1a>
 800f90c:	682b      	ldr	r3, [r5, #0]
 800f90e:	b103      	cbz	r3, 800f912 <_sbrk_r+0x1a>
 800f910:	6023      	str	r3, [r4, #0]
 800f912:	bd38      	pop	{r3, r4, r5, pc}
 800f914:	24000e3c 	.word	0x24000e3c

0800f918 <_write_r>:
 800f918:	b538      	push	{r3, r4, r5, lr}
 800f91a:	4d07      	ldr	r5, [pc, #28]	@ (800f938 <_write_r+0x20>)
 800f91c:	4604      	mov	r4, r0
 800f91e:	4608      	mov	r0, r1
 800f920:	4611      	mov	r1, r2
 800f922:	2200      	movs	r2, #0
 800f924:	602a      	str	r2, [r5, #0]
 800f926:	461a      	mov	r2, r3
 800f928:	f7f2 fa9c 	bl	8001e64 <_write>
 800f92c:	1c43      	adds	r3, r0, #1
 800f92e:	d102      	bne.n	800f936 <_write_r+0x1e>
 800f930:	682b      	ldr	r3, [r5, #0]
 800f932:	b103      	cbz	r3, 800f936 <_write_r+0x1e>
 800f934:	6023      	str	r3, [r4, #0]
 800f936:	bd38      	pop	{r3, r4, r5, pc}
 800f938:	24000e3c 	.word	0x24000e3c

0800f93c <__errno>:
 800f93c:	4b01      	ldr	r3, [pc, #4]	@ (800f944 <__errno+0x8>)
 800f93e:	6818      	ldr	r0, [r3, #0]
 800f940:	4770      	bx	lr
 800f942:	bf00      	nop
 800f944:	240001dc 	.word	0x240001dc

0800f948 <__libc_init_array>:
 800f948:	b570      	push	{r4, r5, r6, lr}
 800f94a:	4d0d      	ldr	r5, [pc, #52]	@ (800f980 <__libc_init_array+0x38>)
 800f94c:	4c0d      	ldr	r4, [pc, #52]	@ (800f984 <__libc_init_array+0x3c>)
 800f94e:	1b64      	subs	r4, r4, r5
 800f950:	10a4      	asrs	r4, r4, #2
 800f952:	2600      	movs	r6, #0
 800f954:	42a6      	cmp	r6, r4
 800f956:	d109      	bne.n	800f96c <__libc_init_array+0x24>
 800f958:	4d0b      	ldr	r5, [pc, #44]	@ (800f988 <__libc_init_array+0x40>)
 800f95a:	4c0c      	ldr	r4, [pc, #48]	@ (800f98c <__libc_init_array+0x44>)
 800f95c:	f003 f822 	bl	80129a4 <_init>
 800f960:	1b64      	subs	r4, r4, r5
 800f962:	10a4      	asrs	r4, r4, #2
 800f964:	2600      	movs	r6, #0
 800f966:	42a6      	cmp	r6, r4
 800f968:	d105      	bne.n	800f976 <__libc_init_array+0x2e>
 800f96a:	bd70      	pop	{r4, r5, r6, pc}
 800f96c:	f855 3b04 	ldr.w	r3, [r5], #4
 800f970:	4798      	blx	r3
 800f972:	3601      	adds	r6, #1
 800f974:	e7ee      	b.n	800f954 <__libc_init_array+0xc>
 800f976:	f855 3b04 	ldr.w	r3, [r5], #4
 800f97a:	4798      	blx	r3
 800f97c:	3601      	adds	r6, #1
 800f97e:	e7f2      	b.n	800f966 <__libc_init_array+0x1e>
 800f980:	080131e4 	.word	0x080131e4
 800f984:	080131e4 	.word	0x080131e4
 800f988:	080131e4 	.word	0x080131e4
 800f98c:	080131e8 	.word	0x080131e8

0800f990 <__retarget_lock_init_recursive>:
 800f990:	4770      	bx	lr

0800f992 <__retarget_lock_acquire_recursive>:
 800f992:	4770      	bx	lr

0800f994 <__retarget_lock_release_recursive>:
 800f994:	4770      	bx	lr

0800f996 <memcpy>:
 800f996:	440a      	add	r2, r1
 800f998:	4291      	cmp	r1, r2
 800f99a:	f100 33ff 	add.w	r3, r0, #4294967295
 800f99e:	d100      	bne.n	800f9a2 <memcpy+0xc>
 800f9a0:	4770      	bx	lr
 800f9a2:	b510      	push	{r4, lr}
 800f9a4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f9a8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f9ac:	4291      	cmp	r1, r2
 800f9ae:	d1f9      	bne.n	800f9a4 <memcpy+0xe>
 800f9b0:	bd10      	pop	{r4, pc}
 800f9b2:	0000      	movs	r0, r0
 800f9b4:	0000      	movs	r0, r0
	...

0800f9b8 <nan>:
 800f9b8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800f9c0 <nan+0x8>
 800f9bc:	4770      	bx	lr
 800f9be:	bf00      	nop
 800f9c0:	00000000 	.word	0x00000000
 800f9c4:	7ff80000 	.word	0x7ff80000

0800f9c8 <nanf>:
 800f9c8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800f9d0 <nanf+0x8>
 800f9cc:	4770      	bx	lr
 800f9ce:	bf00      	nop
 800f9d0:	7fc00000 	.word	0x7fc00000

0800f9d4 <quorem>:
 800f9d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9d8:	6903      	ldr	r3, [r0, #16]
 800f9da:	690c      	ldr	r4, [r1, #16]
 800f9dc:	42a3      	cmp	r3, r4
 800f9de:	4607      	mov	r7, r0
 800f9e0:	db7e      	blt.n	800fae0 <quorem+0x10c>
 800f9e2:	3c01      	subs	r4, #1
 800f9e4:	f101 0814 	add.w	r8, r1, #20
 800f9e8:	00a3      	lsls	r3, r4, #2
 800f9ea:	f100 0514 	add.w	r5, r0, #20
 800f9ee:	9300      	str	r3, [sp, #0]
 800f9f0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f9f4:	9301      	str	r3, [sp, #4]
 800f9f6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f9fa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f9fe:	3301      	adds	r3, #1
 800fa00:	429a      	cmp	r2, r3
 800fa02:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800fa06:	fbb2 f6f3 	udiv	r6, r2, r3
 800fa0a:	d32e      	bcc.n	800fa6a <quorem+0x96>
 800fa0c:	f04f 0a00 	mov.w	sl, #0
 800fa10:	46c4      	mov	ip, r8
 800fa12:	46ae      	mov	lr, r5
 800fa14:	46d3      	mov	fp, sl
 800fa16:	f85c 3b04 	ldr.w	r3, [ip], #4
 800fa1a:	b298      	uxth	r0, r3
 800fa1c:	fb06 a000 	mla	r0, r6, r0, sl
 800fa20:	0c02      	lsrs	r2, r0, #16
 800fa22:	0c1b      	lsrs	r3, r3, #16
 800fa24:	fb06 2303 	mla	r3, r6, r3, r2
 800fa28:	f8de 2000 	ldr.w	r2, [lr]
 800fa2c:	b280      	uxth	r0, r0
 800fa2e:	b292      	uxth	r2, r2
 800fa30:	1a12      	subs	r2, r2, r0
 800fa32:	445a      	add	r2, fp
 800fa34:	f8de 0000 	ldr.w	r0, [lr]
 800fa38:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800fa3c:	b29b      	uxth	r3, r3
 800fa3e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800fa42:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800fa46:	b292      	uxth	r2, r2
 800fa48:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800fa4c:	45e1      	cmp	r9, ip
 800fa4e:	f84e 2b04 	str.w	r2, [lr], #4
 800fa52:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800fa56:	d2de      	bcs.n	800fa16 <quorem+0x42>
 800fa58:	9b00      	ldr	r3, [sp, #0]
 800fa5a:	58eb      	ldr	r3, [r5, r3]
 800fa5c:	b92b      	cbnz	r3, 800fa6a <quorem+0x96>
 800fa5e:	9b01      	ldr	r3, [sp, #4]
 800fa60:	3b04      	subs	r3, #4
 800fa62:	429d      	cmp	r5, r3
 800fa64:	461a      	mov	r2, r3
 800fa66:	d32f      	bcc.n	800fac8 <quorem+0xf4>
 800fa68:	613c      	str	r4, [r7, #16]
 800fa6a:	4638      	mov	r0, r7
 800fa6c:	f001 fbec 	bl	8011248 <__mcmp>
 800fa70:	2800      	cmp	r0, #0
 800fa72:	db25      	blt.n	800fac0 <quorem+0xec>
 800fa74:	4629      	mov	r1, r5
 800fa76:	2000      	movs	r0, #0
 800fa78:	f858 2b04 	ldr.w	r2, [r8], #4
 800fa7c:	f8d1 c000 	ldr.w	ip, [r1]
 800fa80:	fa1f fe82 	uxth.w	lr, r2
 800fa84:	fa1f f38c 	uxth.w	r3, ip
 800fa88:	eba3 030e 	sub.w	r3, r3, lr
 800fa8c:	4403      	add	r3, r0
 800fa8e:	0c12      	lsrs	r2, r2, #16
 800fa90:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800fa94:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800fa98:	b29b      	uxth	r3, r3
 800fa9a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fa9e:	45c1      	cmp	r9, r8
 800faa0:	f841 3b04 	str.w	r3, [r1], #4
 800faa4:	ea4f 4022 	mov.w	r0, r2, asr #16
 800faa8:	d2e6      	bcs.n	800fa78 <quorem+0xa4>
 800faaa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800faae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fab2:	b922      	cbnz	r2, 800fabe <quorem+0xea>
 800fab4:	3b04      	subs	r3, #4
 800fab6:	429d      	cmp	r5, r3
 800fab8:	461a      	mov	r2, r3
 800faba:	d30b      	bcc.n	800fad4 <quorem+0x100>
 800fabc:	613c      	str	r4, [r7, #16]
 800fabe:	3601      	adds	r6, #1
 800fac0:	4630      	mov	r0, r6
 800fac2:	b003      	add	sp, #12
 800fac4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fac8:	6812      	ldr	r2, [r2, #0]
 800faca:	3b04      	subs	r3, #4
 800facc:	2a00      	cmp	r2, #0
 800face:	d1cb      	bne.n	800fa68 <quorem+0x94>
 800fad0:	3c01      	subs	r4, #1
 800fad2:	e7c6      	b.n	800fa62 <quorem+0x8e>
 800fad4:	6812      	ldr	r2, [r2, #0]
 800fad6:	3b04      	subs	r3, #4
 800fad8:	2a00      	cmp	r2, #0
 800fada:	d1ef      	bne.n	800fabc <quorem+0xe8>
 800fadc:	3c01      	subs	r4, #1
 800fade:	e7ea      	b.n	800fab6 <quorem+0xe2>
 800fae0:	2000      	movs	r0, #0
 800fae2:	e7ee      	b.n	800fac2 <quorem+0xee>
 800fae4:	0000      	movs	r0, r0
	...

0800fae8 <_dtoa_r>:
 800fae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800faec:	ed2d 8b02 	vpush	{d8}
 800faf0:	69c7      	ldr	r7, [r0, #28]
 800faf2:	b091      	sub	sp, #68	@ 0x44
 800faf4:	ed8d 0b02 	vstr	d0, [sp, #8]
 800faf8:	ec55 4b10 	vmov	r4, r5, d0
 800fafc:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800fafe:	9107      	str	r1, [sp, #28]
 800fb00:	4681      	mov	r9, r0
 800fb02:	9209      	str	r2, [sp, #36]	@ 0x24
 800fb04:	930d      	str	r3, [sp, #52]	@ 0x34
 800fb06:	b97f      	cbnz	r7, 800fb28 <_dtoa_r+0x40>
 800fb08:	2010      	movs	r0, #16
 800fb0a:	f7fe f893 	bl	800dc34 <malloc>
 800fb0e:	4602      	mov	r2, r0
 800fb10:	f8c9 001c 	str.w	r0, [r9, #28]
 800fb14:	b920      	cbnz	r0, 800fb20 <_dtoa_r+0x38>
 800fb16:	4ba0      	ldr	r3, [pc, #640]	@ (800fd98 <_dtoa_r+0x2b0>)
 800fb18:	21ef      	movs	r1, #239	@ 0xef
 800fb1a:	48a0      	ldr	r0, [pc, #640]	@ (800fd9c <_dtoa_r+0x2b4>)
 800fb1c:	f002 fbb4 	bl	8012288 <__assert_func>
 800fb20:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800fb24:	6007      	str	r7, [r0, #0]
 800fb26:	60c7      	str	r7, [r0, #12]
 800fb28:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800fb2c:	6819      	ldr	r1, [r3, #0]
 800fb2e:	b159      	cbz	r1, 800fb48 <_dtoa_r+0x60>
 800fb30:	685a      	ldr	r2, [r3, #4]
 800fb32:	604a      	str	r2, [r1, #4]
 800fb34:	2301      	movs	r3, #1
 800fb36:	4093      	lsls	r3, r2
 800fb38:	608b      	str	r3, [r1, #8]
 800fb3a:	4648      	mov	r0, r9
 800fb3c:	f001 f900 	bl	8010d40 <_Bfree>
 800fb40:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800fb44:	2200      	movs	r2, #0
 800fb46:	601a      	str	r2, [r3, #0]
 800fb48:	1e2b      	subs	r3, r5, #0
 800fb4a:	bfbb      	ittet	lt
 800fb4c:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800fb50:	9303      	strlt	r3, [sp, #12]
 800fb52:	2300      	movge	r3, #0
 800fb54:	2201      	movlt	r2, #1
 800fb56:	bfac      	ite	ge
 800fb58:	6033      	strge	r3, [r6, #0]
 800fb5a:	6032      	strlt	r2, [r6, #0]
 800fb5c:	4b90      	ldr	r3, [pc, #576]	@ (800fda0 <_dtoa_r+0x2b8>)
 800fb5e:	9e03      	ldr	r6, [sp, #12]
 800fb60:	43b3      	bics	r3, r6
 800fb62:	d110      	bne.n	800fb86 <_dtoa_r+0x9e>
 800fb64:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800fb66:	f242 730f 	movw	r3, #9999	@ 0x270f
 800fb6a:	6013      	str	r3, [r2, #0]
 800fb6c:	f3c6 0313 	ubfx	r3, r6, #0, #20
 800fb70:	4323      	orrs	r3, r4
 800fb72:	f000 84de 	beq.w	8010532 <_dtoa_r+0xa4a>
 800fb76:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800fb78:	4f8a      	ldr	r7, [pc, #552]	@ (800fda4 <_dtoa_r+0x2bc>)
 800fb7a:	2b00      	cmp	r3, #0
 800fb7c:	f000 84e0 	beq.w	8010540 <_dtoa_r+0xa58>
 800fb80:	1cfb      	adds	r3, r7, #3
 800fb82:	f000 bcdb 	b.w	801053c <_dtoa_r+0xa54>
 800fb86:	ed9d 8b02 	vldr	d8, [sp, #8]
 800fb8a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800fb8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb92:	d10a      	bne.n	800fbaa <_dtoa_r+0xc2>
 800fb94:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800fb96:	2301      	movs	r3, #1
 800fb98:	6013      	str	r3, [r2, #0]
 800fb9a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800fb9c:	b113      	cbz	r3, 800fba4 <_dtoa_r+0xbc>
 800fb9e:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800fba0:	4b81      	ldr	r3, [pc, #516]	@ (800fda8 <_dtoa_r+0x2c0>)
 800fba2:	6013      	str	r3, [r2, #0]
 800fba4:	4f81      	ldr	r7, [pc, #516]	@ (800fdac <_dtoa_r+0x2c4>)
 800fba6:	f000 bccb 	b.w	8010540 <_dtoa_r+0xa58>
 800fbaa:	aa0e      	add	r2, sp, #56	@ 0x38
 800fbac:	a90f      	add	r1, sp, #60	@ 0x3c
 800fbae:	4648      	mov	r0, r9
 800fbb0:	eeb0 0b48 	vmov.f64	d0, d8
 800fbb4:	f001 fc68 	bl	8011488 <__d2b>
 800fbb8:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800fbbc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800fbbe:	9001      	str	r0, [sp, #4]
 800fbc0:	2b00      	cmp	r3, #0
 800fbc2:	d045      	beq.n	800fc50 <_dtoa_r+0x168>
 800fbc4:	eeb0 7b48 	vmov.f64	d7, d8
 800fbc8:	ee18 1a90 	vmov	r1, s17
 800fbcc:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800fbd0:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800fbd4:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800fbd8:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800fbdc:	2500      	movs	r5, #0
 800fbde:	ee07 1a90 	vmov	s15, r1
 800fbe2:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800fbe6:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800fd80 <_dtoa_r+0x298>
 800fbea:	ee37 7b46 	vsub.f64	d7, d7, d6
 800fbee:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800fd88 <_dtoa_r+0x2a0>
 800fbf2:	eea7 6b05 	vfma.f64	d6, d7, d5
 800fbf6:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800fd90 <_dtoa_r+0x2a8>
 800fbfa:	ee07 3a90 	vmov	s15, r3
 800fbfe:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800fc02:	eeb0 7b46 	vmov.f64	d7, d6
 800fc06:	eea4 7b05 	vfma.f64	d7, d4, d5
 800fc0a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800fc0e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800fc12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc16:	ee16 8a90 	vmov	r8, s13
 800fc1a:	d508      	bpl.n	800fc2e <_dtoa_r+0x146>
 800fc1c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800fc20:	eeb4 6b47 	vcmp.f64	d6, d7
 800fc24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc28:	bf18      	it	ne
 800fc2a:	f108 38ff 	addne.w	r8, r8, #4294967295
 800fc2e:	f1b8 0f16 	cmp.w	r8, #22
 800fc32:	d82b      	bhi.n	800fc8c <_dtoa_r+0x1a4>
 800fc34:	495e      	ldr	r1, [pc, #376]	@ (800fdb0 <_dtoa_r+0x2c8>)
 800fc36:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800fc3a:	ed91 7b00 	vldr	d7, [r1]
 800fc3e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800fc42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc46:	d501      	bpl.n	800fc4c <_dtoa_r+0x164>
 800fc48:	f108 38ff 	add.w	r8, r8, #4294967295
 800fc4c:	2100      	movs	r1, #0
 800fc4e:	e01e      	b.n	800fc8e <_dtoa_r+0x1a6>
 800fc50:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fc52:	4413      	add	r3, r2
 800fc54:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 800fc58:	2920      	cmp	r1, #32
 800fc5a:	bfc1      	itttt	gt
 800fc5c:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 800fc60:	408e      	lslgt	r6, r1
 800fc62:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800fc66:	fa24 f101 	lsrgt.w	r1, r4, r1
 800fc6a:	bfd6      	itet	le
 800fc6c:	f1c1 0120 	rsble	r1, r1, #32
 800fc70:	4331      	orrgt	r1, r6
 800fc72:	fa04 f101 	lslle.w	r1, r4, r1
 800fc76:	ee07 1a90 	vmov	s15, r1
 800fc7a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800fc7e:	3b01      	subs	r3, #1
 800fc80:	ee17 1a90 	vmov	r1, s15
 800fc84:	2501      	movs	r5, #1
 800fc86:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800fc8a:	e7a8      	b.n	800fbde <_dtoa_r+0xf6>
 800fc8c:	2101      	movs	r1, #1
 800fc8e:	1ad2      	subs	r2, r2, r3
 800fc90:	1e53      	subs	r3, r2, #1
 800fc92:	9306      	str	r3, [sp, #24]
 800fc94:	bf45      	ittet	mi
 800fc96:	f1c2 0301 	rsbmi	r3, r2, #1
 800fc9a:	9305      	strmi	r3, [sp, #20]
 800fc9c:	2300      	movpl	r3, #0
 800fc9e:	2300      	movmi	r3, #0
 800fca0:	bf4c      	ite	mi
 800fca2:	9306      	strmi	r3, [sp, #24]
 800fca4:	9305      	strpl	r3, [sp, #20]
 800fca6:	f1b8 0f00 	cmp.w	r8, #0
 800fcaa:	910c      	str	r1, [sp, #48]	@ 0x30
 800fcac:	db18      	blt.n	800fce0 <_dtoa_r+0x1f8>
 800fcae:	9b06      	ldr	r3, [sp, #24]
 800fcb0:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800fcb4:	4443      	add	r3, r8
 800fcb6:	9306      	str	r3, [sp, #24]
 800fcb8:	2300      	movs	r3, #0
 800fcba:	9a07      	ldr	r2, [sp, #28]
 800fcbc:	2a09      	cmp	r2, #9
 800fcbe:	d849      	bhi.n	800fd54 <_dtoa_r+0x26c>
 800fcc0:	2a05      	cmp	r2, #5
 800fcc2:	bfc4      	itt	gt
 800fcc4:	3a04      	subgt	r2, #4
 800fcc6:	9207      	strgt	r2, [sp, #28]
 800fcc8:	9a07      	ldr	r2, [sp, #28]
 800fcca:	f1a2 0202 	sub.w	r2, r2, #2
 800fcce:	bfcc      	ite	gt
 800fcd0:	2400      	movgt	r4, #0
 800fcd2:	2401      	movle	r4, #1
 800fcd4:	2a03      	cmp	r2, #3
 800fcd6:	d848      	bhi.n	800fd6a <_dtoa_r+0x282>
 800fcd8:	e8df f002 	tbb	[pc, r2]
 800fcdc:	3a2c2e0b 	.word	0x3a2c2e0b
 800fce0:	9b05      	ldr	r3, [sp, #20]
 800fce2:	2200      	movs	r2, #0
 800fce4:	eba3 0308 	sub.w	r3, r3, r8
 800fce8:	9305      	str	r3, [sp, #20]
 800fcea:	920a      	str	r2, [sp, #40]	@ 0x28
 800fcec:	f1c8 0300 	rsb	r3, r8, #0
 800fcf0:	e7e3      	b.n	800fcba <_dtoa_r+0x1d2>
 800fcf2:	2200      	movs	r2, #0
 800fcf4:	9208      	str	r2, [sp, #32]
 800fcf6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fcf8:	2a00      	cmp	r2, #0
 800fcfa:	dc39      	bgt.n	800fd70 <_dtoa_r+0x288>
 800fcfc:	f04f 0b01 	mov.w	fp, #1
 800fd00:	46da      	mov	sl, fp
 800fd02:	465a      	mov	r2, fp
 800fd04:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800fd08:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800fd0c:	2100      	movs	r1, #0
 800fd0e:	2004      	movs	r0, #4
 800fd10:	f100 0614 	add.w	r6, r0, #20
 800fd14:	4296      	cmp	r6, r2
 800fd16:	d930      	bls.n	800fd7a <_dtoa_r+0x292>
 800fd18:	6079      	str	r1, [r7, #4]
 800fd1a:	4648      	mov	r0, r9
 800fd1c:	9304      	str	r3, [sp, #16]
 800fd1e:	f000 ffcf 	bl	8010cc0 <_Balloc>
 800fd22:	9b04      	ldr	r3, [sp, #16]
 800fd24:	4607      	mov	r7, r0
 800fd26:	2800      	cmp	r0, #0
 800fd28:	d146      	bne.n	800fdb8 <_dtoa_r+0x2d0>
 800fd2a:	4b22      	ldr	r3, [pc, #136]	@ (800fdb4 <_dtoa_r+0x2cc>)
 800fd2c:	4602      	mov	r2, r0
 800fd2e:	f240 11af 	movw	r1, #431	@ 0x1af
 800fd32:	e6f2      	b.n	800fb1a <_dtoa_r+0x32>
 800fd34:	2201      	movs	r2, #1
 800fd36:	e7dd      	b.n	800fcf4 <_dtoa_r+0x20c>
 800fd38:	2200      	movs	r2, #0
 800fd3a:	9208      	str	r2, [sp, #32]
 800fd3c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fd3e:	eb08 0b02 	add.w	fp, r8, r2
 800fd42:	f10b 0a01 	add.w	sl, fp, #1
 800fd46:	4652      	mov	r2, sl
 800fd48:	2a01      	cmp	r2, #1
 800fd4a:	bfb8      	it	lt
 800fd4c:	2201      	movlt	r2, #1
 800fd4e:	e7db      	b.n	800fd08 <_dtoa_r+0x220>
 800fd50:	2201      	movs	r2, #1
 800fd52:	e7f2      	b.n	800fd3a <_dtoa_r+0x252>
 800fd54:	2401      	movs	r4, #1
 800fd56:	2200      	movs	r2, #0
 800fd58:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800fd5c:	f04f 3bff 	mov.w	fp, #4294967295
 800fd60:	2100      	movs	r1, #0
 800fd62:	46da      	mov	sl, fp
 800fd64:	2212      	movs	r2, #18
 800fd66:	9109      	str	r1, [sp, #36]	@ 0x24
 800fd68:	e7ce      	b.n	800fd08 <_dtoa_r+0x220>
 800fd6a:	2201      	movs	r2, #1
 800fd6c:	9208      	str	r2, [sp, #32]
 800fd6e:	e7f5      	b.n	800fd5c <_dtoa_r+0x274>
 800fd70:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 800fd74:	46da      	mov	sl, fp
 800fd76:	465a      	mov	r2, fp
 800fd78:	e7c6      	b.n	800fd08 <_dtoa_r+0x220>
 800fd7a:	3101      	adds	r1, #1
 800fd7c:	0040      	lsls	r0, r0, #1
 800fd7e:	e7c7      	b.n	800fd10 <_dtoa_r+0x228>
 800fd80:	636f4361 	.word	0x636f4361
 800fd84:	3fd287a7 	.word	0x3fd287a7
 800fd88:	8b60c8b3 	.word	0x8b60c8b3
 800fd8c:	3fc68a28 	.word	0x3fc68a28
 800fd90:	509f79fb 	.word	0x509f79fb
 800fd94:	3fd34413 	.word	0x3fd34413
 800fd98:	08012e34 	.word	0x08012e34
 800fd9c:	08012e4b 	.word	0x08012e4b
 800fda0:	7ff00000 	.word	0x7ff00000
 800fda4:	08012e30 	.word	0x08012e30
 800fda8:	08013199 	.word	0x08013199
 800fdac:	08013198 	.word	0x08013198
 800fdb0:	08012fa8 	.word	0x08012fa8
 800fdb4:	08012ea3 	.word	0x08012ea3
 800fdb8:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800fdbc:	f1ba 0f0e 	cmp.w	sl, #14
 800fdc0:	6010      	str	r0, [r2, #0]
 800fdc2:	d86f      	bhi.n	800fea4 <_dtoa_r+0x3bc>
 800fdc4:	2c00      	cmp	r4, #0
 800fdc6:	d06d      	beq.n	800fea4 <_dtoa_r+0x3bc>
 800fdc8:	f1b8 0f00 	cmp.w	r8, #0
 800fdcc:	f340 80c2 	ble.w	800ff54 <_dtoa_r+0x46c>
 800fdd0:	4aca      	ldr	r2, [pc, #808]	@ (80100fc <_dtoa_r+0x614>)
 800fdd2:	f008 010f 	and.w	r1, r8, #15
 800fdd6:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800fdda:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800fdde:	ed92 7b00 	vldr	d7, [r2]
 800fde2:	ea4f 1128 	mov.w	r1, r8, asr #4
 800fde6:	f000 80a9 	beq.w	800ff3c <_dtoa_r+0x454>
 800fdea:	4ac5      	ldr	r2, [pc, #788]	@ (8010100 <_dtoa_r+0x618>)
 800fdec:	ed92 6b08 	vldr	d6, [r2, #32]
 800fdf0:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800fdf4:	ed8d 6b02 	vstr	d6, [sp, #8]
 800fdf8:	f001 010f 	and.w	r1, r1, #15
 800fdfc:	2203      	movs	r2, #3
 800fdfe:	48c0      	ldr	r0, [pc, #768]	@ (8010100 <_dtoa_r+0x618>)
 800fe00:	2900      	cmp	r1, #0
 800fe02:	f040 809d 	bne.w	800ff40 <_dtoa_r+0x458>
 800fe06:	ed9d 6b02 	vldr	d6, [sp, #8]
 800fe0a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800fe0e:	ed8d 7b02 	vstr	d7, [sp, #8]
 800fe12:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800fe14:	ed9d 7b02 	vldr	d7, [sp, #8]
 800fe18:	2900      	cmp	r1, #0
 800fe1a:	f000 80c1 	beq.w	800ffa0 <_dtoa_r+0x4b8>
 800fe1e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800fe22:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800fe26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe2a:	f140 80b9 	bpl.w	800ffa0 <_dtoa_r+0x4b8>
 800fe2e:	f1ba 0f00 	cmp.w	sl, #0
 800fe32:	f000 80b5 	beq.w	800ffa0 <_dtoa_r+0x4b8>
 800fe36:	f1bb 0f00 	cmp.w	fp, #0
 800fe3a:	dd31      	ble.n	800fea0 <_dtoa_r+0x3b8>
 800fe3c:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800fe40:	ee27 7b06 	vmul.f64	d7, d7, d6
 800fe44:	ed8d 7b02 	vstr	d7, [sp, #8]
 800fe48:	f108 31ff 	add.w	r1, r8, #4294967295
 800fe4c:	9104      	str	r1, [sp, #16]
 800fe4e:	3201      	adds	r2, #1
 800fe50:	465c      	mov	r4, fp
 800fe52:	ed9d 6b02 	vldr	d6, [sp, #8]
 800fe56:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800fe5a:	ee07 2a90 	vmov	s15, r2
 800fe5e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800fe62:	eea7 5b06 	vfma.f64	d5, d7, d6
 800fe66:	ee15 2a90 	vmov	r2, s11
 800fe6a:	ec51 0b15 	vmov	r0, r1, d5
 800fe6e:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800fe72:	2c00      	cmp	r4, #0
 800fe74:	f040 8098 	bne.w	800ffa8 <_dtoa_r+0x4c0>
 800fe78:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800fe7c:	ee36 6b47 	vsub.f64	d6, d6, d7
 800fe80:	ec41 0b17 	vmov	d7, r0, r1
 800fe84:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800fe88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe8c:	f300 8261 	bgt.w	8010352 <_dtoa_r+0x86a>
 800fe90:	eeb1 7b47 	vneg.f64	d7, d7
 800fe94:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800fe98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe9c:	f100 80f5 	bmi.w	801008a <_dtoa_r+0x5a2>
 800fea0:	ed8d 8b02 	vstr	d8, [sp, #8]
 800fea4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800fea6:	2a00      	cmp	r2, #0
 800fea8:	f2c0 812c 	blt.w	8010104 <_dtoa_r+0x61c>
 800feac:	f1b8 0f0e 	cmp.w	r8, #14
 800feb0:	f300 8128 	bgt.w	8010104 <_dtoa_r+0x61c>
 800feb4:	4b91      	ldr	r3, [pc, #580]	@ (80100fc <_dtoa_r+0x614>)
 800feb6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800feba:	ed93 6b00 	vldr	d6, [r3]
 800febe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fec0:	2b00      	cmp	r3, #0
 800fec2:	da03      	bge.n	800fecc <_dtoa_r+0x3e4>
 800fec4:	f1ba 0f00 	cmp.w	sl, #0
 800fec8:	f340 80d2 	ble.w	8010070 <_dtoa_r+0x588>
 800fecc:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 800fed0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800fed4:	463e      	mov	r6, r7
 800fed6:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800feda:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800fede:	ee15 3a10 	vmov	r3, s10
 800fee2:	3330      	adds	r3, #48	@ 0x30
 800fee4:	f806 3b01 	strb.w	r3, [r6], #1
 800fee8:	1bf3      	subs	r3, r6, r7
 800feea:	459a      	cmp	sl, r3
 800feec:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800fef0:	eea3 7b46 	vfms.f64	d7, d3, d6
 800fef4:	f040 80f8 	bne.w	80100e8 <_dtoa_r+0x600>
 800fef8:	ee37 7b07 	vadd.f64	d7, d7, d7
 800fefc:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800ff00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff04:	f300 80dd 	bgt.w	80100c2 <_dtoa_r+0x5da>
 800ff08:	eeb4 7b46 	vcmp.f64	d7, d6
 800ff0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff10:	d104      	bne.n	800ff1c <_dtoa_r+0x434>
 800ff12:	ee15 3a10 	vmov	r3, s10
 800ff16:	07db      	lsls	r3, r3, #31
 800ff18:	f100 80d3 	bmi.w	80100c2 <_dtoa_r+0x5da>
 800ff1c:	9901      	ldr	r1, [sp, #4]
 800ff1e:	4648      	mov	r0, r9
 800ff20:	f000 ff0e 	bl	8010d40 <_Bfree>
 800ff24:	2300      	movs	r3, #0
 800ff26:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ff28:	7033      	strb	r3, [r6, #0]
 800ff2a:	f108 0301 	add.w	r3, r8, #1
 800ff2e:	6013      	str	r3, [r2, #0]
 800ff30:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800ff32:	2b00      	cmp	r3, #0
 800ff34:	f000 8304 	beq.w	8010540 <_dtoa_r+0xa58>
 800ff38:	601e      	str	r6, [r3, #0]
 800ff3a:	e301      	b.n	8010540 <_dtoa_r+0xa58>
 800ff3c:	2202      	movs	r2, #2
 800ff3e:	e75e      	b.n	800fdfe <_dtoa_r+0x316>
 800ff40:	07cc      	lsls	r4, r1, #31
 800ff42:	d504      	bpl.n	800ff4e <_dtoa_r+0x466>
 800ff44:	ed90 6b00 	vldr	d6, [r0]
 800ff48:	3201      	adds	r2, #1
 800ff4a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ff4e:	1049      	asrs	r1, r1, #1
 800ff50:	3008      	adds	r0, #8
 800ff52:	e755      	b.n	800fe00 <_dtoa_r+0x318>
 800ff54:	d022      	beq.n	800ff9c <_dtoa_r+0x4b4>
 800ff56:	f1c8 0100 	rsb	r1, r8, #0
 800ff5a:	4a68      	ldr	r2, [pc, #416]	@ (80100fc <_dtoa_r+0x614>)
 800ff5c:	f001 000f 	and.w	r0, r1, #15
 800ff60:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800ff64:	ed92 7b00 	vldr	d7, [r2]
 800ff68:	ee28 7b07 	vmul.f64	d7, d8, d7
 800ff6c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ff70:	4863      	ldr	r0, [pc, #396]	@ (8010100 <_dtoa_r+0x618>)
 800ff72:	1109      	asrs	r1, r1, #4
 800ff74:	2400      	movs	r4, #0
 800ff76:	2202      	movs	r2, #2
 800ff78:	b929      	cbnz	r1, 800ff86 <_dtoa_r+0x49e>
 800ff7a:	2c00      	cmp	r4, #0
 800ff7c:	f43f af49 	beq.w	800fe12 <_dtoa_r+0x32a>
 800ff80:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ff84:	e745      	b.n	800fe12 <_dtoa_r+0x32a>
 800ff86:	07ce      	lsls	r6, r1, #31
 800ff88:	d505      	bpl.n	800ff96 <_dtoa_r+0x4ae>
 800ff8a:	ed90 6b00 	vldr	d6, [r0]
 800ff8e:	3201      	adds	r2, #1
 800ff90:	2401      	movs	r4, #1
 800ff92:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ff96:	1049      	asrs	r1, r1, #1
 800ff98:	3008      	adds	r0, #8
 800ff9a:	e7ed      	b.n	800ff78 <_dtoa_r+0x490>
 800ff9c:	2202      	movs	r2, #2
 800ff9e:	e738      	b.n	800fe12 <_dtoa_r+0x32a>
 800ffa0:	f8cd 8010 	str.w	r8, [sp, #16]
 800ffa4:	4654      	mov	r4, sl
 800ffa6:	e754      	b.n	800fe52 <_dtoa_r+0x36a>
 800ffa8:	4a54      	ldr	r2, [pc, #336]	@ (80100fc <_dtoa_r+0x614>)
 800ffaa:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800ffae:	ed12 4b02 	vldr	d4, [r2, #-8]
 800ffb2:	9a08      	ldr	r2, [sp, #32]
 800ffb4:	ec41 0b17 	vmov	d7, r0, r1
 800ffb8:	443c      	add	r4, r7
 800ffba:	b34a      	cbz	r2, 8010010 <_dtoa_r+0x528>
 800ffbc:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 800ffc0:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 800ffc4:	463e      	mov	r6, r7
 800ffc6:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800ffca:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800ffce:	ee35 7b47 	vsub.f64	d7, d5, d7
 800ffd2:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800ffd6:	ee14 2a90 	vmov	r2, s9
 800ffda:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800ffde:	3230      	adds	r2, #48	@ 0x30
 800ffe0:	ee36 6b45 	vsub.f64	d6, d6, d5
 800ffe4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ffe8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ffec:	f806 2b01 	strb.w	r2, [r6], #1
 800fff0:	d438      	bmi.n	8010064 <_dtoa_r+0x57c>
 800fff2:	ee32 5b46 	vsub.f64	d5, d2, d6
 800fff6:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800fffa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fffe:	d462      	bmi.n	80100c6 <_dtoa_r+0x5de>
 8010000:	42a6      	cmp	r6, r4
 8010002:	f43f af4d 	beq.w	800fea0 <_dtoa_r+0x3b8>
 8010006:	ee27 7b03 	vmul.f64	d7, d7, d3
 801000a:	ee26 6b03 	vmul.f64	d6, d6, d3
 801000e:	e7e0      	b.n	800ffd2 <_dtoa_r+0x4ea>
 8010010:	4621      	mov	r1, r4
 8010012:	463e      	mov	r6, r7
 8010014:	ee27 7b04 	vmul.f64	d7, d7, d4
 8010018:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 801001c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8010020:	ee14 2a90 	vmov	r2, s9
 8010024:	3230      	adds	r2, #48	@ 0x30
 8010026:	f806 2b01 	strb.w	r2, [r6], #1
 801002a:	42a6      	cmp	r6, r4
 801002c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8010030:	ee36 6b45 	vsub.f64	d6, d6, d5
 8010034:	d119      	bne.n	801006a <_dtoa_r+0x582>
 8010036:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 801003a:	ee37 4b05 	vadd.f64	d4, d7, d5
 801003e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8010042:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010046:	dc3e      	bgt.n	80100c6 <_dtoa_r+0x5de>
 8010048:	ee35 5b47 	vsub.f64	d5, d5, d7
 801004c:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8010050:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010054:	f57f af24 	bpl.w	800fea0 <_dtoa_r+0x3b8>
 8010058:	460e      	mov	r6, r1
 801005a:	3901      	subs	r1, #1
 801005c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8010060:	2b30      	cmp	r3, #48	@ 0x30
 8010062:	d0f9      	beq.n	8010058 <_dtoa_r+0x570>
 8010064:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8010068:	e758      	b.n	800ff1c <_dtoa_r+0x434>
 801006a:	ee26 6b03 	vmul.f64	d6, d6, d3
 801006e:	e7d5      	b.n	801001c <_dtoa_r+0x534>
 8010070:	d10b      	bne.n	801008a <_dtoa_r+0x5a2>
 8010072:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8010076:	ee26 6b07 	vmul.f64	d6, d6, d7
 801007a:	ed9d 7b02 	vldr	d7, [sp, #8]
 801007e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010082:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010086:	f2c0 8161 	blt.w	801034c <_dtoa_r+0x864>
 801008a:	2400      	movs	r4, #0
 801008c:	4625      	mov	r5, r4
 801008e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010090:	43db      	mvns	r3, r3
 8010092:	9304      	str	r3, [sp, #16]
 8010094:	463e      	mov	r6, r7
 8010096:	f04f 0800 	mov.w	r8, #0
 801009a:	4621      	mov	r1, r4
 801009c:	4648      	mov	r0, r9
 801009e:	f000 fe4f 	bl	8010d40 <_Bfree>
 80100a2:	2d00      	cmp	r5, #0
 80100a4:	d0de      	beq.n	8010064 <_dtoa_r+0x57c>
 80100a6:	f1b8 0f00 	cmp.w	r8, #0
 80100aa:	d005      	beq.n	80100b8 <_dtoa_r+0x5d0>
 80100ac:	45a8      	cmp	r8, r5
 80100ae:	d003      	beq.n	80100b8 <_dtoa_r+0x5d0>
 80100b0:	4641      	mov	r1, r8
 80100b2:	4648      	mov	r0, r9
 80100b4:	f000 fe44 	bl	8010d40 <_Bfree>
 80100b8:	4629      	mov	r1, r5
 80100ba:	4648      	mov	r0, r9
 80100bc:	f000 fe40 	bl	8010d40 <_Bfree>
 80100c0:	e7d0      	b.n	8010064 <_dtoa_r+0x57c>
 80100c2:	f8cd 8010 	str.w	r8, [sp, #16]
 80100c6:	4633      	mov	r3, r6
 80100c8:	461e      	mov	r6, r3
 80100ca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80100ce:	2a39      	cmp	r2, #57	@ 0x39
 80100d0:	d106      	bne.n	80100e0 <_dtoa_r+0x5f8>
 80100d2:	429f      	cmp	r7, r3
 80100d4:	d1f8      	bne.n	80100c8 <_dtoa_r+0x5e0>
 80100d6:	9a04      	ldr	r2, [sp, #16]
 80100d8:	3201      	adds	r2, #1
 80100da:	9204      	str	r2, [sp, #16]
 80100dc:	2230      	movs	r2, #48	@ 0x30
 80100de:	703a      	strb	r2, [r7, #0]
 80100e0:	781a      	ldrb	r2, [r3, #0]
 80100e2:	3201      	adds	r2, #1
 80100e4:	701a      	strb	r2, [r3, #0]
 80100e6:	e7bd      	b.n	8010064 <_dtoa_r+0x57c>
 80100e8:	ee27 7b04 	vmul.f64	d7, d7, d4
 80100ec:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80100f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80100f4:	f47f aeef 	bne.w	800fed6 <_dtoa_r+0x3ee>
 80100f8:	e710      	b.n	800ff1c <_dtoa_r+0x434>
 80100fa:	bf00      	nop
 80100fc:	08012fa8 	.word	0x08012fa8
 8010100:	08012f80 	.word	0x08012f80
 8010104:	9908      	ldr	r1, [sp, #32]
 8010106:	2900      	cmp	r1, #0
 8010108:	f000 80e3 	beq.w	80102d2 <_dtoa_r+0x7ea>
 801010c:	9907      	ldr	r1, [sp, #28]
 801010e:	2901      	cmp	r1, #1
 8010110:	f300 80c8 	bgt.w	80102a4 <_dtoa_r+0x7bc>
 8010114:	2d00      	cmp	r5, #0
 8010116:	f000 80c1 	beq.w	801029c <_dtoa_r+0x7b4>
 801011a:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 801011e:	9e05      	ldr	r6, [sp, #20]
 8010120:	461c      	mov	r4, r3
 8010122:	9304      	str	r3, [sp, #16]
 8010124:	9b05      	ldr	r3, [sp, #20]
 8010126:	4413      	add	r3, r2
 8010128:	9305      	str	r3, [sp, #20]
 801012a:	9b06      	ldr	r3, [sp, #24]
 801012c:	2101      	movs	r1, #1
 801012e:	4413      	add	r3, r2
 8010130:	4648      	mov	r0, r9
 8010132:	9306      	str	r3, [sp, #24]
 8010134:	f000 ff02 	bl	8010f3c <__i2b>
 8010138:	9b04      	ldr	r3, [sp, #16]
 801013a:	4605      	mov	r5, r0
 801013c:	b166      	cbz	r6, 8010158 <_dtoa_r+0x670>
 801013e:	9a06      	ldr	r2, [sp, #24]
 8010140:	2a00      	cmp	r2, #0
 8010142:	dd09      	ble.n	8010158 <_dtoa_r+0x670>
 8010144:	42b2      	cmp	r2, r6
 8010146:	9905      	ldr	r1, [sp, #20]
 8010148:	bfa8      	it	ge
 801014a:	4632      	movge	r2, r6
 801014c:	1a89      	subs	r1, r1, r2
 801014e:	9105      	str	r1, [sp, #20]
 8010150:	9906      	ldr	r1, [sp, #24]
 8010152:	1ab6      	subs	r6, r6, r2
 8010154:	1a8a      	subs	r2, r1, r2
 8010156:	9206      	str	r2, [sp, #24]
 8010158:	b1fb      	cbz	r3, 801019a <_dtoa_r+0x6b2>
 801015a:	9a08      	ldr	r2, [sp, #32]
 801015c:	2a00      	cmp	r2, #0
 801015e:	f000 80bc 	beq.w	80102da <_dtoa_r+0x7f2>
 8010162:	b19c      	cbz	r4, 801018c <_dtoa_r+0x6a4>
 8010164:	4629      	mov	r1, r5
 8010166:	4622      	mov	r2, r4
 8010168:	4648      	mov	r0, r9
 801016a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801016c:	f000 ffa6 	bl	80110bc <__pow5mult>
 8010170:	9a01      	ldr	r2, [sp, #4]
 8010172:	4601      	mov	r1, r0
 8010174:	4605      	mov	r5, r0
 8010176:	4648      	mov	r0, r9
 8010178:	f000 fef6 	bl	8010f68 <__multiply>
 801017c:	9901      	ldr	r1, [sp, #4]
 801017e:	9004      	str	r0, [sp, #16]
 8010180:	4648      	mov	r0, r9
 8010182:	f000 fddd 	bl	8010d40 <_Bfree>
 8010186:	9a04      	ldr	r2, [sp, #16]
 8010188:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801018a:	9201      	str	r2, [sp, #4]
 801018c:	1b1a      	subs	r2, r3, r4
 801018e:	d004      	beq.n	801019a <_dtoa_r+0x6b2>
 8010190:	9901      	ldr	r1, [sp, #4]
 8010192:	4648      	mov	r0, r9
 8010194:	f000 ff92 	bl	80110bc <__pow5mult>
 8010198:	9001      	str	r0, [sp, #4]
 801019a:	2101      	movs	r1, #1
 801019c:	4648      	mov	r0, r9
 801019e:	f000 fecd 	bl	8010f3c <__i2b>
 80101a2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80101a4:	4604      	mov	r4, r0
 80101a6:	2b00      	cmp	r3, #0
 80101a8:	f000 81d0 	beq.w	801054c <_dtoa_r+0xa64>
 80101ac:	461a      	mov	r2, r3
 80101ae:	4601      	mov	r1, r0
 80101b0:	4648      	mov	r0, r9
 80101b2:	f000 ff83 	bl	80110bc <__pow5mult>
 80101b6:	9b07      	ldr	r3, [sp, #28]
 80101b8:	2b01      	cmp	r3, #1
 80101ba:	4604      	mov	r4, r0
 80101bc:	f300 8095 	bgt.w	80102ea <_dtoa_r+0x802>
 80101c0:	9b02      	ldr	r3, [sp, #8]
 80101c2:	2b00      	cmp	r3, #0
 80101c4:	f040 808b 	bne.w	80102de <_dtoa_r+0x7f6>
 80101c8:	9b03      	ldr	r3, [sp, #12]
 80101ca:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80101ce:	2a00      	cmp	r2, #0
 80101d0:	f040 8087 	bne.w	80102e2 <_dtoa_r+0x7fa>
 80101d4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80101d8:	0d12      	lsrs	r2, r2, #20
 80101da:	0512      	lsls	r2, r2, #20
 80101dc:	2a00      	cmp	r2, #0
 80101de:	f000 8082 	beq.w	80102e6 <_dtoa_r+0x7fe>
 80101e2:	9b05      	ldr	r3, [sp, #20]
 80101e4:	3301      	adds	r3, #1
 80101e6:	9305      	str	r3, [sp, #20]
 80101e8:	9b06      	ldr	r3, [sp, #24]
 80101ea:	3301      	adds	r3, #1
 80101ec:	9306      	str	r3, [sp, #24]
 80101ee:	2301      	movs	r3, #1
 80101f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80101f2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80101f4:	2b00      	cmp	r3, #0
 80101f6:	f000 81af 	beq.w	8010558 <_dtoa_r+0xa70>
 80101fa:	6922      	ldr	r2, [r4, #16]
 80101fc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8010200:	6910      	ldr	r0, [r2, #16]
 8010202:	f000 fe4f 	bl	8010ea4 <__hi0bits>
 8010206:	f1c0 0020 	rsb	r0, r0, #32
 801020a:	9b06      	ldr	r3, [sp, #24]
 801020c:	4418      	add	r0, r3
 801020e:	f010 001f 	ands.w	r0, r0, #31
 8010212:	d076      	beq.n	8010302 <_dtoa_r+0x81a>
 8010214:	f1c0 0220 	rsb	r2, r0, #32
 8010218:	2a04      	cmp	r2, #4
 801021a:	dd69      	ble.n	80102f0 <_dtoa_r+0x808>
 801021c:	9b05      	ldr	r3, [sp, #20]
 801021e:	f1c0 001c 	rsb	r0, r0, #28
 8010222:	4403      	add	r3, r0
 8010224:	9305      	str	r3, [sp, #20]
 8010226:	9b06      	ldr	r3, [sp, #24]
 8010228:	4406      	add	r6, r0
 801022a:	4403      	add	r3, r0
 801022c:	9306      	str	r3, [sp, #24]
 801022e:	9b05      	ldr	r3, [sp, #20]
 8010230:	2b00      	cmp	r3, #0
 8010232:	dd05      	ble.n	8010240 <_dtoa_r+0x758>
 8010234:	9901      	ldr	r1, [sp, #4]
 8010236:	461a      	mov	r2, r3
 8010238:	4648      	mov	r0, r9
 801023a:	f000 ff99 	bl	8011170 <__lshift>
 801023e:	9001      	str	r0, [sp, #4]
 8010240:	9b06      	ldr	r3, [sp, #24]
 8010242:	2b00      	cmp	r3, #0
 8010244:	dd05      	ble.n	8010252 <_dtoa_r+0x76a>
 8010246:	4621      	mov	r1, r4
 8010248:	461a      	mov	r2, r3
 801024a:	4648      	mov	r0, r9
 801024c:	f000 ff90 	bl	8011170 <__lshift>
 8010250:	4604      	mov	r4, r0
 8010252:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010254:	2b00      	cmp	r3, #0
 8010256:	d056      	beq.n	8010306 <_dtoa_r+0x81e>
 8010258:	9801      	ldr	r0, [sp, #4]
 801025a:	4621      	mov	r1, r4
 801025c:	f000 fff4 	bl	8011248 <__mcmp>
 8010260:	2800      	cmp	r0, #0
 8010262:	da50      	bge.n	8010306 <_dtoa_r+0x81e>
 8010264:	f108 33ff 	add.w	r3, r8, #4294967295
 8010268:	9304      	str	r3, [sp, #16]
 801026a:	9901      	ldr	r1, [sp, #4]
 801026c:	2300      	movs	r3, #0
 801026e:	220a      	movs	r2, #10
 8010270:	4648      	mov	r0, r9
 8010272:	f000 fd87 	bl	8010d84 <__multadd>
 8010276:	9b08      	ldr	r3, [sp, #32]
 8010278:	9001      	str	r0, [sp, #4]
 801027a:	2b00      	cmp	r3, #0
 801027c:	f000 816e 	beq.w	801055c <_dtoa_r+0xa74>
 8010280:	4629      	mov	r1, r5
 8010282:	2300      	movs	r3, #0
 8010284:	220a      	movs	r2, #10
 8010286:	4648      	mov	r0, r9
 8010288:	f000 fd7c 	bl	8010d84 <__multadd>
 801028c:	f1bb 0f00 	cmp.w	fp, #0
 8010290:	4605      	mov	r5, r0
 8010292:	dc64      	bgt.n	801035e <_dtoa_r+0x876>
 8010294:	9b07      	ldr	r3, [sp, #28]
 8010296:	2b02      	cmp	r3, #2
 8010298:	dc3e      	bgt.n	8010318 <_dtoa_r+0x830>
 801029a:	e060      	b.n	801035e <_dtoa_r+0x876>
 801029c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801029e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80102a2:	e73c      	b.n	801011e <_dtoa_r+0x636>
 80102a4:	f10a 34ff 	add.w	r4, sl, #4294967295
 80102a8:	42a3      	cmp	r3, r4
 80102aa:	bfbf      	itttt	lt
 80102ac:	1ae2      	sublt	r2, r4, r3
 80102ae:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80102b0:	189b      	addlt	r3, r3, r2
 80102b2:	930a      	strlt	r3, [sp, #40]	@ 0x28
 80102b4:	bfae      	itee	ge
 80102b6:	1b1c      	subge	r4, r3, r4
 80102b8:	4623      	movlt	r3, r4
 80102ba:	2400      	movlt	r4, #0
 80102bc:	f1ba 0f00 	cmp.w	sl, #0
 80102c0:	bfb5      	itete	lt
 80102c2:	9a05      	ldrlt	r2, [sp, #20]
 80102c4:	9e05      	ldrge	r6, [sp, #20]
 80102c6:	eba2 060a 	sublt.w	r6, r2, sl
 80102ca:	4652      	movge	r2, sl
 80102cc:	bfb8      	it	lt
 80102ce:	2200      	movlt	r2, #0
 80102d0:	e727      	b.n	8010122 <_dtoa_r+0x63a>
 80102d2:	9e05      	ldr	r6, [sp, #20]
 80102d4:	9d08      	ldr	r5, [sp, #32]
 80102d6:	461c      	mov	r4, r3
 80102d8:	e730      	b.n	801013c <_dtoa_r+0x654>
 80102da:	461a      	mov	r2, r3
 80102dc:	e758      	b.n	8010190 <_dtoa_r+0x6a8>
 80102de:	2300      	movs	r3, #0
 80102e0:	e786      	b.n	80101f0 <_dtoa_r+0x708>
 80102e2:	9b02      	ldr	r3, [sp, #8]
 80102e4:	e784      	b.n	80101f0 <_dtoa_r+0x708>
 80102e6:	920b      	str	r2, [sp, #44]	@ 0x2c
 80102e8:	e783      	b.n	80101f2 <_dtoa_r+0x70a>
 80102ea:	2300      	movs	r3, #0
 80102ec:	930b      	str	r3, [sp, #44]	@ 0x2c
 80102ee:	e784      	b.n	80101fa <_dtoa_r+0x712>
 80102f0:	d09d      	beq.n	801022e <_dtoa_r+0x746>
 80102f2:	9b05      	ldr	r3, [sp, #20]
 80102f4:	321c      	adds	r2, #28
 80102f6:	4413      	add	r3, r2
 80102f8:	9305      	str	r3, [sp, #20]
 80102fa:	9b06      	ldr	r3, [sp, #24]
 80102fc:	4416      	add	r6, r2
 80102fe:	4413      	add	r3, r2
 8010300:	e794      	b.n	801022c <_dtoa_r+0x744>
 8010302:	4602      	mov	r2, r0
 8010304:	e7f5      	b.n	80102f2 <_dtoa_r+0x80a>
 8010306:	f1ba 0f00 	cmp.w	sl, #0
 801030a:	f8cd 8010 	str.w	r8, [sp, #16]
 801030e:	46d3      	mov	fp, sl
 8010310:	dc21      	bgt.n	8010356 <_dtoa_r+0x86e>
 8010312:	9b07      	ldr	r3, [sp, #28]
 8010314:	2b02      	cmp	r3, #2
 8010316:	dd1e      	ble.n	8010356 <_dtoa_r+0x86e>
 8010318:	f1bb 0f00 	cmp.w	fp, #0
 801031c:	f47f aeb7 	bne.w	801008e <_dtoa_r+0x5a6>
 8010320:	4621      	mov	r1, r4
 8010322:	465b      	mov	r3, fp
 8010324:	2205      	movs	r2, #5
 8010326:	4648      	mov	r0, r9
 8010328:	f000 fd2c 	bl	8010d84 <__multadd>
 801032c:	4601      	mov	r1, r0
 801032e:	4604      	mov	r4, r0
 8010330:	9801      	ldr	r0, [sp, #4]
 8010332:	f000 ff89 	bl	8011248 <__mcmp>
 8010336:	2800      	cmp	r0, #0
 8010338:	f77f aea9 	ble.w	801008e <_dtoa_r+0x5a6>
 801033c:	463e      	mov	r6, r7
 801033e:	2331      	movs	r3, #49	@ 0x31
 8010340:	f806 3b01 	strb.w	r3, [r6], #1
 8010344:	9b04      	ldr	r3, [sp, #16]
 8010346:	3301      	adds	r3, #1
 8010348:	9304      	str	r3, [sp, #16]
 801034a:	e6a4      	b.n	8010096 <_dtoa_r+0x5ae>
 801034c:	f8cd 8010 	str.w	r8, [sp, #16]
 8010350:	4654      	mov	r4, sl
 8010352:	4625      	mov	r5, r4
 8010354:	e7f2      	b.n	801033c <_dtoa_r+0x854>
 8010356:	9b08      	ldr	r3, [sp, #32]
 8010358:	2b00      	cmp	r3, #0
 801035a:	f000 8103 	beq.w	8010564 <_dtoa_r+0xa7c>
 801035e:	2e00      	cmp	r6, #0
 8010360:	dd05      	ble.n	801036e <_dtoa_r+0x886>
 8010362:	4629      	mov	r1, r5
 8010364:	4632      	mov	r2, r6
 8010366:	4648      	mov	r0, r9
 8010368:	f000 ff02 	bl	8011170 <__lshift>
 801036c:	4605      	mov	r5, r0
 801036e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010370:	2b00      	cmp	r3, #0
 8010372:	d058      	beq.n	8010426 <_dtoa_r+0x93e>
 8010374:	6869      	ldr	r1, [r5, #4]
 8010376:	4648      	mov	r0, r9
 8010378:	f000 fca2 	bl	8010cc0 <_Balloc>
 801037c:	4606      	mov	r6, r0
 801037e:	b928      	cbnz	r0, 801038c <_dtoa_r+0x8a4>
 8010380:	4b82      	ldr	r3, [pc, #520]	@ (801058c <_dtoa_r+0xaa4>)
 8010382:	4602      	mov	r2, r0
 8010384:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8010388:	f7ff bbc7 	b.w	800fb1a <_dtoa_r+0x32>
 801038c:	692a      	ldr	r2, [r5, #16]
 801038e:	3202      	adds	r2, #2
 8010390:	0092      	lsls	r2, r2, #2
 8010392:	f105 010c 	add.w	r1, r5, #12
 8010396:	300c      	adds	r0, #12
 8010398:	f7ff fafd 	bl	800f996 <memcpy>
 801039c:	2201      	movs	r2, #1
 801039e:	4631      	mov	r1, r6
 80103a0:	4648      	mov	r0, r9
 80103a2:	f000 fee5 	bl	8011170 <__lshift>
 80103a6:	1c7b      	adds	r3, r7, #1
 80103a8:	9305      	str	r3, [sp, #20]
 80103aa:	eb07 030b 	add.w	r3, r7, fp
 80103ae:	9309      	str	r3, [sp, #36]	@ 0x24
 80103b0:	9b02      	ldr	r3, [sp, #8]
 80103b2:	f003 0301 	and.w	r3, r3, #1
 80103b6:	46a8      	mov	r8, r5
 80103b8:	9308      	str	r3, [sp, #32]
 80103ba:	4605      	mov	r5, r0
 80103bc:	9b05      	ldr	r3, [sp, #20]
 80103be:	9801      	ldr	r0, [sp, #4]
 80103c0:	4621      	mov	r1, r4
 80103c2:	f103 3bff 	add.w	fp, r3, #4294967295
 80103c6:	f7ff fb05 	bl	800f9d4 <quorem>
 80103ca:	4641      	mov	r1, r8
 80103cc:	9002      	str	r0, [sp, #8]
 80103ce:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 80103d2:	9801      	ldr	r0, [sp, #4]
 80103d4:	f000 ff38 	bl	8011248 <__mcmp>
 80103d8:	462a      	mov	r2, r5
 80103da:	9006      	str	r0, [sp, #24]
 80103dc:	4621      	mov	r1, r4
 80103de:	4648      	mov	r0, r9
 80103e0:	f000 ff4e 	bl	8011280 <__mdiff>
 80103e4:	68c2      	ldr	r2, [r0, #12]
 80103e6:	4606      	mov	r6, r0
 80103e8:	b9fa      	cbnz	r2, 801042a <_dtoa_r+0x942>
 80103ea:	4601      	mov	r1, r0
 80103ec:	9801      	ldr	r0, [sp, #4]
 80103ee:	f000 ff2b 	bl	8011248 <__mcmp>
 80103f2:	4602      	mov	r2, r0
 80103f4:	4631      	mov	r1, r6
 80103f6:	4648      	mov	r0, r9
 80103f8:	920a      	str	r2, [sp, #40]	@ 0x28
 80103fa:	f000 fca1 	bl	8010d40 <_Bfree>
 80103fe:	9b07      	ldr	r3, [sp, #28]
 8010400:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010402:	9e05      	ldr	r6, [sp, #20]
 8010404:	ea43 0102 	orr.w	r1, r3, r2
 8010408:	9b08      	ldr	r3, [sp, #32]
 801040a:	4319      	orrs	r1, r3
 801040c:	d10f      	bne.n	801042e <_dtoa_r+0x946>
 801040e:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8010412:	d028      	beq.n	8010466 <_dtoa_r+0x97e>
 8010414:	9b06      	ldr	r3, [sp, #24]
 8010416:	2b00      	cmp	r3, #0
 8010418:	dd02      	ble.n	8010420 <_dtoa_r+0x938>
 801041a:	9b02      	ldr	r3, [sp, #8]
 801041c:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8010420:	f88b a000 	strb.w	sl, [fp]
 8010424:	e639      	b.n	801009a <_dtoa_r+0x5b2>
 8010426:	4628      	mov	r0, r5
 8010428:	e7bd      	b.n	80103a6 <_dtoa_r+0x8be>
 801042a:	2201      	movs	r2, #1
 801042c:	e7e2      	b.n	80103f4 <_dtoa_r+0x90c>
 801042e:	9b06      	ldr	r3, [sp, #24]
 8010430:	2b00      	cmp	r3, #0
 8010432:	db04      	blt.n	801043e <_dtoa_r+0x956>
 8010434:	9907      	ldr	r1, [sp, #28]
 8010436:	430b      	orrs	r3, r1
 8010438:	9908      	ldr	r1, [sp, #32]
 801043a:	430b      	orrs	r3, r1
 801043c:	d120      	bne.n	8010480 <_dtoa_r+0x998>
 801043e:	2a00      	cmp	r2, #0
 8010440:	ddee      	ble.n	8010420 <_dtoa_r+0x938>
 8010442:	9901      	ldr	r1, [sp, #4]
 8010444:	2201      	movs	r2, #1
 8010446:	4648      	mov	r0, r9
 8010448:	f000 fe92 	bl	8011170 <__lshift>
 801044c:	4621      	mov	r1, r4
 801044e:	9001      	str	r0, [sp, #4]
 8010450:	f000 fefa 	bl	8011248 <__mcmp>
 8010454:	2800      	cmp	r0, #0
 8010456:	dc03      	bgt.n	8010460 <_dtoa_r+0x978>
 8010458:	d1e2      	bne.n	8010420 <_dtoa_r+0x938>
 801045a:	f01a 0f01 	tst.w	sl, #1
 801045e:	d0df      	beq.n	8010420 <_dtoa_r+0x938>
 8010460:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8010464:	d1d9      	bne.n	801041a <_dtoa_r+0x932>
 8010466:	2339      	movs	r3, #57	@ 0x39
 8010468:	f88b 3000 	strb.w	r3, [fp]
 801046c:	4633      	mov	r3, r6
 801046e:	461e      	mov	r6, r3
 8010470:	3b01      	subs	r3, #1
 8010472:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8010476:	2a39      	cmp	r2, #57	@ 0x39
 8010478:	d053      	beq.n	8010522 <_dtoa_r+0xa3a>
 801047a:	3201      	adds	r2, #1
 801047c:	701a      	strb	r2, [r3, #0]
 801047e:	e60c      	b.n	801009a <_dtoa_r+0x5b2>
 8010480:	2a00      	cmp	r2, #0
 8010482:	dd07      	ble.n	8010494 <_dtoa_r+0x9ac>
 8010484:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8010488:	d0ed      	beq.n	8010466 <_dtoa_r+0x97e>
 801048a:	f10a 0301 	add.w	r3, sl, #1
 801048e:	f88b 3000 	strb.w	r3, [fp]
 8010492:	e602      	b.n	801009a <_dtoa_r+0x5b2>
 8010494:	9b05      	ldr	r3, [sp, #20]
 8010496:	9a05      	ldr	r2, [sp, #20]
 8010498:	f803 ac01 	strb.w	sl, [r3, #-1]
 801049c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801049e:	4293      	cmp	r3, r2
 80104a0:	d029      	beq.n	80104f6 <_dtoa_r+0xa0e>
 80104a2:	9901      	ldr	r1, [sp, #4]
 80104a4:	2300      	movs	r3, #0
 80104a6:	220a      	movs	r2, #10
 80104a8:	4648      	mov	r0, r9
 80104aa:	f000 fc6b 	bl	8010d84 <__multadd>
 80104ae:	45a8      	cmp	r8, r5
 80104b0:	9001      	str	r0, [sp, #4]
 80104b2:	f04f 0300 	mov.w	r3, #0
 80104b6:	f04f 020a 	mov.w	r2, #10
 80104ba:	4641      	mov	r1, r8
 80104bc:	4648      	mov	r0, r9
 80104be:	d107      	bne.n	80104d0 <_dtoa_r+0x9e8>
 80104c0:	f000 fc60 	bl	8010d84 <__multadd>
 80104c4:	4680      	mov	r8, r0
 80104c6:	4605      	mov	r5, r0
 80104c8:	9b05      	ldr	r3, [sp, #20]
 80104ca:	3301      	adds	r3, #1
 80104cc:	9305      	str	r3, [sp, #20]
 80104ce:	e775      	b.n	80103bc <_dtoa_r+0x8d4>
 80104d0:	f000 fc58 	bl	8010d84 <__multadd>
 80104d4:	4629      	mov	r1, r5
 80104d6:	4680      	mov	r8, r0
 80104d8:	2300      	movs	r3, #0
 80104da:	220a      	movs	r2, #10
 80104dc:	4648      	mov	r0, r9
 80104de:	f000 fc51 	bl	8010d84 <__multadd>
 80104e2:	4605      	mov	r5, r0
 80104e4:	e7f0      	b.n	80104c8 <_dtoa_r+0x9e0>
 80104e6:	f1bb 0f00 	cmp.w	fp, #0
 80104ea:	bfcc      	ite	gt
 80104ec:	465e      	movgt	r6, fp
 80104ee:	2601      	movle	r6, #1
 80104f0:	443e      	add	r6, r7
 80104f2:	f04f 0800 	mov.w	r8, #0
 80104f6:	9901      	ldr	r1, [sp, #4]
 80104f8:	2201      	movs	r2, #1
 80104fa:	4648      	mov	r0, r9
 80104fc:	f000 fe38 	bl	8011170 <__lshift>
 8010500:	4621      	mov	r1, r4
 8010502:	9001      	str	r0, [sp, #4]
 8010504:	f000 fea0 	bl	8011248 <__mcmp>
 8010508:	2800      	cmp	r0, #0
 801050a:	dcaf      	bgt.n	801046c <_dtoa_r+0x984>
 801050c:	d102      	bne.n	8010514 <_dtoa_r+0xa2c>
 801050e:	f01a 0f01 	tst.w	sl, #1
 8010512:	d1ab      	bne.n	801046c <_dtoa_r+0x984>
 8010514:	4633      	mov	r3, r6
 8010516:	461e      	mov	r6, r3
 8010518:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801051c:	2a30      	cmp	r2, #48	@ 0x30
 801051e:	d0fa      	beq.n	8010516 <_dtoa_r+0xa2e>
 8010520:	e5bb      	b.n	801009a <_dtoa_r+0x5b2>
 8010522:	429f      	cmp	r7, r3
 8010524:	d1a3      	bne.n	801046e <_dtoa_r+0x986>
 8010526:	9b04      	ldr	r3, [sp, #16]
 8010528:	3301      	adds	r3, #1
 801052a:	9304      	str	r3, [sp, #16]
 801052c:	2331      	movs	r3, #49	@ 0x31
 801052e:	703b      	strb	r3, [r7, #0]
 8010530:	e5b3      	b.n	801009a <_dtoa_r+0x5b2>
 8010532:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8010534:	4f16      	ldr	r7, [pc, #88]	@ (8010590 <_dtoa_r+0xaa8>)
 8010536:	b11b      	cbz	r3, 8010540 <_dtoa_r+0xa58>
 8010538:	f107 0308 	add.w	r3, r7, #8
 801053c:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 801053e:	6013      	str	r3, [r2, #0]
 8010540:	4638      	mov	r0, r7
 8010542:	b011      	add	sp, #68	@ 0x44
 8010544:	ecbd 8b02 	vpop	{d8}
 8010548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801054c:	9b07      	ldr	r3, [sp, #28]
 801054e:	2b01      	cmp	r3, #1
 8010550:	f77f ae36 	ble.w	80101c0 <_dtoa_r+0x6d8>
 8010554:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010556:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010558:	2001      	movs	r0, #1
 801055a:	e656      	b.n	801020a <_dtoa_r+0x722>
 801055c:	f1bb 0f00 	cmp.w	fp, #0
 8010560:	f77f aed7 	ble.w	8010312 <_dtoa_r+0x82a>
 8010564:	463e      	mov	r6, r7
 8010566:	9801      	ldr	r0, [sp, #4]
 8010568:	4621      	mov	r1, r4
 801056a:	f7ff fa33 	bl	800f9d4 <quorem>
 801056e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8010572:	f806 ab01 	strb.w	sl, [r6], #1
 8010576:	1bf2      	subs	r2, r6, r7
 8010578:	4593      	cmp	fp, r2
 801057a:	ddb4      	ble.n	80104e6 <_dtoa_r+0x9fe>
 801057c:	9901      	ldr	r1, [sp, #4]
 801057e:	2300      	movs	r3, #0
 8010580:	220a      	movs	r2, #10
 8010582:	4648      	mov	r0, r9
 8010584:	f000 fbfe 	bl	8010d84 <__multadd>
 8010588:	9001      	str	r0, [sp, #4]
 801058a:	e7ec      	b.n	8010566 <_dtoa_r+0xa7e>
 801058c:	08012ea3 	.word	0x08012ea3
 8010590:	08012e27 	.word	0x08012e27

08010594 <_free_r>:
 8010594:	b538      	push	{r3, r4, r5, lr}
 8010596:	4605      	mov	r5, r0
 8010598:	2900      	cmp	r1, #0
 801059a:	d041      	beq.n	8010620 <_free_r+0x8c>
 801059c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80105a0:	1f0c      	subs	r4, r1, #4
 80105a2:	2b00      	cmp	r3, #0
 80105a4:	bfb8      	it	lt
 80105a6:	18e4      	addlt	r4, r4, r3
 80105a8:	f7fd fbee 	bl	800dd88 <__malloc_lock>
 80105ac:	4a1d      	ldr	r2, [pc, #116]	@ (8010624 <_free_r+0x90>)
 80105ae:	6813      	ldr	r3, [r2, #0]
 80105b0:	b933      	cbnz	r3, 80105c0 <_free_r+0x2c>
 80105b2:	6063      	str	r3, [r4, #4]
 80105b4:	6014      	str	r4, [r2, #0]
 80105b6:	4628      	mov	r0, r5
 80105b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80105bc:	f7fd bbea 	b.w	800dd94 <__malloc_unlock>
 80105c0:	42a3      	cmp	r3, r4
 80105c2:	d908      	bls.n	80105d6 <_free_r+0x42>
 80105c4:	6820      	ldr	r0, [r4, #0]
 80105c6:	1821      	adds	r1, r4, r0
 80105c8:	428b      	cmp	r3, r1
 80105ca:	bf01      	itttt	eq
 80105cc:	6819      	ldreq	r1, [r3, #0]
 80105ce:	685b      	ldreq	r3, [r3, #4]
 80105d0:	1809      	addeq	r1, r1, r0
 80105d2:	6021      	streq	r1, [r4, #0]
 80105d4:	e7ed      	b.n	80105b2 <_free_r+0x1e>
 80105d6:	461a      	mov	r2, r3
 80105d8:	685b      	ldr	r3, [r3, #4]
 80105da:	b10b      	cbz	r3, 80105e0 <_free_r+0x4c>
 80105dc:	42a3      	cmp	r3, r4
 80105de:	d9fa      	bls.n	80105d6 <_free_r+0x42>
 80105e0:	6811      	ldr	r1, [r2, #0]
 80105e2:	1850      	adds	r0, r2, r1
 80105e4:	42a0      	cmp	r0, r4
 80105e6:	d10b      	bne.n	8010600 <_free_r+0x6c>
 80105e8:	6820      	ldr	r0, [r4, #0]
 80105ea:	4401      	add	r1, r0
 80105ec:	1850      	adds	r0, r2, r1
 80105ee:	4283      	cmp	r3, r0
 80105f0:	6011      	str	r1, [r2, #0]
 80105f2:	d1e0      	bne.n	80105b6 <_free_r+0x22>
 80105f4:	6818      	ldr	r0, [r3, #0]
 80105f6:	685b      	ldr	r3, [r3, #4]
 80105f8:	6053      	str	r3, [r2, #4]
 80105fa:	4408      	add	r0, r1
 80105fc:	6010      	str	r0, [r2, #0]
 80105fe:	e7da      	b.n	80105b6 <_free_r+0x22>
 8010600:	d902      	bls.n	8010608 <_free_r+0x74>
 8010602:	230c      	movs	r3, #12
 8010604:	602b      	str	r3, [r5, #0]
 8010606:	e7d6      	b.n	80105b6 <_free_r+0x22>
 8010608:	6820      	ldr	r0, [r4, #0]
 801060a:	1821      	adds	r1, r4, r0
 801060c:	428b      	cmp	r3, r1
 801060e:	bf04      	itt	eq
 8010610:	6819      	ldreq	r1, [r3, #0]
 8010612:	685b      	ldreq	r3, [r3, #4]
 8010614:	6063      	str	r3, [r4, #4]
 8010616:	bf04      	itt	eq
 8010618:	1809      	addeq	r1, r1, r0
 801061a:	6021      	streq	r1, [r4, #0]
 801061c:	6054      	str	r4, [r2, #4]
 801061e:	e7ca      	b.n	80105b6 <_free_r+0x22>
 8010620:	bd38      	pop	{r3, r4, r5, pc}
 8010622:	bf00      	nop
 8010624:	24000cfc 	.word	0x24000cfc

08010628 <rshift>:
 8010628:	6903      	ldr	r3, [r0, #16]
 801062a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801062e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010632:	ea4f 1261 	mov.w	r2, r1, asr #5
 8010636:	f100 0414 	add.w	r4, r0, #20
 801063a:	dd45      	ble.n	80106c8 <rshift+0xa0>
 801063c:	f011 011f 	ands.w	r1, r1, #31
 8010640:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8010644:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8010648:	d10c      	bne.n	8010664 <rshift+0x3c>
 801064a:	f100 0710 	add.w	r7, r0, #16
 801064e:	4629      	mov	r1, r5
 8010650:	42b1      	cmp	r1, r6
 8010652:	d334      	bcc.n	80106be <rshift+0x96>
 8010654:	1a9b      	subs	r3, r3, r2
 8010656:	009b      	lsls	r3, r3, #2
 8010658:	1eea      	subs	r2, r5, #3
 801065a:	4296      	cmp	r6, r2
 801065c:	bf38      	it	cc
 801065e:	2300      	movcc	r3, #0
 8010660:	4423      	add	r3, r4
 8010662:	e015      	b.n	8010690 <rshift+0x68>
 8010664:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8010668:	f1c1 0820 	rsb	r8, r1, #32
 801066c:	40cf      	lsrs	r7, r1
 801066e:	f105 0e04 	add.w	lr, r5, #4
 8010672:	46a1      	mov	r9, r4
 8010674:	4576      	cmp	r6, lr
 8010676:	46f4      	mov	ip, lr
 8010678:	d815      	bhi.n	80106a6 <rshift+0x7e>
 801067a:	1a9a      	subs	r2, r3, r2
 801067c:	0092      	lsls	r2, r2, #2
 801067e:	3a04      	subs	r2, #4
 8010680:	3501      	adds	r5, #1
 8010682:	42ae      	cmp	r6, r5
 8010684:	bf38      	it	cc
 8010686:	2200      	movcc	r2, #0
 8010688:	18a3      	adds	r3, r4, r2
 801068a:	50a7      	str	r7, [r4, r2]
 801068c:	b107      	cbz	r7, 8010690 <rshift+0x68>
 801068e:	3304      	adds	r3, #4
 8010690:	1b1a      	subs	r2, r3, r4
 8010692:	42a3      	cmp	r3, r4
 8010694:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8010698:	bf08      	it	eq
 801069a:	2300      	moveq	r3, #0
 801069c:	6102      	str	r2, [r0, #16]
 801069e:	bf08      	it	eq
 80106a0:	6143      	streq	r3, [r0, #20]
 80106a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80106a6:	f8dc c000 	ldr.w	ip, [ip]
 80106aa:	fa0c fc08 	lsl.w	ip, ip, r8
 80106ae:	ea4c 0707 	orr.w	r7, ip, r7
 80106b2:	f849 7b04 	str.w	r7, [r9], #4
 80106b6:	f85e 7b04 	ldr.w	r7, [lr], #4
 80106ba:	40cf      	lsrs	r7, r1
 80106bc:	e7da      	b.n	8010674 <rshift+0x4c>
 80106be:	f851 cb04 	ldr.w	ip, [r1], #4
 80106c2:	f847 cf04 	str.w	ip, [r7, #4]!
 80106c6:	e7c3      	b.n	8010650 <rshift+0x28>
 80106c8:	4623      	mov	r3, r4
 80106ca:	e7e1      	b.n	8010690 <rshift+0x68>

080106cc <__hexdig_fun>:
 80106cc:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80106d0:	2b09      	cmp	r3, #9
 80106d2:	d802      	bhi.n	80106da <__hexdig_fun+0xe>
 80106d4:	3820      	subs	r0, #32
 80106d6:	b2c0      	uxtb	r0, r0
 80106d8:	4770      	bx	lr
 80106da:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80106de:	2b05      	cmp	r3, #5
 80106e0:	d801      	bhi.n	80106e6 <__hexdig_fun+0x1a>
 80106e2:	3847      	subs	r0, #71	@ 0x47
 80106e4:	e7f7      	b.n	80106d6 <__hexdig_fun+0xa>
 80106e6:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80106ea:	2b05      	cmp	r3, #5
 80106ec:	d801      	bhi.n	80106f2 <__hexdig_fun+0x26>
 80106ee:	3827      	subs	r0, #39	@ 0x27
 80106f0:	e7f1      	b.n	80106d6 <__hexdig_fun+0xa>
 80106f2:	2000      	movs	r0, #0
 80106f4:	4770      	bx	lr
	...

080106f8 <__gethex>:
 80106f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80106fc:	b085      	sub	sp, #20
 80106fe:	468a      	mov	sl, r1
 8010700:	9302      	str	r3, [sp, #8]
 8010702:	680b      	ldr	r3, [r1, #0]
 8010704:	9001      	str	r0, [sp, #4]
 8010706:	4690      	mov	r8, r2
 8010708:	1c9c      	adds	r4, r3, #2
 801070a:	46a1      	mov	r9, r4
 801070c:	f814 0b01 	ldrb.w	r0, [r4], #1
 8010710:	2830      	cmp	r0, #48	@ 0x30
 8010712:	d0fa      	beq.n	801070a <__gethex+0x12>
 8010714:	eba9 0303 	sub.w	r3, r9, r3
 8010718:	f1a3 0b02 	sub.w	fp, r3, #2
 801071c:	f7ff ffd6 	bl	80106cc <__hexdig_fun>
 8010720:	4605      	mov	r5, r0
 8010722:	2800      	cmp	r0, #0
 8010724:	d168      	bne.n	80107f8 <__gethex+0x100>
 8010726:	49a0      	ldr	r1, [pc, #640]	@ (80109a8 <__gethex+0x2b0>)
 8010728:	2201      	movs	r2, #1
 801072a:	4648      	mov	r0, r9
 801072c:	f7ff f89a 	bl	800f864 <strncmp>
 8010730:	4607      	mov	r7, r0
 8010732:	2800      	cmp	r0, #0
 8010734:	d167      	bne.n	8010806 <__gethex+0x10e>
 8010736:	f899 0001 	ldrb.w	r0, [r9, #1]
 801073a:	4626      	mov	r6, r4
 801073c:	f7ff ffc6 	bl	80106cc <__hexdig_fun>
 8010740:	2800      	cmp	r0, #0
 8010742:	d062      	beq.n	801080a <__gethex+0x112>
 8010744:	4623      	mov	r3, r4
 8010746:	7818      	ldrb	r0, [r3, #0]
 8010748:	2830      	cmp	r0, #48	@ 0x30
 801074a:	4699      	mov	r9, r3
 801074c:	f103 0301 	add.w	r3, r3, #1
 8010750:	d0f9      	beq.n	8010746 <__gethex+0x4e>
 8010752:	f7ff ffbb 	bl	80106cc <__hexdig_fun>
 8010756:	fab0 f580 	clz	r5, r0
 801075a:	096d      	lsrs	r5, r5, #5
 801075c:	f04f 0b01 	mov.w	fp, #1
 8010760:	464a      	mov	r2, r9
 8010762:	4616      	mov	r6, r2
 8010764:	3201      	adds	r2, #1
 8010766:	7830      	ldrb	r0, [r6, #0]
 8010768:	f7ff ffb0 	bl	80106cc <__hexdig_fun>
 801076c:	2800      	cmp	r0, #0
 801076e:	d1f8      	bne.n	8010762 <__gethex+0x6a>
 8010770:	498d      	ldr	r1, [pc, #564]	@ (80109a8 <__gethex+0x2b0>)
 8010772:	2201      	movs	r2, #1
 8010774:	4630      	mov	r0, r6
 8010776:	f7ff f875 	bl	800f864 <strncmp>
 801077a:	2800      	cmp	r0, #0
 801077c:	d13f      	bne.n	80107fe <__gethex+0x106>
 801077e:	b944      	cbnz	r4, 8010792 <__gethex+0x9a>
 8010780:	1c74      	adds	r4, r6, #1
 8010782:	4622      	mov	r2, r4
 8010784:	4616      	mov	r6, r2
 8010786:	3201      	adds	r2, #1
 8010788:	7830      	ldrb	r0, [r6, #0]
 801078a:	f7ff ff9f 	bl	80106cc <__hexdig_fun>
 801078e:	2800      	cmp	r0, #0
 8010790:	d1f8      	bne.n	8010784 <__gethex+0x8c>
 8010792:	1ba4      	subs	r4, r4, r6
 8010794:	00a7      	lsls	r7, r4, #2
 8010796:	7833      	ldrb	r3, [r6, #0]
 8010798:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 801079c:	2b50      	cmp	r3, #80	@ 0x50
 801079e:	d13e      	bne.n	801081e <__gethex+0x126>
 80107a0:	7873      	ldrb	r3, [r6, #1]
 80107a2:	2b2b      	cmp	r3, #43	@ 0x2b
 80107a4:	d033      	beq.n	801080e <__gethex+0x116>
 80107a6:	2b2d      	cmp	r3, #45	@ 0x2d
 80107a8:	d034      	beq.n	8010814 <__gethex+0x11c>
 80107aa:	1c71      	adds	r1, r6, #1
 80107ac:	2400      	movs	r4, #0
 80107ae:	7808      	ldrb	r0, [r1, #0]
 80107b0:	f7ff ff8c 	bl	80106cc <__hexdig_fun>
 80107b4:	1e43      	subs	r3, r0, #1
 80107b6:	b2db      	uxtb	r3, r3
 80107b8:	2b18      	cmp	r3, #24
 80107ba:	d830      	bhi.n	801081e <__gethex+0x126>
 80107bc:	f1a0 0210 	sub.w	r2, r0, #16
 80107c0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80107c4:	f7ff ff82 	bl	80106cc <__hexdig_fun>
 80107c8:	f100 3cff 	add.w	ip, r0, #4294967295
 80107cc:	fa5f fc8c 	uxtb.w	ip, ip
 80107d0:	f1bc 0f18 	cmp.w	ip, #24
 80107d4:	f04f 030a 	mov.w	r3, #10
 80107d8:	d91e      	bls.n	8010818 <__gethex+0x120>
 80107da:	b104      	cbz	r4, 80107de <__gethex+0xe6>
 80107dc:	4252      	negs	r2, r2
 80107de:	4417      	add	r7, r2
 80107e0:	f8ca 1000 	str.w	r1, [sl]
 80107e4:	b1ed      	cbz	r5, 8010822 <__gethex+0x12a>
 80107e6:	f1bb 0f00 	cmp.w	fp, #0
 80107ea:	bf0c      	ite	eq
 80107ec:	2506      	moveq	r5, #6
 80107ee:	2500      	movne	r5, #0
 80107f0:	4628      	mov	r0, r5
 80107f2:	b005      	add	sp, #20
 80107f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80107f8:	2500      	movs	r5, #0
 80107fa:	462c      	mov	r4, r5
 80107fc:	e7b0      	b.n	8010760 <__gethex+0x68>
 80107fe:	2c00      	cmp	r4, #0
 8010800:	d1c7      	bne.n	8010792 <__gethex+0x9a>
 8010802:	4627      	mov	r7, r4
 8010804:	e7c7      	b.n	8010796 <__gethex+0x9e>
 8010806:	464e      	mov	r6, r9
 8010808:	462f      	mov	r7, r5
 801080a:	2501      	movs	r5, #1
 801080c:	e7c3      	b.n	8010796 <__gethex+0x9e>
 801080e:	2400      	movs	r4, #0
 8010810:	1cb1      	adds	r1, r6, #2
 8010812:	e7cc      	b.n	80107ae <__gethex+0xb6>
 8010814:	2401      	movs	r4, #1
 8010816:	e7fb      	b.n	8010810 <__gethex+0x118>
 8010818:	fb03 0002 	mla	r0, r3, r2, r0
 801081c:	e7ce      	b.n	80107bc <__gethex+0xc4>
 801081e:	4631      	mov	r1, r6
 8010820:	e7de      	b.n	80107e0 <__gethex+0xe8>
 8010822:	eba6 0309 	sub.w	r3, r6, r9
 8010826:	3b01      	subs	r3, #1
 8010828:	4629      	mov	r1, r5
 801082a:	2b07      	cmp	r3, #7
 801082c:	dc0a      	bgt.n	8010844 <__gethex+0x14c>
 801082e:	9801      	ldr	r0, [sp, #4]
 8010830:	f000 fa46 	bl	8010cc0 <_Balloc>
 8010834:	4604      	mov	r4, r0
 8010836:	b940      	cbnz	r0, 801084a <__gethex+0x152>
 8010838:	4b5c      	ldr	r3, [pc, #368]	@ (80109ac <__gethex+0x2b4>)
 801083a:	4602      	mov	r2, r0
 801083c:	21e4      	movs	r1, #228	@ 0xe4
 801083e:	485c      	ldr	r0, [pc, #368]	@ (80109b0 <__gethex+0x2b8>)
 8010840:	f001 fd22 	bl	8012288 <__assert_func>
 8010844:	3101      	adds	r1, #1
 8010846:	105b      	asrs	r3, r3, #1
 8010848:	e7ef      	b.n	801082a <__gethex+0x132>
 801084a:	f100 0a14 	add.w	sl, r0, #20
 801084e:	2300      	movs	r3, #0
 8010850:	4655      	mov	r5, sl
 8010852:	469b      	mov	fp, r3
 8010854:	45b1      	cmp	r9, r6
 8010856:	d337      	bcc.n	80108c8 <__gethex+0x1d0>
 8010858:	f845 bb04 	str.w	fp, [r5], #4
 801085c:	eba5 050a 	sub.w	r5, r5, sl
 8010860:	10ad      	asrs	r5, r5, #2
 8010862:	6125      	str	r5, [r4, #16]
 8010864:	4658      	mov	r0, fp
 8010866:	f000 fb1d 	bl	8010ea4 <__hi0bits>
 801086a:	016d      	lsls	r5, r5, #5
 801086c:	f8d8 6000 	ldr.w	r6, [r8]
 8010870:	1a2d      	subs	r5, r5, r0
 8010872:	42b5      	cmp	r5, r6
 8010874:	dd54      	ble.n	8010920 <__gethex+0x228>
 8010876:	1bad      	subs	r5, r5, r6
 8010878:	4629      	mov	r1, r5
 801087a:	4620      	mov	r0, r4
 801087c:	f000 feae 	bl	80115dc <__any_on>
 8010880:	4681      	mov	r9, r0
 8010882:	b178      	cbz	r0, 80108a4 <__gethex+0x1ac>
 8010884:	1e6b      	subs	r3, r5, #1
 8010886:	1159      	asrs	r1, r3, #5
 8010888:	f003 021f 	and.w	r2, r3, #31
 801088c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8010890:	f04f 0901 	mov.w	r9, #1
 8010894:	fa09 f202 	lsl.w	r2, r9, r2
 8010898:	420a      	tst	r2, r1
 801089a:	d003      	beq.n	80108a4 <__gethex+0x1ac>
 801089c:	454b      	cmp	r3, r9
 801089e:	dc36      	bgt.n	801090e <__gethex+0x216>
 80108a0:	f04f 0902 	mov.w	r9, #2
 80108a4:	4629      	mov	r1, r5
 80108a6:	4620      	mov	r0, r4
 80108a8:	f7ff febe 	bl	8010628 <rshift>
 80108ac:	442f      	add	r7, r5
 80108ae:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80108b2:	42bb      	cmp	r3, r7
 80108b4:	da42      	bge.n	801093c <__gethex+0x244>
 80108b6:	9801      	ldr	r0, [sp, #4]
 80108b8:	4621      	mov	r1, r4
 80108ba:	f000 fa41 	bl	8010d40 <_Bfree>
 80108be:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80108c0:	2300      	movs	r3, #0
 80108c2:	6013      	str	r3, [r2, #0]
 80108c4:	25a3      	movs	r5, #163	@ 0xa3
 80108c6:	e793      	b.n	80107f0 <__gethex+0xf8>
 80108c8:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80108cc:	2a2e      	cmp	r2, #46	@ 0x2e
 80108ce:	d012      	beq.n	80108f6 <__gethex+0x1fe>
 80108d0:	2b20      	cmp	r3, #32
 80108d2:	d104      	bne.n	80108de <__gethex+0x1e6>
 80108d4:	f845 bb04 	str.w	fp, [r5], #4
 80108d8:	f04f 0b00 	mov.w	fp, #0
 80108dc:	465b      	mov	r3, fp
 80108de:	7830      	ldrb	r0, [r6, #0]
 80108e0:	9303      	str	r3, [sp, #12]
 80108e2:	f7ff fef3 	bl	80106cc <__hexdig_fun>
 80108e6:	9b03      	ldr	r3, [sp, #12]
 80108e8:	f000 000f 	and.w	r0, r0, #15
 80108ec:	4098      	lsls	r0, r3
 80108ee:	ea4b 0b00 	orr.w	fp, fp, r0
 80108f2:	3304      	adds	r3, #4
 80108f4:	e7ae      	b.n	8010854 <__gethex+0x15c>
 80108f6:	45b1      	cmp	r9, r6
 80108f8:	d8ea      	bhi.n	80108d0 <__gethex+0x1d8>
 80108fa:	492b      	ldr	r1, [pc, #172]	@ (80109a8 <__gethex+0x2b0>)
 80108fc:	9303      	str	r3, [sp, #12]
 80108fe:	2201      	movs	r2, #1
 8010900:	4630      	mov	r0, r6
 8010902:	f7fe ffaf 	bl	800f864 <strncmp>
 8010906:	9b03      	ldr	r3, [sp, #12]
 8010908:	2800      	cmp	r0, #0
 801090a:	d1e1      	bne.n	80108d0 <__gethex+0x1d8>
 801090c:	e7a2      	b.n	8010854 <__gethex+0x15c>
 801090e:	1ea9      	subs	r1, r5, #2
 8010910:	4620      	mov	r0, r4
 8010912:	f000 fe63 	bl	80115dc <__any_on>
 8010916:	2800      	cmp	r0, #0
 8010918:	d0c2      	beq.n	80108a0 <__gethex+0x1a8>
 801091a:	f04f 0903 	mov.w	r9, #3
 801091e:	e7c1      	b.n	80108a4 <__gethex+0x1ac>
 8010920:	da09      	bge.n	8010936 <__gethex+0x23e>
 8010922:	1b75      	subs	r5, r6, r5
 8010924:	4621      	mov	r1, r4
 8010926:	9801      	ldr	r0, [sp, #4]
 8010928:	462a      	mov	r2, r5
 801092a:	f000 fc21 	bl	8011170 <__lshift>
 801092e:	1b7f      	subs	r7, r7, r5
 8010930:	4604      	mov	r4, r0
 8010932:	f100 0a14 	add.w	sl, r0, #20
 8010936:	f04f 0900 	mov.w	r9, #0
 801093a:	e7b8      	b.n	80108ae <__gethex+0x1b6>
 801093c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8010940:	42bd      	cmp	r5, r7
 8010942:	dd6f      	ble.n	8010a24 <__gethex+0x32c>
 8010944:	1bed      	subs	r5, r5, r7
 8010946:	42ae      	cmp	r6, r5
 8010948:	dc34      	bgt.n	80109b4 <__gethex+0x2bc>
 801094a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801094e:	2b02      	cmp	r3, #2
 8010950:	d022      	beq.n	8010998 <__gethex+0x2a0>
 8010952:	2b03      	cmp	r3, #3
 8010954:	d024      	beq.n	80109a0 <__gethex+0x2a8>
 8010956:	2b01      	cmp	r3, #1
 8010958:	d115      	bne.n	8010986 <__gethex+0x28e>
 801095a:	42ae      	cmp	r6, r5
 801095c:	d113      	bne.n	8010986 <__gethex+0x28e>
 801095e:	2e01      	cmp	r6, #1
 8010960:	d10b      	bne.n	801097a <__gethex+0x282>
 8010962:	9a02      	ldr	r2, [sp, #8]
 8010964:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8010968:	6013      	str	r3, [r2, #0]
 801096a:	2301      	movs	r3, #1
 801096c:	6123      	str	r3, [r4, #16]
 801096e:	f8ca 3000 	str.w	r3, [sl]
 8010972:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010974:	2562      	movs	r5, #98	@ 0x62
 8010976:	601c      	str	r4, [r3, #0]
 8010978:	e73a      	b.n	80107f0 <__gethex+0xf8>
 801097a:	1e71      	subs	r1, r6, #1
 801097c:	4620      	mov	r0, r4
 801097e:	f000 fe2d 	bl	80115dc <__any_on>
 8010982:	2800      	cmp	r0, #0
 8010984:	d1ed      	bne.n	8010962 <__gethex+0x26a>
 8010986:	9801      	ldr	r0, [sp, #4]
 8010988:	4621      	mov	r1, r4
 801098a:	f000 f9d9 	bl	8010d40 <_Bfree>
 801098e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010990:	2300      	movs	r3, #0
 8010992:	6013      	str	r3, [r2, #0]
 8010994:	2550      	movs	r5, #80	@ 0x50
 8010996:	e72b      	b.n	80107f0 <__gethex+0xf8>
 8010998:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801099a:	2b00      	cmp	r3, #0
 801099c:	d1f3      	bne.n	8010986 <__gethex+0x28e>
 801099e:	e7e0      	b.n	8010962 <__gethex+0x26a>
 80109a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80109a2:	2b00      	cmp	r3, #0
 80109a4:	d1dd      	bne.n	8010962 <__gethex+0x26a>
 80109a6:	e7ee      	b.n	8010986 <__gethex+0x28e>
 80109a8:	08012d94 	.word	0x08012d94
 80109ac:	08012ea3 	.word	0x08012ea3
 80109b0:	08012eb4 	.word	0x08012eb4
 80109b4:	1e6f      	subs	r7, r5, #1
 80109b6:	f1b9 0f00 	cmp.w	r9, #0
 80109ba:	d130      	bne.n	8010a1e <__gethex+0x326>
 80109bc:	b127      	cbz	r7, 80109c8 <__gethex+0x2d0>
 80109be:	4639      	mov	r1, r7
 80109c0:	4620      	mov	r0, r4
 80109c2:	f000 fe0b 	bl	80115dc <__any_on>
 80109c6:	4681      	mov	r9, r0
 80109c8:	117a      	asrs	r2, r7, #5
 80109ca:	2301      	movs	r3, #1
 80109cc:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80109d0:	f007 071f 	and.w	r7, r7, #31
 80109d4:	40bb      	lsls	r3, r7
 80109d6:	4213      	tst	r3, r2
 80109d8:	4629      	mov	r1, r5
 80109da:	4620      	mov	r0, r4
 80109dc:	bf18      	it	ne
 80109de:	f049 0902 	orrne.w	r9, r9, #2
 80109e2:	f7ff fe21 	bl	8010628 <rshift>
 80109e6:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80109ea:	1b76      	subs	r6, r6, r5
 80109ec:	2502      	movs	r5, #2
 80109ee:	f1b9 0f00 	cmp.w	r9, #0
 80109f2:	d047      	beq.n	8010a84 <__gethex+0x38c>
 80109f4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80109f8:	2b02      	cmp	r3, #2
 80109fa:	d015      	beq.n	8010a28 <__gethex+0x330>
 80109fc:	2b03      	cmp	r3, #3
 80109fe:	d017      	beq.n	8010a30 <__gethex+0x338>
 8010a00:	2b01      	cmp	r3, #1
 8010a02:	d109      	bne.n	8010a18 <__gethex+0x320>
 8010a04:	f019 0f02 	tst.w	r9, #2
 8010a08:	d006      	beq.n	8010a18 <__gethex+0x320>
 8010a0a:	f8da 3000 	ldr.w	r3, [sl]
 8010a0e:	ea49 0903 	orr.w	r9, r9, r3
 8010a12:	f019 0f01 	tst.w	r9, #1
 8010a16:	d10e      	bne.n	8010a36 <__gethex+0x33e>
 8010a18:	f045 0510 	orr.w	r5, r5, #16
 8010a1c:	e032      	b.n	8010a84 <__gethex+0x38c>
 8010a1e:	f04f 0901 	mov.w	r9, #1
 8010a22:	e7d1      	b.n	80109c8 <__gethex+0x2d0>
 8010a24:	2501      	movs	r5, #1
 8010a26:	e7e2      	b.n	80109ee <__gethex+0x2f6>
 8010a28:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010a2a:	f1c3 0301 	rsb	r3, r3, #1
 8010a2e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8010a30:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010a32:	2b00      	cmp	r3, #0
 8010a34:	d0f0      	beq.n	8010a18 <__gethex+0x320>
 8010a36:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8010a3a:	f104 0314 	add.w	r3, r4, #20
 8010a3e:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8010a42:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8010a46:	f04f 0c00 	mov.w	ip, #0
 8010a4a:	4618      	mov	r0, r3
 8010a4c:	f853 2b04 	ldr.w	r2, [r3], #4
 8010a50:	f1b2 3fff 	cmp.w	r2, #4294967295
 8010a54:	d01b      	beq.n	8010a8e <__gethex+0x396>
 8010a56:	3201      	adds	r2, #1
 8010a58:	6002      	str	r2, [r0, #0]
 8010a5a:	2d02      	cmp	r5, #2
 8010a5c:	f104 0314 	add.w	r3, r4, #20
 8010a60:	d13c      	bne.n	8010adc <__gethex+0x3e4>
 8010a62:	f8d8 2000 	ldr.w	r2, [r8]
 8010a66:	3a01      	subs	r2, #1
 8010a68:	42b2      	cmp	r2, r6
 8010a6a:	d109      	bne.n	8010a80 <__gethex+0x388>
 8010a6c:	1171      	asrs	r1, r6, #5
 8010a6e:	2201      	movs	r2, #1
 8010a70:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010a74:	f006 061f 	and.w	r6, r6, #31
 8010a78:	fa02 f606 	lsl.w	r6, r2, r6
 8010a7c:	421e      	tst	r6, r3
 8010a7e:	d13a      	bne.n	8010af6 <__gethex+0x3fe>
 8010a80:	f045 0520 	orr.w	r5, r5, #32
 8010a84:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010a86:	601c      	str	r4, [r3, #0]
 8010a88:	9b02      	ldr	r3, [sp, #8]
 8010a8a:	601f      	str	r7, [r3, #0]
 8010a8c:	e6b0      	b.n	80107f0 <__gethex+0xf8>
 8010a8e:	4299      	cmp	r1, r3
 8010a90:	f843 cc04 	str.w	ip, [r3, #-4]
 8010a94:	d8d9      	bhi.n	8010a4a <__gethex+0x352>
 8010a96:	68a3      	ldr	r3, [r4, #8]
 8010a98:	459b      	cmp	fp, r3
 8010a9a:	db17      	blt.n	8010acc <__gethex+0x3d4>
 8010a9c:	6861      	ldr	r1, [r4, #4]
 8010a9e:	9801      	ldr	r0, [sp, #4]
 8010aa0:	3101      	adds	r1, #1
 8010aa2:	f000 f90d 	bl	8010cc0 <_Balloc>
 8010aa6:	4681      	mov	r9, r0
 8010aa8:	b918      	cbnz	r0, 8010ab2 <__gethex+0x3ba>
 8010aaa:	4b1a      	ldr	r3, [pc, #104]	@ (8010b14 <__gethex+0x41c>)
 8010aac:	4602      	mov	r2, r0
 8010aae:	2184      	movs	r1, #132	@ 0x84
 8010ab0:	e6c5      	b.n	801083e <__gethex+0x146>
 8010ab2:	6922      	ldr	r2, [r4, #16]
 8010ab4:	3202      	adds	r2, #2
 8010ab6:	f104 010c 	add.w	r1, r4, #12
 8010aba:	0092      	lsls	r2, r2, #2
 8010abc:	300c      	adds	r0, #12
 8010abe:	f7fe ff6a 	bl	800f996 <memcpy>
 8010ac2:	4621      	mov	r1, r4
 8010ac4:	9801      	ldr	r0, [sp, #4]
 8010ac6:	f000 f93b 	bl	8010d40 <_Bfree>
 8010aca:	464c      	mov	r4, r9
 8010acc:	6923      	ldr	r3, [r4, #16]
 8010ace:	1c5a      	adds	r2, r3, #1
 8010ad0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010ad4:	6122      	str	r2, [r4, #16]
 8010ad6:	2201      	movs	r2, #1
 8010ad8:	615a      	str	r2, [r3, #20]
 8010ada:	e7be      	b.n	8010a5a <__gethex+0x362>
 8010adc:	6922      	ldr	r2, [r4, #16]
 8010ade:	455a      	cmp	r2, fp
 8010ae0:	dd0b      	ble.n	8010afa <__gethex+0x402>
 8010ae2:	2101      	movs	r1, #1
 8010ae4:	4620      	mov	r0, r4
 8010ae6:	f7ff fd9f 	bl	8010628 <rshift>
 8010aea:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010aee:	3701      	adds	r7, #1
 8010af0:	42bb      	cmp	r3, r7
 8010af2:	f6ff aee0 	blt.w	80108b6 <__gethex+0x1be>
 8010af6:	2501      	movs	r5, #1
 8010af8:	e7c2      	b.n	8010a80 <__gethex+0x388>
 8010afa:	f016 061f 	ands.w	r6, r6, #31
 8010afe:	d0fa      	beq.n	8010af6 <__gethex+0x3fe>
 8010b00:	4453      	add	r3, sl
 8010b02:	f1c6 0620 	rsb	r6, r6, #32
 8010b06:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8010b0a:	f000 f9cb 	bl	8010ea4 <__hi0bits>
 8010b0e:	42b0      	cmp	r0, r6
 8010b10:	dbe7      	blt.n	8010ae2 <__gethex+0x3ea>
 8010b12:	e7f0      	b.n	8010af6 <__gethex+0x3fe>
 8010b14:	08012ea3 	.word	0x08012ea3

08010b18 <L_shift>:
 8010b18:	f1c2 0208 	rsb	r2, r2, #8
 8010b1c:	0092      	lsls	r2, r2, #2
 8010b1e:	b570      	push	{r4, r5, r6, lr}
 8010b20:	f1c2 0620 	rsb	r6, r2, #32
 8010b24:	6843      	ldr	r3, [r0, #4]
 8010b26:	6804      	ldr	r4, [r0, #0]
 8010b28:	fa03 f506 	lsl.w	r5, r3, r6
 8010b2c:	432c      	orrs	r4, r5
 8010b2e:	40d3      	lsrs	r3, r2
 8010b30:	6004      	str	r4, [r0, #0]
 8010b32:	f840 3f04 	str.w	r3, [r0, #4]!
 8010b36:	4288      	cmp	r0, r1
 8010b38:	d3f4      	bcc.n	8010b24 <L_shift+0xc>
 8010b3a:	bd70      	pop	{r4, r5, r6, pc}

08010b3c <__match>:
 8010b3c:	b530      	push	{r4, r5, lr}
 8010b3e:	6803      	ldr	r3, [r0, #0]
 8010b40:	3301      	adds	r3, #1
 8010b42:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010b46:	b914      	cbnz	r4, 8010b4e <__match+0x12>
 8010b48:	6003      	str	r3, [r0, #0]
 8010b4a:	2001      	movs	r0, #1
 8010b4c:	bd30      	pop	{r4, r5, pc}
 8010b4e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010b52:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8010b56:	2d19      	cmp	r5, #25
 8010b58:	bf98      	it	ls
 8010b5a:	3220      	addls	r2, #32
 8010b5c:	42a2      	cmp	r2, r4
 8010b5e:	d0f0      	beq.n	8010b42 <__match+0x6>
 8010b60:	2000      	movs	r0, #0
 8010b62:	e7f3      	b.n	8010b4c <__match+0x10>

08010b64 <__hexnan>:
 8010b64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b68:	680b      	ldr	r3, [r1, #0]
 8010b6a:	6801      	ldr	r1, [r0, #0]
 8010b6c:	115e      	asrs	r6, r3, #5
 8010b6e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8010b72:	f013 031f 	ands.w	r3, r3, #31
 8010b76:	b087      	sub	sp, #28
 8010b78:	bf18      	it	ne
 8010b7a:	3604      	addne	r6, #4
 8010b7c:	2500      	movs	r5, #0
 8010b7e:	1f37      	subs	r7, r6, #4
 8010b80:	4682      	mov	sl, r0
 8010b82:	4690      	mov	r8, r2
 8010b84:	9301      	str	r3, [sp, #4]
 8010b86:	f846 5c04 	str.w	r5, [r6, #-4]
 8010b8a:	46b9      	mov	r9, r7
 8010b8c:	463c      	mov	r4, r7
 8010b8e:	9502      	str	r5, [sp, #8]
 8010b90:	46ab      	mov	fp, r5
 8010b92:	784a      	ldrb	r2, [r1, #1]
 8010b94:	1c4b      	adds	r3, r1, #1
 8010b96:	9303      	str	r3, [sp, #12]
 8010b98:	b342      	cbz	r2, 8010bec <__hexnan+0x88>
 8010b9a:	4610      	mov	r0, r2
 8010b9c:	9105      	str	r1, [sp, #20]
 8010b9e:	9204      	str	r2, [sp, #16]
 8010ba0:	f7ff fd94 	bl	80106cc <__hexdig_fun>
 8010ba4:	2800      	cmp	r0, #0
 8010ba6:	d151      	bne.n	8010c4c <__hexnan+0xe8>
 8010ba8:	9a04      	ldr	r2, [sp, #16]
 8010baa:	9905      	ldr	r1, [sp, #20]
 8010bac:	2a20      	cmp	r2, #32
 8010bae:	d818      	bhi.n	8010be2 <__hexnan+0x7e>
 8010bb0:	9b02      	ldr	r3, [sp, #8]
 8010bb2:	459b      	cmp	fp, r3
 8010bb4:	dd13      	ble.n	8010bde <__hexnan+0x7a>
 8010bb6:	454c      	cmp	r4, r9
 8010bb8:	d206      	bcs.n	8010bc8 <__hexnan+0x64>
 8010bba:	2d07      	cmp	r5, #7
 8010bbc:	dc04      	bgt.n	8010bc8 <__hexnan+0x64>
 8010bbe:	462a      	mov	r2, r5
 8010bc0:	4649      	mov	r1, r9
 8010bc2:	4620      	mov	r0, r4
 8010bc4:	f7ff ffa8 	bl	8010b18 <L_shift>
 8010bc8:	4544      	cmp	r4, r8
 8010bca:	d952      	bls.n	8010c72 <__hexnan+0x10e>
 8010bcc:	2300      	movs	r3, #0
 8010bce:	f1a4 0904 	sub.w	r9, r4, #4
 8010bd2:	f844 3c04 	str.w	r3, [r4, #-4]
 8010bd6:	f8cd b008 	str.w	fp, [sp, #8]
 8010bda:	464c      	mov	r4, r9
 8010bdc:	461d      	mov	r5, r3
 8010bde:	9903      	ldr	r1, [sp, #12]
 8010be0:	e7d7      	b.n	8010b92 <__hexnan+0x2e>
 8010be2:	2a29      	cmp	r2, #41	@ 0x29
 8010be4:	d157      	bne.n	8010c96 <__hexnan+0x132>
 8010be6:	3102      	adds	r1, #2
 8010be8:	f8ca 1000 	str.w	r1, [sl]
 8010bec:	f1bb 0f00 	cmp.w	fp, #0
 8010bf0:	d051      	beq.n	8010c96 <__hexnan+0x132>
 8010bf2:	454c      	cmp	r4, r9
 8010bf4:	d206      	bcs.n	8010c04 <__hexnan+0xa0>
 8010bf6:	2d07      	cmp	r5, #7
 8010bf8:	dc04      	bgt.n	8010c04 <__hexnan+0xa0>
 8010bfa:	462a      	mov	r2, r5
 8010bfc:	4649      	mov	r1, r9
 8010bfe:	4620      	mov	r0, r4
 8010c00:	f7ff ff8a 	bl	8010b18 <L_shift>
 8010c04:	4544      	cmp	r4, r8
 8010c06:	d936      	bls.n	8010c76 <__hexnan+0x112>
 8010c08:	f1a8 0204 	sub.w	r2, r8, #4
 8010c0c:	4623      	mov	r3, r4
 8010c0e:	f853 1b04 	ldr.w	r1, [r3], #4
 8010c12:	f842 1f04 	str.w	r1, [r2, #4]!
 8010c16:	429f      	cmp	r7, r3
 8010c18:	d2f9      	bcs.n	8010c0e <__hexnan+0xaa>
 8010c1a:	1b3b      	subs	r3, r7, r4
 8010c1c:	f023 0303 	bic.w	r3, r3, #3
 8010c20:	3304      	adds	r3, #4
 8010c22:	3401      	adds	r4, #1
 8010c24:	3e03      	subs	r6, #3
 8010c26:	42b4      	cmp	r4, r6
 8010c28:	bf88      	it	hi
 8010c2a:	2304      	movhi	r3, #4
 8010c2c:	4443      	add	r3, r8
 8010c2e:	2200      	movs	r2, #0
 8010c30:	f843 2b04 	str.w	r2, [r3], #4
 8010c34:	429f      	cmp	r7, r3
 8010c36:	d2fb      	bcs.n	8010c30 <__hexnan+0xcc>
 8010c38:	683b      	ldr	r3, [r7, #0]
 8010c3a:	b91b      	cbnz	r3, 8010c44 <__hexnan+0xe0>
 8010c3c:	4547      	cmp	r7, r8
 8010c3e:	d128      	bne.n	8010c92 <__hexnan+0x12e>
 8010c40:	2301      	movs	r3, #1
 8010c42:	603b      	str	r3, [r7, #0]
 8010c44:	2005      	movs	r0, #5
 8010c46:	b007      	add	sp, #28
 8010c48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c4c:	3501      	adds	r5, #1
 8010c4e:	2d08      	cmp	r5, #8
 8010c50:	f10b 0b01 	add.w	fp, fp, #1
 8010c54:	dd06      	ble.n	8010c64 <__hexnan+0x100>
 8010c56:	4544      	cmp	r4, r8
 8010c58:	d9c1      	bls.n	8010bde <__hexnan+0x7a>
 8010c5a:	2300      	movs	r3, #0
 8010c5c:	f844 3c04 	str.w	r3, [r4, #-4]
 8010c60:	2501      	movs	r5, #1
 8010c62:	3c04      	subs	r4, #4
 8010c64:	6822      	ldr	r2, [r4, #0]
 8010c66:	f000 000f 	and.w	r0, r0, #15
 8010c6a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8010c6e:	6020      	str	r0, [r4, #0]
 8010c70:	e7b5      	b.n	8010bde <__hexnan+0x7a>
 8010c72:	2508      	movs	r5, #8
 8010c74:	e7b3      	b.n	8010bde <__hexnan+0x7a>
 8010c76:	9b01      	ldr	r3, [sp, #4]
 8010c78:	2b00      	cmp	r3, #0
 8010c7a:	d0dd      	beq.n	8010c38 <__hexnan+0xd4>
 8010c7c:	f1c3 0320 	rsb	r3, r3, #32
 8010c80:	f04f 32ff 	mov.w	r2, #4294967295
 8010c84:	40da      	lsrs	r2, r3
 8010c86:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8010c8a:	4013      	ands	r3, r2
 8010c8c:	f846 3c04 	str.w	r3, [r6, #-4]
 8010c90:	e7d2      	b.n	8010c38 <__hexnan+0xd4>
 8010c92:	3f04      	subs	r7, #4
 8010c94:	e7d0      	b.n	8010c38 <__hexnan+0xd4>
 8010c96:	2004      	movs	r0, #4
 8010c98:	e7d5      	b.n	8010c46 <__hexnan+0xe2>

08010c9a <__ascii_mbtowc>:
 8010c9a:	b082      	sub	sp, #8
 8010c9c:	b901      	cbnz	r1, 8010ca0 <__ascii_mbtowc+0x6>
 8010c9e:	a901      	add	r1, sp, #4
 8010ca0:	b142      	cbz	r2, 8010cb4 <__ascii_mbtowc+0x1a>
 8010ca2:	b14b      	cbz	r3, 8010cb8 <__ascii_mbtowc+0x1e>
 8010ca4:	7813      	ldrb	r3, [r2, #0]
 8010ca6:	600b      	str	r3, [r1, #0]
 8010ca8:	7812      	ldrb	r2, [r2, #0]
 8010caa:	1e10      	subs	r0, r2, #0
 8010cac:	bf18      	it	ne
 8010cae:	2001      	movne	r0, #1
 8010cb0:	b002      	add	sp, #8
 8010cb2:	4770      	bx	lr
 8010cb4:	4610      	mov	r0, r2
 8010cb6:	e7fb      	b.n	8010cb0 <__ascii_mbtowc+0x16>
 8010cb8:	f06f 0001 	mvn.w	r0, #1
 8010cbc:	e7f8      	b.n	8010cb0 <__ascii_mbtowc+0x16>
	...

08010cc0 <_Balloc>:
 8010cc0:	b570      	push	{r4, r5, r6, lr}
 8010cc2:	69c6      	ldr	r6, [r0, #28]
 8010cc4:	4604      	mov	r4, r0
 8010cc6:	460d      	mov	r5, r1
 8010cc8:	b976      	cbnz	r6, 8010ce8 <_Balloc+0x28>
 8010cca:	2010      	movs	r0, #16
 8010ccc:	f7fc ffb2 	bl	800dc34 <malloc>
 8010cd0:	4602      	mov	r2, r0
 8010cd2:	61e0      	str	r0, [r4, #28]
 8010cd4:	b920      	cbnz	r0, 8010ce0 <_Balloc+0x20>
 8010cd6:	4b18      	ldr	r3, [pc, #96]	@ (8010d38 <_Balloc+0x78>)
 8010cd8:	4818      	ldr	r0, [pc, #96]	@ (8010d3c <_Balloc+0x7c>)
 8010cda:	216b      	movs	r1, #107	@ 0x6b
 8010cdc:	f001 fad4 	bl	8012288 <__assert_func>
 8010ce0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010ce4:	6006      	str	r6, [r0, #0]
 8010ce6:	60c6      	str	r6, [r0, #12]
 8010ce8:	69e6      	ldr	r6, [r4, #28]
 8010cea:	68f3      	ldr	r3, [r6, #12]
 8010cec:	b183      	cbz	r3, 8010d10 <_Balloc+0x50>
 8010cee:	69e3      	ldr	r3, [r4, #28]
 8010cf0:	68db      	ldr	r3, [r3, #12]
 8010cf2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010cf6:	b9b8      	cbnz	r0, 8010d28 <_Balloc+0x68>
 8010cf8:	2101      	movs	r1, #1
 8010cfa:	fa01 f605 	lsl.w	r6, r1, r5
 8010cfe:	1d72      	adds	r2, r6, #5
 8010d00:	0092      	lsls	r2, r2, #2
 8010d02:	4620      	mov	r0, r4
 8010d04:	f001 fade 	bl	80122c4 <_calloc_r>
 8010d08:	b160      	cbz	r0, 8010d24 <_Balloc+0x64>
 8010d0a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010d0e:	e00e      	b.n	8010d2e <_Balloc+0x6e>
 8010d10:	2221      	movs	r2, #33	@ 0x21
 8010d12:	2104      	movs	r1, #4
 8010d14:	4620      	mov	r0, r4
 8010d16:	f001 fad5 	bl	80122c4 <_calloc_r>
 8010d1a:	69e3      	ldr	r3, [r4, #28]
 8010d1c:	60f0      	str	r0, [r6, #12]
 8010d1e:	68db      	ldr	r3, [r3, #12]
 8010d20:	2b00      	cmp	r3, #0
 8010d22:	d1e4      	bne.n	8010cee <_Balloc+0x2e>
 8010d24:	2000      	movs	r0, #0
 8010d26:	bd70      	pop	{r4, r5, r6, pc}
 8010d28:	6802      	ldr	r2, [r0, #0]
 8010d2a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010d2e:	2300      	movs	r3, #0
 8010d30:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010d34:	e7f7      	b.n	8010d26 <_Balloc+0x66>
 8010d36:	bf00      	nop
 8010d38:	08012e34 	.word	0x08012e34
 8010d3c:	08012f14 	.word	0x08012f14

08010d40 <_Bfree>:
 8010d40:	b570      	push	{r4, r5, r6, lr}
 8010d42:	69c6      	ldr	r6, [r0, #28]
 8010d44:	4605      	mov	r5, r0
 8010d46:	460c      	mov	r4, r1
 8010d48:	b976      	cbnz	r6, 8010d68 <_Bfree+0x28>
 8010d4a:	2010      	movs	r0, #16
 8010d4c:	f7fc ff72 	bl	800dc34 <malloc>
 8010d50:	4602      	mov	r2, r0
 8010d52:	61e8      	str	r0, [r5, #28]
 8010d54:	b920      	cbnz	r0, 8010d60 <_Bfree+0x20>
 8010d56:	4b09      	ldr	r3, [pc, #36]	@ (8010d7c <_Bfree+0x3c>)
 8010d58:	4809      	ldr	r0, [pc, #36]	@ (8010d80 <_Bfree+0x40>)
 8010d5a:	218f      	movs	r1, #143	@ 0x8f
 8010d5c:	f001 fa94 	bl	8012288 <__assert_func>
 8010d60:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010d64:	6006      	str	r6, [r0, #0]
 8010d66:	60c6      	str	r6, [r0, #12]
 8010d68:	b13c      	cbz	r4, 8010d7a <_Bfree+0x3a>
 8010d6a:	69eb      	ldr	r3, [r5, #28]
 8010d6c:	6862      	ldr	r2, [r4, #4]
 8010d6e:	68db      	ldr	r3, [r3, #12]
 8010d70:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010d74:	6021      	str	r1, [r4, #0]
 8010d76:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010d7a:	bd70      	pop	{r4, r5, r6, pc}
 8010d7c:	08012e34 	.word	0x08012e34
 8010d80:	08012f14 	.word	0x08012f14

08010d84 <__multadd>:
 8010d84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010d88:	690d      	ldr	r5, [r1, #16]
 8010d8a:	4607      	mov	r7, r0
 8010d8c:	460c      	mov	r4, r1
 8010d8e:	461e      	mov	r6, r3
 8010d90:	f101 0c14 	add.w	ip, r1, #20
 8010d94:	2000      	movs	r0, #0
 8010d96:	f8dc 3000 	ldr.w	r3, [ip]
 8010d9a:	b299      	uxth	r1, r3
 8010d9c:	fb02 6101 	mla	r1, r2, r1, r6
 8010da0:	0c1e      	lsrs	r6, r3, #16
 8010da2:	0c0b      	lsrs	r3, r1, #16
 8010da4:	fb02 3306 	mla	r3, r2, r6, r3
 8010da8:	b289      	uxth	r1, r1
 8010daa:	3001      	adds	r0, #1
 8010dac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8010db0:	4285      	cmp	r5, r0
 8010db2:	f84c 1b04 	str.w	r1, [ip], #4
 8010db6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8010dba:	dcec      	bgt.n	8010d96 <__multadd+0x12>
 8010dbc:	b30e      	cbz	r6, 8010e02 <__multadd+0x7e>
 8010dbe:	68a3      	ldr	r3, [r4, #8]
 8010dc0:	42ab      	cmp	r3, r5
 8010dc2:	dc19      	bgt.n	8010df8 <__multadd+0x74>
 8010dc4:	6861      	ldr	r1, [r4, #4]
 8010dc6:	4638      	mov	r0, r7
 8010dc8:	3101      	adds	r1, #1
 8010dca:	f7ff ff79 	bl	8010cc0 <_Balloc>
 8010dce:	4680      	mov	r8, r0
 8010dd0:	b928      	cbnz	r0, 8010dde <__multadd+0x5a>
 8010dd2:	4602      	mov	r2, r0
 8010dd4:	4b0c      	ldr	r3, [pc, #48]	@ (8010e08 <__multadd+0x84>)
 8010dd6:	480d      	ldr	r0, [pc, #52]	@ (8010e0c <__multadd+0x88>)
 8010dd8:	21ba      	movs	r1, #186	@ 0xba
 8010dda:	f001 fa55 	bl	8012288 <__assert_func>
 8010dde:	6922      	ldr	r2, [r4, #16]
 8010de0:	3202      	adds	r2, #2
 8010de2:	f104 010c 	add.w	r1, r4, #12
 8010de6:	0092      	lsls	r2, r2, #2
 8010de8:	300c      	adds	r0, #12
 8010dea:	f7fe fdd4 	bl	800f996 <memcpy>
 8010dee:	4621      	mov	r1, r4
 8010df0:	4638      	mov	r0, r7
 8010df2:	f7ff ffa5 	bl	8010d40 <_Bfree>
 8010df6:	4644      	mov	r4, r8
 8010df8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010dfc:	3501      	adds	r5, #1
 8010dfe:	615e      	str	r6, [r3, #20]
 8010e00:	6125      	str	r5, [r4, #16]
 8010e02:	4620      	mov	r0, r4
 8010e04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010e08:	08012ea3 	.word	0x08012ea3
 8010e0c:	08012f14 	.word	0x08012f14

08010e10 <__s2b>:
 8010e10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010e14:	460c      	mov	r4, r1
 8010e16:	4615      	mov	r5, r2
 8010e18:	461f      	mov	r7, r3
 8010e1a:	2209      	movs	r2, #9
 8010e1c:	3308      	adds	r3, #8
 8010e1e:	4606      	mov	r6, r0
 8010e20:	fb93 f3f2 	sdiv	r3, r3, r2
 8010e24:	2100      	movs	r1, #0
 8010e26:	2201      	movs	r2, #1
 8010e28:	429a      	cmp	r2, r3
 8010e2a:	db09      	blt.n	8010e40 <__s2b+0x30>
 8010e2c:	4630      	mov	r0, r6
 8010e2e:	f7ff ff47 	bl	8010cc0 <_Balloc>
 8010e32:	b940      	cbnz	r0, 8010e46 <__s2b+0x36>
 8010e34:	4602      	mov	r2, r0
 8010e36:	4b19      	ldr	r3, [pc, #100]	@ (8010e9c <__s2b+0x8c>)
 8010e38:	4819      	ldr	r0, [pc, #100]	@ (8010ea0 <__s2b+0x90>)
 8010e3a:	21d3      	movs	r1, #211	@ 0xd3
 8010e3c:	f001 fa24 	bl	8012288 <__assert_func>
 8010e40:	0052      	lsls	r2, r2, #1
 8010e42:	3101      	adds	r1, #1
 8010e44:	e7f0      	b.n	8010e28 <__s2b+0x18>
 8010e46:	9b08      	ldr	r3, [sp, #32]
 8010e48:	6143      	str	r3, [r0, #20]
 8010e4a:	2d09      	cmp	r5, #9
 8010e4c:	f04f 0301 	mov.w	r3, #1
 8010e50:	6103      	str	r3, [r0, #16]
 8010e52:	dd16      	ble.n	8010e82 <__s2b+0x72>
 8010e54:	f104 0909 	add.w	r9, r4, #9
 8010e58:	46c8      	mov	r8, r9
 8010e5a:	442c      	add	r4, r5
 8010e5c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8010e60:	4601      	mov	r1, r0
 8010e62:	3b30      	subs	r3, #48	@ 0x30
 8010e64:	220a      	movs	r2, #10
 8010e66:	4630      	mov	r0, r6
 8010e68:	f7ff ff8c 	bl	8010d84 <__multadd>
 8010e6c:	45a0      	cmp	r8, r4
 8010e6e:	d1f5      	bne.n	8010e5c <__s2b+0x4c>
 8010e70:	f1a5 0408 	sub.w	r4, r5, #8
 8010e74:	444c      	add	r4, r9
 8010e76:	1b2d      	subs	r5, r5, r4
 8010e78:	1963      	adds	r3, r4, r5
 8010e7a:	42bb      	cmp	r3, r7
 8010e7c:	db04      	blt.n	8010e88 <__s2b+0x78>
 8010e7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010e82:	340a      	adds	r4, #10
 8010e84:	2509      	movs	r5, #9
 8010e86:	e7f6      	b.n	8010e76 <__s2b+0x66>
 8010e88:	f814 3b01 	ldrb.w	r3, [r4], #1
 8010e8c:	4601      	mov	r1, r0
 8010e8e:	3b30      	subs	r3, #48	@ 0x30
 8010e90:	220a      	movs	r2, #10
 8010e92:	4630      	mov	r0, r6
 8010e94:	f7ff ff76 	bl	8010d84 <__multadd>
 8010e98:	e7ee      	b.n	8010e78 <__s2b+0x68>
 8010e9a:	bf00      	nop
 8010e9c:	08012ea3 	.word	0x08012ea3
 8010ea0:	08012f14 	.word	0x08012f14

08010ea4 <__hi0bits>:
 8010ea4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8010ea8:	4603      	mov	r3, r0
 8010eaa:	bf36      	itet	cc
 8010eac:	0403      	lslcc	r3, r0, #16
 8010eae:	2000      	movcs	r0, #0
 8010eb0:	2010      	movcc	r0, #16
 8010eb2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8010eb6:	bf3c      	itt	cc
 8010eb8:	021b      	lslcc	r3, r3, #8
 8010eba:	3008      	addcc	r0, #8
 8010ebc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8010ec0:	bf3c      	itt	cc
 8010ec2:	011b      	lslcc	r3, r3, #4
 8010ec4:	3004      	addcc	r0, #4
 8010ec6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010eca:	bf3c      	itt	cc
 8010ecc:	009b      	lslcc	r3, r3, #2
 8010ece:	3002      	addcc	r0, #2
 8010ed0:	2b00      	cmp	r3, #0
 8010ed2:	db05      	blt.n	8010ee0 <__hi0bits+0x3c>
 8010ed4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8010ed8:	f100 0001 	add.w	r0, r0, #1
 8010edc:	bf08      	it	eq
 8010ede:	2020      	moveq	r0, #32
 8010ee0:	4770      	bx	lr

08010ee2 <__lo0bits>:
 8010ee2:	6803      	ldr	r3, [r0, #0]
 8010ee4:	4602      	mov	r2, r0
 8010ee6:	f013 0007 	ands.w	r0, r3, #7
 8010eea:	d00b      	beq.n	8010f04 <__lo0bits+0x22>
 8010eec:	07d9      	lsls	r1, r3, #31
 8010eee:	d421      	bmi.n	8010f34 <__lo0bits+0x52>
 8010ef0:	0798      	lsls	r0, r3, #30
 8010ef2:	bf49      	itett	mi
 8010ef4:	085b      	lsrmi	r3, r3, #1
 8010ef6:	089b      	lsrpl	r3, r3, #2
 8010ef8:	2001      	movmi	r0, #1
 8010efa:	6013      	strmi	r3, [r2, #0]
 8010efc:	bf5c      	itt	pl
 8010efe:	6013      	strpl	r3, [r2, #0]
 8010f00:	2002      	movpl	r0, #2
 8010f02:	4770      	bx	lr
 8010f04:	b299      	uxth	r1, r3
 8010f06:	b909      	cbnz	r1, 8010f0c <__lo0bits+0x2a>
 8010f08:	0c1b      	lsrs	r3, r3, #16
 8010f0a:	2010      	movs	r0, #16
 8010f0c:	b2d9      	uxtb	r1, r3
 8010f0e:	b909      	cbnz	r1, 8010f14 <__lo0bits+0x32>
 8010f10:	3008      	adds	r0, #8
 8010f12:	0a1b      	lsrs	r3, r3, #8
 8010f14:	0719      	lsls	r1, r3, #28
 8010f16:	bf04      	itt	eq
 8010f18:	091b      	lsreq	r3, r3, #4
 8010f1a:	3004      	addeq	r0, #4
 8010f1c:	0799      	lsls	r1, r3, #30
 8010f1e:	bf04      	itt	eq
 8010f20:	089b      	lsreq	r3, r3, #2
 8010f22:	3002      	addeq	r0, #2
 8010f24:	07d9      	lsls	r1, r3, #31
 8010f26:	d403      	bmi.n	8010f30 <__lo0bits+0x4e>
 8010f28:	085b      	lsrs	r3, r3, #1
 8010f2a:	f100 0001 	add.w	r0, r0, #1
 8010f2e:	d003      	beq.n	8010f38 <__lo0bits+0x56>
 8010f30:	6013      	str	r3, [r2, #0]
 8010f32:	4770      	bx	lr
 8010f34:	2000      	movs	r0, #0
 8010f36:	4770      	bx	lr
 8010f38:	2020      	movs	r0, #32
 8010f3a:	4770      	bx	lr

08010f3c <__i2b>:
 8010f3c:	b510      	push	{r4, lr}
 8010f3e:	460c      	mov	r4, r1
 8010f40:	2101      	movs	r1, #1
 8010f42:	f7ff febd 	bl	8010cc0 <_Balloc>
 8010f46:	4602      	mov	r2, r0
 8010f48:	b928      	cbnz	r0, 8010f56 <__i2b+0x1a>
 8010f4a:	4b05      	ldr	r3, [pc, #20]	@ (8010f60 <__i2b+0x24>)
 8010f4c:	4805      	ldr	r0, [pc, #20]	@ (8010f64 <__i2b+0x28>)
 8010f4e:	f240 1145 	movw	r1, #325	@ 0x145
 8010f52:	f001 f999 	bl	8012288 <__assert_func>
 8010f56:	2301      	movs	r3, #1
 8010f58:	6144      	str	r4, [r0, #20]
 8010f5a:	6103      	str	r3, [r0, #16]
 8010f5c:	bd10      	pop	{r4, pc}
 8010f5e:	bf00      	nop
 8010f60:	08012ea3 	.word	0x08012ea3
 8010f64:	08012f14 	.word	0x08012f14

08010f68 <__multiply>:
 8010f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f6c:	4614      	mov	r4, r2
 8010f6e:	690a      	ldr	r2, [r1, #16]
 8010f70:	6923      	ldr	r3, [r4, #16]
 8010f72:	429a      	cmp	r2, r3
 8010f74:	bfa8      	it	ge
 8010f76:	4623      	movge	r3, r4
 8010f78:	460f      	mov	r7, r1
 8010f7a:	bfa4      	itt	ge
 8010f7c:	460c      	movge	r4, r1
 8010f7e:	461f      	movge	r7, r3
 8010f80:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8010f84:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8010f88:	68a3      	ldr	r3, [r4, #8]
 8010f8a:	6861      	ldr	r1, [r4, #4]
 8010f8c:	eb0a 0609 	add.w	r6, sl, r9
 8010f90:	42b3      	cmp	r3, r6
 8010f92:	b085      	sub	sp, #20
 8010f94:	bfb8      	it	lt
 8010f96:	3101      	addlt	r1, #1
 8010f98:	f7ff fe92 	bl	8010cc0 <_Balloc>
 8010f9c:	b930      	cbnz	r0, 8010fac <__multiply+0x44>
 8010f9e:	4602      	mov	r2, r0
 8010fa0:	4b44      	ldr	r3, [pc, #272]	@ (80110b4 <__multiply+0x14c>)
 8010fa2:	4845      	ldr	r0, [pc, #276]	@ (80110b8 <__multiply+0x150>)
 8010fa4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8010fa8:	f001 f96e 	bl	8012288 <__assert_func>
 8010fac:	f100 0514 	add.w	r5, r0, #20
 8010fb0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8010fb4:	462b      	mov	r3, r5
 8010fb6:	2200      	movs	r2, #0
 8010fb8:	4543      	cmp	r3, r8
 8010fba:	d321      	bcc.n	8011000 <__multiply+0x98>
 8010fbc:	f107 0114 	add.w	r1, r7, #20
 8010fc0:	f104 0214 	add.w	r2, r4, #20
 8010fc4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8010fc8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8010fcc:	9302      	str	r3, [sp, #8]
 8010fce:	1b13      	subs	r3, r2, r4
 8010fd0:	3b15      	subs	r3, #21
 8010fd2:	f023 0303 	bic.w	r3, r3, #3
 8010fd6:	3304      	adds	r3, #4
 8010fd8:	f104 0715 	add.w	r7, r4, #21
 8010fdc:	42ba      	cmp	r2, r7
 8010fde:	bf38      	it	cc
 8010fe0:	2304      	movcc	r3, #4
 8010fe2:	9301      	str	r3, [sp, #4]
 8010fe4:	9b02      	ldr	r3, [sp, #8]
 8010fe6:	9103      	str	r1, [sp, #12]
 8010fe8:	428b      	cmp	r3, r1
 8010fea:	d80c      	bhi.n	8011006 <__multiply+0x9e>
 8010fec:	2e00      	cmp	r6, #0
 8010fee:	dd03      	ble.n	8010ff8 <__multiply+0x90>
 8010ff0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010ff4:	2b00      	cmp	r3, #0
 8010ff6:	d05b      	beq.n	80110b0 <__multiply+0x148>
 8010ff8:	6106      	str	r6, [r0, #16]
 8010ffa:	b005      	add	sp, #20
 8010ffc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011000:	f843 2b04 	str.w	r2, [r3], #4
 8011004:	e7d8      	b.n	8010fb8 <__multiply+0x50>
 8011006:	f8b1 a000 	ldrh.w	sl, [r1]
 801100a:	f1ba 0f00 	cmp.w	sl, #0
 801100e:	d024      	beq.n	801105a <__multiply+0xf2>
 8011010:	f104 0e14 	add.w	lr, r4, #20
 8011014:	46a9      	mov	r9, r5
 8011016:	f04f 0c00 	mov.w	ip, #0
 801101a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801101e:	f8d9 3000 	ldr.w	r3, [r9]
 8011022:	fa1f fb87 	uxth.w	fp, r7
 8011026:	b29b      	uxth	r3, r3
 8011028:	fb0a 330b 	mla	r3, sl, fp, r3
 801102c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8011030:	f8d9 7000 	ldr.w	r7, [r9]
 8011034:	4463      	add	r3, ip
 8011036:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801103a:	fb0a c70b 	mla	r7, sl, fp, ip
 801103e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8011042:	b29b      	uxth	r3, r3
 8011044:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8011048:	4572      	cmp	r2, lr
 801104a:	f849 3b04 	str.w	r3, [r9], #4
 801104e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8011052:	d8e2      	bhi.n	801101a <__multiply+0xb2>
 8011054:	9b01      	ldr	r3, [sp, #4]
 8011056:	f845 c003 	str.w	ip, [r5, r3]
 801105a:	9b03      	ldr	r3, [sp, #12]
 801105c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8011060:	3104      	adds	r1, #4
 8011062:	f1b9 0f00 	cmp.w	r9, #0
 8011066:	d021      	beq.n	80110ac <__multiply+0x144>
 8011068:	682b      	ldr	r3, [r5, #0]
 801106a:	f104 0c14 	add.w	ip, r4, #20
 801106e:	46ae      	mov	lr, r5
 8011070:	f04f 0a00 	mov.w	sl, #0
 8011074:	f8bc b000 	ldrh.w	fp, [ip]
 8011078:	f8be 7002 	ldrh.w	r7, [lr, #2]
 801107c:	fb09 770b 	mla	r7, r9, fp, r7
 8011080:	4457      	add	r7, sl
 8011082:	b29b      	uxth	r3, r3
 8011084:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8011088:	f84e 3b04 	str.w	r3, [lr], #4
 801108c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8011090:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011094:	f8be 3000 	ldrh.w	r3, [lr]
 8011098:	fb09 330a 	mla	r3, r9, sl, r3
 801109c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80110a0:	4562      	cmp	r2, ip
 80110a2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80110a6:	d8e5      	bhi.n	8011074 <__multiply+0x10c>
 80110a8:	9f01      	ldr	r7, [sp, #4]
 80110aa:	51eb      	str	r3, [r5, r7]
 80110ac:	3504      	adds	r5, #4
 80110ae:	e799      	b.n	8010fe4 <__multiply+0x7c>
 80110b0:	3e01      	subs	r6, #1
 80110b2:	e79b      	b.n	8010fec <__multiply+0x84>
 80110b4:	08012ea3 	.word	0x08012ea3
 80110b8:	08012f14 	.word	0x08012f14

080110bc <__pow5mult>:
 80110bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80110c0:	4615      	mov	r5, r2
 80110c2:	f012 0203 	ands.w	r2, r2, #3
 80110c6:	4607      	mov	r7, r0
 80110c8:	460e      	mov	r6, r1
 80110ca:	d007      	beq.n	80110dc <__pow5mult+0x20>
 80110cc:	4c25      	ldr	r4, [pc, #148]	@ (8011164 <__pow5mult+0xa8>)
 80110ce:	3a01      	subs	r2, #1
 80110d0:	2300      	movs	r3, #0
 80110d2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80110d6:	f7ff fe55 	bl	8010d84 <__multadd>
 80110da:	4606      	mov	r6, r0
 80110dc:	10ad      	asrs	r5, r5, #2
 80110de:	d03d      	beq.n	801115c <__pow5mult+0xa0>
 80110e0:	69fc      	ldr	r4, [r7, #28]
 80110e2:	b97c      	cbnz	r4, 8011104 <__pow5mult+0x48>
 80110e4:	2010      	movs	r0, #16
 80110e6:	f7fc fda5 	bl	800dc34 <malloc>
 80110ea:	4602      	mov	r2, r0
 80110ec:	61f8      	str	r0, [r7, #28]
 80110ee:	b928      	cbnz	r0, 80110fc <__pow5mult+0x40>
 80110f0:	4b1d      	ldr	r3, [pc, #116]	@ (8011168 <__pow5mult+0xac>)
 80110f2:	481e      	ldr	r0, [pc, #120]	@ (801116c <__pow5mult+0xb0>)
 80110f4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80110f8:	f001 f8c6 	bl	8012288 <__assert_func>
 80110fc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011100:	6004      	str	r4, [r0, #0]
 8011102:	60c4      	str	r4, [r0, #12]
 8011104:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8011108:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801110c:	b94c      	cbnz	r4, 8011122 <__pow5mult+0x66>
 801110e:	f240 2171 	movw	r1, #625	@ 0x271
 8011112:	4638      	mov	r0, r7
 8011114:	f7ff ff12 	bl	8010f3c <__i2b>
 8011118:	2300      	movs	r3, #0
 801111a:	f8c8 0008 	str.w	r0, [r8, #8]
 801111e:	4604      	mov	r4, r0
 8011120:	6003      	str	r3, [r0, #0]
 8011122:	f04f 0900 	mov.w	r9, #0
 8011126:	07eb      	lsls	r3, r5, #31
 8011128:	d50a      	bpl.n	8011140 <__pow5mult+0x84>
 801112a:	4631      	mov	r1, r6
 801112c:	4622      	mov	r2, r4
 801112e:	4638      	mov	r0, r7
 8011130:	f7ff ff1a 	bl	8010f68 <__multiply>
 8011134:	4631      	mov	r1, r6
 8011136:	4680      	mov	r8, r0
 8011138:	4638      	mov	r0, r7
 801113a:	f7ff fe01 	bl	8010d40 <_Bfree>
 801113e:	4646      	mov	r6, r8
 8011140:	106d      	asrs	r5, r5, #1
 8011142:	d00b      	beq.n	801115c <__pow5mult+0xa0>
 8011144:	6820      	ldr	r0, [r4, #0]
 8011146:	b938      	cbnz	r0, 8011158 <__pow5mult+0x9c>
 8011148:	4622      	mov	r2, r4
 801114a:	4621      	mov	r1, r4
 801114c:	4638      	mov	r0, r7
 801114e:	f7ff ff0b 	bl	8010f68 <__multiply>
 8011152:	6020      	str	r0, [r4, #0]
 8011154:	f8c0 9000 	str.w	r9, [r0]
 8011158:	4604      	mov	r4, r0
 801115a:	e7e4      	b.n	8011126 <__pow5mult+0x6a>
 801115c:	4630      	mov	r0, r6
 801115e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011162:	bf00      	nop
 8011164:	08012f70 	.word	0x08012f70
 8011168:	08012e34 	.word	0x08012e34
 801116c:	08012f14 	.word	0x08012f14

08011170 <__lshift>:
 8011170:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011174:	460c      	mov	r4, r1
 8011176:	6849      	ldr	r1, [r1, #4]
 8011178:	6923      	ldr	r3, [r4, #16]
 801117a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801117e:	68a3      	ldr	r3, [r4, #8]
 8011180:	4607      	mov	r7, r0
 8011182:	4691      	mov	r9, r2
 8011184:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011188:	f108 0601 	add.w	r6, r8, #1
 801118c:	42b3      	cmp	r3, r6
 801118e:	db0b      	blt.n	80111a8 <__lshift+0x38>
 8011190:	4638      	mov	r0, r7
 8011192:	f7ff fd95 	bl	8010cc0 <_Balloc>
 8011196:	4605      	mov	r5, r0
 8011198:	b948      	cbnz	r0, 80111ae <__lshift+0x3e>
 801119a:	4602      	mov	r2, r0
 801119c:	4b28      	ldr	r3, [pc, #160]	@ (8011240 <__lshift+0xd0>)
 801119e:	4829      	ldr	r0, [pc, #164]	@ (8011244 <__lshift+0xd4>)
 80111a0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80111a4:	f001 f870 	bl	8012288 <__assert_func>
 80111a8:	3101      	adds	r1, #1
 80111aa:	005b      	lsls	r3, r3, #1
 80111ac:	e7ee      	b.n	801118c <__lshift+0x1c>
 80111ae:	2300      	movs	r3, #0
 80111b0:	f100 0114 	add.w	r1, r0, #20
 80111b4:	f100 0210 	add.w	r2, r0, #16
 80111b8:	4618      	mov	r0, r3
 80111ba:	4553      	cmp	r3, sl
 80111bc:	db33      	blt.n	8011226 <__lshift+0xb6>
 80111be:	6920      	ldr	r0, [r4, #16]
 80111c0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80111c4:	f104 0314 	add.w	r3, r4, #20
 80111c8:	f019 091f 	ands.w	r9, r9, #31
 80111cc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80111d0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80111d4:	d02b      	beq.n	801122e <__lshift+0xbe>
 80111d6:	f1c9 0e20 	rsb	lr, r9, #32
 80111da:	468a      	mov	sl, r1
 80111dc:	2200      	movs	r2, #0
 80111de:	6818      	ldr	r0, [r3, #0]
 80111e0:	fa00 f009 	lsl.w	r0, r0, r9
 80111e4:	4310      	orrs	r0, r2
 80111e6:	f84a 0b04 	str.w	r0, [sl], #4
 80111ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80111ee:	459c      	cmp	ip, r3
 80111f0:	fa22 f20e 	lsr.w	r2, r2, lr
 80111f4:	d8f3      	bhi.n	80111de <__lshift+0x6e>
 80111f6:	ebac 0304 	sub.w	r3, ip, r4
 80111fa:	3b15      	subs	r3, #21
 80111fc:	f023 0303 	bic.w	r3, r3, #3
 8011200:	3304      	adds	r3, #4
 8011202:	f104 0015 	add.w	r0, r4, #21
 8011206:	4584      	cmp	ip, r0
 8011208:	bf38      	it	cc
 801120a:	2304      	movcc	r3, #4
 801120c:	50ca      	str	r2, [r1, r3]
 801120e:	b10a      	cbz	r2, 8011214 <__lshift+0xa4>
 8011210:	f108 0602 	add.w	r6, r8, #2
 8011214:	3e01      	subs	r6, #1
 8011216:	4638      	mov	r0, r7
 8011218:	612e      	str	r6, [r5, #16]
 801121a:	4621      	mov	r1, r4
 801121c:	f7ff fd90 	bl	8010d40 <_Bfree>
 8011220:	4628      	mov	r0, r5
 8011222:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011226:	f842 0f04 	str.w	r0, [r2, #4]!
 801122a:	3301      	adds	r3, #1
 801122c:	e7c5      	b.n	80111ba <__lshift+0x4a>
 801122e:	3904      	subs	r1, #4
 8011230:	f853 2b04 	ldr.w	r2, [r3], #4
 8011234:	f841 2f04 	str.w	r2, [r1, #4]!
 8011238:	459c      	cmp	ip, r3
 801123a:	d8f9      	bhi.n	8011230 <__lshift+0xc0>
 801123c:	e7ea      	b.n	8011214 <__lshift+0xa4>
 801123e:	bf00      	nop
 8011240:	08012ea3 	.word	0x08012ea3
 8011244:	08012f14 	.word	0x08012f14

08011248 <__mcmp>:
 8011248:	690a      	ldr	r2, [r1, #16]
 801124a:	4603      	mov	r3, r0
 801124c:	6900      	ldr	r0, [r0, #16]
 801124e:	1a80      	subs	r0, r0, r2
 8011250:	b530      	push	{r4, r5, lr}
 8011252:	d10e      	bne.n	8011272 <__mcmp+0x2a>
 8011254:	3314      	adds	r3, #20
 8011256:	3114      	adds	r1, #20
 8011258:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801125c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8011260:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8011264:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8011268:	4295      	cmp	r5, r2
 801126a:	d003      	beq.n	8011274 <__mcmp+0x2c>
 801126c:	d205      	bcs.n	801127a <__mcmp+0x32>
 801126e:	f04f 30ff 	mov.w	r0, #4294967295
 8011272:	bd30      	pop	{r4, r5, pc}
 8011274:	42a3      	cmp	r3, r4
 8011276:	d3f3      	bcc.n	8011260 <__mcmp+0x18>
 8011278:	e7fb      	b.n	8011272 <__mcmp+0x2a>
 801127a:	2001      	movs	r0, #1
 801127c:	e7f9      	b.n	8011272 <__mcmp+0x2a>
	...

08011280 <__mdiff>:
 8011280:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011284:	4689      	mov	r9, r1
 8011286:	4606      	mov	r6, r0
 8011288:	4611      	mov	r1, r2
 801128a:	4648      	mov	r0, r9
 801128c:	4614      	mov	r4, r2
 801128e:	f7ff ffdb 	bl	8011248 <__mcmp>
 8011292:	1e05      	subs	r5, r0, #0
 8011294:	d112      	bne.n	80112bc <__mdiff+0x3c>
 8011296:	4629      	mov	r1, r5
 8011298:	4630      	mov	r0, r6
 801129a:	f7ff fd11 	bl	8010cc0 <_Balloc>
 801129e:	4602      	mov	r2, r0
 80112a0:	b928      	cbnz	r0, 80112ae <__mdiff+0x2e>
 80112a2:	4b3f      	ldr	r3, [pc, #252]	@ (80113a0 <__mdiff+0x120>)
 80112a4:	f240 2137 	movw	r1, #567	@ 0x237
 80112a8:	483e      	ldr	r0, [pc, #248]	@ (80113a4 <__mdiff+0x124>)
 80112aa:	f000 ffed 	bl	8012288 <__assert_func>
 80112ae:	2301      	movs	r3, #1
 80112b0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80112b4:	4610      	mov	r0, r2
 80112b6:	b003      	add	sp, #12
 80112b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80112bc:	bfbc      	itt	lt
 80112be:	464b      	movlt	r3, r9
 80112c0:	46a1      	movlt	r9, r4
 80112c2:	4630      	mov	r0, r6
 80112c4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80112c8:	bfba      	itte	lt
 80112ca:	461c      	movlt	r4, r3
 80112cc:	2501      	movlt	r5, #1
 80112ce:	2500      	movge	r5, #0
 80112d0:	f7ff fcf6 	bl	8010cc0 <_Balloc>
 80112d4:	4602      	mov	r2, r0
 80112d6:	b918      	cbnz	r0, 80112e0 <__mdiff+0x60>
 80112d8:	4b31      	ldr	r3, [pc, #196]	@ (80113a0 <__mdiff+0x120>)
 80112da:	f240 2145 	movw	r1, #581	@ 0x245
 80112de:	e7e3      	b.n	80112a8 <__mdiff+0x28>
 80112e0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80112e4:	6926      	ldr	r6, [r4, #16]
 80112e6:	60c5      	str	r5, [r0, #12]
 80112e8:	f109 0310 	add.w	r3, r9, #16
 80112ec:	f109 0514 	add.w	r5, r9, #20
 80112f0:	f104 0e14 	add.w	lr, r4, #20
 80112f4:	f100 0b14 	add.w	fp, r0, #20
 80112f8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80112fc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8011300:	9301      	str	r3, [sp, #4]
 8011302:	46d9      	mov	r9, fp
 8011304:	f04f 0c00 	mov.w	ip, #0
 8011308:	9b01      	ldr	r3, [sp, #4]
 801130a:	f85e 0b04 	ldr.w	r0, [lr], #4
 801130e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8011312:	9301      	str	r3, [sp, #4]
 8011314:	fa1f f38a 	uxth.w	r3, sl
 8011318:	4619      	mov	r1, r3
 801131a:	b283      	uxth	r3, r0
 801131c:	1acb      	subs	r3, r1, r3
 801131e:	0c00      	lsrs	r0, r0, #16
 8011320:	4463      	add	r3, ip
 8011322:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8011326:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801132a:	b29b      	uxth	r3, r3
 801132c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8011330:	4576      	cmp	r6, lr
 8011332:	f849 3b04 	str.w	r3, [r9], #4
 8011336:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801133a:	d8e5      	bhi.n	8011308 <__mdiff+0x88>
 801133c:	1b33      	subs	r3, r6, r4
 801133e:	3b15      	subs	r3, #21
 8011340:	f023 0303 	bic.w	r3, r3, #3
 8011344:	3415      	adds	r4, #21
 8011346:	3304      	adds	r3, #4
 8011348:	42a6      	cmp	r6, r4
 801134a:	bf38      	it	cc
 801134c:	2304      	movcc	r3, #4
 801134e:	441d      	add	r5, r3
 8011350:	445b      	add	r3, fp
 8011352:	461e      	mov	r6, r3
 8011354:	462c      	mov	r4, r5
 8011356:	4544      	cmp	r4, r8
 8011358:	d30e      	bcc.n	8011378 <__mdiff+0xf8>
 801135a:	f108 0103 	add.w	r1, r8, #3
 801135e:	1b49      	subs	r1, r1, r5
 8011360:	f021 0103 	bic.w	r1, r1, #3
 8011364:	3d03      	subs	r5, #3
 8011366:	45a8      	cmp	r8, r5
 8011368:	bf38      	it	cc
 801136a:	2100      	movcc	r1, #0
 801136c:	440b      	add	r3, r1
 801136e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011372:	b191      	cbz	r1, 801139a <__mdiff+0x11a>
 8011374:	6117      	str	r7, [r2, #16]
 8011376:	e79d      	b.n	80112b4 <__mdiff+0x34>
 8011378:	f854 1b04 	ldr.w	r1, [r4], #4
 801137c:	46e6      	mov	lr, ip
 801137e:	0c08      	lsrs	r0, r1, #16
 8011380:	fa1c fc81 	uxtah	ip, ip, r1
 8011384:	4471      	add	r1, lr
 8011386:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801138a:	b289      	uxth	r1, r1
 801138c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8011390:	f846 1b04 	str.w	r1, [r6], #4
 8011394:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8011398:	e7dd      	b.n	8011356 <__mdiff+0xd6>
 801139a:	3f01      	subs	r7, #1
 801139c:	e7e7      	b.n	801136e <__mdiff+0xee>
 801139e:	bf00      	nop
 80113a0:	08012ea3 	.word	0x08012ea3
 80113a4:	08012f14 	.word	0x08012f14

080113a8 <__ulp>:
 80113a8:	b082      	sub	sp, #8
 80113aa:	ed8d 0b00 	vstr	d0, [sp]
 80113ae:	9a01      	ldr	r2, [sp, #4]
 80113b0:	4b0f      	ldr	r3, [pc, #60]	@ (80113f0 <__ulp+0x48>)
 80113b2:	4013      	ands	r3, r2
 80113b4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80113b8:	2b00      	cmp	r3, #0
 80113ba:	dc08      	bgt.n	80113ce <__ulp+0x26>
 80113bc:	425b      	negs	r3, r3
 80113be:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80113c2:	ea4f 5223 	mov.w	r2, r3, asr #20
 80113c6:	da04      	bge.n	80113d2 <__ulp+0x2a>
 80113c8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80113cc:	4113      	asrs	r3, r2
 80113ce:	2200      	movs	r2, #0
 80113d0:	e008      	b.n	80113e4 <__ulp+0x3c>
 80113d2:	f1a2 0314 	sub.w	r3, r2, #20
 80113d6:	2b1e      	cmp	r3, #30
 80113d8:	bfda      	itte	le
 80113da:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80113de:	40da      	lsrle	r2, r3
 80113e0:	2201      	movgt	r2, #1
 80113e2:	2300      	movs	r3, #0
 80113e4:	4619      	mov	r1, r3
 80113e6:	4610      	mov	r0, r2
 80113e8:	ec41 0b10 	vmov	d0, r0, r1
 80113ec:	b002      	add	sp, #8
 80113ee:	4770      	bx	lr
 80113f0:	7ff00000 	.word	0x7ff00000

080113f4 <__b2d>:
 80113f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80113f8:	6906      	ldr	r6, [r0, #16]
 80113fa:	f100 0814 	add.w	r8, r0, #20
 80113fe:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8011402:	1f37      	subs	r7, r6, #4
 8011404:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8011408:	4610      	mov	r0, r2
 801140a:	f7ff fd4b 	bl	8010ea4 <__hi0bits>
 801140e:	f1c0 0320 	rsb	r3, r0, #32
 8011412:	280a      	cmp	r0, #10
 8011414:	600b      	str	r3, [r1, #0]
 8011416:	491b      	ldr	r1, [pc, #108]	@ (8011484 <__b2d+0x90>)
 8011418:	dc15      	bgt.n	8011446 <__b2d+0x52>
 801141a:	f1c0 0c0b 	rsb	ip, r0, #11
 801141e:	fa22 f30c 	lsr.w	r3, r2, ip
 8011422:	45b8      	cmp	r8, r7
 8011424:	ea43 0501 	orr.w	r5, r3, r1
 8011428:	bf34      	ite	cc
 801142a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801142e:	2300      	movcs	r3, #0
 8011430:	3015      	adds	r0, #21
 8011432:	fa02 f000 	lsl.w	r0, r2, r0
 8011436:	fa23 f30c 	lsr.w	r3, r3, ip
 801143a:	4303      	orrs	r3, r0
 801143c:	461c      	mov	r4, r3
 801143e:	ec45 4b10 	vmov	d0, r4, r5
 8011442:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011446:	45b8      	cmp	r8, r7
 8011448:	bf3a      	itte	cc
 801144a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801144e:	f1a6 0708 	subcc.w	r7, r6, #8
 8011452:	2300      	movcs	r3, #0
 8011454:	380b      	subs	r0, #11
 8011456:	d012      	beq.n	801147e <__b2d+0x8a>
 8011458:	f1c0 0120 	rsb	r1, r0, #32
 801145c:	fa23 f401 	lsr.w	r4, r3, r1
 8011460:	4082      	lsls	r2, r0
 8011462:	4322      	orrs	r2, r4
 8011464:	4547      	cmp	r7, r8
 8011466:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 801146a:	bf8c      	ite	hi
 801146c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8011470:	2200      	movls	r2, #0
 8011472:	4083      	lsls	r3, r0
 8011474:	40ca      	lsrs	r2, r1
 8011476:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 801147a:	4313      	orrs	r3, r2
 801147c:	e7de      	b.n	801143c <__b2d+0x48>
 801147e:	ea42 0501 	orr.w	r5, r2, r1
 8011482:	e7db      	b.n	801143c <__b2d+0x48>
 8011484:	3ff00000 	.word	0x3ff00000

08011488 <__d2b>:
 8011488:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801148c:	460f      	mov	r7, r1
 801148e:	2101      	movs	r1, #1
 8011490:	ec59 8b10 	vmov	r8, r9, d0
 8011494:	4616      	mov	r6, r2
 8011496:	f7ff fc13 	bl	8010cc0 <_Balloc>
 801149a:	4604      	mov	r4, r0
 801149c:	b930      	cbnz	r0, 80114ac <__d2b+0x24>
 801149e:	4602      	mov	r2, r0
 80114a0:	4b23      	ldr	r3, [pc, #140]	@ (8011530 <__d2b+0xa8>)
 80114a2:	4824      	ldr	r0, [pc, #144]	@ (8011534 <__d2b+0xac>)
 80114a4:	f240 310f 	movw	r1, #783	@ 0x30f
 80114a8:	f000 feee 	bl	8012288 <__assert_func>
 80114ac:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80114b0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80114b4:	b10d      	cbz	r5, 80114ba <__d2b+0x32>
 80114b6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80114ba:	9301      	str	r3, [sp, #4]
 80114bc:	f1b8 0300 	subs.w	r3, r8, #0
 80114c0:	d023      	beq.n	801150a <__d2b+0x82>
 80114c2:	4668      	mov	r0, sp
 80114c4:	9300      	str	r3, [sp, #0]
 80114c6:	f7ff fd0c 	bl	8010ee2 <__lo0bits>
 80114ca:	e9dd 1200 	ldrd	r1, r2, [sp]
 80114ce:	b1d0      	cbz	r0, 8011506 <__d2b+0x7e>
 80114d0:	f1c0 0320 	rsb	r3, r0, #32
 80114d4:	fa02 f303 	lsl.w	r3, r2, r3
 80114d8:	430b      	orrs	r3, r1
 80114da:	40c2      	lsrs	r2, r0
 80114dc:	6163      	str	r3, [r4, #20]
 80114de:	9201      	str	r2, [sp, #4]
 80114e0:	9b01      	ldr	r3, [sp, #4]
 80114e2:	61a3      	str	r3, [r4, #24]
 80114e4:	2b00      	cmp	r3, #0
 80114e6:	bf0c      	ite	eq
 80114e8:	2201      	moveq	r2, #1
 80114ea:	2202      	movne	r2, #2
 80114ec:	6122      	str	r2, [r4, #16]
 80114ee:	b1a5      	cbz	r5, 801151a <__d2b+0x92>
 80114f0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80114f4:	4405      	add	r5, r0
 80114f6:	603d      	str	r5, [r7, #0]
 80114f8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80114fc:	6030      	str	r0, [r6, #0]
 80114fe:	4620      	mov	r0, r4
 8011500:	b003      	add	sp, #12
 8011502:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011506:	6161      	str	r1, [r4, #20]
 8011508:	e7ea      	b.n	80114e0 <__d2b+0x58>
 801150a:	a801      	add	r0, sp, #4
 801150c:	f7ff fce9 	bl	8010ee2 <__lo0bits>
 8011510:	9b01      	ldr	r3, [sp, #4]
 8011512:	6163      	str	r3, [r4, #20]
 8011514:	3020      	adds	r0, #32
 8011516:	2201      	movs	r2, #1
 8011518:	e7e8      	b.n	80114ec <__d2b+0x64>
 801151a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801151e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8011522:	6038      	str	r0, [r7, #0]
 8011524:	6918      	ldr	r0, [r3, #16]
 8011526:	f7ff fcbd 	bl	8010ea4 <__hi0bits>
 801152a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801152e:	e7e5      	b.n	80114fc <__d2b+0x74>
 8011530:	08012ea3 	.word	0x08012ea3
 8011534:	08012f14 	.word	0x08012f14

08011538 <__ratio>:
 8011538:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801153c:	4688      	mov	r8, r1
 801153e:	4669      	mov	r1, sp
 8011540:	4681      	mov	r9, r0
 8011542:	f7ff ff57 	bl	80113f4 <__b2d>
 8011546:	a901      	add	r1, sp, #4
 8011548:	4640      	mov	r0, r8
 801154a:	ec55 4b10 	vmov	r4, r5, d0
 801154e:	f7ff ff51 	bl	80113f4 <__b2d>
 8011552:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8011556:	f8d9 2010 	ldr.w	r2, [r9, #16]
 801155a:	1ad2      	subs	r2, r2, r3
 801155c:	e9dd 3100 	ldrd	r3, r1, [sp]
 8011560:	1a5b      	subs	r3, r3, r1
 8011562:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 8011566:	ec57 6b10 	vmov	r6, r7, d0
 801156a:	2b00      	cmp	r3, #0
 801156c:	bfd6      	itet	le
 801156e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8011572:	462a      	movgt	r2, r5
 8011574:	463a      	movle	r2, r7
 8011576:	46ab      	mov	fp, r5
 8011578:	46a2      	mov	sl, r4
 801157a:	bfce      	itee	gt
 801157c:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8011580:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 8011584:	ee00 3a90 	vmovle	s1, r3
 8011588:	ec4b ab17 	vmov	d7, sl, fp
 801158c:	ee87 0b00 	vdiv.f64	d0, d7, d0
 8011590:	b003      	add	sp, #12
 8011592:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011596 <__copybits>:
 8011596:	3901      	subs	r1, #1
 8011598:	b570      	push	{r4, r5, r6, lr}
 801159a:	1149      	asrs	r1, r1, #5
 801159c:	6914      	ldr	r4, [r2, #16]
 801159e:	3101      	adds	r1, #1
 80115a0:	f102 0314 	add.w	r3, r2, #20
 80115a4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80115a8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80115ac:	1f05      	subs	r5, r0, #4
 80115ae:	42a3      	cmp	r3, r4
 80115b0:	d30c      	bcc.n	80115cc <__copybits+0x36>
 80115b2:	1aa3      	subs	r3, r4, r2
 80115b4:	3b11      	subs	r3, #17
 80115b6:	f023 0303 	bic.w	r3, r3, #3
 80115ba:	3211      	adds	r2, #17
 80115bc:	42a2      	cmp	r2, r4
 80115be:	bf88      	it	hi
 80115c0:	2300      	movhi	r3, #0
 80115c2:	4418      	add	r0, r3
 80115c4:	2300      	movs	r3, #0
 80115c6:	4288      	cmp	r0, r1
 80115c8:	d305      	bcc.n	80115d6 <__copybits+0x40>
 80115ca:	bd70      	pop	{r4, r5, r6, pc}
 80115cc:	f853 6b04 	ldr.w	r6, [r3], #4
 80115d0:	f845 6f04 	str.w	r6, [r5, #4]!
 80115d4:	e7eb      	b.n	80115ae <__copybits+0x18>
 80115d6:	f840 3b04 	str.w	r3, [r0], #4
 80115da:	e7f4      	b.n	80115c6 <__copybits+0x30>

080115dc <__any_on>:
 80115dc:	f100 0214 	add.w	r2, r0, #20
 80115e0:	6900      	ldr	r0, [r0, #16]
 80115e2:	114b      	asrs	r3, r1, #5
 80115e4:	4298      	cmp	r0, r3
 80115e6:	b510      	push	{r4, lr}
 80115e8:	db11      	blt.n	801160e <__any_on+0x32>
 80115ea:	dd0a      	ble.n	8011602 <__any_on+0x26>
 80115ec:	f011 011f 	ands.w	r1, r1, #31
 80115f0:	d007      	beq.n	8011602 <__any_on+0x26>
 80115f2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80115f6:	fa24 f001 	lsr.w	r0, r4, r1
 80115fa:	fa00 f101 	lsl.w	r1, r0, r1
 80115fe:	428c      	cmp	r4, r1
 8011600:	d10b      	bne.n	801161a <__any_on+0x3e>
 8011602:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011606:	4293      	cmp	r3, r2
 8011608:	d803      	bhi.n	8011612 <__any_on+0x36>
 801160a:	2000      	movs	r0, #0
 801160c:	bd10      	pop	{r4, pc}
 801160e:	4603      	mov	r3, r0
 8011610:	e7f7      	b.n	8011602 <__any_on+0x26>
 8011612:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011616:	2900      	cmp	r1, #0
 8011618:	d0f5      	beq.n	8011606 <__any_on+0x2a>
 801161a:	2001      	movs	r0, #1
 801161c:	e7f6      	b.n	801160c <__any_on+0x30>
	...

08011620 <_strtol_l.constprop.0>:
 8011620:	2b24      	cmp	r3, #36	@ 0x24
 8011622:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011626:	4686      	mov	lr, r0
 8011628:	4690      	mov	r8, r2
 801162a:	d801      	bhi.n	8011630 <_strtol_l.constprop.0+0x10>
 801162c:	2b01      	cmp	r3, #1
 801162e:	d106      	bne.n	801163e <_strtol_l.constprop.0+0x1e>
 8011630:	f7fe f984 	bl	800f93c <__errno>
 8011634:	2316      	movs	r3, #22
 8011636:	6003      	str	r3, [r0, #0]
 8011638:	2000      	movs	r0, #0
 801163a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801163e:	4834      	ldr	r0, [pc, #208]	@ (8011710 <_strtol_l.constprop.0+0xf0>)
 8011640:	460d      	mov	r5, r1
 8011642:	462a      	mov	r2, r5
 8011644:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011648:	5d06      	ldrb	r6, [r0, r4]
 801164a:	f016 0608 	ands.w	r6, r6, #8
 801164e:	d1f8      	bne.n	8011642 <_strtol_l.constprop.0+0x22>
 8011650:	2c2d      	cmp	r4, #45	@ 0x2d
 8011652:	d12d      	bne.n	80116b0 <_strtol_l.constprop.0+0x90>
 8011654:	782c      	ldrb	r4, [r5, #0]
 8011656:	2601      	movs	r6, #1
 8011658:	1c95      	adds	r5, r2, #2
 801165a:	f033 0210 	bics.w	r2, r3, #16
 801165e:	d109      	bne.n	8011674 <_strtol_l.constprop.0+0x54>
 8011660:	2c30      	cmp	r4, #48	@ 0x30
 8011662:	d12a      	bne.n	80116ba <_strtol_l.constprop.0+0x9a>
 8011664:	782a      	ldrb	r2, [r5, #0]
 8011666:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801166a:	2a58      	cmp	r2, #88	@ 0x58
 801166c:	d125      	bne.n	80116ba <_strtol_l.constprop.0+0x9a>
 801166e:	786c      	ldrb	r4, [r5, #1]
 8011670:	2310      	movs	r3, #16
 8011672:	3502      	adds	r5, #2
 8011674:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8011678:	f10c 3cff 	add.w	ip, ip, #4294967295
 801167c:	2200      	movs	r2, #0
 801167e:	fbbc f9f3 	udiv	r9, ip, r3
 8011682:	4610      	mov	r0, r2
 8011684:	fb03 ca19 	mls	sl, r3, r9, ip
 8011688:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 801168c:	2f09      	cmp	r7, #9
 801168e:	d81b      	bhi.n	80116c8 <_strtol_l.constprop.0+0xa8>
 8011690:	463c      	mov	r4, r7
 8011692:	42a3      	cmp	r3, r4
 8011694:	dd27      	ble.n	80116e6 <_strtol_l.constprop.0+0xc6>
 8011696:	1c57      	adds	r7, r2, #1
 8011698:	d007      	beq.n	80116aa <_strtol_l.constprop.0+0x8a>
 801169a:	4581      	cmp	r9, r0
 801169c:	d320      	bcc.n	80116e0 <_strtol_l.constprop.0+0xc0>
 801169e:	d101      	bne.n	80116a4 <_strtol_l.constprop.0+0x84>
 80116a0:	45a2      	cmp	sl, r4
 80116a2:	db1d      	blt.n	80116e0 <_strtol_l.constprop.0+0xc0>
 80116a4:	fb00 4003 	mla	r0, r0, r3, r4
 80116a8:	2201      	movs	r2, #1
 80116aa:	f815 4b01 	ldrb.w	r4, [r5], #1
 80116ae:	e7eb      	b.n	8011688 <_strtol_l.constprop.0+0x68>
 80116b0:	2c2b      	cmp	r4, #43	@ 0x2b
 80116b2:	bf04      	itt	eq
 80116b4:	782c      	ldrbeq	r4, [r5, #0]
 80116b6:	1c95      	addeq	r5, r2, #2
 80116b8:	e7cf      	b.n	801165a <_strtol_l.constprop.0+0x3a>
 80116ba:	2b00      	cmp	r3, #0
 80116bc:	d1da      	bne.n	8011674 <_strtol_l.constprop.0+0x54>
 80116be:	2c30      	cmp	r4, #48	@ 0x30
 80116c0:	bf0c      	ite	eq
 80116c2:	2308      	moveq	r3, #8
 80116c4:	230a      	movne	r3, #10
 80116c6:	e7d5      	b.n	8011674 <_strtol_l.constprop.0+0x54>
 80116c8:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80116cc:	2f19      	cmp	r7, #25
 80116ce:	d801      	bhi.n	80116d4 <_strtol_l.constprop.0+0xb4>
 80116d0:	3c37      	subs	r4, #55	@ 0x37
 80116d2:	e7de      	b.n	8011692 <_strtol_l.constprop.0+0x72>
 80116d4:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80116d8:	2f19      	cmp	r7, #25
 80116da:	d804      	bhi.n	80116e6 <_strtol_l.constprop.0+0xc6>
 80116dc:	3c57      	subs	r4, #87	@ 0x57
 80116de:	e7d8      	b.n	8011692 <_strtol_l.constprop.0+0x72>
 80116e0:	f04f 32ff 	mov.w	r2, #4294967295
 80116e4:	e7e1      	b.n	80116aa <_strtol_l.constprop.0+0x8a>
 80116e6:	1c53      	adds	r3, r2, #1
 80116e8:	d108      	bne.n	80116fc <_strtol_l.constprop.0+0xdc>
 80116ea:	2322      	movs	r3, #34	@ 0x22
 80116ec:	f8ce 3000 	str.w	r3, [lr]
 80116f0:	4660      	mov	r0, ip
 80116f2:	f1b8 0f00 	cmp.w	r8, #0
 80116f6:	d0a0      	beq.n	801163a <_strtol_l.constprop.0+0x1a>
 80116f8:	1e69      	subs	r1, r5, #1
 80116fa:	e006      	b.n	801170a <_strtol_l.constprop.0+0xea>
 80116fc:	b106      	cbz	r6, 8011700 <_strtol_l.constprop.0+0xe0>
 80116fe:	4240      	negs	r0, r0
 8011700:	f1b8 0f00 	cmp.w	r8, #0
 8011704:	d099      	beq.n	801163a <_strtol_l.constprop.0+0x1a>
 8011706:	2a00      	cmp	r2, #0
 8011708:	d1f6      	bne.n	80116f8 <_strtol_l.constprop.0+0xd8>
 801170a:	f8c8 1000 	str.w	r1, [r8]
 801170e:	e794      	b.n	801163a <_strtol_l.constprop.0+0x1a>
 8011710:	08013071 	.word	0x08013071

08011714 <_strtol_r>:
 8011714:	f7ff bf84 	b.w	8011620 <_strtol_l.constprop.0>

08011718 <__ascii_wctomb>:
 8011718:	4603      	mov	r3, r0
 801171a:	4608      	mov	r0, r1
 801171c:	b141      	cbz	r1, 8011730 <__ascii_wctomb+0x18>
 801171e:	2aff      	cmp	r2, #255	@ 0xff
 8011720:	d904      	bls.n	801172c <__ascii_wctomb+0x14>
 8011722:	228a      	movs	r2, #138	@ 0x8a
 8011724:	601a      	str	r2, [r3, #0]
 8011726:	f04f 30ff 	mov.w	r0, #4294967295
 801172a:	4770      	bx	lr
 801172c:	700a      	strb	r2, [r1, #0]
 801172e:	2001      	movs	r0, #1
 8011730:	4770      	bx	lr

08011732 <__ssputs_r>:
 8011732:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011736:	688e      	ldr	r6, [r1, #8]
 8011738:	461f      	mov	r7, r3
 801173a:	42be      	cmp	r6, r7
 801173c:	680b      	ldr	r3, [r1, #0]
 801173e:	4682      	mov	sl, r0
 8011740:	460c      	mov	r4, r1
 8011742:	4690      	mov	r8, r2
 8011744:	d82d      	bhi.n	80117a2 <__ssputs_r+0x70>
 8011746:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801174a:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801174e:	d026      	beq.n	801179e <__ssputs_r+0x6c>
 8011750:	6965      	ldr	r5, [r4, #20]
 8011752:	6909      	ldr	r1, [r1, #16]
 8011754:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011758:	eba3 0901 	sub.w	r9, r3, r1
 801175c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011760:	1c7b      	adds	r3, r7, #1
 8011762:	444b      	add	r3, r9
 8011764:	106d      	asrs	r5, r5, #1
 8011766:	429d      	cmp	r5, r3
 8011768:	bf38      	it	cc
 801176a:	461d      	movcc	r5, r3
 801176c:	0553      	lsls	r3, r2, #21
 801176e:	d527      	bpl.n	80117c0 <__ssputs_r+0x8e>
 8011770:	4629      	mov	r1, r5
 8011772:	f7fc fa89 	bl	800dc88 <_malloc_r>
 8011776:	4606      	mov	r6, r0
 8011778:	b360      	cbz	r0, 80117d4 <__ssputs_r+0xa2>
 801177a:	6921      	ldr	r1, [r4, #16]
 801177c:	464a      	mov	r2, r9
 801177e:	f7fe f90a 	bl	800f996 <memcpy>
 8011782:	89a3      	ldrh	r3, [r4, #12]
 8011784:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8011788:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801178c:	81a3      	strh	r3, [r4, #12]
 801178e:	6126      	str	r6, [r4, #16]
 8011790:	6165      	str	r5, [r4, #20]
 8011792:	444e      	add	r6, r9
 8011794:	eba5 0509 	sub.w	r5, r5, r9
 8011798:	6026      	str	r6, [r4, #0]
 801179a:	60a5      	str	r5, [r4, #8]
 801179c:	463e      	mov	r6, r7
 801179e:	42be      	cmp	r6, r7
 80117a0:	d900      	bls.n	80117a4 <__ssputs_r+0x72>
 80117a2:	463e      	mov	r6, r7
 80117a4:	6820      	ldr	r0, [r4, #0]
 80117a6:	4632      	mov	r2, r6
 80117a8:	4641      	mov	r1, r8
 80117aa:	f000 fd52 	bl	8012252 <memmove>
 80117ae:	68a3      	ldr	r3, [r4, #8]
 80117b0:	1b9b      	subs	r3, r3, r6
 80117b2:	60a3      	str	r3, [r4, #8]
 80117b4:	6823      	ldr	r3, [r4, #0]
 80117b6:	4433      	add	r3, r6
 80117b8:	6023      	str	r3, [r4, #0]
 80117ba:	2000      	movs	r0, #0
 80117bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80117c0:	462a      	mov	r2, r5
 80117c2:	f000 fd93 	bl	80122ec <_realloc_r>
 80117c6:	4606      	mov	r6, r0
 80117c8:	2800      	cmp	r0, #0
 80117ca:	d1e0      	bne.n	801178e <__ssputs_r+0x5c>
 80117cc:	6921      	ldr	r1, [r4, #16]
 80117ce:	4650      	mov	r0, sl
 80117d0:	f7fe fee0 	bl	8010594 <_free_r>
 80117d4:	230c      	movs	r3, #12
 80117d6:	f8ca 3000 	str.w	r3, [sl]
 80117da:	89a3      	ldrh	r3, [r4, #12]
 80117dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80117e0:	81a3      	strh	r3, [r4, #12]
 80117e2:	f04f 30ff 	mov.w	r0, #4294967295
 80117e6:	e7e9      	b.n	80117bc <__ssputs_r+0x8a>

080117e8 <_svfiprintf_r>:
 80117e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80117ec:	4698      	mov	r8, r3
 80117ee:	898b      	ldrh	r3, [r1, #12]
 80117f0:	061b      	lsls	r3, r3, #24
 80117f2:	b09d      	sub	sp, #116	@ 0x74
 80117f4:	4607      	mov	r7, r0
 80117f6:	460d      	mov	r5, r1
 80117f8:	4614      	mov	r4, r2
 80117fa:	d510      	bpl.n	801181e <_svfiprintf_r+0x36>
 80117fc:	690b      	ldr	r3, [r1, #16]
 80117fe:	b973      	cbnz	r3, 801181e <_svfiprintf_r+0x36>
 8011800:	2140      	movs	r1, #64	@ 0x40
 8011802:	f7fc fa41 	bl	800dc88 <_malloc_r>
 8011806:	6028      	str	r0, [r5, #0]
 8011808:	6128      	str	r0, [r5, #16]
 801180a:	b930      	cbnz	r0, 801181a <_svfiprintf_r+0x32>
 801180c:	230c      	movs	r3, #12
 801180e:	603b      	str	r3, [r7, #0]
 8011810:	f04f 30ff 	mov.w	r0, #4294967295
 8011814:	b01d      	add	sp, #116	@ 0x74
 8011816:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801181a:	2340      	movs	r3, #64	@ 0x40
 801181c:	616b      	str	r3, [r5, #20]
 801181e:	2300      	movs	r3, #0
 8011820:	9309      	str	r3, [sp, #36]	@ 0x24
 8011822:	2320      	movs	r3, #32
 8011824:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011828:	f8cd 800c 	str.w	r8, [sp, #12]
 801182c:	2330      	movs	r3, #48	@ 0x30
 801182e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80119cc <_svfiprintf_r+0x1e4>
 8011832:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011836:	f04f 0901 	mov.w	r9, #1
 801183a:	4623      	mov	r3, r4
 801183c:	469a      	mov	sl, r3
 801183e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011842:	b10a      	cbz	r2, 8011848 <_svfiprintf_r+0x60>
 8011844:	2a25      	cmp	r2, #37	@ 0x25
 8011846:	d1f9      	bne.n	801183c <_svfiprintf_r+0x54>
 8011848:	ebba 0b04 	subs.w	fp, sl, r4
 801184c:	d00b      	beq.n	8011866 <_svfiprintf_r+0x7e>
 801184e:	465b      	mov	r3, fp
 8011850:	4622      	mov	r2, r4
 8011852:	4629      	mov	r1, r5
 8011854:	4638      	mov	r0, r7
 8011856:	f7ff ff6c 	bl	8011732 <__ssputs_r>
 801185a:	3001      	adds	r0, #1
 801185c:	f000 80a7 	beq.w	80119ae <_svfiprintf_r+0x1c6>
 8011860:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011862:	445a      	add	r2, fp
 8011864:	9209      	str	r2, [sp, #36]	@ 0x24
 8011866:	f89a 3000 	ldrb.w	r3, [sl]
 801186a:	2b00      	cmp	r3, #0
 801186c:	f000 809f 	beq.w	80119ae <_svfiprintf_r+0x1c6>
 8011870:	2300      	movs	r3, #0
 8011872:	f04f 32ff 	mov.w	r2, #4294967295
 8011876:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801187a:	f10a 0a01 	add.w	sl, sl, #1
 801187e:	9304      	str	r3, [sp, #16]
 8011880:	9307      	str	r3, [sp, #28]
 8011882:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011886:	931a      	str	r3, [sp, #104]	@ 0x68
 8011888:	4654      	mov	r4, sl
 801188a:	2205      	movs	r2, #5
 801188c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011890:	484e      	ldr	r0, [pc, #312]	@ (80119cc <_svfiprintf_r+0x1e4>)
 8011892:	f7ee fd3d 	bl	8000310 <memchr>
 8011896:	9a04      	ldr	r2, [sp, #16]
 8011898:	b9d8      	cbnz	r0, 80118d2 <_svfiprintf_r+0xea>
 801189a:	06d0      	lsls	r0, r2, #27
 801189c:	bf44      	itt	mi
 801189e:	2320      	movmi	r3, #32
 80118a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80118a4:	0711      	lsls	r1, r2, #28
 80118a6:	bf44      	itt	mi
 80118a8:	232b      	movmi	r3, #43	@ 0x2b
 80118aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80118ae:	f89a 3000 	ldrb.w	r3, [sl]
 80118b2:	2b2a      	cmp	r3, #42	@ 0x2a
 80118b4:	d015      	beq.n	80118e2 <_svfiprintf_r+0xfa>
 80118b6:	9a07      	ldr	r2, [sp, #28]
 80118b8:	4654      	mov	r4, sl
 80118ba:	2000      	movs	r0, #0
 80118bc:	f04f 0c0a 	mov.w	ip, #10
 80118c0:	4621      	mov	r1, r4
 80118c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80118c6:	3b30      	subs	r3, #48	@ 0x30
 80118c8:	2b09      	cmp	r3, #9
 80118ca:	d94b      	bls.n	8011964 <_svfiprintf_r+0x17c>
 80118cc:	b1b0      	cbz	r0, 80118fc <_svfiprintf_r+0x114>
 80118ce:	9207      	str	r2, [sp, #28]
 80118d0:	e014      	b.n	80118fc <_svfiprintf_r+0x114>
 80118d2:	eba0 0308 	sub.w	r3, r0, r8
 80118d6:	fa09 f303 	lsl.w	r3, r9, r3
 80118da:	4313      	orrs	r3, r2
 80118dc:	9304      	str	r3, [sp, #16]
 80118de:	46a2      	mov	sl, r4
 80118e0:	e7d2      	b.n	8011888 <_svfiprintf_r+0xa0>
 80118e2:	9b03      	ldr	r3, [sp, #12]
 80118e4:	1d19      	adds	r1, r3, #4
 80118e6:	681b      	ldr	r3, [r3, #0]
 80118e8:	9103      	str	r1, [sp, #12]
 80118ea:	2b00      	cmp	r3, #0
 80118ec:	bfbb      	ittet	lt
 80118ee:	425b      	neglt	r3, r3
 80118f0:	f042 0202 	orrlt.w	r2, r2, #2
 80118f4:	9307      	strge	r3, [sp, #28]
 80118f6:	9307      	strlt	r3, [sp, #28]
 80118f8:	bfb8      	it	lt
 80118fa:	9204      	strlt	r2, [sp, #16]
 80118fc:	7823      	ldrb	r3, [r4, #0]
 80118fe:	2b2e      	cmp	r3, #46	@ 0x2e
 8011900:	d10a      	bne.n	8011918 <_svfiprintf_r+0x130>
 8011902:	7863      	ldrb	r3, [r4, #1]
 8011904:	2b2a      	cmp	r3, #42	@ 0x2a
 8011906:	d132      	bne.n	801196e <_svfiprintf_r+0x186>
 8011908:	9b03      	ldr	r3, [sp, #12]
 801190a:	1d1a      	adds	r2, r3, #4
 801190c:	681b      	ldr	r3, [r3, #0]
 801190e:	9203      	str	r2, [sp, #12]
 8011910:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011914:	3402      	adds	r4, #2
 8011916:	9305      	str	r3, [sp, #20]
 8011918:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80119dc <_svfiprintf_r+0x1f4>
 801191c:	7821      	ldrb	r1, [r4, #0]
 801191e:	2203      	movs	r2, #3
 8011920:	4650      	mov	r0, sl
 8011922:	f7ee fcf5 	bl	8000310 <memchr>
 8011926:	b138      	cbz	r0, 8011938 <_svfiprintf_r+0x150>
 8011928:	9b04      	ldr	r3, [sp, #16]
 801192a:	eba0 000a 	sub.w	r0, r0, sl
 801192e:	2240      	movs	r2, #64	@ 0x40
 8011930:	4082      	lsls	r2, r0
 8011932:	4313      	orrs	r3, r2
 8011934:	3401      	adds	r4, #1
 8011936:	9304      	str	r3, [sp, #16]
 8011938:	f814 1b01 	ldrb.w	r1, [r4], #1
 801193c:	4824      	ldr	r0, [pc, #144]	@ (80119d0 <_svfiprintf_r+0x1e8>)
 801193e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011942:	2206      	movs	r2, #6
 8011944:	f7ee fce4 	bl	8000310 <memchr>
 8011948:	2800      	cmp	r0, #0
 801194a:	d036      	beq.n	80119ba <_svfiprintf_r+0x1d2>
 801194c:	4b21      	ldr	r3, [pc, #132]	@ (80119d4 <_svfiprintf_r+0x1ec>)
 801194e:	bb1b      	cbnz	r3, 8011998 <_svfiprintf_r+0x1b0>
 8011950:	9b03      	ldr	r3, [sp, #12]
 8011952:	3307      	adds	r3, #7
 8011954:	f023 0307 	bic.w	r3, r3, #7
 8011958:	3308      	adds	r3, #8
 801195a:	9303      	str	r3, [sp, #12]
 801195c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801195e:	4433      	add	r3, r6
 8011960:	9309      	str	r3, [sp, #36]	@ 0x24
 8011962:	e76a      	b.n	801183a <_svfiprintf_r+0x52>
 8011964:	fb0c 3202 	mla	r2, ip, r2, r3
 8011968:	460c      	mov	r4, r1
 801196a:	2001      	movs	r0, #1
 801196c:	e7a8      	b.n	80118c0 <_svfiprintf_r+0xd8>
 801196e:	2300      	movs	r3, #0
 8011970:	3401      	adds	r4, #1
 8011972:	9305      	str	r3, [sp, #20]
 8011974:	4619      	mov	r1, r3
 8011976:	f04f 0c0a 	mov.w	ip, #10
 801197a:	4620      	mov	r0, r4
 801197c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011980:	3a30      	subs	r2, #48	@ 0x30
 8011982:	2a09      	cmp	r2, #9
 8011984:	d903      	bls.n	801198e <_svfiprintf_r+0x1a6>
 8011986:	2b00      	cmp	r3, #0
 8011988:	d0c6      	beq.n	8011918 <_svfiprintf_r+0x130>
 801198a:	9105      	str	r1, [sp, #20]
 801198c:	e7c4      	b.n	8011918 <_svfiprintf_r+0x130>
 801198e:	fb0c 2101 	mla	r1, ip, r1, r2
 8011992:	4604      	mov	r4, r0
 8011994:	2301      	movs	r3, #1
 8011996:	e7f0      	b.n	801197a <_svfiprintf_r+0x192>
 8011998:	ab03      	add	r3, sp, #12
 801199a:	9300      	str	r3, [sp, #0]
 801199c:	462a      	mov	r2, r5
 801199e:	4b0e      	ldr	r3, [pc, #56]	@ (80119d8 <_svfiprintf_r+0x1f0>)
 80119a0:	a904      	add	r1, sp, #16
 80119a2:	4638      	mov	r0, r7
 80119a4:	f7fd f844 	bl	800ea30 <_printf_float>
 80119a8:	1c42      	adds	r2, r0, #1
 80119aa:	4606      	mov	r6, r0
 80119ac:	d1d6      	bne.n	801195c <_svfiprintf_r+0x174>
 80119ae:	89ab      	ldrh	r3, [r5, #12]
 80119b0:	065b      	lsls	r3, r3, #25
 80119b2:	f53f af2d 	bmi.w	8011810 <_svfiprintf_r+0x28>
 80119b6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80119b8:	e72c      	b.n	8011814 <_svfiprintf_r+0x2c>
 80119ba:	ab03      	add	r3, sp, #12
 80119bc:	9300      	str	r3, [sp, #0]
 80119be:	462a      	mov	r2, r5
 80119c0:	4b05      	ldr	r3, [pc, #20]	@ (80119d8 <_svfiprintf_r+0x1f0>)
 80119c2:	a904      	add	r1, sp, #16
 80119c4:	4638      	mov	r0, r7
 80119c6:	f7fd fabb 	bl	800ef40 <_printf_i>
 80119ca:	e7ed      	b.n	80119a8 <_svfiprintf_r+0x1c0>
 80119cc:	08013171 	.word	0x08013171
 80119d0:	0801317b 	.word	0x0801317b
 80119d4:	0800ea31 	.word	0x0800ea31
 80119d8:	08011733 	.word	0x08011733
 80119dc:	08013177 	.word	0x08013177

080119e0 <_sungetc_r>:
 80119e0:	b538      	push	{r3, r4, r5, lr}
 80119e2:	1c4b      	adds	r3, r1, #1
 80119e4:	4614      	mov	r4, r2
 80119e6:	d103      	bne.n	80119f0 <_sungetc_r+0x10>
 80119e8:	f04f 35ff 	mov.w	r5, #4294967295
 80119ec:	4628      	mov	r0, r5
 80119ee:	bd38      	pop	{r3, r4, r5, pc}
 80119f0:	8993      	ldrh	r3, [r2, #12]
 80119f2:	f023 0320 	bic.w	r3, r3, #32
 80119f6:	8193      	strh	r3, [r2, #12]
 80119f8:	6853      	ldr	r3, [r2, #4]
 80119fa:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80119fc:	b2cd      	uxtb	r5, r1
 80119fe:	b18a      	cbz	r2, 8011a24 <_sungetc_r+0x44>
 8011a00:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8011a02:	429a      	cmp	r2, r3
 8011a04:	dd08      	ble.n	8011a18 <_sungetc_r+0x38>
 8011a06:	6823      	ldr	r3, [r4, #0]
 8011a08:	1e5a      	subs	r2, r3, #1
 8011a0a:	6022      	str	r2, [r4, #0]
 8011a0c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8011a10:	6863      	ldr	r3, [r4, #4]
 8011a12:	3301      	adds	r3, #1
 8011a14:	6063      	str	r3, [r4, #4]
 8011a16:	e7e9      	b.n	80119ec <_sungetc_r+0xc>
 8011a18:	4621      	mov	r1, r4
 8011a1a:	f000 fbe0 	bl	80121de <__submore>
 8011a1e:	2800      	cmp	r0, #0
 8011a20:	d0f1      	beq.n	8011a06 <_sungetc_r+0x26>
 8011a22:	e7e1      	b.n	80119e8 <_sungetc_r+0x8>
 8011a24:	6921      	ldr	r1, [r4, #16]
 8011a26:	6822      	ldr	r2, [r4, #0]
 8011a28:	b141      	cbz	r1, 8011a3c <_sungetc_r+0x5c>
 8011a2a:	4291      	cmp	r1, r2
 8011a2c:	d206      	bcs.n	8011a3c <_sungetc_r+0x5c>
 8011a2e:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8011a32:	42a9      	cmp	r1, r5
 8011a34:	d102      	bne.n	8011a3c <_sungetc_r+0x5c>
 8011a36:	3a01      	subs	r2, #1
 8011a38:	6022      	str	r2, [r4, #0]
 8011a3a:	e7ea      	b.n	8011a12 <_sungetc_r+0x32>
 8011a3c:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 8011a40:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011a44:	6363      	str	r3, [r4, #52]	@ 0x34
 8011a46:	2303      	movs	r3, #3
 8011a48:	63a3      	str	r3, [r4, #56]	@ 0x38
 8011a4a:	4623      	mov	r3, r4
 8011a4c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8011a50:	6023      	str	r3, [r4, #0]
 8011a52:	2301      	movs	r3, #1
 8011a54:	e7de      	b.n	8011a14 <_sungetc_r+0x34>

08011a56 <__ssrefill_r>:
 8011a56:	b510      	push	{r4, lr}
 8011a58:	460c      	mov	r4, r1
 8011a5a:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8011a5c:	b169      	cbz	r1, 8011a7a <__ssrefill_r+0x24>
 8011a5e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011a62:	4299      	cmp	r1, r3
 8011a64:	d001      	beq.n	8011a6a <__ssrefill_r+0x14>
 8011a66:	f7fe fd95 	bl	8010594 <_free_r>
 8011a6a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8011a6c:	6063      	str	r3, [r4, #4]
 8011a6e:	2000      	movs	r0, #0
 8011a70:	6360      	str	r0, [r4, #52]	@ 0x34
 8011a72:	b113      	cbz	r3, 8011a7a <__ssrefill_r+0x24>
 8011a74:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8011a76:	6023      	str	r3, [r4, #0]
 8011a78:	bd10      	pop	{r4, pc}
 8011a7a:	6923      	ldr	r3, [r4, #16]
 8011a7c:	6023      	str	r3, [r4, #0]
 8011a7e:	2300      	movs	r3, #0
 8011a80:	6063      	str	r3, [r4, #4]
 8011a82:	89a3      	ldrh	r3, [r4, #12]
 8011a84:	f043 0320 	orr.w	r3, r3, #32
 8011a88:	81a3      	strh	r3, [r4, #12]
 8011a8a:	f04f 30ff 	mov.w	r0, #4294967295
 8011a8e:	e7f3      	b.n	8011a78 <__ssrefill_r+0x22>

08011a90 <__ssvfiscanf_r>:
 8011a90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011a94:	460c      	mov	r4, r1
 8011a96:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8011a9a:	2100      	movs	r1, #0
 8011a9c:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8011aa0:	49a5      	ldr	r1, [pc, #660]	@ (8011d38 <__ssvfiscanf_r+0x2a8>)
 8011aa2:	91a0      	str	r1, [sp, #640]	@ 0x280
 8011aa4:	f10d 0804 	add.w	r8, sp, #4
 8011aa8:	49a4      	ldr	r1, [pc, #656]	@ (8011d3c <__ssvfiscanf_r+0x2ac>)
 8011aaa:	4fa5      	ldr	r7, [pc, #660]	@ (8011d40 <__ssvfiscanf_r+0x2b0>)
 8011aac:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8011ab0:	4606      	mov	r6, r0
 8011ab2:	91a1      	str	r1, [sp, #644]	@ 0x284
 8011ab4:	9300      	str	r3, [sp, #0]
 8011ab6:	7813      	ldrb	r3, [r2, #0]
 8011ab8:	2b00      	cmp	r3, #0
 8011aba:	f000 8158 	beq.w	8011d6e <__ssvfiscanf_r+0x2de>
 8011abe:	5cf9      	ldrb	r1, [r7, r3]
 8011ac0:	f011 0108 	ands.w	r1, r1, #8
 8011ac4:	f102 0501 	add.w	r5, r2, #1
 8011ac8:	d019      	beq.n	8011afe <__ssvfiscanf_r+0x6e>
 8011aca:	6863      	ldr	r3, [r4, #4]
 8011acc:	2b00      	cmp	r3, #0
 8011ace:	dd0f      	ble.n	8011af0 <__ssvfiscanf_r+0x60>
 8011ad0:	6823      	ldr	r3, [r4, #0]
 8011ad2:	781a      	ldrb	r2, [r3, #0]
 8011ad4:	5cba      	ldrb	r2, [r7, r2]
 8011ad6:	0712      	lsls	r2, r2, #28
 8011ad8:	d401      	bmi.n	8011ade <__ssvfiscanf_r+0x4e>
 8011ada:	462a      	mov	r2, r5
 8011adc:	e7eb      	b.n	8011ab6 <__ssvfiscanf_r+0x26>
 8011ade:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8011ae0:	3201      	adds	r2, #1
 8011ae2:	9245      	str	r2, [sp, #276]	@ 0x114
 8011ae4:	6862      	ldr	r2, [r4, #4]
 8011ae6:	3301      	adds	r3, #1
 8011ae8:	3a01      	subs	r2, #1
 8011aea:	6062      	str	r2, [r4, #4]
 8011aec:	6023      	str	r3, [r4, #0]
 8011aee:	e7ec      	b.n	8011aca <__ssvfiscanf_r+0x3a>
 8011af0:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8011af2:	4621      	mov	r1, r4
 8011af4:	4630      	mov	r0, r6
 8011af6:	4798      	blx	r3
 8011af8:	2800      	cmp	r0, #0
 8011afa:	d0e9      	beq.n	8011ad0 <__ssvfiscanf_r+0x40>
 8011afc:	e7ed      	b.n	8011ada <__ssvfiscanf_r+0x4a>
 8011afe:	2b25      	cmp	r3, #37	@ 0x25
 8011b00:	d012      	beq.n	8011b28 <__ssvfiscanf_r+0x98>
 8011b02:	4699      	mov	r9, r3
 8011b04:	6863      	ldr	r3, [r4, #4]
 8011b06:	2b00      	cmp	r3, #0
 8011b08:	f340 8093 	ble.w	8011c32 <__ssvfiscanf_r+0x1a2>
 8011b0c:	6822      	ldr	r2, [r4, #0]
 8011b0e:	7813      	ldrb	r3, [r2, #0]
 8011b10:	454b      	cmp	r3, r9
 8011b12:	f040 812c 	bne.w	8011d6e <__ssvfiscanf_r+0x2de>
 8011b16:	6863      	ldr	r3, [r4, #4]
 8011b18:	3b01      	subs	r3, #1
 8011b1a:	6063      	str	r3, [r4, #4]
 8011b1c:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8011b1e:	3201      	adds	r2, #1
 8011b20:	3301      	adds	r3, #1
 8011b22:	6022      	str	r2, [r4, #0]
 8011b24:	9345      	str	r3, [sp, #276]	@ 0x114
 8011b26:	e7d8      	b.n	8011ada <__ssvfiscanf_r+0x4a>
 8011b28:	9141      	str	r1, [sp, #260]	@ 0x104
 8011b2a:	9143      	str	r1, [sp, #268]	@ 0x10c
 8011b2c:	7853      	ldrb	r3, [r2, #1]
 8011b2e:	2b2a      	cmp	r3, #42	@ 0x2a
 8011b30:	bf02      	ittt	eq
 8011b32:	2310      	moveq	r3, #16
 8011b34:	1c95      	addeq	r5, r2, #2
 8011b36:	9341      	streq	r3, [sp, #260]	@ 0x104
 8011b38:	220a      	movs	r2, #10
 8011b3a:	46a9      	mov	r9, r5
 8011b3c:	f819 1b01 	ldrb.w	r1, [r9], #1
 8011b40:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8011b44:	2b09      	cmp	r3, #9
 8011b46:	d91e      	bls.n	8011b86 <__ssvfiscanf_r+0xf6>
 8011b48:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 8011d44 <__ssvfiscanf_r+0x2b4>
 8011b4c:	2203      	movs	r2, #3
 8011b4e:	4650      	mov	r0, sl
 8011b50:	f7ee fbde 	bl	8000310 <memchr>
 8011b54:	b138      	cbz	r0, 8011b66 <__ssvfiscanf_r+0xd6>
 8011b56:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8011b58:	eba0 000a 	sub.w	r0, r0, sl
 8011b5c:	2301      	movs	r3, #1
 8011b5e:	4083      	lsls	r3, r0
 8011b60:	4313      	orrs	r3, r2
 8011b62:	9341      	str	r3, [sp, #260]	@ 0x104
 8011b64:	464d      	mov	r5, r9
 8011b66:	f815 3b01 	ldrb.w	r3, [r5], #1
 8011b6a:	2b78      	cmp	r3, #120	@ 0x78
 8011b6c:	d806      	bhi.n	8011b7c <__ssvfiscanf_r+0xec>
 8011b6e:	2b57      	cmp	r3, #87	@ 0x57
 8011b70:	d810      	bhi.n	8011b94 <__ssvfiscanf_r+0x104>
 8011b72:	2b25      	cmp	r3, #37	@ 0x25
 8011b74:	d0c5      	beq.n	8011b02 <__ssvfiscanf_r+0x72>
 8011b76:	d857      	bhi.n	8011c28 <__ssvfiscanf_r+0x198>
 8011b78:	2b00      	cmp	r3, #0
 8011b7a:	d065      	beq.n	8011c48 <__ssvfiscanf_r+0x1b8>
 8011b7c:	2303      	movs	r3, #3
 8011b7e:	9347      	str	r3, [sp, #284]	@ 0x11c
 8011b80:	230a      	movs	r3, #10
 8011b82:	9342      	str	r3, [sp, #264]	@ 0x108
 8011b84:	e078      	b.n	8011c78 <__ssvfiscanf_r+0x1e8>
 8011b86:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8011b88:	fb02 1103 	mla	r1, r2, r3, r1
 8011b8c:	3930      	subs	r1, #48	@ 0x30
 8011b8e:	9143      	str	r1, [sp, #268]	@ 0x10c
 8011b90:	464d      	mov	r5, r9
 8011b92:	e7d2      	b.n	8011b3a <__ssvfiscanf_r+0xaa>
 8011b94:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8011b98:	2a20      	cmp	r2, #32
 8011b9a:	d8ef      	bhi.n	8011b7c <__ssvfiscanf_r+0xec>
 8011b9c:	a101      	add	r1, pc, #4	@ (adr r1, 8011ba4 <__ssvfiscanf_r+0x114>)
 8011b9e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8011ba2:	bf00      	nop
 8011ba4:	08011c57 	.word	0x08011c57
 8011ba8:	08011b7d 	.word	0x08011b7d
 8011bac:	08011b7d 	.word	0x08011b7d
 8011bb0:	08011cb1 	.word	0x08011cb1
 8011bb4:	08011b7d 	.word	0x08011b7d
 8011bb8:	08011b7d 	.word	0x08011b7d
 8011bbc:	08011b7d 	.word	0x08011b7d
 8011bc0:	08011b7d 	.word	0x08011b7d
 8011bc4:	08011b7d 	.word	0x08011b7d
 8011bc8:	08011b7d 	.word	0x08011b7d
 8011bcc:	08011b7d 	.word	0x08011b7d
 8011bd0:	08011cc7 	.word	0x08011cc7
 8011bd4:	08011cad 	.word	0x08011cad
 8011bd8:	08011c2f 	.word	0x08011c2f
 8011bdc:	08011c2f 	.word	0x08011c2f
 8011be0:	08011c2f 	.word	0x08011c2f
 8011be4:	08011b7d 	.word	0x08011b7d
 8011be8:	08011c69 	.word	0x08011c69
 8011bec:	08011b7d 	.word	0x08011b7d
 8011bf0:	08011b7d 	.word	0x08011b7d
 8011bf4:	08011b7d 	.word	0x08011b7d
 8011bf8:	08011b7d 	.word	0x08011b7d
 8011bfc:	08011cd7 	.word	0x08011cd7
 8011c00:	08011c71 	.word	0x08011c71
 8011c04:	08011c4f 	.word	0x08011c4f
 8011c08:	08011b7d 	.word	0x08011b7d
 8011c0c:	08011b7d 	.word	0x08011b7d
 8011c10:	08011cd3 	.word	0x08011cd3
 8011c14:	08011b7d 	.word	0x08011b7d
 8011c18:	08011cad 	.word	0x08011cad
 8011c1c:	08011b7d 	.word	0x08011b7d
 8011c20:	08011b7d 	.word	0x08011b7d
 8011c24:	08011c57 	.word	0x08011c57
 8011c28:	3b45      	subs	r3, #69	@ 0x45
 8011c2a:	2b02      	cmp	r3, #2
 8011c2c:	d8a6      	bhi.n	8011b7c <__ssvfiscanf_r+0xec>
 8011c2e:	2305      	movs	r3, #5
 8011c30:	e021      	b.n	8011c76 <__ssvfiscanf_r+0x1e6>
 8011c32:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8011c34:	4621      	mov	r1, r4
 8011c36:	4630      	mov	r0, r6
 8011c38:	4798      	blx	r3
 8011c3a:	2800      	cmp	r0, #0
 8011c3c:	f43f af66 	beq.w	8011b0c <__ssvfiscanf_r+0x7c>
 8011c40:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8011c42:	2800      	cmp	r0, #0
 8011c44:	f040 808b 	bne.w	8011d5e <__ssvfiscanf_r+0x2ce>
 8011c48:	f04f 30ff 	mov.w	r0, #4294967295
 8011c4c:	e08b      	b.n	8011d66 <__ssvfiscanf_r+0x2d6>
 8011c4e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8011c50:	f042 0220 	orr.w	r2, r2, #32
 8011c54:	9241      	str	r2, [sp, #260]	@ 0x104
 8011c56:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8011c58:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8011c5c:	9241      	str	r2, [sp, #260]	@ 0x104
 8011c5e:	2210      	movs	r2, #16
 8011c60:	2b6e      	cmp	r3, #110	@ 0x6e
 8011c62:	9242      	str	r2, [sp, #264]	@ 0x108
 8011c64:	d902      	bls.n	8011c6c <__ssvfiscanf_r+0x1dc>
 8011c66:	e005      	b.n	8011c74 <__ssvfiscanf_r+0x1e4>
 8011c68:	2300      	movs	r3, #0
 8011c6a:	9342      	str	r3, [sp, #264]	@ 0x108
 8011c6c:	2303      	movs	r3, #3
 8011c6e:	e002      	b.n	8011c76 <__ssvfiscanf_r+0x1e6>
 8011c70:	2308      	movs	r3, #8
 8011c72:	9342      	str	r3, [sp, #264]	@ 0x108
 8011c74:	2304      	movs	r3, #4
 8011c76:	9347      	str	r3, [sp, #284]	@ 0x11c
 8011c78:	6863      	ldr	r3, [r4, #4]
 8011c7a:	2b00      	cmp	r3, #0
 8011c7c:	dd39      	ble.n	8011cf2 <__ssvfiscanf_r+0x262>
 8011c7e:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8011c80:	0659      	lsls	r1, r3, #25
 8011c82:	d404      	bmi.n	8011c8e <__ssvfiscanf_r+0x1fe>
 8011c84:	6823      	ldr	r3, [r4, #0]
 8011c86:	781a      	ldrb	r2, [r3, #0]
 8011c88:	5cba      	ldrb	r2, [r7, r2]
 8011c8a:	0712      	lsls	r2, r2, #28
 8011c8c:	d438      	bmi.n	8011d00 <__ssvfiscanf_r+0x270>
 8011c8e:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8011c90:	2b02      	cmp	r3, #2
 8011c92:	dc47      	bgt.n	8011d24 <__ssvfiscanf_r+0x294>
 8011c94:	466b      	mov	r3, sp
 8011c96:	4622      	mov	r2, r4
 8011c98:	a941      	add	r1, sp, #260	@ 0x104
 8011c9a:	4630      	mov	r0, r6
 8011c9c:	f000 f86c 	bl	8011d78 <_scanf_chars>
 8011ca0:	2801      	cmp	r0, #1
 8011ca2:	d064      	beq.n	8011d6e <__ssvfiscanf_r+0x2de>
 8011ca4:	2802      	cmp	r0, #2
 8011ca6:	f47f af18 	bne.w	8011ada <__ssvfiscanf_r+0x4a>
 8011caa:	e7c9      	b.n	8011c40 <__ssvfiscanf_r+0x1b0>
 8011cac:	220a      	movs	r2, #10
 8011cae:	e7d7      	b.n	8011c60 <__ssvfiscanf_r+0x1d0>
 8011cb0:	4629      	mov	r1, r5
 8011cb2:	4640      	mov	r0, r8
 8011cb4:	f000 fa5a 	bl	801216c <__sccl>
 8011cb8:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8011cba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011cbe:	9341      	str	r3, [sp, #260]	@ 0x104
 8011cc0:	4605      	mov	r5, r0
 8011cc2:	2301      	movs	r3, #1
 8011cc4:	e7d7      	b.n	8011c76 <__ssvfiscanf_r+0x1e6>
 8011cc6:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8011cc8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011ccc:	9341      	str	r3, [sp, #260]	@ 0x104
 8011cce:	2300      	movs	r3, #0
 8011cd0:	e7d1      	b.n	8011c76 <__ssvfiscanf_r+0x1e6>
 8011cd2:	2302      	movs	r3, #2
 8011cd4:	e7cf      	b.n	8011c76 <__ssvfiscanf_r+0x1e6>
 8011cd6:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8011cd8:	06c3      	lsls	r3, r0, #27
 8011cda:	f53f aefe 	bmi.w	8011ada <__ssvfiscanf_r+0x4a>
 8011cde:	9b00      	ldr	r3, [sp, #0]
 8011ce0:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8011ce2:	1d19      	adds	r1, r3, #4
 8011ce4:	9100      	str	r1, [sp, #0]
 8011ce6:	681b      	ldr	r3, [r3, #0]
 8011ce8:	07c0      	lsls	r0, r0, #31
 8011cea:	bf4c      	ite	mi
 8011cec:	801a      	strhmi	r2, [r3, #0]
 8011cee:	601a      	strpl	r2, [r3, #0]
 8011cf0:	e6f3      	b.n	8011ada <__ssvfiscanf_r+0x4a>
 8011cf2:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8011cf4:	4621      	mov	r1, r4
 8011cf6:	4630      	mov	r0, r6
 8011cf8:	4798      	blx	r3
 8011cfa:	2800      	cmp	r0, #0
 8011cfc:	d0bf      	beq.n	8011c7e <__ssvfiscanf_r+0x1ee>
 8011cfe:	e79f      	b.n	8011c40 <__ssvfiscanf_r+0x1b0>
 8011d00:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8011d02:	3201      	adds	r2, #1
 8011d04:	9245      	str	r2, [sp, #276]	@ 0x114
 8011d06:	6862      	ldr	r2, [r4, #4]
 8011d08:	3a01      	subs	r2, #1
 8011d0a:	2a00      	cmp	r2, #0
 8011d0c:	6062      	str	r2, [r4, #4]
 8011d0e:	dd02      	ble.n	8011d16 <__ssvfiscanf_r+0x286>
 8011d10:	3301      	adds	r3, #1
 8011d12:	6023      	str	r3, [r4, #0]
 8011d14:	e7b6      	b.n	8011c84 <__ssvfiscanf_r+0x1f4>
 8011d16:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8011d18:	4621      	mov	r1, r4
 8011d1a:	4630      	mov	r0, r6
 8011d1c:	4798      	blx	r3
 8011d1e:	2800      	cmp	r0, #0
 8011d20:	d0b0      	beq.n	8011c84 <__ssvfiscanf_r+0x1f4>
 8011d22:	e78d      	b.n	8011c40 <__ssvfiscanf_r+0x1b0>
 8011d24:	2b04      	cmp	r3, #4
 8011d26:	dc0f      	bgt.n	8011d48 <__ssvfiscanf_r+0x2b8>
 8011d28:	466b      	mov	r3, sp
 8011d2a:	4622      	mov	r2, r4
 8011d2c:	a941      	add	r1, sp, #260	@ 0x104
 8011d2e:	4630      	mov	r0, r6
 8011d30:	f000 f87c 	bl	8011e2c <_scanf_i>
 8011d34:	e7b4      	b.n	8011ca0 <__ssvfiscanf_r+0x210>
 8011d36:	bf00      	nop
 8011d38:	080119e1 	.word	0x080119e1
 8011d3c:	08011a57 	.word	0x08011a57
 8011d40:	08013071 	.word	0x08013071
 8011d44:	08013177 	.word	0x08013177
 8011d48:	4b0a      	ldr	r3, [pc, #40]	@ (8011d74 <__ssvfiscanf_r+0x2e4>)
 8011d4a:	2b00      	cmp	r3, #0
 8011d4c:	f43f aec5 	beq.w	8011ada <__ssvfiscanf_r+0x4a>
 8011d50:	466b      	mov	r3, sp
 8011d52:	4622      	mov	r2, r4
 8011d54:	a941      	add	r1, sp, #260	@ 0x104
 8011d56:	4630      	mov	r0, r6
 8011d58:	f7fd fa12 	bl	800f180 <_scanf_float>
 8011d5c:	e7a0      	b.n	8011ca0 <__ssvfiscanf_r+0x210>
 8011d5e:	89a3      	ldrh	r3, [r4, #12]
 8011d60:	065b      	lsls	r3, r3, #25
 8011d62:	f53f af71 	bmi.w	8011c48 <__ssvfiscanf_r+0x1b8>
 8011d66:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8011d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011d6e:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8011d70:	e7f9      	b.n	8011d66 <__ssvfiscanf_r+0x2d6>
 8011d72:	bf00      	nop
 8011d74:	0800f181 	.word	0x0800f181

08011d78 <_scanf_chars>:
 8011d78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011d7c:	4615      	mov	r5, r2
 8011d7e:	688a      	ldr	r2, [r1, #8]
 8011d80:	4680      	mov	r8, r0
 8011d82:	460c      	mov	r4, r1
 8011d84:	b932      	cbnz	r2, 8011d94 <_scanf_chars+0x1c>
 8011d86:	698a      	ldr	r2, [r1, #24]
 8011d88:	2a00      	cmp	r2, #0
 8011d8a:	bf14      	ite	ne
 8011d8c:	f04f 32ff 	movne.w	r2, #4294967295
 8011d90:	2201      	moveq	r2, #1
 8011d92:	608a      	str	r2, [r1, #8]
 8011d94:	6822      	ldr	r2, [r4, #0]
 8011d96:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8011e28 <_scanf_chars+0xb0>
 8011d9a:	06d1      	lsls	r1, r2, #27
 8011d9c:	bf5f      	itttt	pl
 8011d9e:	681a      	ldrpl	r2, [r3, #0]
 8011da0:	1d11      	addpl	r1, r2, #4
 8011da2:	6019      	strpl	r1, [r3, #0]
 8011da4:	6816      	ldrpl	r6, [r2, #0]
 8011da6:	2700      	movs	r7, #0
 8011da8:	69a0      	ldr	r0, [r4, #24]
 8011daa:	b188      	cbz	r0, 8011dd0 <_scanf_chars+0x58>
 8011dac:	2801      	cmp	r0, #1
 8011dae:	d107      	bne.n	8011dc0 <_scanf_chars+0x48>
 8011db0:	682b      	ldr	r3, [r5, #0]
 8011db2:	781a      	ldrb	r2, [r3, #0]
 8011db4:	6963      	ldr	r3, [r4, #20]
 8011db6:	5c9b      	ldrb	r3, [r3, r2]
 8011db8:	b953      	cbnz	r3, 8011dd0 <_scanf_chars+0x58>
 8011dba:	2f00      	cmp	r7, #0
 8011dbc:	d031      	beq.n	8011e22 <_scanf_chars+0xaa>
 8011dbe:	e022      	b.n	8011e06 <_scanf_chars+0x8e>
 8011dc0:	2802      	cmp	r0, #2
 8011dc2:	d120      	bne.n	8011e06 <_scanf_chars+0x8e>
 8011dc4:	682b      	ldr	r3, [r5, #0]
 8011dc6:	781b      	ldrb	r3, [r3, #0]
 8011dc8:	f819 3003 	ldrb.w	r3, [r9, r3]
 8011dcc:	071b      	lsls	r3, r3, #28
 8011dce:	d41a      	bmi.n	8011e06 <_scanf_chars+0x8e>
 8011dd0:	6823      	ldr	r3, [r4, #0]
 8011dd2:	06da      	lsls	r2, r3, #27
 8011dd4:	bf5e      	ittt	pl
 8011dd6:	682b      	ldrpl	r3, [r5, #0]
 8011dd8:	781b      	ldrbpl	r3, [r3, #0]
 8011dda:	f806 3b01 	strbpl.w	r3, [r6], #1
 8011dde:	682a      	ldr	r2, [r5, #0]
 8011de0:	686b      	ldr	r3, [r5, #4]
 8011de2:	3201      	adds	r2, #1
 8011de4:	602a      	str	r2, [r5, #0]
 8011de6:	68a2      	ldr	r2, [r4, #8]
 8011de8:	3b01      	subs	r3, #1
 8011dea:	3a01      	subs	r2, #1
 8011dec:	606b      	str	r3, [r5, #4]
 8011dee:	3701      	adds	r7, #1
 8011df0:	60a2      	str	r2, [r4, #8]
 8011df2:	b142      	cbz	r2, 8011e06 <_scanf_chars+0x8e>
 8011df4:	2b00      	cmp	r3, #0
 8011df6:	dcd7      	bgt.n	8011da8 <_scanf_chars+0x30>
 8011df8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8011dfc:	4629      	mov	r1, r5
 8011dfe:	4640      	mov	r0, r8
 8011e00:	4798      	blx	r3
 8011e02:	2800      	cmp	r0, #0
 8011e04:	d0d0      	beq.n	8011da8 <_scanf_chars+0x30>
 8011e06:	6823      	ldr	r3, [r4, #0]
 8011e08:	f013 0310 	ands.w	r3, r3, #16
 8011e0c:	d105      	bne.n	8011e1a <_scanf_chars+0xa2>
 8011e0e:	68e2      	ldr	r2, [r4, #12]
 8011e10:	3201      	adds	r2, #1
 8011e12:	60e2      	str	r2, [r4, #12]
 8011e14:	69a2      	ldr	r2, [r4, #24]
 8011e16:	b102      	cbz	r2, 8011e1a <_scanf_chars+0xa2>
 8011e18:	7033      	strb	r3, [r6, #0]
 8011e1a:	6923      	ldr	r3, [r4, #16]
 8011e1c:	443b      	add	r3, r7
 8011e1e:	6123      	str	r3, [r4, #16]
 8011e20:	2000      	movs	r0, #0
 8011e22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011e26:	bf00      	nop
 8011e28:	08013071 	.word	0x08013071

08011e2c <_scanf_i>:
 8011e2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e30:	4698      	mov	r8, r3
 8011e32:	4b74      	ldr	r3, [pc, #464]	@ (8012004 <_scanf_i+0x1d8>)
 8011e34:	460c      	mov	r4, r1
 8011e36:	4682      	mov	sl, r0
 8011e38:	4616      	mov	r6, r2
 8011e3a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8011e3e:	b087      	sub	sp, #28
 8011e40:	ab03      	add	r3, sp, #12
 8011e42:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8011e46:	4b70      	ldr	r3, [pc, #448]	@ (8012008 <_scanf_i+0x1dc>)
 8011e48:	69a1      	ldr	r1, [r4, #24]
 8011e4a:	4a70      	ldr	r2, [pc, #448]	@ (801200c <_scanf_i+0x1e0>)
 8011e4c:	2903      	cmp	r1, #3
 8011e4e:	bf08      	it	eq
 8011e50:	461a      	moveq	r2, r3
 8011e52:	68a3      	ldr	r3, [r4, #8]
 8011e54:	9201      	str	r2, [sp, #4]
 8011e56:	1e5a      	subs	r2, r3, #1
 8011e58:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8011e5c:	bf88      	it	hi
 8011e5e:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8011e62:	4627      	mov	r7, r4
 8011e64:	bf82      	ittt	hi
 8011e66:	eb03 0905 	addhi.w	r9, r3, r5
 8011e6a:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8011e6e:	60a3      	strhi	r3, [r4, #8]
 8011e70:	f857 3b1c 	ldr.w	r3, [r7], #28
 8011e74:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8011e78:	bf98      	it	ls
 8011e7a:	f04f 0900 	movls.w	r9, #0
 8011e7e:	6023      	str	r3, [r4, #0]
 8011e80:	463d      	mov	r5, r7
 8011e82:	f04f 0b00 	mov.w	fp, #0
 8011e86:	6831      	ldr	r1, [r6, #0]
 8011e88:	ab03      	add	r3, sp, #12
 8011e8a:	7809      	ldrb	r1, [r1, #0]
 8011e8c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8011e90:	2202      	movs	r2, #2
 8011e92:	f7ee fa3d 	bl	8000310 <memchr>
 8011e96:	b328      	cbz	r0, 8011ee4 <_scanf_i+0xb8>
 8011e98:	f1bb 0f01 	cmp.w	fp, #1
 8011e9c:	d159      	bne.n	8011f52 <_scanf_i+0x126>
 8011e9e:	6862      	ldr	r2, [r4, #4]
 8011ea0:	b92a      	cbnz	r2, 8011eae <_scanf_i+0x82>
 8011ea2:	6822      	ldr	r2, [r4, #0]
 8011ea4:	2108      	movs	r1, #8
 8011ea6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8011eaa:	6061      	str	r1, [r4, #4]
 8011eac:	6022      	str	r2, [r4, #0]
 8011eae:	6822      	ldr	r2, [r4, #0]
 8011eb0:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8011eb4:	6022      	str	r2, [r4, #0]
 8011eb6:	68a2      	ldr	r2, [r4, #8]
 8011eb8:	1e51      	subs	r1, r2, #1
 8011eba:	60a1      	str	r1, [r4, #8]
 8011ebc:	b192      	cbz	r2, 8011ee4 <_scanf_i+0xb8>
 8011ebe:	6832      	ldr	r2, [r6, #0]
 8011ec0:	1c51      	adds	r1, r2, #1
 8011ec2:	6031      	str	r1, [r6, #0]
 8011ec4:	7812      	ldrb	r2, [r2, #0]
 8011ec6:	f805 2b01 	strb.w	r2, [r5], #1
 8011eca:	6872      	ldr	r2, [r6, #4]
 8011ecc:	3a01      	subs	r2, #1
 8011ece:	2a00      	cmp	r2, #0
 8011ed0:	6072      	str	r2, [r6, #4]
 8011ed2:	dc07      	bgt.n	8011ee4 <_scanf_i+0xb8>
 8011ed4:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8011ed8:	4631      	mov	r1, r6
 8011eda:	4650      	mov	r0, sl
 8011edc:	4790      	blx	r2
 8011ede:	2800      	cmp	r0, #0
 8011ee0:	f040 8085 	bne.w	8011fee <_scanf_i+0x1c2>
 8011ee4:	f10b 0b01 	add.w	fp, fp, #1
 8011ee8:	f1bb 0f03 	cmp.w	fp, #3
 8011eec:	d1cb      	bne.n	8011e86 <_scanf_i+0x5a>
 8011eee:	6863      	ldr	r3, [r4, #4]
 8011ef0:	b90b      	cbnz	r3, 8011ef6 <_scanf_i+0xca>
 8011ef2:	230a      	movs	r3, #10
 8011ef4:	6063      	str	r3, [r4, #4]
 8011ef6:	6863      	ldr	r3, [r4, #4]
 8011ef8:	4945      	ldr	r1, [pc, #276]	@ (8012010 <_scanf_i+0x1e4>)
 8011efa:	6960      	ldr	r0, [r4, #20]
 8011efc:	1ac9      	subs	r1, r1, r3
 8011efe:	f000 f935 	bl	801216c <__sccl>
 8011f02:	f04f 0b00 	mov.w	fp, #0
 8011f06:	68a3      	ldr	r3, [r4, #8]
 8011f08:	6822      	ldr	r2, [r4, #0]
 8011f0a:	2b00      	cmp	r3, #0
 8011f0c:	d03d      	beq.n	8011f8a <_scanf_i+0x15e>
 8011f0e:	6831      	ldr	r1, [r6, #0]
 8011f10:	6960      	ldr	r0, [r4, #20]
 8011f12:	f891 c000 	ldrb.w	ip, [r1]
 8011f16:	f810 000c 	ldrb.w	r0, [r0, ip]
 8011f1a:	2800      	cmp	r0, #0
 8011f1c:	d035      	beq.n	8011f8a <_scanf_i+0x15e>
 8011f1e:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8011f22:	d124      	bne.n	8011f6e <_scanf_i+0x142>
 8011f24:	0510      	lsls	r0, r2, #20
 8011f26:	d522      	bpl.n	8011f6e <_scanf_i+0x142>
 8011f28:	f10b 0b01 	add.w	fp, fp, #1
 8011f2c:	f1b9 0f00 	cmp.w	r9, #0
 8011f30:	d003      	beq.n	8011f3a <_scanf_i+0x10e>
 8011f32:	3301      	adds	r3, #1
 8011f34:	f109 39ff 	add.w	r9, r9, #4294967295
 8011f38:	60a3      	str	r3, [r4, #8]
 8011f3a:	6873      	ldr	r3, [r6, #4]
 8011f3c:	3b01      	subs	r3, #1
 8011f3e:	2b00      	cmp	r3, #0
 8011f40:	6073      	str	r3, [r6, #4]
 8011f42:	dd1b      	ble.n	8011f7c <_scanf_i+0x150>
 8011f44:	6833      	ldr	r3, [r6, #0]
 8011f46:	3301      	adds	r3, #1
 8011f48:	6033      	str	r3, [r6, #0]
 8011f4a:	68a3      	ldr	r3, [r4, #8]
 8011f4c:	3b01      	subs	r3, #1
 8011f4e:	60a3      	str	r3, [r4, #8]
 8011f50:	e7d9      	b.n	8011f06 <_scanf_i+0xda>
 8011f52:	f1bb 0f02 	cmp.w	fp, #2
 8011f56:	d1ae      	bne.n	8011eb6 <_scanf_i+0x8a>
 8011f58:	6822      	ldr	r2, [r4, #0]
 8011f5a:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8011f5e:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8011f62:	d1bf      	bne.n	8011ee4 <_scanf_i+0xb8>
 8011f64:	2110      	movs	r1, #16
 8011f66:	6061      	str	r1, [r4, #4]
 8011f68:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8011f6c:	e7a2      	b.n	8011eb4 <_scanf_i+0x88>
 8011f6e:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8011f72:	6022      	str	r2, [r4, #0]
 8011f74:	780b      	ldrb	r3, [r1, #0]
 8011f76:	f805 3b01 	strb.w	r3, [r5], #1
 8011f7a:	e7de      	b.n	8011f3a <_scanf_i+0x10e>
 8011f7c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8011f80:	4631      	mov	r1, r6
 8011f82:	4650      	mov	r0, sl
 8011f84:	4798      	blx	r3
 8011f86:	2800      	cmp	r0, #0
 8011f88:	d0df      	beq.n	8011f4a <_scanf_i+0x11e>
 8011f8a:	6823      	ldr	r3, [r4, #0]
 8011f8c:	05d9      	lsls	r1, r3, #23
 8011f8e:	d50d      	bpl.n	8011fac <_scanf_i+0x180>
 8011f90:	42bd      	cmp	r5, r7
 8011f92:	d909      	bls.n	8011fa8 <_scanf_i+0x17c>
 8011f94:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8011f98:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8011f9c:	4632      	mov	r2, r6
 8011f9e:	4650      	mov	r0, sl
 8011fa0:	4798      	blx	r3
 8011fa2:	f105 39ff 	add.w	r9, r5, #4294967295
 8011fa6:	464d      	mov	r5, r9
 8011fa8:	42bd      	cmp	r5, r7
 8011faa:	d028      	beq.n	8011ffe <_scanf_i+0x1d2>
 8011fac:	6822      	ldr	r2, [r4, #0]
 8011fae:	f012 0210 	ands.w	r2, r2, #16
 8011fb2:	d113      	bne.n	8011fdc <_scanf_i+0x1b0>
 8011fb4:	702a      	strb	r2, [r5, #0]
 8011fb6:	6863      	ldr	r3, [r4, #4]
 8011fb8:	9e01      	ldr	r6, [sp, #4]
 8011fba:	4639      	mov	r1, r7
 8011fbc:	4650      	mov	r0, sl
 8011fbe:	47b0      	blx	r6
 8011fc0:	f8d8 3000 	ldr.w	r3, [r8]
 8011fc4:	6821      	ldr	r1, [r4, #0]
 8011fc6:	1d1a      	adds	r2, r3, #4
 8011fc8:	f8c8 2000 	str.w	r2, [r8]
 8011fcc:	f011 0f20 	tst.w	r1, #32
 8011fd0:	681b      	ldr	r3, [r3, #0]
 8011fd2:	d00f      	beq.n	8011ff4 <_scanf_i+0x1c8>
 8011fd4:	6018      	str	r0, [r3, #0]
 8011fd6:	68e3      	ldr	r3, [r4, #12]
 8011fd8:	3301      	adds	r3, #1
 8011fda:	60e3      	str	r3, [r4, #12]
 8011fdc:	6923      	ldr	r3, [r4, #16]
 8011fde:	1bed      	subs	r5, r5, r7
 8011fe0:	445d      	add	r5, fp
 8011fe2:	442b      	add	r3, r5
 8011fe4:	6123      	str	r3, [r4, #16]
 8011fe6:	2000      	movs	r0, #0
 8011fe8:	b007      	add	sp, #28
 8011fea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011fee:	f04f 0b00 	mov.w	fp, #0
 8011ff2:	e7ca      	b.n	8011f8a <_scanf_i+0x15e>
 8011ff4:	07ca      	lsls	r2, r1, #31
 8011ff6:	bf4c      	ite	mi
 8011ff8:	8018      	strhmi	r0, [r3, #0]
 8011ffa:	6018      	strpl	r0, [r3, #0]
 8011ffc:	e7eb      	b.n	8011fd6 <_scanf_i+0x1aa>
 8011ffe:	2001      	movs	r0, #1
 8012000:	e7f2      	b.n	8011fe8 <_scanf_i+0x1bc>
 8012002:	bf00      	nop
 8012004:	08012d40 	.word	0x08012d40
 8012008:	08011715 	.word	0x08011715
 801200c:	08012425 	.word	0x08012425
 8012010:	08013192 	.word	0x08013192

08012014 <__sflush_r>:
 8012014:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8012018:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801201c:	0716      	lsls	r6, r2, #28
 801201e:	4605      	mov	r5, r0
 8012020:	460c      	mov	r4, r1
 8012022:	d454      	bmi.n	80120ce <__sflush_r+0xba>
 8012024:	684b      	ldr	r3, [r1, #4]
 8012026:	2b00      	cmp	r3, #0
 8012028:	dc02      	bgt.n	8012030 <__sflush_r+0x1c>
 801202a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801202c:	2b00      	cmp	r3, #0
 801202e:	dd48      	ble.n	80120c2 <__sflush_r+0xae>
 8012030:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012032:	2e00      	cmp	r6, #0
 8012034:	d045      	beq.n	80120c2 <__sflush_r+0xae>
 8012036:	2300      	movs	r3, #0
 8012038:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801203c:	682f      	ldr	r7, [r5, #0]
 801203e:	6a21      	ldr	r1, [r4, #32]
 8012040:	602b      	str	r3, [r5, #0]
 8012042:	d030      	beq.n	80120a6 <__sflush_r+0x92>
 8012044:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8012046:	89a3      	ldrh	r3, [r4, #12]
 8012048:	0759      	lsls	r1, r3, #29
 801204a:	d505      	bpl.n	8012058 <__sflush_r+0x44>
 801204c:	6863      	ldr	r3, [r4, #4]
 801204e:	1ad2      	subs	r2, r2, r3
 8012050:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8012052:	b10b      	cbz	r3, 8012058 <__sflush_r+0x44>
 8012054:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8012056:	1ad2      	subs	r2, r2, r3
 8012058:	2300      	movs	r3, #0
 801205a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801205c:	6a21      	ldr	r1, [r4, #32]
 801205e:	4628      	mov	r0, r5
 8012060:	47b0      	blx	r6
 8012062:	1c43      	adds	r3, r0, #1
 8012064:	89a3      	ldrh	r3, [r4, #12]
 8012066:	d106      	bne.n	8012076 <__sflush_r+0x62>
 8012068:	6829      	ldr	r1, [r5, #0]
 801206a:	291d      	cmp	r1, #29
 801206c:	d82b      	bhi.n	80120c6 <__sflush_r+0xb2>
 801206e:	4a2a      	ldr	r2, [pc, #168]	@ (8012118 <__sflush_r+0x104>)
 8012070:	410a      	asrs	r2, r1
 8012072:	07d6      	lsls	r6, r2, #31
 8012074:	d427      	bmi.n	80120c6 <__sflush_r+0xb2>
 8012076:	2200      	movs	r2, #0
 8012078:	6062      	str	r2, [r4, #4]
 801207a:	04d9      	lsls	r1, r3, #19
 801207c:	6922      	ldr	r2, [r4, #16]
 801207e:	6022      	str	r2, [r4, #0]
 8012080:	d504      	bpl.n	801208c <__sflush_r+0x78>
 8012082:	1c42      	adds	r2, r0, #1
 8012084:	d101      	bne.n	801208a <__sflush_r+0x76>
 8012086:	682b      	ldr	r3, [r5, #0]
 8012088:	b903      	cbnz	r3, 801208c <__sflush_r+0x78>
 801208a:	6560      	str	r0, [r4, #84]	@ 0x54
 801208c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801208e:	602f      	str	r7, [r5, #0]
 8012090:	b1b9      	cbz	r1, 80120c2 <__sflush_r+0xae>
 8012092:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012096:	4299      	cmp	r1, r3
 8012098:	d002      	beq.n	80120a0 <__sflush_r+0x8c>
 801209a:	4628      	mov	r0, r5
 801209c:	f7fe fa7a 	bl	8010594 <_free_r>
 80120a0:	2300      	movs	r3, #0
 80120a2:	6363      	str	r3, [r4, #52]	@ 0x34
 80120a4:	e00d      	b.n	80120c2 <__sflush_r+0xae>
 80120a6:	2301      	movs	r3, #1
 80120a8:	4628      	mov	r0, r5
 80120aa:	47b0      	blx	r6
 80120ac:	4602      	mov	r2, r0
 80120ae:	1c50      	adds	r0, r2, #1
 80120b0:	d1c9      	bne.n	8012046 <__sflush_r+0x32>
 80120b2:	682b      	ldr	r3, [r5, #0]
 80120b4:	2b00      	cmp	r3, #0
 80120b6:	d0c6      	beq.n	8012046 <__sflush_r+0x32>
 80120b8:	2b1d      	cmp	r3, #29
 80120ba:	d001      	beq.n	80120c0 <__sflush_r+0xac>
 80120bc:	2b16      	cmp	r3, #22
 80120be:	d11e      	bne.n	80120fe <__sflush_r+0xea>
 80120c0:	602f      	str	r7, [r5, #0]
 80120c2:	2000      	movs	r0, #0
 80120c4:	e022      	b.n	801210c <__sflush_r+0xf8>
 80120c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80120ca:	b21b      	sxth	r3, r3
 80120cc:	e01b      	b.n	8012106 <__sflush_r+0xf2>
 80120ce:	690f      	ldr	r7, [r1, #16]
 80120d0:	2f00      	cmp	r7, #0
 80120d2:	d0f6      	beq.n	80120c2 <__sflush_r+0xae>
 80120d4:	0793      	lsls	r3, r2, #30
 80120d6:	680e      	ldr	r6, [r1, #0]
 80120d8:	bf08      	it	eq
 80120da:	694b      	ldreq	r3, [r1, #20]
 80120dc:	600f      	str	r7, [r1, #0]
 80120de:	bf18      	it	ne
 80120e0:	2300      	movne	r3, #0
 80120e2:	eba6 0807 	sub.w	r8, r6, r7
 80120e6:	608b      	str	r3, [r1, #8]
 80120e8:	f1b8 0f00 	cmp.w	r8, #0
 80120ec:	dde9      	ble.n	80120c2 <__sflush_r+0xae>
 80120ee:	6a21      	ldr	r1, [r4, #32]
 80120f0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80120f2:	4643      	mov	r3, r8
 80120f4:	463a      	mov	r2, r7
 80120f6:	4628      	mov	r0, r5
 80120f8:	47b0      	blx	r6
 80120fa:	2800      	cmp	r0, #0
 80120fc:	dc08      	bgt.n	8012110 <__sflush_r+0xfc>
 80120fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012102:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012106:	81a3      	strh	r3, [r4, #12]
 8012108:	f04f 30ff 	mov.w	r0, #4294967295
 801210c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012110:	4407      	add	r7, r0
 8012112:	eba8 0800 	sub.w	r8, r8, r0
 8012116:	e7e7      	b.n	80120e8 <__sflush_r+0xd4>
 8012118:	dfbffffe 	.word	0xdfbffffe

0801211c <_fflush_r>:
 801211c:	b538      	push	{r3, r4, r5, lr}
 801211e:	690b      	ldr	r3, [r1, #16]
 8012120:	4605      	mov	r5, r0
 8012122:	460c      	mov	r4, r1
 8012124:	b913      	cbnz	r3, 801212c <_fflush_r+0x10>
 8012126:	2500      	movs	r5, #0
 8012128:	4628      	mov	r0, r5
 801212a:	bd38      	pop	{r3, r4, r5, pc}
 801212c:	b118      	cbz	r0, 8012136 <_fflush_r+0x1a>
 801212e:	6a03      	ldr	r3, [r0, #32]
 8012130:	b90b      	cbnz	r3, 8012136 <_fflush_r+0x1a>
 8012132:	f7fd fabd 	bl	800f6b0 <__sinit>
 8012136:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801213a:	2b00      	cmp	r3, #0
 801213c:	d0f3      	beq.n	8012126 <_fflush_r+0xa>
 801213e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8012140:	07d0      	lsls	r0, r2, #31
 8012142:	d404      	bmi.n	801214e <_fflush_r+0x32>
 8012144:	0599      	lsls	r1, r3, #22
 8012146:	d402      	bmi.n	801214e <_fflush_r+0x32>
 8012148:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801214a:	f7fd fc22 	bl	800f992 <__retarget_lock_acquire_recursive>
 801214e:	4628      	mov	r0, r5
 8012150:	4621      	mov	r1, r4
 8012152:	f7ff ff5f 	bl	8012014 <__sflush_r>
 8012156:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012158:	07da      	lsls	r2, r3, #31
 801215a:	4605      	mov	r5, r0
 801215c:	d4e4      	bmi.n	8012128 <_fflush_r+0xc>
 801215e:	89a3      	ldrh	r3, [r4, #12]
 8012160:	059b      	lsls	r3, r3, #22
 8012162:	d4e1      	bmi.n	8012128 <_fflush_r+0xc>
 8012164:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012166:	f7fd fc15 	bl	800f994 <__retarget_lock_release_recursive>
 801216a:	e7dd      	b.n	8012128 <_fflush_r+0xc>

0801216c <__sccl>:
 801216c:	b570      	push	{r4, r5, r6, lr}
 801216e:	780b      	ldrb	r3, [r1, #0]
 8012170:	4604      	mov	r4, r0
 8012172:	2b5e      	cmp	r3, #94	@ 0x5e
 8012174:	bf0b      	itete	eq
 8012176:	784b      	ldrbeq	r3, [r1, #1]
 8012178:	1c4a      	addne	r2, r1, #1
 801217a:	1c8a      	addeq	r2, r1, #2
 801217c:	2100      	movne	r1, #0
 801217e:	bf08      	it	eq
 8012180:	2101      	moveq	r1, #1
 8012182:	3801      	subs	r0, #1
 8012184:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8012188:	f800 1f01 	strb.w	r1, [r0, #1]!
 801218c:	42a8      	cmp	r0, r5
 801218e:	d1fb      	bne.n	8012188 <__sccl+0x1c>
 8012190:	b90b      	cbnz	r3, 8012196 <__sccl+0x2a>
 8012192:	1e50      	subs	r0, r2, #1
 8012194:	bd70      	pop	{r4, r5, r6, pc}
 8012196:	f081 0101 	eor.w	r1, r1, #1
 801219a:	54e1      	strb	r1, [r4, r3]
 801219c:	4610      	mov	r0, r2
 801219e:	4602      	mov	r2, r0
 80121a0:	f812 5b01 	ldrb.w	r5, [r2], #1
 80121a4:	2d2d      	cmp	r5, #45	@ 0x2d
 80121a6:	d005      	beq.n	80121b4 <__sccl+0x48>
 80121a8:	2d5d      	cmp	r5, #93	@ 0x5d
 80121aa:	d016      	beq.n	80121da <__sccl+0x6e>
 80121ac:	2d00      	cmp	r5, #0
 80121ae:	d0f1      	beq.n	8012194 <__sccl+0x28>
 80121b0:	462b      	mov	r3, r5
 80121b2:	e7f2      	b.n	801219a <__sccl+0x2e>
 80121b4:	7846      	ldrb	r6, [r0, #1]
 80121b6:	2e5d      	cmp	r6, #93	@ 0x5d
 80121b8:	d0fa      	beq.n	80121b0 <__sccl+0x44>
 80121ba:	42b3      	cmp	r3, r6
 80121bc:	dcf8      	bgt.n	80121b0 <__sccl+0x44>
 80121be:	3002      	adds	r0, #2
 80121c0:	461a      	mov	r2, r3
 80121c2:	3201      	adds	r2, #1
 80121c4:	4296      	cmp	r6, r2
 80121c6:	54a1      	strb	r1, [r4, r2]
 80121c8:	dcfb      	bgt.n	80121c2 <__sccl+0x56>
 80121ca:	1af2      	subs	r2, r6, r3
 80121cc:	3a01      	subs	r2, #1
 80121ce:	1c5d      	adds	r5, r3, #1
 80121d0:	42b3      	cmp	r3, r6
 80121d2:	bfa8      	it	ge
 80121d4:	2200      	movge	r2, #0
 80121d6:	18ab      	adds	r3, r5, r2
 80121d8:	e7e1      	b.n	801219e <__sccl+0x32>
 80121da:	4610      	mov	r0, r2
 80121dc:	e7da      	b.n	8012194 <__sccl+0x28>

080121de <__submore>:
 80121de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80121e2:	460c      	mov	r4, r1
 80121e4:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 80121e6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80121ea:	4299      	cmp	r1, r3
 80121ec:	d11d      	bne.n	801222a <__submore+0x4c>
 80121ee:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80121f2:	f7fb fd49 	bl	800dc88 <_malloc_r>
 80121f6:	b918      	cbnz	r0, 8012200 <__submore+0x22>
 80121f8:	f04f 30ff 	mov.w	r0, #4294967295
 80121fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012200:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8012204:	63a3      	str	r3, [r4, #56]	@ 0x38
 8012206:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 801220a:	6360      	str	r0, [r4, #52]	@ 0x34
 801220c:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8012210:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8012214:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8012218:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 801221c:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8012220:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8012224:	6020      	str	r0, [r4, #0]
 8012226:	2000      	movs	r0, #0
 8012228:	e7e8      	b.n	80121fc <__submore+0x1e>
 801222a:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 801222c:	0077      	lsls	r7, r6, #1
 801222e:	463a      	mov	r2, r7
 8012230:	f000 f85c 	bl	80122ec <_realloc_r>
 8012234:	4605      	mov	r5, r0
 8012236:	2800      	cmp	r0, #0
 8012238:	d0de      	beq.n	80121f8 <__submore+0x1a>
 801223a:	eb00 0806 	add.w	r8, r0, r6
 801223e:	4601      	mov	r1, r0
 8012240:	4632      	mov	r2, r6
 8012242:	4640      	mov	r0, r8
 8012244:	f7fd fba7 	bl	800f996 <memcpy>
 8012248:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 801224c:	f8c4 8000 	str.w	r8, [r4]
 8012250:	e7e9      	b.n	8012226 <__submore+0x48>

08012252 <memmove>:
 8012252:	4288      	cmp	r0, r1
 8012254:	b510      	push	{r4, lr}
 8012256:	eb01 0402 	add.w	r4, r1, r2
 801225a:	d902      	bls.n	8012262 <memmove+0x10>
 801225c:	4284      	cmp	r4, r0
 801225e:	4623      	mov	r3, r4
 8012260:	d807      	bhi.n	8012272 <memmove+0x20>
 8012262:	1e43      	subs	r3, r0, #1
 8012264:	42a1      	cmp	r1, r4
 8012266:	d008      	beq.n	801227a <memmove+0x28>
 8012268:	f811 2b01 	ldrb.w	r2, [r1], #1
 801226c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012270:	e7f8      	b.n	8012264 <memmove+0x12>
 8012272:	4402      	add	r2, r0
 8012274:	4601      	mov	r1, r0
 8012276:	428a      	cmp	r2, r1
 8012278:	d100      	bne.n	801227c <memmove+0x2a>
 801227a:	bd10      	pop	{r4, pc}
 801227c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012280:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012284:	e7f7      	b.n	8012276 <memmove+0x24>
	...

08012288 <__assert_func>:
 8012288:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801228a:	4614      	mov	r4, r2
 801228c:	461a      	mov	r2, r3
 801228e:	4b09      	ldr	r3, [pc, #36]	@ (80122b4 <__assert_func+0x2c>)
 8012290:	681b      	ldr	r3, [r3, #0]
 8012292:	4605      	mov	r5, r0
 8012294:	68d8      	ldr	r0, [r3, #12]
 8012296:	b954      	cbnz	r4, 80122ae <__assert_func+0x26>
 8012298:	4b07      	ldr	r3, [pc, #28]	@ (80122b8 <__assert_func+0x30>)
 801229a:	461c      	mov	r4, r3
 801229c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80122a0:	9100      	str	r1, [sp, #0]
 80122a2:	462b      	mov	r3, r5
 80122a4:	4905      	ldr	r1, [pc, #20]	@ (80122bc <__assert_func+0x34>)
 80122a6:	f000 f8bf 	bl	8012428 <fiprintf>
 80122aa:	f000 f8cf 	bl	801244c <abort>
 80122ae:	4b04      	ldr	r3, [pc, #16]	@ (80122c0 <__assert_func+0x38>)
 80122b0:	e7f4      	b.n	801229c <__assert_func+0x14>
 80122b2:	bf00      	nop
 80122b4:	240001dc 	.word	0x240001dc
 80122b8:	080131d8 	.word	0x080131d8
 80122bc:	080131aa 	.word	0x080131aa
 80122c0:	0801319d 	.word	0x0801319d

080122c4 <_calloc_r>:
 80122c4:	b570      	push	{r4, r5, r6, lr}
 80122c6:	fba1 5402 	umull	r5, r4, r1, r2
 80122ca:	b93c      	cbnz	r4, 80122dc <_calloc_r+0x18>
 80122cc:	4629      	mov	r1, r5
 80122ce:	f7fb fcdb 	bl	800dc88 <_malloc_r>
 80122d2:	4606      	mov	r6, r0
 80122d4:	b928      	cbnz	r0, 80122e2 <_calloc_r+0x1e>
 80122d6:	2600      	movs	r6, #0
 80122d8:	4630      	mov	r0, r6
 80122da:	bd70      	pop	{r4, r5, r6, pc}
 80122dc:	220c      	movs	r2, #12
 80122de:	6002      	str	r2, [r0, #0]
 80122e0:	e7f9      	b.n	80122d6 <_calloc_r+0x12>
 80122e2:	462a      	mov	r2, r5
 80122e4:	4621      	mov	r1, r4
 80122e6:	f7fd faa8 	bl	800f83a <memset>
 80122ea:	e7f5      	b.n	80122d8 <_calloc_r+0x14>

080122ec <_realloc_r>:
 80122ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80122f0:	4680      	mov	r8, r0
 80122f2:	4615      	mov	r5, r2
 80122f4:	460c      	mov	r4, r1
 80122f6:	b921      	cbnz	r1, 8012302 <_realloc_r+0x16>
 80122f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80122fc:	4611      	mov	r1, r2
 80122fe:	f7fb bcc3 	b.w	800dc88 <_malloc_r>
 8012302:	b92a      	cbnz	r2, 8012310 <_realloc_r+0x24>
 8012304:	f7fe f946 	bl	8010594 <_free_r>
 8012308:	2400      	movs	r4, #0
 801230a:	4620      	mov	r0, r4
 801230c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012310:	f000 f8a3 	bl	801245a <_malloc_usable_size_r>
 8012314:	4285      	cmp	r5, r0
 8012316:	4606      	mov	r6, r0
 8012318:	d802      	bhi.n	8012320 <_realloc_r+0x34>
 801231a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801231e:	d8f4      	bhi.n	801230a <_realloc_r+0x1e>
 8012320:	4629      	mov	r1, r5
 8012322:	4640      	mov	r0, r8
 8012324:	f7fb fcb0 	bl	800dc88 <_malloc_r>
 8012328:	4607      	mov	r7, r0
 801232a:	2800      	cmp	r0, #0
 801232c:	d0ec      	beq.n	8012308 <_realloc_r+0x1c>
 801232e:	42b5      	cmp	r5, r6
 8012330:	462a      	mov	r2, r5
 8012332:	4621      	mov	r1, r4
 8012334:	bf28      	it	cs
 8012336:	4632      	movcs	r2, r6
 8012338:	f7fd fb2d 	bl	800f996 <memcpy>
 801233c:	4621      	mov	r1, r4
 801233e:	4640      	mov	r0, r8
 8012340:	f7fe f928 	bl	8010594 <_free_r>
 8012344:	463c      	mov	r4, r7
 8012346:	e7e0      	b.n	801230a <_realloc_r+0x1e>

08012348 <_strtoul_l.constprop.0>:
 8012348:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801234c:	4e34      	ldr	r6, [pc, #208]	@ (8012420 <_strtoul_l.constprop.0+0xd8>)
 801234e:	4686      	mov	lr, r0
 8012350:	460d      	mov	r5, r1
 8012352:	4628      	mov	r0, r5
 8012354:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012358:	5d37      	ldrb	r7, [r6, r4]
 801235a:	f017 0708 	ands.w	r7, r7, #8
 801235e:	d1f8      	bne.n	8012352 <_strtoul_l.constprop.0+0xa>
 8012360:	2c2d      	cmp	r4, #45	@ 0x2d
 8012362:	d12f      	bne.n	80123c4 <_strtoul_l.constprop.0+0x7c>
 8012364:	782c      	ldrb	r4, [r5, #0]
 8012366:	2701      	movs	r7, #1
 8012368:	1c85      	adds	r5, r0, #2
 801236a:	f033 0010 	bics.w	r0, r3, #16
 801236e:	d109      	bne.n	8012384 <_strtoul_l.constprop.0+0x3c>
 8012370:	2c30      	cmp	r4, #48	@ 0x30
 8012372:	d12c      	bne.n	80123ce <_strtoul_l.constprop.0+0x86>
 8012374:	7828      	ldrb	r0, [r5, #0]
 8012376:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 801237a:	2858      	cmp	r0, #88	@ 0x58
 801237c:	d127      	bne.n	80123ce <_strtoul_l.constprop.0+0x86>
 801237e:	786c      	ldrb	r4, [r5, #1]
 8012380:	2310      	movs	r3, #16
 8012382:	3502      	adds	r5, #2
 8012384:	f04f 38ff 	mov.w	r8, #4294967295
 8012388:	2600      	movs	r6, #0
 801238a:	fbb8 f8f3 	udiv	r8, r8, r3
 801238e:	fb03 f908 	mul.w	r9, r3, r8
 8012392:	ea6f 0909 	mvn.w	r9, r9
 8012396:	4630      	mov	r0, r6
 8012398:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 801239c:	f1bc 0f09 	cmp.w	ip, #9
 80123a0:	d81c      	bhi.n	80123dc <_strtoul_l.constprop.0+0x94>
 80123a2:	4664      	mov	r4, ip
 80123a4:	42a3      	cmp	r3, r4
 80123a6:	dd2a      	ble.n	80123fe <_strtoul_l.constprop.0+0xb6>
 80123a8:	f1b6 3fff 	cmp.w	r6, #4294967295
 80123ac:	d007      	beq.n	80123be <_strtoul_l.constprop.0+0x76>
 80123ae:	4580      	cmp	r8, r0
 80123b0:	d322      	bcc.n	80123f8 <_strtoul_l.constprop.0+0xb0>
 80123b2:	d101      	bne.n	80123b8 <_strtoul_l.constprop.0+0x70>
 80123b4:	45a1      	cmp	r9, r4
 80123b6:	db1f      	blt.n	80123f8 <_strtoul_l.constprop.0+0xb0>
 80123b8:	fb00 4003 	mla	r0, r0, r3, r4
 80123bc:	2601      	movs	r6, #1
 80123be:	f815 4b01 	ldrb.w	r4, [r5], #1
 80123c2:	e7e9      	b.n	8012398 <_strtoul_l.constprop.0+0x50>
 80123c4:	2c2b      	cmp	r4, #43	@ 0x2b
 80123c6:	bf04      	itt	eq
 80123c8:	782c      	ldrbeq	r4, [r5, #0]
 80123ca:	1c85      	addeq	r5, r0, #2
 80123cc:	e7cd      	b.n	801236a <_strtoul_l.constprop.0+0x22>
 80123ce:	2b00      	cmp	r3, #0
 80123d0:	d1d8      	bne.n	8012384 <_strtoul_l.constprop.0+0x3c>
 80123d2:	2c30      	cmp	r4, #48	@ 0x30
 80123d4:	bf0c      	ite	eq
 80123d6:	2308      	moveq	r3, #8
 80123d8:	230a      	movne	r3, #10
 80123da:	e7d3      	b.n	8012384 <_strtoul_l.constprop.0+0x3c>
 80123dc:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 80123e0:	f1bc 0f19 	cmp.w	ip, #25
 80123e4:	d801      	bhi.n	80123ea <_strtoul_l.constprop.0+0xa2>
 80123e6:	3c37      	subs	r4, #55	@ 0x37
 80123e8:	e7dc      	b.n	80123a4 <_strtoul_l.constprop.0+0x5c>
 80123ea:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 80123ee:	f1bc 0f19 	cmp.w	ip, #25
 80123f2:	d804      	bhi.n	80123fe <_strtoul_l.constprop.0+0xb6>
 80123f4:	3c57      	subs	r4, #87	@ 0x57
 80123f6:	e7d5      	b.n	80123a4 <_strtoul_l.constprop.0+0x5c>
 80123f8:	f04f 36ff 	mov.w	r6, #4294967295
 80123fc:	e7df      	b.n	80123be <_strtoul_l.constprop.0+0x76>
 80123fe:	1c73      	adds	r3, r6, #1
 8012400:	d106      	bne.n	8012410 <_strtoul_l.constprop.0+0xc8>
 8012402:	2322      	movs	r3, #34	@ 0x22
 8012404:	f8ce 3000 	str.w	r3, [lr]
 8012408:	4630      	mov	r0, r6
 801240a:	b932      	cbnz	r2, 801241a <_strtoul_l.constprop.0+0xd2>
 801240c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012410:	b107      	cbz	r7, 8012414 <_strtoul_l.constprop.0+0xcc>
 8012412:	4240      	negs	r0, r0
 8012414:	2a00      	cmp	r2, #0
 8012416:	d0f9      	beq.n	801240c <_strtoul_l.constprop.0+0xc4>
 8012418:	b106      	cbz	r6, 801241c <_strtoul_l.constprop.0+0xd4>
 801241a:	1e69      	subs	r1, r5, #1
 801241c:	6011      	str	r1, [r2, #0]
 801241e:	e7f5      	b.n	801240c <_strtoul_l.constprop.0+0xc4>
 8012420:	08013071 	.word	0x08013071

08012424 <_strtoul_r>:
 8012424:	f7ff bf90 	b.w	8012348 <_strtoul_l.constprop.0>

08012428 <fiprintf>:
 8012428:	b40e      	push	{r1, r2, r3}
 801242a:	b503      	push	{r0, r1, lr}
 801242c:	4601      	mov	r1, r0
 801242e:	ab03      	add	r3, sp, #12
 8012430:	4805      	ldr	r0, [pc, #20]	@ (8012448 <fiprintf+0x20>)
 8012432:	f853 2b04 	ldr.w	r2, [r3], #4
 8012436:	6800      	ldr	r0, [r0, #0]
 8012438:	9301      	str	r3, [sp, #4]
 801243a:	f000 f83f 	bl	80124bc <_vfiprintf_r>
 801243e:	b002      	add	sp, #8
 8012440:	f85d eb04 	ldr.w	lr, [sp], #4
 8012444:	b003      	add	sp, #12
 8012446:	4770      	bx	lr
 8012448:	240001dc 	.word	0x240001dc

0801244c <abort>:
 801244c:	b508      	push	{r3, lr}
 801244e:	2006      	movs	r0, #6
 8012450:	f000 fa08 	bl	8012864 <raise>
 8012454:	2001      	movs	r0, #1
 8012456:	f7ef fcdd 	bl	8001e14 <_exit>

0801245a <_malloc_usable_size_r>:
 801245a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801245e:	1f18      	subs	r0, r3, #4
 8012460:	2b00      	cmp	r3, #0
 8012462:	bfbc      	itt	lt
 8012464:	580b      	ldrlt	r3, [r1, r0]
 8012466:	18c0      	addlt	r0, r0, r3
 8012468:	4770      	bx	lr

0801246a <__sfputc_r>:
 801246a:	6893      	ldr	r3, [r2, #8]
 801246c:	3b01      	subs	r3, #1
 801246e:	2b00      	cmp	r3, #0
 8012470:	b410      	push	{r4}
 8012472:	6093      	str	r3, [r2, #8]
 8012474:	da08      	bge.n	8012488 <__sfputc_r+0x1e>
 8012476:	6994      	ldr	r4, [r2, #24]
 8012478:	42a3      	cmp	r3, r4
 801247a:	db01      	blt.n	8012480 <__sfputc_r+0x16>
 801247c:	290a      	cmp	r1, #10
 801247e:	d103      	bne.n	8012488 <__sfputc_r+0x1e>
 8012480:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012484:	f000 b932 	b.w	80126ec <__swbuf_r>
 8012488:	6813      	ldr	r3, [r2, #0]
 801248a:	1c58      	adds	r0, r3, #1
 801248c:	6010      	str	r0, [r2, #0]
 801248e:	7019      	strb	r1, [r3, #0]
 8012490:	4608      	mov	r0, r1
 8012492:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012496:	4770      	bx	lr

08012498 <__sfputs_r>:
 8012498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801249a:	4606      	mov	r6, r0
 801249c:	460f      	mov	r7, r1
 801249e:	4614      	mov	r4, r2
 80124a0:	18d5      	adds	r5, r2, r3
 80124a2:	42ac      	cmp	r4, r5
 80124a4:	d101      	bne.n	80124aa <__sfputs_r+0x12>
 80124a6:	2000      	movs	r0, #0
 80124a8:	e007      	b.n	80124ba <__sfputs_r+0x22>
 80124aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80124ae:	463a      	mov	r2, r7
 80124b0:	4630      	mov	r0, r6
 80124b2:	f7ff ffda 	bl	801246a <__sfputc_r>
 80124b6:	1c43      	adds	r3, r0, #1
 80124b8:	d1f3      	bne.n	80124a2 <__sfputs_r+0xa>
 80124ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080124bc <_vfiprintf_r>:
 80124bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80124c0:	460d      	mov	r5, r1
 80124c2:	b09d      	sub	sp, #116	@ 0x74
 80124c4:	4614      	mov	r4, r2
 80124c6:	4698      	mov	r8, r3
 80124c8:	4606      	mov	r6, r0
 80124ca:	b118      	cbz	r0, 80124d4 <_vfiprintf_r+0x18>
 80124cc:	6a03      	ldr	r3, [r0, #32]
 80124ce:	b90b      	cbnz	r3, 80124d4 <_vfiprintf_r+0x18>
 80124d0:	f7fd f8ee 	bl	800f6b0 <__sinit>
 80124d4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80124d6:	07d9      	lsls	r1, r3, #31
 80124d8:	d405      	bmi.n	80124e6 <_vfiprintf_r+0x2a>
 80124da:	89ab      	ldrh	r3, [r5, #12]
 80124dc:	059a      	lsls	r2, r3, #22
 80124de:	d402      	bmi.n	80124e6 <_vfiprintf_r+0x2a>
 80124e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80124e2:	f7fd fa56 	bl	800f992 <__retarget_lock_acquire_recursive>
 80124e6:	89ab      	ldrh	r3, [r5, #12]
 80124e8:	071b      	lsls	r3, r3, #28
 80124ea:	d501      	bpl.n	80124f0 <_vfiprintf_r+0x34>
 80124ec:	692b      	ldr	r3, [r5, #16]
 80124ee:	b99b      	cbnz	r3, 8012518 <_vfiprintf_r+0x5c>
 80124f0:	4629      	mov	r1, r5
 80124f2:	4630      	mov	r0, r6
 80124f4:	f000 f938 	bl	8012768 <__swsetup_r>
 80124f8:	b170      	cbz	r0, 8012518 <_vfiprintf_r+0x5c>
 80124fa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80124fc:	07dc      	lsls	r4, r3, #31
 80124fe:	d504      	bpl.n	801250a <_vfiprintf_r+0x4e>
 8012500:	f04f 30ff 	mov.w	r0, #4294967295
 8012504:	b01d      	add	sp, #116	@ 0x74
 8012506:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801250a:	89ab      	ldrh	r3, [r5, #12]
 801250c:	0598      	lsls	r0, r3, #22
 801250e:	d4f7      	bmi.n	8012500 <_vfiprintf_r+0x44>
 8012510:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012512:	f7fd fa3f 	bl	800f994 <__retarget_lock_release_recursive>
 8012516:	e7f3      	b.n	8012500 <_vfiprintf_r+0x44>
 8012518:	2300      	movs	r3, #0
 801251a:	9309      	str	r3, [sp, #36]	@ 0x24
 801251c:	2320      	movs	r3, #32
 801251e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8012522:	f8cd 800c 	str.w	r8, [sp, #12]
 8012526:	2330      	movs	r3, #48	@ 0x30
 8012528:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80126d8 <_vfiprintf_r+0x21c>
 801252c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012530:	f04f 0901 	mov.w	r9, #1
 8012534:	4623      	mov	r3, r4
 8012536:	469a      	mov	sl, r3
 8012538:	f813 2b01 	ldrb.w	r2, [r3], #1
 801253c:	b10a      	cbz	r2, 8012542 <_vfiprintf_r+0x86>
 801253e:	2a25      	cmp	r2, #37	@ 0x25
 8012540:	d1f9      	bne.n	8012536 <_vfiprintf_r+0x7a>
 8012542:	ebba 0b04 	subs.w	fp, sl, r4
 8012546:	d00b      	beq.n	8012560 <_vfiprintf_r+0xa4>
 8012548:	465b      	mov	r3, fp
 801254a:	4622      	mov	r2, r4
 801254c:	4629      	mov	r1, r5
 801254e:	4630      	mov	r0, r6
 8012550:	f7ff ffa2 	bl	8012498 <__sfputs_r>
 8012554:	3001      	adds	r0, #1
 8012556:	f000 80a7 	beq.w	80126a8 <_vfiprintf_r+0x1ec>
 801255a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801255c:	445a      	add	r2, fp
 801255e:	9209      	str	r2, [sp, #36]	@ 0x24
 8012560:	f89a 3000 	ldrb.w	r3, [sl]
 8012564:	2b00      	cmp	r3, #0
 8012566:	f000 809f 	beq.w	80126a8 <_vfiprintf_r+0x1ec>
 801256a:	2300      	movs	r3, #0
 801256c:	f04f 32ff 	mov.w	r2, #4294967295
 8012570:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012574:	f10a 0a01 	add.w	sl, sl, #1
 8012578:	9304      	str	r3, [sp, #16]
 801257a:	9307      	str	r3, [sp, #28]
 801257c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012580:	931a      	str	r3, [sp, #104]	@ 0x68
 8012582:	4654      	mov	r4, sl
 8012584:	2205      	movs	r2, #5
 8012586:	f814 1b01 	ldrb.w	r1, [r4], #1
 801258a:	4853      	ldr	r0, [pc, #332]	@ (80126d8 <_vfiprintf_r+0x21c>)
 801258c:	f7ed fec0 	bl	8000310 <memchr>
 8012590:	9a04      	ldr	r2, [sp, #16]
 8012592:	b9d8      	cbnz	r0, 80125cc <_vfiprintf_r+0x110>
 8012594:	06d1      	lsls	r1, r2, #27
 8012596:	bf44      	itt	mi
 8012598:	2320      	movmi	r3, #32
 801259a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801259e:	0713      	lsls	r3, r2, #28
 80125a0:	bf44      	itt	mi
 80125a2:	232b      	movmi	r3, #43	@ 0x2b
 80125a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80125a8:	f89a 3000 	ldrb.w	r3, [sl]
 80125ac:	2b2a      	cmp	r3, #42	@ 0x2a
 80125ae:	d015      	beq.n	80125dc <_vfiprintf_r+0x120>
 80125b0:	9a07      	ldr	r2, [sp, #28]
 80125b2:	4654      	mov	r4, sl
 80125b4:	2000      	movs	r0, #0
 80125b6:	f04f 0c0a 	mov.w	ip, #10
 80125ba:	4621      	mov	r1, r4
 80125bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80125c0:	3b30      	subs	r3, #48	@ 0x30
 80125c2:	2b09      	cmp	r3, #9
 80125c4:	d94b      	bls.n	801265e <_vfiprintf_r+0x1a2>
 80125c6:	b1b0      	cbz	r0, 80125f6 <_vfiprintf_r+0x13a>
 80125c8:	9207      	str	r2, [sp, #28]
 80125ca:	e014      	b.n	80125f6 <_vfiprintf_r+0x13a>
 80125cc:	eba0 0308 	sub.w	r3, r0, r8
 80125d0:	fa09 f303 	lsl.w	r3, r9, r3
 80125d4:	4313      	orrs	r3, r2
 80125d6:	9304      	str	r3, [sp, #16]
 80125d8:	46a2      	mov	sl, r4
 80125da:	e7d2      	b.n	8012582 <_vfiprintf_r+0xc6>
 80125dc:	9b03      	ldr	r3, [sp, #12]
 80125de:	1d19      	adds	r1, r3, #4
 80125e0:	681b      	ldr	r3, [r3, #0]
 80125e2:	9103      	str	r1, [sp, #12]
 80125e4:	2b00      	cmp	r3, #0
 80125e6:	bfbb      	ittet	lt
 80125e8:	425b      	neglt	r3, r3
 80125ea:	f042 0202 	orrlt.w	r2, r2, #2
 80125ee:	9307      	strge	r3, [sp, #28]
 80125f0:	9307      	strlt	r3, [sp, #28]
 80125f2:	bfb8      	it	lt
 80125f4:	9204      	strlt	r2, [sp, #16]
 80125f6:	7823      	ldrb	r3, [r4, #0]
 80125f8:	2b2e      	cmp	r3, #46	@ 0x2e
 80125fa:	d10a      	bne.n	8012612 <_vfiprintf_r+0x156>
 80125fc:	7863      	ldrb	r3, [r4, #1]
 80125fe:	2b2a      	cmp	r3, #42	@ 0x2a
 8012600:	d132      	bne.n	8012668 <_vfiprintf_r+0x1ac>
 8012602:	9b03      	ldr	r3, [sp, #12]
 8012604:	1d1a      	adds	r2, r3, #4
 8012606:	681b      	ldr	r3, [r3, #0]
 8012608:	9203      	str	r2, [sp, #12]
 801260a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801260e:	3402      	adds	r4, #2
 8012610:	9305      	str	r3, [sp, #20]
 8012612:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80126e8 <_vfiprintf_r+0x22c>
 8012616:	7821      	ldrb	r1, [r4, #0]
 8012618:	2203      	movs	r2, #3
 801261a:	4650      	mov	r0, sl
 801261c:	f7ed fe78 	bl	8000310 <memchr>
 8012620:	b138      	cbz	r0, 8012632 <_vfiprintf_r+0x176>
 8012622:	9b04      	ldr	r3, [sp, #16]
 8012624:	eba0 000a 	sub.w	r0, r0, sl
 8012628:	2240      	movs	r2, #64	@ 0x40
 801262a:	4082      	lsls	r2, r0
 801262c:	4313      	orrs	r3, r2
 801262e:	3401      	adds	r4, #1
 8012630:	9304      	str	r3, [sp, #16]
 8012632:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012636:	4829      	ldr	r0, [pc, #164]	@ (80126dc <_vfiprintf_r+0x220>)
 8012638:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801263c:	2206      	movs	r2, #6
 801263e:	f7ed fe67 	bl	8000310 <memchr>
 8012642:	2800      	cmp	r0, #0
 8012644:	d03f      	beq.n	80126c6 <_vfiprintf_r+0x20a>
 8012646:	4b26      	ldr	r3, [pc, #152]	@ (80126e0 <_vfiprintf_r+0x224>)
 8012648:	bb1b      	cbnz	r3, 8012692 <_vfiprintf_r+0x1d6>
 801264a:	9b03      	ldr	r3, [sp, #12]
 801264c:	3307      	adds	r3, #7
 801264e:	f023 0307 	bic.w	r3, r3, #7
 8012652:	3308      	adds	r3, #8
 8012654:	9303      	str	r3, [sp, #12]
 8012656:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012658:	443b      	add	r3, r7
 801265a:	9309      	str	r3, [sp, #36]	@ 0x24
 801265c:	e76a      	b.n	8012534 <_vfiprintf_r+0x78>
 801265e:	fb0c 3202 	mla	r2, ip, r2, r3
 8012662:	460c      	mov	r4, r1
 8012664:	2001      	movs	r0, #1
 8012666:	e7a8      	b.n	80125ba <_vfiprintf_r+0xfe>
 8012668:	2300      	movs	r3, #0
 801266a:	3401      	adds	r4, #1
 801266c:	9305      	str	r3, [sp, #20]
 801266e:	4619      	mov	r1, r3
 8012670:	f04f 0c0a 	mov.w	ip, #10
 8012674:	4620      	mov	r0, r4
 8012676:	f810 2b01 	ldrb.w	r2, [r0], #1
 801267a:	3a30      	subs	r2, #48	@ 0x30
 801267c:	2a09      	cmp	r2, #9
 801267e:	d903      	bls.n	8012688 <_vfiprintf_r+0x1cc>
 8012680:	2b00      	cmp	r3, #0
 8012682:	d0c6      	beq.n	8012612 <_vfiprintf_r+0x156>
 8012684:	9105      	str	r1, [sp, #20]
 8012686:	e7c4      	b.n	8012612 <_vfiprintf_r+0x156>
 8012688:	fb0c 2101 	mla	r1, ip, r1, r2
 801268c:	4604      	mov	r4, r0
 801268e:	2301      	movs	r3, #1
 8012690:	e7f0      	b.n	8012674 <_vfiprintf_r+0x1b8>
 8012692:	ab03      	add	r3, sp, #12
 8012694:	9300      	str	r3, [sp, #0]
 8012696:	462a      	mov	r2, r5
 8012698:	4b12      	ldr	r3, [pc, #72]	@ (80126e4 <_vfiprintf_r+0x228>)
 801269a:	a904      	add	r1, sp, #16
 801269c:	4630      	mov	r0, r6
 801269e:	f7fc f9c7 	bl	800ea30 <_printf_float>
 80126a2:	4607      	mov	r7, r0
 80126a4:	1c78      	adds	r0, r7, #1
 80126a6:	d1d6      	bne.n	8012656 <_vfiprintf_r+0x19a>
 80126a8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80126aa:	07d9      	lsls	r1, r3, #31
 80126ac:	d405      	bmi.n	80126ba <_vfiprintf_r+0x1fe>
 80126ae:	89ab      	ldrh	r3, [r5, #12]
 80126b0:	059a      	lsls	r2, r3, #22
 80126b2:	d402      	bmi.n	80126ba <_vfiprintf_r+0x1fe>
 80126b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80126b6:	f7fd f96d 	bl	800f994 <__retarget_lock_release_recursive>
 80126ba:	89ab      	ldrh	r3, [r5, #12]
 80126bc:	065b      	lsls	r3, r3, #25
 80126be:	f53f af1f 	bmi.w	8012500 <_vfiprintf_r+0x44>
 80126c2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80126c4:	e71e      	b.n	8012504 <_vfiprintf_r+0x48>
 80126c6:	ab03      	add	r3, sp, #12
 80126c8:	9300      	str	r3, [sp, #0]
 80126ca:	462a      	mov	r2, r5
 80126cc:	4b05      	ldr	r3, [pc, #20]	@ (80126e4 <_vfiprintf_r+0x228>)
 80126ce:	a904      	add	r1, sp, #16
 80126d0:	4630      	mov	r0, r6
 80126d2:	f7fc fc35 	bl	800ef40 <_printf_i>
 80126d6:	e7e4      	b.n	80126a2 <_vfiprintf_r+0x1e6>
 80126d8:	08013171 	.word	0x08013171
 80126dc:	0801317b 	.word	0x0801317b
 80126e0:	0800ea31 	.word	0x0800ea31
 80126e4:	08012499 	.word	0x08012499
 80126e8:	08013177 	.word	0x08013177

080126ec <__swbuf_r>:
 80126ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80126ee:	460e      	mov	r6, r1
 80126f0:	4614      	mov	r4, r2
 80126f2:	4605      	mov	r5, r0
 80126f4:	b118      	cbz	r0, 80126fe <__swbuf_r+0x12>
 80126f6:	6a03      	ldr	r3, [r0, #32]
 80126f8:	b90b      	cbnz	r3, 80126fe <__swbuf_r+0x12>
 80126fa:	f7fc ffd9 	bl	800f6b0 <__sinit>
 80126fe:	69a3      	ldr	r3, [r4, #24]
 8012700:	60a3      	str	r3, [r4, #8]
 8012702:	89a3      	ldrh	r3, [r4, #12]
 8012704:	071a      	lsls	r2, r3, #28
 8012706:	d501      	bpl.n	801270c <__swbuf_r+0x20>
 8012708:	6923      	ldr	r3, [r4, #16]
 801270a:	b943      	cbnz	r3, 801271e <__swbuf_r+0x32>
 801270c:	4621      	mov	r1, r4
 801270e:	4628      	mov	r0, r5
 8012710:	f000 f82a 	bl	8012768 <__swsetup_r>
 8012714:	b118      	cbz	r0, 801271e <__swbuf_r+0x32>
 8012716:	f04f 37ff 	mov.w	r7, #4294967295
 801271a:	4638      	mov	r0, r7
 801271c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801271e:	6823      	ldr	r3, [r4, #0]
 8012720:	6922      	ldr	r2, [r4, #16]
 8012722:	1a98      	subs	r0, r3, r2
 8012724:	6963      	ldr	r3, [r4, #20]
 8012726:	b2f6      	uxtb	r6, r6
 8012728:	4283      	cmp	r3, r0
 801272a:	4637      	mov	r7, r6
 801272c:	dc05      	bgt.n	801273a <__swbuf_r+0x4e>
 801272e:	4621      	mov	r1, r4
 8012730:	4628      	mov	r0, r5
 8012732:	f7ff fcf3 	bl	801211c <_fflush_r>
 8012736:	2800      	cmp	r0, #0
 8012738:	d1ed      	bne.n	8012716 <__swbuf_r+0x2a>
 801273a:	68a3      	ldr	r3, [r4, #8]
 801273c:	3b01      	subs	r3, #1
 801273e:	60a3      	str	r3, [r4, #8]
 8012740:	6823      	ldr	r3, [r4, #0]
 8012742:	1c5a      	adds	r2, r3, #1
 8012744:	6022      	str	r2, [r4, #0]
 8012746:	701e      	strb	r6, [r3, #0]
 8012748:	6962      	ldr	r2, [r4, #20]
 801274a:	1c43      	adds	r3, r0, #1
 801274c:	429a      	cmp	r2, r3
 801274e:	d004      	beq.n	801275a <__swbuf_r+0x6e>
 8012750:	89a3      	ldrh	r3, [r4, #12]
 8012752:	07db      	lsls	r3, r3, #31
 8012754:	d5e1      	bpl.n	801271a <__swbuf_r+0x2e>
 8012756:	2e0a      	cmp	r6, #10
 8012758:	d1df      	bne.n	801271a <__swbuf_r+0x2e>
 801275a:	4621      	mov	r1, r4
 801275c:	4628      	mov	r0, r5
 801275e:	f7ff fcdd 	bl	801211c <_fflush_r>
 8012762:	2800      	cmp	r0, #0
 8012764:	d0d9      	beq.n	801271a <__swbuf_r+0x2e>
 8012766:	e7d6      	b.n	8012716 <__swbuf_r+0x2a>

08012768 <__swsetup_r>:
 8012768:	b538      	push	{r3, r4, r5, lr}
 801276a:	4b29      	ldr	r3, [pc, #164]	@ (8012810 <__swsetup_r+0xa8>)
 801276c:	4605      	mov	r5, r0
 801276e:	6818      	ldr	r0, [r3, #0]
 8012770:	460c      	mov	r4, r1
 8012772:	b118      	cbz	r0, 801277c <__swsetup_r+0x14>
 8012774:	6a03      	ldr	r3, [r0, #32]
 8012776:	b90b      	cbnz	r3, 801277c <__swsetup_r+0x14>
 8012778:	f7fc ff9a 	bl	800f6b0 <__sinit>
 801277c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012780:	0719      	lsls	r1, r3, #28
 8012782:	d422      	bmi.n	80127ca <__swsetup_r+0x62>
 8012784:	06da      	lsls	r2, r3, #27
 8012786:	d407      	bmi.n	8012798 <__swsetup_r+0x30>
 8012788:	2209      	movs	r2, #9
 801278a:	602a      	str	r2, [r5, #0]
 801278c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012790:	81a3      	strh	r3, [r4, #12]
 8012792:	f04f 30ff 	mov.w	r0, #4294967295
 8012796:	e033      	b.n	8012800 <__swsetup_r+0x98>
 8012798:	0758      	lsls	r0, r3, #29
 801279a:	d512      	bpl.n	80127c2 <__swsetup_r+0x5a>
 801279c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801279e:	b141      	cbz	r1, 80127b2 <__swsetup_r+0x4a>
 80127a0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80127a4:	4299      	cmp	r1, r3
 80127a6:	d002      	beq.n	80127ae <__swsetup_r+0x46>
 80127a8:	4628      	mov	r0, r5
 80127aa:	f7fd fef3 	bl	8010594 <_free_r>
 80127ae:	2300      	movs	r3, #0
 80127b0:	6363      	str	r3, [r4, #52]	@ 0x34
 80127b2:	89a3      	ldrh	r3, [r4, #12]
 80127b4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80127b8:	81a3      	strh	r3, [r4, #12]
 80127ba:	2300      	movs	r3, #0
 80127bc:	6063      	str	r3, [r4, #4]
 80127be:	6923      	ldr	r3, [r4, #16]
 80127c0:	6023      	str	r3, [r4, #0]
 80127c2:	89a3      	ldrh	r3, [r4, #12]
 80127c4:	f043 0308 	orr.w	r3, r3, #8
 80127c8:	81a3      	strh	r3, [r4, #12]
 80127ca:	6923      	ldr	r3, [r4, #16]
 80127cc:	b94b      	cbnz	r3, 80127e2 <__swsetup_r+0x7a>
 80127ce:	89a3      	ldrh	r3, [r4, #12]
 80127d0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80127d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80127d8:	d003      	beq.n	80127e2 <__swsetup_r+0x7a>
 80127da:	4621      	mov	r1, r4
 80127dc:	4628      	mov	r0, r5
 80127de:	f000 f883 	bl	80128e8 <__smakebuf_r>
 80127e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80127e6:	f013 0201 	ands.w	r2, r3, #1
 80127ea:	d00a      	beq.n	8012802 <__swsetup_r+0x9a>
 80127ec:	2200      	movs	r2, #0
 80127ee:	60a2      	str	r2, [r4, #8]
 80127f0:	6962      	ldr	r2, [r4, #20]
 80127f2:	4252      	negs	r2, r2
 80127f4:	61a2      	str	r2, [r4, #24]
 80127f6:	6922      	ldr	r2, [r4, #16]
 80127f8:	b942      	cbnz	r2, 801280c <__swsetup_r+0xa4>
 80127fa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80127fe:	d1c5      	bne.n	801278c <__swsetup_r+0x24>
 8012800:	bd38      	pop	{r3, r4, r5, pc}
 8012802:	0799      	lsls	r1, r3, #30
 8012804:	bf58      	it	pl
 8012806:	6962      	ldrpl	r2, [r4, #20]
 8012808:	60a2      	str	r2, [r4, #8]
 801280a:	e7f4      	b.n	80127f6 <__swsetup_r+0x8e>
 801280c:	2000      	movs	r0, #0
 801280e:	e7f7      	b.n	8012800 <__swsetup_r+0x98>
 8012810:	240001dc 	.word	0x240001dc

08012814 <_raise_r>:
 8012814:	291f      	cmp	r1, #31
 8012816:	b538      	push	{r3, r4, r5, lr}
 8012818:	4605      	mov	r5, r0
 801281a:	460c      	mov	r4, r1
 801281c:	d904      	bls.n	8012828 <_raise_r+0x14>
 801281e:	2316      	movs	r3, #22
 8012820:	6003      	str	r3, [r0, #0]
 8012822:	f04f 30ff 	mov.w	r0, #4294967295
 8012826:	bd38      	pop	{r3, r4, r5, pc}
 8012828:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801282a:	b112      	cbz	r2, 8012832 <_raise_r+0x1e>
 801282c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012830:	b94b      	cbnz	r3, 8012846 <_raise_r+0x32>
 8012832:	4628      	mov	r0, r5
 8012834:	f000 f830 	bl	8012898 <_getpid_r>
 8012838:	4622      	mov	r2, r4
 801283a:	4601      	mov	r1, r0
 801283c:	4628      	mov	r0, r5
 801283e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012842:	f000 b817 	b.w	8012874 <_kill_r>
 8012846:	2b01      	cmp	r3, #1
 8012848:	d00a      	beq.n	8012860 <_raise_r+0x4c>
 801284a:	1c59      	adds	r1, r3, #1
 801284c:	d103      	bne.n	8012856 <_raise_r+0x42>
 801284e:	2316      	movs	r3, #22
 8012850:	6003      	str	r3, [r0, #0]
 8012852:	2001      	movs	r0, #1
 8012854:	e7e7      	b.n	8012826 <_raise_r+0x12>
 8012856:	2100      	movs	r1, #0
 8012858:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801285c:	4620      	mov	r0, r4
 801285e:	4798      	blx	r3
 8012860:	2000      	movs	r0, #0
 8012862:	e7e0      	b.n	8012826 <_raise_r+0x12>

08012864 <raise>:
 8012864:	4b02      	ldr	r3, [pc, #8]	@ (8012870 <raise+0xc>)
 8012866:	4601      	mov	r1, r0
 8012868:	6818      	ldr	r0, [r3, #0]
 801286a:	f7ff bfd3 	b.w	8012814 <_raise_r>
 801286e:	bf00      	nop
 8012870:	240001dc 	.word	0x240001dc

08012874 <_kill_r>:
 8012874:	b538      	push	{r3, r4, r5, lr}
 8012876:	4d07      	ldr	r5, [pc, #28]	@ (8012894 <_kill_r+0x20>)
 8012878:	2300      	movs	r3, #0
 801287a:	4604      	mov	r4, r0
 801287c:	4608      	mov	r0, r1
 801287e:	4611      	mov	r1, r2
 8012880:	602b      	str	r3, [r5, #0]
 8012882:	f7ef fab7 	bl	8001df4 <_kill>
 8012886:	1c43      	adds	r3, r0, #1
 8012888:	d102      	bne.n	8012890 <_kill_r+0x1c>
 801288a:	682b      	ldr	r3, [r5, #0]
 801288c:	b103      	cbz	r3, 8012890 <_kill_r+0x1c>
 801288e:	6023      	str	r3, [r4, #0]
 8012890:	bd38      	pop	{r3, r4, r5, pc}
 8012892:	bf00      	nop
 8012894:	24000e3c 	.word	0x24000e3c

08012898 <_getpid_r>:
 8012898:	f7ef baa4 	b.w	8001de4 <_getpid>

0801289c <__swhatbuf_r>:
 801289c:	b570      	push	{r4, r5, r6, lr}
 801289e:	460c      	mov	r4, r1
 80128a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80128a4:	2900      	cmp	r1, #0
 80128a6:	b096      	sub	sp, #88	@ 0x58
 80128a8:	4615      	mov	r5, r2
 80128aa:	461e      	mov	r6, r3
 80128ac:	da0d      	bge.n	80128ca <__swhatbuf_r+0x2e>
 80128ae:	89a3      	ldrh	r3, [r4, #12]
 80128b0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80128b4:	f04f 0100 	mov.w	r1, #0
 80128b8:	bf14      	ite	ne
 80128ba:	2340      	movne	r3, #64	@ 0x40
 80128bc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80128c0:	2000      	movs	r0, #0
 80128c2:	6031      	str	r1, [r6, #0]
 80128c4:	602b      	str	r3, [r5, #0]
 80128c6:	b016      	add	sp, #88	@ 0x58
 80128c8:	bd70      	pop	{r4, r5, r6, pc}
 80128ca:	466a      	mov	r2, sp
 80128cc:	f000 f848 	bl	8012960 <_fstat_r>
 80128d0:	2800      	cmp	r0, #0
 80128d2:	dbec      	blt.n	80128ae <__swhatbuf_r+0x12>
 80128d4:	9901      	ldr	r1, [sp, #4]
 80128d6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80128da:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80128de:	4259      	negs	r1, r3
 80128e0:	4159      	adcs	r1, r3
 80128e2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80128e6:	e7eb      	b.n	80128c0 <__swhatbuf_r+0x24>

080128e8 <__smakebuf_r>:
 80128e8:	898b      	ldrh	r3, [r1, #12]
 80128ea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80128ec:	079d      	lsls	r5, r3, #30
 80128ee:	4606      	mov	r6, r0
 80128f0:	460c      	mov	r4, r1
 80128f2:	d507      	bpl.n	8012904 <__smakebuf_r+0x1c>
 80128f4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80128f8:	6023      	str	r3, [r4, #0]
 80128fa:	6123      	str	r3, [r4, #16]
 80128fc:	2301      	movs	r3, #1
 80128fe:	6163      	str	r3, [r4, #20]
 8012900:	b003      	add	sp, #12
 8012902:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012904:	ab01      	add	r3, sp, #4
 8012906:	466a      	mov	r2, sp
 8012908:	f7ff ffc8 	bl	801289c <__swhatbuf_r>
 801290c:	9f00      	ldr	r7, [sp, #0]
 801290e:	4605      	mov	r5, r0
 8012910:	4639      	mov	r1, r7
 8012912:	4630      	mov	r0, r6
 8012914:	f7fb f9b8 	bl	800dc88 <_malloc_r>
 8012918:	b948      	cbnz	r0, 801292e <__smakebuf_r+0x46>
 801291a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801291e:	059a      	lsls	r2, r3, #22
 8012920:	d4ee      	bmi.n	8012900 <__smakebuf_r+0x18>
 8012922:	f023 0303 	bic.w	r3, r3, #3
 8012926:	f043 0302 	orr.w	r3, r3, #2
 801292a:	81a3      	strh	r3, [r4, #12]
 801292c:	e7e2      	b.n	80128f4 <__smakebuf_r+0xc>
 801292e:	89a3      	ldrh	r3, [r4, #12]
 8012930:	6020      	str	r0, [r4, #0]
 8012932:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012936:	81a3      	strh	r3, [r4, #12]
 8012938:	9b01      	ldr	r3, [sp, #4]
 801293a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801293e:	b15b      	cbz	r3, 8012958 <__smakebuf_r+0x70>
 8012940:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012944:	4630      	mov	r0, r6
 8012946:	f000 f81d 	bl	8012984 <_isatty_r>
 801294a:	b128      	cbz	r0, 8012958 <__smakebuf_r+0x70>
 801294c:	89a3      	ldrh	r3, [r4, #12]
 801294e:	f023 0303 	bic.w	r3, r3, #3
 8012952:	f043 0301 	orr.w	r3, r3, #1
 8012956:	81a3      	strh	r3, [r4, #12]
 8012958:	89a3      	ldrh	r3, [r4, #12]
 801295a:	431d      	orrs	r5, r3
 801295c:	81a5      	strh	r5, [r4, #12]
 801295e:	e7cf      	b.n	8012900 <__smakebuf_r+0x18>

08012960 <_fstat_r>:
 8012960:	b538      	push	{r3, r4, r5, lr}
 8012962:	4d07      	ldr	r5, [pc, #28]	@ (8012980 <_fstat_r+0x20>)
 8012964:	2300      	movs	r3, #0
 8012966:	4604      	mov	r4, r0
 8012968:	4608      	mov	r0, r1
 801296a:	4611      	mov	r1, r2
 801296c:	602b      	str	r3, [r5, #0]
 801296e:	f7ef faa1 	bl	8001eb4 <_fstat>
 8012972:	1c43      	adds	r3, r0, #1
 8012974:	d102      	bne.n	801297c <_fstat_r+0x1c>
 8012976:	682b      	ldr	r3, [r5, #0]
 8012978:	b103      	cbz	r3, 801297c <_fstat_r+0x1c>
 801297a:	6023      	str	r3, [r4, #0]
 801297c:	bd38      	pop	{r3, r4, r5, pc}
 801297e:	bf00      	nop
 8012980:	24000e3c 	.word	0x24000e3c

08012984 <_isatty_r>:
 8012984:	b538      	push	{r3, r4, r5, lr}
 8012986:	4d06      	ldr	r5, [pc, #24]	@ (80129a0 <_isatty_r+0x1c>)
 8012988:	2300      	movs	r3, #0
 801298a:	4604      	mov	r4, r0
 801298c:	4608      	mov	r0, r1
 801298e:	602b      	str	r3, [r5, #0]
 8012990:	f7ef faa0 	bl	8001ed4 <_isatty>
 8012994:	1c43      	adds	r3, r0, #1
 8012996:	d102      	bne.n	801299e <_isatty_r+0x1a>
 8012998:	682b      	ldr	r3, [r5, #0]
 801299a:	b103      	cbz	r3, 801299e <_isatty_r+0x1a>
 801299c:	6023      	str	r3, [r4, #0]
 801299e:	bd38      	pop	{r3, r4, r5, pc}
 80129a0:	24000e3c 	.word	0x24000e3c

080129a4 <_init>:
 80129a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80129a6:	bf00      	nop
 80129a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80129aa:	bc08      	pop	{r3}
 80129ac:	469e      	mov	lr, r3
 80129ae:	4770      	bx	lr

080129b0 <_fini>:
 80129b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80129b2:	bf00      	nop
 80129b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80129b6:	bc08      	pop	{r3}
 80129b8:	469e      	mov	lr, r3
 80129ba:	4770      	bx	lr
