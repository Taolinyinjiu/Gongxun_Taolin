
Gongxun_Taolin.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001203c  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007dc  08012310  08012310  00013310  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08012aec  08012aec  00013aec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08012af4  08012af4  00013af4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08012af8  08012af8  00013af8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000230  24000000  08012afc  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000c28  24000230  08012d2c  00014230  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000e58  08012d2c  00014e58  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00014230  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002200b  00000000  00000000  0001425e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000468c  00000000  00000000  00036269  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001ad8  00000000  00000000  0003a8f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000014e6  00000000  00000000  0003c3d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00037d9e  00000000  00000000  0003d8b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000293bc  00000000  00000000  00075654  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00159a00  00000000  00000000  0009ea10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001f8410  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00008570  00000000  00000000  001f8454  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000004f  00000000  00000000  002009c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000230 	.word	0x24000230
 80002ec:	00000000 	.word	0x00000000
 80002f0:	080122f4 	.word	0x080122f4

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000234 	.word	0x24000234
 800030c:	080122f4 	.word	0x080122f4

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <strlen>:
 80003b0:	4603      	mov	r3, r0
 80003b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d1fb      	bne.n	80003b2 <strlen+0x2>
 80003ba:	1a18      	subs	r0, r3, r0
 80003bc:	3801      	subs	r0, #1
 80003be:	4770      	bx	lr

080003c0 <__aeabi_drsub>:
 80003c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003c4:	e002      	b.n	80003cc <__adddf3>
 80003c6:	bf00      	nop

080003c8 <__aeabi_dsub>:
 80003c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003cc <__adddf3>:
 80003cc:	b530      	push	{r4, r5, lr}
 80003ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	bf1f      	itttt	ne
 80003e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f2:	f000 80e2 	beq.w	80005ba <__adddf3+0x1ee>
 80003f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003fe:	bfb8      	it	lt
 8000400:	426d      	neglt	r5, r5
 8000402:	dd0c      	ble.n	800041e <__adddf3+0x52>
 8000404:	442c      	add	r4, r5
 8000406:	ea80 0202 	eor.w	r2, r0, r2
 800040a:	ea81 0303 	eor.w	r3, r1, r3
 800040e:	ea82 0000 	eor.w	r0, r2, r0
 8000412:	ea83 0101 	eor.w	r1, r3, r1
 8000416:	ea80 0202 	eor.w	r2, r0, r2
 800041a:	ea81 0303 	eor.w	r3, r1, r3
 800041e:	2d36      	cmp	r5, #54	@ 0x36
 8000420:	bf88      	it	hi
 8000422:	bd30      	pophi	{r4, r5, pc}
 8000424:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000428:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800042c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000430:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000434:	d002      	beq.n	800043c <__adddf3+0x70>
 8000436:	4240      	negs	r0, r0
 8000438:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800043c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000440:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000444:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000448:	d002      	beq.n	8000450 <__adddf3+0x84>
 800044a:	4252      	negs	r2, r2
 800044c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000450:	ea94 0f05 	teq	r4, r5
 8000454:	f000 80a7 	beq.w	80005a6 <__adddf3+0x1da>
 8000458:	f1a4 0401 	sub.w	r4, r4, #1
 800045c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000460:	db0d      	blt.n	800047e <__adddf3+0xb2>
 8000462:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000466:	fa22 f205 	lsr.w	r2, r2, r5
 800046a:	1880      	adds	r0, r0, r2
 800046c:	f141 0100 	adc.w	r1, r1, #0
 8000470:	fa03 f20e 	lsl.w	r2, r3, lr
 8000474:	1880      	adds	r0, r0, r2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	4159      	adcs	r1, r3
 800047c:	e00e      	b.n	800049c <__adddf3+0xd0>
 800047e:	f1a5 0520 	sub.w	r5, r5, #32
 8000482:	f10e 0e20 	add.w	lr, lr, #32
 8000486:	2a01      	cmp	r2, #1
 8000488:	fa03 fc0e 	lsl.w	ip, r3, lr
 800048c:	bf28      	it	cs
 800048e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000492:	fa43 f305 	asr.w	r3, r3, r5
 8000496:	18c0      	adds	r0, r0, r3
 8000498:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800049c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004a0:	d507      	bpl.n	80004b2 <__adddf3+0xe6>
 80004a2:	f04f 0e00 	mov.w	lr, #0
 80004a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80004aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80004b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80004b6:	d31b      	bcc.n	80004f0 <__adddf3+0x124>
 80004b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004bc:	d30c      	bcc.n	80004d8 <__adddf3+0x10c>
 80004be:	0849      	lsrs	r1, r1, #1
 80004c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004c8:	f104 0401 	add.w	r4, r4, #1
 80004cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004d4:	f080 809a 	bcs.w	800060c <__adddf3+0x240>
 80004d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004dc:	bf08      	it	eq
 80004de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004e2:	f150 0000 	adcs.w	r0, r0, #0
 80004e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ea:	ea41 0105 	orr.w	r1, r1, r5
 80004ee:	bd30      	pop	{r4, r5, pc}
 80004f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004f4:	4140      	adcs	r0, r0
 80004f6:	eb41 0101 	adc.w	r1, r1, r1
 80004fa:	3c01      	subs	r4, #1
 80004fc:	bf28      	it	cs
 80004fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000502:	d2e9      	bcs.n	80004d8 <__adddf3+0x10c>
 8000504:	f091 0f00 	teq	r1, #0
 8000508:	bf04      	itt	eq
 800050a:	4601      	moveq	r1, r0
 800050c:	2000      	moveq	r0, #0
 800050e:	fab1 f381 	clz	r3, r1
 8000512:	bf08      	it	eq
 8000514:	3320      	addeq	r3, #32
 8000516:	f1a3 030b 	sub.w	r3, r3, #11
 800051a:	f1b3 0220 	subs.w	r2, r3, #32
 800051e:	da0c      	bge.n	800053a <__adddf3+0x16e>
 8000520:	320c      	adds	r2, #12
 8000522:	dd08      	ble.n	8000536 <__adddf3+0x16a>
 8000524:	f102 0c14 	add.w	ip, r2, #20
 8000528:	f1c2 020c 	rsb	r2, r2, #12
 800052c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000530:	fa21 f102 	lsr.w	r1, r1, r2
 8000534:	e00c      	b.n	8000550 <__adddf3+0x184>
 8000536:	f102 0214 	add.w	r2, r2, #20
 800053a:	bfd8      	it	le
 800053c:	f1c2 0c20 	rsble	ip, r2, #32
 8000540:	fa01 f102 	lsl.w	r1, r1, r2
 8000544:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000548:	bfdc      	itt	le
 800054a:	ea41 010c 	orrle.w	r1, r1, ip
 800054e:	4090      	lslle	r0, r2
 8000550:	1ae4      	subs	r4, r4, r3
 8000552:	bfa2      	ittt	ge
 8000554:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000558:	4329      	orrge	r1, r5
 800055a:	bd30      	popge	{r4, r5, pc}
 800055c:	ea6f 0404 	mvn.w	r4, r4
 8000560:	3c1f      	subs	r4, #31
 8000562:	da1c      	bge.n	800059e <__adddf3+0x1d2>
 8000564:	340c      	adds	r4, #12
 8000566:	dc0e      	bgt.n	8000586 <__adddf3+0x1ba>
 8000568:	f104 0414 	add.w	r4, r4, #20
 800056c:	f1c4 0220 	rsb	r2, r4, #32
 8000570:	fa20 f004 	lsr.w	r0, r0, r4
 8000574:	fa01 f302 	lsl.w	r3, r1, r2
 8000578:	ea40 0003 	orr.w	r0, r0, r3
 800057c:	fa21 f304 	lsr.w	r3, r1, r4
 8000580:	ea45 0103 	orr.w	r1, r5, r3
 8000584:	bd30      	pop	{r4, r5, pc}
 8000586:	f1c4 040c 	rsb	r4, r4, #12
 800058a:	f1c4 0220 	rsb	r2, r4, #32
 800058e:	fa20 f002 	lsr.w	r0, r0, r2
 8000592:	fa01 f304 	lsl.w	r3, r1, r4
 8000596:	ea40 0003 	orr.w	r0, r0, r3
 800059a:	4629      	mov	r1, r5
 800059c:	bd30      	pop	{r4, r5, pc}
 800059e:	fa21 f004 	lsr.w	r0, r1, r4
 80005a2:	4629      	mov	r1, r5
 80005a4:	bd30      	pop	{r4, r5, pc}
 80005a6:	f094 0f00 	teq	r4, #0
 80005aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80005ae:	bf06      	itte	eq
 80005b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80005b4:	3401      	addeq	r4, #1
 80005b6:	3d01      	subne	r5, #1
 80005b8:	e74e      	b.n	8000458 <__adddf3+0x8c>
 80005ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005be:	bf18      	it	ne
 80005c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005c4:	d029      	beq.n	800061a <__adddf3+0x24e>
 80005c6:	ea94 0f05 	teq	r4, r5
 80005ca:	bf08      	it	eq
 80005cc:	ea90 0f02 	teqeq	r0, r2
 80005d0:	d005      	beq.n	80005de <__adddf3+0x212>
 80005d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005d6:	bf04      	itt	eq
 80005d8:	4619      	moveq	r1, r3
 80005da:	4610      	moveq	r0, r2
 80005dc:	bd30      	pop	{r4, r5, pc}
 80005de:	ea91 0f03 	teq	r1, r3
 80005e2:	bf1e      	ittt	ne
 80005e4:	2100      	movne	r1, #0
 80005e6:	2000      	movne	r0, #0
 80005e8:	bd30      	popne	{r4, r5, pc}
 80005ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ee:	d105      	bne.n	80005fc <__adddf3+0x230>
 80005f0:	0040      	lsls	r0, r0, #1
 80005f2:	4149      	adcs	r1, r1
 80005f4:	bf28      	it	cs
 80005f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005fa:	bd30      	pop	{r4, r5, pc}
 80005fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000600:	bf3c      	itt	cc
 8000602:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000606:	bd30      	popcc	{r4, r5, pc}
 8000608:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800060c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000610:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000614:	f04f 0000 	mov.w	r0, #0
 8000618:	bd30      	pop	{r4, r5, pc}
 800061a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061e:	bf1a      	itte	ne
 8000620:	4619      	movne	r1, r3
 8000622:	4610      	movne	r0, r2
 8000624:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000628:	bf1c      	itt	ne
 800062a:	460b      	movne	r3, r1
 800062c:	4602      	movne	r2, r0
 800062e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000632:	bf06      	itte	eq
 8000634:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000638:	ea91 0f03 	teqeq	r1, r3
 800063c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000640:	bd30      	pop	{r4, r5, pc}
 8000642:	bf00      	nop

08000644 <__aeabi_ui2d>:
 8000644:	f090 0f00 	teq	r0, #0
 8000648:	bf04      	itt	eq
 800064a:	2100      	moveq	r1, #0
 800064c:	4770      	bxeq	lr
 800064e:	b530      	push	{r4, r5, lr}
 8000650:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000654:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000658:	f04f 0500 	mov.w	r5, #0
 800065c:	f04f 0100 	mov.w	r1, #0
 8000660:	e750      	b.n	8000504 <__adddf3+0x138>
 8000662:	bf00      	nop

08000664 <__aeabi_i2d>:
 8000664:	f090 0f00 	teq	r0, #0
 8000668:	bf04      	itt	eq
 800066a:	2100      	moveq	r1, #0
 800066c:	4770      	bxeq	lr
 800066e:	b530      	push	{r4, r5, lr}
 8000670:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000674:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000678:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800067c:	bf48      	it	mi
 800067e:	4240      	negmi	r0, r0
 8000680:	f04f 0100 	mov.w	r1, #0
 8000684:	e73e      	b.n	8000504 <__adddf3+0x138>
 8000686:	bf00      	nop

08000688 <__aeabi_f2d>:
 8000688:	0042      	lsls	r2, r0, #1
 800068a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800068e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000692:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000696:	bf1f      	itttt	ne
 8000698:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800069c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80006a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80006a4:	4770      	bxne	lr
 80006a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80006aa:	bf08      	it	eq
 80006ac:	4770      	bxeq	lr
 80006ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80006b2:	bf04      	itt	eq
 80006b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80006b8:	4770      	bxeq	lr
 80006ba:	b530      	push	{r4, r5, lr}
 80006bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	e71c      	b.n	8000504 <__adddf3+0x138>
 80006ca:	bf00      	nop

080006cc <__aeabi_ul2d>:
 80006cc:	ea50 0201 	orrs.w	r2, r0, r1
 80006d0:	bf08      	it	eq
 80006d2:	4770      	bxeq	lr
 80006d4:	b530      	push	{r4, r5, lr}
 80006d6:	f04f 0500 	mov.w	r5, #0
 80006da:	e00a      	b.n	80006f2 <__aeabi_l2d+0x16>

080006dc <__aeabi_l2d>:
 80006dc:	ea50 0201 	orrs.w	r2, r0, r1
 80006e0:	bf08      	it	eq
 80006e2:	4770      	bxeq	lr
 80006e4:	b530      	push	{r4, r5, lr}
 80006e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ea:	d502      	bpl.n	80006f2 <__aeabi_l2d+0x16>
 80006ec:	4240      	negs	r0, r0
 80006ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006fe:	f43f aed8 	beq.w	80004b2 <__adddf3+0xe6>
 8000702:	f04f 0203 	mov.w	r2, #3
 8000706:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800070a:	bf18      	it	ne
 800070c:	3203      	addne	r2, #3
 800070e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000712:	bf18      	it	ne
 8000714:	3203      	addne	r2, #3
 8000716:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800071a:	f1c2 0320 	rsb	r3, r2, #32
 800071e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000722:	fa20 f002 	lsr.w	r0, r0, r2
 8000726:	fa01 fe03 	lsl.w	lr, r1, r3
 800072a:	ea40 000e 	orr.w	r0, r0, lr
 800072e:	fa21 f102 	lsr.w	r1, r1, r2
 8000732:	4414      	add	r4, r2
 8000734:	e6bd      	b.n	80004b2 <__adddf3+0xe6>
 8000736:	bf00      	nop

08000738 <__aeabi_uldivmod>:
 8000738:	b953      	cbnz	r3, 8000750 <__aeabi_uldivmod+0x18>
 800073a:	b94a      	cbnz	r2, 8000750 <__aeabi_uldivmod+0x18>
 800073c:	2900      	cmp	r1, #0
 800073e:	bf08      	it	eq
 8000740:	2800      	cmpeq	r0, #0
 8000742:	bf1c      	itt	ne
 8000744:	f04f 31ff 	movne.w	r1, #4294967295
 8000748:	f04f 30ff 	movne.w	r0, #4294967295
 800074c:	f000 b9a2 	b.w	8000a94 <__aeabi_idiv0>
 8000750:	f1ad 0c08 	sub.w	ip, sp, #8
 8000754:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000758:	f000 f83e 	bl	80007d8 <__udivmoddi4>
 800075c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000760:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000764:	b004      	add	sp, #16
 8000766:	4770      	bx	lr

08000768 <__aeabi_d2lz>:
 8000768:	b508      	push	{r3, lr}
 800076a:	4602      	mov	r2, r0
 800076c:	460b      	mov	r3, r1
 800076e:	ec43 2b17 	vmov	d7, r2, r3
 8000772:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800077a:	d403      	bmi.n	8000784 <__aeabi_d2lz+0x1c>
 800077c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000780:	f000 b80a 	b.w	8000798 <__aeabi_d2ulz>
 8000784:	eeb1 7b47 	vneg.f64	d7, d7
 8000788:	ec51 0b17 	vmov	r0, r1, d7
 800078c:	f000 f804 	bl	8000798 <__aeabi_d2ulz>
 8000790:	4240      	negs	r0, r0
 8000792:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000796:	bd08      	pop	{r3, pc}

08000798 <__aeabi_d2ulz>:
 8000798:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 80007c8 <__aeabi_d2ulz+0x30>
 800079c:	ec41 0b17 	vmov	d7, r0, r1
 80007a0:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 80007d0 <__aeabi_d2ulz+0x38>
 80007a4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80007a8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80007ac:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80007b0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80007b4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80007b8:	ee16 1a10 	vmov	r1, s12
 80007bc:	ee17 0a90 	vmov	r0, s15
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	f3af 8000 	nop.w
 80007c8:	00000000 	.word	0x00000000
 80007cc:	3df00000 	.word	0x3df00000
 80007d0:	00000000 	.word	0x00000000
 80007d4:	41f00000 	.word	0x41f00000

080007d8 <__udivmoddi4>:
 80007d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007dc:	9d08      	ldr	r5, [sp, #32]
 80007de:	460c      	mov	r4, r1
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d14e      	bne.n	8000882 <__udivmoddi4+0xaa>
 80007e4:	4694      	mov	ip, r2
 80007e6:	458c      	cmp	ip, r1
 80007e8:	4686      	mov	lr, r0
 80007ea:	fab2 f282 	clz	r2, r2
 80007ee:	d962      	bls.n	80008b6 <__udivmoddi4+0xde>
 80007f0:	b14a      	cbz	r2, 8000806 <__udivmoddi4+0x2e>
 80007f2:	f1c2 0320 	rsb	r3, r2, #32
 80007f6:	4091      	lsls	r1, r2
 80007f8:	fa20 f303 	lsr.w	r3, r0, r3
 80007fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000800:	4319      	orrs	r1, r3
 8000802:	fa00 fe02 	lsl.w	lr, r0, r2
 8000806:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800080a:	fa1f f68c 	uxth.w	r6, ip
 800080e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000812:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000816:	fb07 1114 	mls	r1, r7, r4, r1
 800081a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800081e:	fb04 f106 	mul.w	r1, r4, r6
 8000822:	4299      	cmp	r1, r3
 8000824:	d90a      	bls.n	800083c <__udivmoddi4+0x64>
 8000826:	eb1c 0303 	adds.w	r3, ip, r3
 800082a:	f104 30ff 	add.w	r0, r4, #4294967295
 800082e:	f080 8112 	bcs.w	8000a56 <__udivmoddi4+0x27e>
 8000832:	4299      	cmp	r1, r3
 8000834:	f240 810f 	bls.w	8000a56 <__udivmoddi4+0x27e>
 8000838:	3c02      	subs	r4, #2
 800083a:	4463      	add	r3, ip
 800083c:	1a59      	subs	r1, r3, r1
 800083e:	fa1f f38e 	uxth.w	r3, lr
 8000842:	fbb1 f0f7 	udiv	r0, r1, r7
 8000846:	fb07 1110 	mls	r1, r7, r0, r1
 800084a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800084e:	fb00 f606 	mul.w	r6, r0, r6
 8000852:	429e      	cmp	r6, r3
 8000854:	d90a      	bls.n	800086c <__udivmoddi4+0x94>
 8000856:	eb1c 0303 	adds.w	r3, ip, r3
 800085a:	f100 31ff 	add.w	r1, r0, #4294967295
 800085e:	f080 80fc 	bcs.w	8000a5a <__udivmoddi4+0x282>
 8000862:	429e      	cmp	r6, r3
 8000864:	f240 80f9 	bls.w	8000a5a <__udivmoddi4+0x282>
 8000868:	4463      	add	r3, ip
 800086a:	3802      	subs	r0, #2
 800086c:	1b9b      	subs	r3, r3, r6
 800086e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000872:	2100      	movs	r1, #0
 8000874:	b11d      	cbz	r5, 800087e <__udivmoddi4+0xa6>
 8000876:	40d3      	lsrs	r3, r2
 8000878:	2200      	movs	r2, #0
 800087a:	e9c5 3200 	strd	r3, r2, [r5]
 800087e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000882:	428b      	cmp	r3, r1
 8000884:	d905      	bls.n	8000892 <__udivmoddi4+0xba>
 8000886:	b10d      	cbz	r5, 800088c <__udivmoddi4+0xb4>
 8000888:	e9c5 0100 	strd	r0, r1, [r5]
 800088c:	2100      	movs	r1, #0
 800088e:	4608      	mov	r0, r1
 8000890:	e7f5      	b.n	800087e <__udivmoddi4+0xa6>
 8000892:	fab3 f183 	clz	r1, r3
 8000896:	2900      	cmp	r1, #0
 8000898:	d146      	bne.n	8000928 <__udivmoddi4+0x150>
 800089a:	42a3      	cmp	r3, r4
 800089c:	d302      	bcc.n	80008a4 <__udivmoddi4+0xcc>
 800089e:	4290      	cmp	r0, r2
 80008a0:	f0c0 80f0 	bcc.w	8000a84 <__udivmoddi4+0x2ac>
 80008a4:	1a86      	subs	r6, r0, r2
 80008a6:	eb64 0303 	sbc.w	r3, r4, r3
 80008aa:	2001      	movs	r0, #1
 80008ac:	2d00      	cmp	r5, #0
 80008ae:	d0e6      	beq.n	800087e <__udivmoddi4+0xa6>
 80008b0:	e9c5 6300 	strd	r6, r3, [r5]
 80008b4:	e7e3      	b.n	800087e <__udivmoddi4+0xa6>
 80008b6:	2a00      	cmp	r2, #0
 80008b8:	f040 8090 	bne.w	80009dc <__udivmoddi4+0x204>
 80008bc:	eba1 040c 	sub.w	r4, r1, ip
 80008c0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008c4:	fa1f f78c 	uxth.w	r7, ip
 80008c8:	2101      	movs	r1, #1
 80008ca:	fbb4 f6f8 	udiv	r6, r4, r8
 80008ce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008d2:	fb08 4416 	mls	r4, r8, r6, r4
 80008d6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008da:	fb07 f006 	mul.w	r0, r7, r6
 80008de:	4298      	cmp	r0, r3
 80008e0:	d908      	bls.n	80008f4 <__udivmoddi4+0x11c>
 80008e2:	eb1c 0303 	adds.w	r3, ip, r3
 80008e6:	f106 34ff 	add.w	r4, r6, #4294967295
 80008ea:	d202      	bcs.n	80008f2 <__udivmoddi4+0x11a>
 80008ec:	4298      	cmp	r0, r3
 80008ee:	f200 80cd 	bhi.w	8000a8c <__udivmoddi4+0x2b4>
 80008f2:	4626      	mov	r6, r4
 80008f4:	1a1c      	subs	r4, r3, r0
 80008f6:	fa1f f38e 	uxth.w	r3, lr
 80008fa:	fbb4 f0f8 	udiv	r0, r4, r8
 80008fe:	fb08 4410 	mls	r4, r8, r0, r4
 8000902:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000906:	fb00 f707 	mul.w	r7, r0, r7
 800090a:	429f      	cmp	r7, r3
 800090c:	d908      	bls.n	8000920 <__udivmoddi4+0x148>
 800090e:	eb1c 0303 	adds.w	r3, ip, r3
 8000912:	f100 34ff 	add.w	r4, r0, #4294967295
 8000916:	d202      	bcs.n	800091e <__udivmoddi4+0x146>
 8000918:	429f      	cmp	r7, r3
 800091a:	f200 80b0 	bhi.w	8000a7e <__udivmoddi4+0x2a6>
 800091e:	4620      	mov	r0, r4
 8000920:	1bdb      	subs	r3, r3, r7
 8000922:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000926:	e7a5      	b.n	8000874 <__udivmoddi4+0x9c>
 8000928:	f1c1 0620 	rsb	r6, r1, #32
 800092c:	408b      	lsls	r3, r1
 800092e:	fa22 f706 	lsr.w	r7, r2, r6
 8000932:	431f      	orrs	r7, r3
 8000934:	fa20 fc06 	lsr.w	ip, r0, r6
 8000938:	fa04 f301 	lsl.w	r3, r4, r1
 800093c:	ea43 030c 	orr.w	r3, r3, ip
 8000940:	40f4      	lsrs	r4, r6
 8000942:	fa00 f801 	lsl.w	r8, r0, r1
 8000946:	0c38      	lsrs	r0, r7, #16
 8000948:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800094c:	fbb4 fef0 	udiv	lr, r4, r0
 8000950:	fa1f fc87 	uxth.w	ip, r7
 8000954:	fb00 441e 	mls	r4, r0, lr, r4
 8000958:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800095c:	fb0e f90c 	mul.w	r9, lr, ip
 8000960:	45a1      	cmp	r9, r4
 8000962:	fa02 f201 	lsl.w	r2, r2, r1
 8000966:	d90a      	bls.n	800097e <__udivmoddi4+0x1a6>
 8000968:	193c      	adds	r4, r7, r4
 800096a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800096e:	f080 8084 	bcs.w	8000a7a <__udivmoddi4+0x2a2>
 8000972:	45a1      	cmp	r9, r4
 8000974:	f240 8081 	bls.w	8000a7a <__udivmoddi4+0x2a2>
 8000978:	f1ae 0e02 	sub.w	lr, lr, #2
 800097c:	443c      	add	r4, r7
 800097e:	eba4 0409 	sub.w	r4, r4, r9
 8000982:	fa1f f983 	uxth.w	r9, r3
 8000986:	fbb4 f3f0 	udiv	r3, r4, r0
 800098a:	fb00 4413 	mls	r4, r0, r3, r4
 800098e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000992:	fb03 fc0c 	mul.w	ip, r3, ip
 8000996:	45a4      	cmp	ip, r4
 8000998:	d907      	bls.n	80009aa <__udivmoddi4+0x1d2>
 800099a:	193c      	adds	r4, r7, r4
 800099c:	f103 30ff 	add.w	r0, r3, #4294967295
 80009a0:	d267      	bcs.n	8000a72 <__udivmoddi4+0x29a>
 80009a2:	45a4      	cmp	ip, r4
 80009a4:	d965      	bls.n	8000a72 <__udivmoddi4+0x29a>
 80009a6:	3b02      	subs	r3, #2
 80009a8:	443c      	add	r4, r7
 80009aa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80009ae:	fba0 9302 	umull	r9, r3, r0, r2
 80009b2:	eba4 040c 	sub.w	r4, r4, ip
 80009b6:	429c      	cmp	r4, r3
 80009b8:	46ce      	mov	lr, r9
 80009ba:	469c      	mov	ip, r3
 80009bc:	d351      	bcc.n	8000a62 <__udivmoddi4+0x28a>
 80009be:	d04e      	beq.n	8000a5e <__udivmoddi4+0x286>
 80009c0:	b155      	cbz	r5, 80009d8 <__udivmoddi4+0x200>
 80009c2:	ebb8 030e 	subs.w	r3, r8, lr
 80009c6:	eb64 040c 	sbc.w	r4, r4, ip
 80009ca:	fa04 f606 	lsl.w	r6, r4, r6
 80009ce:	40cb      	lsrs	r3, r1
 80009d0:	431e      	orrs	r6, r3
 80009d2:	40cc      	lsrs	r4, r1
 80009d4:	e9c5 6400 	strd	r6, r4, [r5]
 80009d8:	2100      	movs	r1, #0
 80009da:	e750      	b.n	800087e <__udivmoddi4+0xa6>
 80009dc:	f1c2 0320 	rsb	r3, r2, #32
 80009e0:	fa20 f103 	lsr.w	r1, r0, r3
 80009e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80009e8:	fa24 f303 	lsr.w	r3, r4, r3
 80009ec:	4094      	lsls	r4, r2
 80009ee:	430c      	orrs	r4, r1
 80009f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009f4:	fa00 fe02 	lsl.w	lr, r0, r2
 80009f8:	fa1f f78c 	uxth.w	r7, ip
 80009fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a00:	fb08 3110 	mls	r1, r8, r0, r3
 8000a04:	0c23      	lsrs	r3, r4, #16
 8000a06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a0a:	fb00 f107 	mul.w	r1, r0, r7
 8000a0e:	4299      	cmp	r1, r3
 8000a10:	d908      	bls.n	8000a24 <__udivmoddi4+0x24c>
 8000a12:	eb1c 0303 	adds.w	r3, ip, r3
 8000a16:	f100 36ff 	add.w	r6, r0, #4294967295
 8000a1a:	d22c      	bcs.n	8000a76 <__udivmoddi4+0x29e>
 8000a1c:	4299      	cmp	r1, r3
 8000a1e:	d92a      	bls.n	8000a76 <__udivmoddi4+0x29e>
 8000a20:	3802      	subs	r0, #2
 8000a22:	4463      	add	r3, ip
 8000a24:	1a5b      	subs	r3, r3, r1
 8000a26:	b2a4      	uxth	r4, r4
 8000a28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000a2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000a30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a34:	fb01 f307 	mul.w	r3, r1, r7
 8000a38:	42a3      	cmp	r3, r4
 8000a3a:	d908      	bls.n	8000a4e <__udivmoddi4+0x276>
 8000a3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a40:	f101 36ff 	add.w	r6, r1, #4294967295
 8000a44:	d213      	bcs.n	8000a6e <__udivmoddi4+0x296>
 8000a46:	42a3      	cmp	r3, r4
 8000a48:	d911      	bls.n	8000a6e <__udivmoddi4+0x296>
 8000a4a:	3902      	subs	r1, #2
 8000a4c:	4464      	add	r4, ip
 8000a4e:	1ae4      	subs	r4, r4, r3
 8000a50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000a54:	e739      	b.n	80008ca <__udivmoddi4+0xf2>
 8000a56:	4604      	mov	r4, r0
 8000a58:	e6f0      	b.n	800083c <__udivmoddi4+0x64>
 8000a5a:	4608      	mov	r0, r1
 8000a5c:	e706      	b.n	800086c <__udivmoddi4+0x94>
 8000a5e:	45c8      	cmp	r8, r9
 8000a60:	d2ae      	bcs.n	80009c0 <__udivmoddi4+0x1e8>
 8000a62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000a66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000a6a:	3801      	subs	r0, #1
 8000a6c:	e7a8      	b.n	80009c0 <__udivmoddi4+0x1e8>
 8000a6e:	4631      	mov	r1, r6
 8000a70:	e7ed      	b.n	8000a4e <__udivmoddi4+0x276>
 8000a72:	4603      	mov	r3, r0
 8000a74:	e799      	b.n	80009aa <__udivmoddi4+0x1d2>
 8000a76:	4630      	mov	r0, r6
 8000a78:	e7d4      	b.n	8000a24 <__udivmoddi4+0x24c>
 8000a7a:	46d6      	mov	lr, sl
 8000a7c:	e77f      	b.n	800097e <__udivmoddi4+0x1a6>
 8000a7e:	4463      	add	r3, ip
 8000a80:	3802      	subs	r0, #2
 8000a82:	e74d      	b.n	8000920 <__udivmoddi4+0x148>
 8000a84:	4606      	mov	r6, r0
 8000a86:	4623      	mov	r3, r4
 8000a88:	4608      	mov	r0, r1
 8000a8a:	e70f      	b.n	80008ac <__udivmoddi4+0xd4>
 8000a8c:	3e02      	subs	r6, #2
 8000a8e:	4463      	add	r3, ip
 8000a90:	e730      	b.n	80008f4 <__udivmoddi4+0x11c>
 8000a92:	bf00      	nop

08000a94 <__aeabi_idiv0>:
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af02      	add	r7, sp, #8
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000a9e:	4b43      	ldr	r3, [pc, #268]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000aa0:	4a43      	ldr	r2, [pc, #268]	@ (8000bb0 <MX_FDCAN1_Init+0x118>)
 8000aa2:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000aa4:	4b41      	ldr	r3, [pc, #260]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000aaa:	4b40      	ldr	r3, [pc, #256]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000ab0:	4b3e      	ldr	r3, [pc, #248]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000ab6:	4b3d      	ldr	r3, [pc, #244]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000abc:	4b3b      	ldr	r3, [pc, #236]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 10;
 8000ac2:	4b3a      	ldr	r3, [pc, #232]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000ac4:	220a      	movs	r2, #10
 8000ac6:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 8;
 8000ac8:	4b38      	ldr	r3, [pc, #224]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000aca:	2208      	movs	r2, #8
 8000acc:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8000ace:	4b37      	ldr	r3, [pc, #220]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000ad0:	2202      	movs	r2, #2
 8000ad2:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000ad4:	4b35      	ldr	r3, [pc, #212]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000ad6:	2202      	movs	r2, #2
 8000ad8:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000ada:	4b34      	ldr	r3, [pc, #208]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000adc:	2201      	movs	r2, #1
 8000ade:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 10;
 8000ae0:	4b32      	ldr	r3, [pc, #200]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000ae2:	220a      	movs	r2, #10
 8000ae4:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 2;
 8000ae6:	4b31      	ldr	r3, [pc, #196]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000ae8:	2202      	movs	r2, #2
 8000aea:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 2;
 8000aec:	4b2f      	ldr	r3, [pc, #188]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000aee:	2202      	movs	r2, #2
 8000af0:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000af2:	4b2e      	ldr	r3, [pc, #184]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8000af8:	4b2c      	ldr	r3, [pc, #176]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 1;
 8000afe:	4b2b      	ldr	r3, [pc, #172]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000b00:	2201      	movs	r2, #1
 8000b02:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 4;
 8000b04:	4b29      	ldr	r3, [pc, #164]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000b06:	2204      	movs	r2, #4
 8000b08:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000b0a:	4b28      	ldr	r3, [pc, #160]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000b0c:	2204      	movs	r2, #4
 8000b0e:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000b10:	4b26      	ldr	r3, [pc, #152]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000b16:	4b25      	ldr	r3, [pc, #148]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000b18:	2204      	movs	r2, #4
 8000b1a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000b1c:	4b23      	ldr	r3, [pc, #140]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000b22:	4b22      	ldr	r3, [pc, #136]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000b24:	2204      	movs	r2, #4
 8000b26:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000b28:	4b20      	ldr	r3, [pc, #128]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000b2e:	4b1f      	ldr	r3, [pc, #124]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 1;
 8000b34:	4b1d      	ldr	r3, [pc, #116]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000b36:	2201      	movs	r2, #1
 8000b38:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000b3a:	4b1c      	ldr	r3, [pc, #112]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000b40:	4b1a      	ldr	r3, [pc, #104]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000b42:	2204      	movs	r2, #4
 8000b44:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000b46:	4819      	ldr	r0, [pc, #100]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000b48:	f003 f8c2 	bl	8003cd0 <HAL_FDCAN_Init>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <MX_FDCAN1_Init+0xbe>
  {
    Error_Handler();
 8000b52:	f000 fea9 	bl	80018a8 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
//配置RX滤波
	hfdcan1_RX_Filter.IdType = FDCAN_EXTENDED_ID;       //标准 IDFDCAN_STANDARD_ID
 8000b56:	4b17      	ldr	r3, [pc, #92]	@ (8000bb4 <MX_FDCAN1_Init+0x11c>)
 8000b58:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000b5c:	601a      	str	r2, [r3, #0]
	hfdcan1_RX_Filter.FilterIndex = 0;                           //滤波器索�?????????
 8000b5e:	4b15      	ldr	r3, [pc, #84]	@ (8000bb4 <MX_FDCAN1_Init+0x11c>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	605a      	str	r2, [r3, #4]
	hfdcan1_RX_Filter.FilterType = FDCAN_FILTER_MASK;            //滤波器类�?????????
 8000b64:	4b13      	ldr	r3, [pc, #76]	@ (8000bb4 <MX_FDCAN1_Init+0x11c>)
 8000b66:	2202      	movs	r2, #2
 8000b68:	609a      	str	r2, [r3, #8]
	hfdcan1_RX_Filter.FilterConfig = FDCAN_FILTER_TO_RXFIFO0; //过滤�?????????0关联到FIFO0
 8000b6a:	4b12      	ldr	r3, [pc, #72]	@ (8000bb4 <MX_FDCAN1_Init+0x11c>)
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	60da      	str	r2, [r3, #12]
	hfdcan1_RX_Filter.FilterID1 = 0x000;                               //32位ID
 8000b70:	4b10      	ldr	r3, [pc, #64]	@ (8000bb4 <MX_FDCAN1_Init+0x11c>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	611a      	str	r2, [r3, #16]
	hfdcan1_RX_Filter.FilterID2 = 0x000; //如果FDCAN配置为传统模式的话，这里�?????????32位掩�?????????
 8000b76:	4b0f      	ldr	r3, [pc, #60]	@ (8000bb4 <MX_FDCAN1_Init+0x11c>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	615a      	str	r2, [r3, #20]
	HAL_FDCAN_ConfigFilter(&hfdcan1, &hfdcan1_RX_Filter);               //滤波器初始化
 8000b7c:	490d      	ldr	r1, [pc, #52]	@ (8000bb4 <MX_FDCAN1_Init+0x11c>)
 8000b7e:	480b      	ldr	r0, [pc, #44]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000b80:	f003 fa84 	bl	800408c <HAL_FDCAN_ConfigFilter>
	HAL_FDCAN_ConfigGlobalFilter(&hfdcan1, FDCAN_REJECT, FDCAN_REJECT, ENABLE,
 8000b84:	2301      	movs	r3, #1
 8000b86:	9300      	str	r3, [sp, #0]
 8000b88:	2301      	movs	r3, #1
 8000b8a:	2202      	movs	r2, #2
 8000b8c:	2102      	movs	r1, #2
 8000b8e:	4807      	ldr	r0, [pc, #28]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000b90:	f003 faf2 	bl	8004178 <HAL_FDCAN_ConfigGlobalFilter>
			ENABLE);
	HAL_FDCAN_Start(&hfdcan1);                               //�????启FDCAN
 8000b94:	4805      	ldr	r0, [pc, #20]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000b96:	f003 fb1c 	bl	80041d2 <HAL_FDCAN_Start>
	HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0);
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	2101      	movs	r1, #1
 8000b9e:	4803      	ldr	r0, [pc, #12]	@ (8000bac <MX_FDCAN1_Init+0x114>)
 8000ba0:	f003 fd0a 	bl	80045b8 <HAL_FDCAN_ActivateNotification>
  /* USER CODE END FDCAN1_Init 2 */

}
 8000ba4:	bf00      	nop
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	240002bc 	.word	0x240002bc
 8000bb0:	4000a000 	.word	0x4000a000
 8000bb4:	2400024c 	.word	0x2400024c

08000bb8 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b0b8      	sub	sp, #224	@ 0xe0
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc0:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	601a      	str	r2, [r3, #0]
 8000bc8:	605a      	str	r2, [r3, #4]
 8000bca:	609a      	str	r2, [r3, #8]
 8000bcc:	60da      	str	r2, [r3, #12]
 8000bce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bd0:	f107 0310 	add.w	r3, r7, #16
 8000bd4:	22b8      	movs	r2, #184	@ 0xb8
 8000bd6:	2100      	movs	r1, #0
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f00e fad6 	bl	800f18a <memset>
  if(fdcanHandle->Instance==FDCAN1)
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	4a2a      	ldr	r2, [pc, #168]	@ (8000c8c <HAL_FDCAN_MspInit+0xd4>)
 8000be4:	4293      	cmp	r3, r2
 8000be6:	d14c      	bne.n	8000c82 <HAL_FDCAN_MspInit+0xca>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000be8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000bec:	f04f 0300 	mov.w	r3, #0
 8000bf0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bf8:	f107 0310 	add.w	r3, r7, #16
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f005 fb99 	bl	8006334 <HAL_RCCEx_PeriphCLKConfig>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d001      	beq.n	8000c0c <HAL_FDCAN_MspInit+0x54>
    {
      Error_Handler();
 8000c08:	f000 fe4e 	bl	80018a8 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000c0c:	4b20      	ldr	r3, [pc, #128]	@ (8000c90 <HAL_FDCAN_MspInit+0xd8>)
 8000c0e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8000c12:	4a1f      	ldr	r2, [pc, #124]	@ (8000c90 <HAL_FDCAN_MspInit+0xd8>)
 8000c14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c18:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8000c1c:	4b1c      	ldr	r3, [pc, #112]	@ (8000c90 <HAL_FDCAN_MspInit+0xd8>)
 8000c1e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8000c22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000c26:	60fb      	str	r3, [r7, #12]
 8000c28:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c2a:	4b19      	ldr	r3, [pc, #100]	@ (8000c90 <HAL_FDCAN_MspInit+0xd8>)
 8000c2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c30:	4a17      	ldr	r2, [pc, #92]	@ (8000c90 <HAL_FDCAN_MspInit+0xd8>)
 8000c32:	f043 0308 	orr.w	r3, r3, #8
 8000c36:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c3a:	4b15      	ldr	r3, [pc, #84]	@ (8000c90 <HAL_FDCAN_MspInit+0xd8>)
 8000c3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c40:	f003 0308 	and.w	r3, r3, #8
 8000c44:	60bb      	str	r3, [r7, #8]
 8000c46:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000c48:	2303      	movs	r3, #3
 8000c4a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c4e:	2302      	movs	r3, #2
 8000c50:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c54:	2300      	movs	r3, #0
 8000c56:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000c60:	2309      	movs	r3, #9
 8000c62:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c66:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	4809      	ldr	r0, [pc, #36]	@ (8000c94 <HAL_FDCAN_MspInit+0xdc>)
 8000c6e:	f004 fa19 	bl	80050a4 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 2, 0);
 8000c72:	2200      	movs	r2, #0
 8000c74:	2102      	movs	r1, #2
 8000c76:	2013      	movs	r0, #19
 8000c78:	f002 fa19 	bl	80030ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000c7c:	2013      	movs	r0, #19
 8000c7e:	f002 fa30 	bl	80030e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8000c82:	bf00      	nop
 8000c84:	37e0      	adds	r7, #224	@ 0xe0
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	4000a000 	.word	0x4000a000
 8000c90:	58024400 	.word	0x58024400
 8000c94:	58020c00 	.word	0x58020c00

08000c98 <FDCAN_Send_Msg>:
  }
}

/* USER CODE BEGIN 1 */
void FDCAN_Send_Msg(uint8_t *msg, uint32_t len)
{
 8000c98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000c9c:	b087      	sub	sp, #28
 8000c9e:	af00      	add	r7, sp, #0
 8000ca0:	6078      	str	r0, [r7, #4]
 8000ca2:	6039      	str	r1, [r7, #0]
 8000ca4:	466b      	mov	r3, sp
 8000ca6:	461e      	mov	r6, r3
	uint8_t i = 0, j = 0, k = 0, l = 0, packNum = 0;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	75fb      	strb	r3, [r7, #23]
 8000cac:	2300      	movs	r3, #0
 8000cae:	753b      	strb	r3, [r7, #20]
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	74fb      	strb	r3, [r7, #19]
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	75bb      	strb	r3, [r7, #22]
 8000cb8:	2300      	movs	r3, #0
 8000cba:	757b      	strb	r3, [r7, #21]
	uint8_t TxData[len];
 8000cbc:	6839      	ldr	r1, [r7, #0]
 8000cbe:	460b      	mov	r3, r1
 8000cc0:	3b01      	subs	r3, #1
 8000cc2:	60fb      	str	r3, [r7, #12]
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	4688      	mov	r8, r1
 8000cc8:	4699      	mov	r9, r3
 8000cca:	f04f 0200 	mov.w	r2, #0
 8000cce:	f04f 0300 	mov.w	r3, #0
 8000cd2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000cd6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000cda:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000cde:	2300      	movs	r3, #0
 8000ce0:	460c      	mov	r4, r1
 8000ce2:	461d      	mov	r5, r3
 8000ce4:	f04f 0200 	mov.w	r2, #0
 8000ce8:	f04f 0300 	mov.w	r3, #0
 8000cec:	00eb      	lsls	r3, r5, #3
 8000cee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000cf2:	00e2      	lsls	r2, r4, #3
 8000cf4:	1dcb      	adds	r3, r1, #7
 8000cf6:	08db      	lsrs	r3, r3, #3
 8000cf8:	00db      	lsls	r3, r3, #3
 8000cfa:	ebad 0d03 	sub.w	sp, sp, r3
 8000cfe:	466b      	mov	r3, sp
 8000d00:	3300      	adds	r3, #0
 8000d02:	60bb      	str	r3, [r7, #8]
	j = len - 2;
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	b2db      	uxtb	r3, r3
 8000d08:	3b02      	subs	r3, #2
 8000d0a:	753b      	strb	r3, [r7, #20]
	// 除去ID地址和功能码后的数据长度
	TxData[0] = msg[1];
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	785a      	ldrb	r2, [r3, #1]
 8000d10:	68bb      	ldr	r3, [r7, #8]
 8000d12:	701a      	strb	r2, [r3, #0]
	// 发�?�数�?????????
	while (i < j)
 8000d14:	e062      	b.n	8000ddc <FDCAN_Send_Msg+0x144>
	{
		// 数据个数
		k = j - i;
 8000d16:	7d3a      	ldrb	r2, [r7, #20]
 8000d18:	7dfb      	ldrb	r3, [r7, #23]
 8000d1a:	1ad3      	subs	r3, r2, r3
 8000d1c:	74fb      	strb	r3, [r7, #19]
		fdcan_TxHeader.Identifier = ((uint32_t) msg[0] << 8)
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	021a      	lsls	r2, r3, #8
				| (uint32_t) packNum;  //32位ID   0x00
 8000d24:	7d7b      	ldrb	r3, [r7, #21]
 8000d26:	4313      	orrs	r3, r2
		fdcan_TxHeader.Identifier = ((uint32_t) msg[0] << 8)
 8000d28:	4a31      	ldr	r2, [pc, #196]	@ (8000df0 <FDCAN_Send_Msg+0x158>)
 8000d2a:	6013      	str	r3, [r2, #0]
		fdcan_TxHeader.IdType = FDCAN_EXTENDED_ID;      //ID   FDCAN_STANDARD_ID
 8000d2c:	4b30      	ldr	r3, [pc, #192]	@ (8000df0 <FDCAN_Send_Msg+0x158>)
 8000d2e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d32:	605a      	str	r2, [r3, #4]
		fdcan_TxHeader.TxFrameType = FDCAN_DATA_FRAME;             //数据�?????????
 8000d34:	4b2e      	ldr	r3, [pc, #184]	@ (8000df0 <FDCAN_Send_Msg+0x158>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	609a      	str	r2, [r3, #8]
		//    fdcan_TxHeader.DataLength=len;              //数据长度
		fdcan_TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000d3a:	4b2d      	ldr	r3, [pc, #180]	@ (8000df0 <FDCAN_Send_Msg+0x158>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	611a      	str	r2, [r3, #16]
		fdcan_TxHeader.BitRateSwitch = FDCAN_BRS_OFF;               //关闭速率切换
 8000d40:	4b2b      	ldr	r3, [pc, #172]	@ (8000df0 <FDCAN_Send_Msg+0x158>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	615a      	str	r2, [r3, #20]
		fdcan_TxHeader.FDFormat = FDCAN_CLASSIC_CAN;                //传统的CAN模式
 8000d46:	4b2a      	ldr	r3, [pc, #168]	@ (8000df0 <FDCAN_Send_Msg+0x158>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	619a      	str	r2, [r3, #24]
		fdcan_TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;  //无发送事�?????????
 8000d4c:	4b28      	ldr	r3, [pc, #160]	@ (8000df0 <FDCAN_Send_Msg+0x158>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	61da      	str	r2, [r3, #28]
		fdcan_TxHeader.MessageMarker = 0;
 8000d52:	4b27      	ldr	r3, [pc, #156]	@ (8000df0 <FDCAN_Send_Msg+0x158>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	621a      	str	r2, [r3, #32]
		//小于8字节命令
		if (k < 8)
 8000d58:	7cfb      	ldrb	r3, [r7, #19]
 8000d5a:	2b07      	cmp	r3, #7
 8000d5c:	d81b      	bhi.n	8000d96 <FDCAN_Send_Msg+0xfe>
		{
			for (l = 0; l < k; l++, i++)
 8000d5e:	2300      	movs	r3, #0
 8000d60:	75bb      	strb	r3, [r7, #22]
 8000d62:	e00e      	b.n	8000d82 <FDCAN_Send_Msg+0xea>
			{
				TxData[l + 1] = msg[i + 2];
 8000d64:	7dfb      	ldrb	r3, [r7, #23]
 8000d66:	3302      	adds	r3, #2
 8000d68:	687a      	ldr	r2, [r7, #4]
 8000d6a:	441a      	add	r2, r3
 8000d6c:	7dbb      	ldrb	r3, [r7, #22]
 8000d6e:	3301      	adds	r3, #1
 8000d70:	7811      	ldrb	r1, [r2, #0]
 8000d72:	68ba      	ldr	r2, [r7, #8]
 8000d74:	54d1      	strb	r1, [r2, r3]
			for (l = 0; l < k; l++, i++)
 8000d76:	7dbb      	ldrb	r3, [r7, #22]
 8000d78:	3301      	adds	r3, #1
 8000d7a:	75bb      	strb	r3, [r7, #22]
 8000d7c:	7dfb      	ldrb	r3, [r7, #23]
 8000d7e:	3301      	adds	r3, #1
 8000d80:	75fb      	strb	r3, [r7, #23]
 8000d82:	7dba      	ldrb	r2, [r7, #22]
 8000d84:	7cfb      	ldrb	r3, [r7, #19]
 8000d86:	429a      	cmp	r2, r3
 8000d88:	d3ec      	bcc.n	8000d64 <FDCAN_Send_Msg+0xcc>
			}
			fdcan_TxHeader.DataLength = k + 1;
 8000d8a:	7cfb      	ldrb	r3, [r7, #19]
 8000d8c:	3301      	adds	r3, #1
 8000d8e:	461a      	mov	r2, r3
 8000d90:	4b17      	ldr	r3, [pc, #92]	@ (8000df0 <FDCAN_Send_Msg+0x158>)
 8000d92:	60da      	str	r2, [r3, #12]
 8000d94:	e017      	b.n	8000dc6 <FDCAN_Send_Msg+0x12e>
		}
		// 大于8字节命令，分包发送，每包数据�?????????多发�?????????8个字�?????????
		else
		{
			for (l = 0; l < 7; l++, i++)
 8000d96:	2300      	movs	r3, #0
 8000d98:	75bb      	strb	r3, [r7, #22]
 8000d9a:	e00e      	b.n	8000dba <FDCAN_Send_Msg+0x122>
			{
				TxData[l + 1] = msg[i + 2];
 8000d9c:	7dfb      	ldrb	r3, [r7, #23]
 8000d9e:	3302      	adds	r3, #2
 8000da0:	687a      	ldr	r2, [r7, #4]
 8000da2:	441a      	add	r2, r3
 8000da4:	7dbb      	ldrb	r3, [r7, #22]
 8000da6:	3301      	adds	r3, #1
 8000da8:	7811      	ldrb	r1, [r2, #0]
 8000daa:	68ba      	ldr	r2, [r7, #8]
 8000dac:	54d1      	strb	r1, [r2, r3]
			for (l = 0; l < 7; l++, i++)
 8000dae:	7dbb      	ldrb	r3, [r7, #22]
 8000db0:	3301      	adds	r3, #1
 8000db2:	75bb      	strb	r3, [r7, #22]
 8000db4:	7dfb      	ldrb	r3, [r7, #23]
 8000db6:	3301      	adds	r3, #1
 8000db8:	75fb      	strb	r3, [r7, #23]
 8000dba:	7dbb      	ldrb	r3, [r7, #22]
 8000dbc:	2b06      	cmp	r3, #6
 8000dbe:	d9ed      	bls.n	8000d9c <FDCAN_Send_Msg+0x104>
			}
			fdcan_TxHeader.DataLength = 8;
 8000dc0:	4b0b      	ldr	r3, [pc, #44]	@ (8000df0 <FDCAN_Send_Msg+0x158>)
 8000dc2:	2208      	movs	r2, #8
 8000dc4:	60da      	str	r2, [r3, #12]
		}

		// 发�?�数�???????
		HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &fdcan_TxHeader, TxData);
 8000dc6:	68ba      	ldr	r2, [r7, #8]
 8000dc8:	4909      	ldr	r1, [pc, #36]	@ (8000df0 <FDCAN_Send_Msg+0x158>)
 8000dca:	480a      	ldr	r0, [pc, #40]	@ (8000df4 <FDCAN_Send_Msg+0x15c>)
 8000dcc:	f003 fa2c 	bl	8004228 <HAL_FDCAN_AddMessageToTxFifoQ>
		HAL_Delay(5);  //发第二帧数据的关键，若无延时，不发第二帧数据
 8000dd0:	2005      	movs	r0, #5
 8000dd2:	f002 f86d 	bl	8002eb0 <HAL_Delay>
		// 记录发�?�的第几包的数据
		++packNum;
 8000dd6:	7d7b      	ldrb	r3, [r7, #21]
 8000dd8:	3301      	adds	r3, #1
 8000dda:	757b      	strb	r3, [r7, #21]
	while (i < j)
 8000ddc:	7dfa      	ldrb	r2, [r7, #23]
 8000dde:	7d3b      	ldrb	r3, [r7, #20]
 8000de0:	429a      	cmp	r2, r3
 8000de2:	d398      	bcc.n	8000d16 <FDCAN_Send_Msg+0x7e>
 8000de4:	46b5      	mov	sp, r6
	}
}
 8000de6:	bf00      	nop
 8000de8:	371c      	adds	r7, #28
 8000dea:	46bd      	mov	sp, r7
 8000dec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000df0:	2400026c 	.word	0x2400026c
 8000df4:	240002bc 	.word	0x240002bc

08000df8 <HAL_FDCAN_RxFifo0Callback>:
extern bool Call_Flag;

//	误差符号�?
extern uint8_t Err_Sybol;
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
 8000e00:	6039      	str	r1, [r7, #0]
//	提取FIFO中的数据,
	HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &fdcan_RxHeader, rxdata);
 8000e02:	4b27      	ldr	r3, [pc, #156]	@ (8000ea0 <HAL_FDCAN_RxFifo0Callback+0xa8>)
 8000e04:	4a27      	ldr	r2, [pc, #156]	@ (8000ea4 <HAL_FDCAN_RxFifo0Callback+0xac>)
 8000e06:	2140      	movs	r1, #64	@ 0x40
 8000e08:	4827      	ldr	r0, [pc, #156]	@ (8000ea8 <HAL_FDCAN_RxFifo0Callback+0xb0>)
 8000e0a:	f003 fa69 	bl	80042e0 <HAL_FDCAN_GetRxMessage>
	if (Call_Flag == true)
 8000e0e:	4b27      	ldr	r3, [pc, #156]	@ (8000eac <HAL_FDCAN_RxFifo0Callback+0xb4>)
 8000e10:	781b      	ldrb	r3, [r3, #0]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d03a      	beq.n	8000e8c <HAL_FDCAN_RxFifo0Callback+0x94>
	{
//	底盘步进电机帧头
		if (fdcan_RxHeader.Identifier / 256 == 2)
 8000e16:	4b23      	ldr	r3, [pc, #140]	@ (8000ea4 <HAL_FDCAN_RxFifo0Callback+0xac>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 8000e1e:	2bff      	cmp	r3, #255	@ 0xff
 8000e20:	d834      	bhi.n	8000e8c <HAL_FDCAN_RxFifo0Callback+0x94>
		{
			if (RxState == 0)
 8000e22:	4b23      	ldr	r3, [pc, #140]	@ (8000eb0 <HAL_FDCAN_RxFifo0Callback+0xb8>)
 8000e24:	781b      	ldrb	r3, [r3, #0]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d112      	bne.n	8000e50 <HAL_FDCAN_RxFifo0Callback+0x58>
			{
				if (rxdata[0] == 0xFD)
 8000e2a:	4b1d      	ldr	r3, [pc, #116]	@ (8000ea0 <HAL_FDCAN_RxFifo0Callback+0xa8>)
 8000e2c:	781b      	ldrb	r3, [r3, #0]
 8000e2e:	2bfd      	cmp	r3, #253	@ 0xfd
 8000e30:	d103      	bne.n	8000e3a <HAL_FDCAN_RxFifo0Callback+0x42>
				{
					RxState = 1;
 8000e32:	4b1f      	ldr	r3, [pc, #124]	@ (8000eb0 <HAL_FDCAN_RxFifo0Callback+0xb8>)
 8000e34:	2201      	movs	r2, #1
 8000e36:	701a      	strb	r2, [r3, #0]
 8000e38:	e00a      	b.n	8000e50 <HAL_FDCAN_RxFifo0Callback+0x58>
				}
				else if(rxdata[0] == 0x37)
 8000e3a:	4b19      	ldr	r3, [pc, #100]	@ (8000ea0 <HAL_FDCAN_RxFifo0Callback+0xa8>)
 8000e3c:	781b      	ldrb	r3, [r3, #0]
 8000e3e:	2b37      	cmp	r3, #55	@ 0x37
 8000e40:	d103      	bne.n	8000e4a <HAL_FDCAN_RxFifo0Callback+0x52>
				{
					RxState = 3;
 8000e42:	4b1b      	ldr	r3, [pc, #108]	@ (8000eb0 <HAL_FDCAN_RxFifo0Callback+0xb8>)
 8000e44:	2203      	movs	r2, #3
 8000e46:	701a      	strb	r2, [r3, #0]
 8000e48:	e002      	b.n	8000e50 <HAL_FDCAN_RxFifo0Callback+0x58>
				}
				else
					RxState = 0;
 8000e4a:	4b19      	ldr	r3, [pc, #100]	@ (8000eb0 <HAL_FDCAN_RxFifo0Callback+0xb8>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	701a      	strb	r2, [r3, #0]
			}
			if (RxState == 1)
 8000e50:	4b17      	ldr	r3, [pc, #92]	@ (8000eb0 <HAL_FDCAN_RxFifo0Callback+0xb8>)
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	2b01      	cmp	r3, #1
 8000e56:	d106      	bne.n	8000e66 <HAL_FDCAN_RxFifo0Callback+0x6e>
			{
				if (rxdata[1] == 0x9F)
 8000e58:	4b11      	ldr	r3, [pc, #68]	@ (8000ea0 <HAL_FDCAN_RxFifo0Callback+0xa8>)
 8000e5a:	785b      	ldrb	r3, [r3, #1]
 8000e5c:	2b9f      	cmp	r3, #159	@ 0x9f
 8000e5e:	d102      	bne.n	8000e66 <HAL_FDCAN_RxFifo0Callback+0x6e>
				{
					RxState = 2;
 8000e60:	4b13      	ldr	r3, [pc, #76]	@ (8000eb0 <HAL_FDCAN_RxFifo0Callback+0xb8>)
 8000e62:	2202      	movs	r2, #2
 8000e64:	701a      	strb	r2, [r3, #0]
				}
			}
			if (RxState == 2)
 8000e66:	4b12      	ldr	r3, [pc, #72]	@ (8000eb0 <HAL_FDCAN_RxFifo0Callback+0xb8>)
 8000e68:	781b      	ldrb	r3, [r3, #0]
 8000e6a:	2b02      	cmp	r3, #2
 8000e6c:	d10e      	bne.n	8000e8c <HAL_FDCAN_RxFifo0Callback+0x94>
			{
				if (rxdata[2] == 0x6B)
 8000e6e:	4b0c      	ldr	r3, [pc, #48]	@ (8000ea0 <HAL_FDCAN_RxFifo0Callback+0xa8>)
 8000e70:	789b      	ldrb	r3, [r3, #2]
 8000e72:	2b6b      	cmp	r3, #107	@ 0x6b
 8000e74:	d10a      	bne.n	8000e8c <HAL_FDCAN_RxFifo0Callback+0x94>
				{
//				到位数据接收完毕，底盘步进确认到�?
					Base_Data = true;
 8000e76:	4b0f      	ldr	r3, [pc, #60]	@ (8000eb4 <HAL_FDCAN_RxFifo0Callback+0xbc>)
 8000e78:	2201      	movs	r2, #1
 8000e7a:	701a      	strb	r2, [r3, #0]
					RxState = 0;
 8000e7c:	4b0c      	ldr	r3, [pc, #48]	@ (8000eb0 <HAL_FDCAN_RxFifo0Callback+0xb8>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	701a      	strb	r2, [r3, #0]
					memset(rxdata, 0, sizeof(rxdata));
 8000e82:	2208      	movs	r2, #8
 8000e84:	2100      	movs	r1, #0
 8000e86:	4806      	ldr	r0, [pc, #24]	@ (8000ea0 <HAL_FDCAN_RxFifo0Callback+0xa8>)
 8000e88:	f00e f97f 	bl	800f18a <memset>
//					RxState = 0;
//				}
//			}
//		}
	}
	HAL_FDCAN_ActivateNotification(hfdcan,
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	2101      	movs	r1, #1
 8000e90:	6878      	ldr	r0, [r7, #4]
 8000e92:	f003 fb91 	bl	80045b8 <HAL_FDCAN_ActivateNotification>
	FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0);
}
 8000e96:	bf00      	nop
 8000e98:	3708      	adds	r7, #8
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	2400035c 	.word	0x2400035c
 8000ea4:	24000290 	.word	0x24000290
 8000ea8:	240002bc 	.word	0x240002bc
 8000eac:	24000c22 	.word	0x24000c22
 8000eb0:	24000364 	.word	0x24000364
 8000eb4:	24000365 	.word	0x24000365

08000eb8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b087      	sub	sp, #28
 8000ebc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ebe:	4b30      	ldr	r3, [pc, #192]	@ (8000f80 <MX_GPIO_Init+0xc8>)
 8000ec0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ec4:	4a2e      	ldr	r2, [pc, #184]	@ (8000f80 <MX_GPIO_Init+0xc8>)
 8000ec6:	f043 0310 	orr.w	r3, r3, #16
 8000eca:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ece:	4b2c      	ldr	r3, [pc, #176]	@ (8000f80 <MX_GPIO_Init+0xc8>)
 8000ed0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ed4:	f003 0310 	and.w	r3, r3, #16
 8000ed8:	617b      	str	r3, [r7, #20]
 8000eda:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000edc:	4b28      	ldr	r3, [pc, #160]	@ (8000f80 <MX_GPIO_Init+0xc8>)
 8000ede:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ee2:	4a27      	ldr	r2, [pc, #156]	@ (8000f80 <MX_GPIO_Init+0xc8>)
 8000ee4:	f043 0304 	orr.w	r3, r3, #4
 8000ee8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000eec:	4b24      	ldr	r3, [pc, #144]	@ (8000f80 <MX_GPIO_Init+0xc8>)
 8000eee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ef2:	f003 0304 	and.w	r3, r3, #4
 8000ef6:	613b      	str	r3, [r7, #16]
 8000ef8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000efa:	4b21      	ldr	r3, [pc, #132]	@ (8000f80 <MX_GPIO_Init+0xc8>)
 8000efc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f00:	4a1f      	ldr	r2, [pc, #124]	@ (8000f80 <MX_GPIO_Init+0xc8>)
 8000f02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f06:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f0a:	4b1d      	ldr	r3, [pc, #116]	@ (8000f80 <MX_GPIO_Init+0xc8>)
 8000f0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f14:	60fb      	str	r3, [r7, #12]
 8000f16:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f18:	4b19      	ldr	r3, [pc, #100]	@ (8000f80 <MX_GPIO_Init+0xc8>)
 8000f1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f1e:	4a18      	ldr	r2, [pc, #96]	@ (8000f80 <MX_GPIO_Init+0xc8>)
 8000f20:	f043 0301 	orr.w	r3, r3, #1
 8000f24:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f28:	4b15      	ldr	r3, [pc, #84]	@ (8000f80 <MX_GPIO_Init+0xc8>)
 8000f2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f2e:	f003 0301 	and.w	r3, r3, #1
 8000f32:	60bb      	str	r3, [r7, #8]
 8000f34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f36:	4b12      	ldr	r3, [pc, #72]	@ (8000f80 <MX_GPIO_Init+0xc8>)
 8000f38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f3c:	4a10      	ldr	r2, [pc, #64]	@ (8000f80 <MX_GPIO_Init+0xc8>)
 8000f3e:	f043 0302 	orr.w	r3, r3, #2
 8000f42:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f46:	4b0e      	ldr	r3, [pc, #56]	@ (8000f80 <MX_GPIO_Init+0xc8>)
 8000f48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f4c:	f003 0302 	and.w	r3, r3, #2
 8000f50:	607b      	str	r3, [r7, #4]
 8000f52:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f54:	4b0a      	ldr	r3, [pc, #40]	@ (8000f80 <MX_GPIO_Init+0xc8>)
 8000f56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f5a:	4a09      	ldr	r2, [pc, #36]	@ (8000f80 <MX_GPIO_Init+0xc8>)
 8000f5c:	f043 0308 	orr.w	r3, r3, #8
 8000f60:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f64:	4b06      	ldr	r3, [pc, #24]	@ (8000f80 <MX_GPIO_Init+0xc8>)
 8000f66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f6a:	f003 0308 	and.w	r3, r3, #8
 8000f6e:	603b      	str	r3, [r7, #0]
 8000f70:	683b      	ldr	r3, [r7, #0]

}
 8000f72:	bf00      	nop
 8000f74:	371c      	adds	r7, #28
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop
 8000f80:	58024400 	.word	0x58024400

08000f84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000f8a:	f000 fc61 	bl	8001850 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f8e:	f001 fefd 	bl	8002d8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f92:	f000 fa43 	bl	800141c <SystemClock_Config>
	// USART10 用于Action串口转发,暂时使用无线串口将数据转发到主机
	// TODO:根据通信质量的稳定�?�决定是否要更换为有线USB转TTL
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f96:	f7ff ff8f 	bl	8000eb8 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 8000f9a:	f7ff fd7d 	bl	8000a98 <MX_FDCAN1_Init>
  MX_UART4_Init();
 8000f9e:	f001 f849 	bl	8002034 <MX_UART4_Init>
  MX_UART5_Init();
 8000fa2:	f001 f893 	bl	80020cc <MX_UART5_Init>
  MX_UART9_Init();
 8000fa6:	f001 f975 	bl	8002294 <MX_UART9_Init>
  MX_USART6_UART_Init();
 8000faa:	f001 fa91 	bl	80024d0 <MX_USART6_UART_Init>
  MX_USART10_UART_Init();
 8000fae:	f001 fadb 	bl	8002568 <MX_USART10_UART_Init>
  MX_TIM2_Init();
 8000fb2:	f000 fe7f 	bl	8001cb4 <MX_TIM2_Init>
  MX_USART3_UART_Init();
 8000fb6:	f001 fa3f 	bl	8002438 <MX_USART3_UART_Init>
  MX_UART7_Init();
 8000fba:	f001 f8d3 	bl	8002164 <MX_UART7_Init>
  MX_UART8_Init();
 8000fbe:	f001 f91d 	bl	80021fc <MX_UART8_Init>
  MX_TIM3_Init();
 8000fc2:	f000 fec5 	bl	8001d50 <MX_TIM3_Init>
  MX_TIM5_Init();
 8000fc6:	f000 ff13 	bl	8001df0 <MX_TIM5_Init>
  MX_USART2_UART_Init();
 8000fca:	f001 f9af 	bl	800232c <MX_USART2_UART_Init>
  MX_TIM12_Init();
 8000fce:	f000 ff5f 	bl	8001e90 <MX_TIM12_Init>
  /* USER CODE BEGIN 2 */

//	清除定时器初始化过程中的更新中断标志
	__HAL_TIM_CLEAR_IT(&htim2, TIM_IT_UPDATE);
 8000fd2:	4bc2      	ldr	r3, [pc, #776]	@ (80012dc <main+0x358>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f06f 0201 	mvn.w	r2, #1
 8000fda:	611a      	str	r2, [r3, #16]
//	使能定时器中�?
	HAL_TIM_Base_Start_IT(&htim2);
 8000fdc:	48bf      	ldr	r0, [pc, #764]	@ (80012dc <main+0x358>)
 8000fde:	f006 ffc3 	bl	8007f68 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim5);
 8000fe2:	48bf      	ldr	r0, [pc, #764]	@ (80012e0 <main+0x35c>)
 8000fe4:	f006 ffc0 	bl	8007f68 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim3);
 8000fe8:	48be      	ldr	r0, [pc, #760]	@ (80012e4 <main+0x360>)
 8000fea:	f006 ffbd 	bl	8007f68 <HAL_TIM_Base_Start_IT>
//	使能串口接收中断
	HAL_UART_Receive_IT(&huart4, &Screen_data, 1);
 8000fee:	2201      	movs	r2, #1
 8000ff0:	49bd      	ldr	r1, [pc, #756]	@ (80012e8 <main+0x364>)
 8000ff2:	48be      	ldr	r0, [pc, #760]	@ (80012ec <main+0x368>)
 8000ff4:	f007 fe44 	bl	8008c80 <HAL_UART_Receive_IT>
//	HWT101预留中断接口
	HAL_UART_Receive_IT(&huart2, &HwtData, 1);
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	49bd      	ldr	r1, [pc, #756]	@ (80012f0 <main+0x36c>)
 8000ffc:	48bd      	ldr	r0, [pc, #756]	@ (80012f4 <main+0x370>)
 8000ffe:	f007 fe3f 	bl	8008c80 <HAL_UART_Receive_IT>
//	TX2通信接收中断
	HAL_UART_Receive_IT(&huart10, (uint8_t*) &aRxBuffer, 1);
 8001002:	2201      	movs	r2, #1
 8001004:	49bc      	ldr	r1, [pc, #752]	@ (80012f8 <main+0x374>)
 8001006:	48bd      	ldr	r0, [pc, #756]	@ (80012fc <main+0x378>)
 8001008:	f007 fe3a 	bl	8008c80 <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart9, &data, 1);
 800100c:	2201      	movs	r2, #1
 800100e:	49bc      	ldr	r1, [pc, #752]	@ (8001300 <main+0x37c>)
 8001010:	48bc      	ldr	r0, [pc, #752]	@ (8001304 <main+0x380>)
 8001012:	f007 fe35 	bl	8008c80 <HAL_UART_Receive_IT>
//	HAL_UART_Receive_IT(&huart10, &Joy_data, 1);

	PID_Init();
 8001016:	f00a fc93 	bl	800b940 <PID_Init>
//  	TODO:调整该函数体位置, 使之可以全局响应
// 			解决方案: 在屏幕解析函数中, 如果发车标志位被使能, 则使能某�?定时器中断函�?, 然后在定时器中断函数中先失能自己, 
// 					 再调用下面的函数�?,从�?�做到节省系统资源的同时进行函数的全�?单次响应
// 		FIXME:将该函数修改为全�?响应�?要�?�虑到在响应�?, 车身其他资源是否会被影响, 即在响应的过程中, 物料等会不会把爪子卡�?, 导致舵机过流
// 			  舵机过流后需要过�?段时间才能对舵机进行读写
		if (Ready_Flag == 1)
 800101a:	4bbb      	ldr	r3, [pc, #748]	@ (8001308 <main+0x384>)
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	2b01      	cmp	r3, #1
 8001020:	d104      	bne.n	800102c <main+0xa8>
		{
			Ready_Flag = 0;
 8001022:	4bb9      	ldr	r3, [pc, #740]	@ (8001308 <main+0x384>)
 8001024:	2200      	movs	r2, #0
 8001026:	701a      	strb	r2, [r3, #0]
			Check_Status();
 8001028:	f00c fa3e 	bl	800d4a8 <Check_Status>

		}
// 		�?测发车标志位
		if (System_Flag == 1)
 800102c:	4bb7      	ldr	r3, [pc, #732]	@ (800130c <main+0x388>)
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	2b01      	cmp	r3, #1
 8001032:	d1f2      	bne.n	800101a <main+0x96>
		{
			System_Flag = 0;
 8001034:	4bb5      	ldr	r3, [pc, #724]	@ (800130c <main+0x388>)
 8001036:	2200      	movs	r2, #0
 8001038:	701a      	strb	r2, [r3, #0]
//			向TX2发�?�字符串 "e1f"�?始执行程�?
			if (TX2_ENABLE == true)
 800103a:	4bb5      	ldr	r3, [pc, #724]	@ (8001310 <main+0x38c>)
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d006      	beq.n	8001050 <main+0xcc>
				HAL_UART_Transmit(&huart10, (uint8_t*) "e1f", sizeof("elf") - 1,
 8001042:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001046:	2203      	movs	r2, #3
 8001048:	49b2      	ldr	r1, [pc, #712]	@ (8001314 <main+0x390>)
 800104a:	48ac      	ldr	r0, [pc, #688]	@ (80012fc <main+0x378>)
 800104c:	f007 fcc2 	bl	80089d4 <HAL_UART_Transmit>
						0x1000);
			/************************************************/
			while (1)
			{
				switch (flag)
 8001050:	4bb1      	ldr	r3, [pc, #708]	@ (8001318 <main+0x394>)
 8001052:	881b      	ldrh	r3, [r3, #0]
 8001054:	2b0d      	cmp	r3, #13
 8001056:	f200 81cc 	bhi.w	80013f2 <main+0x46e>
 800105a:	a201      	add	r2, pc, #4	@ (adr r2, 8001060 <main+0xdc>)
 800105c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001060:	08001099 	.word	0x08001099
 8001064:	080010f5 	.word	0x080010f5
 8001068:	08001191 	.word	0x08001191
 800106c:	08001213 	.word	0x08001213
 8001070:	0800122f 	.word	0x0800122f
 8001074:	0800126b 	.word	0x0800126b
 8001078:	0800127b 	.word	0x0800127b
 800107c:	080012a7 	.word	0x080012a7
 8001080:	080012b3 	.word	0x080012b3
 8001084:	08001375 	.word	0x08001375
 8001088:	0800138f 	.word	0x0800138f
 800108c:	080013af 	.word	0x080013af
 8001090:	080013c3 	.word	0x080013c3
 8001094:	080013e3 	.word	0x080013e3
				{
				case 0:  //发车, 先左�?, 然后直行, 进入扫码区域
					// Move_TO_Saomaqu(2400, 8250);
					// BUG:遇到左移�?,步进电机没有移动到目标点�?,没有返回到位标志，但是卡住不动的情况, 记录在Bug.md中的 E�?
					// 
					HAL_UART_Transmit(&huart10, (uint8_t*) "发车, 向左移动\n", sizeof("发车, 向左移动\n") - 1,0xffff);
 8001098:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800109c:	2215      	movs	r2, #21
 800109e:	499f      	ldr	r1, [pc, #636]	@ (800131c <main+0x398>)
 80010a0:	4896      	ldr	r0, [pc, #600]	@ (80012fc <main+0x378>)
 80010a2:	f007 fc97 	bl	80089d4 <HAL_UART_Transmit>
					bool temp = Move_Left(RunSpeed, RunAcc, 2400);
 80010a6:	f44f 6216 	mov.w	r2, #2400	@ 0x960
 80010aa:	2178      	movs	r1, #120	@ 0x78
 80010ac:	2064      	movs	r0, #100	@ 0x64
 80010ae:	f00a fef9 	bl	800bea4 <Move_Left>
 80010b2:	4603      	mov	r3, r0
 80010b4:	71fb      	strb	r3, [r7, #7]
					HAL_Delay(50);
 80010b6:	2032      	movs	r0, #50	@ 0x32
 80010b8:	f001 fefa 	bl	8002eb0 <HAL_Delay>
					while (temp != true)
 80010bc:	e007      	b.n	80010ce <main+0x14a>
					{
						temp = Move_Left(RunSpeed, RunAcc, 2400);
 80010be:	f44f 6216 	mov.w	r2, #2400	@ 0x960
 80010c2:	2178      	movs	r1, #120	@ 0x78
 80010c4:	2064      	movs	r0, #100	@ 0x64
 80010c6:	f00a feed 	bl	800bea4 <Move_Left>
 80010ca:	4603      	mov	r3, r0
 80010cc:	71fb      	strb	r3, [r7, #7]
					while (temp != true)
 80010ce:	79fb      	ldrb	r3, [r7, #7]
 80010d0:	f083 0301 	eor.w	r3, r3, #1
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d1f1      	bne.n	80010be <main+0x13a>
					}
					HAL_UART_Transmit(&huart10, (uint8_t*) "确认接收\n", sizeof("确认接收\n") - 1,0xffff);
 80010da:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80010de:	220d      	movs	r2, #13
 80010e0:	498f      	ldr	r1, [pc, #572]	@ (8001320 <main+0x39c>)
 80010e2:	4886      	ldr	r0, [pc, #536]	@ (80012fc <main+0x378>)
 80010e4:	f007 fc76 	bl	80089d4 <HAL_UART_Transmit>
					// 左移完成�?,向前移动,同时将机械臂调整为扫码姿�?
					Start();
 80010e8:	f00a fb06 	bl	800b6f8 <Start>
					flag = 1;
 80010ec:	4b8a      	ldr	r3, [pc, #552]	@ (8001318 <main+0x394>)
 80010ee:	2201      	movs	r2, #1
 80010f0:	801a      	strh	r2, [r3, #0]
					break;
 80010f2:	e181      	b.n	80013f8 <main+0x474>
				case 1:  //离开扫码�?,进入暂存区抓取物�?
					// 向前移动,非阻�?
					HAL_UART_Transmit(&huart10, (uint8_t*) "物料我来啦\n", sizeof("物料我来啦\n") - 1,0xffff);
 80010f4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80010f8:	2210      	movs	r2, #16
 80010fa:	498a      	ldr	r1, [pc, #552]	@ (8001324 <main+0x3a0>)
 80010fc:	487f      	ldr	r0, [pc, #508]	@ (80012fc <main+0x378>)
 80010fe:	f007 fc69 	bl	80089d4 <HAL_UART_Transmit>
					temp = Move_Line(RunSpeed, RunAcc, 10500);
 8001102:	f642 1204 	movw	r2, #10500	@ 0x2904
 8001106:	2178      	movs	r1, #120	@ 0x78
 8001108:	2064      	movs	r0, #100	@ 0x64
 800110a:	f00a fe6d 	bl	800bde8 <Move_Line>
 800110e:	4603      	mov	r3, r0
 8001110:	71fb      	strb	r3, [r7, #7]
					HAL_Delay(50);
 8001112:	2032      	movs	r0, #50	@ 0x32
 8001114:	f001 fecc 	bl	8002eb0 <HAL_Delay>
					while (temp != true)
 8001118:	e007      	b.n	800112a <main+0x1a6>
					{
						temp = Move_Line(RunSpeed, RunAcc, 10500);
 800111a:	f642 1204 	movw	r2, #10500	@ 0x2904
 800111e:	2178      	movs	r1, #120	@ 0x78
 8001120:	2064      	movs	r0, #100	@ 0x64
 8001122:	f00a fe61 	bl	800bde8 <Move_Line>
 8001126:	4603      	mov	r3, r0
 8001128:	71fb      	strb	r3, [r7, #7]
					while (temp != true)
 800112a:	79fb      	ldrb	r3, [r7, #7]
 800112c:	f083 0301 	eor.w	r3, r3, #1
 8001130:	b2db      	uxtb	r3, r3
 8001132:	2b00      	cmp	r3, #0
 8001134:	d1f1      	bne.n	800111a <main+0x196>
					}
					HAL_UART_Transmit(&huart10, (uint8_t*) "确认接收\n", sizeof("确认接收\n") - 1,0xffff);
 8001136:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800113a:	220d      	movs	r2, #13
 800113c:	4978      	ldr	r1, [pc, #480]	@ (8001320 <main+0x39c>)
 800113e:	486f      	ldr	r0, [pc, #444]	@ (80012fc <main+0x378>)
 8001140:	f007 fc48 	bl	80089d4 <HAL_UART_Transmit>
					// Choke_Flag = true说明当前底盘步进电机被阻�?
					// TODO:其实我感觉这个while没有�?, 但是也不会影响什�?, 单纯看着占位�?, �?测完没有用后可以删掉这里
					while (Choke_Flag == true)
 8001144:	bf00      	nop
 8001146:	4b78      	ldr	r3, [pc, #480]	@ (8001328 <main+0x3a4>)
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d1fb      	bne.n	8001146 <main+0x1c2>
					{
						;
					}
					//	等待TX2返回物料坐标点信�?
					if (TX2_ENABLE == true)
 800114e:	4b70      	ldr	r3, [pc, #448]	@ (8001310 <main+0x38c>)
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d004      	beq.n	8001160 <main+0x1dc>
					{
						while (Point_Flag != 1)
 8001156:	bf00      	nop
 8001158:	4b74      	ldr	r3, [pc, #464]	@ (800132c <main+0x3a8>)
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	2b01      	cmp	r3, #1
 800115e:	d1fb      	bne.n	8001158 <main+0x1d4>
							;
						}
					}
					// TODO:调试,根据TX2返回坐标点信息进行车身调�?,待物料稳定后抓取物料
					// 这里是否�?要先根据Action进行�?次坐标的调整? x:150 y:1450
					HAL_UART_Transmit(&huart10, (uint8_t*) "进入PID调节\n", sizeof("进入PID调节\n") - 1,0xffff);
 8001160:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001164:	2210      	movs	r2, #16
 8001166:	4972      	ldr	r1, [pc, #456]	@ (8001330 <main+0x3ac>)
 8001168:	4864      	ldr	r0, [pc, #400]	@ (80012fc <main+0x378>)
 800116a:	f007 fc33 	bl	80089d4 <HAL_UART_Transmit>
					Move_Action_Nopid_Left_Ctrl(150, 1450);
 800116e:	eddf 0a71 	vldr	s1, [pc, #452]	@ 8001334 <main+0x3b0>
 8001172:	ed9f 0a71 	vldr	s0, [pc, #452]	@ 8001338 <main+0x3b4>
 8001176:	f00b fb13 	bl	800c7a0 <Move_Action_Nopid_Left_Ctrl>
					HAL_UART_Transmit(&huart10, (uint8_t*) "我调完辣\n", sizeof("我调完辣\n") - 1,0xffff);
 800117a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800117e:	220d      	movs	r2, #13
 8001180:	496e      	ldr	r1, [pc, #440]	@ (800133c <main+0x3b8>)
 8001182:	485e      	ldr	r0, [pc, #376]	@ (80012fc <main+0x378>)
 8001184:	f007 fc26 	bl	80089d4 <HAL_UART_Transmit>
//					Frist_Grab_Wuliao();
					flag = 2;
 8001188:	4b63      	ldr	r3, [pc, #396]	@ (8001318 <main+0x394>)
 800118a:	2202      	movs	r2, #2
 800118c:	801a      	strh	r2, [r3, #0]
					break;
 800118e:	e133      	b.n	80013f8 <main+0x474>
				case 2:  // 离开原料�?,进入十字�?
					HAL_UART_Transmit(&huart10, (uint8_t*) "物料抓完了,我走了\n", sizeof("物料抓完了,我走了\n") - 1,0xffff);
 8001190:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001194:	221a      	movs	r2, #26
 8001196:	496a      	ldr	r1, [pc, #424]	@ (8001340 <main+0x3bc>)
 8001198:	4858      	ldr	r0, [pc, #352]	@ (80012fc <main+0x378>)
 800119a:	f007 fc1b 	bl	80089d4 <HAL_UART_Transmit>
					Move_TO_jianzhi1(4500, 4335);
 800119e:	eddf 0a73 	vldr	s1, [pc, #460]	@ 800136c <main+0x3e8>
 80011a2:	ed9f 0a68 	vldr	s0, [pc, #416]	@ 8001344 <main+0x3c0>
 80011a6:	f00b f8ad 	bl	800c304 <Move_TO_jianzhi1>
					// 车身状�?�回滚为爪子向内的状�?
					Roll_Status();
 80011aa:	f00c f9a0 	bl	800d4ee <Roll_Status>
					HAL_Delay(50);
 80011ae:	2032      	movs	r0, #50	@ 0x32
 80011b0:	f001 fe7e 	bl	8002eb0 <HAL_Delay>
					// 根据Action返回的坐标点进行校准
					HAL_UART_Transmit(&huart10, (uint8_t*) "进入PID调节\n", sizeof("进入PID调节\n") - 1,0xffff);
 80011b4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80011b8:	2210      	movs	r2, #16
 80011ba:	495d      	ldr	r1, [pc, #372]	@ (8001330 <main+0x3ac>)
 80011bc:	484f      	ldr	r0, [pc, #316]	@ (80012fc <main+0x378>)
 80011be:	f007 fc09 	bl	80089d4 <HAL_UART_Transmit>
					bool action_temp = Move_Action_Nopid_Forward_Ctrl(160, 1070);
 80011c2:	eddf 0a61 	vldr	s1, [pc, #388]	@ 8001348 <main+0x3c4>
 80011c6:	ed9f 0a61 	vldr	s0, [pc, #388]	@ 800134c <main+0x3c8>
 80011ca:	f00b fc01 	bl	800c9d0 <Move_Action_Nopid_Forward_Ctrl>
 80011ce:	4603      	mov	r3, r0
 80011d0:	71bb      	strb	r3, [r7, #6]
					HAL_Delay(50);
 80011d2:	2032      	movs	r0, #50	@ 0x32
 80011d4:	f001 fe6c 	bl	8002eb0 <HAL_Delay>
					while(action_temp == false)
 80011d8:	e00a      	b.n	80011f0 <main+0x26c>
					{
						HAL_Delay(10);
 80011da:	200a      	movs	r0, #10
 80011dc:	f001 fe68 	bl	8002eb0 <HAL_Delay>
						action_temp = Move_Action_Nopid_Forward_Ctrl(160, 1070);
 80011e0:	eddf 0a59 	vldr	s1, [pc, #356]	@ 8001348 <main+0x3c4>
 80011e4:	ed9f 0a59 	vldr	s0, [pc, #356]	@ 800134c <main+0x3c8>
 80011e8:	f00b fbf2 	bl	800c9d0 <Move_Action_Nopid_Forward_Ctrl>
 80011ec:	4603      	mov	r3, r0
 80011ee:	71bb      	strb	r3, [r7, #6]
					while(action_temp == false)
 80011f0:	79bb      	ldrb	r3, [r7, #6]
 80011f2:	f083 0301 	eor.w	r3, r3, #1
 80011f6:	b2db      	uxtb	r3, r3
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d1ee      	bne.n	80011da <main+0x256>
					}
					HAL_UART_Transmit(&huart10, (uint8_t*) "我调完辣\n", sizeof("我调完辣\n") - 1,0xffff);
 80011fc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001200:	220d      	movs	r2, #13
 8001202:	494e      	ldr	r1, [pc, #312]	@ (800133c <main+0x3b8>)
 8001204:	483d      	ldr	r0, [pc, #244]	@ (80012fc <main+0x378>)
 8001206:	f007 fbe5 	bl	80089d4 <HAL_UART_Transmit>
					flag = 3;
 800120a:	4b43      	ldr	r3, [pc, #268]	@ (8001318 <main+0x394>)
 800120c:	2203      	movs	r2, #3
 800120e:	801a      	strh	r2, [r3, #0]
					break;
 8001210:	e0f2      	b.n	80013f8 <main+0x474>
				case 3:    // 离开十字区域,进入暂存�?
//					BUG:�?90度变成转45�?,但是单独拉出来没有问�??

					Move_TO_zancunqu(22000, 4335);
 8001212:	eddf 0a56 	vldr	s1, [pc, #344]	@ 800136c <main+0x3e8>
 8001216:	ed9f 0a56 	vldr	s0, [pc, #344]	@ 8001370 <main+0x3ec>
 800121a:	f00b f8e7 	bl	800c3ec <Move_TO_zancunqu>
					// 将物料从车上放到目标区域
//					put_Material_to_circular_Staging_Area_frist(Frist_Run);
					// 将物料从目标区域抓取回车�?
//					Grab_Material_to_Car_Staging_Area_frist(Frist_Run);
					// TODO: 延时�?要修�?
					HAL_Delay(500);
 800121e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001222:	f001 fe45 	bl	8002eb0 <HAL_Delay>
					flag = 4;
 8001226:	4b3c      	ldr	r3, [pc, #240]	@ (8001318 <main+0x394>)
 8001228:	2204      	movs	r2, #4
 800122a:	801a      	strh	r2, [r3, #0]
					break;
 800122c:	e0e4      	b.n	80013f8 <main+0x474>
				case 4:	//出暂存区
					Move_TO_jianzhi2(9000, 4335);
 800122e:	eddf 0a4f 	vldr	s1, [pc, #316]	@ 800136c <main+0x3e8>
 8001232:	ed9f 0a47 	vldr	s0, [pc, #284]	@ 8001350 <main+0x3cc>
 8001236:	f00b f94f 	bl	800c4d8 <Move_TO_jianzhi2>
					HAL_UART_Transmit(&huart10, (uint8_t*) "调个Action闭环\n", sizeof("调个Action闭环\n") - 1,0xffff);
 800123a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800123e:	2213      	movs	r2, #19
 8001240:	4944      	ldr	r1, [pc, #272]	@ (8001354 <main+0x3d0>)
 8001242:	482e      	ldr	r0, [pc, #184]	@ (80012fc <main+0x378>)
 8001244:	f007 fbc6 	bl	80089d4 <HAL_UART_Transmit>
					Move_Action_Nopid_Forward_Ctrl(1870, 1860);
 8001248:	eddf 0a43 	vldr	s1, [pc, #268]	@ 8001358 <main+0x3d4>
 800124c:	ed9f 0a43 	vldr	s0, [pc, #268]	@ 800135c <main+0x3d8>
 8001250:	f00b fbbe 	bl	800c9d0 <Move_Action_Nopid_Forward_Ctrl>
					HAL_UART_Transmit(&huart10, (uint8_t*) "我调完辣\n", sizeof("我调完辣\n") - 1,0xffff);
 8001254:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001258:	220d      	movs	r2, #13
 800125a:	4938      	ldr	r1, [pc, #224]	@ (800133c <main+0x3b8>)
 800125c:	4827      	ldr	r0, [pc, #156]	@ (80012fc <main+0x378>)
 800125e:	f007 fbb9 	bl	80089d4 <HAL_UART_Transmit>
					flag = 5;
 8001262:	4b2d      	ldr	r3, [pc, #180]	@ (8001318 <main+0x394>)
 8001264:	2205      	movs	r2, #5
 8001266:	801a      	strh	r2, [r3, #0]
					break;
 8001268:	e0c6      	b.n	80013f8 <main+0x474>
				case 5:		//移动到粗加工�?       
					Move_TO_cujiagongqu(10000);
 800126a:	ed9f 0a3d 	vldr	s0, [pc, #244]	@ 8001360 <main+0x3dc>
 800126e:	f00b f9a9 	bl	800c5c4 <Move_TO_cujiagongqu>
					//调整车体，让爪子正交于车身，爪子位于底端张开
//					put_Status(); //爪子张开，张大一些，否则会导致在红色环识别到绿色�?
					// 将物料放置到第一�?
//					put_Material_to_Circular_Rough_Processing_Area_frist(Frist_Run, Put_circular);
					flag = 6;
 8001272:	4b29      	ldr	r3, [pc, #164]	@ (8001318 <main+0x394>)
 8001274:	2206      	movs	r2, #6
 8001276:	801a      	strh	r2, [r3, #0]
					break;
 8001278:	e0be      	b.n	80013f8 <main+0x474>
				case 6:  //离开粗加工区，移到十字区
					Move_TO_jianzhi3(9000, 4335);
 800127a:	eddf 0a3c 	vldr	s1, [pc, #240]	@ 800136c <main+0x3e8>
 800127e:	ed9f 0a34 	vldr	s0, [pc, #208]	@ 8001350 <main+0x3cc>
 8001282:	f00b f9df 	bl	800c644 <Move_TO_jianzhi3>
					Move_Action_Nopid_Left_Ctrl(170, 1860);
 8001286:	eddf 0a34 	vldr	s1, [pc, #208]	@ 8001358 <main+0x3d4>
 800128a:	ed9f 0a36 	vldr	s0, [pc, #216]	@ 8001364 <main+0x3e0>
 800128e:	f00b fa87 	bl	800c7a0 <Move_Action_Nopid_Left_Ctrl>
					//TODO:在返回原料区之前，爪子首先要转过来正交于车身并且步进降到8600的位置，爪子张开，进行抓取物�?
					Drop_Location_jiang(50, 50, 8600);
 8001292:	f242 1298 	movw	r2, #8600	@ 0x2198
 8001296:	2132      	movs	r1, #50	@ 0x32
 8001298:	2032      	movs	r0, #50	@ 0x32
 800129a:	f00a ffd9 	bl	800c250 <Drop_Location_jiang>
					flag = 7;
 800129e:	4b1e      	ldr	r3, [pc, #120]	@ (8001318 <main+0x394>)
 80012a0:	2207      	movs	r2, #7
 80012a2:	801a      	strh	r2, [r3, #0]
					break;
 80012a4:	e0a8      	b.n	80013f8 <main+0x474>
				case 7:      //返回到原料区，进行第二次的抓�?
					Move_TO_fanyuanliaoqu(4000);
 80012a6:	ed9f 0a30 	vldr	s0, [pc, #192]	@ 8001368 <main+0x3e4>
 80012aa:	f00b fa41 	bl	800c730 <Move_TO_fanyuanliaoqu>
					while (1)
 80012ae:	bf00      	nop
 80012b0:	e7fd      	b.n	80012ae <main+0x32a>
//					Move_Action_Nopid_Left_Ctrl(150, 1450);      //ACTION����
					//Second_Run_Frist_Grab_Wuliao();
					flag = 8;
					break;
				case 8:  //第二次跑 离开原料�?,进入十字�?
					Move_TO_jianzhi1(4500, 4335);
 80012b2:	eddf 0a2e 	vldr	s1, [pc, #184]	@ 800136c <main+0x3e8>
 80012b6:	ed9f 0a23 	vldr	s0, [pc, #140]	@ 8001344 <main+0x3c0>
 80012ba:	f00b f823 	bl	800c304 <Move_TO_jianzhi1>
					// 车身状�?�回滚为爪子向内的状�?
					Roll_Status();
 80012be:	f00c f916 	bl	800d4ee <Roll_Status>
					HAL_Delay(50);
 80012c2:	2032      	movs	r0, #50	@ 0x32
 80012c4:	f001 fdf4 	bl	8002eb0 <HAL_Delay>
					// 根据Action返回的坐标点进行校准
					Move_Action_Nopid_Forward_Ctrl(160, 1070);
 80012c8:	eddf 0a1f 	vldr	s1, [pc, #124]	@ 8001348 <main+0x3c4>
 80012cc:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 800134c <main+0x3c8>
 80012d0:	f00b fb7e 	bl	800c9d0 <Move_Action_Nopid_Forward_Ctrl>
					flag = 9;
 80012d4:	4b10      	ldr	r3, [pc, #64]	@ (8001318 <main+0x394>)
 80012d6:	2209      	movs	r2, #9
 80012d8:	801a      	strh	r2, [r3, #0]
					break;
 80012da:	e08d      	b.n	80013f8 <main+0x474>
 80012dc:	24000488 	.word	0x24000488
 80012e0:	24000520 	.word	0x24000520
 80012e4:	240004d4 	.word	0x240004d4
 80012e8:	24000367 	.word	0x24000367
 80012ec:	240005b8 	.word	0x240005b8
 80012f0:	24000368 	.word	0x24000368
 80012f4:	2400089c 	.word	0x2400089c
 80012f8:	24000369 	.word	0x24000369
 80012fc:	24000a58 	.word	0x24000a58
 8001300:	24000366 	.word	0x24000366
 8001304:	24000808 	.word	0x24000808
 8001308:	24000d07 	.word	0x24000d07
 800130c:	24000d06 	.word	0x24000d06
 8001310:	24000480 	.word	0x24000480
 8001314:	08012310 	.word	0x08012310
 8001318:	2400047a 	.word	0x2400047a
 800131c:	08012314 	.word	0x08012314
 8001320:	0801232c 	.word	0x0801232c
 8001324:	0801233c 	.word	0x0801233c
 8001328:	24000c20 	.word	0x24000c20
 800132c:	24000478 	.word	0x24000478
 8001330:	08012350 	.word	0x08012350
 8001334:	44b54000 	.word	0x44b54000
 8001338:	43160000 	.word	0x43160000
 800133c:	08012364 	.word	0x08012364
 8001340:	08012374 	.word	0x08012374
 8001344:	458ca000 	.word	0x458ca000
 8001348:	4485c000 	.word	0x4485c000
 800134c:	43200000 	.word	0x43200000
 8001350:	460ca000 	.word	0x460ca000
 8001354:	08012390 	.word	0x08012390
 8001358:	44e88000 	.word	0x44e88000
 800135c:	44e9c000 	.word	0x44e9c000
 8001360:	461c4000 	.word	0x461c4000
 8001364:	432a0000 	.word	0x432a0000
 8001368:	457a0000 	.word	0x457a0000
 800136c:	45877800 	.word	0x45877800
 8001370:	46abe000 	.word	0x46abe000
				case 9:    //第二次跑，离�?十字区，到达暂存�?
					Move_TO_zancunqu(22000, 4335);
 8001374:	ed5f 0a03 	vldr	s1, [pc, #-12]	@ 800136c <main+0x3e8>
 8001378:	ed1f 0a03 	vldr	s0, [pc, #-12]	@ 8001370 <main+0x3ec>
 800137c:	f00b f836 	bl	800c3ec <Move_TO_zancunqu>
					// 将物料从车上放到目标区域
//					put_Material_to_circular_Staging_Area_frist(Second_Run);
					// 将物料从目标区域抓取回车�?
//					Grab_Material_to_Car_Staging_Area_frist(Second_Run);
					HAL_Delay(yanshi);
 8001380:	2032      	movs	r0, #50	@ 0x32
 8001382:	f001 fd95 	bl	8002eb0 <HAL_Delay>
					flag = 10;
 8001386:	4b1d      	ldr	r3, [pc, #116]	@ (80013fc <main+0x478>)
 8001388:	220a      	movs	r2, #10
 800138a:	801a      	strh	r2, [r3, #0]
					break;
 800138c:	e034      	b.n	80013f8 <main+0x474>
				case 10:    //离开暂存区，到达十字�?
					Move_TO_jianzhi2(9000, 4335);
 800138e:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 8001400 <main+0x47c>
 8001392:	ed9f 0a1c 	vldr	s0, [pc, #112]	@ 8001404 <main+0x480>
 8001396:	f00b f89f 	bl	800c4d8 <Move_TO_jianzhi2>
					// 根据Action返回的坐标点进行校准     
					Move_Action_Nopid_Forward_Ctrl(1870, 1860);
 800139a:	eddf 0a1b 	vldr	s1, [pc, #108]	@ 8001408 <main+0x484>
 800139e:	ed9f 0a1b 	vldr	s0, [pc, #108]	@ 800140c <main+0x488>
 80013a2:	f00b fb15 	bl	800c9d0 <Move_Action_Nopid_Forward_Ctrl>
					flag = 11;
 80013a6:	4b15      	ldr	r3, [pc, #84]	@ (80013fc <main+0x478>)
 80013a8:	220b      	movs	r2, #11
 80013aa:	801a      	strh	r2, [r3, #0]
					break;
 80013ac:	e024      	b.n	80013f8 <main+0x474>
				case 11:       //离开十字区，到达粗加工区
					Move_TO_cujiagongqu(10000);
 80013ae:	ed9f 0a18 	vldr	s0, [pc, #96]	@ 8001410 <main+0x48c>
 80013b2:	f00b f907 	bl	800c5c4 <Move_TO_cujiagongqu>
//					put_Material_to_Circular_Rough_Processing_Area_frist(
//					Second_Run, Put_Material);
					//放完物料后，车身回归起始模样
					Check_Status();
 80013b6:	f00c f877 	bl	800d4a8 <Check_Status>
					flag = 12;
 80013ba:	4b10      	ldr	r3, [pc, #64]	@ (80013fc <main+0x478>)
 80013bc:	220c      	movs	r2, #12
 80013be:	801a      	strh	r2, [r3, #0]
					break;
 80013c0:	e01a      	b.n	80013f8 <main+0x474>
				case 12:       //离开粗加工区，到十字�?
					Move_TO_jianzhi3(9000, 4335);
 80013c2:	eddf 0a0f 	vldr	s1, [pc, #60]	@ 8001400 <main+0x47c>
 80013c6:	ed9f 0a0f 	vldr	s0, [pc, #60]	@ 8001404 <main+0x480>
 80013ca:	f00b f93b 	bl	800c644 <Move_TO_jianzhi3>
					// 根据Action返回的坐标点进行校准 
					Move_Action_Nopid_Left_Ctrl(170, 1860);
 80013ce:	eddf 0a0e 	vldr	s1, [pc, #56]	@ 8001408 <main+0x484>
 80013d2:	ed9f 0a10 	vldr	s0, [pc, #64]	@ 8001414 <main+0x490>
 80013d6:	f00b f9e3 	bl	800c7a0 <Move_Action_Nopid_Left_Ctrl>
					flag = 13;
 80013da:	4b08      	ldr	r3, [pc, #32]	@ (80013fc <main+0x478>)
 80013dc:	220d      	movs	r2, #13
 80013de:	801a      	strh	r2, [r3, #0]
					break;
 80013e0:	e00a      	b.n	80013f8 <main+0x474>
				case 13:      //直接回到启停�?
					Move_TO_fanyuanliaoqu(22000);
 80013e2:	ed9f 0a0d 	vldr	s0, [pc, #52]	@ 8001418 <main+0x494>
 80013e6:	f00b f9a3 	bl	800c730 <Move_TO_fanyuanliaoqu>
					flag = 14;
 80013ea:	4b04      	ldr	r3, [pc, #16]	@ (80013fc <main+0x478>)
 80013ec:	220e      	movs	r2, #14
 80013ee:	801a      	strh	r2, [r3, #0]
					break;
 80013f0:	e002      	b.n	80013f8 <main+0x474>
				default:
					Move_Stop();
 80013f2:	f00a ff71 	bl	800c2d8 <Move_Stop>
					break;
 80013f6:	bf00      	nop
				switch (flag)
 80013f8:	e62a      	b.n	8001050 <main+0xcc>
 80013fa:	bf00      	nop
 80013fc:	2400047a 	.word	0x2400047a
 8001400:	45877800 	.word	0x45877800
 8001404:	460ca000 	.word	0x460ca000
 8001408:	44e88000 	.word	0x44e88000
 800140c:	44e9c000 	.word	0x44e9c000
 8001410:	461c4000 	.word	0x461c4000
 8001414:	432a0000 	.word	0x432a0000
 8001418:	46abe000 	.word	0x46abe000

0800141c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b09c      	sub	sp, #112	@ 0x70
 8001420:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001422:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001426:	224c      	movs	r2, #76	@ 0x4c
 8001428:	2100      	movs	r1, #0
 800142a:	4618      	mov	r0, r3
 800142c:	f00d fead 	bl	800f18a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001430:	1d3b      	adds	r3, r7, #4
 8001432:	2220      	movs	r2, #32
 8001434:	2100      	movs	r1, #0
 8001436:	4618      	mov	r0, r3
 8001438:	f00d fea7 	bl	800f18a <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800143c:	2002      	movs	r0, #2
 800143e:	f003 ffd9 	bl	80053f4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001442:	2300      	movs	r3, #0
 8001444:	603b      	str	r3, [r7, #0]
 8001446:	4b2b      	ldr	r3, [pc, #172]	@ (80014f4 <SystemClock_Config+0xd8>)
 8001448:	699b      	ldr	r3, [r3, #24]
 800144a:	4a2a      	ldr	r2, [pc, #168]	@ (80014f4 <SystemClock_Config+0xd8>)
 800144c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001450:	6193      	str	r3, [r2, #24]
 8001452:	4b28      	ldr	r3, [pc, #160]	@ (80014f4 <SystemClock_Config+0xd8>)
 8001454:	699b      	ldr	r3, [r3, #24]
 8001456:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800145a:	603b      	str	r3, [r7, #0]
 800145c:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800145e:	bf00      	nop
 8001460:	4b24      	ldr	r3, [pc, #144]	@ (80014f4 <SystemClock_Config+0xd8>)
 8001462:	699b      	ldr	r3, [r3, #24]
 8001464:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001468:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800146c:	d1f8      	bne.n	8001460 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800146e:	2301      	movs	r3, #1
 8001470:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001472:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001476:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001478:	2302      	movs	r3, #2
 800147a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800147c:	2302      	movs	r3, #2
 800147e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8001480:	2302      	movs	r3, #2
 8001482:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 44;
 8001484:	232c      	movs	r3, #44	@ 0x2c
 8001486:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8001488:	2301      	movs	r3, #1
 800148a:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800148c:	2302      	movs	r3, #2
 800148e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001490:	2302      	movs	r3, #2
 8001492:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001494:	230c      	movs	r3, #12
 8001496:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001498:	2300      	movs	r3, #0
 800149a:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800149c:	2300      	movs	r3, #0
 800149e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014a4:	4618      	mov	r0, r3
 80014a6:	f003 ffdf 	bl	8005468 <HAL_RCC_OscConfig>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d001      	beq.n	80014b4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80014b0:	f000 f9fa 	bl	80018a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014b4:	233f      	movs	r3, #63	@ 0x3f
 80014b6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014b8:	2303      	movs	r3, #3
 80014ba:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80014bc:	2300      	movs	r3, #0
 80014be:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80014c0:	2308      	movs	r3, #8
 80014c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80014c4:	2340      	movs	r3, #64	@ 0x40
 80014c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80014c8:	2340      	movs	r3, #64	@ 0x40
 80014ca:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80014cc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80014d0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80014d2:	2340      	movs	r3, #64	@ 0x40
 80014d4:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80014d6:	1d3b      	adds	r3, r7, #4
 80014d8:	2103      	movs	r1, #3
 80014da:	4618      	mov	r0, r3
 80014dc:	f004 fb9e 	bl	8005c1c <HAL_RCC_ClockConfig>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d001      	beq.n	80014ea <SystemClock_Config+0xce>
  {
    Error_Handler();
 80014e6:	f000 f9df 	bl	80018a8 <Error_Handler>
  }
}
 80014ea:	bf00      	nop
 80014ec:	3770      	adds	r7, #112	@ 0x70
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	58024800 	.word	0x58024800

080014f8 <__io_putchar>:

/* USER CODE BEGIN 4 */
PUTCHAR_PROTOTYPE
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart4, (uint8_t*) &ch, 1, 0xFFFF);
 8001500:	1d39      	adds	r1, r7, #4
 8001502:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001506:	2201      	movs	r2, #1
 8001508:	4803      	ldr	r0, [pc, #12]	@ (8001518 <__io_putchar+0x20>)
 800150a:	f007 fa63 	bl	80089d4 <HAL_UART_Transmit>
	return ch;
 800150e:	687b      	ldr	r3, [r7, #4]
}
 8001510:	4618      	mov	r0, r3
 8001512:	3708      	adds	r7, #8
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	240005b8 	.word	0x240005b8

0800151c <HAL_UART_RxCpltCallback>:

/*  ------------ 串口中断回调函数 -----------*/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b08c      	sub	sp, #48	@ 0x30
 8001520:	af04      	add	r7, sp, #16
 8001522:	6078      	str	r0, [r7, #4]
	// UART9 中断回调函数
	if (huart->Instance == UART9)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a6d      	ldr	r2, [pc, #436]	@ (80016e0 <HAL_UART_RxCpltCallback+0x1c4>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d10a      	bne.n	8001544 <HAL_UART_RxCpltCallback+0x28>
	{
		// 将缓冲区中的Action数据输入到Data_Analyse()函数进行处理
		Data_Analyse(data);
 800152e:	4b6d      	ldr	r3, [pc, #436]	@ (80016e4 <HAL_UART_RxCpltCallback+0x1c8>)
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	4618      	mov	r0, r3
 8001534:	f009 fff8 	bl	800b528 <Data_Analyse>
		// 更新UART9接收中断回调, 中断源UART9, 缓冲区data, 缓冲大小 1 
		HAL_UART_Receive_IT(&huart9, &data, 1);
 8001538:	2201      	movs	r2, #1
 800153a:	496a      	ldr	r1, [pc, #424]	@ (80016e4 <HAL_UART_RxCpltCallback+0x1c8>)
 800153c:	486a      	ldr	r0, [pc, #424]	@ (80016e8 <HAL_UART_RxCpltCallback+0x1cc>)
 800153e:	f007 fb9f 	bl	8008c80 <HAL_UART_Receive_IT>
 8001542:	e0c4      	b.n	80016ce <HAL_UART_RxCpltCallback+0x1b2>

	}
	// UART4 中断回调函数
	else if (huart->Instance == UART4)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a68      	ldr	r2, [pc, #416]	@ (80016ec <HAL_UART_RxCpltCallback+0x1d0>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d10a      	bne.n	8001564 <HAL_UART_RxCpltCallback+0x48>
	{
		// 将缓冲区中的屏幕数据输入到Data_Analyse()函数进行处理
		Check_Flag(Screen_data);
 800154e:	4b68      	ldr	r3, [pc, #416]	@ (80016f0 <HAL_UART_RxCpltCallback+0x1d4>)
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	4618      	mov	r0, r3
 8001554:	f00b ff10 	bl	800d378 <Check_Flag>
		// 更新UART4接收中断回调, 中断源UART4, 缓冲区Screen_data, 缓冲大小 1                   	   
		HAL_UART_Receive_IT(&huart4, &Screen_data, 1);
 8001558:	2201      	movs	r2, #1
 800155a:	4965      	ldr	r1, [pc, #404]	@ (80016f0 <HAL_UART_RxCpltCallback+0x1d4>)
 800155c:	4865      	ldr	r0, [pc, #404]	@ (80016f4 <HAL_UART_RxCpltCallback+0x1d8>)
 800155e:	f007 fb8f 	bl	8008c80 <HAL_UART_Receive_IT>
 8001562:	e0b4      	b.n	80016ce <HAL_UART_RxCpltCallback+0x1b2>
	}
	// FIXME:滴滴, 注释补一�?
	else if (huart->Instance == USART10)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a63      	ldr	r2, [pc, #396]	@ (80016f8 <HAL_UART_RxCpltCallback+0x1dc>)
 800156a:	4293      	cmp	r3, r2
 800156c:	f040 80af 	bne.w	80016ce <HAL_UART_RxCpltCallback+0x1b2>
	{
		//static uint8_t RxState = 0;
		// 将缓冲区中的Action数据存入RxBuffer�?
		RxBuffer[Uart10_Rx_Cnt++] = aRxBuffer;
 8001570:	4b62      	ldr	r3, [pc, #392]	@ (80016fc <HAL_UART_RxCpltCallback+0x1e0>)
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	1c5a      	adds	r2, r3, #1
 8001576:	b2d1      	uxtb	r1, r2
 8001578:	4a60      	ldr	r2, [pc, #384]	@ (80016fc <HAL_UART_RxCpltCallback+0x1e0>)
 800157a:	7011      	strb	r1, [r2, #0]
 800157c:	461a      	mov	r2, r3
 800157e:	4b60      	ldr	r3, [pc, #384]	@ (8001700 <HAL_UART_RxCpltCallback+0x1e4>)
 8001580:	7819      	ldrb	r1, [r3, #0]
 8001582:	4b60      	ldr	r3, [pc, #384]	@ (8001704 <HAL_UART_RxCpltCallback+0x1e8>)
 8001584:	5499      	strb	r1, [r3, r2]
			memset(RxBuffer, 0, sizeof(RxBuffer));
			Uart10_Rx_Cnt = 0;
			return;
		}
		//如果接收到的收据是包头为a,包尾为b,判断是否能正常接收坐标返�?
		if (aRxBuffer == 'd')
 8001586:	4b5e      	ldr	r3, [pc, #376]	@ (8001700 <HAL_UART_RxCpltCallback+0x1e4>)
 8001588:	781b      	ldrb	r3, [r3, #0]
 800158a:	2b64      	cmp	r3, #100	@ 0x64
 800158c:	d131      	bne.n	80015f2 <HAL_UART_RxCpltCallback+0xd6>
		{ // ������???'d'��˵�������Ϻ�Բ����λ��??
			char *start = strchr(RxBuffer, 'a');
 800158e:	2161      	movs	r1, #97	@ 0x61
 8001590:	485c      	ldr	r0, [pc, #368]	@ (8001704 <HAL_UART_RxCpltCallback+0x1e8>)
 8001592:	f00d fe02 	bl	800f19a <strchr>
 8001596:	61f8      	str	r0, [r7, #28]
			char *end = strchr(RxBuffer, 'd');
 8001598:	2164      	movs	r1, #100	@ 0x64
 800159a:	485a      	ldr	r0, [pc, #360]	@ (8001704 <HAL_UART_RxCpltCallback+0x1e8>)
 800159c:	f00d fdfd 	bl	800f19a <strchr>
 80015a0:	61b8      	str	r0, [r7, #24]

			if (start != NULL && end != NULL && end > start)
 80015a2:	69fb      	ldr	r3, [r7, #28]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d024      	beq.n	80015f2 <HAL_UART_RxCpltCallback+0xd6>
 80015a8:	69bb      	ldr	r3, [r7, #24]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d021      	beq.n	80015f2 <HAL_UART_RxCpltCallback+0xd6>
 80015ae:	69ba      	ldr	r2, [r7, #24]
 80015b0:	69fb      	ldr	r3, [r7, #28]
 80015b2:	429a      	cmp	r2, r3
 80015b4:	d91d      	bls.n	80015f2 <HAL_UART_RxCpltCallback+0xd6>
			{
				*end = '\0';
 80015b6:	69bb      	ldr	r3, [r7, #24]
 80015b8:	2200      	movs	r2, #0
 80015ba:	701a      	strb	r2, [r3, #0]
				if (sscanf(start + 1, "%f,%f,%d", &x, &y, &colour) == 3)
 80015bc:	69fb      	ldr	r3, [r7, #28]
 80015be:	1c58      	adds	r0, r3, #1
 80015c0:	4b51      	ldr	r3, [pc, #324]	@ (8001708 <HAL_UART_RxCpltCallback+0x1ec>)
 80015c2:	9300      	str	r3, [sp, #0]
 80015c4:	4b51      	ldr	r3, [pc, #324]	@ (800170c <HAL_UART_RxCpltCallback+0x1f0>)
 80015c6:	4a52      	ldr	r2, [pc, #328]	@ (8001710 <HAL_UART_RxCpltCallback+0x1f4>)
 80015c8:	4952      	ldr	r1, [pc, #328]	@ (8001714 <HAL_UART_RxCpltCallback+0x1f8>)
 80015ca:	f00d fd6f 	bl	800f0ac <siscanf>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b03      	cmp	r3, #3
 80015d2:	d105      	bne.n	80015e0 <HAL_UART_RxCpltCallback+0xc4>
				{
					// ���ݽ����ɹ�
					Point_Flag = 1;
 80015d4:	4b50      	ldr	r3, [pc, #320]	@ (8001718 <HAL_UART_RxCpltCallback+0x1fc>)
 80015d6:	2201      	movs	r2, #1
 80015d8:	701a      	strb	r2, [r3, #0]
					tx2_empty_recv_cnt = 0;	//接收到正常坐标返回时，a将tx2_empty_recv_cnt清零								12/11 ttxQWQ534
 80015da:	4b50      	ldr	r3, [pc, #320]	@ (800171c <HAL_UART_RxCpltCallback+0x200>)
 80015dc:	2200      	movs	r2, #0
 80015de:	701a      	strb	r2, [r3, #0]
				}

				// ��ջ���???
				memset(RxBuffer, 0, sizeof(RxBuffer));
 80015e0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80015e4:	2100      	movs	r1, #0
 80015e6:	4847      	ldr	r0, [pc, #284]	@ (8001704 <HAL_UART_RxCpltCallback+0x1e8>)
 80015e8:	f00d fdcf 	bl	800f18a <memset>
				Uart10_Rx_Cnt = 0;
 80015ec:	4b43      	ldr	r3, [pc, #268]	@ (80016fc <HAL_UART_RxCpltCallback+0x1e0>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	701a      	strb	r2, [r3, #0]
			}
		}
		//如果接收到的收据是包头为c,包尾为b, 则进行二维码的数据存�?
		if (aRxBuffer == 'b')
 80015f2:	4b43      	ldr	r3, [pc, #268]	@ (8001700 <HAL_UART_RxCpltCallback+0x1e4>)
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	2b62      	cmp	r3, #98	@ 0x62
 80015f8:	d169      	bne.n	80016ce <HAL_UART_RxCpltCallback+0x1b2>
		{ // ������???'b'��˵���Ƕ�ά����??
			char *start = strchr(RxBuffer, 'c');
 80015fa:	2163      	movs	r1, #99	@ 0x63
 80015fc:	4841      	ldr	r0, [pc, #260]	@ (8001704 <HAL_UART_RxCpltCallback+0x1e8>)
 80015fe:	f00d fdcc 	bl	800f19a <strchr>
 8001602:	6178      	str	r0, [r7, #20]
			char *end = strchr(RxBuffer, 'b');
 8001604:	2162      	movs	r1, #98	@ 0x62
 8001606:	483f      	ldr	r0, [pc, #252]	@ (8001704 <HAL_UART_RxCpltCallback+0x1e8>)
 8001608:	f00d fdc7 	bl	800f19a <strchr>
 800160c:	6138      	str	r0, [r7, #16]

			if (start != NULL && end != NULL && end > start)
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d027      	beq.n	8001664 <HAL_UART_RxCpltCallback+0x148>
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d024      	beq.n	8001664 <HAL_UART_RxCpltCallback+0x148>
 800161a:	693a      	ldr	r2, [r7, #16]
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	429a      	cmp	r2, r3
 8001620:	d920      	bls.n	8001664 <HAL_UART_RxCpltCallback+0x148>
			{
				*end = '\0';
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	2200      	movs	r2, #0
 8001626:	701a      	strb	r2, [r3, #0]
//				for (int i = 0; i < 6; i++) {
//					if (sscanf(start +1+ i, "%d", &QR_data[i])) {
				if (sscanf(start + 1, "%d,%d,%d,%d,%d,%d", &QR_data[0],
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	1c58      	adds	r0, r3, #1
 800162c:	4b3c      	ldr	r3, [pc, #240]	@ (8001720 <HAL_UART_RxCpltCallback+0x204>)
 800162e:	9303      	str	r3, [sp, #12]
 8001630:	4b3c      	ldr	r3, [pc, #240]	@ (8001724 <HAL_UART_RxCpltCallback+0x208>)
 8001632:	9302      	str	r3, [sp, #8]
 8001634:	4b3c      	ldr	r3, [pc, #240]	@ (8001728 <HAL_UART_RxCpltCallback+0x20c>)
 8001636:	9301      	str	r3, [sp, #4]
 8001638:	4b3c      	ldr	r3, [pc, #240]	@ (800172c <HAL_UART_RxCpltCallback+0x210>)
 800163a:	9300      	str	r3, [sp, #0]
 800163c:	4b3c      	ldr	r3, [pc, #240]	@ (8001730 <HAL_UART_RxCpltCallback+0x214>)
 800163e:	4a3d      	ldr	r2, [pc, #244]	@ (8001734 <HAL_UART_RxCpltCallback+0x218>)
 8001640:	493d      	ldr	r1, [pc, #244]	@ (8001738 <HAL_UART_RxCpltCallback+0x21c>)
 8001642:	f00d fd33 	bl	800f0ac <siscanf>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d002      	beq.n	8001652 <HAL_UART_RxCpltCallback+0x136>
						&QR_data[1], &QR_data[2], &QR_data[3], &QR_data[4],
						&QR_data[5]))
				{
					// ���ݽ����ɹ�
//						if(i==5) QR_Flag =  1;
					QR_Flag = 1;
 800164c:	4b3b      	ldr	r3, [pc, #236]	@ (800173c <HAL_UART_RxCpltCallback+0x220>)
 800164e:	2201      	movs	r2, #1
 8001650:	601a      	str	r2, [r3, #0]
				}

//				}
				// ��ջ���???
				memset(RxBuffer, 0, sizeof(RxBuffer));
 8001652:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001656:	2100      	movs	r1, #0
 8001658:	482a      	ldr	r0, [pc, #168]	@ (8001704 <HAL_UART_RxCpltCallback+0x1e8>)
 800165a:	f00d fd96 	bl	800f18a <memset>
				Uart10_Rx_Cnt = 0;
 800165e:	4b27      	ldr	r3, [pc, #156]	@ (80016fc <HAL_UART_RxCpltCallback+0x1e0>)
 8001660:	2200      	movs	r2, #0
 8001662:	701a      	strb	r2, [r3, #0]
			}

			if (aRxBuffer == 'h')//接收到包尾是h，说明接收到了tx2发�?�的未检测到目标物体的标志，则此中断每进�?次，tx2_empty_recv_cnt要自�?         	   12/11 ttxQWQ534
 8001664:	4b26      	ldr	r3, [pc, #152]	@ (8001700 <HAL_UART_RxCpltCallback+0x1e4>)
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	2b68      	cmp	r3, #104	@ 0x68
 800166a:	d130      	bne.n	80016ce <HAL_UART_RxCpltCallback+0x1b2>
			{
				char *start = strchr(RxBuffer, 'g');
 800166c:	2167      	movs	r1, #103	@ 0x67
 800166e:	4825      	ldr	r0, [pc, #148]	@ (8001704 <HAL_UART_RxCpltCallback+0x1e8>)
 8001670:	f00d fd93 	bl	800f19a <strchr>
 8001674:	60f8      	str	r0, [r7, #12]
				char *end = strchr(RxBuffer, 'h');
 8001676:	2168      	movs	r1, #104	@ 0x68
 8001678:	4822      	ldr	r0, [pc, #136]	@ (8001704 <HAL_UART_RxCpltCallback+0x1e8>)
 800167a:	f00d fd8e 	bl	800f19a <strchr>
 800167e:	60b8      	str	r0, [r7, #8]

				if (start != NULL && end != NULL && end > start)
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d023      	beq.n	80016ce <HAL_UART_RxCpltCallback+0x1b2>
 8001686:	68bb      	ldr	r3, [r7, #8]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d020      	beq.n	80016ce <HAL_UART_RxCpltCallback+0x1b2>
 800168c:	68ba      	ldr	r2, [r7, #8]
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	429a      	cmp	r2, r3
 8001692:	d91c      	bls.n	80016ce <HAL_UART_RxCpltCallback+0x1b2>
				{
					*end = '\0';
 8001694:	68bb      	ldr	r3, [r7, #8]
 8001696:	2200      	movs	r2, #0
 8001698:	701a      	strb	r2, [r3, #0]
					if (sscanf(start + 1, "%c", tx2_empty_recv_cnt))
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	3301      	adds	r3, #1
 800169e:	4a1f      	ldr	r2, [pc, #124]	@ (800171c <HAL_UART_RxCpltCallback+0x200>)
 80016a0:	7812      	ldrb	r2, [r2, #0]
 80016a2:	4927      	ldr	r1, [pc, #156]	@ (8001740 <HAL_UART_RxCpltCallback+0x224>)
 80016a4:	4618      	mov	r0, r3
 80016a6:	f00d fd01 	bl	800f0ac <siscanf>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d005      	beq.n	80016bc <HAL_UART_RxCpltCallback+0x1a0>
					{
						tx2_empty_recv_cnt++;
 80016b0:	4b1a      	ldr	r3, [pc, #104]	@ (800171c <HAL_UART_RxCpltCallback+0x200>)
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	3301      	adds	r3, #1
 80016b6:	b2da      	uxtb	r2, r3
 80016b8:	4b18      	ldr	r3, [pc, #96]	@ (800171c <HAL_UART_RxCpltCallback+0x200>)
 80016ba:	701a      	strb	r2, [r3, #0]
					}
					memset(RxBuffer, 0, sizeof(RxBuffer));
 80016bc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80016c0:	2100      	movs	r1, #0
 80016c2:	4810      	ldr	r0, [pc, #64]	@ (8001704 <HAL_UART_RxCpltCallback+0x1e8>)
 80016c4:	f00d fd61 	bl	800f18a <memset>
					Uart10_Rx_Cnt = 0;
 80016c8:	4b0c      	ldr	r3, [pc, #48]	@ (80016fc <HAL_UART_RxCpltCallback+0x1e0>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	701a      	strb	r2, [r3, #0]
//			memset(RxBuffer, 0, sizeof(RxBuffer));
//
//		}
	}
	//	更新串口接收中断,中断触发�? UART10,接收数组 aRxBuffer,缓存大小 1
	HAL_UART_Receive_IT(&huart10, (uint8_t*) &aRxBuffer, 1);
 80016ce:	2201      	movs	r2, #1
 80016d0:	490b      	ldr	r1, [pc, #44]	@ (8001700 <HAL_UART_RxCpltCallback+0x1e4>)
 80016d2:	481c      	ldr	r0, [pc, #112]	@ (8001744 <HAL_UART_RxCpltCallback+0x228>)
 80016d4:	f007 fad4 	bl	8008c80 <HAL_UART_Receive_IT>
}
 80016d8:	3720      	adds	r7, #32
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	40011800 	.word	0x40011800
 80016e4:	24000366 	.word	0x24000366
 80016e8:	24000808 	.word	0x24000808
 80016ec:	40004c00 	.word	0x40004c00
 80016f0:	24000367 	.word	0x24000367
 80016f4:	240005b8 	.word	0x240005b8
 80016f8:	40011c00 	.word	0x40011c00
 80016fc:	2400046c 	.word	0x2400046c
 8001700:	24000369 	.word	0x24000369
 8001704:	2400036c 	.word	0x2400036c
 8001708:	2400047c 	.word	0x2400047c
 800170c:	24000474 	.word	0x24000474
 8001710:	24000470 	.word	0x24000470
 8001714:	080123a4 	.word	0x080123a4
 8001718:	24000478 	.word	0x24000478
 800171c:	24000479 	.word	0x24000479
 8001720:	24000014 	.word	0x24000014
 8001724:	24000010 	.word	0x24000010
 8001728:	2400000c 	.word	0x2400000c
 800172c:	24000008 	.word	0x24000008
 8001730:	24000004 	.word	0x24000004
 8001734:	24000000 	.word	0x24000000
 8001738:	080123b0 	.word	0x080123b0
 800173c:	24000020 	.word	0x24000020
 8001740:	080123c4 	.word	0x080123c4
 8001744:	24000a58 	.word	0x24000a58

08001748 <HAL_TIM_PeriodElapsedCallback>:

/*  ------------ 定时器中断回调函�? -----------*/
extern uint16_t time_tx;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
	// 如果中断源为TIM2
	if (htim == &htim2)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	4a30      	ldr	r2, [pc, #192]	@ (8001814 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001754:	4293      	cmp	r3, r2
 8001756:	d106      	bne.n	8001766 <HAL_TIM_PeriodElapsedCallback+0x1e>

//		X_out = X_Ctrl(&XPID, x_goal);
//		Y_out = Y_Ctrl(&YPID, y_goal);
//		A_out = A_Ctrl(&APID, a_goal);
		// Action数据展示
		Action_Show();
 8001758:	f00b fcbc 	bl	800d0d4 <Action_Show>
		// 二维码数据展�?
		QR_Show();
 800175c:	f00b fd36 	bl	800d1cc <QR_Show>
		// 色环,物料坐标数据展示
		Point_Show();
 8001760:	f00b fd70 	bl	800d244 <Point_Show>
 8001764:	e052      	b.n	800180c <HAL_TIM_PeriodElapsedCallback+0xc4>

	}
	// 如果中断源为TIM3
	else if (htim == &htim3)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	4a2b      	ldr	r2, [pc, #172]	@ (8001818 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d126      	bne.n	80017bc <HAL_TIM_PeriodElapsedCallback+0x74>
	{
		// 根据TX2回传坐标进行PID调节
		TX_X_out = Tx_X_Ctrl(&TXPID, tx_target);
 800176e:	4b2b      	ldr	r3, [pc, #172]	@ (800181c <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8001770:	edd3 7a00 	vldr	s15, [r3]
 8001774:	eeb0 0a67 	vmov.f32	s0, s15
 8001778:	4829      	ldr	r0, [pc, #164]	@ (8001820 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 800177a:	f00a f9d5 	bl	800bb28 <Tx_X_Ctrl>
 800177e:	4603      	mov	r3, r0
 8001780:	ee07 3a90 	vmov	s15, r3
 8001784:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001788:	4b26      	ldr	r3, [pc, #152]	@ (8001824 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 800178a:	edc3 7a00 	vstr	s15, [r3]
		TX_Y_out = Tx_Y_Ctrl(&TYPID, ty_target);
 800178e:	4b26      	ldr	r3, [pc, #152]	@ (8001828 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001790:	edd3 7a00 	vldr	s15, [r3]
 8001794:	eeb0 0a67 	vmov.f32	s0, s15
 8001798:	4824      	ldr	r0, [pc, #144]	@ (800182c <HAL_TIM_PeriodElapsedCallback+0xe4>)
 800179a:	f00a fa6b 	bl	800bc74 <Tx_Y_Ctrl>
 800179e:	4603      	mov	r3, r0
 80017a0:	ee07 3a90 	vmov	s15, r3
 80017a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017a8:	4b21      	ldr	r3, [pc, #132]	@ (8001830 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80017aa:	edc3 7a00 	vstr	s15, [r3]
		time_tx++;
 80017ae:	4b21      	ldr	r3, [pc, #132]	@ (8001834 <HAL_TIM_PeriodElapsedCallback+0xec>)
 80017b0:	881b      	ldrh	r3, [r3, #0]
 80017b2:	3301      	adds	r3, #1
 80017b4:	b29a      	uxth	r2, r3
 80017b6:	4b1f      	ldr	r3, [pc, #124]	@ (8001834 <HAL_TIM_PeriodElapsedCallback+0xec>)
 80017b8:	801a      	strh	r2, [r3, #0]
 80017ba:	e027      	b.n	800180c <HAL_TIM_PeriodElapsedCallback+0xc4>
	}
	// 如果中断源为TIM5
	else if (htim == &htim5)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	4a1e      	ldr	r2, [pc, #120]	@ (8001838 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d109      	bne.n	80017d8 <HAL_TIM_PeriodElapsedCallback+0x90>
	{
		// TODO: �?要注释理�?
		if (time5_jiancha != 0)
 80017c4:	4b1d      	ldr	r3, [pc, #116]	@ (800183c <HAL_TIM_PeriodElapsedCallback+0xf4>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d01f      	beq.n	800180c <HAL_TIM_PeriodElapsedCallback+0xc4>
			time5_jiancha--;
 80017cc:	4b1b      	ldr	r3, [pc, #108]	@ (800183c <HAL_TIM_PeriodElapsedCallback+0xf4>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	3b01      	subs	r3, #1
 80017d2:	4a1a      	ldr	r2, [pc, #104]	@ (800183c <HAL_TIM_PeriodElapsedCallback+0xf4>)
 80017d4:	6013      	str	r3, [r2, #0]
 80017d6:	e019      	b.n	800180c <HAL_TIM_PeriodElapsedCallback+0xc4>
	}
//	中断源为TIM12
	else if (htim == &htim12)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	4a19      	ldr	r2, [pc, #100]	@ (8001840 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 80017dc:	4293      	cmp	r3, r2
 80017de:	d115      	bne.n	800180c <HAL_TIM_PeriodElapsedCallback+0xc4>
	{
		// 如果允许阻塞查询标志位为true
		if (Apply_Chock == true)
 80017e0:	4b18      	ldr	r3, [pc, #96]	@ (8001844 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d011      	beq.n	800180c <HAL_TIM_PeriodElapsedCallback+0xc4>
		{
			// 如果底层步进电机到位返回标志位为true
			if (Base_Data == true)
 80017e8:	4b17      	ldr	r3, [pc, #92]	@ (8001848 <HAL_TIM_PeriodElapsedCallback+0x100>)
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d00c      	beq.n	800180a <HAL_TIM_PeriodElapsedCallback+0xc2>
			{
				// 取消阻塞状�??,阻塞标志位记为false
				Choke_Flag = false;
 80017f0:	4b16      	ldr	r3, [pc, #88]	@ (800184c <HAL_TIM_PeriodElapsedCallback+0x104>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	701a      	strb	r2, [r3, #0]
				// 申请阻塞查询标志位记为false
				Apply_Chock = false;
 80017f6:	4b13      	ldr	r3, [pc, #76]	@ (8001844 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	701a      	strb	r2, [r3, #0]
				// 关闭定时器中断
				Base_Data = false;
 80017fc:	4b12      	ldr	r3, [pc, #72]	@ (8001848 <HAL_TIM_PeriodElapsedCallback+0x100>)
 80017fe:	2200      	movs	r2, #0
 8001800:	701a      	strb	r2, [r3, #0]
				HAL_TIM_Base_Stop_IT(&htim12);
 8001802:	480f      	ldr	r0, [pc, #60]	@ (8001840 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8001804:	f006 fc36 	bl	8008074 <HAL_TIM_Base_Stop_IT>
 8001808:	e000      	b.n	800180c <HAL_TIM_PeriodElapsedCallback+0xc4>
			// 	// 重置底层步进电机到位返回标志位为false
			// 	Base_Data = false;
			// } 
			else
			{
				return;
 800180a:	bf00      	nop
			}
		}
	}
}
 800180c:	3708      	adds	r7, #8
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	24000488 	.word	0x24000488
 8001818:	240004d4 	.word	0x240004d4
 800181c:	24000018 	.word	0x24000018
 8001820:	24000bc0 	.word	0x24000bc0
 8001824:	24000c18 	.word	0x24000c18
 8001828:	2400001c 	.word	0x2400001c
 800182c:	24000bec 	.word	0x24000bec
 8001830:	24000c1c 	.word	0x24000c1c
 8001834:	24000c28 	.word	0x24000c28
 8001838:	24000520 	.word	0x24000520
 800183c:	24000c24 	.word	0x24000c24
 8001840:	2400056c 	.word	0x2400056c
 8001844:	24000c21 	.word	0x24000c21
 8001848:	24000365 	.word	0x24000365
 800184c:	24000c20 	.word	0x24000c20

08001850 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b084      	sub	sp, #16
 8001854:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001856:	463b      	mov	r3, r7
 8001858:	2200      	movs	r2, #0
 800185a:	601a      	str	r2, [r3, #0]
 800185c:	605a      	str	r2, [r3, #4]
 800185e:	609a      	str	r2, [r3, #8]
 8001860:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001862:	f001 fc59 	bl	8003118 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001866:	2301      	movs	r3, #1
 8001868:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800186a:	2300      	movs	r3, #0
 800186c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 800186e:	2300      	movs	r3, #0
 8001870:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001872:	231f      	movs	r3, #31
 8001874:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8001876:	2387      	movs	r3, #135	@ 0x87
 8001878:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800187a:	2300      	movs	r3, #0
 800187c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800187e:	2300      	movs	r3, #0
 8001880:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001882:	2301      	movs	r3, #1
 8001884:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001886:	2301      	movs	r3, #1
 8001888:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800188a:	2300      	movs	r3, #0
 800188c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800188e:	2300      	movs	r3, #0
 8001890:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001892:	463b      	mov	r3, r7
 8001894:	4618      	mov	r0, r3
 8001896:	f001 fc77 	bl	8003188 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800189a:	2004      	movs	r0, #4
 800189c:	f001 fc54 	bl	8003148 <HAL_MPU_Enable>

}
 80018a0:	bf00      	nop
 80018a2:	3710      	adds	r7, #16
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}

080018a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018ac:	b672      	cpsid	i
}
 80018ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80018b0:	bf00      	nop
 80018b2:	e7fd      	b.n	80018b0 <Error_Handler+0x8>

080018b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018ba:	4b0a      	ldr	r3, [pc, #40]	@ (80018e4 <HAL_MspInit+0x30>)
 80018bc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80018c0:	4a08      	ldr	r2, [pc, #32]	@ (80018e4 <HAL_MspInit+0x30>)
 80018c2:	f043 0302 	orr.w	r3, r3, #2
 80018c6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80018ca:	4b06      	ldr	r3, [pc, #24]	@ (80018e4 <HAL_MspInit+0x30>)
 80018cc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80018d0:	f003 0302 	and.w	r3, r3, #2
 80018d4:	607b      	str	r3, [r7, #4]
 80018d6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018d8:	bf00      	nop
 80018da:	370c      	adds	r7, #12
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr
 80018e4:	58024400 	.word	0x58024400

080018e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 80018ec:	bf00      	nop
 80018ee:	e7fd      	b.n	80018ec <NMI_Handler+0x4>

080018f0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018f4:	bf00      	nop
 80018f6:	e7fd      	b.n	80018f4 <HardFault_Handler+0x4>

080018f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018fc:	bf00      	nop
 80018fe:	e7fd      	b.n	80018fc <MemManage_Handler+0x4>

08001900 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001904:	bf00      	nop
 8001906:	e7fd      	b.n	8001904 <BusFault_Handler+0x4>

08001908 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800190c:	bf00      	nop
 800190e:	e7fd      	b.n	800190c <UsageFault_Handler+0x4>

08001910 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001914:	bf00      	nop
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr

0800191e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800191e:	b480      	push	{r7}
 8001920:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001922:	bf00      	nop
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr

0800192c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001930:	bf00      	nop
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr

0800193a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800193a:	b580      	push	{r7, lr}
 800193c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800193e:	f001 fa97 	bl	8002e70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001942:	bf00      	nop
 8001944:	bd80      	pop	{r7, pc}
	...

08001948 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 800194c:	4802      	ldr	r0, [pc, #8]	@ (8001958 <FDCAN1_IT0_IRQHandler+0x10>)
 800194e:	f002 fead 	bl	80046ac <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8001952:	bf00      	nop
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	240002bc 	.word	0x240002bc

0800195c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001960:	4802      	ldr	r0, [pc, #8]	@ (800196c <TIM2_IRQHandler+0x10>)
 8001962:	f006 fbb6 	bl	80080d2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001966:	bf00      	nop
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	24000488 	.word	0x24000488

08001970 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001974:	4802      	ldr	r0, [pc, #8]	@ (8001980 <TIM3_IRQHandler+0x10>)
 8001976:	f006 fbac 	bl	80080d2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800197a:	bf00      	nop
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	240004d4 	.word	0x240004d4

08001984 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001988:	4802      	ldr	r0, [pc, #8]	@ (8001994 <USART2_IRQHandler+0x10>)
 800198a:	f007 f9c5 	bl	8008d18 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800198e:	bf00      	nop
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	2400089c 	.word	0x2400089c

08001998 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800199c:	4802      	ldr	r0, [pc, #8]	@ (80019a8 <USART3_IRQHandler+0x10>)
 800199e:	f007 f9bb 	bl	8008d18 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80019a2:	bf00      	nop
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	24000930 	.word	0x24000930

080019ac <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim12);
 80019b0:	4802      	ldr	r0, [pc, #8]	@ (80019bc <TIM8_BRK_TIM12_IRQHandler+0x10>)
 80019b2:	f006 fb8e 	bl	80080d2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 80019b6:	bf00      	nop
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	2400056c 	.word	0x2400056c

080019c0 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80019c4:	4802      	ldr	r0, [pc, #8]	@ (80019d0 <TIM5_IRQHandler+0x10>)
 80019c6:	f006 fb84 	bl	80080d2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80019ca:	bf00      	nop
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	24000520 	.word	0x24000520

080019d4 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80019d8:	4802      	ldr	r0, [pc, #8]	@ (80019e4 <UART4_IRQHandler+0x10>)
 80019da:	f007 f99d 	bl	8008d18 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80019de:	bf00      	nop
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	240005b8 	.word	0x240005b8

080019e8 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 80019ec:	4802      	ldr	r0, [pc, #8]	@ (80019f8 <UART7_IRQHandler+0x10>)
 80019ee:	f007 f993 	bl	8008d18 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 80019f2:	bf00      	nop
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	240006e0 	.word	0x240006e0

080019fc <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 8001a00:	4802      	ldr	r0, [pc, #8]	@ (8001a0c <UART8_IRQHandler+0x10>)
 8001a02:	f007 f989 	bl	8008d18 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 8001a06:	bf00      	nop
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	24000774 	.word	0x24000774

08001a10 <UART9_IRQHandler>:

/**
  * @brief This function handles UART9 global interrupt.
  */
void UART9_IRQHandler(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART9_IRQn 0 */

  /* USER CODE END UART9_IRQn 0 */
  HAL_UART_IRQHandler(&huart9);
 8001a14:	4802      	ldr	r0, [pc, #8]	@ (8001a20 <UART9_IRQHandler+0x10>)
 8001a16:	f007 f97f 	bl	8008d18 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART9_IRQn 1 */

  /* USER CODE END UART9_IRQn 1 */
}
 8001a1a:	bf00      	nop
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	24000808 	.word	0x24000808

08001a24 <USART10_IRQHandler>:

/**
  * @brief This function handles USART10 global interrupt.
  */
void USART10_IRQHandler(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART10_IRQn 0 */

  /* USER CODE END USART10_IRQn 0 */
  HAL_UART_IRQHandler(&huart10);
 8001a28:	4802      	ldr	r0, [pc, #8]	@ (8001a34 <USART10_IRQHandler+0x10>)
 8001a2a:	f007 f975 	bl	8008d18 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART10_IRQn 1 */

  /* USER CODE END USART10_IRQn 1 */
}
 8001a2e:	bf00      	nop
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	24000a58 	.word	0x24000a58

08001a38 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
	return 1;
 8001a3c:	2301      	movs	r3, #1
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr

08001a48 <_kill>:

int _kill(int pid, int sig)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b082      	sub	sp, #8
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
 8001a50:	6039      	str	r1, [r7, #0]
	(void) pid;
	(void) sig;
	errno = EINVAL;
 8001a52:	f00d fc1b 	bl	800f28c <__errno>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2216      	movs	r2, #22
 8001a5a:	601a      	str	r2, [r3, #0]
	return -1;
 8001a5c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	3708      	adds	r7, #8
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}

08001a68 <_exit>:

void _exit(int status)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001a70:	f04f 31ff 	mov.w	r1, #4294967295
 8001a74:	6878      	ldr	r0, [r7, #4]
 8001a76:	f7ff ffe7 	bl	8001a48 <_kill>
	while (1)
 8001a7a:	bf00      	nop
 8001a7c:	e7fd      	b.n	8001a7a <_exit+0x12>

08001a7e <_read>:
	{
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a7e:	b580      	push	{r7, lr}
 8001a80:	b086      	sub	sp, #24
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	60f8      	str	r0, [r7, #12]
 8001a86:	60b9      	str	r1, [r7, #8]
 8001a88:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	617b      	str	r3, [r7, #20]
 8001a8e:	e00a      	b.n	8001aa6 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001a90:	f3af 8000 	nop.w
 8001a94:	4601      	mov	r1, r0
 8001a96:	68bb      	ldr	r3, [r7, #8]
 8001a98:	1c5a      	adds	r2, r3, #1
 8001a9a:	60ba      	str	r2, [r7, #8]
 8001a9c:	b2ca      	uxtb	r2, r1
 8001a9e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	3301      	adds	r3, #1
 8001aa4:	617b      	str	r3, [r7, #20]
 8001aa6:	697a      	ldr	r2, [r7, #20]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	429a      	cmp	r2, r3
 8001aac:	dbf0      	blt.n	8001a90 <_read+0x12>
	}

	return len;
 8001aae:	687b      	ldr	r3, [r7, #4]
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	3718      	adds	r7, #24
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}

08001ab8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b086      	sub	sp, #24
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	60f8      	str	r0, [r7, #12]
 8001ac0:	60b9      	str	r1, [r7, #8]
 8001ac2:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	617b      	str	r3, [r7, #20]
 8001ac8:	e009      	b.n	8001ade <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001aca:	68bb      	ldr	r3, [r7, #8]
 8001acc:	1c5a      	adds	r2, r3, #1
 8001ace:	60ba      	str	r2, [r7, #8]
 8001ad0:	781b      	ldrb	r3, [r3, #0]
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f7ff fd10 	bl	80014f8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	3301      	adds	r3, #1
 8001adc:	617b      	str	r3, [r7, #20]
 8001ade:	697a      	ldr	r2, [r7, #20]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	429a      	cmp	r2, r3
 8001ae4:	dbf1      	blt.n	8001aca <_write+0x12>
	}
	return len;
 8001ae6:	687b      	ldr	r3, [r7, #4]
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	3718      	adds	r7, #24
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}

08001af0 <_close>:

int _close(int file)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b083      	sub	sp, #12
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
	(void) file;
	return -1;
 8001af8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	370c      	adds	r7, #12
 8001b00:	46bd      	mov	sp, r7
 8001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b06:	4770      	bx	lr

08001b08 <_fstat>:

int _fstat(int file, struct stat *st)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
 8001b10:	6039      	str	r1, [r7, #0]
	(void) file;
	st->st_mode = S_IFCHR;
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001b18:	605a      	str	r2, [r3, #4]
	return 0;
 8001b1a:	2300      	movs	r3, #0
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	370c      	adds	r7, #12
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr

08001b28 <_isatty>:

int _isatty(int file)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b083      	sub	sp, #12
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
	(void) file;
	return 1;
 8001b30:	2301      	movs	r3, #1
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	370c      	adds	r7, #12
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr

08001b3e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b3e:	b480      	push	{r7}
 8001b40:	b085      	sub	sp, #20
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	60f8      	str	r0, [r7, #12]
 8001b46:	60b9      	str	r1, [r7, #8]
 8001b48:	607a      	str	r2, [r7, #4]
	(void) file;
	(void) ptr;
	(void) dir;
	return 0;
 8001b4a:	2300      	movs	r3, #0
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	3714      	adds	r7, #20
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr

08001b58 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b086      	sub	sp, #24
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 8001b60:	4a14      	ldr	r2, [pc, #80]	@ (8001bb4 <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 8001b62:	4b15      	ldr	r3, [pc, #84]	@ (8001bb8 <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 8001b64:	1ad3      	subs	r3, r2, r3
 8001b66:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 8001b6c:	4b13      	ldr	r3, [pc, #76]	@ (8001bbc <_sbrk+0x64>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d102      	bne.n	8001b7a <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 8001b74:	4b11      	ldr	r3, [pc, #68]	@ (8001bbc <_sbrk+0x64>)
 8001b76:	4a12      	ldr	r2, [pc, #72]	@ (8001bc0 <_sbrk+0x68>)
 8001b78:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 8001b7a:	4b10      	ldr	r3, [pc, #64]	@ (8001bbc <_sbrk+0x64>)
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	4413      	add	r3, r2
 8001b82:	693a      	ldr	r2, [r7, #16]
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d207      	bcs.n	8001b98 <_sbrk+0x40>
		errno = ENOMEM;
 8001b88:	f00d fb80 	bl	800f28c <__errno>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	220c      	movs	r2, #12
 8001b90:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 8001b92:	f04f 33ff 	mov.w	r3, #4294967295
 8001b96:	e009      	b.n	8001bac <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 8001b98:	4b08      	ldr	r3, [pc, #32]	@ (8001bbc <_sbrk+0x64>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 8001b9e:	4b07      	ldr	r3, [pc, #28]	@ (8001bbc <_sbrk+0x64>)
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	4413      	add	r3, r2
 8001ba6:	4a05      	ldr	r2, [pc, #20]	@ (8001bbc <_sbrk+0x64>)
 8001ba8:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 8001baa:	68fb      	ldr	r3, [r7, #12]
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	3718      	adds	r7, #24
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	24050000 	.word	0x24050000
 8001bb8:	00000400 	.word	0x00000400
 8001bbc:	24000484 	.word	0x24000484
 8001bc0:	24000e58 	.word	0x24000e58

08001bc4 <SystemInit>:
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
 8001bc8:	4b32      	ldr	r3, [pc, #200]	@ (8001c94 <SystemInit+0xd0>)
 8001bca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001bce:	4a31      	ldr	r2, [pc, #196]	@ (8001c94 <SystemInit+0xd0>)
 8001bd0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001bd4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
	/* Reset the RCC clock configuration to the default reset state ------------*/

	/* Increasing the CPU frequency */
	if (FLASH_LATENCY_DEFAULT > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001bd8:	4b2f      	ldr	r3, [pc, #188]	@ (8001c98 <SystemInit+0xd4>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f003 030f 	and.w	r3, r3, #15
 8001be0:	2b06      	cmp	r3, #6
 8001be2:	d807      	bhi.n	8001bf4 <SystemInit+0x30>
	{
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 8001be4:	4b2c      	ldr	r3, [pc, #176]	@ (8001c98 <SystemInit+0xd4>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f023 030f 	bic.w	r3, r3, #15
 8001bec:	4a2a      	ldr	r2, [pc, #168]	@ (8001c98 <SystemInit+0xd4>)
 8001bee:	f043 0307 	orr.w	r3, r3, #7
 8001bf2:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

	/* Set HSION bit */
	RCC->CR |= RCC_CR_HSION;
 8001bf4:	4b29      	ldr	r3, [pc, #164]	@ (8001c9c <SystemInit+0xd8>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a28      	ldr	r2, [pc, #160]	@ (8001c9c <SystemInit+0xd8>)
 8001bfa:	f043 0301 	orr.w	r3, r3, #1
 8001bfe:	6013      	str	r3, [r2, #0]

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;
 8001c00:	4b26      	ldr	r3, [pc, #152]	@ (8001c9c <SystemInit+0xd8>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	611a      	str	r2, [r3, #16]

	/* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
	RCC->CR &= 0xEAF6ED7FU;
 8001c06:	4b25      	ldr	r3, [pc, #148]	@ (8001c9c <SystemInit+0xd8>)
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	4924      	ldr	r1, [pc, #144]	@ (8001c9c <SystemInit+0xd8>)
 8001c0c:	4b24      	ldr	r3, [pc, #144]	@ (8001ca0 <SystemInit+0xdc>)
 8001c0e:	4013      	ands	r3, r2
 8001c10:	600b      	str	r3, [r1, #0]

	/* Decreasing the number of wait states because of lower CPU frequency */
	if (FLASH_LATENCY_DEFAULT < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001c12:	4b21      	ldr	r3, [pc, #132]	@ (8001c98 <SystemInit+0xd4>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f003 0308 	and.w	r3, r3, #8
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d007      	beq.n	8001c2e <SystemInit+0x6a>
	{
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 8001c1e:	4b1e      	ldr	r3, [pc, #120]	@ (8001c98 <SystemInit+0xd4>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f023 030f 	bic.w	r3, r3, #15
 8001c26:	4a1c      	ldr	r2, [pc, #112]	@ (8001c98 <SystemInit+0xd4>)
 8001c28:	f043 0307 	orr.w	r3, r3, #7
 8001c2c:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

#if defined(D3_SRAM_BASE)
	/* Reset D1CFGR register */
	RCC->D1CFGR = 0x00000000;
 8001c2e:	4b1b      	ldr	r3, [pc, #108]	@ (8001c9c <SystemInit+0xd8>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	619a      	str	r2, [r3, #24]

	/* Reset D2CFGR register */
	RCC->D2CFGR = 0x00000000;
 8001c34:	4b19      	ldr	r3, [pc, #100]	@ (8001c9c <SystemInit+0xd8>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	61da      	str	r2, [r3, #28]

	/* Reset D3CFGR register */
	RCC->D3CFGR = 0x00000000;
 8001c3a:	4b18      	ldr	r3, [pc, #96]	@ (8001c9c <SystemInit+0xd8>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	621a      	str	r2, [r3, #32]

	/* Reset SRDCFGR register */
	RCC->SRDCFGR = 0x00000000;
#endif
	/* Reset PLLCKSELR register */
	RCC->PLLCKSELR = 0x02020200;
 8001c40:	4b16      	ldr	r3, [pc, #88]	@ (8001c9c <SystemInit+0xd8>)
 8001c42:	4a18      	ldr	r2, [pc, #96]	@ (8001ca4 <SystemInit+0xe0>)
 8001c44:	629a      	str	r2, [r3, #40]	@ 0x28

	/* Reset PLLCFGR register */
	RCC->PLLCFGR = 0x01FF0000;
 8001c46:	4b15      	ldr	r3, [pc, #84]	@ (8001c9c <SystemInit+0xd8>)
 8001c48:	4a17      	ldr	r2, [pc, #92]	@ (8001ca8 <SystemInit+0xe4>)
 8001c4a:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Reset PLL1DIVR register */
	RCC->PLL1DIVR = 0x01010280;
 8001c4c:	4b13      	ldr	r3, [pc, #76]	@ (8001c9c <SystemInit+0xd8>)
 8001c4e:	4a17      	ldr	r2, [pc, #92]	@ (8001cac <SystemInit+0xe8>)
 8001c50:	631a      	str	r2, [r3, #48]	@ 0x30
	/* Reset PLL1FRACR register */
	RCC->PLL1FRACR = 0x00000000;
 8001c52:	4b12      	ldr	r3, [pc, #72]	@ (8001c9c <SystemInit+0xd8>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	635a      	str	r2, [r3, #52]	@ 0x34

	/* Reset PLL2DIVR register */
	RCC->PLL2DIVR = 0x01010280;
 8001c58:	4b10      	ldr	r3, [pc, #64]	@ (8001c9c <SystemInit+0xd8>)
 8001c5a:	4a14      	ldr	r2, [pc, #80]	@ (8001cac <SystemInit+0xe8>)
 8001c5c:	639a      	str	r2, [r3, #56]	@ 0x38

	/* Reset PLL2FRACR register */

	RCC->PLL2FRACR = 0x00000000;
 8001c5e:	4b0f      	ldr	r3, [pc, #60]	@ (8001c9c <SystemInit+0xd8>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	63da      	str	r2, [r3, #60]	@ 0x3c
	/* Reset PLL3DIVR register */
	RCC->PLL3DIVR = 0x01010280;
 8001c64:	4b0d      	ldr	r3, [pc, #52]	@ (8001c9c <SystemInit+0xd8>)
 8001c66:	4a11      	ldr	r2, [pc, #68]	@ (8001cac <SystemInit+0xe8>)
 8001c68:	641a      	str	r2, [r3, #64]	@ 0x40

	/* Reset PLL3FRACR register */
	RCC->PLL3FRACR = 0x00000000;
 8001c6a:	4b0c      	ldr	r3, [pc, #48]	@ (8001c9c <SystemInit+0xd8>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	645a      	str	r2, [r3, #68]	@ 0x44

	/* Reset HSEBYP bit */
	RCC->CR &= 0xFFFBFFFFU;
 8001c70:	4b0a      	ldr	r3, [pc, #40]	@ (8001c9c <SystemInit+0xd8>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a09      	ldr	r2, [pc, #36]	@ (8001c9c <SystemInit+0xd8>)
 8001c76:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c7a:	6013      	str	r3, [r2, #0]

	/* Disable all interrupts */
	RCC->CIER = 0x00000000;
 8001c7c:	4b07      	ldr	r3, [pc, #28]	@ (8001c9c <SystemInit+0xd8>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	661a      	str	r2, [r3, #96]	@ 0x60
	/*
	 * Disable the FMC bank1 (enabled after reset).
	 * This, prevents CPU speculation access on this bank which blocks the use of FMC during
	 * 24us. During this time the others FMC master (such as LTDC) cannot use it!
	 */
	FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001c82:	4b0b      	ldr	r3, [pc, #44]	@ (8001cb0 <SystemInit+0xec>)
 8001c84:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001c88:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001c8a:	bf00      	nop
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr
 8001c94:	e000ed00 	.word	0xe000ed00
 8001c98:	52002000 	.word	0x52002000
 8001c9c:	58024400 	.word	0x58024400
 8001ca0:	eaf6ed7f 	.word	0xeaf6ed7f
 8001ca4:	02020200 	.word	0x02020200
 8001ca8:	01ff0000 	.word	0x01ff0000
 8001cac:	01010280 	.word	0x01010280
 8001cb0:	52004000 	.word	0x52004000

08001cb4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim12;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b088      	sub	sp, #32
 8001cb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cba:	f107 0310 	add.w	r3, r7, #16
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	601a      	str	r2, [r3, #0]
 8001cc2:	605a      	str	r2, [r3, #4]
 8001cc4:	609a      	str	r2, [r3, #8]
 8001cc6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cc8:	1d3b      	adds	r3, r7, #4
 8001cca:	2200      	movs	r2, #0
 8001ccc:	601a      	str	r2, [r3, #0]
 8001cce:	605a      	str	r2, [r3, #4]
 8001cd0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001cd2:	4b1e      	ldr	r3, [pc, #120]	@ (8001d4c <MX_TIM2_Init+0x98>)
 8001cd4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001cd8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 550-1;
 8001cda:	4b1c      	ldr	r3, [pc, #112]	@ (8001d4c <MX_TIM2_Init+0x98>)
 8001cdc:	f240 2225 	movw	r2, #549	@ 0x225
 8001ce0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ce2:	4b1a      	ldr	r3, [pc, #104]	@ (8001d4c <MX_TIM2_Init+0x98>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000-1;
 8001ce8:	4b18      	ldr	r3, [pc, #96]	@ (8001d4c <MX_TIM2_Init+0x98>)
 8001cea:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8001cee:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cf0:	4b16      	ldr	r3, [pc, #88]	@ (8001d4c <MX_TIM2_Init+0x98>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001cf6:	4b15      	ldr	r3, [pc, #84]	@ (8001d4c <MX_TIM2_Init+0x98>)
 8001cf8:	2280      	movs	r2, #128	@ 0x80
 8001cfa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001cfc:	4813      	ldr	r0, [pc, #76]	@ (8001d4c <MX_TIM2_Init+0x98>)
 8001cfe:	f006 f8db 	bl	8007eb8 <HAL_TIM_Base_Init>
 8001d02:	4603      	mov	r3, r0
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d001      	beq.n	8001d0c <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8001d08:	f7ff fdce 	bl	80018a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d0c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d10:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001d12:	f107 0310 	add.w	r3, r7, #16
 8001d16:	4619      	mov	r1, r3
 8001d18:	480c      	ldr	r0, [pc, #48]	@ (8001d4c <MX_TIM2_Init+0x98>)
 8001d1a:	f006 fae1 	bl	80082e0 <HAL_TIM_ConfigClockSource>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d001      	beq.n	8001d28 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8001d24:	f7ff fdc0 	bl	80018a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d30:	1d3b      	adds	r3, r7, #4
 8001d32:	4619      	mov	r1, r3
 8001d34:	4805      	ldr	r0, [pc, #20]	@ (8001d4c <MX_TIM2_Init+0x98>)
 8001d36:	f006 fd43 	bl	80087c0 <HAL_TIMEx_MasterConfigSynchronization>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d001      	beq.n	8001d44 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8001d40:	f7ff fdb2 	bl	80018a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001d44:	bf00      	nop
 8001d46:	3720      	adds	r7, #32
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	24000488 	.word	0x24000488

08001d50 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b088      	sub	sp, #32
 8001d54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d56:	f107 0310 	add.w	r3, r7, #16
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	601a      	str	r2, [r3, #0]
 8001d5e:	605a      	str	r2, [r3, #4]
 8001d60:	609a      	str	r2, [r3, #8]
 8001d62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d64:	1d3b      	adds	r3, r7, #4
 8001d66:	2200      	movs	r2, #0
 8001d68:	601a      	str	r2, [r3, #0]
 8001d6a:	605a      	str	r2, [r3, #4]
 8001d6c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001d6e:	4b1e      	ldr	r3, [pc, #120]	@ (8001de8 <MX_TIM3_Init+0x98>)
 8001d70:	4a1e      	ldr	r2, [pc, #120]	@ (8001dec <MX_TIM3_Init+0x9c>)
 8001d72:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 550-1;
 8001d74:	4b1c      	ldr	r3, [pc, #112]	@ (8001de8 <MX_TIM3_Init+0x98>)
 8001d76:	f240 2225 	movw	r2, #549	@ 0x225
 8001d7a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d7c:	4b1a      	ldr	r3, [pc, #104]	@ (8001de8 <MX_TIM3_Init+0x98>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000-1;
 8001d82:	4b19      	ldr	r3, [pc, #100]	@ (8001de8 <MX_TIM3_Init+0x98>)
 8001d84:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8001d88:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d8a:	4b17      	ldr	r3, [pc, #92]	@ (8001de8 <MX_TIM3_Init+0x98>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d90:	4b15      	ldr	r3, [pc, #84]	@ (8001de8 <MX_TIM3_Init+0x98>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001d96:	4814      	ldr	r0, [pc, #80]	@ (8001de8 <MX_TIM3_Init+0x98>)
 8001d98:	f006 f88e 	bl	8007eb8 <HAL_TIM_Base_Init>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d001      	beq.n	8001da6 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8001da2:	f7ff fd81 	bl	80018a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001da6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001daa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001dac:	f107 0310 	add.w	r3, r7, #16
 8001db0:	4619      	mov	r1, r3
 8001db2:	480d      	ldr	r0, [pc, #52]	@ (8001de8 <MX_TIM3_Init+0x98>)
 8001db4:	f006 fa94 	bl	80082e0 <HAL_TIM_ConfigClockSource>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d001      	beq.n	8001dc2 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8001dbe:	f7ff fd73 	bl	80018a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001dca:	1d3b      	adds	r3, r7, #4
 8001dcc:	4619      	mov	r1, r3
 8001dce:	4806      	ldr	r0, [pc, #24]	@ (8001de8 <MX_TIM3_Init+0x98>)
 8001dd0:	f006 fcf6 	bl	80087c0 <HAL_TIMEx_MasterConfigSynchronization>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d001      	beq.n	8001dde <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8001dda:	f7ff fd65 	bl	80018a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001dde:	bf00      	nop
 8001de0:	3720      	adds	r7, #32
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	240004d4 	.word	0x240004d4
 8001dec:	40000400 	.word	0x40000400

08001df0 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b088      	sub	sp, #32
 8001df4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001df6:	f107 0310 	add.w	r3, r7, #16
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	601a      	str	r2, [r3, #0]
 8001dfe:	605a      	str	r2, [r3, #4]
 8001e00:	609a      	str	r2, [r3, #8]
 8001e02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e04:	1d3b      	adds	r3, r7, #4
 8001e06:	2200      	movs	r2, #0
 8001e08:	601a      	str	r2, [r3, #0]
 8001e0a:	605a      	str	r2, [r3, #4]
 8001e0c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001e0e:	4b1e      	ldr	r3, [pc, #120]	@ (8001e88 <MX_TIM5_Init+0x98>)
 8001e10:	4a1e      	ldr	r2, [pc, #120]	@ (8001e8c <MX_TIM5_Init+0x9c>)
 8001e12:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 550-1;
 8001e14:	4b1c      	ldr	r3, [pc, #112]	@ (8001e88 <MX_TIM5_Init+0x98>)
 8001e16:	f240 2225 	movw	r2, #549	@ 0x225
 8001e1a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e1c:	4b1a      	ldr	r3, [pc, #104]	@ (8001e88 <MX_TIM5_Init+0x98>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 10000-1;
 8001e22:	4b19      	ldr	r3, [pc, #100]	@ (8001e88 <MX_TIM5_Init+0x98>)
 8001e24:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001e28:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e2a:	4b17      	ldr	r3, [pc, #92]	@ (8001e88 <MX_TIM5_Init+0x98>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e30:	4b15      	ldr	r3, [pc, #84]	@ (8001e88 <MX_TIM5_Init+0x98>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001e36:	4814      	ldr	r0, [pc, #80]	@ (8001e88 <MX_TIM5_Init+0x98>)
 8001e38:	f006 f83e 	bl	8007eb8 <HAL_TIM_Base_Init>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d001      	beq.n	8001e46 <MX_TIM5_Init+0x56>
  {
    Error_Handler();
 8001e42:	f7ff fd31 	bl	80018a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e46:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e4a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001e4c:	f107 0310 	add.w	r3, r7, #16
 8001e50:	4619      	mov	r1, r3
 8001e52:	480d      	ldr	r0, [pc, #52]	@ (8001e88 <MX_TIM5_Init+0x98>)
 8001e54:	f006 fa44 	bl	80082e0 <HAL_TIM_ConfigClockSource>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d001      	beq.n	8001e62 <MX_TIM5_Init+0x72>
  {
    Error_Handler();
 8001e5e:	f7ff fd23 	bl	80018a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e62:	2300      	movs	r3, #0
 8001e64:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e66:	2300      	movs	r3, #0
 8001e68:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001e6a:	1d3b      	adds	r3, r7, #4
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	4806      	ldr	r0, [pc, #24]	@ (8001e88 <MX_TIM5_Init+0x98>)
 8001e70:	f006 fca6 	bl	80087c0 <HAL_TIMEx_MasterConfigSynchronization>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d001      	beq.n	8001e7e <MX_TIM5_Init+0x8e>
  {
    Error_Handler();
 8001e7a:	f7ff fd15 	bl	80018a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001e7e:	bf00      	nop
 8001e80:	3720      	adds	r7, #32
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	24000520 	.word	0x24000520
 8001e8c:	40000c00 	.word	0x40000c00

08001e90 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b088      	sub	sp, #32
 8001e94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e96:	f107 0310 	add.w	r3, r7, #16
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	601a      	str	r2, [r3, #0]
 8001e9e:	605a      	str	r2, [r3, #4]
 8001ea0:	609a      	str	r2, [r3, #8]
 8001ea2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ea4:	1d3b      	adds	r3, r7, #4
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	601a      	str	r2, [r3, #0]
 8001eaa:	605a      	str	r2, [r3, #4]
 8001eac:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001eae:	4b1d      	ldr	r3, [pc, #116]	@ (8001f24 <MX_TIM12_Init+0x94>)
 8001eb0:	4a1d      	ldr	r2, [pc, #116]	@ (8001f28 <MX_TIM12_Init+0x98>)
 8001eb2:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 65535;
 8001eb4:	4b1b      	ldr	r3, [pc, #108]	@ (8001f24 <MX_TIM12_Init+0x94>)
 8001eb6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001eba:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ebc:	4b19      	ldr	r3, [pc, #100]	@ (8001f24 <MX_TIM12_Init+0x94>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 19;
 8001ec2:	4b18      	ldr	r3, [pc, #96]	@ (8001f24 <MX_TIM12_Init+0x94>)
 8001ec4:	2213      	movs	r2, #19
 8001ec6:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ec8:	4b16      	ldr	r3, [pc, #88]	@ (8001f24 <MX_TIM12_Init+0x94>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ece:	4b15      	ldr	r3, [pc, #84]	@ (8001f24 <MX_TIM12_Init+0x94>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8001ed4:	4813      	ldr	r0, [pc, #76]	@ (8001f24 <MX_TIM12_Init+0x94>)
 8001ed6:	f005 ffef 	bl	8007eb8 <HAL_TIM_Base_Init>
 8001eda:	4603      	mov	r3, r0
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d001      	beq.n	8001ee4 <MX_TIM12_Init+0x54>
  {
    Error_Handler();
 8001ee0:	f7ff fce2 	bl	80018a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ee4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ee8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8001eea:	f107 0310 	add.w	r3, r7, #16
 8001eee:	4619      	mov	r1, r3
 8001ef0:	480c      	ldr	r0, [pc, #48]	@ (8001f24 <MX_TIM12_Init+0x94>)
 8001ef2:	f006 f9f5 	bl	80082e0 <HAL_TIM_ConfigClockSource>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d001      	beq.n	8001f00 <MX_TIM12_Init+0x70>
  {
    Error_Handler();
 8001efc:	f7ff fcd4 	bl	80018a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f00:	2300      	movs	r3, #0
 8001f02:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f04:	2300      	movs	r3, #0
 8001f06:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim12, &sMasterConfig) != HAL_OK)
 8001f08:	1d3b      	adds	r3, r7, #4
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	4805      	ldr	r0, [pc, #20]	@ (8001f24 <MX_TIM12_Init+0x94>)
 8001f0e:	f006 fc57 	bl	80087c0 <HAL_TIMEx_MasterConfigSynchronization>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d001      	beq.n	8001f1c <MX_TIM12_Init+0x8c>
  {
    Error_Handler();
 8001f18:	f7ff fcc6 	bl	80018a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 8001f1c:	bf00      	nop
 8001f1e:	3720      	adds	r7, #32
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	2400056c 	.word	0x2400056c
 8001f28:	40001800 	.word	0x40001800

08001f2c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b086      	sub	sp, #24
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f3c:	d117      	bne.n	8001f6e <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f3e:	4b39      	ldr	r3, [pc, #228]	@ (8002024 <HAL_TIM_Base_MspInit+0xf8>)
 8001f40:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001f44:	4a37      	ldr	r2, [pc, #220]	@ (8002024 <HAL_TIM_Base_MspInit+0xf8>)
 8001f46:	f043 0301 	orr.w	r3, r3, #1
 8001f4a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001f4e:	4b35      	ldr	r3, [pc, #212]	@ (8002024 <HAL_TIM_Base_MspInit+0xf8>)
 8001f50:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001f54:	f003 0301 	and.w	r3, r3, #1
 8001f58:	617b      	str	r3, [r7, #20]
 8001f5a:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 11, 0);
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	210b      	movs	r1, #11
 8001f60:	201c      	movs	r0, #28
 8001f62:	f001 f8a4 	bl	80030ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001f66:	201c      	movs	r0, #28
 8001f68:	f001 f8bb 	bl	80030e2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 8001f6c:	e055      	b.n	800201a <HAL_TIM_Base_MspInit+0xee>
  else if(tim_baseHandle->Instance==TIM3)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a2d      	ldr	r2, [pc, #180]	@ (8002028 <HAL_TIM_Base_MspInit+0xfc>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d117      	bne.n	8001fa8 <HAL_TIM_Base_MspInit+0x7c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f78:	4b2a      	ldr	r3, [pc, #168]	@ (8002024 <HAL_TIM_Base_MspInit+0xf8>)
 8001f7a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001f7e:	4a29      	ldr	r2, [pc, #164]	@ (8002024 <HAL_TIM_Base_MspInit+0xf8>)
 8001f80:	f043 0302 	orr.w	r3, r3, #2
 8001f84:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001f88:	4b26      	ldr	r3, [pc, #152]	@ (8002024 <HAL_TIM_Base_MspInit+0xf8>)
 8001f8a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001f8e:	f003 0302 	and.w	r3, r3, #2
 8001f92:	613b      	str	r3, [r7, #16]
 8001f94:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 2, 0);
 8001f96:	2200      	movs	r2, #0
 8001f98:	2102      	movs	r1, #2
 8001f9a:	201d      	movs	r0, #29
 8001f9c:	f001 f887 	bl	80030ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001fa0:	201d      	movs	r0, #29
 8001fa2:	f001 f89e 	bl	80030e2 <HAL_NVIC_EnableIRQ>
}
 8001fa6:	e038      	b.n	800201a <HAL_TIM_Base_MspInit+0xee>
  else if(tim_baseHandle->Instance==TIM5)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a1f      	ldr	r2, [pc, #124]	@ (800202c <HAL_TIM_Base_MspInit+0x100>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d117      	bne.n	8001fe2 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001fb2:	4b1c      	ldr	r3, [pc, #112]	@ (8002024 <HAL_TIM_Base_MspInit+0xf8>)
 8001fb4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001fb8:	4a1a      	ldr	r2, [pc, #104]	@ (8002024 <HAL_TIM_Base_MspInit+0xf8>)
 8001fba:	f043 0308 	orr.w	r3, r3, #8
 8001fbe:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001fc2:	4b18      	ldr	r3, [pc, #96]	@ (8002024 <HAL_TIM_Base_MspInit+0xf8>)
 8001fc4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001fc8:	f003 0308 	and.w	r3, r3, #8
 8001fcc:	60fb      	str	r3, [r7, #12]
 8001fce:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 13, 0);
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	210d      	movs	r1, #13
 8001fd4:	2032      	movs	r0, #50	@ 0x32
 8001fd6:	f001 f86a 	bl	80030ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001fda:	2032      	movs	r0, #50	@ 0x32
 8001fdc:	f001 f881 	bl	80030e2 <HAL_NVIC_EnableIRQ>
}
 8001fe0:	e01b      	b.n	800201a <HAL_TIM_Base_MspInit+0xee>
  else if(tim_baseHandle->Instance==TIM12)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a12      	ldr	r2, [pc, #72]	@ (8002030 <HAL_TIM_Base_MspInit+0x104>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d116      	bne.n	800201a <HAL_TIM_Base_MspInit+0xee>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8001fec:	4b0d      	ldr	r3, [pc, #52]	@ (8002024 <HAL_TIM_Base_MspInit+0xf8>)
 8001fee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001ff2:	4a0c      	ldr	r2, [pc, #48]	@ (8002024 <HAL_TIM_Base_MspInit+0xf8>)
 8001ff4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001ff8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001ffc:	4b09      	ldr	r3, [pc, #36]	@ (8002024 <HAL_TIM_Base_MspInit+0xf8>)
 8001ffe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002002:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002006:	60bb      	str	r3, [r7, #8]
 8002008:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 7, 0);
 800200a:	2200      	movs	r2, #0
 800200c:	2107      	movs	r1, #7
 800200e:	202b      	movs	r0, #43	@ 0x2b
 8002010:	f001 f84d 	bl	80030ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8002014:	202b      	movs	r0, #43	@ 0x2b
 8002016:	f001 f864 	bl	80030e2 <HAL_NVIC_EnableIRQ>
}
 800201a:	bf00      	nop
 800201c:	3718      	adds	r7, #24
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	58024400 	.word	0x58024400
 8002028:	40000400 	.word	0x40000400
 800202c:	40000c00 	.word	0x40000c00
 8002030:	40001800 	.word	0x40001800

08002034 <MX_UART4_Init>:
UART_HandleTypeDef huart6;
UART_HandleTypeDef huart10;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002038:	4b22      	ldr	r3, [pc, #136]	@ (80020c4 <MX_UART4_Init+0x90>)
 800203a:	4a23      	ldr	r2, [pc, #140]	@ (80020c8 <MX_UART4_Init+0x94>)
 800203c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800203e:	4b21      	ldr	r3, [pc, #132]	@ (80020c4 <MX_UART4_Init+0x90>)
 8002040:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002044:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002046:	4b1f      	ldr	r3, [pc, #124]	@ (80020c4 <MX_UART4_Init+0x90>)
 8002048:	2200      	movs	r2, #0
 800204a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800204c:	4b1d      	ldr	r3, [pc, #116]	@ (80020c4 <MX_UART4_Init+0x90>)
 800204e:	2200      	movs	r2, #0
 8002050:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002052:	4b1c      	ldr	r3, [pc, #112]	@ (80020c4 <MX_UART4_Init+0x90>)
 8002054:	2200      	movs	r2, #0
 8002056:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002058:	4b1a      	ldr	r3, [pc, #104]	@ (80020c4 <MX_UART4_Init+0x90>)
 800205a:	220c      	movs	r2, #12
 800205c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800205e:	4b19      	ldr	r3, [pc, #100]	@ (80020c4 <MX_UART4_Init+0x90>)
 8002060:	2200      	movs	r2, #0
 8002062:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002064:	4b17      	ldr	r3, [pc, #92]	@ (80020c4 <MX_UART4_Init+0x90>)
 8002066:	2200      	movs	r2, #0
 8002068:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800206a:	4b16      	ldr	r3, [pc, #88]	@ (80020c4 <MX_UART4_Init+0x90>)
 800206c:	2200      	movs	r2, #0
 800206e:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002070:	4b14      	ldr	r3, [pc, #80]	@ (80020c4 <MX_UART4_Init+0x90>)
 8002072:	2200      	movs	r2, #0
 8002074:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002076:	4b13      	ldr	r3, [pc, #76]	@ (80020c4 <MX_UART4_Init+0x90>)
 8002078:	2200      	movs	r2, #0
 800207a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800207c:	4811      	ldr	r0, [pc, #68]	@ (80020c4 <MX_UART4_Init+0x90>)
 800207e:	f006 fc59 	bl	8008934 <HAL_UART_Init>
 8002082:	4603      	mov	r3, r0
 8002084:	2b00      	cmp	r3, #0
 8002086:	d001      	beq.n	800208c <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8002088:	f7ff fc0e 	bl	80018a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800208c:	2100      	movs	r1, #0
 800208e:	480d      	ldr	r0, [pc, #52]	@ (80020c4 <MX_UART4_Init+0x90>)
 8002090:	f009 f97f 	bl	800b392 <HAL_UARTEx_SetTxFifoThreshold>
 8002094:	4603      	mov	r3, r0
 8002096:	2b00      	cmp	r3, #0
 8002098:	d001      	beq.n	800209e <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 800209a:	f7ff fc05 	bl	80018a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800209e:	2100      	movs	r1, #0
 80020a0:	4808      	ldr	r0, [pc, #32]	@ (80020c4 <MX_UART4_Init+0x90>)
 80020a2:	f009 f9b4 	bl	800b40e <HAL_UARTEx_SetRxFifoThreshold>
 80020a6:	4603      	mov	r3, r0
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d001      	beq.n	80020b0 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 80020ac:	f7ff fbfc 	bl	80018a8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 80020b0:	4804      	ldr	r0, [pc, #16]	@ (80020c4 <MX_UART4_Init+0x90>)
 80020b2:	f009 f935 	bl	800b320 <HAL_UARTEx_DisableFifoMode>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d001      	beq.n	80020c0 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 80020bc:	f7ff fbf4 	bl	80018a8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80020c0:	bf00      	nop
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	240005b8 	.word	0x240005b8
 80020c8:	40004c00 	.word	0x40004c00

080020cc <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80020d0:	4b22      	ldr	r3, [pc, #136]	@ (800215c <MX_UART5_Init+0x90>)
 80020d2:	4a23      	ldr	r2, [pc, #140]	@ (8002160 <MX_UART5_Init+0x94>)
 80020d4:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 80020d6:	4b21      	ldr	r3, [pc, #132]	@ (800215c <MX_UART5_Init+0x90>)
 80020d8:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80020dc:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80020de:	4b1f      	ldr	r3, [pc, #124]	@ (800215c <MX_UART5_Init+0x90>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80020e4:	4b1d      	ldr	r3, [pc, #116]	@ (800215c <MX_UART5_Init+0x90>)
 80020e6:	2200      	movs	r2, #0
 80020e8:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80020ea:	4b1c      	ldr	r3, [pc, #112]	@ (800215c <MX_UART5_Init+0x90>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80020f0:	4b1a      	ldr	r3, [pc, #104]	@ (800215c <MX_UART5_Init+0x90>)
 80020f2:	220c      	movs	r2, #12
 80020f4:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020f6:	4b19      	ldr	r3, [pc, #100]	@ (800215c <MX_UART5_Init+0x90>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80020fc:	4b17      	ldr	r3, [pc, #92]	@ (800215c <MX_UART5_Init+0x90>)
 80020fe:	2200      	movs	r2, #0
 8002100:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002102:	4b16      	ldr	r3, [pc, #88]	@ (800215c <MX_UART5_Init+0x90>)
 8002104:	2200      	movs	r2, #0
 8002106:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002108:	4b14      	ldr	r3, [pc, #80]	@ (800215c <MX_UART5_Init+0x90>)
 800210a:	2200      	movs	r2, #0
 800210c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800210e:	4b13      	ldr	r3, [pc, #76]	@ (800215c <MX_UART5_Init+0x90>)
 8002110:	2200      	movs	r2, #0
 8002112:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8002114:	4811      	ldr	r0, [pc, #68]	@ (800215c <MX_UART5_Init+0x90>)
 8002116:	f006 fc0d 	bl	8008934 <HAL_UART_Init>
 800211a:	4603      	mov	r3, r0
 800211c:	2b00      	cmp	r3, #0
 800211e:	d001      	beq.n	8002124 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 8002120:	f7ff fbc2 	bl	80018a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002124:	2100      	movs	r1, #0
 8002126:	480d      	ldr	r0, [pc, #52]	@ (800215c <MX_UART5_Init+0x90>)
 8002128:	f009 f933 	bl	800b392 <HAL_UARTEx_SetTxFifoThreshold>
 800212c:	4603      	mov	r3, r0
 800212e:	2b00      	cmp	r3, #0
 8002130:	d001      	beq.n	8002136 <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 8002132:	f7ff fbb9 	bl	80018a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002136:	2100      	movs	r1, #0
 8002138:	4808      	ldr	r0, [pc, #32]	@ (800215c <MX_UART5_Init+0x90>)
 800213a:	f009 f968 	bl	800b40e <HAL_UARTEx_SetRxFifoThreshold>
 800213e:	4603      	mov	r3, r0
 8002140:	2b00      	cmp	r3, #0
 8002142:	d001      	beq.n	8002148 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 8002144:	f7ff fbb0 	bl	80018a8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8002148:	4804      	ldr	r0, [pc, #16]	@ (800215c <MX_UART5_Init+0x90>)
 800214a:	f009 f8e9 	bl	800b320 <HAL_UARTEx_DisableFifoMode>
 800214e:	4603      	mov	r3, r0
 8002150:	2b00      	cmp	r3, #0
 8002152:	d001      	beq.n	8002158 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 8002154:	f7ff fba8 	bl	80018a8 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8002158:	bf00      	nop
 800215a:	bd80      	pop	{r7, pc}
 800215c:	2400064c 	.word	0x2400064c
 8002160:	40005000 	.word	0x40005000

08002164 <MX_UART7_Init>:
/* UART7 init function */
void MX_UART7_Init(void)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8002168:	4b22      	ldr	r3, [pc, #136]	@ (80021f4 <MX_UART7_Init+0x90>)
 800216a:	4a23      	ldr	r2, [pc, #140]	@ (80021f8 <MX_UART7_Init+0x94>)
 800216c:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 800216e:	4b21      	ldr	r3, [pc, #132]	@ (80021f4 <MX_UART7_Init+0x90>)
 8002170:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002174:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8002176:	4b1f      	ldr	r3, [pc, #124]	@ (80021f4 <MX_UART7_Init+0x90>)
 8002178:	2200      	movs	r2, #0
 800217a:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 800217c:	4b1d      	ldr	r3, [pc, #116]	@ (80021f4 <MX_UART7_Init+0x90>)
 800217e:	2200      	movs	r2, #0
 8002180:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8002182:	4b1c      	ldr	r3, [pc, #112]	@ (80021f4 <MX_UART7_Init+0x90>)
 8002184:	2200      	movs	r2, #0
 8002186:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8002188:	4b1a      	ldr	r3, [pc, #104]	@ (80021f4 <MX_UART7_Init+0x90>)
 800218a:	220c      	movs	r2, #12
 800218c:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800218e:	4b19      	ldr	r3, [pc, #100]	@ (80021f4 <MX_UART7_Init+0x90>)
 8002190:	2200      	movs	r2, #0
 8002192:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8002194:	4b17      	ldr	r3, [pc, #92]	@ (80021f4 <MX_UART7_Init+0x90>)
 8002196:	2200      	movs	r2, #0
 8002198:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800219a:	4b16      	ldr	r3, [pc, #88]	@ (80021f4 <MX_UART7_Init+0x90>)
 800219c:	2200      	movs	r2, #0
 800219e:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80021a0:	4b14      	ldr	r3, [pc, #80]	@ (80021f4 <MX_UART7_Init+0x90>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80021a6:	4b13      	ldr	r3, [pc, #76]	@ (80021f4 <MX_UART7_Init+0x90>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 80021ac:	4811      	ldr	r0, [pc, #68]	@ (80021f4 <MX_UART7_Init+0x90>)
 80021ae:	f006 fbc1 	bl	8008934 <HAL_UART_Init>
 80021b2:	4603      	mov	r3, r0
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d001      	beq.n	80021bc <MX_UART7_Init+0x58>
  {
    Error_Handler();
 80021b8:	f7ff fb76 	bl	80018a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80021bc:	2100      	movs	r1, #0
 80021be:	480d      	ldr	r0, [pc, #52]	@ (80021f4 <MX_UART7_Init+0x90>)
 80021c0:	f009 f8e7 	bl	800b392 <HAL_UARTEx_SetTxFifoThreshold>
 80021c4:	4603      	mov	r3, r0
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d001      	beq.n	80021ce <MX_UART7_Init+0x6a>
  {
    Error_Handler();
 80021ca:	f7ff fb6d 	bl	80018a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80021ce:	2100      	movs	r1, #0
 80021d0:	4808      	ldr	r0, [pc, #32]	@ (80021f4 <MX_UART7_Init+0x90>)
 80021d2:	f009 f91c 	bl	800b40e <HAL_UARTEx_SetRxFifoThreshold>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d001      	beq.n	80021e0 <MX_UART7_Init+0x7c>
  {
    Error_Handler();
 80021dc:	f7ff fb64 	bl	80018a8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 80021e0:	4804      	ldr	r0, [pc, #16]	@ (80021f4 <MX_UART7_Init+0x90>)
 80021e2:	f009 f89d 	bl	800b320 <HAL_UARTEx_DisableFifoMode>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d001      	beq.n	80021f0 <MX_UART7_Init+0x8c>
  {
    Error_Handler();
 80021ec:	f7ff fb5c 	bl	80018a8 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 80021f0:	bf00      	nop
 80021f2:	bd80      	pop	{r7, pc}
 80021f4:	240006e0 	.word	0x240006e0
 80021f8:	40007800 	.word	0x40007800

080021fc <MX_UART8_Init>:
/* UART8 init function */
void MX_UART8_Init(void)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8002200:	4b22      	ldr	r3, [pc, #136]	@ (800228c <MX_UART8_Init+0x90>)
 8002202:	4a23      	ldr	r2, [pc, #140]	@ (8002290 <MX_UART8_Init+0x94>)
 8002204:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 8002206:	4b21      	ldr	r3, [pc, #132]	@ (800228c <MX_UART8_Init+0x90>)
 8002208:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800220c:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 800220e:	4b1f      	ldr	r3, [pc, #124]	@ (800228c <MX_UART8_Init+0x90>)
 8002210:	2200      	movs	r2, #0
 8002212:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8002214:	4b1d      	ldr	r3, [pc, #116]	@ (800228c <MX_UART8_Init+0x90>)
 8002216:	2200      	movs	r2, #0
 8002218:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 800221a:	4b1c      	ldr	r3, [pc, #112]	@ (800228c <MX_UART8_Init+0x90>)
 800221c:	2200      	movs	r2, #0
 800221e:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8002220:	4b1a      	ldr	r3, [pc, #104]	@ (800228c <MX_UART8_Init+0x90>)
 8002222:	220c      	movs	r2, #12
 8002224:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002226:	4b19      	ldr	r3, [pc, #100]	@ (800228c <MX_UART8_Init+0x90>)
 8002228:	2200      	movs	r2, #0
 800222a:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 800222c:	4b17      	ldr	r3, [pc, #92]	@ (800228c <MX_UART8_Init+0x90>)
 800222e:	2200      	movs	r2, #0
 8002230:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002232:	4b16      	ldr	r3, [pc, #88]	@ (800228c <MX_UART8_Init+0x90>)
 8002234:	2200      	movs	r2, #0
 8002236:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002238:	4b14      	ldr	r3, [pc, #80]	@ (800228c <MX_UART8_Init+0x90>)
 800223a:	2200      	movs	r2, #0
 800223c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800223e:	4b13      	ldr	r3, [pc, #76]	@ (800228c <MX_UART8_Init+0x90>)
 8002240:	2200      	movs	r2, #0
 8002242:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8002244:	4811      	ldr	r0, [pc, #68]	@ (800228c <MX_UART8_Init+0x90>)
 8002246:	f006 fb75 	bl	8008934 <HAL_UART_Init>
 800224a:	4603      	mov	r3, r0
 800224c:	2b00      	cmp	r3, #0
 800224e:	d001      	beq.n	8002254 <MX_UART8_Init+0x58>
  {
    Error_Handler();
 8002250:	f7ff fb2a 	bl	80018a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002254:	2100      	movs	r1, #0
 8002256:	480d      	ldr	r0, [pc, #52]	@ (800228c <MX_UART8_Init+0x90>)
 8002258:	f009 f89b 	bl	800b392 <HAL_UARTEx_SetTxFifoThreshold>
 800225c:	4603      	mov	r3, r0
 800225e:	2b00      	cmp	r3, #0
 8002260:	d001      	beq.n	8002266 <MX_UART8_Init+0x6a>
  {
    Error_Handler();
 8002262:	f7ff fb21 	bl	80018a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002266:	2100      	movs	r1, #0
 8002268:	4808      	ldr	r0, [pc, #32]	@ (800228c <MX_UART8_Init+0x90>)
 800226a:	f009 f8d0 	bl	800b40e <HAL_UARTEx_SetRxFifoThreshold>
 800226e:	4603      	mov	r3, r0
 8002270:	2b00      	cmp	r3, #0
 8002272:	d001      	beq.n	8002278 <MX_UART8_Init+0x7c>
  {
    Error_Handler();
 8002274:	f7ff fb18 	bl	80018a8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 8002278:	4804      	ldr	r0, [pc, #16]	@ (800228c <MX_UART8_Init+0x90>)
 800227a:	f009 f851 	bl	800b320 <HAL_UARTEx_DisableFifoMode>
 800227e:	4603      	mov	r3, r0
 8002280:	2b00      	cmp	r3, #0
 8002282:	d001      	beq.n	8002288 <MX_UART8_Init+0x8c>
  {
    Error_Handler();
 8002284:	f7ff fb10 	bl	80018a8 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8002288:	bf00      	nop
 800228a:	bd80      	pop	{r7, pc}
 800228c:	24000774 	.word	0x24000774
 8002290:	40007c00 	.word	0x40007c00

08002294 <MX_UART9_Init>:
/* UART9 init function */
void MX_UART9_Init(void)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	af00      	add	r7, sp, #0
  /* USER CODE END UART9_Init 0 */

  /* USER CODE BEGIN UART9_Init 1 */

  /* USER CODE END UART9_Init 1 */
  huart9.Instance = UART9;
 8002298:	4b22      	ldr	r3, [pc, #136]	@ (8002324 <MX_UART9_Init+0x90>)
 800229a:	4a23      	ldr	r2, [pc, #140]	@ (8002328 <MX_UART9_Init+0x94>)
 800229c:	601a      	str	r2, [r3, #0]
  huart9.Init.BaudRate = 115200;
 800229e:	4b21      	ldr	r3, [pc, #132]	@ (8002324 <MX_UART9_Init+0x90>)
 80022a0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80022a4:	605a      	str	r2, [r3, #4]
  huart9.Init.WordLength = UART_WORDLENGTH_8B;
 80022a6:	4b1f      	ldr	r3, [pc, #124]	@ (8002324 <MX_UART9_Init+0x90>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	609a      	str	r2, [r3, #8]
  huart9.Init.StopBits = UART_STOPBITS_1;
 80022ac:	4b1d      	ldr	r3, [pc, #116]	@ (8002324 <MX_UART9_Init+0x90>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	60da      	str	r2, [r3, #12]
  huart9.Init.Parity = UART_PARITY_NONE;
 80022b2:	4b1c      	ldr	r3, [pc, #112]	@ (8002324 <MX_UART9_Init+0x90>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	611a      	str	r2, [r3, #16]
  huart9.Init.Mode = UART_MODE_TX_RX;
 80022b8:	4b1a      	ldr	r3, [pc, #104]	@ (8002324 <MX_UART9_Init+0x90>)
 80022ba:	220c      	movs	r2, #12
 80022bc:	615a      	str	r2, [r3, #20]
  huart9.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022be:	4b19      	ldr	r3, [pc, #100]	@ (8002324 <MX_UART9_Init+0x90>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	619a      	str	r2, [r3, #24]
  huart9.Init.OverSampling = UART_OVERSAMPLING_16;
 80022c4:	4b17      	ldr	r3, [pc, #92]	@ (8002324 <MX_UART9_Init+0x90>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	61da      	str	r2, [r3, #28]
  huart9.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80022ca:	4b16      	ldr	r3, [pc, #88]	@ (8002324 <MX_UART9_Init+0x90>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	621a      	str	r2, [r3, #32]
  huart9.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80022d0:	4b14      	ldr	r3, [pc, #80]	@ (8002324 <MX_UART9_Init+0x90>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart9.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80022d6:	4b13      	ldr	r3, [pc, #76]	@ (8002324 <MX_UART9_Init+0x90>)
 80022d8:	2200      	movs	r2, #0
 80022da:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart9) != HAL_OK)
 80022dc:	4811      	ldr	r0, [pc, #68]	@ (8002324 <MX_UART9_Init+0x90>)
 80022de:	f006 fb29 	bl	8008934 <HAL_UART_Init>
 80022e2:	4603      	mov	r3, r0
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d001      	beq.n	80022ec <MX_UART9_Init+0x58>
  {
    Error_Handler();
 80022e8:	f7ff fade 	bl	80018a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart9, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80022ec:	2100      	movs	r1, #0
 80022ee:	480d      	ldr	r0, [pc, #52]	@ (8002324 <MX_UART9_Init+0x90>)
 80022f0:	f009 f84f 	bl	800b392 <HAL_UARTEx_SetTxFifoThreshold>
 80022f4:	4603      	mov	r3, r0
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d001      	beq.n	80022fe <MX_UART9_Init+0x6a>
  {
    Error_Handler();
 80022fa:	f7ff fad5 	bl	80018a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart9, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80022fe:	2100      	movs	r1, #0
 8002300:	4808      	ldr	r0, [pc, #32]	@ (8002324 <MX_UART9_Init+0x90>)
 8002302:	f009 f884 	bl	800b40e <HAL_UARTEx_SetRxFifoThreshold>
 8002306:	4603      	mov	r3, r0
 8002308:	2b00      	cmp	r3, #0
 800230a:	d001      	beq.n	8002310 <MX_UART9_Init+0x7c>
  {
    Error_Handler();
 800230c:	f7ff facc 	bl	80018a8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart9) != HAL_OK)
 8002310:	4804      	ldr	r0, [pc, #16]	@ (8002324 <MX_UART9_Init+0x90>)
 8002312:	f009 f805 	bl	800b320 <HAL_UARTEx_DisableFifoMode>
 8002316:	4603      	mov	r3, r0
 8002318:	2b00      	cmp	r3, #0
 800231a:	d001      	beq.n	8002320 <MX_UART9_Init+0x8c>
  {
    Error_Handler();
 800231c:	f7ff fac4 	bl	80018a8 <Error_Handler>
  }
  /* USER CODE BEGIN UART9_Init 2 */

  /* USER CODE END UART9_Init 2 */

}
 8002320:	bf00      	nop
 8002322:	bd80      	pop	{r7, pc}
 8002324:	24000808 	.word	0x24000808
 8002328:	40011800 	.word	0x40011800

0800232c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002330:	4b39      	ldr	r3, [pc, #228]	@ (8002418 <MX_USART2_UART_Init+0xec>)
 8002332:	4a3a      	ldr	r2, [pc, #232]	@ (800241c <MX_USART2_UART_Init+0xf0>)
 8002334:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002336:	4b38      	ldr	r3, [pc, #224]	@ (8002418 <MX_USART2_UART_Init+0xec>)
 8002338:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800233c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800233e:	4b36      	ldr	r3, [pc, #216]	@ (8002418 <MX_USART2_UART_Init+0xec>)
 8002340:	2200      	movs	r2, #0
 8002342:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002344:	4b34      	ldr	r3, [pc, #208]	@ (8002418 <MX_USART2_UART_Init+0xec>)
 8002346:	2200      	movs	r2, #0
 8002348:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800234a:	4b33      	ldr	r3, [pc, #204]	@ (8002418 <MX_USART2_UART_Init+0xec>)
 800234c:	2200      	movs	r2, #0
 800234e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002350:	4b31      	ldr	r3, [pc, #196]	@ (8002418 <MX_USART2_UART_Init+0xec>)
 8002352:	220c      	movs	r2, #12
 8002354:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002356:	4b30      	ldr	r3, [pc, #192]	@ (8002418 <MX_USART2_UART_Init+0xec>)
 8002358:	2200      	movs	r2, #0
 800235a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800235c:	4b2e      	ldr	r3, [pc, #184]	@ (8002418 <MX_USART2_UART_Init+0xec>)
 800235e:	2200      	movs	r2, #0
 8002360:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002362:	4b2d      	ldr	r3, [pc, #180]	@ (8002418 <MX_USART2_UART_Init+0xec>)
 8002364:	2200      	movs	r2, #0
 8002366:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002368:	4b2b      	ldr	r3, [pc, #172]	@ (8002418 <MX_USART2_UART_Init+0xec>)
 800236a:	2200      	movs	r2, #0
 800236c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800236e:	4b2a      	ldr	r3, [pc, #168]	@ (8002418 <MX_USART2_UART_Init+0xec>)
 8002370:	2200      	movs	r2, #0
 8002372:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002374:	4828      	ldr	r0, [pc, #160]	@ (8002418 <MX_USART2_UART_Init+0xec>)
 8002376:	f006 fadd 	bl	8008934 <HAL_UART_Init>
 800237a:	4603      	mov	r3, r0
 800237c:	2b00      	cmp	r3, #0
 800237e:	d001      	beq.n	8002384 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002380:	f7ff fa92 	bl	80018a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002384:	2100      	movs	r1, #0
 8002386:	4824      	ldr	r0, [pc, #144]	@ (8002418 <MX_USART2_UART_Init+0xec>)
 8002388:	f009 f803 	bl	800b392 <HAL_UARTEx_SetTxFifoThreshold>
 800238c:	4603      	mov	r3, r0
 800238e:	2b00      	cmp	r3, #0
 8002390:	d001      	beq.n	8002396 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8002392:	f7ff fa89 	bl	80018a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002396:	2100      	movs	r1, #0
 8002398:	481f      	ldr	r0, [pc, #124]	@ (8002418 <MX_USART2_UART_Init+0xec>)
 800239a:	f009 f838 	bl	800b40e <HAL_UARTEx_SetRxFifoThreshold>
 800239e:	4603      	mov	r3, r0
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d001      	beq.n	80023a8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80023a4:	f7ff fa80 	bl	80018a8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80023a8:	481b      	ldr	r0, [pc, #108]	@ (8002418 <MX_USART2_UART_Init+0xec>)
 80023aa:	f008 ffb9 	bl	800b320 <HAL_UARTEx_DisableFifoMode>
 80023ae:	4603      	mov	r3, r0
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d001      	beq.n	80023b8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80023b4:	f7ff fa78 	bl	80018a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  HAL_UART_Transmit(&huart2,unlock_register, sizeof(unlock_register),1000);
 80023b8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80023bc:	2205      	movs	r2, #5
 80023be:	4918      	ldr	r1, [pc, #96]	@ (8002420 <MX_USART2_UART_Init+0xf4>)
 80023c0:	4815      	ldr	r0, [pc, #84]	@ (8002418 <MX_USART2_UART_Init+0xec>)
 80023c2:	f006 fb07 	bl	80089d4 <HAL_UART_Transmit>
  HAL_Delay(5);
 80023c6:	2005      	movs	r0, #5
 80023c8:	f000 fd72 	bl	8002eb0 <HAL_Delay>
  HAL_UART_Transmit(&huart2,reset_z_axis, sizeof(reset_z_axis),1000);
 80023cc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80023d0:	2205      	movs	r2, #5
 80023d2:	4914      	ldr	r1, [pc, #80]	@ (8002424 <MX_USART2_UART_Init+0xf8>)
 80023d4:	4810      	ldr	r0, [pc, #64]	@ (8002418 <MX_USART2_UART_Init+0xec>)
 80023d6:	f006 fafd 	bl	80089d4 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart2,set_output_200Hz, sizeof(set_output_200Hz),1000);
 80023da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80023de:	2205      	movs	r2, #5
 80023e0:	4911      	ldr	r1, [pc, #68]	@ (8002428 <MX_USART2_UART_Init+0xfc>)
 80023e2:	480d      	ldr	r0, [pc, #52]	@ (8002418 <MX_USART2_UART_Init+0xec>)
 80023e4:	f006 faf6 	bl	80089d4 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart2,set_baudrate_115200, sizeof(set_baudrate_115200),1000);
 80023e8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80023ec:	2205      	movs	r2, #5
 80023ee:	490f      	ldr	r1, [pc, #60]	@ (800242c <MX_USART2_UART_Init+0x100>)
 80023f0:	4809      	ldr	r0, [pc, #36]	@ (8002418 <MX_USART2_UART_Init+0xec>)
 80023f2:	f006 faef 	bl	80089d4 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart2,save_settings, sizeof(save_settings),1000);
 80023f6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80023fa:	2205      	movs	r2, #5
 80023fc:	490c      	ldr	r1, [pc, #48]	@ (8002430 <MX_USART2_UART_Init+0x104>)
 80023fe:	4806      	ldr	r0, [pc, #24]	@ (8002418 <MX_USART2_UART_Init+0xec>)
 8002400:	f006 fae8 	bl	80089d4 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart2,restart_device, sizeof(restart_device),1000);
 8002404:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002408:	2205      	movs	r2, #5
 800240a:	490a      	ldr	r1, [pc, #40]	@ (8002434 <MX_USART2_UART_Init+0x108>)
 800240c:	4802      	ldr	r0, [pc, #8]	@ (8002418 <MX_USART2_UART_Init+0xec>)
 800240e:	f006 fae1 	bl	80089d4 <HAL_UART_Transmit>


  /* USER CODE END USART2_Init 2 */

}
 8002412:	bf00      	nop
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	2400089c 	.word	0x2400089c
 800241c:	40004400 	.word	0x40004400
 8002420:	2400002c 	.word	0x2400002c
 8002424:	24000034 	.word	0x24000034
 8002428:	2400003c 	.word	0x2400003c
 800242c:	24000044 	.word	0x24000044
 8002430:	2400004c 	.word	0x2400004c
 8002434:	24000054 	.word	0x24000054

08002438 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800243c:	4b22      	ldr	r3, [pc, #136]	@ (80024c8 <MX_USART3_UART_Init+0x90>)
 800243e:	4a23      	ldr	r2, [pc, #140]	@ (80024cc <MX_USART3_UART_Init+0x94>)
 8002440:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002442:	4b21      	ldr	r3, [pc, #132]	@ (80024c8 <MX_USART3_UART_Init+0x90>)
 8002444:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002448:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800244a:	4b1f      	ldr	r3, [pc, #124]	@ (80024c8 <MX_USART3_UART_Init+0x90>)
 800244c:	2200      	movs	r2, #0
 800244e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002450:	4b1d      	ldr	r3, [pc, #116]	@ (80024c8 <MX_USART3_UART_Init+0x90>)
 8002452:	2200      	movs	r2, #0
 8002454:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002456:	4b1c      	ldr	r3, [pc, #112]	@ (80024c8 <MX_USART3_UART_Init+0x90>)
 8002458:	2200      	movs	r2, #0
 800245a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800245c:	4b1a      	ldr	r3, [pc, #104]	@ (80024c8 <MX_USART3_UART_Init+0x90>)
 800245e:	220c      	movs	r2, #12
 8002460:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002462:	4b19      	ldr	r3, [pc, #100]	@ (80024c8 <MX_USART3_UART_Init+0x90>)
 8002464:	2200      	movs	r2, #0
 8002466:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002468:	4b17      	ldr	r3, [pc, #92]	@ (80024c8 <MX_USART3_UART_Init+0x90>)
 800246a:	2200      	movs	r2, #0
 800246c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800246e:	4b16      	ldr	r3, [pc, #88]	@ (80024c8 <MX_USART3_UART_Init+0x90>)
 8002470:	2200      	movs	r2, #0
 8002472:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002474:	4b14      	ldr	r3, [pc, #80]	@ (80024c8 <MX_USART3_UART_Init+0x90>)
 8002476:	2200      	movs	r2, #0
 8002478:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800247a:	4b13      	ldr	r3, [pc, #76]	@ (80024c8 <MX_USART3_UART_Init+0x90>)
 800247c:	2200      	movs	r2, #0
 800247e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002480:	4811      	ldr	r0, [pc, #68]	@ (80024c8 <MX_USART3_UART_Init+0x90>)
 8002482:	f006 fa57 	bl	8008934 <HAL_UART_Init>
 8002486:	4603      	mov	r3, r0
 8002488:	2b00      	cmp	r3, #0
 800248a:	d001      	beq.n	8002490 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800248c:	f7ff fa0c 	bl	80018a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002490:	2100      	movs	r1, #0
 8002492:	480d      	ldr	r0, [pc, #52]	@ (80024c8 <MX_USART3_UART_Init+0x90>)
 8002494:	f008 ff7d 	bl	800b392 <HAL_UARTEx_SetTxFifoThreshold>
 8002498:	4603      	mov	r3, r0
 800249a:	2b00      	cmp	r3, #0
 800249c:	d001      	beq.n	80024a2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800249e:	f7ff fa03 	bl	80018a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80024a2:	2100      	movs	r1, #0
 80024a4:	4808      	ldr	r0, [pc, #32]	@ (80024c8 <MX_USART3_UART_Init+0x90>)
 80024a6:	f008 ffb2 	bl	800b40e <HAL_UARTEx_SetRxFifoThreshold>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d001      	beq.n	80024b4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80024b0:	f7ff f9fa 	bl	80018a8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80024b4:	4804      	ldr	r0, [pc, #16]	@ (80024c8 <MX_USART3_UART_Init+0x90>)
 80024b6:	f008 ff33 	bl	800b320 <HAL_UARTEx_DisableFifoMode>
 80024ba:	4603      	mov	r3, r0
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d001      	beq.n	80024c4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80024c0:	f7ff f9f2 	bl	80018a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80024c4:	bf00      	nop
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	24000930 	.word	0x24000930
 80024cc:	40004800 	.word	0x40004800

080024d0 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80024d4:	4b22      	ldr	r3, [pc, #136]	@ (8002560 <MX_USART6_UART_Init+0x90>)
 80024d6:	4a23      	ldr	r2, [pc, #140]	@ (8002564 <MX_USART6_UART_Init+0x94>)
 80024d8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80024da:	4b21      	ldr	r3, [pc, #132]	@ (8002560 <MX_USART6_UART_Init+0x90>)
 80024dc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80024e0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80024e2:	4b1f      	ldr	r3, [pc, #124]	@ (8002560 <MX_USART6_UART_Init+0x90>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80024e8:	4b1d      	ldr	r3, [pc, #116]	@ (8002560 <MX_USART6_UART_Init+0x90>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80024ee:	4b1c      	ldr	r3, [pc, #112]	@ (8002560 <MX_USART6_UART_Init+0x90>)
 80024f0:	2200      	movs	r2, #0
 80024f2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80024f4:	4b1a      	ldr	r3, [pc, #104]	@ (8002560 <MX_USART6_UART_Init+0x90>)
 80024f6:	220c      	movs	r2, #12
 80024f8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024fa:	4b19      	ldr	r3, [pc, #100]	@ (8002560 <MX_USART6_UART_Init+0x90>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002500:	4b17      	ldr	r3, [pc, #92]	@ (8002560 <MX_USART6_UART_Init+0x90>)
 8002502:	2200      	movs	r2, #0
 8002504:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002506:	4b16      	ldr	r3, [pc, #88]	@ (8002560 <MX_USART6_UART_Init+0x90>)
 8002508:	2200      	movs	r2, #0
 800250a:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800250c:	4b14      	ldr	r3, [pc, #80]	@ (8002560 <MX_USART6_UART_Init+0x90>)
 800250e:	2200      	movs	r2, #0
 8002510:	625a      	str	r2, [r3, #36]	@ 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002512:	4b13      	ldr	r3, [pc, #76]	@ (8002560 <MX_USART6_UART_Init+0x90>)
 8002514:	2200      	movs	r2, #0
 8002516:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002518:	4811      	ldr	r0, [pc, #68]	@ (8002560 <MX_USART6_UART_Init+0x90>)
 800251a:	f006 fa0b 	bl	8008934 <HAL_UART_Init>
 800251e:	4603      	mov	r3, r0
 8002520:	2b00      	cmp	r3, #0
 8002522:	d001      	beq.n	8002528 <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 8002524:	f7ff f9c0 	bl	80018a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002528:	2100      	movs	r1, #0
 800252a:	480d      	ldr	r0, [pc, #52]	@ (8002560 <MX_USART6_UART_Init+0x90>)
 800252c:	f008 ff31 	bl	800b392 <HAL_UARTEx_SetTxFifoThreshold>
 8002530:	4603      	mov	r3, r0
 8002532:	2b00      	cmp	r3, #0
 8002534:	d001      	beq.n	800253a <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 8002536:	f7ff f9b7 	bl	80018a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800253a:	2100      	movs	r1, #0
 800253c:	4808      	ldr	r0, [pc, #32]	@ (8002560 <MX_USART6_UART_Init+0x90>)
 800253e:	f008 ff66 	bl	800b40e <HAL_UARTEx_SetRxFifoThreshold>
 8002542:	4603      	mov	r3, r0
 8002544:	2b00      	cmp	r3, #0
 8002546:	d001      	beq.n	800254c <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 8002548:	f7ff f9ae 	bl	80018a8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 800254c:	4804      	ldr	r0, [pc, #16]	@ (8002560 <MX_USART6_UART_Init+0x90>)
 800254e:	f008 fee7 	bl	800b320 <HAL_UARTEx_DisableFifoMode>
 8002552:	4603      	mov	r3, r0
 8002554:	2b00      	cmp	r3, #0
 8002556:	d001      	beq.n	800255c <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 8002558:	f7ff f9a6 	bl	80018a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800255c:	bf00      	nop
 800255e:	bd80      	pop	{r7, pc}
 8002560:	240009c4 	.word	0x240009c4
 8002564:	40011400 	.word	0x40011400

08002568 <MX_USART10_UART_Init>:
/* USART10 init function */

void MX_USART10_UART_Init(void)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	af00      	add	r7, sp, #0
  /* USER CODE END USART10_Init 0 */

  /* USER CODE BEGIN USART10_Init 1 */

  /* USER CODE END USART10_Init 1 */
  huart10.Instance = USART10;
 800256c:	4b22      	ldr	r3, [pc, #136]	@ (80025f8 <MX_USART10_UART_Init+0x90>)
 800256e:	4a23      	ldr	r2, [pc, #140]	@ (80025fc <MX_USART10_UART_Init+0x94>)
 8002570:	601a      	str	r2, [r3, #0]
  huart10.Init.BaudRate = 115200;
 8002572:	4b21      	ldr	r3, [pc, #132]	@ (80025f8 <MX_USART10_UART_Init+0x90>)
 8002574:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002578:	605a      	str	r2, [r3, #4]
  huart10.Init.WordLength = UART_WORDLENGTH_8B;
 800257a:	4b1f      	ldr	r3, [pc, #124]	@ (80025f8 <MX_USART10_UART_Init+0x90>)
 800257c:	2200      	movs	r2, #0
 800257e:	609a      	str	r2, [r3, #8]
  huart10.Init.StopBits = UART_STOPBITS_1;
 8002580:	4b1d      	ldr	r3, [pc, #116]	@ (80025f8 <MX_USART10_UART_Init+0x90>)
 8002582:	2200      	movs	r2, #0
 8002584:	60da      	str	r2, [r3, #12]
  huart10.Init.Parity = UART_PARITY_NONE;
 8002586:	4b1c      	ldr	r3, [pc, #112]	@ (80025f8 <MX_USART10_UART_Init+0x90>)
 8002588:	2200      	movs	r2, #0
 800258a:	611a      	str	r2, [r3, #16]
  huart10.Init.Mode = UART_MODE_TX_RX;
 800258c:	4b1a      	ldr	r3, [pc, #104]	@ (80025f8 <MX_USART10_UART_Init+0x90>)
 800258e:	220c      	movs	r2, #12
 8002590:	615a      	str	r2, [r3, #20]
  huart10.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002592:	4b19      	ldr	r3, [pc, #100]	@ (80025f8 <MX_USART10_UART_Init+0x90>)
 8002594:	2200      	movs	r2, #0
 8002596:	619a      	str	r2, [r3, #24]
  huart10.Init.OverSampling = UART_OVERSAMPLING_16;
 8002598:	4b17      	ldr	r3, [pc, #92]	@ (80025f8 <MX_USART10_UART_Init+0x90>)
 800259a:	2200      	movs	r2, #0
 800259c:	61da      	str	r2, [r3, #28]
  huart10.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800259e:	4b16      	ldr	r3, [pc, #88]	@ (80025f8 <MX_USART10_UART_Init+0x90>)
 80025a0:	2200      	movs	r2, #0
 80025a2:	621a      	str	r2, [r3, #32]
  huart10.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80025a4:	4b14      	ldr	r3, [pc, #80]	@ (80025f8 <MX_USART10_UART_Init+0x90>)
 80025a6:	2200      	movs	r2, #0
 80025a8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart10.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80025aa:	4b13      	ldr	r3, [pc, #76]	@ (80025f8 <MX_USART10_UART_Init+0x90>)
 80025ac:	2200      	movs	r2, #0
 80025ae:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart10) != HAL_OK)
 80025b0:	4811      	ldr	r0, [pc, #68]	@ (80025f8 <MX_USART10_UART_Init+0x90>)
 80025b2:	f006 f9bf 	bl	8008934 <HAL_UART_Init>
 80025b6:	4603      	mov	r3, r0
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d001      	beq.n	80025c0 <MX_USART10_UART_Init+0x58>
  {
    Error_Handler();
 80025bc:	f7ff f974 	bl	80018a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart10, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80025c0:	2100      	movs	r1, #0
 80025c2:	480d      	ldr	r0, [pc, #52]	@ (80025f8 <MX_USART10_UART_Init+0x90>)
 80025c4:	f008 fee5 	bl	800b392 <HAL_UARTEx_SetTxFifoThreshold>
 80025c8:	4603      	mov	r3, r0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d001      	beq.n	80025d2 <MX_USART10_UART_Init+0x6a>
  {
    Error_Handler();
 80025ce:	f7ff f96b 	bl	80018a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart10, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80025d2:	2100      	movs	r1, #0
 80025d4:	4808      	ldr	r0, [pc, #32]	@ (80025f8 <MX_USART10_UART_Init+0x90>)
 80025d6:	f008 ff1a 	bl	800b40e <HAL_UARTEx_SetRxFifoThreshold>
 80025da:	4603      	mov	r3, r0
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d001      	beq.n	80025e4 <MX_USART10_UART_Init+0x7c>
  {
    Error_Handler();
 80025e0:	f7ff f962 	bl	80018a8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart10) != HAL_OK)
 80025e4:	4804      	ldr	r0, [pc, #16]	@ (80025f8 <MX_USART10_UART_Init+0x90>)
 80025e6:	f008 fe9b 	bl	800b320 <HAL_UARTEx_DisableFifoMode>
 80025ea:	4603      	mov	r3, r0
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d001      	beq.n	80025f4 <MX_USART10_UART_Init+0x8c>
  {
    Error_Handler();
 80025f0:	f7ff f95a 	bl	80018a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART10_Init 2 */

  /* USER CODE END USART10_Init 2 */

}
 80025f4:	bf00      	nop
 80025f6:	bd80      	pop	{r7, pc}
 80025f8:	24000a58 	.word	0x24000a58
 80025fc:	40011c00 	.word	0x40011c00

08002600 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b0c8      	sub	sp, #288	@ 0x120
 8002604:	af00      	add	r7, sp, #0
 8002606:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800260a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800260e:	6018      	str	r0, [r3, #0]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002610:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8002614:	2200      	movs	r2, #0
 8002616:	601a      	str	r2, [r3, #0]
 8002618:	605a      	str	r2, [r3, #4]
 800261a:	609a      	str	r2, [r3, #8]
 800261c:	60da      	str	r2, [r3, #12]
 800261e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002620:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002624:	22b8      	movs	r2, #184	@ 0xb8
 8002626:	2100      	movs	r1, #0
 8002628:	4618      	mov	r0, r3
 800262a:	f00c fdae 	bl	800f18a <memset>
  if(uartHandle->Instance==UART4)
 800262e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002632:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4aaa      	ldr	r2, [pc, #680]	@ (80028e4 <HAL_UART_MspInit+0x2e4>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d14e      	bne.n	80026de <HAL_UART_MspInit+0xde>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8002640:	f04f 0202 	mov.w	r2, #2
 8002644:	f04f 0300 	mov.w	r3, #0
 8002648:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800264c:	2300      	movs	r3, #0
 800264e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002652:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002656:	4618      	mov	r0, r3
 8002658:	f003 fe6c 	bl	8006334 <HAL_RCCEx_PeriphCLKConfig>
 800265c:	4603      	mov	r3, r0
 800265e:	2b00      	cmp	r3, #0
 8002660:	d001      	beq.n	8002666 <HAL_UART_MspInit+0x66>
    {
      Error_Handler();
 8002662:	f7ff f921 	bl	80018a8 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002666:	4ba0      	ldr	r3, [pc, #640]	@ (80028e8 <HAL_UART_MspInit+0x2e8>)
 8002668:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800266c:	4a9e      	ldr	r2, [pc, #632]	@ (80028e8 <HAL_UART_MspInit+0x2e8>)
 800266e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002672:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002676:	4b9c      	ldr	r3, [pc, #624]	@ (80028e8 <HAL_UART_MspInit+0x2e8>)
 8002678:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800267c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002680:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002682:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002684:	4b98      	ldr	r3, [pc, #608]	@ (80028e8 <HAL_UART_MspInit+0x2e8>)
 8002686:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800268a:	4a97      	ldr	r2, [pc, #604]	@ (80028e8 <HAL_UART_MspInit+0x2e8>)
 800268c:	f043 0301 	orr.w	r3, r3, #1
 8002690:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002694:	4b94      	ldr	r3, [pc, #592]	@ (80028e8 <HAL_UART_MspInit+0x2e8>)
 8002696:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800269a:	f003 0301 	and.w	r3, r3, #1
 800269e:	64bb      	str	r3, [r7, #72]	@ 0x48
 80026a0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80026a2:	2303      	movs	r3, #3
 80026a4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026a8:	2302      	movs	r3, #2
 80026aa:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ae:	2300      	movs	r3, #0
 80026b0:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026b4:	2300      	movs	r3, #0
 80026b6:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80026ba:	2308      	movs	r3, #8
 80026bc:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026c0:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 80026c4:	4619      	mov	r1, r3
 80026c6:	4889      	ldr	r0, [pc, #548]	@ (80028ec <HAL_UART_MspInit+0x2ec>)
 80026c8:	f002 fcec 	bl	80050a4 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 8, 0);
 80026cc:	2200      	movs	r2, #0
 80026ce:	2108      	movs	r1, #8
 80026d0:	2034      	movs	r0, #52	@ 0x34
 80026d2:	f000 fcec 	bl	80030ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80026d6:	2034      	movs	r0, #52	@ 0x34
 80026d8:	f000 fd03 	bl	80030e2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART10_IRQn);
  /* USER CODE BEGIN USART10_MspInit 1 */

  /* USER CODE END USART10_MspInit 1 */
  }
}
 80026dc:	e320      	b.n	8002d20 <HAL_UART_MspInit+0x720>
  else if(uartHandle->Instance==UART5)
 80026de:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80026e2:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a81      	ldr	r2, [pc, #516]	@ (80028f0 <HAL_UART_MspInit+0x2f0>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d147      	bne.n	8002780 <HAL_UART_MspInit+0x180>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 80026f0:	f04f 0202 	mov.w	r2, #2
 80026f4:	f04f 0300 	mov.w	r3, #0
 80026f8:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80026fc:	2300      	movs	r3, #0
 80026fe:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002702:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002706:	4618      	mov	r0, r3
 8002708:	f003 fe14 	bl	8006334 <HAL_RCCEx_PeriphCLKConfig>
 800270c:	4603      	mov	r3, r0
 800270e:	2b00      	cmp	r3, #0
 8002710:	d001      	beq.n	8002716 <HAL_UART_MspInit+0x116>
      Error_Handler();
 8002712:	f7ff f8c9 	bl	80018a8 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8002716:	4b74      	ldr	r3, [pc, #464]	@ (80028e8 <HAL_UART_MspInit+0x2e8>)
 8002718:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800271c:	4a72      	ldr	r2, [pc, #456]	@ (80028e8 <HAL_UART_MspInit+0x2e8>)
 800271e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002722:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002726:	4b70      	ldr	r3, [pc, #448]	@ (80028e8 <HAL_UART_MspInit+0x2e8>)
 8002728:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800272c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002730:	647b      	str	r3, [r7, #68]	@ 0x44
 8002732:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002734:	4b6c      	ldr	r3, [pc, #432]	@ (80028e8 <HAL_UART_MspInit+0x2e8>)
 8002736:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800273a:	4a6b      	ldr	r2, [pc, #428]	@ (80028e8 <HAL_UART_MspInit+0x2e8>)
 800273c:	f043 0302 	orr.w	r3, r3, #2
 8002740:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002744:	4b68      	ldr	r3, [pc, #416]	@ (80028e8 <HAL_UART_MspInit+0x2e8>)
 8002746:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800274a:	f003 0302 	and.w	r3, r3, #2
 800274e:	643b      	str	r3, [r7, #64]	@ 0x40
 8002750:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_5;
 8002752:	f242 0320 	movw	r3, #8224	@ 0x2020
 8002756:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800275a:	2302      	movs	r3, #2
 800275c:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002760:	2300      	movs	r3, #0
 8002762:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002766:	2300      	movs	r3, #0
 8002768:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 800276c:	230e      	movs	r3, #14
 800276e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002772:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8002776:	4619      	mov	r1, r3
 8002778:	485e      	ldr	r0, [pc, #376]	@ (80028f4 <HAL_UART_MspInit+0x2f4>)
 800277a:	f002 fc93 	bl	80050a4 <HAL_GPIO_Init>
}
 800277e:	e2cf      	b.n	8002d20 <HAL_UART_MspInit+0x720>
  else if(uartHandle->Instance==UART7)
 8002780:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002784:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a5a      	ldr	r2, [pc, #360]	@ (80028f8 <HAL_UART_MspInit+0x2f8>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d14f      	bne.n	8002832 <HAL_UART_MspInit+0x232>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8002792:	f04f 0202 	mov.w	r2, #2
 8002796:	f04f 0300 	mov.w	r3, #0
 800279a:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800279e:	2300      	movs	r3, #0
 80027a0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80027a4:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80027a8:	4618      	mov	r0, r3
 80027aa:	f003 fdc3 	bl	8006334 <HAL_RCCEx_PeriphCLKConfig>
 80027ae:	4603      	mov	r3, r0
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d001      	beq.n	80027b8 <HAL_UART_MspInit+0x1b8>
      Error_Handler();
 80027b4:	f7ff f878 	bl	80018a8 <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 80027b8:	4b4b      	ldr	r3, [pc, #300]	@ (80028e8 <HAL_UART_MspInit+0x2e8>)
 80027ba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80027be:	4a4a      	ldr	r2, [pc, #296]	@ (80028e8 <HAL_UART_MspInit+0x2e8>)
 80027c0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80027c4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80027c8:	4b47      	ldr	r3, [pc, #284]	@ (80028e8 <HAL_UART_MspInit+0x2e8>)
 80027ca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80027ce:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80027d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80027d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80027d6:	4b44      	ldr	r3, [pc, #272]	@ (80028e8 <HAL_UART_MspInit+0x2e8>)
 80027d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80027dc:	4a42      	ldr	r2, [pc, #264]	@ (80028e8 <HAL_UART_MspInit+0x2e8>)
 80027de:	f043 0310 	orr.w	r3, r3, #16
 80027e2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80027e6:	4b40      	ldr	r3, [pc, #256]	@ (80028e8 <HAL_UART_MspInit+0x2e8>)
 80027e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80027ec:	f003 0310 	and.w	r3, r3, #16
 80027f0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80027f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80027f4:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80027f8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027fc:	2302      	movs	r3, #2
 80027fe:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002802:	2300      	movs	r3, #0
 8002804:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002808:	2300      	movs	r3, #0
 800280a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 800280e:	2307      	movs	r3, #7
 8002810:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002814:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8002818:	4619      	mov	r1, r3
 800281a:	4838      	ldr	r0, [pc, #224]	@ (80028fc <HAL_UART_MspInit+0x2fc>)
 800281c:	f002 fc42 	bl	80050a4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART7_IRQn, 6, 0);
 8002820:	2200      	movs	r2, #0
 8002822:	2106      	movs	r1, #6
 8002824:	2052      	movs	r0, #82	@ 0x52
 8002826:	f000 fc42 	bl	80030ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 800282a:	2052      	movs	r0, #82	@ 0x52
 800282c:	f000 fc59 	bl	80030e2 <HAL_NVIC_EnableIRQ>
}
 8002830:	e276      	b.n	8002d20 <HAL_UART_MspInit+0x720>
  else if(uartHandle->Instance==UART8)
 8002832:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002836:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a30      	ldr	r2, [pc, #192]	@ (8002900 <HAL_UART_MspInit+0x300>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d15f      	bne.n	8002904 <HAL_UART_MspInit+0x304>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 8002844:	f04f 0202 	mov.w	r2, #2
 8002848:	f04f 0300 	mov.w	r3, #0
 800284c:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002850:	2300      	movs	r3, #0
 8002852:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002856:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800285a:	4618      	mov	r0, r3
 800285c:	f003 fd6a 	bl	8006334 <HAL_RCCEx_PeriphCLKConfig>
 8002860:	4603      	mov	r3, r0
 8002862:	2b00      	cmp	r3, #0
 8002864:	d001      	beq.n	800286a <HAL_UART_MspInit+0x26a>
      Error_Handler();
 8002866:	f7ff f81f 	bl	80018a8 <Error_Handler>
    __HAL_RCC_UART8_CLK_ENABLE();
 800286a:	4b1f      	ldr	r3, [pc, #124]	@ (80028e8 <HAL_UART_MspInit+0x2e8>)
 800286c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002870:	4a1d      	ldr	r2, [pc, #116]	@ (80028e8 <HAL_UART_MspInit+0x2e8>)
 8002872:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002876:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800287a:	4b1b      	ldr	r3, [pc, #108]	@ (80028e8 <HAL_UART_MspInit+0x2e8>)
 800287c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002880:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002884:	637b      	str	r3, [r7, #52]	@ 0x34
 8002886:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002888:	4b17      	ldr	r3, [pc, #92]	@ (80028e8 <HAL_UART_MspInit+0x2e8>)
 800288a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800288e:	4a16      	ldr	r2, [pc, #88]	@ (80028e8 <HAL_UART_MspInit+0x2e8>)
 8002890:	f043 0310 	orr.w	r3, r3, #16
 8002894:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002898:	4b13      	ldr	r3, [pc, #76]	@ (80028e8 <HAL_UART_MspInit+0x2e8>)
 800289a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800289e:	f003 0310 	and.w	r3, r3, #16
 80028a2:	633b      	str	r3, [r7, #48]	@ 0x30
 80028a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80028a6:	2303      	movs	r3, #3
 80028a8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ac:	2302      	movs	r3, #2
 80028ae:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b2:	2300      	movs	r3, #0
 80028b4:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028b8:	2300      	movs	r3, #0
 80028ba:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 80028be:	2308      	movs	r3, #8
 80028c0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80028c4:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 80028c8:	4619      	mov	r1, r3
 80028ca:	480c      	ldr	r0, [pc, #48]	@ (80028fc <HAL_UART_MspInit+0x2fc>)
 80028cc:	f002 fbea 	bl	80050a4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART8_IRQn, 15, 0);
 80028d0:	2200      	movs	r2, #0
 80028d2:	210f      	movs	r1, #15
 80028d4:	2053      	movs	r0, #83	@ 0x53
 80028d6:	f000 fbea 	bl	80030ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 80028da:	2053      	movs	r0, #83	@ 0x53
 80028dc:	f000 fc01 	bl	80030e2 <HAL_NVIC_EnableIRQ>
}
 80028e0:	e21e      	b.n	8002d20 <HAL_UART_MspInit+0x720>
 80028e2:	bf00      	nop
 80028e4:	40004c00 	.word	0x40004c00
 80028e8:	58024400 	.word	0x58024400
 80028ec:	58020000 	.word	0x58020000
 80028f0:	40005000 	.word	0x40005000
 80028f4:	58020400 	.word	0x58020400
 80028f8:	40007800 	.word	0x40007800
 80028fc:	58021000 	.word	0x58021000
 8002900:	40007c00 	.word	0x40007c00
  else if(uartHandle->Instance==UART9)
 8002904:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002908:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4abd      	ldr	r2, [pc, #756]	@ (8002c08 <HAL_UART_MspInit+0x608>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d14f      	bne.n	80029b6 <HAL_UART_MspInit+0x3b6>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART9;
 8002916:	f04f 0201 	mov.w	r2, #1
 800291a:	f04f 0300 	mov.w	r3, #0
 800291e:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8002922:	2300      	movs	r3, #0
 8002924:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002928:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800292c:	4618      	mov	r0, r3
 800292e:	f003 fd01 	bl	8006334 <HAL_RCCEx_PeriphCLKConfig>
 8002932:	4603      	mov	r3, r0
 8002934:	2b00      	cmp	r3, #0
 8002936:	d001      	beq.n	800293c <HAL_UART_MspInit+0x33c>
      Error_Handler();
 8002938:	f7fe ffb6 	bl	80018a8 <Error_Handler>
    __HAL_RCC_UART9_CLK_ENABLE();
 800293c:	4bb3      	ldr	r3, [pc, #716]	@ (8002c0c <HAL_UART_MspInit+0x60c>)
 800293e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002942:	4ab2      	ldr	r2, [pc, #712]	@ (8002c0c <HAL_UART_MspInit+0x60c>)
 8002944:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002948:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800294c:	4baf      	ldr	r3, [pc, #700]	@ (8002c0c <HAL_UART_MspInit+0x60c>)
 800294e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002952:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002956:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002958:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800295a:	4bac      	ldr	r3, [pc, #688]	@ (8002c0c <HAL_UART_MspInit+0x60c>)
 800295c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002960:	4aaa      	ldr	r2, [pc, #680]	@ (8002c0c <HAL_UART_MspInit+0x60c>)
 8002962:	f043 0308 	orr.w	r3, r3, #8
 8002966:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800296a:	4ba8      	ldr	r3, [pc, #672]	@ (8002c0c <HAL_UART_MspInit+0x60c>)
 800296c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002970:	f003 0308 	and.w	r3, r3, #8
 8002974:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002976:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8002978:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800297c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002980:	2302      	movs	r3, #2
 8002982:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002986:	2300      	movs	r3, #0
 8002988:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800298c:	2300      	movs	r3, #0
 800298e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF11_UART9;
 8002992:	230b      	movs	r3, #11
 8002994:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002998:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 800299c:	4619      	mov	r1, r3
 800299e:	489c      	ldr	r0, [pc, #624]	@ (8002c10 <HAL_UART_MspInit+0x610>)
 80029a0:	f002 fb80 	bl	80050a4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART9_IRQn, 5, 0);
 80029a4:	2200      	movs	r2, #0
 80029a6:	2105      	movs	r1, #5
 80029a8:	209b      	movs	r0, #155	@ 0x9b
 80029aa:	f000 fb80 	bl	80030ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART9_IRQn);
 80029ae:	209b      	movs	r0, #155	@ 0x9b
 80029b0:	f000 fb97 	bl	80030e2 <HAL_NVIC_EnableIRQ>
}
 80029b4:	e1b4      	b.n	8002d20 <HAL_UART_MspInit+0x720>
  else if(uartHandle->Instance==USART2)
 80029b6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80029ba:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a94      	ldr	r2, [pc, #592]	@ (8002c14 <HAL_UART_MspInit+0x614>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d156      	bne.n	8002a76 <HAL_UART_MspInit+0x476>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80029c8:	f04f 0202 	mov.w	r2, #2
 80029cc:	f04f 0300 	mov.w	r3, #0
 80029d0:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80029d4:	2300      	movs	r3, #0
 80029d6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80029da:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80029de:	4618      	mov	r0, r3
 80029e0:	f003 fca8 	bl	8006334 <HAL_RCCEx_PeriphCLKConfig>
 80029e4:	4603      	mov	r3, r0
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d001      	beq.n	80029ee <HAL_UART_MspInit+0x3ee>
      Error_Handler();
 80029ea:	f7fe ff5d 	bl	80018a8 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80029ee:	4b87      	ldr	r3, [pc, #540]	@ (8002c0c <HAL_UART_MspInit+0x60c>)
 80029f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80029f4:	4a85      	ldr	r2, [pc, #532]	@ (8002c0c <HAL_UART_MspInit+0x60c>)
 80029f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80029fa:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80029fe:	4b83      	ldr	r3, [pc, #524]	@ (8002c0c <HAL_UART_MspInit+0x60c>)
 8002a00:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002a04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a08:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a0c:	4b7f      	ldr	r3, [pc, #508]	@ (8002c0c <HAL_UART_MspInit+0x60c>)
 8002a0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002a12:	4a7e      	ldr	r2, [pc, #504]	@ (8002c0c <HAL_UART_MspInit+0x60c>)
 8002a14:	f043 0301 	orr.w	r3, r3, #1
 8002a18:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002a1c:	4b7b      	ldr	r3, [pc, #492]	@ (8002c0c <HAL_UART_MspInit+0x60c>)
 8002a1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002a22:	f003 0201 	and.w	r2, r3, #1
 8002a26:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002a2a:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002a2e:	601a      	str	r2, [r3, #0]
 8002a30:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002a34:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002a38:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002a3a:	230c      	movs	r3, #12
 8002a3c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a40:	2302      	movs	r3, #2
 8002a42:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a46:	2300      	movs	r3, #0
 8002a48:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002a52:	2307      	movs	r3, #7
 8002a54:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a58:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8002a5c:	4619      	mov	r1, r3
 8002a5e:	486e      	ldr	r0, [pc, #440]	@ (8002c18 <HAL_UART_MspInit+0x618>)
 8002a60:	f002 fb20 	bl	80050a4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 15, 0);
 8002a64:	2200      	movs	r2, #0
 8002a66:	210f      	movs	r1, #15
 8002a68:	2026      	movs	r0, #38	@ 0x26
 8002a6a:	f000 fb20 	bl	80030ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002a6e:	2026      	movs	r0, #38	@ 0x26
 8002a70:	f000 fb37 	bl	80030e2 <HAL_NVIC_EnableIRQ>
}
 8002a74:	e154      	b.n	8002d20 <HAL_UART_MspInit+0x720>
  else if(uartHandle->Instance==USART3)
 8002a76:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002a7a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a66      	ldr	r2, [pc, #408]	@ (8002c1c <HAL_UART_MspInit+0x61c>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d15f      	bne.n	8002b48 <HAL_UART_MspInit+0x548>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002a88:	f04f 0202 	mov.w	r2, #2
 8002a8c:	f04f 0300 	mov.w	r3, #0
 8002a90:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002a94:	2300      	movs	r3, #0
 8002a96:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a9a:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f003 fc48 	bl	8006334 <HAL_RCCEx_PeriphCLKConfig>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d001      	beq.n	8002aae <HAL_UART_MspInit+0x4ae>
      Error_Handler();
 8002aaa:	f7fe fefd 	bl	80018a8 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002aae:	4b57      	ldr	r3, [pc, #348]	@ (8002c0c <HAL_UART_MspInit+0x60c>)
 8002ab0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002ab4:	4a55      	ldr	r2, [pc, #340]	@ (8002c0c <HAL_UART_MspInit+0x60c>)
 8002ab6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002aba:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002abe:	4b53      	ldr	r3, [pc, #332]	@ (8002c0c <HAL_UART_MspInit+0x60c>)
 8002ac0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002ac4:	f403 2280 	and.w	r2, r3, #262144	@ 0x40000
 8002ac8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002acc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002ad0:	601a      	str	r2, [r3, #0]
 8002ad2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002ad6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002ada:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002adc:	4b4b      	ldr	r3, [pc, #300]	@ (8002c0c <HAL_UART_MspInit+0x60c>)
 8002ade:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002ae2:	4a4a      	ldr	r2, [pc, #296]	@ (8002c0c <HAL_UART_MspInit+0x60c>)
 8002ae4:	f043 0308 	orr.w	r3, r3, #8
 8002ae8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002aec:	4b47      	ldr	r3, [pc, #284]	@ (8002c0c <HAL_UART_MspInit+0x60c>)
 8002aee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002af2:	f003 0208 	and.w	r2, r3, #8
 8002af6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002afa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002afe:	601a      	str	r2, [r3, #0]
 8002b00:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002b04:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002b08:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002b0a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002b0e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b12:	2302      	movs	r3, #2
 8002b14:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002b24:	2307      	movs	r3, #7
 8002b26:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002b2a:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8002b2e:	4619      	mov	r1, r3
 8002b30:	4837      	ldr	r0, [pc, #220]	@ (8002c10 <HAL_UART_MspInit+0x610>)
 8002b32:	f002 fab7 	bl	80050a4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 14, 0);
 8002b36:	2200      	movs	r2, #0
 8002b38:	210e      	movs	r1, #14
 8002b3a:	2027      	movs	r0, #39	@ 0x27
 8002b3c:	f000 fab7 	bl	80030ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002b40:	2027      	movs	r0, #39	@ 0x27
 8002b42:	f000 face 	bl	80030e2 <HAL_NVIC_EnableIRQ>
}
 8002b46:	e0eb      	b.n	8002d20 <HAL_UART_MspInit+0x720>
  else if(uartHandle->Instance==USART6)
 8002b48:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002b4c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a32      	ldr	r2, [pc, #200]	@ (8002c20 <HAL_UART_MspInit+0x620>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d166      	bne.n	8002c28 <HAL_UART_MspInit+0x628>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8002b5a:	f04f 0201 	mov.w	r2, #1
 8002b5e:	f04f 0300 	mov.w	r3, #0
 8002b62:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8002b66:	2300      	movs	r3, #0
 8002b68:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b6c:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002b70:	4618      	mov	r0, r3
 8002b72:	f003 fbdf 	bl	8006334 <HAL_RCCEx_PeriphCLKConfig>
 8002b76:	4603      	mov	r3, r0
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d001      	beq.n	8002b80 <HAL_UART_MspInit+0x580>
      Error_Handler();
 8002b7c:	f7fe fe94 	bl	80018a8 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002b80:	4b22      	ldr	r3, [pc, #136]	@ (8002c0c <HAL_UART_MspInit+0x60c>)
 8002b82:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002b86:	4a21      	ldr	r2, [pc, #132]	@ (8002c0c <HAL_UART_MspInit+0x60c>)
 8002b88:	f043 0320 	orr.w	r3, r3, #32
 8002b8c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002b90:	4b1e      	ldr	r3, [pc, #120]	@ (8002c0c <HAL_UART_MspInit+0x60c>)
 8002b92:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002b96:	f003 0220 	and.w	r2, r3, #32
 8002b9a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002b9e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002ba2:	601a      	str	r2, [r3, #0]
 8002ba4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002ba8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002bac:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bae:	4b17      	ldr	r3, [pc, #92]	@ (8002c0c <HAL_UART_MspInit+0x60c>)
 8002bb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002bb4:	4a15      	ldr	r2, [pc, #84]	@ (8002c0c <HAL_UART_MspInit+0x60c>)
 8002bb6:	f043 0304 	orr.w	r3, r3, #4
 8002bba:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002bbe:	4b13      	ldr	r3, [pc, #76]	@ (8002c0c <HAL_UART_MspInit+0x60c>)
 8002bc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002bc4:	f003 0204 	and.w	r2, r3, #4
 8002bc8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002bcc:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002bd0:	601a      	str	r2, [r3, #0]
 8002bd2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002bd6:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002bda:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002bdc:	23c0      	movs	r3, #192	@ 0xc0
 8002bde:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002be2:	2302      	movs	r3, #2
 8002be4:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002be8:	2300      	movs	r3, #0
 8002bea:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 8002bf4:	2307      	movs	r3, #7
 8002bf6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002bfa:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8002bfe:	4619      	mov	r1, r3
 8002c00:	4808      	ldr	r0, [pc, #32]	@ (8002c24 <HAL_UART_MspInit+0x624>)
 8002c02:	f002 fa4f 	bl	80050a4 <HAL_GPIO_Init>
}
 8002c06:	e08b      	b.n	8002d20 <HAL_UART_MspInit+0x720>
 8002c08:	40011800 	.word	0x40011800
 8002c0c:	58024400 	.word	0x58024400
 8002c10:	58020c00 	.word	0x58020c00
 8002c14:	40004400 	.word	0x40004400
 8002c18:	58020000 	.word	0x58020000
 8002c1c:	40004800 	.word	0x40004800
 8002c20:	40011400 	.word	0x40011400
 8002c24:	58020800 	.word	0x58020800
  else if(uartHandle->Instance==USART10)
 8002c28:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002c2c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a3d      	ldr	r2, [pc, #244]	@ (8002d2c <HAL_UART_MspInit+0x72c>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d172      	bne.n	8002d20 <HAL_UART_MspInit+0x720>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART10;
 8002c3a:	f04f 0201 	mov.w	r2, #1
 8002c3e:	f04f 0300 	mov.w	r3, #0
 8002c42:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8002c46:	2300      	movs	r3, #0
 8002c48:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c4c:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002c50:	4618      	mov	r0, r3
 8002c52:	f003 fb6f 	bl	8006334 <HAL_RCCEx_PeriphCLKConfig>
 8002c56:	4603      	mov	r3, r0
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d001      	beq.n	8002c60 <HAL_UART_MspInit+0x660>
      Error_Handler();
 8002c5c:	f7fe fe24 	bl	80018a8 <Error_Handler>
    __HAL_RCC_USART10_CLK_ENABLE();
 8002c60:	4b33      	ldr	r3, [pc, #204]	@ (8002d30 <HAL_UART_MspInit+0x730>)
 8002c62:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002c66:	4a32      	ldr	r2, [pc, #200]	@ (8002d30 <HAL_UART_MspInit+0x730>)
 8002c68:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002c6c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002c70:	4b2f      	ldr	r3, [pc, #188]	@ (8002d30 <HAL_UART_MspInit+0x730>)
 8002c72:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002c76:	f003 0280 	and.w	r2, r3, #128	@ 0x80
 8002c7a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002c7e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002c82:	601a      	str	r2, [r3, #0]
 8002c84:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002c88:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002c8c:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002c8e:	4b28      	ldr	r3, [pc, #160]	@ (8002d30 <HAL_UART_MspInit+0x730>)
 8002c90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002c94:	4a26      	ldr	r2, [pc, #152]	@ (8002d30 <HAL_UART_MspInit+0x730>)
 8002c96:	f043 0310 	orr.w	r3, r3, #16
 8002c9a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002c9e:	4b24      	ldr	r3, [pc, #144]	@ (8002d30 <HAL_UART_MspInit+0x730>)
 8002ca0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002ca4:	f003 0210 	and.w	r2, r3, #16
 8002ca8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002cac:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002cb0:	601a      	str	r2, [r3, #0]
 8002cb2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002cb6:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002cba:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002cbc:	2304      	movs	r3, #4
 8002cbe:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cc2:	2302      	movs	r3, #2
 8002cc4:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF4_USART10;
 8002cd4:	2304      	movs	r3, #4
 8002cd6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002cda:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8002cde:	4619      	mov	r1, r3
 8002ce0:	4814      	ldr	r0, [pc, #80]	@ (8002d34 <HAL_UART_MspInit+0x734>)
 8002ce2:	f002 f9df 	bl	80050a4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002ce6:	2308      	movs	r3, #8
 8002ce8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cec:	2302      	movs	r3, #2
 8002cee:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF11_USART10;
 8002cfe:	230b      	movs	r3, #11
 8002d00:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002d04:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8002d08:	4619      	mov	r1, r3
 8002d0a:	480a      	ldr	r0, [pc, #40]	@ (8002d34 <HAL_UART_MspInit+0x734>)
 8002d0c:	f002 f9ca 	bl	80050a4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART10_IRQn, 1, 0);
 8002d10:	2200      	movs	r2, #0
 8002d12:	2101      	movs	r1, #1
 8002d14:	209c      	movs	r0, #156	@ 0x9c
 8002d16:	f000 f9ca 	bl	80030ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART10_IRQn);
 8002d1a:	209c      	movs	r0, #156	@ 0x9c
 8002d1c:	f000 f9e1 	bl	80030e2 <HAL_NVIC_EnableIRQ>
}
 8002d20:	bf00      	nop
 8002d22:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	bf00      	nop
 8002d2c:	40011c00 	.word	0x40011c00
 8002d30:	58024400 	.word	0x58024400
 8002d34:	58021000 	.word	0x58021000

08002d38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
     ldr   sp, =_estack      /* set stack pointer */
 8002d38:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002d70 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002d3c:	f7fe ff42 	bl	8001bc4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002d40:	480c      	ldr	r0, [pc, #48]	@ (8002d74 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002d42:	490d      	ldr	r1, [pc, #52]	@ (8002d78 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002d44:	4a0d      	ldr	r2, [pc, #52]	@ (8002d7c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002d46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d48:	e002      	b.n	8002d50 <LoopCopyDataInit>

08002d4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d4e:	3304      	adds	r3, #4

08002d50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d54:	d3f9      	bcc.n	8002d4a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d56:	4a0a      	ldr	r2, [pc, #40]	@ (8002d80 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002d58:	4c0a      	ldr	r4, [pc, #40]	@ (8002d84 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002d5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d5c:	e001      	b.n	8002d62 <LoopFillZerobss>

08002d5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d60:	3204      	adds	r2, #4

08002d62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d64:	d3fb      	bcc.n	8002d5e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002d66:	f00c fa97 	bl	800f298 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002d6a:	f7fe f90b 	bl	8000f84 <main>
  bx  lr
 8002d6e:	4770      	bx	lr
     ldr   sp, =_estack      /* set stack pointer */
 8002d70:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8002d74:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002d78:	24000230 	.word	0x24000230
  ldr r2, =_sidata
 8002d7c:	08012afc 	.word	0x08012afc
  ldr r2, =_sbss
 8002d80:	24000230 	.word	0x24000230
  ldr r4, =_ebss
 8002d84:	24000e58 	.word	0x24000e58

08002d88 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002d88:	e7fe      	b.n	8002d88 <ADC3_IRQHandler>
	...

08002d8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b082      	sub	sp, #8
 8002d90:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d92:	2003      	movs	r0, #3
 8002d94:	f000 f980 	bl	8003098 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002d98:	f003 f8f6 	bl	8005f88 <HAL_RCC_GetSysClockFreq>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	4b15      	ldr	r3, [pc, #84]	@ (8002df4 <HAL_Init+0x68>)
 8002da0:	699b      	ldr	r3, [r3, #24]
 8002da2:	0a1b      	lsrs	r3, r3, #8
 8002da4:	f003 030f 	and.w	r3, r3, #15
 8002da8:	4913      	ldr	r1, [pc, #76]	@ (8002df8 <HAL_Init+0x6c>)
 8002daa:	5ccb      	ldrb	r3, [r1, r3]
 8002dac:	f003 031f 	and.w	r3, r3, #31
 8002db0:	fa22 f303 	lsr.w	r3, r2, r3
 8002db4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002db6:	4b0f      	ldr	r3, [pc, #60]	@ (8002df4 <HAL_Init+0x68>)
 8002db8:	699b      	ldr	r3, [r3, #24]
 8002dba:	f003 030f 	and.w	r3, r3, #15
 8002dbe:	4a0e      	ldr	r2, [pc, #56]	@ (8002df8 <HAL_Init+0x6c>)
 8002dc0:	5cd3      	ldrb	r3, [r2, r3]
 8002dc2:	f003 031f 	and.w	r3, r3, #31
 8002dc6:	687a      	ldr	r2, [r7, #4]
 8002dc8:	fa22 f303 	lsr.w	r3, r2, r3
 8002dcc:	4a0b      	ldr	r2, [pc, #44]	@ (8002dfc <HAL_Init+0x70>)
 8002dce:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002dd0:	4a0b      	ldr	r2, [pc, #44]	@ (8002e00 <HAL_Init+0x74>)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002dd6:	200f      	movs	r0, #15
 8002dd8:	f000 f814 	bl	8002e04 <HAL_InitTick>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d001      	beq.n	8002de6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e002      	b.n	8002dec <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002de6:	f7fe fd65 	bl	80018b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002dea:	2300      	movs	r3, #0
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	3708      	adds	r7, #8
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}
 8002df4:	58024400 	.word	0x58024400
 8002df8:	08012658 	.word	0x08012658
 8002dfc:	24000028 	.word	0x24000028
 8002e00:	24000024 	.word	0x24000024

08002e04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b082      	sub	sp, #8
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002e0c:	4b15      	ldr	r3, [pc, #84]	@ (8002e64 <HAL_InitTick+0x60>)
 8002e0e:	781b      	ldrb	r3, [r3, #0]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d101      	bne.n	8002e18 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	e021      	b.n	8002e5c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002e18:	4b13      	ldr	r3, [pc, #76]	@ (8002e68 <HAL_InitTick+0x64>)
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	4b11      	ldr	r3, [pc, #68]	@ (8002e64 <HAL_InitTick+0x60>)
 8002e1e:	781b      	ldrb	r3, [r3, #0]
 8002e20:	4619      	mov	r1, r3
 8002e22:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002e26:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f000 f965 	bl	80030fe <HAL_SYSTICK_Config>
 8002e34:	4603      	mov	r3, r0
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d001      	beq.n	8002e3e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e00e      	b.n	8002e5c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2b0f      	cmp	r3, #15
 8002e42:	d80a      	bhi.n	8002e5a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e44:	2200      	movs	r2, #0
 8002e46:	6879      	ldr	r1, [r7, #4]
 8002e48:	f04f 30ff 	mov.w	r0, #4294967295
 8002e4c:	f000 f92f 	bl	80030ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e50:	4a06      	ldr	r2, [pc, #24]	@ (8002e6c <HAL_InitTick+0x68>)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002e56:	2300      	movs	r3, #0
 8002e58:	e000      	b.n	8002e5c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	3708      	adds	r7, #8
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}
 8002e64:	24000060 	.word	0x24000060
 8002e68:	24000024 	.word	0x24000024
 8002e6c:	2400005c 	.word	0x2400005c

08002e70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e70:	b480      	push	{r7}
 8002e72:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002e74:	4b06      	ldr	r3, [pc, #24]	@ (8002e90 <HAL_IncTick+0x20>)
 8002e76:	781b      	ldrb	r3, [r3, #0]
 8002e78:	461a      	mov	r2, r3
 8002e7a:	4b06      	ldr	r3, [pc, #24]	@ (8002e94 <HAL_IncTick+0x24>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4413      	add	r3, r2
 8002e80:	4a04      	ldr	r2, [pc, #16]	@ (8002e94 <HAL_IncTick+0x24>)
 8002e82:	6013      	str	r3, [r2, #0]
}
 8002e84:	bf00      	nop
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr
 8002e8e:	bf00      	nop
 8002e90:	24000060 	.word	0x24000060
 8002e94:	24000aec 	.word	0x24000aec

08002e98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	af00      	add	r7, sp, #0
  return uwTick;
 8002e9c:	4b03      	ldr	r3, [pc, #12]	@ (8002eac <HAL_GetTick+0x14>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr
 8002eaa:	bf00      	nop
 8002eac:	24000aec 	.word	0x24000aec

08002eb0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b084      	sub	sp, #16
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002eb8:	f7ff ffee 	bl	8002e98 <HAL_GetTick>
 8002ebc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ec8:	d005      	beq.n	8002ed6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002eca:	4b0a      	ldr	r3, [pc, #40]	@ (8002ef4 <HAL_Delay+0x44>)
 8002ecc:	781b      	ldrb	r3, [r3, #0]
 8002ece:	461a      	mov	r2, r3
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	4413      	add	r3, r2
 8002ed4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002ed6:	bf00      	nop
 8002ed8:	f7ff ffde 	bl	8002e98 <HAL_GetTick>
 8002edc:	4602      	mov	r2, r0
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	1ad3      	subs	r3, r2, r3
 8002ee2:	68fa      	ldr	r2, [r7, #12]
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	d8f7      	bhi.n	8002ed8 <HAL_Delay+0x28>
  {
  }
}
 8002ee8:	bf00      	nop
 8002eea:	bf00      	nop
 8002eec:	3710      	adds	r7, #16
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}
 8002ef2:	bf00      	nop
 8002ef4:	24000060 	.word	0x24000060

08002ef8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b085      	sub	sp, #20
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	f003 0307 	and.w	r3, r3, #7
 8002f06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f08:	4b0b      	ldr	r3, [pc, #44]	@ (8002f38 <__NVIC_SetPriorityGrouping+0x40>)
 8002f0a:	68db      	ldr	r3, [r3, #12]
 8002f0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f0e:	68ba      	ldr	r2, [r7, #8]
 8002f10:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002f14:	4013      	ands	r3, r2
 8002f16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002f20:	4b06      	ldr	r3, [pc, #24]	@ (8002f3c <__NVIC_SetPriorityGrouping+0x44>)
 8002f22:	4313      	orrs	r3, r2
 8002f24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f26:	4a04      	ldr	r2, [pc, #16]	@ (8002f38 <__NVIC_SetPriorityGrouping+0x40>)
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	60d3      	str	r3, [r2, #12]
}
 8002f2c:	bf00      	nop
 8002f2e:	3714      	adds	r7, #20
 8002f30:	46bd      	mov	sp, r7
 8002f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f36:	4770      	bx	lr
 8002f38:	e000ed00 	.word	0xe000ed00
 8002f3c:	05fa0000 	.word	0x05fa0000

08002f40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f40:	b480      	push	{r7}
 8002f42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f44:	4b04      	ldr	r3, [pc, #16]	@ (8002f58 <__NVIC_GetPriorityGrouping+0x18>)
 8002f46:	68db      	ldr	r3, [r3, #12]
 8002f48:	0a1b      	lsrs	r3, r3, #8
 8002f4a:	f003 0307 	and.w	r3, r3, #7
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	46bd      	mov	sp, r7
 8002f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f56:	4770      	bx	lr
 8002f58:	e000ed00 	.word	0xe000ed00

08002f5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b083      	sub	sp, #12
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	4603      	mov	r3, r0
 8002f64:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002f66:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	db0b      	blt.n	8002f86 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f6e:	88fb      	ldrh	r3, [r7, #6]
 8002f70:	f003 021f 	and.w	r2, r3, #31
 8002f74:	4907      	ldr	r1, [pc, #28]	@ (8002f94 <__NVIC_EnableIRQ+0x38>)
 8002f76:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f7a:	095b      	lsrs	r3, r3, #5
 8002f7c:	2001      	movs	r0, #1
 8002f7e:	fa00 f202 	lsl.w	r2, r0, r2
 8002f82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002f86:	bf00      	nop
 8002f88:	370c      	adds	r7, #12
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f90:	4770      	bx	lr
 8002f92:	bf00      	nop
 8002f94:	e000e100 	.word	0xe000e100

08002f98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b083      	sub	sp, #12
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	6039      	str	r1, [r7, #0]
 8002fa2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002fa4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	db0a      	blt.n	8002fc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	b2da      	uxtb	r2, r3
 8002fb0:	490c      	ldr	r1, [pc, #48]	@ (8002fe4 <__NVIC_SetPriority+0x4c>)
 8002fb2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002fb6:	0112      	lsls	r2, r2, #4
 8002fb8:	b2d2      	uxtb	r2, r2
 8002fba:	440b      	add	r3, r1
 8002fbc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002fc0:	e00a      	b.n	8002fd8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	b2da      	uxtb	r2, r3
 8002fc6:	4908      	ldr	r1, [pc, #32]	@ (8002fe8 <__NVIC_SetPriority+0x50>)
 8002fc8:	88fb      	ldrh	r3, [r7, #6]
 8002fca:	f003 030f 	and.w	r3, r3, #15
 8002fce:	3b04      	subs	r3, #4
 8002fd0:	0112      	lsls	r2, r2, #4
 8002fd2:	b2d2      	uxtb	r2, r2
 8002fd4:	440b      	add	r3, r1
 8002fd6:	761a      	strb	r2, [r3, #24]
}
 8002fd8:	bf00      	nop
 8002fda:	370c      	adds	r7, #12
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe2:	4770      	bx	lr
 8002fe4:	e000e100 	.word	0xe000e100
 8002fe8:	e000ed00 	.word	0xe000ed00

08002fec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b089      	sub	sp, #36	@ 0x24
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	60f8      	str	r0, [r7, #12]
 8002ff4:	60b9      	str	r1, [r7, #8]
 8002ff6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	f003 0307 	and.w	r3, r3, #7
 8002ffe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003000:	69fb      	ldr	r3, [r7, #28]
 8003002:	f1c3 0307 	rsb	r3, r3, #7
 8003006:	2b04      	cmp	r3, #4
 8003008:	bf28      	it	cs
 800300a:	2304      	movcs	r3, #4
 800300c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800300e:	69fb      	ldr	r3, [r7, #28]
 8003010:	3304      	adds	r3, #4
 8003012:	2b06      	cmp	r3, #6
 8003014:	d902      	bls.n	800301c <NVIC_EncodePriority+0x30>
 8003016:	69fb      	ldr	r3, [r7, #28]
 8003018:	3b03      	subs	r3, #3
 800301a:	e000      	b.n	800301e <NVIC_EncodePriority+0x32>
 800301c:	2300      	movs	r3, #0
 800301e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003020:	f04f 32ff 	mov.w	r2, #4294967295
 8003024:	69bb      	ldr	r3, [r7, #24]
 8003026:	fa02 f303 	lsl.w	r3, r2, r3
 800302a:	43da      	mvns	r2, r3
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	401a      	ands	r2, r3
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003034:	f04f 31ff 	mov.w	r1, #4294967295
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	fa01 f303 	lsl.w	r3, r1, r3
 800303e:	43d9      	mvns	r1, r3
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003044:	4313      	orrs	r3, r2
         );
}
 8003046:	4618      	mov	r0, r3
 8003048:	3724      	adds	r7, #36	@ 0x24
 800304a:	46bd      	mov	sp, r7
 800304c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003050:	4770      	bx	lr
	...

08003054 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b082      	sub	sp, #8
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	3b01      	subs	r3, #1
 8003060:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003064:	d301      	bcc.n	800306a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003066:	2301      	movs	r3, #1
 8003068:	e00f      	b.n	800308a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800306a:	4a0a      	ldr	r2, [pc, #40]	@ (8003094 <SysTick_Config+0x40>)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	3b01      	subs	r3, #1
 8003070:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003072:	210f      	movs	r1, #15
 8003074:	f04f 30ff 	mov.w	r0, #4294967295
 8003078:	f7ff ff8e 	bl	8002f98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800307c:	4b05      	ldr	r3, [pc, #20]	@ (8003094 <SysTick_Config+0x40>)
 800307e:	2200      	movs	r2, #0
 8003080:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003082:	4b04      	ldr	r3, [pc, #16]	@ (8003094 <SysTick_Config+0x40>)
 8003084:	2207      	movs	r2, #7
 8003086:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003088:	2300      	movs	r3, #0
}
 800308a:	4618      	mov	r0, r3
 800308c:	3708      	adds	r7, #8
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}
 8003092:	bf00      	nop
 8003094:	e000e010 	.word	0xe000e010

08003098 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b082      	sub	sp, #8
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80030a0:	6878      	ldr	r0, [r7, #4]
 80030a2:	f7ff ff29 	bl	8002ef8 <__NVIC_SetPriorityGrouping>
}
 80030a6:	bf00      	nop
 80030a8:	3708      	adds	r7, #8
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}

080030ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030ae:	b580      	push	{r7, lr}
 80030b0:	b086      	sub	sp, #24
 80030b2:	af00      	add	r7, sp, #0
 80030b4:	4603      	mov	r3, r0
 80030b6:	60b9      	str	r1, [r7, #8]
 80030b8:	607a      	str	r2, [r7, #4]
 80030ba:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80030bc:	f7ff ff40 	bl	8002f40 <__NVIC_GetPriorityGrouping>
 80030c0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030c2:	687a      	ldr	r2, [r7, #4]
 80030c4:	68b9      	ldr	r1, [r7, #8]
 80030c6:	6978      	ldr	r0, [r7, #20]
 80030c8:	f7ff ff90 	bl	8002fec <NVIC_EncodePriority>
 80030cc:	4602      	mov	r2, r0
 80030ce:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80030d2:	4611      	mov	r1, r2
 80030d4:	4618      	mov	r0, r3
 80030d6:	f7ff ff5f 	bl	8002f98 <__NVIC_SetPriority>
}
 80030da:	bf00      	nop
 80030dc:	3718      	adds	r7, #24
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}

080030e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030e2:	b580      	push	{r7, lr}
 80030e4:	b082      	sub	sp, #8
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	4603      	mov	r3, r0
 80030ea:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80030f0:	4618      	mov	r0, r3
 80030f2:	f7ff ff33 	bl	8002f5c <__NVIC_EnableIRQ>
}
 80030f6:	bf00      	nop
 80030f8:	3708      	adds	r7, #8
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}

080030fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030fe:	b580      	push	{r7, lr}
 8003100:	b082      	sub	sp, #8
 8003102:	af00      	add	r7, sp, #0
 8003104:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	f7ff ffa4 	bl	8003054 <SysTick_Config>
 800310c:	4603      	mov	r3, r0
}
 800310e:	4618      	mov	r0, r3
 8003110:	3708      	adds	r7, #8
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}
	...

08003118 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8003118:	b480      	push	{r7}
 800311a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800311c:	f3bf 8f5f 	dmb	sy
}
 8003120:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8003122:	4b07      	ldr	r3, [pc, #28]	@ (8003140 <HAL_MPU_Disable+0x28>)
 8003124:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003126:	4a06      	ldr	r2, [pc, #24]	@ (8003140 <HAL_MPU_Disable+0x28>)
 8003128:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800312c:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800312e:	4b05      	ldr	r3, [pc, #20]	@ (8003144 <HAL_MPU_Disable+0x2c>)
 8003130:	2200      	movs	r2, #0
 8003132:	605a      	str	r2, [r3, #4]
}
 8003134:	bf00      	nop
 8003136:	46bd      	mov	sp, r7
 8003138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313c:	4770      	bx	lr
 800313e:	bf00      	nop
 8003140:	e000ed00 	.word	0xe000ed00
 8003144:	e000ed90 	.word	0xe000ed90

08003148 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8003148:	b480      	push	{r7}
 800314a:	b083      	sub	sp, #12
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8003150:	4a0b      	ldr	r2, [pc, #44]	@ (8003180 <HAL_MPU_Enable+0x38>)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	f043 0301 	orr.w	r3, r3, #1
 8003158:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800315a:	4b0a      	ldr	r3, [pc, #40]	@ (8003184 <HAL_MPU_Enable+0x3c>)
 800315c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800315e:	4a09      	ldr	r2, [pc, #36]	@ (8003184 <HAL_MPU_Enable+0x3c>)
 8003160:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003164:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8003166:	f3bf 8f4f 	dsb	sy
}
 800316a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800316c:	f3bf 8f6f 	isb	sy
}
 8003170:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8003172:	bf00      	nop
 8003174:	370c      	adds	r7, #12
 8003176:	46bd      	mov	sp, r7
 8003178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317c:	4770      	bx	lr
 800317e:	bf00      	nop
 8003180:	e000ed90 	.word	0xe000ed90
 8003184:	e000ed00 	.word	0xe000ed00

08003188 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8003188:	b480      	push	{r7}
 800318a:	b083      	sub	sp, #12
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	785a      	ldrb	r2, [r3, #1]
 8003194:	4b1b      	ldr	r3, [pc, #108]	@ (8003204 <HAL_MPU_ConfigRegion+0x7c>)
 8003196:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8003198:	4b1a      	ldr	r3, [pc, #104]	@ (8003204 <HAL_MPU_ConfigRegion+0x7c>)
 800319a:	691b      	ldr	r3, [r3, #16]
 800319c:	4a19      	ldr	r2, [pc, #100]	@ (8003204 <HAL_MPU_ConfigRegion+0x7c>)
 800319e:	f023 0301 	bic.w	r3, r3, #1
 80031a2:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80031a4:	4a17      	ldr	r2, [pc, #92]	@ (8003204 <HAL_MPU_ConfigRegion+0x7c>)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	7b1b      	ldrb	r3, [r3, #12]
 80031b0:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	7adb      	ldrb	r3, [r3, #11]
 80031b6:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80031b8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	7a9b      	ldrb	r3, [r3, #10]
 80031be:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80031c0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	7b5b      	ldrb	r3, [r3, #13]
 80031c6:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80031c8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	7b9b      	ldrb	r3, [r3, #14]
 80031ce:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80031d0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	7bdb      	ldrb	r3, [r3, #15]
 80031d6:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80031d8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	7a5b      	ldrb	r3, [r3, #9]
 80031de:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80031e0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	7a1b      	ldrb	r3, [r3, #8]
 80031e6:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80031e8:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80031ea:	687a      	ldr	r2, [r7, #4]
 80031ec:	7812      	ldrb	r2, [r2, #0]
 80031ee:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80031f0:	4a04      	ldr	r2, [pc, #16]	@ (8003204 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80031f2:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80031f4:	6113      	str	r3, [r2, #16]
}
 80031f6:	bf00      	nop
 80031f8:	370c      	adds	r7, #12
 80031fa:	46bd      	mov	sp, r7
 80031fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003200:	4770      	bx	lr
 8003202:	bf00      	nop
 8003204:	e000ed90 	.word	0xe000ed90

08003208 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b086      	sub	sp, #24
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8003210:	f7ff fe42 	bl	8002e98 <HAL_GetTick>
 8003214:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d101      	bne.n	8003220 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	e2dc      	b.n	80037da <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003226:	b2db      	uxtb	r3, r3
 8003228:	2b02      	cmp	r3, #2
 800322a:	d008      	beq.n	800323e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2280      	movs	r2, #128	@ 0x80
 8003230:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2200      	movs	r2, #0
 8003236:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	e2cd      	b.n	80037da <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a76      	ldr	r2, [pc, #472]	@ (800341c <HAL_DMA_Abort+0x214>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d04a      	beq.n	80032de <HAL_DMA_Abort+0xd6>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a74      	ldr	r2, [pc, #464]	@ (8003420 <HAL_DMA_Abort+0x218>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d045      	beq.n	80032de <HAL_DMA_Abort+0xd6>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a73      	ldr	r2, [pc, #460]	@ (8003424 <HAL_DMA_Abort+0x21c>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d040      	beq.n	80032de <HAL_DMA_Abort+0xd6>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a71      	ldr	r2, [pc, #452]	@ (8003428 <HAL_DMA_Abort+0x220>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d03b      	beq.n	80032de <HAL_DMA_Abort+0xd6>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a70      	ldr	r2, [pc, #448]	@ (800342c <HAL_DMA_Abort+0x224>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d036      	beq.n	80032de <HAL_DMA_Abort+0xd6>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a6e      	ldr	r2, [pc, #440]	@ (8003430 <HAL_DMA_Abort+0x228>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d031      	beq.n	80032de <HAL_DMA_Abort+0xd6>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a6d      	ldr	r2, [pc, #436]	@ (8003434 <HAL_DMA_Abort+0x22c>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d02c      	beq.n	80032de <HAL_DMA_Abort+0xd6>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a6b      	ldr	r2, [pc, #428]	@ (8003438 <HAL_DMA_Abort+0x230>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d027      	beq.n	80032de <HAL_DMA_Abort+0xd6>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a6a      	ldr	r2, [pc, #424]	@ (800343c <HAL_DMA_Abort+0x234>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d022      	beq.n	80032de <HAL_DMA_Abort+0xd6>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a68      	ldr	r2, [pc, #416]	@ (8003440 <HAL_DMA_Abort+0x238>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d01d      	beq.n	80032de <HAL_DMA_Abort+0xd6>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a67      	ldr	r2, [pc, #412]	@ (8003444 <HAL_DMA_Abort+0x23c>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d018      	beq.n	80032de <HAL_DMA_Abort+0xd6>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a65      	ldr	r2, [pc, #404]	@ (8003448 <HAL_DMA_Abort+0x240>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d013      	beq.n	80032de <HAL_DMA_Abort+0xd6>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a64      	ldr	r2, [pc, #400]	@ (800344c <HAL_DMA_Abort+0x244>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d00e      	beq.n	80032de <HAL_DMA_Abort+0xd6>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a62      	ldr	r2, [pc, #392]	@ (8003450 <HAL_DMA_Abort+0x248>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d009      	beq.n	80032de <HAL_DMA_Abort+0xd6>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a61      	ldr	r2, [pc, #388]	@ (8003454 <HAL_DMA_Abort+0x24c>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d004      	beq.n	80032de <HAL_DMA_Abort+0xd6>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a5f      	ldr	r2, [pc, #380]	@ (8003458 <HAL_DMA_Abort+0x250>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d101      	bne.n	80032e2 <HAL_DMA_Abort+0xda>
 80032de:	2301      	movs	r3, #1
 80032e0:	e000      	b.n	80032e4 <HAL_DMA_Abort+0xdc>
 80032e2:	2300      	movs	r3, #0
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d013      	beq.n	8003310 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f022 021e 	bic.w	r2, r2, #30
 80032f6:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	695a      	ldr	r2, [r3, #20]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003306:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	617b      	str	r3, [r7, #20]
 800330e:	e00a      	b.n	8003326 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f022 020e 	bic.w	r2, r2, #14
 800331e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a3c      	ldr	r2, [pc, #240]	@ (800341c <HAL_DMA_Abort+0x214>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d072      	beq.n	8003416 <HAL_DMA_Abort+0x20e>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a3a      	ldr	r2, [pc, #232]	@ (8003420 <HAL_DMA_Abort+0x218>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d06d      	beq.n	8003416 <HAL_DMA_Abort+0x20e>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a39      	ldr	r2, [pc, #228]	@ (8003424 <HAL_DMA_Abort+0x21c>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d068      	beq.n	8003416 <HAL_DMA_Abort+0x20e>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a37      	ldr	r2, [pc, #220]	@ (8003428 <HAL_DMA_Abort+0x220>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d063      	beq.n	8003416 <HAL_DMA_Abort+0x20e>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a36      	ldr	r2, [pc, #216]	@ (800342c <HAL_DMA_Abort+0x224>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d05e      	beq.n	8003416 <HAL_DMA_Abort+0x20e>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a34      	ldr	r2, [pc, #208]	@ (8003430 <HAL_DMA_Abort+0x228>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d059      	beq.n	8003416 <HAL_DMA_Abort+0x20e>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a33      	ldr	r2, [pc, #204]	@ (8003434 <HAL_DMA_Abort+0x22c>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d054      	beq.n	8003416 <HAL_DMA_Abort+0x20e>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a31      	ldr	r2, [pc, #196]	@ (8003438 <HAL_DMA_Abort+0x230>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d04f      	beq.n	8003416 <HAL_DMA_Abort+0x20e>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a30      	ldr	r2, [pc, #192]	@ (800343c <HAL_DMA_Abort+0x234>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d04a      	beq.n	8003416 <HAL_DMA_Abort+0x20e>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a2e      	ldr	r2, [pc, #184]	@ (8003440 <HAL_DMA_Abort+0x238>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d045      	beq.n	8003416 <HAL_DMA_Abort+0x20e>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a2d      	ldr	r2, [pc, #180]	@ (8003444 <HAL_DMA_Abort+0x23c>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d040      	beq.n	8003416 <HAL_DMA_Abort+0x20e>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a2b      	ldr	r2, [pc, #172]	@ (8003448 <HAL_DMA_Abort+0x240>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d03b      	beq.n	8003416 <HAL_DMA_Abort+0x20e>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a2a      	ldr	r2, [pc, #168]	@ (800344c <HAL_DMA_Abort+0x244>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d036      	beq.n	8003416 <HAL_DMA_Abort+0x20e>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a28      	ldr	r2, [pc, #160]	@ (8003450 <HAL_DMA_Abort+0x248>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d031      	beq.n	8003416 <HAL_DMA_Abort+0x20e>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a27      	ldr	r2, [pc, #156]	@ (8003454 <HAL_DMA_Abort+0x24c>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d02c      	beq.n	8003416 <HAL_DMA_Abort+0x20e>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a25      	ldr	r2, [pc, #148]	@ (8003458 <HAL_DMA_Abort+0x250>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d027      	beq.n	8003416 <HAL_DMA_Abort+0x20e>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a24      	ldr	r2, [pc, #144]	@ (800345c <HAL_DMA_Abort+0x254>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d022      	beq.n	8003416 <HAL_DMA_Abort+0x20e>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a22      	ldr	r2, [pc, #136]	@ (8003460 <HAL_DMA_Abort+0x258>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d01d      	beq.n	8003416 <HAL_DMA_Abort+0x20e>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a21      	ldr	r2, [pc, #132]	@ (8003464 <HAL_DMA_Abort+0x25c>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d018      	beq.n	8003416 <HAL_DMA_Abort+0x20e>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a1f      	ldr	r2, [pc, #124]	@ (8003468 <HAL_DMA_Abort+0x260>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d013      	beq.n	8003416 <HAL_DMA_Abort+0x20e>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a1e      	ldr	r2, [pc, #120]	@ (800346c <HAL_DMA_Abort+0x264>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d00e      	beq.n	8003416 <HAL_DMA_Abort+0x20e>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a1c      	ldr	r2, [pc, #112]	@ (8003470 <HAL_DMA_Abort+0x268>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d009      	beq.n	8003416 <HAL_DMA_Abort+0x20e>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a1b      	ldr	r2, [pc, #108]	@ (8003474 <HAL_DMA_Abort+0x26c>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d004      	beq.n	8003416 <HAL_DMA_Abort+0x20e>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a19      	ldr	r2, [pc, #100]	@ (8003478 <HAL_DMA_Abort+0x270>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d132      	bne.n	800347c <HAL_DMA_Abort+0x274>
 8003416:	2301      	movs	r3, #1
 8003418:	e031      	b.n	800347e <HAL_DMA_Abort+0x276>
 800341a:	bf00      	nop
 800341c:	40020010 	.word	0x40020010
 8003420:	40020028 	.word	0x40020028
 8003424:	40020040 	.word	0x40020040
 8003428:	40020058 	.word	0x40020058
 800342c:	40020070 	.word	0x40020070
 8003430:	40020088 	.word	0x40020088
 8003434:	400200a0 	.word	0x400200a0
 8003438:	400200b8 	.word	0x400200b8
 800343c:	40020410 	.word	0x40020410
 8003440:	40020428 	.word	0x40020428
 8003444:	40020440 	.word	0x40020440
 8003448:	40020458 	.word	0x40020458
 800344c:	40020470 	.word	0x40020470
 8003450:	40020488 	.word	0x40020488
 8003454:	400204a0 	.word	0x400204a0
 8003458:	400204b8 	.word	0x400204b8
 800345c:	58025408 	.word	0x58025408
 8003460:	5802541c 	.word	0x5802541c
 8003464:	58025430 	.word	0x58025430
 8003468:	58025444 	.word	0x58025444
 800346c:	58025458 	.word	0x58025458
 8003470:	5802546c 	.word	0x5802546c
 8003474:	58025480 	.word	0x58025480
 8003478:	58025494 	.word	0x58025494
 800347c:	2300      	movs	r3, #0
 800347e:	2b00      	cmp	r3, #0
 8003480:	d007      	beq.n	8003492 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800348c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003490:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a6d      	ldr	r2, [pc, #436]	@ (800364c <HAL_DMA_Abort+0x444>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d04a      	beq.n	8003532 <HAL_DMA_Abort+0x32a>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a6b      	ldr	r2, [pc, #428]	@ (8003650 <HAL_DMA_Abort+0x448>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d045      	beq.n	8003532 <HAL_DMA_Abort+0x32a>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a6a      	ldr	r2, [pc, #424]	@ (8003654 <HAL_DMA_Abort+0x44c>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d040      	beq.n	8003532 <HAL_DMA_Abort+0x32a>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a68      	ldr	r2, [pc, #416]	@ (8003658 <HAL_DMA_Abort+0x450>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d03b      	beq.n	8003532 <HAL_DMA_Abort+0x32a>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a67      	ldr	r2, [pc, #412]	@ (800365c <HAL_DMA_Abort+0x454>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d036      	beq.n	8003532 <HAL_DMA_Abort+0x32a>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a65      	ldr	r2, [pc, #404]	@ (8003660 <HAL_DMA_Abort+0x458>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d031      	beq.n	8003532 <HAL_DMA_Abort+0x32a>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a64      	ldr	r2, [pc, #400]	@ (8003664 <HAL_DMA_Abort+0x45c>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d02c      	beq.n	8003532 <HAL_DMA_Abort+0x32a>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a62      	ldr	r2, [pc, #392]	@ (8003668 <HAL_DMA_Abort+0x460>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d027      	beq.n	8003532 <HAL_DMA_Abort+0x32a>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a61      	ldr	r2, [pc, #388]	@ (800366c <HAL_DMA_Abort+0x464>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d022      	beq.n	8003532 <HAL_DMA_Abort+0x32a>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a5f      	ldr	r2, [pc, #380]	@ (8003670 <HAL_DMA_Abort+0x468>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d01d      	beq.n	8003532 <HAL_DMA_Abort+0x32a>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a5e      	ldr	r2, [pc, #376]	@ (8003674 <HAL_DMA_Abort+0x46c>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d018      	beq.n	8003532 <HAL_DMA_Abort+0x32a>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a5c      	ldr	r2, [pc, #368]	@ (8003678 <HAL_DMA_Abort+0x470>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d013      	beq.n	8003532 <HAL_DMA_Abort+0x32a>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a5b      	ldr	r2, [pc, #364]	@ (800367c <HAL_DMA_Abort+0x474>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d00e      	beq.n	8003532 <HAL_DMA_Abort+0x32a>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a59      	ldr	r2, [pc, #356]	@ (8003680 <HAL_DMA_Abort+0x478>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d009      	beq.n	8003532 <HAL_DMA_Abort+0x32a>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a58      	ldr	r2, [pc, #352]	@ (8003684 <HAL_DMA_Abort+0x47c>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d004      	beq.n	8003532 <HAL_DMA_Abort+0x32a>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a56      	ldr	r2, [pc, #344]	@ (8003688 <HAL_DMA_Abort+0x480>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d108      	bne.n	8003544 <HAL_DMA_Abort+0x33c>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f022 0201 	bic.w	r2, r2, #1
 8003540:	601a      	str	r2, [r3, #0]
 8003542:	e007      	b.n	8003554 <HAL_DMA_Abort+0x34c>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	681a      	ldr	r2, [r3, #0]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f022 0201 	bic.w	r2, r2, #1
 8003552:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003554:	e013      	b.n	800357e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003556:	f7ff fc9f 	bl	8002e98 <HAL_GetTick>
 800355a:	4602      	mov	r2, r0
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	1ad3      	subs	r3, r2, r3
 8003560:	2b05      	cmp	r3, #5
 8003562:	d90c      	bls.n	800357e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2220      	movs	r2, #32
 8003568:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2203      	movs	r2, #3
 800356e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2200      	movs	r2, #0
 8003576:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	e12d      	b.n	80037da <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f003 0301 	and.w	r3, r3, #1
 8003586:	2b00      	cmp	r3, #0
 8003588:	d1e5      	bne.n	8003556 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a2f      	ldr	r2, [pc, #188]	@ (800364c <HAL_DMA_Abort+0x444>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d04a      	beq.n	800362a <HAL_DMA_Abort+0x422>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a2d      	ldr	r2, [pc, #180]	@ (8003650 <HAL_DMA_Abort+0x448>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d045      	beq.n	800362a <HAL_DMA_Abort+0x422>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a2c      	ldr	r2, [pc, #176]	@ (8003654 <HAL_DMA_Abort+0x44c>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d040      	beq.n	800362a <HAL_DMA_Abort+0x422>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a2a      	ldr	r2, [pc, #168]	@ (8003658 <HAL_DMA_Abort+0x450>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d03b      	beq.n	800362a <HAL_DMA_Abort+0x422>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a29      	ldr	r2, [pc, #164]	@ (800365c <HAL_DMA_Abort+0x454>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d036      	beq.n	800362a <HAL_DMA_Abort+0x422>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a27      	ldr	r2, [pc, #156]	@ (8003660 <HAL_DMA_Abort+0x458>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d031      	beq.n	800362a <HAL_DMA_Abort+0x422>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a26      	ldr	r2, [pc, #152]	@ (8003664 <HAL_DMA_Abort+0x45c>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d02c      	beq.n	800362a <HAL_DMA_Abort+0x422>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a24      	ldr	r2, [pc, #144]	@ (8003668 <HAL_DMA_Abort+0x460>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d027      	beq.n	800362a <HAL_DMA_Abort+0x422>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a23      	ldr	r2, [pc, #140]	@ (800366c <HAL_DMA_Abort+0x464>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d022      	beq.n	800362a <HAL_DMA_Abort+0x422>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a21      	ldr	r2, [pc, #132]	@ (8003670 <HAL_DMA_Abort+0x468>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d01d      	beq.n	800362a <HAL_DMA_Abort+0x422>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a20      	ldr	r2, [pc, #128]	@ (8003674 <HAL_DMA_Abort+0x46c>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d018      	beq.n	800362a <HAL_DMA_Abort+0x422>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a1e      	ldr	r2, [pc, #120]	@ (8003678 <HAL_DMA_Abort+0x470>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d013      	beq.n	800362a <HAL_DMA_Abort+0x422>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a1d      	ldr	r2, [pc, #116]	@ (800367c <HAL_DMA_Abort+0x474>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d00e      	beq.n	800362a <HAL_DMA_Abort+0x422>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a1b      	ldr	r2, [pc, #108]	@ (8003680 <HAL_DMA_Abort+0x478>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d009      	beq.n	800362a <HAL_DMA_Abort+0x422>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a1a      	ldr	r2, [pc, #104]	@ (8003684 <HAL_DMA_Abort+0x47c>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d004      	beq.n	800362a <HAL_DMA_Abort+0x422>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a18      	ldr	r2, [pc, #96]	@ (8003688 <HAL_DMA_Abort+0x480>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d101      	bne.n	800362e <HAL_DMA_Abort+0x426>
 800362a:	2301      	movs	r3, #1
 800362c:	e000      	b.n	8003630 <HAL_DMA_Abort+0x428>
 800362e:	2300      	movs	r3, #0
 8003630:	2b00      	cmp	r3, #0
 8003632:	d02b      	beq.n	800368c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003638:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800363e:	f003 031f 	and.w	r3, r3, #31
 8003642:	223f      	movs	r2, #63	@ 0x3f
 8003644:	409a      	lsls	r2, r3
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	609a      	str	r2, [r3, #8]
 800364a:	e02a      	b.n	80036a2 <HAL_DMA_Abort+0x49a>
 800364c:	40020010 	.word	0x40020010
 8003650:	40020028 	.word	0x40020028
 8003654:	40020040 	.word	0x40020040
 8003658:	40020058 	.word	0x40020058
 800365c:	40020070 	.word	0x40020070
 8003660:	40020088 	.word	0x40020088
 8003664:	400200a0 	.word	0x400200a0
 8003668:	400200b8 	.word	0x400200b8
 800366c:	40020410 	.word	0x40020410
 8003670:	40020428 	.word	0x40020428
 8003674:	40020440 	.word	0x40020440
 8003678:	40020458 	.word	0x40020458
 800367c:	40020470 	.word	0x40020470
 8003680:	40020488 	.word	0x40020488
 8003684:	400204a0 	.word	0x400204a0
 8003688:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003690:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003696:	f003 031f 	and.w	r3, r3, #31
 800369a:	2201      	movs	r2, #1
 800369c:	409a      	lsls	r2, r3
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a4f      	ldr	r2, [pc, #316]	@ (80037e4 <HAL_DMA_Abort+0x5dc>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d072      	beq.n	8003792 <HAL_DMA_Abort+0x58a>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a4d      	ldr	r2, [pc, #308]	@ (80037e8 <HAL_DMA_Abort+0x5e0>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d06d      	beq.n	8003792 <HAL_DMA_Abort+0x58a>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a4c      	ldr	r2, [pc, #304]	@ (80037ec <HAL_DMA_Abort+0x5e4>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d068      	beq.n	8003792 <HAL_DMA_Abort+0x58a>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a4a      	ldr	r2, [pc, #296]	@ (80037f0 <HAL_DMA_Abort+0x5e8>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d063      	beq.n	8003792 <HAL_DMA_Abort+0x58a>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a49      	ldr	r2, [pc, #292]	@ (80037f4 <HAL_DMA_Abort+0x5ec>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d05e      	beq.n	8003792 <HAL_DMA_Abort+0x58a>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a47      	ldr	r2, [pc, #284]	@ (80037f8 <HAL_DMA_Abort+0x5f0>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d059      	beq.n	8003792 <HAL_DMA_Abort+0x58a>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a46      	ldr	r2, [pc, #280]	@ (80037fc <HAL_DMA_Abort+0x5f4>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d054      	beq.n	8003792 <HAL_DMA_Abort+0x58a>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a44      	ldr	r2, [pc, #272]	@ (8003800 <HAL_DMA_Abort+0x5f8>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d04f      	beq.n	8003792 <HAL_DMA_Abort+0x58a>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a43      	ldr	r2, [pc, #268]	@ (8003804 <HAL_DMA_Abort+0x5fc>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d04a      	beq.n	8003792 <HAL_DMA_Abort+0x58a>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a41      	ldr	r2, [pc, #260]	@ (8003808 <HAL_DMA_Abort+0x600>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d045      	beq.n	8003792 <HAL_DMA_Abort+0x58a>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a40      	ldr	r2, [pc, #256]	@ (800380c <HAL_DMA_Abort+0x604>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d040      	beq.n	8003792 <HAL_DMA_Abort+0x58a>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a3e      	ldr	r2, [pc, #248]	@ (8003810 <HAL_DMA_Abort+0x608>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d03b      	beq.n	8003792 <HAL_DMA_Abort+0x58a>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a3d      	ldr	r2, [pc, #244]	@ (8003814 <HAL_DMA_Abort+0x60c>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d036      	beq.n	8003792 <HAL_DMA_Abort+0x58a>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a3b      	ldr	r2, [pc, #236]	@ (8003818 <HAL_DMA_Abort+0x610>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d031      	beq.n	8003792 <HAL_DMA_Abort+0x58a>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a3a      	ldr	r2, [pc, #232]	@ (800381c <HAL_DMA_Abort+0x614>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d02c      	beq.n	8003792 <HAL_DMA_Abort+0x58a>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a38      	ldr	r2, [pc, #224]	@ (8003820 <HAL_DMA_Abort+0x618>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d027      	beq.n	8003792 <HAL_DMA_Abort+0x58a>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a37      	ldr	r2, [pc, #220]	@ (8003824 <HAL_DMA_Abort+0x61c>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d022      	beq.n	8003792 <HAL_DMA_Abort+0x58a>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a35      	ldr	r2, [pc, #212]	@ (8003828 <HAL_DMA_Abort+0x620>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d01d      	beq.n	8003792 <HAL_DMA_Abort+0x58a>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a34      	ldr	r2, [pc, #208]	@ (800382c <HAL_DMA_Abort+0x624>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d018      	beq.n	8003792 <HAL_DMA_Abort+0x58a>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a32      	ldr	r2, [pc, #200]	@ (8003830 <HAL_DMA_Abort+0x628>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d013      	beq.n	8003792 <HAL_DMA_Abort+0x58a>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a31      	ldr	r2, [pc, #196]	@ (8003834 <HAL_DMA_Abort+0x62c>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d00e      	beq.n	8003792 <HAL_DMA_Abort+0x58a>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a2f      	ldr	r2, [pc, #188]	@ (8003838 <HAL_DMA_Abort+0x630>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d009      	beq.n	8003792 <HAL_DMA_Abort+0x58a>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a2e      	ldr	r2, [pc, #184]	@ (800383c <HAL_DMA_Abort+0x634>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d004      	beq.n	8003792 <HAL_DMA_Abort+0x58a>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a2c      	ldr	r2, [pc, #176]	@ (8003840 <HAL_DMA_Abort+0x638>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d101      	bne.n	8003796 <HAL_DMA_Abort+0x58e>
 8003792:	2301      	movs	r3, #1
 8003794:	e000      	b.n	8003798 <HAL_DMA_Abort+0x590>
 8003796:	2300      	movs	r3, #0
 8003798:	2b00      	cmp	r3, #0
 800379a:	d015      	beq.n	80037c8 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80037a0:	687a      	ldr	r2, [r7, #4]
 80037a2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80037a4:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d00c      	beq.n	80037c8 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80037b2:	681a      	ldr	r2, [r3, #0]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80037b8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80037bc:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037c2:	687a      	ldr	r2, [r7, #4]
 80037c4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80037c6:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2201      	movs	r2, #1
 80037cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2200      	movs	r2, #0
 80037d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 80037d8:	2300      	movs	r3, #0
}
 80037da:	4618      	mov	r0, r3
 80037dc:	3718      	adds	r7, #24
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}
 80037e2:	bf00      	nop
 80037e4:	40020010 	.word	0x40020010
 80037e8:	40020028 	.word	0x40020028
 80037ec:	40020040 	.word	0x40020040
 80037f0:	40020058 	.word	0x40020058
 80037f4:	40020070 	.word	0x40020070
 80037f8:	40020088 	.word	0x40020088
 80037fc:	400200a0 	.word	0x400200a0
 8003800:	400200b8 	.word	0x400200b8
 8003804:	40020410 	.word	0x40020410
 8003808:	40020428 	.word	0x40020428
 800380c:	40020440 	.word	0x40020440
 8003810:	40020458 	.word	0x40020458
 8003814:	40020470 	.word	0x40020470
 8003818:	40020488 	.word	0x40020488
 800381c:	400204a0 	.word	0x400204a0
 8003820:	400204b8 	.word	0x400204b8
 8003824:	58025408 	.word	0x58025408
 8003828:	5802541c 	.word	0x5802541c
 800382c:	58025430 	.word	0x58025430
 8003830:	58025444 	.word	0x58025444
 8003834:	58025458 	.word	0x58025458
 8003838:	5802546c 	.word	0x5802546c
 800383c:	58025480 	.word	0x58025480
 8003840:	58025494 	.word	0x58025494

08003844 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b084      	sub	sp, #16
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d101      	bne.n	8003856 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	e237      	b.n	8003cc6 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800385c:	b2db      	uxtb	r3, r3
 800385e:	2b02      	cmp	r3, #2
 8003860:	d004      	beq.n	800386c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2280      	movs	r2, #128	@ 0x80
 8003866:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003868:	2301      	movs	r3, #1
 800386a:	e22c      	b.n	8003cc6 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a5c      	ldr	r2, [pc, #368]	@ (80039e4 <HAL_DMA_Abort_IT+0x1a0>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d04a      	beq.n	800390c <HAL_DMA_Abort_IT+0xc8>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a5b      	ldr	r2, [pc, #364]	@ (80039e8 <HAL_DMA_Abort_IT+0x1a4>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d045      	beq.n	800390c <HAL_DMA_Abort_IT+0xc8>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a59      	ldr	r2, [pc, #356]	@ (80039ec <HAL_DMA_Abort_IT+0x1a8>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d040      	beq.n	800390c <HAL_DMA_Abort_IT+0xc8>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a58      	ldr	r2, [pc, #352]	@ (80039f0 <HAL_DMA_Abort_IT+0x1ac>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d03b      	beq.n	800390c <HAL_DMA_Abort_IT+0xc8>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a56      	ldr	r2, [pc, #344]	@ (80039f4 <HAL_DMA_Abort_IT+0x1b0>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d036      	beq.n	800390c <HAL_DMA_Abort_IT+0xc8>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a55      	ldr	r2, [pc, #340]	@ (80039f8 <HAL_DMA_Abort_IT+0x1b4>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d031      	beq.n	800390c <HAL_DMA_Abort_IT+0xc8>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a53      	ldr	r2, [pc, #332]	@ (80039fc <HAL_DMA_Abort_IT+0x1b8>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d02c      	beq.n	800390c <HAL_DMA_Abort_IT+0xc8>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a52      	ldr	r2, [pc, #328]	@ (8003a00 <HAL_DMA_Abort_IT+0x1bc>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d027      	beq.n	800390c <HAL_DMA_Abort_IT+0xc8>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a50      	ldr	r2, [pc, #320]	@ (8003a04 <HAL_DMA_Abort_IT+0x1c0>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d022      	beq.n	800390c <HAL_DMA_Abort_IT+0xc8>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a4f      	ldr	r2, [pc, #316]	@ (8003a08 <HAL_DMA_Abort_IT+0x1c4>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d01d      	beq.n	800390c <HAL_DMA_Abort_IT+0xc8>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a4d      	ldr	r2, [pc, #308]	@ (8003a0c <HAL_DMA_Abort_IT+0x1c8>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d018      	beq.n	800390c <HAL_DMA_Abort_IT+0xc8>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a4c      	ldr	r2, [pc, #304]	@ (8003a10 <HAL_DMA_Abort_IT+0x1cc>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d013      	beq.n	800390c <HAL_DMA_Abort_IT+0xc8>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a4a      	ldr	r2, [pc, #296]	@ (8003a14 <HAL_DMA_Abort_IT+0x1d0>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d00e      	beq.n	800390c <HAL_DMA_Abort_IT+0xc8>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a49      	ldr	r2, [pc, #292]	@ (8003a18 <HAL_DMA_Abort_IT+0x1d4>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d009      	beq.n	800390c <HAL_DMA_Abort_IT+0xc8>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a47      	ldr	r2, [pc, #284]	@ (8003a1c <HAL_DMA_Abort_IT+0x1d8>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d004      	beq.n	800390c <HAL_DMA_Abort_IT+0xc8>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a46      	ldr	r2, [pc, #280]	@ (8003a20 <HAL_DMA_Abort_IT+0x1dc>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d101      	bne.n	8003910 <HAL_DMA_Abort_IT+0xcc>
 800390c:	2301      	movs	r3, #1
 800390e:	e000      	b.n	8003912 <HAL_DMA_Abort_IT+0xce>
 8003910:	2300      	movs	r3, #0
 8003912:	2b00      	cmp	r3, #0
 8003914:	f000 8086 	beq.w	8003a24 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2204      	movs	r2, #4
 800391c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a2f      	ldr	r2, [pc, #188]	@ (80039e4 <HAL_DMA_Abort_IT+0x1a0>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d04a      	beq.n	80039c0 <HAL_DMA_Abort_IT+0x17c>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a2e      	ldr	r2, [pc, #184]	@ (80039e8 <HAL_DMA_Abort_IT+0x1a4>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d045      	beq.n	80039c0 <HAL_DMA_Abort_IT+0x17c>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a2c      	ldr	r2, [pc, #176]	@ (80039ec <HAL_DMA_Abort_IT+0x1a8>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d040      	beq.n	80039c0 <HAL_DMA_Abort_IT+0x17c>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a2b      	ldr	r2, [pc, #172]	@ (80039f0 <HAL_DMA_Abort_IT+0x1ac>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d03b      	beq.n	80039c0 <HAL_DMA_Abort_IT+0x17c>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a29      	ldr	r2, [pc, #164]	@ (80039f4 <HAL_DMA_Abort_IT+0x1b0>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d036      	beq.n	80039c0 <HAL_DMA_Abort_IT+0x17c>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a28      	ldr	r2, [pc, #160]	@ (80039f8 <HAL_DMA_Abort_IT+0x1b4>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d031      	beq.n	80039c0 <HAL_DMA_Abort_IT+0x17c>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a26      	ldr	r2, [pc, #152]	@ (80039fc <HAL_DMA_Abort_IT+0x1b8>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d02c      	beq.n	80039c0 <HAL_DMA_Abort_IT+0x17c>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a25      	ldr	r2, [pc, #148]	@ (8003a00 <HAL_DMA_Abort_IT+0x1bc>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d027      	beq.n	80039c0 <HAL_DMA_Abort_IT+0x17c>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a23      	ldr	r2, [pc, #140]	@ (8003a04 <HAL_DMA_Abort_IT+0x1c0>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d022      	beq.n	80039c0 <HAL_DMA_Abort_IT+0x17c>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a22      	ldr	r2, [pc, #136]	@ (8003a08 <HAL_DMA_Abort_IT+0x1c4>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d01d      	beq.n	80039c0 <HAL_DMA_Abort_IT+0x17c>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a20      	ldr	r2, [pc, #128]	@ (8003a0c <HAL_DMA_Abort_IT+0x1c8>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d018      	beq.n	80039c0 <HAL_DMA_Abort_IT+0x17c>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a1f      	ldr	r2, [pc, #124]	@ (8003a10 <HAL_DMA_Abort_IT+0x1cc>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d013      	beq.n	80039c0 <HAL_DMA_Abort_IT+0x17c>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a1d      	ldr	r2, [pc, #116]	@ (8003a14 <HAL_DMA_Abort_IT+0x1d0>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d00e      	beq.n	80039c0 <HAL_DMA_Abort_IT+0x17c>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a1c      	ldr	r2, [pc, #112]	@ (8003a18 <HAL_DMA_Abort_IT+0x1d4>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d009      	beq.n	80039c0 <HAL_DMA_Abort_IT+0x17c>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a1a      	ldr	r2, [pc, #104]	@ (8003a1c <HAL_DMA_Abort_IT+0x1d8>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d004      	beq.n	80039c0 <HAL_DMA_Abort_IT+0x17c>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a19      	ldr	r2, [pc, #100]	@ (8003a20 <HAL_DMA_Abort_IT+0x1dc>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d108      	bne.n	80039d2 <HAL_DMA_Abort_IT+0x18e>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f022 0201 	bic.w	r2, r2, #1
 80039ce:	601a      	str	r2, [r3, #0]
 80039d0:	e178      	b.n	8003cc4 <HAL_DMA_Abort_IT+0x480>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	681a      	ldr	r2, [r3, #0]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f022 0201 	bic.w	r2, r2, #1
 80039e0:	601a      	str	r2, [r3, #0]
 80039e2:	e16f      	b.n	8003cc4 <HAL_DMA_Abort_IT+0x480>
 80039e4:	40020010 	.word	0x40020010
 80039e8:	40020028 	.word	0x40020028
 80039ec:	40020040 	.word	0x40020040
 80039f0:	40020058 	.word	0x40020058
 80039f4:	40020070 	.word	0x40020070
 80039f8:	40020088 	.word	0x40020088
 80039fc:	400200a0 	.word	0x400200a0
 8003a00:	400200b8 	.word	0x400200b8
 8003a04:	40020410 	.word	0x40020410
 8003a08:	40020428 	.word	0x40020428
 8003a0c:	40020440 	.word	0x40020440
 8003a10:	40020458 	.word	0x40020458
 8003a14:	40020470 	.word	0x40020470
 8003a18:	40020488 	.word	0x40020488
 8003a1c:	400204a0 	.word	0x400204a0
 8003a20:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	681a      	ldr	r2, [r3, #0]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f022 020e 	bic.w	r2, r2, #14
 8003a32:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a6c      	ldr	r2, [pc, #432]	@ (8003bec <HAL_DMA_Abort_IT+0x3a8>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d04a      	beq.n	8003ad4 <HAL_DMA_Abort_IT+0x290>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a6b      	ldr	r2, [pc, #428]	@ (8003bf0 <HAL_DMA_Abort_IT+0x3ac>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d045      	beq.n	8003ad4 <HAL_DMA_Abort_IT+0x290>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a69      	ldr	r2, [pc, #420]	@ (8003bf4 <HAL_DMA_Abort_IT+0x3b0>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d040      	beq.n	8003ad4 <HAL_DMA_Abort_IT+0x290>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a68      	ldr	r2, [pc, #416]	@ (8003bf8 <HAL_DMA_Abort_IT+0x3b4>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d03b      	beq.n	8003ad4 <HAL_DMA_Abort_IT+0x290>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a66      	ldr	r2, [pc, #408]	@ (8003bfc <HAL_DMA_Abort_IT+0x3b8>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d036      	beq.n	8003ad4 <HAL_DMA_Abort_IT+0x290>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a65      	ldr	r2, [pc, #404]	@ (8003c00 <HAL_DMA_Abort_IT+0x3bc>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d031      	beq.n	8003ad4 <HAL_DMA_Abort_IT+0x290>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a63      	ldr	r2, [pc, #396]	@ (8003c04 <HAL_DMA_Abort_IT+0x3c0>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d02c      	beq.n	8003ad4 <HAL_DMA_Abort_IT+0x290>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a62      	ldr	r2, [pc, #392]	@ (8003c08 <HAL_DMA_Abort_IT+0x3c4>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d027      	beq.n	8003ad4 <HAL_DMA_Abort_IT+0x290>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a60      	ldr	r2, [pc, #384]	@ (8003c0c <HAL_DMA_Abort_IT+0x3c8>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d022      	beq.n	8003ad4 <HAL_DMA_Abort_IT+0x290>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a5f      	ldr	r2, [pc, #380]	@ (8003c10 <HAL_DMA_Abort_IT+0x3cc>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d01d      	beq.n	8003ad4 <HAL_DMA_Abort_IT+0x290>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a5d      	ldr	r2, [pc, #372]	@ (8003c14 <HAL_DMA_Abort_IT+0x3d0>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d018      	beq.n	8003ad4 <HAL_DMA_Abort_IT+0x290>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a5c      	ldr	r2, [pc, #368]	@ (8003c18 <HAL_DMA_Abort_IT+0x3d4>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d013      	beq.n	8003ad4 <HAL_DMA_Abort_IT+0x290>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a5a      	ldr	r2, [pc, #360]	@ (8003c1c <HAL_DMA_Abort_IT+0x3d8>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d00e      	beq.n	8003ad4 <HAL_DMA_Abort_IT+0x290>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a59      	ldr	r2, [pc, #356]	@ (8003c20 <HAL_DMA_Abort_IT+0x3dc>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d009      	beq.n	8003ad4 <HAL_DMA_Abort_IT+0x290>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a57      	ldr	r2, [pc, #348]	@ (8003c24 <HAL_DMA_Abort_IT+0x3e0>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d004      	beq.n	8003ad4 <HAL_DMA_Abort_IT+0x290>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a56      	ldr	r2, [pc, #344]	@ (8003c28 <HAL_DMA_Abort_IT+0x3e4>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d108      	bne.n	8003ae6 <HAL_DMA_Abort_IT+0x2a2>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	681a      	ldr	r2, [r3, #0]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f022 0201 	bic.w	r2, r2, #1
 8003ae2:	601a      	str	r2, [r3, #0]
 8003ae4:	e007      	b.n	8003af6 <HAL_DMA_Abort_IT+0x2b2>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	681a      	ldr	r2, [r3, #0]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f022 0201 	bic.w	r2, r2, #1
 8003af4:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a3c      	ldr	r2, [pc, #240]	@ (8003bec <HAL_DMA_Abort_IT+0x3a8>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d072      	beq.n	8003be6 <HAL_DMA_Abort_IT+0x3a2>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a3a      	ldr	r2, [pc, #232]	@ (8003bf0 <HAL_DMA_Abort_IT+0x3ac>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d06d      	beq.n	8003be6 <HAL_DMA_Abort_IT+0x3a2>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a39      	ldr	r2, [pc, #228]	@ (8003bf4 <HAL_DMA_Abort_IT+0x3b0>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d068      	beq.n	8003be6 <HAL_DMA_Abort_IT+0x3a2>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a37      	ldr	r2, [pc, #220]	@ (8003bf8 <HAL_DMA_Abort_IT+0x3b4>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d063      	beq.n	8003be6 <HAL_DMA_Abort_IT+0x3a2>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a36      	ldr	r2, [pc, #216]	@ (8003bfc <HAL_DMA_Abort_IT+0x3b8>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d05e      	beq.n	8003be6 <HAL_DMA_Abort_IT+0x3a2>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a34      	ldr	r2, [pc, #208]	@ (8003c00 <HAL_DMA_Abort_IT+0x3bc>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d059      	beq.n	8003be6 <HAL_DMA_Abort_IT+0x3a2>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a33      	ldr	r2, [pc, #204]	@ (8003c04 <HAL_DMA_Abort_IT+0x3c0>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d054      	beq.n	8003be6 <HAL_DMA_Abort_IT+0x3a2>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a31      	ldr	r2, [pc, #196]	@ (8003c08 <HAL_DMA_Abort_IT+0x3c4>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d04f      	beq.n	8003be6 <HAL_DMA_Abort_IT+0x3a2>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a30      	ldr	r2, [pc, #192]	@ (8003c0c <HAL_DMA_Abort_IT+0x3c8>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d04a      	beq.n	8003be6 <HAL_DMA_Abort_IT+0x3a2>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a2e      	ldr	r2, [pc, #184]	@ (8003c10 <HAL_DMA_Abort_IT+0x3cc>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d045      	beq.n	8003be6 <HAL_DMA_Abort_IT+0x3a2>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a2d      	ldr	r2, [pc, #180]	@ (8003c14 <HAL_DMA_Abort_IT+0x3d0>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d040      	beq.n	8003be6 <HAL_DMA_Abort_IT+0x3a2>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a2b      	ldr	r2, [pc, #172]	@ (8003c18 <HAL_DMA_Abort_IT+0x3d4>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d03b      	beq.n	8003be6 <HAL_DMA_Abort_IT+0x3a2>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a2a      	ldr	r2, [pc, #168]	@ (8003c1c <HAL_DMA_Abort_IT+0x3d8>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d036      	beq.n	8003be6 <HAL_DMA_Abort_IT+0x3a2>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a28      	ldr	r2, [pc, #160]	@ (8003c20 <HAL_DMA_Abort_IT+0x3dc>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d031      	beq.n	8003be6 <HAL_DMA_Abort_IT+0x3a2>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a27      	ldr	r2, [pc, #156]	@ (8003c24 <HAL_DMA_Abort_IT+0x3e0>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d02c      	beq.n	8003be6 <HAL_DMA_Abort_IT+0x3a2>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a25      	ldr	r2, [pc, #148]	@ (8003c28 <HAL_DMA_Abort_IT+0x3e4>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d027      	beq.n	8003be6 <HAL_DMA_Abort_IT+0x3a2>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a24      	ldr	r2, [pc, #144]	@ (8003c2c <HAL_DMA_Abort_IT+0x3e8>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d022      	beq.n	8003be6 <HAL_DMA_Abort_IT+0x3a2>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a22      	ldr	r2, [pc, #136]	@ (8003c30 <HAL_DMA_Abort_IT+0x3ec>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d01d      	beq.n	8003be6 <HAL_DMA_Abort_IT+0x3a2>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a21      	ldr	r2, [pc, #132]	@ (8003c34 <HAL_DMA_Abort_IT+0x3f0>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d018      	beq.n	8003be6 <HAL_DMA_Abort_IT+0x3a2>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a1f      	ldr	r2, [pc, #124]	@ (8003c38 <HAL_DMA_Abort_IT+0x3f4>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d013      	beq.n	8003be6 <HAL_DMA_Abort_IT+0x3a2>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a1e      	ldr	r2, [pc, #120]	@ (8003c3c <HAL_DMA_Abort_IT+0x3f8>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d00e      	beq.n	8003be6 <HAL_DMA_Abort_IT+0x3a2>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a1c      	ldr	r2, [pc, #112]	@ (8003c40 <HAL_DMA_Abort_IT+0x3fc>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d009      	beq.n	8003be6 <HAL_DMA_Abort_IT+0x3a2>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a1b      	ldr	r2, [pc, #108]	@ (8003c44 <HAL_DMA_Abort_IT+0x400>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d004      	beq.n	8003be6 <HAL_DMA_Abort_IT+0x3a2>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a19      	ldr	r2, [pc, #100]	@ (8003c48 <HAL_DMA_Abort_IT+0x404>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d132      	bne.n	8003c4c <HAL_DMA_Abort_IT+0x408>
 8003be6:	2301      	movs	r3, #1
 8003be8:	e031      	b.n	8003c4e <HAL_DMA_Abort_IT+0x40a>
 8003bea:	bf00      	nop
 8003bec:	40020010 	.word	0x40020010
 8003bf0:	40020028 	.word	0x40020028
 8003bf4:	40020040 	.word	0x40020040
 8003bf8:	40020058 	.word	0x40020058
 8003bfc:	40020070 	.word	0x40020070
 8003c00:	40020088 	.word	0x40020088
 8003c04:	400200a0 	.word	0x400200a0
 8003c08:	400200b8 	.word	0x400200b8
 8003c0c:	40020410 	.word	0x40020410
 8003c10:	40020428 	.word	0x40020428
 8003c14:	40020440 	.word	0x40020440
 8003c18:	40020458 	.word	0x40020458
 8003c1c:	40020470 	.word	0x40020470
 8003c20:	40020488 	.word	0x40020488
 8003c24:	400204a0 	.word	0x400204a0
 8003c28:	400204b8 	.word	0x400204b8
 8003c2c:	58025408 	.word	0x58025408
 8003c30:	5802541c 	.word	0x5802541c
 8003c34:	58025430 	.word	0x58025430
 8003c38:	58025444 	.word	0x58025444
 8003c3c:	58025458 	.word	0x58025458
 8003c40:	5802546c 	.word	0x5802546c
 8003c44:	58025480 	.word	0x58025480
 8003c48:	58025494 	.word	0x58025494
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d028      	beq.n	8003ca4 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c5c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003c60:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c66:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c6c:	f003 031f 	and.w	r3, r3, #31
 8003c70:	2201      	movs	r2, #1
 8003c72:	409a      	lsls	r2, r3
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003c7c:	687a      	ldr	r2, [r7, #4]
 8003c7e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003c80:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d00c      	beq.n	8003ca4 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c94:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003c98:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c9e:	687a      	ldr	r2, [r7, #4]
 8003ca0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003ca2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d003      	beq.n	8003cc4 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003cc0:	6878      	ldr	r0, [r7, #4]
 8003cc2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003cc4:	2300      	movs	r3, #0
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	3710      	adds	r7, #16
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}
 8003cce:	bf00      	nop

08003cd0 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b098      	sub	sp, #96	@ 0x60
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8003cd8:	4a84      	ldr	r2, [pc, #528]	@ (8003eec <HAL_FDCAN_Init+0x21c>)
 8003cda:	f107 030c 	add.w	r3, r7, #12
 8003cde:	4611      	mov	r1, r2
 8003ce0:	224c      	movs	r2, #76	@ 0x4c
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f00b faff 	bl	800f2e6 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d101      	bne.n	8003cf2 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	e1c6      	b.n	8004080 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a7e      	ldr	r2, [pc, #504]	@ (8003ef0 <HAL_FDCAN_Init+0x220>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d106      	bne.n	8003d0a <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8003d04:	461a      	mov	r2, r3
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8003d10:	b2db      	uxtb	r3, r3
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d106      	bne.n	8003d24 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f7fc ff4a 	bl	8000bb8 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	699a      	ldr	r2, [r3, #24]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f022 0210 	bic.w	r2, r2, #16
 8003d32:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003d34:	f7ff f8b0 	bl	8002e98 <HAL_GetTick>
 8003d38:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003d3a:	e014      	b.n	8003d66 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003d3c:	f7ff f8ac 	bl	8002e98 <HAL_GetTick>
 8003d40:	4602      	mov	r2, r0
 8003d42:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003d44:	1ad3      	subs	r3, r2, r3
 8003d46:	2b0a      	cmp	r3, #10
 8003d48:	d90d      	bls.n	8003d66 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003d50:	f043 0201 	orr.w	r2, r3, #1
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2203      	movs	r2, #3
 8003d5e:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	e18c      	b.n	8004080 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	699b      	ldr	r3, [r3, #24]
 8003d6c:	f003 0308 	and.w	r3, r3, #8
 8003d70:	2b08      	cmp	r3, #8
 8003d72:	d0e3      	beq.n	8003d3c <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	699a      	ldr	r2, [r3, #24]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f042 0201 	orr.w	r2, r2, #1
 8003d82:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003d84:	f7ff f888 	bl	8002e98 <HAL_GetTick>
 8003d88:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003d8a:	e014      	b.n	8003db6 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003d8c:	f7ff f884 	bl	8002e98 <HAL_GetTick>
 8003d90:	4602      	mov	r2, r0
 8003d92:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003d94:	1ad3      	subs	r3, r2, r3
 8003d96:	2b0a      	cmp	r3, #10
 8003d98:	d90d      	bls.n	8003db6 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003da0:	f043 0201 	orr.w	r2, r3, #1
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2203      	movs	r2, #3
 8003dae:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	e164      	b.n	8004080 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	699b      	ldr	r3, [r3, #24]
 8003dbc:	f003 0301 	and.w	r3, r3, #1
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d0e3      	beq.n	8003d8c <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	699a      	ldr	r2, [r3, #24]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f042 0202 	orr.w	r2, r2, #2
 8003dd2:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	7c1b      	ldrb	r3, [r3, #16]
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	d108      	bne.n	8003dee <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	699a      	ldr	r2, [r3, #24]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003dea:	619a      	str	r2, [r3, #24]
 8003dec:	e007      	b.n	8003dfe <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	699a      	ldr	r2, [r3, #24]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003dfc:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	7c5b      	ldrb	r3, [r3, #17]
 8003e02:	2b01      	cmp	r3, #1
 8003e04:	d108      	bne.n	8003e18 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	699a      	ldr	r2, [r3, #24]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003e14:	619a      	str	r2, [r3, #24]
 8003e16:	e007      	b.n	8003e28 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	699a      	ldr	r2, [r3, #24]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003e26:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	7c9b      	ldrb	r3, [r3, #18]
 8003e2c:	2b01      	cmp	r3, #1
 8003e2e:	d108      	bne.n	8003e42 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	699a      	ldr	r2, [r3, #24]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003e3e:	619a      	str	r2, [r3, #24]
 8003e40:	e007      	b.n	8003e52 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	699a      	ldr	r2, [r3, #24]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003e50:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	699b      	ldr	r3, [r3, #24]
 8003e58:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	689a      	ldr	r2, [r3, #8]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	430a      	orrs	r2, r1
 8003e66:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	699a      	ldr	r2, [r3, #24]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8003e76:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	691a      	ldr	r2, [r3, #16]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f022 0210 	bic.w	r2, r2, #16
 8003e86:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	68db      	ldr	r3, [r3, #12]
 8003e8c:	2b01      	cmp	r3, #1
 8003e8e:	d108      	bne.n	8003ea2 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	699a      	ldr	r2, [r3, #24]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f042 0204 	orr.w	r2, r2, #4
 8003e9e:	619a      	str	r2, [r3, #24]
 8003ea0:	e030      	b.n	8003f04 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	68db      	ldr	r3, [r3, #12]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d02c      	beq.n	8003f04 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	68db      	ldr	r3, [r3, #12]
 8003eae:	2b02      	cmp	r3, #2
 8003eb0:	d020      	beq.n	8003ef4 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	699a      	ldr	r2, [r3, #24]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003ec0:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	691a      	ldr	r2, [r3, #16]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f042 0210 	orr.w	r2, r2, #16
 8003ed0:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	68db      	ldr	r3, [r3, #12]
 8003ed6:	2b03      	cmp	r3, #3
 8003ed8:	d114      	bne.n	8003f04 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	699a      	ldr	r2, [r3, #24]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f042 0220 	orr.w	r2, r2, #32
 8003ee8:	619a      	str	r2, [r3, #24]
 8003eea:	e00b      	b.n	8003f04 <HAL_FDCAN_Init+0x234>
 8003eec:	080123c8 	.word	0x080123c8
 8003ef0:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	699a      	ldr	r2, [r3, #24]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f042 0220 	orr.w	r2, r2, #32
 8003f02:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	699b      	ldr	r3, [r3, #24]
 8003f08:	3b01      	subs	r3, #1
 8003f0a:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	69db      	ldr	r3, [r3, #28]
 8003f10:	3b01      	subs	r3, #1
 8003f12:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003f14:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6a1b      	ldr	r3, [r3, #32]
 8003f1a:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003f1c:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	695b      	ldr	r3, [r3, #20]
 8003f24:	3b01      	subs	r3, #1
 8003f26:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003f2c:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003f2e:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003f38:	d115      	bne.n	8003f66 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f3e:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f44:	3b01      	subs	r3, #1
 8003f46:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003f48:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f4e:	3b01      	subs	r3, #1
 8003f50:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8003f52:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f5a:	3b01      	subs	r3, #1
 8003f5c:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003f62:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003f64:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d00a      	beq.n	8003f84 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	430a      	orrs	r2, r1
 8003f80:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f8c:	4413      	add	r3, r2
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d011      	beq.n	8003fb6 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8003f9a:	f023 0107 	bic.w	r1, r3, #7
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003fa2:	009b      	lsls	r3, r3, #2
 8003fa4:	3360      	adds	r3, #96	@ 0x60
 8003fa6:	443b      	add	r3, r7
 8003fa8:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	430a      	orrs	r2, r1
 8003fb2:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d011      	beq.n	8003fe2 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8003fc6:	f023 0107 	bic.w	r1, r3, #7
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fce:	009b      	lsls	r3, r3, #2
 8003fd0:	3360      	adds	r3, #96	@ 0x60
 8003fd2:	443b      	add	r3, r7
 8003fd4:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	430a      	orrs	r2, r1
 8003fde:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d012      	beq.n	8004010 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8003ff2:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ffa:	009b      	lsls	r3, r3, #2
 8003ffc:	3360      	adds	r3, #96	@ 0x60
 8003ffe:	443b      	add	r3, r7
 8004000:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8004004:	011a      	lsls	r2, r3, #4
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	430a      	orrs	r2, r1
 800400c:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004014:	2b00      	cmp	r3, #0
 8004016:	d012      	beq.n	800403e <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004020:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004028:	009b      	lsls	r3, r3, #2
 800402a:	3360      	adds	r3, #96	@ 0x60
 800402c:	443b      	add	r3, r7
 800402e:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8004032:	021a      	lsls	r2, r3, #8
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	430a      	orrs	r2, r1
 800403a:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a11      	ldr	r2, [pc, #68]	@ (8004088 <HAL_FDCAN_Init+0x3b8>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d107      	bne.n	8004058 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	689a      	ldr	r2, [r3, #8]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	f022 0203 	bic.w	r2, r2, #3
 8004056:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2200      	movs	r2, #0
 800405c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2200      	movs	r2, #0
 8004064:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2201      	movs	r2, #1
 800406c:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8004070:	6878      	ldr	r0, [r7, #4]
 8004072:	f000 fe13 	bl	8004c9c <FDCAN_CalcultateRamBlockAddresses>
 8004076:	4603      	mov	r3, r0
 8004078:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 800407c:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 8004080:	4618      	mov	r0, r3
 8004082:	3760      	adds	r7, #96	@ 0x60
 8004084:	46bd      	mov	sp, r7
 8004086:	bd80      	pop	{r7, pc}
 8004088:	4000a000 	.word	0x4000a000

0800408c <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 800408c:	b480      	push	{r7}
 800408e:	b087      	sub	sp, #28
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
 8004094:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800409c:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800409e:	7bfb      	ldrb	r3, [r7, #15]
 80040a0:	2b01      	cmp	r3, #1
 80040a2:	d002      	beq.n	80040aa <HAL_FDCAN_ConfigFilter+0x1e>
 80040a4:	7bfb      	ldrb	r3, [r7, #15]
 80040a6:	2b02      	cmp	r3, #2
 80040a8:	d157      	bne.n	800415a <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d12b      	bne.n	800410a <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	68db      	ldr	r3, [r3, #12]
 80040b6:	2b07      	cmp	r3, #7
 80040b8:	d10d      	bne.n	80040d6 <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	691b      	ldr	r3, [r3, #16]
 80040be:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	69db      	ldr	r3, [r3, #28]
 80040c4:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 80040c6:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 80040cc:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 80040ce:	f043 5360 	orr.w	r3, r3, #939524096	@ 0x38000000
 80040d2:	617b      	str	r3, [r7, #20]
 80040d4:	e00e      	b.n	80040f4 <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	689b      	ldr	r3, [r3, #8]
 80040da:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	68db      	ldr	r3, [r3, #12]
 80040e0:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80040e2:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	691b      	ldr	r3, [r3, #16]
 80040e8:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 80040ea:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80040f0:	4313      	orrs	r3, r2
 80040f2:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	009b      	lsls	r3, r3, #2
 80040fe:	4413      	add	r3, r2
 8004100:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	697a      	ldr	r2, [r7, #20]
 8004106:	601a      	str	r2, [r3, #0]
 8004108:	e025      	b.n	8004156 <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	68db      	ldr	r3, [r3, #12]
 800410e:	075a      	lsls	r2, r3, #29
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	691b      	ldr	r3, [r3, #16]
 8004114:	4313      	orrs	r3, r2
 8004116:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	68db      	ldr	r3, [r3, #12]
 800411c:	2b07      	cmp	r3, #7
 800411e:	d103      	bne.n	8004128 <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	699b      	ldr	r3, [r3, #24]
 8004124:	613b      	str	r3, [r7, #16]
 8004126:	e006      	b.n	8004136 <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	689b      	ldr	r3, [r3, #8]
 800412c:	079a      	lsls	r2, r3, #30
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	695b      	ldr	r3, [r3, #20]
 8004132:	4313      	orrs	r3, r2
 8004134:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	00db      	lsls	r3, r3, #3
 8004140:	4413      	add	r3, r2
 8004142:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	697a      	ldr	r2, [r7, #20]
 8004148:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	3304      	adds	r3, #4
 800414e:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	693a      	ldr	r2, [r7, #16]
 8004154:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8004156:	2300      	movs	r3, #0
 8004158:	e008      	b.n	800416c <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004160:	f043 0202 	orr.w	r2, r3, #2
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 800416a:	2301      	movs	r3, #1
  }
}
 800416c:	4618      	mov	r0, r3
 800416e:	371c      	adds	r7, #28
 8004170:	46bd      	mov	sp, r7
 8004172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004176:	4770      	bx	lr

08004178 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 8004178:	b480      	push	{r7}
 800417a:	b085      	sub	sp, #20
 800417c:	af00      	add	r7, sp, #0
 800417e:	60f8      	str	r0, [r7, #12]
 8004180:	60b9      	str	r1, [r7, #8]
 8004182:	607a      	str	r2, [r7, #4]
 8004184:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800418c:	b2db      	uxtb	r3, r3
 800418e:	2b01      	cmp	r3, #1
 8004190:	d110      	bne.n	80041b4 <HAL_FDCAN_ConfigGlobalFilter+0x3c>
  {
    /* Configure global filter */
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	011a      	lsls	r2, r3, #4
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	009b      	lsls	r3, r3, #2
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 800419a:	431a      	orrs	r2, r3
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	005b      	lsls	r3, r3, #1
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 80041a0:	ea42 0103 	orr.w	r1, r2, r3
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 80041a8:	69ba      	ldr	r2, [r7, #24]
 80041aa:	430a      	orrs	r2, r1
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 80041ac:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
                             (RejectRemoteExt << FDCAN_GFC_RRFE_Pos));

    /* Return function status */
    return HAL_OK;
 80041b0:	2300      	movs	r3, #0
 80041b2:	e008      	b.n	80041c6 <HAL_FDCAN_ConfigGlobalFilter+0x4e>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80041ba:	f043 0204 	orr.w	r2, r3, #4
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 80041c4:	2301      	movs	r3, #1
  }
}
 80041c6:	4618      	mov	r0, r3
 80041c8:	3714      	adds	r7, #20
 80041ca:	46bd      	mov	sp, r7
 80041cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d0:	4770      	bx	lr

080041d2 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80041d2:	b480      	push	{r7}
 80041d4:	b083      	sub	sp, #12
 80041d6:	af00      	add	r7, sp, #0
 80041d8:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80041e0:	b2db      	uxtb	r3, r3
 80041e2:	2b01      	cmp	r3, #1
 80041e4:	d111      	bne.n	800420a <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2202      	movs	r2, #2
 80041ea:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	699a      	ldr	r2, [r3, #24]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f022 0201 	bic.w	r2, r2, #1
 80041fc:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2200      	movs	r2, #0
 8004202:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Return function status */
    return HAL_OK;
 8004206:	2300      	movs	r3, #0
 8004208:	e008      	b.n	800421c <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004210:	f043 0204 	orr.w	r2, r3, #4
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 800421a:	2301      	movs	r3, #1
  }
}
 800421c:	4618      	mov	r0, r3
 800421e:	370c      	adds	r7, #12
 8004220:	46bd      	mov	sp, r7
 8004222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004226:	4770      	bx	lr

08004228 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b086      	sub	sp, #24
 800422c:	af00      	add	r7, sp, #0
 800422e:	60f8      	str	r0, [r7, #12]
 8004230:	60b9      	str	r1, [r7, #8]
 8004232:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800423a:	b2db      	uxtb	r3, r3
 800423c:	2b02      	cmp	r3, #2
 800423e:	d141      	bne.n	80042c4 <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004248:	f003 537c 	and.w	r3, r3, #1056964608	@ 0x3f000000
 800424c:	2b00      	cmp	r3, #0
 800424e:	d109      	bne.n	8004264 <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004256:	f043 0220 	orr.w	r2, r3, #32
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 8004260:	2301      	movs	r3, #1
 8004262:	e038      	b.n	80042d6 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800426c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004270:	2b00      	cmp	r3, #0
 8004272:	d009      	beq.n	8004288 <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800427a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 8004284:	2301      	movs	r3, #1
 8004286:	e026      	b.n	80042d6 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8004290:	0c1b      	lsrs	r3, r3, #16
 8004292:	f003 031f 	and.w	r3, r3, #31
 8004296:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	687a      	ldr	r2, [r7, #4]
 800429c:	68b9      	ldr	r1, [r7, #8]
 800429e:	68f8      	ldr	r0, [r7, #12]
 80042a0:	f000 fe82 	bl	8004fa8 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	2101      	movs	r1, #1
 80042aa:	697a      	ldr	r2, [r7, #20]
 80042ac:	fa01 f202 	lsl.w	r2, r1, r2
 80042b0:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 80042b4:	2201      	movs	r2, #1
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	409a      	lsls	r2, r3
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    }

    /* Return function status */
    return HAL_OK;
 80042c0:	2300      	movs	r3, #0
 80042c2:	e008      	b.n	80042d6 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80042ca:	f043 0208 	orr.w	r2, r3, #8
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 80042d4:	2301      	movs	r3, #1
  }
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	3718      	adds	r7, #24
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}
	...

080042e0 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b08b      	sub	sp, #44	@ 0x2c
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	60f8      	str	r0, [r7, #12]
 80042e8:	60b9      	str	r1, [r7, #8]
 80042ea:	607a      	str	r2, [r7, #4]
 80042ec:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 80042ee:	2300      	movs	r3, #0
 80042f0:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80042f8:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 80042fa:	7efb      	ldrb	r3, [r7, #27]
 80042fc:	2b02      	cmp	r3, #2
 80042fe:	f040 8149 	bne.w	8004594 <HAL_FDCAN_GetRxMessage+0x2b4>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	2b40      	cmp	r3, #64	@ 0x40
 8004306:	d14c      	bne.n	80043a2 <HAL_FDCAN_GetRxMessage+0xc2>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004310:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004314:	2b00      	cmp	r3, #0
 8004316:	d109      	bne.n	800432c <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800431e:	f043 0220 	orr.w	r2, r3, #32
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8004328:	2301      	movs	r3, #1
 800432a:	e13c      	b.n	80045a6 <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004334:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004338:	2b00      	cmp	r3, #0
 800433a:	d109      	bne.n	8004350 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004342:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 800434c:	2301      	movs	r3, #1
 800434e:	e12a      	b.n	80045a6 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004358:	0e1b      	lsrs	r3, r3, #24
 800435a:	f003 0301 	and.w	r3, r3, #1
 800435e:	2b01      	cmp	r3, #1
 8004360:	d10a      	bne.n	8004378 <HAL_FDCAN_GetRxMessage+0x98>
        {
          if (((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800436a:	0fdb      	lsrs	r3, r3, #31
 800436c:	f003 0301 	and.w	r3, r3, #1
 8004370:	2b01      	cmp	r3, #1
 8004372:	d101      	bne.n	8004378 <HAL_FDCAN_GetRxMessage+0x98>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8004374:	2301      	movs	r3, #1
 8004376:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004380:	0a1b      	lsrs	r3, r3, #8
 8004382:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004386:	69fa      	ldr	r2, [r7, #28]
 8004388:	4413      	add	r3, r2
 800438a:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004394:	69f9      	ldr	r1, [r7, #28]
 8004396:	fb01 f303 	mul.w	r3, r1, r3
 800439a:	009b      	lsls	r3, r3, #2
 800439c:	4413      	add	r3, r2
 800439e:	627b      	str	r3, [r7, #36]	@ 0x24
 80043a0:	e068      	b.n	8004474 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	2b41      	cmp	r3, #65	@ 0x41
 80043a6:	d14c      	bne.n	8004442 <HAL_FDCAN_GetRxMessage+0x162>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80043b0:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d109      	bne.n	80043cc <HAL_FDCAN_GetRxMessage+0xec>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80043be:	f043 0220 	orr.w	r2, r3, #32
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 80043c8:	2301      	movs	r3, #1
 80043ca:	e0ec      	b.n	80045a6 <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80043d4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d109      	bne.n	80043f0 <HAL_FDCAN_GetRxMessage+0x110>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80043e2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 80043ec:	2301      	movs	r3, #1
 80043ee:	e0da      	b.n	80045a6 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80043f8:	0e1b      	lsrs	r3, r3, #24
 80043fa:	f003 0301 	and.w	r3, r3, #1
 80043fe:	2b01      	cmp	r3, #1
 8004400:	d10a      	bne.n	8004418 <HAL_FDCAN_GetRxMessage+0x138>
        {
          if (((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800440a:	0fdb      	lsrs	r3, r3, #31
 800440c:	f003 0301 	and.w	r3, r3, #1
 8004410:	2b01      	cmp	r3, #1
 8004412:	d101      	bne.n	8004418 <HAL_FDCAN_GetRxMessage+0x138>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8004414:	2301      	movs	r3, #1
 8004416:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004420:	0a1b      	lsrs	r3, r3, #8
 8004422:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004426:	69fa      	ldr	r2, [r7, #28]
 8004428:	4413      	add	r3, r2
 800442a:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004434:	69f9      	ldr	r1, [r7, #28]
 8004436:	fb01 f303 	mul.w	r3, r1, r3
 800443a:	009b      	lsls	r3, r3, #2
 800443c:	4413      	add	r3, r2
 800443e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004440:	e018      	b.n	8004474 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004446:	68ba      	ldr	r2, [r7, #8]
 8004448:	429a      	cmp	r2, r3
 800444a:	d309      	bcc.n	8004460 <HAL_FDCAN_GetRxMessage+0x180>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004452:	f043 0220 	orr.w	r2, r3, #32
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 800445c:	2301      	movs	r3, #1
 800445e:	e0a2      	b.n	80045a6 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004468:	68b9      	ldr	r1, [r7, #8]
 800446a:	fb01 f303 	mul.w	r3, r1, r3
 800446e:	009b      	lsls	r3, r3, #2
 8004470:	4413      	add	r3, r2
 8004472:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8004474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d107      	bne.n	8004498 <HAL_FDCAN_GetRxMessage+0x1b8>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8004488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	0c9b      	lsrs	r3, r3, #18
 800448e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	601a      	str	r2, [r3, #0]
 8004496:	e005      	b.n	80044a4 <HAL_FDCAN_GetRxMessage+0x1c4>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8004498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80044a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80044b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 80044bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044be:	3304      	adds	r3, #4
 80044c0:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80044c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	b29a      	uxth	r2, r3
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 80044cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	0c1b      	lsrs	r3, r3, #16
 80044d2:	f003 020f 	and.w	r2, r3, #15
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 80044da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 80044e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 80044f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	0e1b      	lsrs	r3, r3, #24
 80044f8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8004500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	0fda      	lsrs	r2, r3, #31
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 800450a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800450c:	3304      	adds	r3, #4
 800450e:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8004510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004512:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8004514:	2300      	movs	r3, #0
 8004516:	623b      	str	r3, [r7, #32]
 8004518:	e00a      	b.n	8004530 <HAL_FDCAN_GetRxMessage+0x250>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 800451a:	697a      	ldr	r2, [r7, #20]
 800451c:	6a3b      	ldr	r3, [r7, #32]
 800451e:	441a      	add	r2, r3
 8004520:	6839      	ldr	r1, [r7, #0]
 8004522:	6a3b      	ldr	r3, [r7, #32]
 8004524:	440b      	add	r3, r1
 8004526:	7812      	ldrb	r2, [r2, #0]
 8004528:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 800452a:	6a3b      	ldr	r3, [r7, #32]
 800452c:	3301      	adds	r3, #1
 800452e:	623b      	str	r3, [r7, #32]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	68db      	ldr	r3, [r3, #12]
 8004534:	4a1f      	ldr	r2, [pc, #124]	@ (80045b4 <HAL_FDCAN_GetRxMessage+0x2d4>)
 8004536:	5cd3      	ldrb	r3, [r2, r3]
 8004538:	461a      	mov	r2, r3
 800453a:	6a3b      	ldr	r3, [r7, #32]
 800453c:	4293      	cmp	r3, r2
 800453e:	d3ec      	bcc.n	800451a <HAL_FDCAN_GetRxMessage+0x23a>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	2b40      	cmp	r3, #64	@ 0x40
 8004544:	d105      	bne.n	8004552 <HAL_FDCAN_GetRxMessage+0x272>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	69fa      	ldr	r2, [r7, #28]
 800454c:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
 8004550:	e01e      	b.n	8004590 <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	2b41      	cmp	r3, #65	@ 0x41
 8004556:	d105      	bne.n	8004564 <HAL_FDCAN_GetRxMessage+0x284>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	69fa      	ldr	r2, [r7, #28]
 800455e:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
 8004562:	e015      	b.n	8004590 <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	2b1f      	cmp	r3, #31
 8004568:	d808      	bhi.n	800457c <HAL_FDCAN_GetRxMessage+0x29c>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1U << RxLocation);
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	2101      	movs	r1, #1
 8004570:	68ba      	ldr	r2, [r7, #8]
 8004572:	fa01 f202 	lsl.w	r2, r1, r2
 8004576:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 800457a:	e009      	b.n	8004590 <HAL_FDCAN_GetRxMessage+0x2b0>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1U << (RxLocation & 0x1FU));
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	f003 021f 	and.w	r2, r3, #31
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	2101      	movs	r1, #1
 8004588:	fa01 f202 	lsl.w	r2, r1, r2
 800458c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8004590:	2300      	movs	r3, #0
 8004592:	e008      	b.n	80045a6 <HAL_FDCAN_GetRxMessage+0x2c6>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800459a:	f043 0208 	orr.w	r2, r3, #8
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 80045a4:	2301      	movs	r3, #1
  }
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	372c      	adds	r7, #44	@ 0x2c
 80045aa:	46bd      	mov	sp, r7
 80045ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b0:	4770      	bx	lr
 80045b2:	bf00      	nop
 80045b4:	08012668 	.word	0x08012668

080045b8 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b087      	sub	sp, #28
 80045bc:	af00      	add	r7, sp, #0
 80045be:	60f8      	str	r0, [r7, #12]
 80045c0:	60b9      	str	r1, [r7, #8]
 80045c2:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80045ca:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80045cc:	7dfb      	ldrb	r3, [r7, #23]
 80045ce:	2b01      	cmp	r3, #1
 80045d0:	d002      	beq.n	80045d8 <HAL_FDCAN_ActivateNotification+0x20>
 80045d2:	7dfb      	ldrb	r3, [r7, #23]
 80045d4:	2b02      	cmp	r3, #2
 80045d6:	d155      	bne.n	8004684 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	4013      	ands	r3, r2
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d108      	bne.n	80045f8 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f042 0201 	orr.w	r2, r2, #1
 80045f4:	65da      	str	r2, [r3, #92]	@ 0x5c
 80045f6:	e014      	b.n	8004622 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	4013      	ands	r3, r2
 8004602:	68ba      	ldr	r2, [r7, #8]
 8004604:	429a      	cmp	r2, r3
 8004606:	d108      	bne.n	800461a <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f042 0202 	orr.w	r2, r2, #2
 8004616:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004618:	e003      	b.n	8004622 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	2203      	movs	r2, #3
 8004620:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004628:	2b00      	cmp	r3, #0
 800462a:	d009      	beq.n	8004640 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	687a      	ldr	r2, [r7, #4]
 800463a:	430a      	orrs	r2, r1
 800463c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004646:	2b00      	cmp	r3, #0
 8004648:	d009      	beq.n	800465e <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f8d3 10e4 	ldr.w	r1, [r3, #228]	@ 0xe4
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	687a      	ldr	r2, [r7, #4]
 8004658:	430a      	orrs	r2, r1
 800465a:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004664:	68ba      	ldr	r2, [r7, #8]
 8004666:	4b0f      	ldr	r3, [pc, #60]	@ (80046a4 <HAL_FDCAN_ActivateNotification+0xec>)
 8004668:	4013      	ands	r3, r2
 800466a:	68fa      	ldr	r2, [r7, #12]
 800466c:	6812      	ldr	r2, [r2, #0]
 800466e:	430b      	orrs	r3, r1
 8004670:	6553      	str	r3, [r2, #84]	@ 0x54
 8004672:	4b0d      	ldr	r3, [pc, #52]	@ (80046a8 <HAL_FDCAN_ActivateNotification+0xf0>)
 8004674:	695a      	ldr	r2, [r3, #20]
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	0f9b      	lsrs	r3, r3, #30
 800467a:	490b      	ldr	r1, [pc, #44]	@ (80046a8 <HAL_FDCAN_ActivateNotification+0xf0>)
 800467c:	4313      	orrs	r3, r2
 800467e:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8004680:	2300      	movs	r3, #0
 8004682:	e008      	b.n	8004696 <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800468a:	f043 0202 	orr.w	r2, r3, #2
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8004694:	2301      	movs	r3, #1
  }
}
 8004696:	4618      	mov	r0, r3
 8004698:	371c      	adds	r7, #28
 800469a:	46bd      	mov	sp, r7
 800469c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a0:	4770      	bx	lr
 80046a2:	bf00      	nop
 80046a4:	3fcfffff 	.word	0x3fcfffff
 80046a8:	4000a800 	.word	0x4000a800

080046ac <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b096      	sub	sp, #88	@ 0x58
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 80046b4:	4b95      	ldr	r3, [pc, #596]	@ (800490c <HAL_FDCAN_IRQHandler+0x260>)
 80046b6:	691b      	ldr	r3, [r3, #16]
 80046b8:	079b      	lsls	r3, r3, #30
 80046ba:	657b      	str	r3, [r7, #84]	@ 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 80046bc:	4b93      	ldr	r3, [pc, #588]	@ (800490c <HAL_FDCAN_IRQHandler+0x260>)
 80046be:	695b      	ldr	r3, [r3, #20]
 80046c0:	079b      	lsls	r3, r3, #30
 80046c2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80046c4:	4013      	ands	r3, r2
 80046c6:	657b      	str	r3, [r7, #84]	@ 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046ce:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80046d2:	653b      	str	r3, [r7, #80]	@ 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046da:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80046dc:	4013      	ands	r3, r2
 80046de:	653b      	str	r3, [r7, #80]	@ 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046e6:	f003 030f 	and.w	r3, r3, #15
 80046ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046f2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80046f4:	4013      	ands	r3, r2
 80046f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046fe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004702:	64bb      	str	r3, [r7, #72]	@ 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800470a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800470c:	4013      	ands	r3, r2
 800470e:	64bb      	str	r3, [r7, #72]	@ 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004716:	f003 5371 	and.w	r3, r3, #1010827264	@ 0x3c400000
 800471a:	647b      	str	r3, [r7, #68]	@ 0x44
  Errors &= hfdcan->Instance->IE;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004722:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004724:	4013      	ands	r3, r2
 8004726:	647b      	str	r3, [r7, #68]	@ 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800472e:	f003 7360 	and.w	r3, r3, #58720256	@ 0x3800000
 8004732:	643b      	str	r3, [r7, #64]	@ 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800473a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800473c:	4013      	ands	r3, r2
 800473e:	643b      	str	r3, [r7, #64]	@ 0x40
  itsourceIE = hfdcan->Instance->IE;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004746:	63fb      	str	r3, [r7, #60]	@ 0x3c
  itflagIR = hfdcan->Instance->IR;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800474e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8004750:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004752:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004756:	2b00      	cmp	r3, #0
 8004758:	d00f      	beq.n	800477a <HAL_FDCAN_IRQHandler+0xce>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 800475a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800475c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004760:	2b00      	cmp	r3, #0
 8004762:	d00a      	beq.n	800477a <HAL_FDCAN_IRQHandler+0xce>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800476c:	651a      	str	r2, [r3, #80]	@ 0x50
 800476e:	4b67      	ldr	r3, [pc, #412]	@ (800490c <HAL_FDCAN_IRQHandler+0x260>)
 8004770:	2200      	movs	r2, #0
 8004772:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8004774:	6878      	ldr	r0, [r7, #4]
 8004776:	f000 fa44 	bl	8004c02 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 800477a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800477c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004780:	2b00      	cmp	r3, #0
 8004782:	d01c      	beq.n	80047be <HAL_FDCAN_IRQHandler+0x112>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8004784:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004786:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800478a:	2b00      	cmp	r3, #0
 800478c:	d017      	beq.n	80047be <HAL_FDCAN_IRQHandler+0x112>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004796:	637b      	str	r3, [r7, #52]	@ 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80047a0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80047a2:	4013      	ands	r3, r2
 80047a4:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80047ae:	651a      	str	r2, [r3, #80]	@ 0x50
 80047b0:	4b56      	ldr	r3, [pc, #344]	@ (800490c <HAL_FDCAN_IRQHandler+0x260>)
 80047b2:	2200      	movs	r2, #0
 80047b4:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 80047b6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80047b8:	6878      	ldr	r0, [r7, #4]
 80047ba:	f000 f9f9 	bl	8004bb0 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 80047be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d00d      	beq.n	80047e0 <HAL_FDCAN_IRQHandler+0x134>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681a      	ldr	r2, [r3, #0]
 80047c8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80047ca:	4b51      	ldr	r3, [pc, #324]	@ (8004910 <HAL_FDCAN_IRQHandler+0x264>)
 80047cc:	400b      	ands	r3, r1
 80047ce:	6513      	str	r3, [r2, #80]	@ 0x50
 80047d0:	4a4e      	ldr	r2, [pc, #312]	@ (800490c <HAL_FDCAN_IRQHandler+0x260>)
 80047d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80047d4:	0f9b      	lsrs	r3, r3, #30
 80047d6:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 80047d8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80047da:	6878      	ldr	r0, [r7, #4]
 80047dc:	f000 f9b2 	bl	8004b44 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 80047e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d00d      	beq.n	8004802 <HAL_FDCAN_IRQHandler+0x156>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681a      	ldr	r2, [r3, #0]
 80047ea:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80047ec:	4b48      	ldr	r3, [pc, #288]	@ (8004910 <HAL_FDCAN_IRQHandler+0x264>)
 80047ee:	400b      	ands	r3, r1
 80047f0:	6513      	str	r3, [r2, #80]	@ 0x50
 80047f2:	4a46      	ldr	r2, [pc, #280]	@ (800490c <HAL_FDCAN_IRQHandler+0x260>)
 80047f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80047f6:	0f9b      	lsrs	r3, r3, #30
 80047f8:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 80047fa:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80047fc:	6878      	ldr	r0, [r7, #4]
 80047fe:	f000 f9ac 	bl	8004b5a <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8004802:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004804:	2b00      	cmp	r3, #0
 8004806:	d00d      	beq.n	8004824 <HAL_FDCAN_IRQHandler+0x178>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681a      	ldr	r2, [r3, #0]
 800480c:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800480e:	4b40      	ldr	r3, [pc, #256]	@ (8004910 <HAL_FDCAN_IRQHandler+0x264>)
 8004810:	400b      	ands	r3, r1
 8004812:	6513      	str	r3, [r2, #80]	@ 0x50
 8004814:	4a3d      	ldr	r2, [pc, #244]	@ (800490c <HAL_FDCAN_IRQHandler+0x260>)
 8004816:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004818:	0f9b      	lsrs	r3, r3, #30
 800481a:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 800481c:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800481e:	6878      	ldr	r0, [r7, #4]
 8004820:	f7fc faea 	bl	8000df8 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8004824:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004826:	2b00      	cmp	r3, #0
 8004828:	d00d      	beq.n	8004846 <HAL_FDCAN_IRQHandler+0x19a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681a      	ldr	r2, [r3, #0]
 800482e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8004830:	4b37      	ldr	r3, [pc, #220]	@ (8004910 <HAL_FDCAN_IRQHandler+0x264>)
 8004832:	400b      	ands	r3, r1
 8004834:	6513      	str	r3, [r2, #80]	@ 0x50
 8004836:	4a35      	ldr	r2, [pc, #212]	@ (800490c <HAL_FDCAN_IRQHandler+0x260>)
 8004838:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800483a:	0f9b      	lsrs	r3, r3, #30
 800483c:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 800483e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8004840:	6878      	ldr	r0, [r7, #4]
 8004842:	f000 f995 	bl	8004b70 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8004846:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004848:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800484c:	2b00      	cmp	r3, #0
 800484e:	d00f      	beq.n	8004870 <HAL_FDCAN_IRQHandler+0x1c4>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8004850:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004852:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004856:	2b00      	cmp	r3, #0
 8004858:	d00a      	beq.n	8004870 <HAL_FDCAN_IRQHandler+0x1c4>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004862:	651a      	str	r2, [r3, #80]	@ 0x50
 8004864:	4b29      	ldr	r3, [pc, #164]	@ (800490c <HAL_FDCAN_IRQHandler+0x260>)
 8004866:	2200      	movs	r2, #0
 8004868:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 800486a:	6878      	ldr	r0, [r7, #4]
 800486c:	f000 f98b 	bl	8004b86 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 8004870:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004872:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004876:	2b00      	cmp	r3, #0
 8004878:	d01c      	beq.n	80048b4 <HAL_FDCAN_IRQHandler+0x208>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 800487a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800487c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004880:	2b00      	cmp	r3, #0
 8004882:	d017      	beq.n	80048b4 <HAL_FDCAN_IRQHandler+0x208>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800488c:	633b      	str	r3, [r7, #48]	@ 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004896:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004898:	4013      	ands	r3, r2
 800489a:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80048a4:	651a      	str	r2, [r3, #80]	@ 0x50
 80048a6:	4b19      	ldr	r3, [pc, #100]	@ (800490c <HAL_FDCAN_IRQHandler+0x260>)
 80048a8:	2200      	movs	r2, #0
 80048aa:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 80048ac:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f000 f973 	bl	8004b9a <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 80048b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80048b6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d00f      	beq.n	80048de <HAL_FDCAN_IRQHandler+0x232>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 80048be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048c0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d00a      	beq.n	80048de <HAL_FDCAN_IRQHandler+0x232>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80048d0:	651a      	str	r2, [r3, #80]	@ 0x50
 80048d2:	4b0e      	ldr	r3, [pc, #56]	@ (800490c <HAL_FDCAN_IRQHandler+0x260>)
 80048d4:	2200      	movs	r2, #0
 80048d6:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 80048d8:	6878      	ldr	r0, [r7, #4]
 80048da:	f000 f974 	bl	8004bc6 <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 80048de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80048e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d015      	beq.n	8004914 <HAL_FDCAN_IRQHandler+0x268>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 80048e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048ea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d010      	beq.n	8004914 <HAL_FDCAN_IRQHandler+0x268>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80048fa:	651a      	str	r2, [r3, #80]	@ 0x50
 80048fc:	4b03      	ldr	r3, [pc, #12]	@ (800490c <HAL_FDCAN_IRQHandler+0x260>)
 80048fe:	2200      	movs	r2, #0
 8004900:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	f000 f969 	bl	8004bda <HAL_FDCAN_TimestampWraparoundCallback>
 8004908:	e004      	b.n	8004914 <HAL_FDCAN_IRQHandler+0x268>
 800490a:	bf00      	nop
 800490c:	4000a800 	.word	0x4000a800
 8004910:	3fcfffff 	.word	0x3fcfffff
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8004914:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004916:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800491a:	2b00      	cmp	r3, #0
 800491c:	d00f      	beq.n	800493e <HAL_FDCAN_IRQHandler+0x292>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 800491e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004920:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004924:	2b00      	cmp	r3, #0
 8004926:	d00a      	beq.n	800493e <HAL_FDCAN_IRQHandler+0x292>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8004930:	651a      	str	r2, [r3, #80]	@ 0x50
 8004932:	4b81      	ldr	r3, [pc, #516]	@ (8004b38 <HAL_FDCAN_IRQHandler+0x48c>)
 8004934:	2200      	movs	r2, #0
 8004936:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8004938:	6878      	ldr	r0, [r7, #4]
 800493a:	f000 f958 	bl	8004bee <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 800493e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004940:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004944:	2b00      	cmp	r3, #0
 8004946:	d014      	beq.n	8004972 <HAL_FDCAN_IRQHandler+0x2c6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8004948:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800494a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800494e:	2b00      	cmp	r3, #0
 8004950:	d00f      	beq.n	8004972 <HAL_FDCAN_IRQHandler+0x2c6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800495a:	651a      	str	r2, [r3, #80]	@ 0x50
 800495c:	4b76      	ldr	r3, [pc, #472]	@ (8004b38 <HAL_FDCAN_IRQHandler+0x48c>)
 800495e:	2200      	movs	r2, #0
 8004960:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004968:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8004972:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004974:	2b00      	cmp	r3, #0
 8004976:	d00d      	beq.n	8004994 <HAL_FDCAN_IRQHandler+0x2e8>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681a      	ldr	r2, [r3, #0]
 800497c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800497e:	4b6f      	ldr	r3, [pc, #444]	@ (8004b3c <HAL_FDCAN_IRQHandler+0x490>)
 8004980:	400b      	ands	r3, r1
 8004982:	6513      	str	r3, [r2, #80]	@ 0x50
 8004984:	4a6c      	ldr	r2, [pc, #432]	@ (8004b38 <HAL_FDCAN_IRQHandler+0x48c>)
 8004986:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004988:	0f9b      	lsrs	r3, r3, #30
 800498a:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 800498c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800498e:	6878      	ldr	r0, [r7, #4]
 8004990:	f000 f94b 	bl	8004c2a <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8004994:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004996:	2b00      	cmp	r3, #0
 8004998:	d011      	beq.n	80049be <HAL_FDCAN_IRQHandler+0x312>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681a      	ldr	r2, [r3, #0]
 800499e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80049a0:	4b66      	ldr	r3, [pc, #408]	@ (8004b3c <HAL_FDCAN_IRQHandler+0x490>)
 80049a2:	400b      	ands	r3, r1
 80049a4:	6513      	str	r3, [r2, #80]	@ 0x50
 80049a6:	4a64      	ldr	r2, [pc, #400]	@ (8004b38 <HAL_FDCAN_IRQHandler+0x48c>)
 80049a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80049aa:	0f9b      	lsrs	r3, r3, #30
 80049ac:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 80049b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80049b6:	431a      	orrs	r2, r3
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a5f      	ldr	r2, [pc, #380]	@ (8004b40 <HAL_FDCAN_IRQHandler+0x494>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	f040 80aa 	bne.w	8004b1e <HAL_FDCAN_IRQHandler+0x472>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	689b      	ldr	r3, [r3, #8]
 80049d0:	f003 0303 	and.w	r3, r3, #3
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	f000 80a2 	beq.w	8004b1e <HAL_FDCAN_IRQHandler+0x472>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	6a1b      	ldr	r3, [r3, #32]
 80049e0:	f003 030f 	and.w	r3, r3, #15
 80049e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80049ee:	4013      	ands	r3, r2
 80049f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	6a1b      	ldr	r3, [r3, #32]
 80049f8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80049fc:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a04:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004a06:	4013      	ands	r3, r2
 8004a08:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	6a1b      	ldr	r3, [r3, #32]
 8004a10:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8004a14:	627b      	str	r3, [r7, #36]	@ 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a1c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a1e:	4013      	ands	r3, r2
 8004a20:	627b      	str	r3, [r7, #36]	@ 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	6a1b      	ldr	r3, [r3, #32]
 8004a28:	f403 43fc 	and.w	r3, r3, #32256	@ 0x7e00
 8004a2c:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a34:	6a3a      	ldr	r2, [r7, #32]
 8004a36:	4013      	ands	r3, r2
 8004a38:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	6a1b      	ldr	r3, [r3, #32]
 8004a40:	f403 23f0 	and.w	r3, r3, #491520	@ 0x78000
 8004a44:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a4c:	69fa      	ldr	r2, [r7, #28]
 8004a4e:	4013      	ands	r3, r2
 8004a50:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a58:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	6a1b      	ldr	r3, [r3, #32]
 8004a60:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8004a62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d007      	beq.n	8004a78 <HAL_FDCAN_IRQHandler+0x3cc>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004a6e:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8004a70:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004a72:	6878      	ldr	r0, [r7, #4]
 8004a74:	f000 f8e4 	bl	8004c40 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 8004a78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d007      	beq.n	8004a8e <HAL_FDCAN_IRQHandler+0x3e2>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004a84:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8004a86:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004a88:	6878      	ldr	r0, [r7, #4]
 8004a8a:	f000 f8e4 	bl	8004c56 <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 8004a8e:	69bb      	ldr	r3, [r7, #24]
 8004a90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d019      	beq.n	8004acc <HAL_FDCAN_IRQHandler+0x420>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d014      	beq.n	8004acc <HAL_FDCAN_IRQHandler+0x420>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004aa8:	0c1b      	lsrs	r3, r3, #16
 8004aaa:	b29b      	uxth	r3, r3
 8004aac:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ab4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004ab8:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	2240      	movs	r2, #64	@ 0x40
 8004ac0:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8004ac2:	68fa      	ldr	r2, [r7, #12]
 8004ac4:	6939      	ldr	r1, [r7, #16]
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f000 f8d0 	bl	8004c6c <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8004acc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d007      	beq.n	8004ae2 <HAL_FDCAN_IRQHandler+0x436>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ad8:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8004ada:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004adc:	6878      	ldr	r0, [r7, #4]
 8004ade:	f000 f8d1 	bl	8004c84 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 8004ae2:	6a3b      	ldr	r3, [r7, #32]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d00b      	beq.n	8004b00 <HAL_FDCAN_IRQHandler+0x454>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	6a3a      	ldr	r2, [r7, #32]
 8004aee:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8004af6:	6a3b      	ldr	r3, [r7, #32]
 8004af8:	431a      	orrs	r2, r3
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8004b00:	69fb      	ldr	r3, [r7, #28]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d00b      	beq.n	8004b1e <HAL_FDCAN_IRQHandler+0x472>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	69fa      	ldr	r2, [r7, #28]
 8004b0c:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8004b14:	69fb      	ldr	r3, [r7, #28]
 8004b16:	431a      	orrs	r2, r3
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d002      	beq.n	8004b2e <HAL_FDCAN_IRQHandler+0x482>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8004b28:	6878      	ldr	r0, [r7, #4]
 8004b2a:	f000 f874 	bl	8004c16 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8004b2e:	bf00      	nop
 8004b30:	3758      	adds	r7, #88	@ 0x58
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bd80      	pop	{r7, pc}
 8004b36:	bf00      	nop
 8004b38:	4000a800 	.word	0x4000a800
 8004b3c:	3fcfffff 	.word	0x3fcfffff
 8004b40:	4000a000 	.word	0x4000a000

08004b44 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b083      	sub	sp, #12
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
 8004b4c:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 8004b4e:	bf00      	nop
 8004b50:	370c      	adds	r7, #12
 8004b52:	46bd      	mov	sp, r7
 8004b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b58:	4770      	bx	lr

08004b5a <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8004b5a:	b480      	push	{r7}
 8004b5c:	b083      	sub	sp, #12
 8004b5e:	af00      	add	r7, sp, #0
 8004b60:	6078      	str	r0, [r7, #4]
 8004b62:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8004b64:	bf00      	nop
 8004b66:	370c      	adds	r7, #12
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6e:	4770      	bx	lr

08004b70 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8004b70:	b480      	push	{r7}
 8004b72:	b083      	sub	sp, #12
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
 8004b78:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8004b7a:	bf00      	nop
 8004b7c:	370c      	adds	r7, #12
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b84:	4770      	bx	lr

08004b86 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004b86:	b480      	push	{r7}
 8004b88:	b083      	sub	sp, #12
 8004b8a:	af00      	add	r7, sp, #0
 8004b8c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8004b8e:	bf00      	nop
 8004b90:	370c      	adds	r7, #12
 8004b92:	46bd      	mov	sp, r7
 8004b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b98:	4770      	bx	lr

08004b9a <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8004b9a:	b480      	push	{r7}
 8004b9c:	b083      	sub	sp, #12
 8004b9e:	af00      	add	r7, sp, #0
 8004ba0:	6078      	str	r0, [r7, #4]
 8004ba2:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8004ba4:	bf00      	nop
 8004ba6:	370c      	adds	r7, #12
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bae:	4770      	bx	lr

08004bb0 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b083      	sub	sp, #12
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
 8004bb8:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8004bba:	bf00      	nop
 8004bbc:	370c      	adds	r7, #12
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc4:	4770      	bx	lr

08004bc6 <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004bc6:	b480      	push	{r7}
 8004bc8:	b083      	sub	sp, #12
 8004bca:	af00      	add	r7, sp, #0
 8004bcc:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 8004bce:	bf00      	nop
 8004bd0:	370c      	adds	r7, #12
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd8:	4770      	bx	lr

08004bda <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004bda:	b480      	push	{r7}
 8004bdc:	b083      	sub	sp, #12
 8004bde:	af00      	add	r7, sp, #0
 8004be0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8004be2:	bf00      	nop
 8004be4:	370c      	adds	r7, #12
 8004be6:	46bd      	mov	sp, r7
 8004be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bec:	4770      	bx	lr

08004bee <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004bee:	b480      	push	{r7}
 8004bf0:	b083      	sub	sp, #12
 8004bf2:	af00      	add	r7, sp, #0
 8004bf4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8004bf6:	bf00      	nop
 8004bf8:	370c      	adds	r7, #12
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c00:	4770      	bx	lr

08004c02 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004c02:	b480      	push	{r7}
 8004c04:	b083      	sub	sp, #12
 8004c06:	af00      	add	r7, sp, #0
 8004c08:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8004c0a:	bf00      	nop
 8004c0c:	370c      	adds	r7, #12
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c14:	4770      	bx	lr

08004c16 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004c16:	b480      	push	{r7}
 8004c18:	b083      	sub	sp, #12
 8004c1a:	af00      	add	r7, sp, #0
 8004c1c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8004c1e:	bf00      	nop
 8004c20:	370c      	adds	r7, #12
 8004c22:	46bd      	mov	sp, r7
 8004c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c28:	4770      	bx	lr

08004c2a <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8004c2a:	b480      	push	{r7}
 8004c2c:	b083      	sub	sp, #12
 8004c2e:	af00      	add	r7, sp, #0
 8004c30:	6078      	str	r0, [r7, #4]
 8004c32:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8004c34:	bf00      	nop
 8004c36:	370c      	adds	r7, #12
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3e:	4770      	bx	lr

08004c40 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 8004c40:	b480      	push	{r7}
 8004c42:	b083      	sub	sp, #12
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
 8004c48:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 8004c4a:	bf00      	nop
 8004c4c:	370c      	adds	r7, #12
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c54:	4770      	bx	lr

08004c56 <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 8004c56:	b480      	push	{r7}
 8004c58:	b083      	sub	sp, #12
 8004c5a:	af00      	add	r7, sp, #0
 8004c5c:	6078      	str	r0, [r7, #4]
 8004c5e:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8004c60:	bf00      	nop
 8004c62:	370c      	adds	r7, #12
 8004c64:	46bd      	mov	sp, r7
 8004c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6a:	4770      	bx	lr

08004c6c <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b085      	sub	sp, #20
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	60f8      	str	r0, [r7, #12]
 8004c74:	60b9      	str	r1, [r7, #8]
 8004c76:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 8004c78:	bf00      	nop
 8004c7a:	3714      	adds	r7, #20
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c82:	4770      	bx	lr

08004c84 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 8004c84:	b480      	push	{r7}
 8004c86:	b083      	sub	sp, #12
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
 8004c8c:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 8004c8e:	bf00      	nop
 8004c90:	370c      	adds	r7, #12
 8004c92:	46bd      	mov	sp, r7
 8004c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c98:	4770      	bx	lr
	...

08004c9c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b085      	sub	sp, #20
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ca8:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8004cb2:	4ba7      	ldr	r3, [pc, #668]	@ (8004f50 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004cb4:	4013      	ands	r3, r2
 8004cb6:	68ba      	ldr	r2, [r7, #8]
 8004cb8:	0091      	lsls	r1, r2, #2
 8004cba:	687a      	ldr	r2, [r7, #4]
 8004cbc:	6812      	ldr	r2, [r2, #0]
 8004cbe:	430b      	orrs	r3, r1
 8004cc0:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004ccc:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cd4:	041a      	lsls	r2, r3, #16
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	430a      	orrs	r2, r1
 8004cdc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ce4:	68ba      	ldr	r2, [r7, #8]
 8004ce6:	4413      	add	r3, r2
 8004ce8:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004cf2:	4b97      	ldr	r3, [pc, #604]	@ (8004f50 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004cf4:	4013      	ands	r3, r2
 8004cf6:	68ba      	ldr	r2, [r7, #8]
 8004cf8:	0091      	lsls	r1, r2, #2
 8004cfa:	687a      	ldr	r2, [r7, #4]
 8004cfc:	6812      	ldr	r2, [r2, #0]
 8004cfe:	430b      	orrs	r3, r1
 8004d00:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d0c:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d14:	041a      	lsls	r2, r3, #16
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	430a      	orrs	r2, r1
 8004d1c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d24:	005b      	lsls	r3, r3, #1
 8004d26:	68ba      	ldr	r2, [r7, #8]
 8004d28:	4413      	add	r3, r2
 8004d2a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8004d34:	4b86      	ldr	r3, [pc, #536]	@ (8004f50 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004d36:	4013      	ands	r3, r2
 8004d38:	68ba      	ldr	r2, [r7, #8]
 8004d3a:	0091      	lsls	r1, r2, #2
 8004d3c:	687a      	ldr	r2, [r7, #4]
 8004d3e:	6812      	ldr	r2, [r2, #0]
 8004d40:	430b      	orrs	r3, r1
 8004d42:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004d4e:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d56:	041a      	lsls	r2, r3, #16
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	430a      	orrs	r2, r1
 8004d5e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d66:	687a      	ldr	r2, [r7, #4]
 8004d68:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8004d6a:	fb02 f303 	mul.w	r3, r2, r3
 8004d6e:	68ba      	ldr	r2, [r7, #8]
 8004d70:	4413      	add	r3, r2
 8004d72:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8004d7c:	4b74      	ldr	r3, [pc, #464]	@ (8004f50 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004d7e:	4013      	ands	r3, r2
 8004d80:	68ba      	ldr	r2, [r7, #8]
 8004d82:	0091      	lsls	r1, r2, #2
 8004d84:	687a      	ldr	r2, [r7, #4]
 8004d86:	6812      	ldr	r2, [r2, #0]
 8004d88:	430b      	orrs	r3, r1
 8004d8a:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004d96:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d9e:	041a      	lsls	r2, r3, #16
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	430a      	orrs	r2, r1
 8004da6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004dae:	687a      	ldr	r2, [r7, #4]
 8004db0:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8004db2:	fb02 f303 	mul.w	r3, r2, r3
 8004db6:	68ba      	ldr	r2, [r7, #8]
 8004db8:	4413      	add	r3, r2
 8004dba:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 8004dc4:	4b62      	ldr	r3, [pc, #392]	@ (8004f50 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004dc6:	4013      	ands	r3, r2
 8004dc8:	68ba      	ldr	r2, [r7, #8]
 8004dca:	0091      	lsls	r1, r2, #2
 8004dcc:	687a      	ldr	r2, [r7, #4]
 8004dce:	6812      	ldr	r2, [r2, #0]
 8004dd0:	430b      	orrs	r3, r1
 8004dd2:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004dda:	687a      	ldr	r2, [r7, #4]
 8004ddc:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8004dde:	fb02 f303 	mul.w	r3, r2, r3
 8004de2:	68ba      	ldr	r2, [r7, #8]
 8004de4:	4413      	add	r3, r2
 8004de6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8004df0:	4b57      	ldr	r3, [pc, #348]	@ (8004f50 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004df2:	4013      	ands	r3, r2
 8004df4:	68ba      	ldr	r2, [r7, #8]
 8004df6:	0091      	lsls	r1, r2, #2
 8004df8:	687a      	ldr	r2, [r7, #4]
 8004dfa:	6812      	ldr	r2, [r2, #0]
 8004dfc:	430b      	orrs	r3, r1
 8004dfe:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004e0a:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e12:	041a      	lsls	r2, r3, #16
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	430a      	orrs	r2, r1
 8004e1a:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e22:	005b      	lsls	r3, r3, #1
 8004e24:	68ba      	ldr	r2, [r7, #8]
 8004e26:	4413      	add	r3, r2
 8004e28:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8004e32:	4b47      	ldr	r3, [pc, #284]	@ (8004f50 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004e34:	4013      	ands	r3, r2
 8004e36:	68ba      	ldr	r2, [r7, #8]
 8004e38:	0091      	lsls	r1, r2, #2
 8004e3a:	687a      	ldr	r2, [r7, #4]
 8004e3c:	6812      	ldr	r2, [r2, #0]
 8004e3e:	430b      	orrs	r3, r1
 8004e40:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004e4c:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e54:	041a      	lsls	r2, r3, #16
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	430a      	orrs	r2, r1
 8004e5c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004e68:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e70:	061a      	lsls	r2, r3, #24
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	430a      	orrs	r2, r1
 8004e78:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004e80:	4b34      	ldr	r3, [pc, #208]	@ (8004f54 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8004e82:	4413      	add	r3, r2
 8004e84:	009a      	lsls	r2, r3, #2
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e92:	009b      	lsls	r3, r3, #2
 8004e94:	441a      	add	r2, r3
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ea2:	00db      	lsls	r3, r3, #3
 8004ea4:	441a      	add	r2, r3
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eb2:	6879      	ldr	r1, [r7, #4]
 8004eb4:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 8004eb6:	fb01 f303 	mul.w	r3, r1, r3
 8004eba:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8004ebc:	441a      	add	r2, r3
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004eca:	6879      	ldr	r1, [r7, #4]
 8004ecc:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 8004ece:	fb01 f303 	mul.w	r3, r1, r3
 8004ed2:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8004ed4:	441a      	add	r2, r3
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ee2:	6879      	ldr	r1, [r7, #4]
 8004ee4:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 8004ee6:	fb01 f303 	mul.w	r3, r1, r3
 8004eea:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8004eec:	441a      	add	r2, r3
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004efe:	00db      	lsls	r3, r3, #3
 8004f00:	441a      	add	r2, r3
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f12:	6879      	ldr	r1, [r7, #4]
 8004f14:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8004f16:	fb01 f303 	mul.w	r3, r1, r3
 8004f1a:	009b      	lsls	r3, r3, #2
 8004f1c:	441a      	add	r2, r3
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f2e:	6879      	ldr	r1, [r7, #4]
 8004f30:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8004f32:	fb01 f303 	mul.w	r3, r1, r3
 8004f36:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8004f38:	441a      	add	r2, r3
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f46:	4a04      	ldr	r2, [pc, #16]	@ (8004f58 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d915      	bls.n	8004f78 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8004f4c:	e006      	b.n	8004f5c <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8004f4e:	bf00      	nop
 8004f50:	ffff0003 	.word	0xffff0003
 8004f54:	10002b00 	.word	0x10002b00
 8004f58:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004f62:	f043 0220 	orr.w	r2, r3, #32
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2203      	movs	r2, #3
 8004f70:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 8004f74:	2301      	movs	r3, #1
 8004f76:	e010      	b.n	8004f9a <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004f7c:	60fb      	str	r3, [r7, #12]
 8004f7e:	e005      	b.n	8004f8c <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	2200      	movs	r2, #0
 8004f84:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	3304      	adds	r3, #4
 8004f8a:	60fb      	str	r3, [r7, #12]
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f92:	68fa      	ldr	r2, [r7, #12]
 8004f94:	429a      	cmp	r2, r3
 8004f96:	d3f3      	bcc.n	8004f80 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8004f98:	2300      	movs	r3, #0
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	3714      	adds	r7, #20
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa4:	4770      	bx	lr
 8004fa6:	bf00      	nop

08004fa8 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b089      	sub	sp, #36	@ 0x24
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	60f8      	str	r0, [r7, #12]
 8004fb0:	60b9      	str	r1, [r7, #8]
 8004fb2:	607a      	str	r2, [r7, #4]
 8004fb4:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d10a      	bne.n	8004fd4 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8004fc6:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	61fb      	str	r3, [r7, #28]
 8004fd2:	e00a      	b.n	8004fea <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8004fdc:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8004fe2:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004fe4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004fe8:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	6a1b      	ldr	r3, [r3, #32]
 8004fee:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8004ff0:	68bb      	ldr	r3, [r7, #8]
 8004ff2:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8004ff4:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8004ff6:	68bb      	ldr	r3, [r7, #8]
 8004ff8:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8004ffa:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8005000:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	68db      	ldr	r3, [r3, #12]
 8005006:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8005008:	4313      	orrs	r3, r2
 800500a:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005016:	6839      	ldr	r1, [r7, #0]
 8005018:	fb01 f303 	mul.w	r3, r1, r3
 800501c:	009b      	lsls	r3, r3, #2
 800501e:	4413      	add	r3, r2
 8005020:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8005022:	69bb      	ldr	r3, [r7, #24]
 8005024:	69fa      	ldr	r2, [r7, #28]
 8005026:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8005028:	69bb      	ldr	r3, [r7, #24]
 800502a:	3304      	adds	r3, #4
 800502c:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 800502e:	69bb      	ldr	r3, [r7, #24]
 8005030:	693a      	ldr	r2, [r7, #16]
 8005032:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8005034:	69bb      	ldr	r3, [r7, #24]
 8005036:	3304      	adds	r3, #4
 8005038:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 800503a:	2300      	movs	r3, #0
 800503c:	617b      	str	r3, [r7, #20]
 800503e:	e020      	b.n	8005082 <FDCAN_CopyMessageToRAM+0xda>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	3303      	adds	r3, #3
 8005044:	687a      	ldr	r2, [r7, #4]
 8005046:	4413      	add	r3, r2
 8005048:	781b      	ldrb	r3, [r3, #0]
 800504a:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	3302      	adds	r3, #2
 8005050:	6879      	ldr	r1, [r7, #4]
 8005052:	440b      	add	r3, r1
 8005054:	781b      	ldrb	r3, [r3, #0]
 8005056:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8005058:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 800505a:	697b      	ldr	r3, [r7, #20]
 800505c:	3301      	adds	r3, #1
 800505e:	6879      	ldr	r1, [r7, #4]
 8005060:	440b      	add	r3, r1
 8005062:	781b      	ldrb	r3, [r3, #0]
 8005064:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8005066:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8005068:	6879      	ldr	r1, [r7, #4]
 800506a:	697a      	ldr	r2, [r7, #20]
 800506c:	440a      	add	r2, r1
 800506e:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8005070:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8005072:	69bb      	ldr	r3, [r7, #24]
 8005074:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8005076:	69bb      	ldr	r3, [r7, #24]
 8005078:	3304      	adds	r3, #4
 800507a:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	3304      	adds	r3, #4
 8005080:	617b      	str	r3, [r7, #20]
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	68db      	ldr	r3, [r3, #12]
 8005086:	4a06      	ldr	r2, [pc, #24]	@ (80050a0 <FDCAN_CopyMessageToRAM+0xf8>)
 8005088:	5cd3      	ldrb	r3, [r2, r3]
 800508a:	461a      	mov	r2, r3
 800508c:	697b      	ldr	r3, [r7, #20]
 800508e:	4293      	cmp	r3, r2
 8005090:	d3d6      	bcc.n	8005040 <FDCAN_CopyMessageToRAM+0x98>
  }
}
 8005092:	bf00      	nop
 8005094:	bf00      	nop
 8005096:	3724      	adds	r7, #36	@ 0x24
 8005098:	46bd      	mov	sp, r7
 800509a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509e:	4770      	bx	lr
 80050a0:	08012668 	.word	0x08012668

080050a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80050a4:	b480      	push	{r7}
 80050a6:	b089      	sub	sp, #36	@ 0x24
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
 80050ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80050ae:	2300      	movs	r3, #0
 80050b0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80050b2:	4b86      	ldr	r3, [pc, #536]	@ (80052cc <HAL_GPIO_Init+0x228>)
 80050b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80050b6:	e18c      	b.n	80053d2 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	681a      	ldr	r2, [r3, #0]
 80050bc:	2101      	movs	r1, #1
 80050be:	69fb      	ldr	r3, [r7, #28]
 80050c0:	fa01 f303 	lsl.w	r3, r1, r3
 80050c4:	4013      	ands	r3, r2
 80050c6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80050c8:	693b      	ldr	r3, [r7, #16]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	f000 817e 	beq.w	80053cc <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	685b      	ldr	r3, [r3, #4]
 80050d4:	f003 0303 	and.w	r3, r3, #3
 80050d8:	2b01      	cmp	r3, #1
 80050da:	d005      	beq.n	80050e8 <HAL_GPIO_Init+0x44>
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	f003 0303 	and.w	r3, r3, #3
 80050e4:	2b02      	cmp	r3, #2
 80050e6:	d130      	bne.n	800514a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	689b      	ldr	r3, [r3, #8]
 80050ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80050ee:	69fb      	ldr	r3, [r7, #28]
 80050f0:	005b      	lsls	r3, r3, #1
 80050f2:	2203      	movs	r2, #3
 80050f4:	fa02 f303 	lsl.w	r3, r2, r3
 80050f8:	43db      	mvns	r3, r3
 80050fa:	69ba      	ldr	r2, [r7, #24]
 80050fc:	4013      	ands	r3, r2
 80050fe:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	68da      	ldr	r2, [r3, #12]
 8005104:	69fb      	ldr	r3, [r7, #28]
 8005106:	005b      	lsls	r3, r3, #1
 8005108:	fa02 f303 	lsl.w	r3, r2, r3
 800510c:	69ba      	ldr	r2, [r7, #24]
 800510e:	4313      	orrs	r3, r2
 8005110:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	69ba      	ldr	r2, [r7, #24]
 8005116:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800511e:	2201      	movs	r2, #1
 8005120:	69fb      	ldr	r3, [r7, #28]
 8005122:	fa02 f303 	lsl.w	r3, r2, r3
 8005126:	43db      	mvns	r3, r3
 8005128:	69ba      	ldr	r2, [r7, #24]
 800512a:	4013      	ands	r3, r2
 800512c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	091b      	lsrs	r3, r3, #4
 8005134:	f003 0201 	and.w	r2, r3, #1
 8005138:	69fb      	ldr	r3, [r7, #28]
 800513a:	fa02 f303 	lsl.w	r3, r2, r3
 800513e:	69ba      	ldr	r2, [r7, #24]
 8005140:	4313      	orrs	r3, r2
 8005142:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	69ba      	ldr	r2, [r7, #24]
 8005148:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	f003 0303 	and.w	r3, r3, #3
 8005152:	2b03      	cmp	r3, #3
 8005154:	d017      	beq.n	8005186 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	68db      	ldr	r3, [r3, #12]
 800515a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800515c:	69fb      	ldr	r3, [r7, #28]
 800515e:	005b      	lsls	r3, r3, #1
 8005160:	2203      	movs	r2, #3
 8005162:	fa02 f303 	lsl.w	r3, r2, r3
 8005166:	43db      	mvns	r3, r3
 8005168:	69ba      	ldr	r2, [r7, #24]
 800516a:	4013      	ands	r3, r2
 800516c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	689a      	ldr	r2, [r3, #8]
 8005172:	69fb      	ldr	r3, [r7, #28]
 8005174:	005b      	lsls	r3, r3, #1
 8005176:	fa02 f303 	lsl.w	r3, r2, r3
 800517a:	69ba      	ldr	r2, [r7, #24]
 800517c:	4313      	orrs	r3, r2
 800517e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	69ba      	ldr	r2, [r7, #24]
 8005184:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	685b      	ldr	r3, [r3, #4]
 800518a:	f003 0303 	and.w	r3, r3, #3
 800518e:	2b02      	cmp	r3, #2
 8005190:	d123      	bne.n	80051da <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005192:	69fb      	ldr	r3, [r7, #28]
 8005194:	08da      	lsrs	r2, r3, #3
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	3208      	adds	r2, #8
 800519a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800519e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80051a0:	69fb      	ldr	r3, [r7, #28]
 80051a2:	f003 0307 	and.w	r3, r3, #7
 80051a6:	009b      	lsls	r3, r3, #2
 80051a8:	220f      	movs	r2, #15
 80051aa:	fa02 f303 	lsl.w	r3, r2, r3
 80051ae:	43db      	mvns	r3, r3
 80051b0:	69ba      	ldr	r2, [r7, #24]
 80051b2:	4013      	ands	r3, r2
 80051b4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	691a      	ldr	r2, [r3, #16]
 80051ba:	69fb      	ldr	r3, [r7, #28]
 80051bc:	f003 0307 	and.w	r3, r3, #7
 80051c0:	009b      	lsls	r3, r3, #2
 80051c2:	fa02 f303 	lsl.w	r3, r2, r3
 80051c6:	69ba      	ldr	r2, [r7, #24]
 80051c8:	4313      	orrs	r3, r2
 80051ca:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80051cc:	69fb      	ldr	r3, [r7, #28]
 80051ce:	08da      	lsrs	r2, r3, #3
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	3208      	adds	r2, #8
 80051d4:	69b9      	ldr	r1, [r7, #24]
 80051d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80051e0:	69fb      	ldr	r3, [r7, #28]
 80051e2:	005b      	lsls	r3, r3, #1
 80051e4:	2203      	movs	r2, #3
 80051e6:	fa02 f303 	lsl.w	r3, r2, r3
 80051ea:	43db      	mvns	r3, r3
 80051ec:	69ba      	ldr	r2, [r7, #24]
 80051ee:	4013      	ands	r3, r2
 80051f0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	f003 0203 	and.w	r2, r3, #3
 80051fa:	69fb      	ldr	r3, [r7, #28]
 80051fc:	005b      	lsls	r3, r3, #1
 80051fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005202:	69ba      	ldr	r2, [r7, #24]
 8005204:	4313      	orrs	r3, r2
 8005206:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	69ba      	ldr	r2, [r7, #24]
 800520c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005216:	2b00      	cmp	r3, #0
 8005218:	f000 80d8 	beq.w	80053cc <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800521c:	4b2c      	ldr	r3, [pc, #176]	@ (80052d0 <HAL_GPIO_Init+0x22c>)
 800521e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005222:	4a2b      	ldr	r2, [pc, #172]	@ (80052d0 <HAL_GPIO_Init+0x22c>)
 8005224:	f043 0302 	orr.w	r3, r3, #2
 8005228:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800522c:	4b28      	ldr	r3, [pc, #160]	@ (80052d0 <HAL_GPIO_Init+0x22c>)
 800522e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005232:	f003 0302 	and.w	r3, r3, #2
 8005236:	60fb      	str	r3, [r7, #12]
 8005238:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800523a:	4a26      	ldr	r2, [pc, #152]	@ (80052d4 <HAL_GPIO_Init+0x230>)
 800523c:	69fb      	ldr	r3, [r7, #28]
 800523e:	089b      	lsrs	r3, r3, #2
 8005240:	3302      	adds	r3, #2
 8005242:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005246:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005248:	69fb      	ldr	r3, [r7, #28]
 800524a:	f003 0303 	and.w	r3, r3, #3
 800524e:	009b      	lsls	r3, r3, #2
 8005250:	220f      	movs	r2, #15
 8005252:	fa02 f303 	lsl.w	r3, r2, r3
 8005256:	43db      	mvns	r3, r3
 8005258:	69ba      	ldr	r2, [r7, #24]
 800525a:	4013      	ands	r3, r2
 800525c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	4a1d      	ldr	r2, [pc, #116]	@ (80052d8 <HAL_GPIO_Init+0x234>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d04a      	beq.n	80052fc <HAL_GPIO_Init+0x258>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	4a1c      	ldr	r2, [pc, #112]	@ (80052dc <HAL_GPIO_Init+0x238>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d02b      	beq.n	80052c6 <HAL_GPIO_Init+0x222>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	4a1b      	ldr	r2, [pc, #108]	@ (80052e0 <HAL_GPIO_Init+0x23c>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d025      	beq.n	80052c2 <HAL_GPIO_Init+0x21e>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	4a1a      	ldr	r2, [pc, #104]	@ (80052e4 <HAL_GPIO_Init+0x240>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d01f      	beq.n	80052be <HAL_GPIO_Init+0x21a>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	4a19      	ldr	r2, [pc, #100]	@ (80052e8 <HAL_GPIO_Init+0x244>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d019      	beq.n	80052ba <HAL_GPIO_Init+0x216>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	4a18      	ldr	r2, [pc, #96]	@ (80052ec <HAL_GPIO_Init+0x248>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d013      	beq.n	80052b6 <HAL_GPIO_Init+0x212>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	4a17      	ldr	r2, [pc, #92]	@ (80052f0 <HAL_GPIO_Init+0x24c>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d00d      	beq.n	80052b2 <HAL_GPIO_Init+0x20e>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	4a16      	ldr	r2, [pc, #88]	@ (80052f4 <HAL_GPIO_Init+0x250>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d007      	beq.n	80052ae <HAL_GPIO_Init+0x20a>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	4a15      	ldr	r2, [pc, #84]	@ (80052f8 <HAL_GPIO_Init+0x254>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d101      	bne.n	80052aa <HAL_GPIO_Init+0x206>
 80052a6:	2309      	movs	r3, #9
 80052a8:	e029      	b.n	80052fe <HAL_GPIO_Init+0x25a>
 80052aa:	230a      	movs	r3, #10
 80052ac:	e027      	b.n	80052fe <HAL_GPIO_Init+0x25a>
 80052ae:	2307      	movs	r3, #7
 80052b0:	e025      	b.n	80052fe <HAL_GPIO_Init+0x25a>
 80052b2:	2306      	movs	r3, #6
 80052b4:	e023      	b.n	80052fe <HAL_GPIO_Init+0x25a>
 80052b6:	2305      	movs	r3, #5
 80052b8:	e021      	b.n	80052fe <HAL_GPIO_Init+0x25a>
 80052ba:	2304      	movs	r3, #4
 80052bc:	e01f      	b.n	80052fe <HAL_GPIO_Init+0x25a>
 80052be:	2303      	movs	r3, #3
 80052c0:	e01d      	b.n	80052fe <HAL_GPIO_Init+0x25a>
 80052c2:	2302      	movs	r3, #2
 80052c4:	e01b      	b.n	80052fe <HAL_GPIO_Init+0x25a>
 80052c6:	2301      	movs	r3, #1
 80052c8:	e019      	b.n	80052fe <HAL_GPIO_Init+0x25a>
 80052ca:	bf00      	nop
 80052cc:	58000080 	.word	0x58000080
 80052d0:	58024400 	.word	0x58024400
 80052d4:	58000400 	.word	0x58000400
 80052d8:	58020000 	.word	0x58020000
 80052dc:	58020400 	.word	0x58020400
 80052e0:	58020800 	.word	0x58020800
 80052e4:	58020c00 	.word	0x58020c00
 80052e8:	58021000 	.word	0x58021000
 80052ec:	58021400 	.word	0x58021400
 80052f0:	58021800 	.word	0x58021800
 80052f4:	58021c00 	.word	0x58021c00
 80052f8:	58022400 	.word	0x58022400
 80052fc:	2300      	movs	r3, #0
 80052fe:	69fa      	ldr	r2, [r7, #28]
 8005300:	f002 0203 	and.w	r2, r2, #3
 8005304:	0092      	lsls	r2, r2, #2
 8005306:	4093      	lsls	r3, r2
 8005308:	69ba      	ldr	r2, [r7, #24]
 800530a:	4313      	orrs	r3, r2
 800530c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800530e:	4938      	ldr	r1, [pc, #224]	@ (80053f0 <HAL_GPIO_Init+0x34c>)
 8005310:	69fb      	ldr	r3, [r7, #28]
 8005312:	089b      	lsrs	r3, r3, #2
 8005314:	3302      	adds	r3, #2
 8005316:	69ba      	ldr	r2, [r7, #24]
 8005318:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800531c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005324:	693b      	ldr	r3, [r7, #16]
 8005326:	43db      	mvns	r3, r3
 8005328:	69ba      	ldr	r2, [r7, #24]
 800532a:	4013      	ands	r3, r2
 800532c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	685b      	ldr	r3, [r3, #4]
 8005332:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005336:	2b00      	cmp	r3, #0
 8005338:	d003      	beq.n	8005342 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800533a:	69ba      	ldr	r2, [r7, #24]
 800533c:	693b      	ldr	r3, [r7, #16]
 800533e:	4313      	orrs	r3, r2
 8005340:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005342:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005346:	69bb      	ldr	r3, [r7, #24]
 8005348:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800534a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005352:	693b      	ldr	r3, [r7, #16]
 8005354:	43db      	mvns	r3, r3
 8005356:	69ba      	ldr	r2, [r7, #24]
 8005358:	4013      	ands	r3, r2
 800535a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	685b      	ldr	r3, [r3, #4]
 8005360:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005364:	2b00      	cmp	r3, #0
 8005366:	d003      	beq.n	8005370 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8005368:	69ba      	ldr	r2, [r7, #24]
 800536a:	693b      	ldr	r3, [r7, #16]
 800536c:	4313      	orrs	r3, r2
 800536e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005370:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005374:	69bb      	ldr	r3, [r7, #24]
 8005376:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800537e:	693b      	ldr	r3, [r7, #16]
 8005380:	43db      	mvns	r3, r3
 8005382:	69ba      	ldr	r2, [r7, #24]
 8005384:	4013      	ands	r3, r2
 8005386:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005390:	2b00      	cmp	r3, #0
 8005392:	d003      	beq.n	800539c <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8005394:	69ba      	ldr	r2, [r7, #24]
 8005396:	693b      	ldr	r3, [r7, #16]
 8005398:	4313      	orrs	r3, r2
 800539a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800539c:	697b      	ldr	r3, [r7, #20]
 800539e:	69ba      	ldr	r2, [r7, #24]
 80053a0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80053a8:	693b      	ldr	r3, [r7, #16]
 80053aa:	43db      	mvns	r3, r3
 80053ac:	69ba      	ldr	r2, [r7, #24]
 80053ae:	4013      	ands	r3, r2
 80053b0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d003      	beq.n	80053c6 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80053be:	69ba      	ldr	r2, [r7, #24]
 80053c0:	693b      	ldr	r3, [r7, #16]
 80053c2:	4313      	orrs	r3, r2
 80053c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80053c6:	697b      	ldr	r3, [r7, #20]
 80053c8:	69ba      	ldr	r2, [r7, #24]
 80053ca:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80053cc:	69fb      	ldr	r3, [r7, #28]
 80053ce:	3301      	adds	r3, #1
 80053d0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	681a      	ldr	r2, [r3, #0]
 80053d6:	69fb      	ldr	r3, [r7, #28]
 80053d8:	fa22 f303 	lsr.w	r3, r2, r3
 80053dc:	2b00      	cmp	r3, #0
 80053de:	f47f ae6b 	bne.w	80050b8 <HAL_GPIO_Init+0x14>
  }
}
 80053e2:	bf00      	nop
 80053e4:	bf00      	nop
 80053e6:	3724      	adds	r7, #36	@ 0x24
 80053e8:	46bd      	mov	sp, r7
 80053ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ee:	4770      	bx	lr
 80053f0:	58000400 	.word	0x58000400

080053f4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b084      	sub	sp, #16
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80053fc:	4b19      	ldr	r3, [pc, #100]	@ (8005464 <HAL_PWREx_ConfigSupply+0x70>)
 80053fe:	68db      	ldr	r3, [r3, #12]
 8005400:	f003 0304 	and.w	r3, r3, #4
 8005404:	2b04      	cmp	r3, #4
 8005406:	d00a      	beq.n	800541e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005408:	4b16      	ldr	r3, [pc, #88]	@ (8005464 <HAL_PWREx_ConfigSupply+0x70>)
 800540a:	68db      	ldr	r3, [r3, #12]
 800540c:	f003 0307 	and.w	r3, r3, #7
 8005410:	687a      	ldr	r2, [r7, #4]
 8005412:	429a      	cmp	r2, r3
 8005414:	d001      	beq.n	800541a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005416:	2301      	movs	r3, #1
 8005418:	e01f      	b.n	800545a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800541a:	2300      	movs	r3, #0
 800541c:	e01d      	b.n	800545a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800541e:	4b11      	ldr	r3, [pc, #68]	@ (8005464 <HAL_PWREx_ConfigSupply+0x70>)
 8005420:	68db      	ldr	r3, [r3, #12]
 8005422:	f023 0207 	bic.w	r2, r3, #7
 8005426:	490f      	ldr	r1, [pc, #60]	@ (8005464 <HAL_PWREx_ConfigSupply+0x70>)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	4313      	orrs	r3, r2
 800542c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800542e:	f7fd fd33 	bl	8002e98 <HAL_GetTick>
 8005432:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005434:	e009      	b.n	800544a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005436:	f7fd fd2f 	bl	8002e98 <HAL_GetTick>
 800543a:	4602      	mov	r2, r0
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	1ad3      	subs	r3, r2, r3
 8005440:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005444:	d901      	bls.n	800544a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005446:	2301      	movs	r3, #1
 8005448:	e007      	b.n	800545a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800544a:	4b06      	ldr	r3, [pc, #24]	@ (8005464 <HAL_PWREx_ConfigSupply+0x70>)
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005452:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005456:	d1ee      	bne.n	8005436 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005458:	2300      	movs	r3, #0
}
 800545a:	4618      	mov	r0, r3
 800545c:	3710      	adds	r7, #16
 800545e:	46bd      	mov	sp, r7
 8005460:	bd80      	pop	{r7, pc}
 8005462:	bf00      	nop
 8005464:	58024800 	.word	0x58024800

08005468 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b08c      	sub	sp, #48	@ 0x30
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d101      	bne.n	800547a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005476:	2301      	movs	r3, #1
 8005478:	e3c8      	b.n	8005c0c <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f003 0301 	and.w	r3, r3, #1
 8005482:	2b00      	cmp	r3, #0
 8005484:	f000 8087 	beq.w	8005596 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005488:	4b88      	ldr	r3, [pc, #544]	@ (80056ac <HAL_RCC_OscConfig+0x244>)
 800548a:	691b      	ldr	r3, [r3, #16]
 800548c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005490:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005492:	4b86      	ldr	r3, [pc, #536]	@ (80056ac <HAL_RCC_OscConfig+0x244>)
 8005494:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005496:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005498:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800549a:	2b10      	cmp	r3, #16
 800549c:	d007      	beq.n	80054ae <HAL_RCC_OscConfig+0x46>
 800549e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054a0:	2b18      	cmp	r3, #24
 80054a2:	d110      	bne.n	80054c6 <HAL_RCC_OscConfig+0x5e>
 80054a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054a6:	f003 0303 	and.w	r3, r3, #3
 80054aa:	2b02      	cmp	r3, #2
 80054ac:	d10b      	bne.n	80054c6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054ae:	4b7f      	ldr	r3, [pc, #508]	@ (80056ac <HAL_RCC_OscConfig+0x244>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d06c      	beq.n	8005594 <HAL_RCC_OscConfig+0x12c>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	685b      	ldr	r3, [r3, #4]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d168      	bne.n	8005594 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80054c2:	2301      	movs	r3, #1
 80054c4:	e3a2      	b.n	8005c0c <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	685b      	ldr	r3, [r3, #4]
 80054ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80054ce:	d106      	bne.n	80054de <HAL_RCC_OscConfig+0x76>
 80054d0:	4b76      	ldr	r3, [pc, #472]	@ (80056ac <HAL_RCC_OscConfig+0x244>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a75      	ldr	r2, [pc, #468]	@ (80056ac <HAL_RCC_OscConfig+0x244>)
 80054d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80054da:	6013      	str	r3, [r2, #0]
 80054dc:	e02e      	b.n	800553c <HAL_RCC_OscConfig+0xd4>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d10c      	bne.n	8005500 <HAL_RCC_OscConfig+0x98>
 80054e6:	4b71      	ldr	r3, [pc, #452]	@ (80056ac <HAL_RCC_OscConfig+0x244>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a70      	ldr	r2, [pc, #448]	@ (80056ac <HAL_RCC_OscConfig+0x244>)
 80054ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80054f0:	6013      	str	r3, [r2, #0]
 80054f2:	4b6e      	ldr	r3, [pc, #440]	@ (80056ac <HAL_RCC_OscConfig+0x244>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4a6d      	ldr	r2, [pc, #436]	@ (80056ac <HAL_RCC_OscConfig+0x244>)
 80054f8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80054fc:	6013      	str	r3, [r2, #0]
 80054fe:	e01d      	b.n	800553c <HAL_RCC_OscConfig+0xd4>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	685b      	ldr	r3, [r3, #4]
 8005504:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005508:	d10c      	bne.n	8005524 <HAL_RCC_OscConfig+0xbc>
 800550a:	4b68      	ldr	r3, [pc, #416]	@ (80056ac <HAL_RCC_OscConfig+0x244>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4a67      	ldr	r2, [pc, #412]	@ (80056ac <HAL_RCC_OscConfig+0x244>)
 8005510:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005514:	6013      	str	r3, [r2, #0]
 8005516:	4b65      	ldr	r3, [pc, #404]	@ (80056ac <HAL_RCC_OscConfig+0x244>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4a64      	ldr	r2, [pc, #400]	@ (80056ac <HAL_RCC_OscConfig+0x244>)
 800551c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005520:	6013      	str	r3, [r2, #0]
 8005522:	e00b      	b.n	800553c <HAL_RCC_OscConfig+0xd4>
 8005524:	4b61      	ldr	r3, [pc, #388]	@ (80056ac <HAL_RCC_OscConfig+0x244>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a60      	ldr	r2, [pc, #384]	@ (80056ac <HAL_RCC_OscConfig+0x244>)
 800552a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800552e:	6013      	str	r3, [r2, #0]
 8005530:	4b5e      	ldr	r3, [pc, #376]	@ (80056ac <HAL_RCC_OscConfig+0x244>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a5d      	ldr	r2, [pc, #372]	@ (80056ac <HAL_RCC_OscConfig+0x244>)
 8005536:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800553a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	685b      	ldr	r3, [r3, #4]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d013      	beq.n	800556c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005544:	f7fd fca8 	bl	8002e98 <HAL_GetTick>
 8005548:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800554a:	e008      	b.n	800555e <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800554c:	f7fd fca4 	bl	8002e98 <HAL_GetTick>
 8005550:	4602      	mov	r2, r0
 8005552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005554:	1ad3      	subs	r3, r2, r3
 8005556:	2b64      	cmp	r3, #100	@ 0x64
 8005558:	d901      	bls.n	800555e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800555a:	2303      	movs	r3, #3
 800555c:	e356      	b.n	8005c0c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800555e:	4b53      	ldr	r3, [pc, #332]	@ (80056ac <HAL_RCC_OscConfig+0x244>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005566:	2b00      	cmp	r3, #0
 8005568:	d0f0      	beq.n	800554c <HAL_RCC_OscConfig+0xe4>
 800556a:	e014      	b.n	8005596 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800556c:	f7fd fc94 	bl	8002e98 <HAL_GetTick>
 8005570:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005572:	e008      	b.n	8005586 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005574:	f7fd fc90 	bl	8002e98 <HAL_GetTick>
 8005578:	4602      	mov	r2, r0
 800557a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800557c:	1ad3      	subs	r3, r2, r3
 800557e:	2b64      	cmp	r3, #100	@ 0x64
 8005580:	d901      	bls.n	8005586 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005582:	2303      	movs	r3, #3
 8005584:	e342      	b.n	8005c0c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005586:	4b49      	ldr	r3, [pc, #292]	@ (80056ac <HAL_RCC_OscConfig+0x244>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800558e:	2b00      	cmp	r3, #0
 8005590:	d1f0      	bne.n	8005574 <HAL_RCC_OscConfig+0x10c>
 8005592:	e000      	b.n	8005596 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005594:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f003 0302 	and.w	r3, r3, #2
 800559e:	2b00      	cmp	r3, #0
 80055a0:	f000 808c 	beq.w	80056bc <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80055a4:	4b41      	ldr	r3, [pc, #260]	@ (80056ac <HAL_RCC_OscConfig+0x244>)
 80055a6:	691b      	ldr	r3, [r3, #16]
 80055a8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80055ac:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80055ae:	4b3f      	ldr	r3, [pc, #252]	@ (80056ac <HAL_RCC_OscConfig+0x244>)
 80055b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055b2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80055b4:	6a3b      	ldr	r3, [r7, #32]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d007      	beq.n	80055ca <HAL_RCC_OscConfig+0x162>
 80055ba:	6a3b      	ldr	r3, [r7, #32]
 80055bc:	2b18      	cmp	r3, #24
 80055be:	d137      	bne.n	8005630 <HAL_RCC_OscConfig+0x1c8>
 80055c0:	69fb      	ldr	r3, [r7, #28]
 80055c2:	f003 0303 	and.w	r3, r3, #3
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d132      	bne.n	8005630 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80055ca:	4b38      	ldr	r3, [pc, #224]	@ (80056ac <HAL_RCC_OscConfig+0x244>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f003 0304 	and.w	r3, r3, #4
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d005      	beq.n	80055e2 <HAL_RCC_OscConfig+0x17a>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	68db      	ldr	r3, [r3, #12]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d101      	bne.n	80055e2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80055de:	2301      	movs	r3, #1
 80055e0:	e314      	b.n	8005c0c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80055e2:	4b32      	ldr	r3, [pc, #200]	@ (80056ac <HAL_RCC_OscConfig+0x244>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f023 0219 	bic.w	r2, r3, #25
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	68db      	ldr	r3, [r3, #12]
 80055ee:	492f      	ldr	r1, [pc, #188]	@ (80056ac <HAL_RCC_OscConfig+0x244>)
 80055f0:	4313      	orrs	r3, r2
 80055f2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055f4:	f7fd fc50 	bl	8002e98 <HAL_GetTick>
 80055f8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80055fa:	e008      	b.n	800560e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80055fc:	f7fd fc4c 	bl	8002e98 <HAL_GetTick>
 8005600:	4602      	mov	r2, r0
 8005602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005604:	1ad3      	subs	r3, r2, r3
 8005606:	2b02      	cmp	r3, #2
 8005608:	d901      	bls.n	800560e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800560a:	2303      	movs	r3, #3
 800560c:	e2fe      	b.n	8005c0c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800560e:	4b27      	ldr	r3, [pc, #156]	@ (80056ac <HAL_RCC_OscConfig+0x244>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f003 0304 	and.w	r3, r3, #4
 8005616:	2b00      	cmp	r3, #0
 8005618:	d0f0      	beq.n	80055fc <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800561a:	4b24      	ldr	r3, [pc, #144]	@ (80056ac <HAL_RCC_OscConfig+0x244>)
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	691b      	ldr	r3, [r3, #16]
 8005626:	061b      	lsls	r3, r3, #24
 8005628:	4920      	ldr	r1, [pc, #128]	@ (80056ac <HAL_RCC_OscConfig+0x244>)
 800562a:	4313      	orrs	r3, r2
 800562c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800562e:	e045      	b.n	80056bc <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	68db      	ldr	r3, [r3, #12]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d026      	beq.n	8005686 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005638:	4b1c      	ldr	r3, [pc, #112]	@ (80056ac <HAL_RCC_OscConfig+0x244>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f023 0219 	bic.w	r2, r3, #25
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	68db      	ldr	r3, [r3, #12]
 8005644:	4919      	ldr	r1, [pc, #100]	@ (80056ac <HAL_RCC_OscConfig+0x244>)
 8005646:	4313      	orrs	r3, r2
 8005648:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800564a:	f7fd fc25 	bl	8002e98 <HAL_GetTick>
 800564e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005650:	e008      	b.n	8005664 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005652:	f7fd fc21 	bl	8002e98 <HAL_GetTick>
 8005656:	4602      	mov	r2, r0
 8005658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800565a:	1ad3      	subs	r3, r2, r3
 800565c:	2b02      	cmp	r3, #2
 800565e:	d901      	bls.n	8005664 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8005660:	2303      	movs	r3, #3
 8005662:	e2d3      	b.n	8005c0c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005664:	4b11      	ldr	r3, [pc, #68]	@ (80056ac <HAL_RCC_OscConfig+0x244>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f003 0304 	and.w	r3, r3, #4
 800566c:	2b00      	cmp	r3, #0
 800566e:	d0f0      	beq.n	8005652 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005670:	4b0e      	ldr	r3, [pc, #56]	@ (80056ac <HAL_RCC_OscConfig+0x244>)
 8005672:	685b      	ldr	r3, [r3, #4]
 8005674:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	691b      	ldr	r3, [r3, #16]
 800567c:	061b      	lsls	r3, r3, #24
 800567e:	490b      	ldr	r1, [pc, #44]	@ (80056ac <HAL_RCC_OscConfig+0x244>)
 8005680:	4313      	orrs	r3, r2
 8005682:	604b      	str	r3, [r1, #4]
 8005684:	e01a      	b.n	80056bc <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005686:	4b09      	ldr	r3, [pc, #36]	@ (80056ac <HAL_RCC_OscConfig+0x244>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a08      	ldr	r2, [pc, #32]	@ (80056ac <HAL_RCC_OscConfig+0x244>)
 800568c:	f023 0301 	bic.w	r3, r3, #1
 8005690:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005692:	f7fd fc01 	bl	8002e98 <HAL_GetTick>
 8005696:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005698:	e00a      	b.n	80056b0 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800569a:	f7fd fbfd 	bl	8002e98 <HAL_GetTick>
 800569e:	4602      	mov	r2, r0
 80056a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056a2:	1ad3      	subs	r3, r2, r3
 80056a4:	2b02      	cmp	r3, #2
 80056a6:	d903      	bls.n	80056b0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80056a8:	2303      	movs	r3, #3
 80056aa:	e2af      	b.n	8005c0c <HAL_RCC_OscConfig+0x7a4>
 80056ac:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80056b0:	4b96      	ldr	r3, [pc, #600]	@ (800590c <HAL_RCC_OscConfig+0x4a4>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f003 0304 	and.w	r3, r3, #4
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d1ee      	bne.n	800569a <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f003 0310 	and.w	r3, r3, #16
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d06a      	beq.n	800579e <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80056c8:	4b90      	ldr	r3, [pc, #576]	@ (800590c <HAL_RCC_OscConfig+0x4a4>)
 80056ca:	691b      	ldr	r3, [r3, #16]
 80056cc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80056d0:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80056d2:	4b8e      	ldr	r3, [pc, #568]	@ (800590c <HAL_RCC_OscConfig+0x4a4>)
 80056d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056d6:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80056d8:	69bb      	ldr	r3, [r7, #24]
 80056da:	2b08      	cmp	r3, #8
 80056dc:	d007      	beq.n	80056ee <HAL_RCC_OscConfig+0x286>
 80056de:	69bb      	ldr	r3, [r7, #24]
 80056e0:	2b18      	cmp	r3, #24
 80056e2:	d11b      	bne.n	800571c <HAL_RCC_OscConfig+0x2b4>
 80056e4:	697b      	ldr	r3, [r7, #20]
 80056e6:	f003 0303 	and.w	r3, r3, #3
 80056ea:	2b01      	cmp	r3, #1
 80056ec:	d116      	bne.n	800571c <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80056ee:	4b87      	ldr	r3, [pc, #540]	@ (800590c <HAL_RCC_OscConfig+0x4a4>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d005      	beq.n	8005706 <HAL_RCC_OscConfig+0x29e>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	69db      	ldr	r3, [r3, #28]
 80056fe:	2b80      	cmp	r3, #128	@ 0x80
 8005700:	d001      	beq.n	8005706 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8005702:	2301      	movs	r3, #1
 8005704:	e282      	b.n	8005c0c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005706:	4b81      	ldr	r3, [pc, #516]	@ (800590c <HAL_RCC_OscConfig+0x4a4>)
 8005708:	68db      	ldr	r3, [r3, #12]
 800570a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6a1b      	ldr	r3, [r3, #32]
 8005712:	061b      	lsls	r3, r3, #24
 8005714:	497d      	ldr	r1, [pc, #500]	@ (800590c <HAL_RCC_OscConfig+0x4a4>)
 8005716:	4313      	orrs	r3, r2
 8005718:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800571a:	e040      	b.n	800579e <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	69db      	ldr	r3, [r3, #28]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d023      	beq.n	800576c <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005724:	4b79      	ldr	r3, [pc, #484]	@ (800590c <HAL_RCC_OscConfig+0x4a4>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4a78      	ldr	r2, [pc, #480]	@ (800590c <HAL_RCC_OscConfig+0x4a4>)
 800572a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800572e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005730:	f7fd fbb2 	bl	8002e98 <HAL_GetTick>
 8005734:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005736:	e008      	b.n	800574a <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005738:	f7fd fbae 	bl	8002e98 <HAL_GetTick>
 800573c:	4602      	mov	r2, r0
 800573e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005740:	1ad3      	subs	r3, r2, r3
 8005742:	2b02      	cmp	r3, #2
 8005744:	d901      	bls.n	800574a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005746:	2303      	movs	r3, #3
 8005748:	e260      	b.n	8005c0c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800574a:	4b70      	ldr	r3, [pc, #448]	@ (800590c <HAL_RCC_OscConfig+0x4a4>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005752:	2b00      	cmp	r3, #0
 8005754:	d0f0      	beq.n	8005738 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005756:	4b6d      	ldr	r3, [pc, #436]	@ (800590c <HAL_RCC_OscConfig+0x4a4>)
 8005758:	68db      	ldr	r3, [r3, #12]
 800575a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6a1b      	ldr	r3, [r3, #32]
 8005762:	061b      	lsls	r3, r3, #24
 8005764:	4969      	ldr	r1, [pc, #420]	@ (800590c <HAL_RCC_OscConfig+0x4a4>)
 8005766:	4313      	orrs	r3, r2
 8005768:	60cb      	str	r3, [r1, #12]
 800576a:	e018      	b.n	800579e <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800576c:	4b67      	ldr	r3, [pc, #412]	@ (800590c <HAL_RCC_OscConfig+0x4a4>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a66      	ldr	r2, [pc, #408]	@ (800590c <HAL_RCC_OscConfig+0x4a4>)
 8005772:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005776:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005778:	f7fd fb8e 	bl	8002e98 <HAL_GetTick>
 800577c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800577e:	e008      	b.n	8005792 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005780:	f7fd fb8a 	bl	8002e98 <HAL_GetTick>
 8005784:	4602      	mov	r2, r0
 8005786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005788:	1ad3      	subs	r3, r2, r3
 800578a:	2b02      	cmp	r3, #2
 800578c:	d901      	bls.n	8005792 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800578e:	2303      	movs	r3, #3
 8005790:	e23c      	b.n	8005c0c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005792:	4b5e      	ldr	r3, [pc, #376]	@ (800590c <HAL_RCC_OscConfig+0x4a4>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800579a:	2b00      	cmp	r3, #0
 800579c:	d1f0      	bne.n	8005780 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f003 0308 	and.w	r3, r3, #8
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d036      	beq.n	8005818 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	695b      	ldr	r3, [r3, #20]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d019      	beq.n	80057e6 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80057b2:	4b56      	ldr	r3, [pc, #344]	@ (800590c <HAL_RCC_OscConfig+0x4a4>)
 80057b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80057b6:	4a55      	ldr	r2, [pc, #340]	@ (800590c <HAL_RCC_OscConfig+0x4a4>)
 80057b8:	f043 0301 	orr.w	r3, r3, #1
 80057bc:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057be:	f7fd fb6b 	bl	8002e98 <HAL_GetTick>
 80057c2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80057c4:	e008      	b.n	80057d8 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80057c6:	f7fd fb67 	bl	8002e98 <HAL_GetTick>
 80057ca:	4602      	mov	r2, r0
 80057cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057ce:	1ad3      	subs	r3, r2, r3
 80057d0:	2b02      	cmp	r3, #2
 80057d2:	d901      	bls.n	80057d8 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 80057d4:	2303      	movs	r3, #3
 80057d6:	e219      	b.n	8005c0c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80057d8:	4b4c      	ldr	r3, [pc, #304]	@ (800590c <HAL_RCC_OscConfig+0x4a4>)
 80057da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80057dc:	f003 0302 	and.w	r3, r3, #2
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d0f0      	beq.n	80057c6 <HAL_RCC_OscConfig+0x35e>
 80057e4:	e018      	b.n	8005818 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80057e6:	4b49      	ldr	r3, [pc, #292]	@ (800590c <HAL_RCC_OscConfig+0x4a4>)
 80057e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80057ea:	4a48      	ldr	r2, [pc, #288]	@ (800590c <HAL_RCC_OscConfig+0x4a4>)
 80057ec:	f023 0301 	bic.w	r3, r3, #1
 80057f0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057f2:	f7fd fb51 	bl	8002e98 <HAL_GetTick>
 80057f6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80057f8:	e008      	b.n	800580c <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80057fa:	f7fd fb4d 	bl	8002e98 <HAL_GetTick>
 80057fe:	4602      	mov	r2, r0
 8005800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005802:	1ad3      	subs	r3, r2, r3
 8005804:	2b02      	cmp	r3, #2
 8005806:	d901      	bls.n	800580c <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8005808:	2303      	movs	r3, #3
 800580a:	e1ff      	b.n	8005c0c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800580c:	4b3f      	ldr	r3, [pc, #252]	@ (800590c <HAL_RCC_OscConfig+0x4a4>)
 800580e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005810:	f003 0302 	and.w	r3, r3, #2
 8005814:	2b00      	cmp	r3, #0
 8005816:	d1f0      	bne.n	80057fa <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f003 0320 	and.w	r3, r3, #32
 8005820:	2b00      	cmp	r3, #0
 8005822:	d036      	beq.n	8005892 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	699b      	ldr	r3, [r3, #24]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d019      	beq.n	8005860 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800582c:	4b37      	ldr	r3, [pc, #220]	@ (800590c <HAL_RCC_OscConfig+0x4a4>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a36      	ldr	r2, [pc, #216]	@ (800590c <HAL_RCC_OscConfig+0x4a4>)
 8005832:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005836:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005838:	f7fd fb2e 	bl	8002e98 <HAL_GetTick>
 800583c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800583e:	e008      	b.n	8005852 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005840:	f7fd fb2a 	bl	8002e98 <HAL_GetTick>
 8005844:	4602      	mov	r2, r0
 8005846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005848:	1ad3      	subs	r3, r2, r3
 800584a:	2b02      	cmp	r3, #2
 800584c:	d901      	bls.n	8005852 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800584e:	2303      	movs	r3, #3
 8005850:	e1dc      	b.n	8005c0c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005852:	4b2e      	ldr	r3, [pc, #184]	@ (800590c <HAL_RCC_OscConfig+0x4a4>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800585a:	2b00      	cmp	r3, #0
 800585c:	d0f0      	beq.n	8005840 <HAL_RCC_OscConfig+0x3d8>
 800585e:	e018      	b.n	8005892 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005860:	4b2a      	ldr	r3, [pc, #168]	@ (800590c <HAL_RCC_OscConfig+0x4a4>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4a29      	ldr	r2, [pc, #164]	@ (800590c <HAL_RCC_OscConfig+0x4a4>)
 8005866:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800586a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800586c:	f7fd fb14 	bl	8002e98 <HAL_GetTick>
 8005870:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005872:	e008      	b.n	8005886 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005874:	f7fd fb10 	bl	8002e98 <HAL_GetTick>
 8005878:	4602      	mov	r2, r0
 800587a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800587c:	1ad3      	subs	r3, r2, r3
 800587e:	2b02      	cmp	r3, #2
 8005880:	d901      	bls.n	8005886 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8005882:	2303      	movs	r3, #3
 8005884:	e1c2      	b.n	8005c0c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005886:	4b21      	ldr	r3, [pc, #132]	@ (800590c <HAL_RCC_OscConfig+0x4a4>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800588e:	2b00      	cmp	r3, #0
 8005890:	d1f0      	bne.n	8005874 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f003 0304 	and.w	r3, r3, #4
 800589a:	2b00      	cmp	r3, #0
 800589c:	f000 8086 	beq.w	80059ac <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80058a0:	4b1b      	ldr	r3, [pc, #108]	@ (8005910 <HAL_RCC_OscConfig+0x4a8>)
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4a1a      	ldr	r2, [pc, #104]	@ (8005910 <HAL_RCC_OscConfig+0x4a8>)
 80058a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80058aa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80058ac:	f7fd faf4 	bl	8002e98 <HAL_GetTick>
 80058b0:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80058b2:	e008      	b.n	80058c6 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058b4:	f7fd faf0 	bl	8002e98 <HAL_GetTick>
 80058b8:	4602      	mov	r2, r0
 80058ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058bc:	1ad3      	subs	r3, r2, r3
 80058be:	2b64      	cmp	r3, #100	@ 0x64
 80058c0:	d901      	bls.n	80058c6 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 80058c2:	2303      	movs	r3, #3
 80058c4:	e1a2      	b.n	8005c0c <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80058c6:	4b12      	ldr	r3, [pc, #72]	@ (8005910 <HAL_RCC_OscConfig+0x4a8>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d0f0      	beq.n	80058b4 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	689b      	ldr	r3, [r3, #8]
 80058d6:	2b01      	cmp	r3, #1
 80058d8:	d106      	bne.n	80058e8 <HAL_RCC_OscConfig+0x480>
 80058da:	4b0c      	ldr	r3, [pc, #48]	@ (800590c <HAL_RCC_OscConfig+0x4a4>)
 80058dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058de:	4a0b      	ldr	r2, [pc, #44]	@ (800590c <HAL_RCC_OscConfig+0x4a4>)
 80058e0:	f043 0301 	orr.w	r3, r3, #1
 80058e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80058e6:	e032      	b.n	800594e <HAL_RCC_OscConfig+0x4e6>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	689b      	ldr	r3, [r3, #8]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d111      	bne.n	8005914 <HAL_RCC_OscConfig+0x4ac>
 80058f0:	4b06      	ldr	r3, [pc, #24]	@ (800590c <HAL_RCC_OscConfig+0x4a4>)
 80058f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058f4:	4a05      	ldr	r2, [pc, #20]	@ (800590c <HAL_RCC_OscConfig+0x4a4>)
 80058f6:	f023 0301 	bic.w	r3, r3, #1
 80058fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80058fc:	4b03      	ldr	r3, [pc, #12]	@ (800590c <HAL_RCC_OscConfig+0x4a4>)
 80058fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005900:	4a02      	ldr	r2, [pc, #8]	@ (800590c <HAL_RCC_OscConfig+0x4a4>)
 8005902:	f023 0304 	bic.w	r3, r3, #4
 8005906:	6713      	str	r3, [r2, #112]	@ 0x70
 8005908:	e021      	b.n	800594e <HAL_RCC_OscConfig+0x4e6>
 800590a:	bf00      	nop
 800590c:	58024400 	.word	0x58024400
 8005910:	58024800 	.word	0x58024800
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	689b      	ldr	r3, [r3, #8]
 8005918:	2b05      	cmp	r3, #5
 800591a:	d10c      	bne.n	8005936 <HAL_RCC_OscConfig+0x4ce>
 800591c:	4b83      	ldr	r3, [pc, #524]	@ (8005b2c <HAL_RCC_OscConfig+0x6c4>)
 800591e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005920:	4a82      	ldr	r2, [pc, #520]	@ (8005b2c <HAL_RCC_OscConfig+0x6c4>)
 8005922:	f043 0304 	orr.w	r3, r3, #4
 8005926:	6713      	str	r3, [r2, #112]	@ 0x70
 8005928:	4b80      	ldr	r3, [pc, #512]	@ (8005b2c <HAL_RCC_OscConfig+0x6c4>)
 800592a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800592c:	4a7f      	ldr	r2, [pc, #508]	@ (8005b2c <HAL_RCC_OscConfig+0x6c4>)
 800592e:	f043 0301 	orr.w	r3, r3, #1
 8005932:	6713      	str	r3, [r2, #112]	@ 0x70
 8005934:	e00b      	b.n	800594e <HAL_RCC_OscConfig+0x4e6>
 8005936:	4b7d      	ldr	r3, [pc, #500]	@ (8005b2c <HAL_RCC_OscConfig+0x6c4>)
 8005938:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800593a:	4a7c      	ldr	r2, [pc, #496]	@ (8005b2c <HAL_RCC_OscConfig+0x6c4>)
 800593c:	f023 0301 	bic.w	r3, r3, #1
 8005940:	6713      	str	r3, [r2, #112]	@ 0x70
 8005942:	4b7a      	ldr	r3, [pc, #488]	@ (8005b2c <HAL_RCC_OscConfig+0x6c4>)
 8005944:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005946:	4a79      	ldr	r2, [pc, #484]	@ (8005b2c <HAL_RCC_OscConfig+0x6c4>)
 8005948:	f023 0304 	bic.w	r3, r3, #4
 800594c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	689b      	ldr	r3, [r3, #8]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d015      	beq.n	8005982 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005956:	f7fd fa9f 	bl	8002e98 <HAL_GetTick>
 800595a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800595c:	e00a      	b.n	8005974 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800595e:	f7fd fa9b 	bl	8002e98 <HAL_GetTick>
 8005962:	4602      	mov	r2, r0
 8005964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005966:	1ad3      	subs	r3, r2, r3
 8005968:	f241 3288 	movw	r2, #5000	@ 0x1388
 800596c:	4293      	cmp	r3, r2
 800596e:	d901      	bls.n	8005974 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8005970:	2303      	movs	r3, #3
 8005972:	e14b      	b.n	8005c0c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005974:	4b6d      	ldr	r3, [pc, #436]	@ (8005b2c <HAL_RCC_OscConfig+0x6c4>)
 8005976:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005978:	f003 0302 	and.w	r3, r3, #2
 800597c:	2b00      	cmp	r3, #0
 800597e:	d0ee      	beq.n	800595e <HAL_RCC_OscConfig+0x4f6>
 8005980:	e014      	b.n	80059ac <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005982:	f7fd fa89 	bl	8002e98 <HAL_GetTick>
 8005986:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005988:	e00a      	b.n	80059a0 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800598a:	f7fd fa85 	bl	8002e98 <HAL_GetTick>
 800598e:	4602      	mov	r2, r0
 8005990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005992:	1ad3      	subs	r3, r2, r3
 8005994:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005998:	4293      	cmp	r3, r2
 800599a:	d901      	bls.n	80059a0 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 800599c:	2303      	movs	r3, #3
 800599e:	e135      	b.n	8005c0c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80059a0:	4b62      	ldr	r3, [pc, #392]	@ (8005b2c <HAL_RCC_OscConfig+0x6c4>)
 80059a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059a4:	f003 0302 	and.w	r3, r3, #2
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d1ee      	bne.n	800598a <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	f000 812a 	beq.w	8005c0a <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80059b6:	4b5d      	ldr	r3, [pc, #372]	@ (8005b2c <HAL_RCC_OscConfig+0x6c4>)
 80059b8:	691b      	ldr	r3, [r3, #16]
 80059ba:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80059be:	2b18      	cmp	r3, #24
 80059c0:	f000 80ba 	beq.w	8005b38 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059c8:	2b02      	cmp	r3, #2
 80059ca:	f040 8095 	bne.w	8005af8 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059ce:	4b57      	ldr	r3, [pc, #348]	@ (8005b2c <HAL_RCC_OscConfig+0x6c4>)
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	4a56      	ldr	r2, [pc, #344]	@ (8005b2c <HAL_RCC_OscConfig+0x6c4>)
 80059d4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80059d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059da:	f7fd fa5d 	bl	8002e98 <HAL_GetTick>
 80059de:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80059e0:	e008      	b.n	80059f4 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059e2:	f7fd fa59 	bl	8002e98 <HAL_GetTick>
 80059e6:	4602      	mov	r2, r0
 80059e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059ea:	1ad3      	subs	r3, r2, r3
 80059ec:	2b02      	cmp	r3, #2
 80059ee:	d901      	bls.n	80059f4 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80059f0:	2303      	movs	r3, #3
 80059f2:	e10b      	b.n	8005c0c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80059f4:	4b4d      	ldr	r3, [pc, #308]	@ (8005b2c <HAL_RCC_OscConfig+0x6c4>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d1f0      	bne.n	80059e2 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005a00:	4b4a      	ldr	r3, [pc, #296]	@ (8005b2c <HAL_RCC_OscConfig+0x6c4>)
 8005a02:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005a04:	4b4a      	ldr	r3, [pc, #296]	@ (8005b30 <HAL_RCC_OscConfig+0x6c8>)
 8005a06:	4013      	ands	r3, r2
 8005a08:	687a      	ldr	r2, [r7, #4]
 8005a0a:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8005a0c:	687a      	ldr	r2, [r7, #4]
 8005a0e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005a10:	0112      	lsls	r2, r2, #4
 8005a12:	430a      	orrs	r2, r1
 8005a14:	4945      	ldr	r1, [pc, #276]	@ (8005b2c <HAL_RCC_OscConfig+0x6c4>)
 8005a16:	4313      	orrs	r3, r2
 8005a18:	628b      	str	r3, [r1, #40]	@ 0x28
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a1e:	3b01      	subs	r3, #1
 8005a20:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a28:	3b01      	subs	r3, #1
 8005a2a:	025b      	lsls	r3, r3, #9
 8005a2c:	b29b      	uxth	r3, r3
 8005a2e:	431a      	orrs	r2, r3
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a34:	3b01      	subs	r3, #1
 8005a36:	041b      	lsls	r3, r3, #16
 8005a38:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005a3c:	431a      	orrs	r2, r3
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a42:	3b01      	subs	r3, #1
 8005a44:	061b      	lsls	r3, r3, #24
 8005a46:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005a4a:	4938      	ldr	r1, [pc, #224]	@ (8005b2c <HAL_RCC_OscConfig+0x6c4>)
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8005a50:	4b36      	ldr	r3, [pc, #216]	@ (8005b2c <HAL_RCC_OscConfig+0x6c4>)
 8005a52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a54:	4a35      	ldr	r2, [pc, #212]	@ (8005b2c <HAL_RCC_OscConfig+0x6c4>)
 8005a56:	f023 0301 	bic.w	r3, r3, #1
 8005a5a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005a5c:	4b33      	ldr	r3, [pc, #204]	@ (8005b2c <HAL_RCC_OscConfig+0x6c4>)
 8005a5e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005a60:	4b34      	ldr	r3, [pc, #208]	@ (8005b34 <HAL_RCC_OscConfig+0x6cc>)
 8005a62:	4013      	ands	r3, r2
 8005a64:	687a      	ldr	r2, [r7, #4]
 8005a66:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005a68:	00d2      	lsls	r2, r2, #3
 8005a6a:	4930      	ldr	r1, [pc, #192]	@ (8005b2c <HAL_RCC_OscConfig+0x6c4>)
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005a70:	4b2e      	ldr	r3, [pc, #184]	@ (8005b2c <HAL_RCC_OscConfig+0x6c4>)
 8005a72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a74:	f023 020c 	bic.w	r2, r3, #12
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a7c:	492b      	ldr	r1, [pc, #172]	@ (8005b2c <HAL_RCC_OscConfig+0x6c4>)
 8005a7e:	4313      	orrs	r3, r2
 8005a80:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005a82:	4b2a      	ldr	r3, [pc, #168]	@ (8005b2c <HAL_RCC_OscConfig+0x6c4>)
 8005a84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a86:	f023 0202 	bic.w	r2, r3, #2
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a8e:	4927      	ldr	r1, [pc, #156]	@ (8005b2c <HAL_RCC_OscConfig+0x6c4>)
 8005a90:	4313      	orrs	r3, r2
 8005a92:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005a94:	4b25      	ldr	r3, [pc, #148]	@ (8005b2c <HAL_RCC_OscConfig+0x6c4>)
 8005a96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a98:	4a24      	ldr	r2, [pc, #144]	@ (8005b2c <HAL_RCC_OscConfig+0x6c4>)
 8005a9a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a9e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005aa0:	4b22      	ldr	r3, [pc, #136]	@ (8005b2c <HAL_RCC_OscConfig+0x6c4>)
 8005aa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005aa4:	4a21      	ldr	r2, [pc, #132]	@ (8005b2c <HAL_RCC_OscConfig+0x6c4>)
 8005aa6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005aaa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005aac:	4b1f      	ldr	r3, [pc, #124]	@ (8005b2c <HAL_RCC_OscConfig+0x6c4>)
 8005aae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ab0:	4a1e      	ldr	r2, [pc, #120]	@ (8005b2c <HAL_RCC_OscConfig+0x6c4>)
 8005ab2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005ab6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8005ab8:	4b1c      	ldr	r3, [pc, #112]	@ (8005b2c <HAL_RCC_OscConfig+0x6c4>)
 8005aba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005abc:	4a1b      	ldr	r2, [pc, #108]	@ (8005b2c <HAL_RCC_OscConfig+0x6c4>)
 8005abe:	f043 0301 	orr.w	r3, r3, #1
 8005ac2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005ac4:	4b19      	ldr	r3, [pc, #100]	@ (8005b2c <HAL_RCC_OscConfig+0x6c4>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4a18      	ldr	r2, [pc, #96]	@ (8005b2c <HAL_RCC_OscConfig+0x6c4>)
 8005aca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005ace:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ad0:	f7fd f9e2 	bl	8002e98 <HAL_GetTick>
 8005ad4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005ad6:	e008      	b.n	8005aea <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ad8:	f7fd f9de 	bl	8002e98 <HAL_GetTick>
 8005adc:	4602      	mov	r2, r0
 8005ade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ae0:	1ad3      	subs	r3, r2, r3
 8005ae2:	2b02      	cmp	r3, #2
 8005ae4:	d901      	bls.n	8005aea <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8005ae6:	2303      	movs	r3, #3
 8005ae8:	e090      	b.n	8005c0c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005aea:	4b10      	ldr	r3, [pc, #64]	@ (8005b2c <HAL_RCC_OscConfig+0x6c4>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d0f0      	beq.n	8005ad8 <HAL_RCC_OscConfig+0x670>
 8005af6:	e088      	b.n	8005c0a <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005af8:	4b0c      	ldr	r3, [pc, #48]	@ (8005b2c <HAL_RCC_OscConfig+0x6c4>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4a0b      	ldr	r2, [pc, #44]	@ (8005b2c <HAL_RCC_OscConfig+0x6c4>)
 8005afe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005b02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b04:	f7fd f9c8 	bl	8002e98 <HAL_GetTick>
 8005b08:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005b0a:	e008      	b.n	8005b1e <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b0c:	f7fd f9c4 	bl	8002e98 <HAL_GetTick>
 8005b10:	4602      	mov	r2, r0
 8005b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b14:	1ad3      	subs	r3, r2, r3
 8005b16:	2b02      	cmp	r3, #2
 8005b18:	d901      	bls.n	8005b1e <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8005b1a:	2303      	movs	r3, #3
 8005b1c:	e076      	b.n	8005c0c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005b1e:	4b03      	ldr	r3, [pc, #12]	@ (8005b2c <HAL_RCC_OscConfig+0x6c4>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d1f0      	bne.n	8005b0c <HAL_RCC_OscConfig+0x6a4>
 8005b2a:	e06e      	b.n	8005c0a <HAL_RCC_OscConfig+0x7a2>
 8005b2c:	58024400 	.word	0x58024400
 8005b30:	fffffc0c 	.word	0xfffffc0c
 8005b34:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005b38:	4b36      	ldr	r3, [pc, #216]	@ (8005c14 <HAL_RCC_OscConfig+0x7ac>)
 8005b3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b3c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005b3e:	4b35      	ldr	r3, [pc, #212]	@ (8005c14 <HAL_RCC_OscConfig+0x7ac>)
 8005b40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b42:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b48:	2b01      	cmp	r3, #1
 8005b4a:	d031      	beq.n	8005bb0 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b4c:	693b      	ldr	r3, [r7, #16]
 8005b4e:	f003 0203 	and.w	r2, r3, #3
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b56:	429a      	cmp	r2, r3
 8005b58:	d12a      	bne.n	8005bb0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005b5a:	693b      	ldr	r3, [r7, #16]
 8005b5c:	091b      	lsrs	r3, r3, #4
 8005b5e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b66:	429a      	cmp	r2, r3
 8005b68:	d122      	bne.n	8005bb0 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b74:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005b76:	429a      	cmp	r2, r3
 8005b78:	d11a      	bne.n	8005bb0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	0a5b      	lsrs	r3, r3, #9
 8005b7e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b86:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005b88:	429a      	cmp	r2, r3
 8005b8a:	d111      	bne.n	8005bb0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	0c1b      	lsrs	r3, r3, #16
 8005b90:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b98:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005b9a:	429a      	cmp	r2, r3
 8005b9c:	d108      	bne.n	8005bb0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	0e1b      	lsrs	r3, r3, #24
 8005ba2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005baa:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005bac:	429a      	cmp	r2, r3
 8005bae:	d001      	beq.n	8005bb4 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8005bb0:	2301      	movs	r3, #1
 8005bb2:	e02b      	b.n	8005c0c <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8005bb4:	4b17      	ldr	r3, [pc, #92]	@ (8005c14 <HAL_RCC_OscConfig+0x7ac>)
 8005bb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005bb8:	08db      	lsrs	r3, r3, #3
 8005bba:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005bbe:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005bc4:	693a      	ldr	r2, [r7, #16]
 8005bc6:	429a      	cmp	r2, r3
 8005bc8:	d01f      	beq.n	8005c0a <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8005bca:	4b12      	ldr	r3, [pc, #72]	@ (8005c14 <HAL_RCC_OscConfig+0x7ac>)
 8005bcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bce:	4a11      	ldr	r2, [pc, #68]	@ (8005c14 <HAL_RCC_OscConfig+0x7ac>)
 8005bd0:	f023 0301 	bic.w	r3, r3, #1
 8005bd4:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005bd6:	f7fd f95f 	bl	8002e98 <HAL_GetTick>
 8005bda:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005bdc:	bf00      	nop
 8005bde:	f7fd f95b 	bl	8002e98 <HAL_GetTick>
 8005be2:	4602      	mov	r2, r0
 8005be4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d0f9      	beq.n	8005bde <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005bea:	4b0a      	ldr	r3, [pc, #40]	@ (8005c14 <HAL_RCC_OscConfig+0x7ac>)
 8005bec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005bee:	4b0a      	ldr	r3, [pc, #40]	@ (8005c18 <HAL_RCC_OscConfig+0x7b0>)
 8005bf0:	4013      	ands	r3, r2
 8005bf2:	687a      	ldr	r2, [r7, #4]
 8005bf4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005bf6:	00d2      	lsls	r2, r2, #3
 8005bf8:	4906      	ldr	r1, [pc, #24]	@ (8005c14 <HAL_RCC_OscConfig+0x7ac>)
 8005bfa:	4313      	orrs	r3, r2
 8005bfc:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8005bfe:	4b05      	ldr	r3, [pc, #20]	@ (8005c14 <HAL_RCC_OscConfig+0x7ac>)
 8005c00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c02:	4a04      	ldr	r2, [pc, #16]	@ (8005c14 <HAL_RCC_OscConfig+0x7ac>)
 8005c04:	f043 0301 	orr.w	r3, r3, #1
 8005c08:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8005c0a:	2300      	movs	r3, #0
}
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	3730      	adds	r7, #48	@ 0x30
 8005c10:	46bd      	mov	sp, r7
 8005c12:	bd80      	pop	{r7, pc}
 8005c14:	58024400 	.word	0x58024400
 8005c18:	ffff0007 	.word	0xffff0007

08005c1c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b086      	sub	sp, #24
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
 8005c24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d101      	bne.n	8005c30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	e19c      	b.n	8005f6a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005c30:	4b8a      	ldr	r3, [pc, #552]	@ (8005e5c <HAL_RCC_ClockConfig+0x240>)
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f003 030f 	and.w	r3, r3, #15
 8005c38:	683a      	ldr	r2, [r7, #0]
 8005c3a:	429a      	cmp	r2, r3
 8005c3c:	d910      	bls.n	8005c60 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c3e:	4b87      	ldr	r3, [pc, #540]	@ (8005e5c <HAL_RCC_ClockConfig+0x240>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f023 020f 	bic.w	r2, r3, #15
 8005c46:	4985      	ldr	r1, [pc, #532]	@ (8005e5c <HAL_RCC_ClockConfig+0x240>)
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	4313      	orrs	r3, r2
 8005c4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c4e:	4b83      	ldr	r3, [pc, #524]	@ (8005e5c <HAL_RCC_ClockConfig+0x240>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f003 030f 	and.w	r3, r3, #15
 8005c56:	683a      	ldr	r2, [r7, #0]
 8005c58:	429a      	cmp	r2, r3
 8005c5a:	d001      	beq.n	8005c60 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	e184      	b.n	8005f6a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f003 0304 	and.w	r3, r3, #4
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d010      	beq.n	8005c8e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	691a      	ldr	r2, [r3, #16]
 8005c70:	4b7b      	ldr	r3, [pc, #492]	@ (8005e60 <HAL_RCC_ClockConfig+0x244>)
 8005c72:	699b      	ldr	r3, [r3, #24]
 8005c74:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005c78:	429a      	cmp	r2, r3
 8005c7a:	d908      	bls.n	8005c8e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005c7c:	4b78      	ldr	r3, [pc, #480]	@ (8005e60 <HAL_RCC_ClockConfig+0x244>)
 8005c7e:	699b      	ldr	r3, [r3, #24]
 8005c80:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	691b      	ldr	r3, [r3, #16]
 8005c88:	4975      	ldr	r1, [pc, #468]	@ (8005e60 <HAL_RCC_ClockConfig+0x244>)
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f003 0308 	and.w	r3, r3, #8
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d010      	beq.n	8005cbc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	695a      	ldr	r2, [r3, #20]
 8005c9e:	4b70      	ldr	r3, [pc, #448]	@ (8005e60 <HAL_RCC_ClockConfig+0x244>)
 8005ca0:	69db      	ldr	r3, [r3, #28]
 8005ca2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005ca6:	429a      	cmp	r2, r3
 8005ca8:	d908      	bls.n	8005cbc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005caa:	4b6d      	ldr	r3, [pc, #436]	@ (8005e60 <HAL_RCC_ClockConfig+0x244>)
 8005cac:	69db      	ldr	r3, [r3, #28]
 8005cae:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	695b      	ldr	r3, [r3, #20]
 8005cb6:	496a      	ldr	r1, [pc, #424]	@ (8005e60 <HAL_RCC_ClockConfig+0x244>)
 8005cb8:	4313      	orrs	r3, r2
 8005cba:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f003 0310 	and.w	r3, r3, #16
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d010      	beq.n	8005cea <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	699a      	ldr	r2, [r3, #24]
 8005ccc:	4b64      	ldr	r3, [pc, #400]	@ (8005e60 <HAL_RCC_ClockConfig+0x244>)
 8005cce:	69db      	ldr	r3, [r3, #28]
 8005cd0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005cd4:	429a      	cmp	r2, r3
 8005cd6:	d908      	bls.n	8005cea <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005cd8:	4b61      	ldr	r3, [pc, #388]	@ (8005e60 <HAL_RCC_ClockConfig+0x244>)
 8005cda:	69db      	ldr	r3, [r3, #28]
 8005cdc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	699b      	ldr	r3, [r3, #24]
 8005ce4:	495e      	ldr	r1, [pc, #376]	@ (8005e60 <HAL_RCC_ClockConfig+0x244>)
 8005ce6:	4313      	orrs	r3, r2
 8005ce8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f003 0320 	and.w	r3, r3, #32
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d010      	beq.n	8005d18 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	69da      	ldr	r2, [r3, #28]
 8005cfa:	4b59      	ldr	r3, [pc, #356]	@ (8005e60 <HAL_RCC_ClockConfig+0x244>)
 8005cfc:	6a1b      	ldr	r3, [r3, #32]
 8005cfe:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005d02:	429a      	cmp	r2, r3
 8005d04:	d908      	bls.n	8005d18 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005d06:	4b56      	ldr	r3, [pc, #344]	@ (8005e60 <HAL_RCC_ClockConfig+0x244>)
 8005d08:	6a1b      	ldr	r3, [r3, #32]
 8005d0a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	69db      	ldr	r3, [r3, #28]
 8005d12:	4953      	ldr	r1, [pc, #332]	@ (8005e60 <HAL_RCC_ClockConfig+0x244>)
 8005d14:	4313      	orrs	r3, r2
 8005d16:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f003 0302 	and.w	r3, r3, #2
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d010      	beq.n	8005d46 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	68da      	ldr	r2, [r3, #12]
 8005d28:	4b4d      	ldr	r3, [pc, #308]	@ (8005e60 <HAL_RCC_ClockConfig+0x244>)
 8005d2a:	699b      	ldr	r3, [r3, #24]
 8005d2c:	f003 030f 	and.w	r3, r3, #15
 8005d30:	429a      	cmp	r2, r3
 8005d32:	d908      	bls.n	8005d46 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d34:	4b4a      	ldr	r3, [pc, #296]	@ (8005e60 <HAL_RCC_ClockConfig+0x244>)
 8005d36:	699b      	ldr	r3, [r3, #24]
 8005d38:	f023 020f 	bic.w	r2, r3, #15
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	68db      	ldr	r3, [r3, #12]
 8005d40:	4947      	ldr	r1, [pc, #284]	@ (8005e60 <HAL_RCC_ClockConfig+0x244>)
 8005d42:	4313      	orrs	r3, r2
 8005d44:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f003 0301 	and.w	r3, r3, #1
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d055      	beq.n	8005dfe <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005d52:	4b43      	ldr	r3, [pc, #268]	@ (8005e60 <HAL_RCC_ClockConfig+0x244>)
 8005d54:	699b      	ldr	r3, [r3, #24]
 8005d56:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	689b      	ldr	r3, [r3, #8]
 8005d5e:	4940      	ldr	r1, [pc, #256]	@ (8005e60 <HAL_RCC_ClockConfig+0x244>)
 8005d60:	4313      	orrs	r3, r2
 8005d62:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	685b      	ldr	r3, [r3, #4]
 8005d68:	2b02      	cmp	r3, #2
 8005d6a:	d107      	bne.n	8005d7c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005d6c:	4b3c      	ldr	r3, [pc, #240]	@ (8005e60 <HAL_RCC_ClockConfig+0x244>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d121      	bne.n	8005dbc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005d78:	2301      	movs	r3, #1
 8005d7a:	e0f6      	b.n	8005f6a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	685b      	ldr	r3, [r3, #4]
 8005d80:	2b03      	cmp	r3, #3
 8005d82:	d107      	bne.n	8005d94 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005d84:	4b36      	ldr	r3, [pc, #216]	@ (8005e60 <HAL_RCC_ClockConfig+0x244>)
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d115      	bne.n	8005dbc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005d90:	2301      	movs	r3, #1
 8005d92:	e0ea      	b.n	8005f6a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	685b      	ldr	r3, [r3, #4]
 8005d98:	2b01      	cmp	r3, #1
 8005d9a:	d107      	bne.n	8005dac <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005d9c:	4b30      	ldr	r3, [pc, #192]	@ (8005e60 <HAL_RCC_ClockConfig+0x244>)
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d109      	bne.n	8005dbc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005da8:	2301      	movs	r3, #1
 8005daa:	e0de      	b.n	8005f6a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005dac:	4b2c      	ldr	r3, [pc, #176]	@ (8005e60 <HAL_RCC_ClockConfig+0x244>)
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f003 0304 	and.w	r3, r3, #4
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d101      	bne.n	8005dbc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005db8:	2301      	movs	r3, #1
 8005dba:	e0d6      	b.n	8005f6a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005dbc:	4b28      	ldr	r3, [pc, #160]	@ (8005e60 <HAL_RCC_ClockConfig+0x244>)
 8005dbe:	691b      	ldr	r3, [r3, #16]
 8005dc0:	f023 0207 	bic.w	r2, r3, #7
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	685b      	ldr	r3, [r3, #4]
 8005dc8:	4925      	ldr	r1, [pc, #148]	@ (8005e60 <HAL_RCC_ClockConfig+0x244>)
 8005dca:	4313      	orrs	r3, r2
 8005dcc:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005dce:	f7fd f863 	bl	8002e98 <HAL_GetTick>
 8005dd2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005dd4:	e00a      	b.n	8005dec <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005dd6:	f7fd f85f 	bl	8002e98 <HAL_GetTick>
 8005dda:	4602      	mov	r2, r0
 8005ddc:	697b      	ldr	r3, [r7, #20]
 8005dde:	1ad3      	subs	r3, r2, r3
 8005de0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d901      	bls.n	8005dec <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005de8:	2303      	movs	r3, #3
 8005dea:	e0be      	b.n	8005f6a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005dec:	4b1c      	ldr	r3, [pc, #112]	@ (8005e60 <HAL_RCC_ClockConfig+0x244>)
 8005dee:	691b      	ldr	r3, [r3, #16]
 8005df0:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	685b      	ldr	r3, [r3, #4]
 8005df8:	00db      	lsls	r3, r3, #3
 8005dfa:	429a      	cmp	r2, r3
 8005dfc:	d1eb      	bne.n	8005dd6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f003 0302 	and.w	r3, r3, #2
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d010      	beq.n	8005e2c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	68da      	ldr	r2, [r3, #12]
 8005e0e:	4b14      	ldr	r3, [pc, #80]	@ (8005e60 <HAL_RCC_ClockConfig+0x244>)
 8005e10:	699b      	ldr	r3, [r3, #24]
 8005e12:	f003 030f 	and.w	r3, r3, #15
 8005e16:	429a      	cmp	r2, r3
 8005e18:	d208      	bcs.n	8005e2c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005e1a:	4b11      	ldr	r3, [pc, #68]	@ (8005e60 <HAL_RCC_ClockConfig+0x244>)
 8005e1c:	699b      	ldr	r3, [r3, #24]
 8005e1e:	f023 020f 	bic.w	r2, r3, #15
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	68db      	ldr	r3, [r3, #12]
 8005e26:	490e      	ldr	r1, [pc, #56]	@ (8005e60 <HAL_RCC_ClockConfig+0x244>)
 8005e28:	4313      	orrs	r3, r2
 8005e2a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005e2c:	4b0b      	ldr	r3, [pc, #44]	@ (8005e5c <HAL_RCC_ClockConfig+0x240>)
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f003 030f 	and.w	r3, r3, #15
 8005e34:	683a      	ldr	r2, [r7, #0]
 8005e36:	429a      	cmp	r2, r3
 8005e38:	d214      	bcs.n	8005e64 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e3a:	4b08      	ldr	r3, [pc, #32]	@ (8005e5c <HAL_RCC_ClockConfig+0x240>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f023 020f 	bic.w	r2, r3, #15
 8005e42:	4906      	ldr	r1, [pc, #24]	@ (8005e5c <HAL_RCC_ClockConfig+0x240>)
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	4313      	orrs	r3, r2
 8005e48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e4a:	4b04      	ldr	r3, [pc, #16]	@ (8005e5c <HAL_RCC_ClockConfig+0x240>)
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f003 030f 	and.w	r3, r3, #15
 8005e52:	683a      	ldr	r2, [r7, #0]
 8005e54:	429a      	cmp	r2, r3
 8005e56:	d005      	beq.n	8005e64 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005e58:	2301      	movs	r3, #1
 8005e5a:	e086      	b.n	8005f6a <HAL_RCC_ClockConfig+0x34e>
 8005e5c:	52002000 	.word	0x52002000
 8005e60:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f003 0304 	and.w	r3, r3, #4
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d010      	beq.n	8005e92 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	691a      	ldr	r2, [r3, #16]
 8005e74:	4b3f      	ldr	r3, [pc, #252]	@ (8005f74 <HAL_RCC_ClockConfig+0x358>)
 8005e76:	699b      	ldr	r3, [r3, #24]
 8005e78:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005e7c:	429a      	cmp	r2, r3
 8005e7e:	d208      	bcs.n	8005e92 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005e80:	4b3c      	ldr	r3, [pc, #240]	@ (8005f74 <HAL_RCC_ClockConfig+0x358>)
 8005e82:	699b      	ldr	r3, [r3, #24]
 8005e84:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	691b      	ldr	r3, [r3, #16]
 8005e8c:	4939      	ldr	r1, [pc, #228]	@ (8005f74 <HAL_RCC_ClockConfig+0x358>)
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f003 0308 	and.w	r3, r3, #8
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d010      	beq.n	8005ec0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	695a      	ldr	r2, [r3, #20]
 8005ea2:	4b34      	ldr	r3, [pc, #208]	@ (8005f74 <HAL_RCC_ClockConfig+0x358>)
 8005ea4:	69db      	ldr	r3, [r3, #28]
 8005ea6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005eaa:	429a      	cmp	r2, r3
 8005eac:	d208      	bcs.n	8005ec0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005eae:	4b31      	ldr	r3, [pc, #196]	@ (8005f74 <HAL_RCC_ClockConfig+0x358>)
 8005eb0:	69db      	ldr	r3, [r3, #28]
 8005eb2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	695b      	ldr	r3, [r3, #20]
 8005eba:	492e      	ldr	r1, [pc, #184]	@ (8005f74 <HAL_RCC_ClockConfig+0x358>)
 8005ebc:	4313      	orrs	r3, r2
 8005ebe:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f003 0310 	and.w	r3, r3, #16
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d010      	beq.n	8005eee <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	699a      	ldr	r2, [r3, #24]
 8005ed0:	4b28      	ldr	r3, [pc, #160]	@ (8005f74 <HAL_RCC_ClockConfig+0x358>)
 8005ed2:	69db      	ldr	r3, [r3, #28]
 8005ed4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005ed8:	429a      	cmp	r2, r3
 8005eda:	d208      	bcs.n	8005eee <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005edc:	4b25      	ldr	r3, [pc, #148]	@ (8005f74 <HAL_RCC_ClockConfig+0x358>)
 8005ede:	69db      	ldr	r3, [r3, #28]
 8005ee0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	699b      	ldr	r3, [r3, #24]
 8005ee8:	4922      	ldr	r1, [pc, #136]	@ (8005f74 <HAL_RCC_ClockConfig+0x358>)
 8005eea:	4313      	orrs	r3, r2
 8005eec:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f003 0320 	and.w	r3, r3, #32
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d010      	beq.n	8005f1c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	69da      	ldr	r2, [r3, #28]
 8005efe:	4b1d      	ldr	r3, [pc, #116]	@ (8005f74 <HAL_RCC_ClockConfig+0x358>)
 8005f00:	6a1b      	ldr	r3, [r3, #32]
 8005f02:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005f06:	429a      	cmp	r2, r3
 8005f08:	d208      	bcs.n	8005f1c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005f0a:	4b1a      	ldr	r3, [pc, #104]	@ (8005f74 <HAL_RCC_ClockConfig+0x358>)
 8005f0c:	6a1b      	ldr	r3, [r3, #32]
 8005f0e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	69db      	ldr	r3, [r3, #28]
 8005f16:	4917      	ldr	r1, [pc, #92]	@ (8005f74 <HAL_RCC_ClockConfig+0x358>)
 8005f18:	4313      	orrs	r3, r2
 8005f1a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005f1c:	f000 f834 	bl	8005f88 <HAL_RCC_GetSysClockFreq>
 8005f20:	4602      	mov	r2, r0
 8005f22:	4b14      	ldr	r3, [pc, #80]	@ (8005f74 <HAL_RCC_ClockConfig+0x358>)
 8005f24:	699b      	ldr	r3, [r3, #24]
 8005f26:	0a1b      	lsrs	r3, r3, #8
 8005f28:	f003 030f 	and.w	r3, r3, #15
 8005f2c:	4912      	ldr	r1, [pc, #72]	@ (8005f78 <HAL_RCC_ClockConfig+0x35c>)
 8005f2e:	5ccb      	ldrb	r3, [r1, r3]
 8005f30:	f003 031f 	and.w	r3, r3, #31
 8005f34:	fa22 f303 	lsr.w	r3, r2, r3
 8005f38:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005f3a:	4b0e      	ldr	r3, [pc, #56]	@ (8005f74 <HAL_RCC_ClockConfig+0x358>)
 8005f3c:	699b      	ldr	r3, [r3, #24]
 8005f3e:	f003 030f 	and.w	r3, r3, #15
 8005f42:	4a0d      	ldr	r2, [pc, #52]	@ (8005f78 <HAL_RCC_ClockConfig+0x35c>)
 8005f44:	5cd3      	ldrb	r3, [r2, r3]
 8005f46:	f003 031f 	and.w	r3, r3, #31
 8005f4a:	693a      	ldr	r2, [r7, #16]
 8005f4c:	fa22 f303 	lsr.w	r3, r2, r3
 8005f50:	4a0a      	ldr	r2, [pc, #40]	@ (8005f7c <HAL_RCC_ClockConfig+0x360>)
 8005f52:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005f54:	4a0a      	ldr	r2, [pc, #40]	@ (8005f80 <HAL_RCC_ClockConfig+0x364>)
 8005f56:	693b      	ldr	r3, [r7, #16]
 8005f58:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005f5a:	4b0a      	ldr	r3, [pc, #40]	@ (8005f84 <HAL_RCC_ClockConfig+0x368>)
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	4618      	mov	r0, r3
 8005f60:	f7fc ff50 	bl	8002e04 <HAL_InitTick>
 8005f64:	4603      	mov	r3, r0
 8005f66:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005f68:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	3718      	adds	r7, #24
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	bd80      	pop	{r7, pc}
 8005f72:	bf00      	nop
 8005f74:	58024400 	.word	0x58024400
 8005f78:	08012658 	.word	0x08012658
 8005f7c:	24000028 	.word	0x24000028
 8005f80:	24000024 	.word	0x24000024
 8005f84:	2400005c 	.word	0x2400005c

08005f88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005f88:	b480      	push	{r7}
 8005f8a:	b089      	sub	sp, #36	@ 0x24
 8005f8c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005f8e:	4bb3      	ldr	r3, [pc, #716]	@ (800625c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f90:	691b      	ldr	r3, [r3, #16]
 8005f92:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005f96:	2b18      	cmp	r3, #24
 8005f98:	f200 8155 	bhi.w	8006246 <HAL_RCC_GetSysClockFreq+0x2be>
 8005f9c:	a201      	add	r2, pc, #4	@ (adr r2, 8005fa4 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005f9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fa2:	bf00      	nop
 8005fa4:	08006009 	.word	0x08006009
 8005fa8:	08006247 	.word	0x08006247
 8005fac:	08006247 	.word	0x08006247
 8005fb0:	08006247 	.word	0x08006247
 8005fb4:	08006247 	.word	0x08006247
 8005fb8:	08006247 	.word	0x08006247
 8005fbc:	08006247 	.word	0x08006247
 8005fc0:	08006247 	.word	0x08006247
 8005fc4:	0800602f 	.word	0x0800602f
 8005fc8:	08006247 	.word	0x08006247
 8005fcc:	08006247 	.word	0x08006247
 8005fd0:	08006247 	.word	0x08006247
 8005fd4:	08006247 	.word	0x08006247
 8005fd8:	08006247 	.word	0x08006247
 8005fdc:	08006247 	.word	0x08006247
 8005fe0:	08006247 	.word	0x08006247
 8005fe4:	08006035 	.word	0x08006035
 8005fe8:	08006247 	.word	0x08006247
 8005fec:	08006247 	.word	0x08006247
 8005ff0:	08006247 	.word	0x08006247
 8005ff4:	08006247 	.word	0x08006247
 8005ff8:	08006247 	.word	0x08006247
 8005ffc:	08006247 	.word	0x08006247
 8006000:	08006247 	.word	0x08006247
 8006004:	0800603b 	.word	0x0800603b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006008:	4b94      	ldr	r3, [pc, #592]	@ (800625c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f003 0320 	and.w	r3, r3, #32
 8006010:	2b00      	cmp	r3, #0
 8006012:	d009      	beq.n	8006028 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006014:	4b91      	ldr	r3, [pc, #580]	@ (800625c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	08db      	lsrs	r3, r3, #3
 800601a:	f003 0303 	and.w	r3, r3, #3
 800601e:	4a90      	ldr	r2, [pc, #576]	@ (8006260 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006020:	fa22 f303 	lsr.w	r3, r2, r3
 8006024:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8006026:	e111      	b.n	800624c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006028:	4b8d      	ldr	r3, [pc, #564]	@ (8006260 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800602a:	61bb      	str	r3, [r7, #24]
      break;
 800602c:	e10e      	b.n	800624c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800602e:	4b8d      	ldr	r3, [pc, #564]	@ (8006264 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006030:	61bb      	str	r3, [r7, #24]
      break;
 8006032:	e10b      	b.n	800624c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8006034:	4b8c      	ldr	r3, [pc, #560]	@ (8006268 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006036:	61bb      	str	r3, [r7, #24]
      break;
 8006038:	e108      	b.n	800624c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800603a:	4b88      	ldr	r3, [pc, #544]	@ (800625c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800603c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800603e:	f003 0303 	and.w	r3, r3, #3
 8006042:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006044:	4b85      	ldr	r3, [pc, #532]	@ (800625c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006046:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006048:	091b      	lsrs	r3, r3, #4
 800604a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800604e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006050:	4b82      	ldr	r3, [pc, #520]	@ (800625c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006052:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006054:	f003 0301 	and.w	r3, r3, #1
 8006058:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800605a:	4b80      	ldr	r3, [pc, #512]	@ (800625c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800605c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800605e:	08db      	lsrs	r3, r3, #3
 8006060:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006064:	68fa      	ldr	r2, [r7, #12]
 8006066:	fb02 f303 	mul.w	r3, r2, r3
 800606a:	ee07 3a90 	vmov	s15, r3
 800606e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006072:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8006076:	693b      	ldr	r3, [r7, #16]
 8006078:	2b00      	cmp	r3, #0
 800607a:	f000 80e1 	beq.w	8006240 <HAL_RCC_GetSysClockFreq+0x2b8>
 800607e:	697b      	ldr	r3, [r7, #20]
 8006080:	2b02      	cmp	r3, #2
 8006082:	f000 8083 	beq.w	800618c <HAL_RCC_GetSysClockFreq+0x204>
 8006086:	697b      	ldr	r3, [r7, #20]
 8006088:	2b02      	cmp	r3, #2
 800608a:	f200 80a1 	bhi.w	80061d0 <HAL_RCC_GetSysClockFreq+0x248>
 800608e:	697b      	ldr	r3, [r7, #20]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d003      	beq.n	800609c <HAL_RCC_GetSysClockFreq+0x114>
 8006094:	697b      	ldr	r3, [r7, #20]
 8006096:	2b01      	cmp	r3, #1
 8006098:	d056      	beq.n	8006148 <HAL_RCC_GetSysClockFreq+0x1c0>
 800609a:	e099      	b.n	80061d0 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800609c:	4b6f      	ldr	r3, [pc, #444]	@ (800625c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f003 0320 	and.w	r3, r3, #32
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d02d      	beq.n	8006104 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80060a8:	4b6c      	ldr	r3, [pc, #432]	@ (800625c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	08db      	lsrs	r3, r3, #3
 80060ae:	f003 0303 	and.w	r3, r3, #3
 80060b2:	4a6b      	ldr	r2, [pc, #428]	@ (8006260 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80060b4:	fa22 f303 	lsr.w	r3, r2, r3
 80060b8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	ee07 3a90 	vmov	s15, r3
 80060c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060c4:	693b      	ldr	r3, [r7, #16]
 80060c6:	ee07 3a90 	vmov	s15, r3
 80060ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060d2:	4b62      	ldr	r3, [pc, #392]	@ (800625c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80060d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060da:	ee07 3a90 	vmov	s15, r3
 80060de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060e2:	ed97 6a02 	vldr	s12, [r7, #8]
 80060e6:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800626c <HAL_RCC_GetSysClockFreq+0x2e4>
 80060ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80060f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060fe:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8006102:	e087      	b.n	8006214 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006104:	693b      	ldr	r3, [r7, #16]
 8006106:	ee07 3a90 	vmov	s15, r3
 800610a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800610e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8006270 <HAL_RCC_GetSysClockFreq+0x2e8>
 8006112:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006116:	4b51      	ldr	r3, [pc, #324]	@ (800625c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800611a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800611e:	ee07 3a90 	vmov	s15, r3
 8006122:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006126:	ed97 6a02 	vldr	s12, [r7, #8]
 800612a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800626c <HAL_RCC_GetSysClockFreq+0x2e4>
 800612e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006132:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006136:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800613a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800613e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006142:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006146:	e065      	b.n	8006214 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006148:	693b      	ldr	r3, [r7, #16]
 800614a:	ee07 3a90 	vmov	s15, r3
 800614e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006152:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8006274 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006156:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800615a:	4b40      	ldr	r3, [pc, #256]	@ (800625c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800615c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800615e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006162:	ee07 3a90 	vmov	s15, r3
 8006166:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800616a:	ed97 6a02 	vldr	s12, [r7, #8]
 800616e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800626c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006172:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006176:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800617a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800617e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006182:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006186:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800618a:	e043      	b.n	8006214 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800618c:	693b      	ldr	r3, [r7, #16]
 800618e:	ee07 3a90 	vmov	s15, r3
 8006192:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006196:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8006278 <HAL_RCC_GetSysClockFreq+0x2f0>
 800619a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800619e:	4b2f      	ldr	r3, [pc, #188]	@ (800625c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80061a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061a6:	ee07 3a90 	vmov	s15, r3
 80061aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061ae:	ed97 6a02 	vldr	s12, [r7, #8]
 80061b2:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800626c <HAL_RCC_GetSysClockFreq+0x2e4>
 80061b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80061ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80061be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80061c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80061c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061ca:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80061ce:	e021      	b.n	8006214 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80061d0:	693b      	ldr	r3, [r7, #16]
 80061d2:	ee07 3a90 	vmov	s15, r3
 80061d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061da:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8006274 <HAL_RCC_GetSysClockFreq+0x2ec>
 80061de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061e2:	4b1e      	ldr	r3, [pc, #120]	@ (800625c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80061e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061ea:	ee07 3a90 	vmov	s15, r3
 80061ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061f2:	ed97 6a02 	vldr	s12, [r7, #8]
 80061f6:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800626c <HAL_RCC_GetSysClockFreq+0x2e4>
 80061fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80061fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006202:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006206:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800620a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800620e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006212:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8006214:	4b11      	ldr	r3, [pc, #68]	@ (800625c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006216:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006218:	0a5b      	lsrs	r3, r3, #9
 800621a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800621e:	3301      	adds	r3, #1
 8006220:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	ee07 3a90 	vmov	s15, r3
 8006228:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800622c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006230:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006234:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006238:	ee17 3a90 	vmov	r3, s15
 800623c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800623e:	e005      	b.n	800624c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8006240:	2300      	movs	r3, #0
 8006242:	61bb      	str	r3, [r7, #24]
      break;
 8006244:	e002      	b.n	800624c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8006246:	4b07      	ldr	r3, [pc, #28]	@ (8006264 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006248:	61bb      	str	r3, [r7, #24]
      break;
 800624a:	bf00      	nop
  }

  return sysclockfreq;
 800624c:	69bb      	ldr	r3, [r7, #24]
}
 800624e:	4618      	mov	r0, r3
 8006250:	3724      	adds	r7, #36	@ 0x24
 8006252:	46bd      	mov	sp, r7
 8006254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006258:	4770      	bx	lr
 800625a:	bf00      	nop
 800625c:	58024400 	.word	0x58024400
 8006260:	03d09000 	.word	0x03d09000
 8006264:	003d0900 	.word	0x003d0900
 8006268:	017d7840 	.word	0x017d7840
 800626c:	46000000 	.word	0x46000000
 8006270:	4c742400 	.word	0x4c742400
 8006274:	4a742400 	.word	0x4a742400
 8006278:	4bbebc20 	.word	0x4bbebc20

0800627c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b082      	sub	sp, #8
 8006280:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006282:	f7ff fe81 	bl	8005f88 <HAL_RCC_GetSysClockFreq>
 8006286:	4602      	mov	r2, r0
 8006288:	4b10      	ldr	r3, [pc, #64]	@ (80062cc <HAL_RCC_GetHCLKFreq+0x50>)
 800628a:	699b      	ldr	r3, [r3, #24]
 800628c:	0a1b      	lsrs	r3, r3, #8
 800628e:	f003 030f 	and.w	r3, r3, #15
 8006292:	490f      	ldr	r1, [pc, #60]	@ (80062d0 <HAL_RCC_GetHCLKFreq+0x54>)
 8006294:	5ccb      	ldrb	r3, [r1, r3]
 8006296:	f003 031f 	and.w	r3, r3, #31
 800629a:	fa22 f303 	lsr.w	r3, r2, r3
 800629e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80062a0:	4b0a      	ldr	r3, [pc, #40]	@ (80062cc <HAL_RCC_GetHCLKFreq+0x50>)
 80062a2:	699b      	ldr	r3, [r3, #24]
 80062a4:	f003 030f 	and.w	r3, r3, #15
 80062a8:	4a09      	ldr	r2, [pc, #36]	@ (80062d0 <HAL_RCC_GetHCLKFreq+0x54>)
 80062aa:	5cd3      	ldrb	r3, [r2, r3]
 80062ac:	f003 031f 	and.w	r3, r3, #31
 80062b0:	687a      	ldr	r2, [r7, #4]
 80062b2:	fa22 f303 	lsr.w	r3, r2, r3
 80062b6:	4a07      	ldr	r2, [pc, #28]	@ (80062d4 <HAL_RCC_GetHCLKFreq+0x58>)
 80062b8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80062ba:	4a07      	ldr	r2, [pc, #28]	@ (80062d8 <HAL_RCC_GetHCLKFreq+0x5c>)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80062c0:	4b04      	ldr	r3, [pc, #16]	@ (80062d4 <HAL_RCC_GetHCLKFreq+0x58>)
 80062c2:	681b      	ldr	r3, [r3, #0]
}
 80062c4:	4618      	mov	r0, r3
 80062c6:	3708      	adds	r7, #8
 80062c8:	46bd      	mov	sp, r7
 80062ca:	bd80      	pop	{r7, pc}
 80062cc:	58024400 	.word	0x58024400
 80062d0:	08012658 	.word	0x08012658
 80062d4:	24000028 	.word	0x24000028
 80062d8:	24000024 	.word	0x24000024

080062dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80062e0:	f7ff ffcc 	bl	800627c <HAL_RCC_GetHCLKFreq>
 80062e4:	4602      	mov	r2, r0
 80062e6:	4b06      	ldr	r3, [pc, #24]	@ (8006300 <HAL_RCC_GetPCLK1Freq+0x24>)
 80062e8:	69db      	ldr	r3, [r3, #28]
 80062ea:	091b      	lsrs	r3, r3, #4
 80062ec:	f003 0307 	and.w	r3, r3, #7
 80062f0:	4904      	ldr	r1, [pc, #16]	@ (8006304 <HAL_RCC_GetPCLK1Freq+0x28>)
 80062f2:	5ccb      	ldrb	r3, [r1, r3]
 80062f4:	f003 031f 	and.w	r3, r3, #31
 80062f8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80062fc:	4618      	mov	r0, r3
 80062fe:	bd80      	pop	{r7, pc}
 8006300:	58024400 	.word	0x58024400
 8006304:	08012658 	.word	0x08012658

08006308 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800630c:	f7ff ffb6 	bl	800627c <HAL_RCC_GetHCLKFreq>
 8006310:	4602      	mov	r2, r0
 8006312:	4b06      	ldr	r3, [pc, #24]	@ (800632c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006314:	69db      	ldr	r3, [r3, #28]
 8006316:	0a1b      	lsrs	r3, r3, #8
 8006318:	f003 0307 	and.w	r3, r3, #7
 800631c:	4904      	ldr	r1, [pc, #16]	@ (8006330 <HAL_RCC_GetPCLK2Freq+0x28>)
 800631e:	5ccb      	ldrb	r3, [r1, r3]
 8006320:	f003 031f 	and.w	r3, r3, #31
 8006324:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006328:	4618      	mov	r0, r3
 800632a:	bd80      	pop	{r7, pc}
 800632c:	58024400 	.word	0x58024400
 8006330:	08012658 	.word	0x08012658

08006334 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006334:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006338:	b0c6      	sub	sp, #280	@ 0x118
 800633a:	af00      	add	r7, sp, #0
 800633c:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006340:	2300      	movs	r3, #0
 8006342:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006346:	2300      	movs	r3, #0
 8006348:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800634c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006354:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8006358:	2500      	movs	r5, #0
 800635a:	ea54 0305 	orrs.w	r3, r4, r5
 800635e:	d049      	beq.n	80063f4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8006360:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006364:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006366:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800636a:	d02f      	beq.n	80063cc <HAL_RCCEx_PeriphCLKConfig+0x98>
 800636c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006370:	d828      	bhi.n	80063c4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006372:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006376:	d01a      	beq.n	80063ae <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006378:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800637c:	d822      	bhi.n	80063c4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800637e:	2b00      	cmp	r3, #0
 8006380:	d003      	beq.n	800638a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006382:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006386:	d007      	beq.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006388:	e01c      	b.n	80063c4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800638a:	4bab      	ldr	r3, [pc, #684]	@ (8006638 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800638c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800638e:	4aaa      	ldr	r2, [pc, #680]	@ (8006638 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006390:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006394:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006396:	e01a      	b.n	80063ce <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006398:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800639c:	3308      	adds	r3, #8
 800639e:	2102      	movs	r1, #2
 80063a0:	4618      	mov	r0, r3
 80063a2:	f001 fc25 	bl	8007bf0 <RCCEx_PLL2_Config>
 80063a6:	4603      	mov	r3, r0
 80063a8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80063ac:	e00f      	b.n	80063ce <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80063ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063b2:	3328      	adds	r3, #40	@ 0x28
 80063b4:	2102      	movs	r1, #2
 80063b6:	4618      	mov	r0, r3
 80063b8:	f001 fccc 	bl	8007d54 <RCCEx_PLL3_Config>
 80063bc:	4603      	mov	r3, r0
 80063be:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80063c2:	e004      	b.n	80063ce <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80063c4:	2301      	movs	r3, #1
 80063c6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80063ca:	e000      	b.n	80063ce <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80063cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063ce:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d10a      	bne.n	80063ec <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80063d6:	4b98      	ldr	r3, [pc, #608]	@ (8006638 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80063d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80063da:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80063de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063e2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80063e4:	4a94      	ldr	r2, [pc, #592]	@ (8006638 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80063e6:	430b      	orrs	r3, r1
 80063e8:	6513      	str	r3, [r2, #80]	@ 0x50
 80063ea:	e003      	b.n	80063f4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063ec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80063f0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80063f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063fc:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8006400:	f04f 0900 	mov.w	r9, #0
 8006404:	ea58 0309 	orrs.w	r3, r8, r9
 8006408:	d047      	beq.n	800649a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800640a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800640e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006410:	2b04      	cmp	r3, #4
 8006412:	d82a      	bhi.n	800646a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8006414:	a201      	add	r2, pc, #4	@ (adr r2, 800641c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8006416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800641a:	bf00      	nop
 800641c:	08006431 	.word	0x08006431
 8006420:	0800643f 	.word	0x0800643f
 8006424:	08006455 	.word	0x08006455
 8006428:	08006473 	.word	0x08006473
 800642c:	08006473 	.word	0x08006473
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006430:	4b81      	ldr	r3, [pc, #516]	@ (8006638 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006432:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006434:	4a80      	ldr	r2, [pc, #512]	@ (8006638 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006436:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800643a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800643c:	e01a      	b.n	8006474 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800643e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006442:	3308      	adds	r3, #8
 8006444:	2100      	movs	r1, #0
 8006446:	4618      	mov	r0, r3
 8006448:	f001 fbd2 	bl	8007bf0 <RCCEx_PLL2_Config>
 800644c:	4603      	mov	r3, r0
 800644e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006452:	e00f      	b.n	8006474 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006454:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006458:	3328      	adds	r3, #40	@ 0x28
 800645a:	2100      	movs	r1, #0
 800645c:	4618      	mov	r0, r3
 800645e:	f001 fc79 	bl	8007d54 <RCCEx_PLL3_Config>
 8006462:	4603      	mov	r3, r0
 8006464:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006468:	e004      	b.n	8006474 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800646a:	2301      	movs	r3, #1
 800646c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006470:	e000      	b.n	8006474 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8006472:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006474:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006478:	2b00      	cmp	r3, #0
 800647a:	d10a      	bne.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800647c:	4b6e      	ldr	r3, [pc, #440]	@ (8006638 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800647e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006480:	f023 0107 	bic.w	r1, r3, #7
 8006484:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006488:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800648a:	4a6b      	ldr	r2, [pc, #428]	@ (8006638 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800648c:	430b      	orrs	r3, r1
 800648e:	6513      	str	r3, [r2, #80]	@ 0x50
 8006490:	e003      	b.n	800649a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006492:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006496:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800649a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800649e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064a2:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 80064a6:	f04f 0b00 	mov.w	fp, #0
 80064aa:	ea5a 030b 	orrs.w	r3, sl, fp
 80064ae:	d05b      	beq.n	8006568 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80064b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064b4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80064b8:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80064bc:	d03b      	beq.n	8006536 <HAL_RCCEx_PeriphCLKConfig+0x202>
 80064be:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80064c2:	d834      	bhi.n	800652e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80064c4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80064c8:	d037      	beq.n	800653a <HAL_RCCEx_PeriphCLKConfig+0x206>
 80064ca:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80064ce:	d82e      	bhi.n	800652e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80064d0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80064d4:	d033      	beq.n	800653e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80064d6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80064da:	d828      	bhi.n	800652e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80064dc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80064e0:	d01a      	beq.n	8006518 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 80064e2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80064e6:	d822      	bhi.n	800652e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d003      	beq.n	80064f4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 80064ec:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80064f0:	d007      	beq.n	8006502 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 80064f2:	e01c      	b.n	800652e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80064f4:	4b50      	ldr	r3, [pc, #320]	@ (8006638 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80064f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064f8:	4a4f      	ldr	r2, [pc, #316]	@ (8006638 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80064fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80064fe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006500:	e01e      	b.n	8006540 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006502:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006506:	3308      	adds	r3, #8
 8006508:	2100      	movs	r1, #0
 800650a:	4618      	mov	r0, r3
 800650c:	f001 fb70 	bl	8007bf0 <RCCEx_PLL2_Config>
 8006510:	4603      	mov	r3, r0
 8006512:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006516:	e013      	b.n	8006540 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006518:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800651c:	3328      	adds	r3, #40	@ 0x28
 800651e:	2100      	movs	r1, #0
 8006520:	4618      	mov	r0, r3
 8006522:	f001 fc17 	bl	8007d54 <RCCEx_PLL3_Config>
 8006526:	4603      	mov	r3, r0
 8006528:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800652c:	e008      	b.n	8006540 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800652e:	2301      	movs	r3, #1
 8006530:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006534:	e004      	b.n	8006540 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8006536:	bf00      	nop
 8006538:	e002      	b.n	8006540 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800653a:	bf00      	nop
 800653c:	e000      	b.n	8006540 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800653e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006540:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006544:	2b00      	cmp	r3, #0
 8006546:	d10b      	bne.n	8006560 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006548:	4b3b      	ldr	r3, [pc, #236]	@ (8006638 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800654a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800654c:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8006550:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006554:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006558:	4a37      	ldr	r2, [pc, #220]	@ (8006638 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800655a:	430b      	orrs	r3, r1
 800655c:	6593      	str	r3, [r2, #88]	@ 0x58
 800655e:	e003      	b.n	8006568 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006560:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006564:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006568:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800656c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006570:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8006574:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006578:	2300      	movs	r3, #0
 800657a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800657e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8006582:	460b      	mov	r3, r1
 8006584:	4313      	orrs	r3, r2
 8006586:	d05d      	beq.n	8006644 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8006588:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800658c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006590:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8006594:	d03b      	beq.n	800660e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8006596:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800659a:	d834      	bhi.n	8006606 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800659c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80065a0:	d037      	beq.n	8006612 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 80065a2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80065a6:	d82e      	bhi.n	8006606 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80065a8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80065ac:	d033      	beq.n	8006616 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 80065ae:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80065b2:	d828      	bhi.n	8006606 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80065b4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80065b8:	d01a      	beq.n	80065f0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 80065ba:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80065be:	d822      	bhi.n	8006606 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d003      	beq.n	80065cc <HAL_RCCEx_PeriphCLKConfig+0x298>
 80065c4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80065c8:	d007      	beq.n	80065da <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80065ca:	e01c      	b.n	8006606 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80065cc:	4b1a      	ldr	r3, [pc, #104]	@ (8006638 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80065ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065d0:	4a19      	ldr	r2, [pc, #100]	@ (8006638 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80065d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80065d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80065d8:	e01e      	b.n	8006618 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80065da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065de:	3308      	adds	r3, #8
 80065e0:	2100      	movs	r1, #0
 80065e2:	4618      	mov	r0, r3
 80065e4:	f001 fb04 	bl	8007bf0 <RCCEx_PLL2_Config>
 80065e8:	4603      	mov	r3, r0
 80065ea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80065ee:	e013      	b.n	8006618 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80065f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065f4:	3328      	adds	r3, #40	@ 0x28
 80065f6:	2100      	movs	r1, #0
 80065f8:	4618      	mov	r0, r3
 80065fa:	f001 fbab 	bl	8007d54 <RCCEx_PLL3_Config>
 80065fe:	4603      	mov	r3, r0
 8006600:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006604:	e008      	b.n	8006618 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006606:	2301      	movs	r3, #1
 8006608:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800660c:	e004      	b.n	8006618 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800660e:	bf00      	nop
 8006610:	e002      	b.n	8006618 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8006612:	bf00      	nop
 8006614:	e000      	b.n	8006618 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8006616:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006618:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800661c:	2b00      	cmp	r3, #0
 800661e:	d10d      	bne.n	800663c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006620:	4b05      	ldr	r3, [pc, #20]	@ (8006638 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006622:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006624:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8006628:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800662c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006630:	4a01      	ldr	r2, [pc, #4]	@ (8006638 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006632:	430b      	orrs	r3, r1
 8006634:	6593      	str	r3, [r2, #88]	@ 0x58
 8006636:	e005      	b.n	8006644 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8006638:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800663c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006640:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006644:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800664c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8006650:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006654:	2300      	movs	r3, #0
 8006656:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800665a:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800665e:	460b      	mov	r3, r1
 8006660:	4313      	orrs	r3, r2
 8006662:	d03a      	beq.n	80066da <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8006664:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006668:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800666a:	2b30      	cmp	r3, #48	@ 0x30
 800666c:	d01f      	beq.n	80066ae <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800666e:	2b30      	cmp	r3, #48	@ 0x30
 8006670:	d819      	bhi.n	80066a6 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8006672:	2b20      	cmp	r3, #32
 8006674:	d00c      	beq.n	8006690 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8006676:	2b20      	cmp	r3, #32
 8006678:	d815      	bhi.n	80066a6 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800667a:	2b00      	cmp	r3, #0
 800667c:	d019      	beq.n	80066b2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800667e:	2b10      	cmp	r3, #16
 8006680:	d111      	bne.n	80066a6 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006682:	4baa      	ldr	r3, [pc, #680]	@ (800692c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006684:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006686:	4aa9      	ldr	r2, [pc, #676]	@ (800692c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006688:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800668c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800668e:	e011      	b.n	80066b4 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006690:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006694:	3308      	adds	r3, #8
 8006696:	2102      	movs	r1, #2
 8006698:	4618      	mov	r0, r3
 800669a:	f001 faa9 	bl	8007bf0 <RCCEx_PLL2_Config>
 800669e:	4603      	mov	r3, r0
 80066a0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80066a4:	e006      	b.n	80066b4 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80066a6:	2301      	movs	r3, #1
 80066a8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80066ac:	e002      	b.n	80066b4 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80066ae:	bf00      	nop
 80066b0:	e000      	b.n	80066b4 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80066b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80066b4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d10a      	bne.n	80066d2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80066bc:	4b9b      	ldr	r3, [pc, #620]	@ (800692c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80066be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80066c0:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80066c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80066ca:	4a98      	ldr	r2, [pc, #608]	@ (800692c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80066cc:	430b      	orrs	r3, r1
 80066ce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80066d0:	e003      	b.n	80066da <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066d2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80066d6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80066da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066e2:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80066e6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80066ea:	2300      	movs	r3, #0
 80066ec:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80066f0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80066f4:	460b      	mov	r3, r1
 80066f6:	4313      	orrs	r3, r2
 80066f8:	d051      	beq.n	800679e <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80066fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006700:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006704:	d035      	beq.n	8006772 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8006706:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800670a:	d82e      	bhi.n	800676a <HAL_RCCEx_PeriphCLKConfig+0x436>
 800670c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006710:	d031      	beq.n	8006776 <HAL_RCCEx_PeriphCLKConfig+0x442>
 8006712:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006716:	d828      	bhi.n	800676a <HAL_RCCEx_PeriphCLKConfig+0x436>
 8006718:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800671c:	d01a      	beq.n	8006754 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800671e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006722:	d822      	bhi.n	800676a <HAL_RCCEx_PeriphCLKConfig+0x436>
 8006724:	2b00      	cmp	r3, #0
 8006726:	d003      	beq.n	8006730 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8006728:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800672c:	d007      	beq.n	800673e <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800672e:	e01c      	b.n	800676a <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006730:	4b7e      	ldr	r3, [pc, #504]	@ (800692c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006732:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006734:	4a7d      	ldr	r2, [pc, #500]	@ (800692c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006736:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800673a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800673c:	e01c      	b.n	8006778 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800673e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006742:	3308      	adds	r3, #8
 8006744:	2100      	movs	r1, #0
 8006746:	4618      	mov	r0, r3
 8006748:	f001 fa52 	bl	8007bf0 <RCCEx_PLL2_Config>
 800674c:	4603      	mov	r3, r0
 800674e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006752:	e011      	b.n	8006778 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006754:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006758:	3328      	adds	r3, #40	@ 0x28
 800675a:	2100      	movs	r1, #0
 800675c:	4618      	mov	r0, r3
 800675e:	f001 faf9 	bl	8007d54 <RCCEx_PLL3_Config>
 8006762:	4603      	mov	r3, r0
 8006764:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006768:	e006      	b.n	8006778 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800676a:	2301      	movs	r3, #1
 800676c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006770:	e002      	b.n	8006778 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8006772:	bf00      	nop
 8006774:	e000      	b.n	8006778 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8006776:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006778:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800677c:	2b00      	cmp	r3, #0
 800677e:	d10a      	bne.n	8006796 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006780:	4b6a      	ldr	r3, [pc, #424]	@ (800692c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006782:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006784:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8006788:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800678c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800678e:	4a67      	ldr	r2, [pc, #412]	@ (800692c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006790:	430b      	orrs	r3, r1
 8006792:	6513      	str	r3, [r2, #80]	@ 0x50
 8006794:	e003      	b.n	800679e <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006796:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800679a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800679e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067a6:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80067aa:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80067ae:	2300      	movs	r3, #0
 80067b0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80067b4:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80067b8:	460b      	mov	r3, r1
 80067ba:	4313      	orrs	r3, r2
 80067bc:	d053      	beq.n	8006866 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80067be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80067c4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80067c8:	d033      	beq.n	8006832 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 80067ca:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80067ce:	d82c      	bhi.n	800682a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80067d0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80067d4:	d02f      	beq.n	8006836 <HAL_RCCEx_PeriphCLKConfig+0x502>
 80067d6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80067da:	d826      	bhi.n	800682a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80067dc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80067e0:	d02b      	beq.n	800683a <HAL_RCCEx_PeriphCLKConfig+0x506>
 80067e2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80067e6:	d820      	bhi.n	800682a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80067e8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80067ec:	d012      	beq.n	8006814 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 80067ee:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80067f2:	d81a      	bhi.n	800682a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d022      	beq.n	800683e <HAL_RCCEx_PeriphCLKConfig+0x50a>
 80067f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80067fc:	d115      	bne.n	800682a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80067fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006802:	3308      	adds	r3, #8
 8006804:	2101      	movs	r1, #1
 8006806:	4618      	mov	r0, r3
 8006808:	f001 f9f2 	bl	8007bf0 <RCCEx_PLL2_Config>
 800680c:	4603      	mov	r3, r0
 800680e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006812:	e015      	b.n	8006840 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006814:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006818:	3328      	adds	r3, #40	@ 0x28
 800681a:	2101      	movs	r1, #1
 800681c:	4618      	mov	r0, r3
 800681e:	f001 fa99 	bl	8007d54 <RCCEx_PLL3_Config>
 8006822:	4603      	mov	r3, r0
 8006824:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006828:	e00a      	b.n	8006840 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800682a:	2301      	movs	r3, #1
 800682c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006830:	e006      	b.n	8006840 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006832:	bf00      	nop
 8006834:	e004      	b.n	8006840 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006836:	bf00      	nop
 8006838:	e002      	b.n	8006840 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800683a:	bf00      	nop
 800683c:	e000      	b.n	8006840 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800683e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006840:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006844:	2b00      	cmp	r3, #0
 8006846:	d10a      	bne.n	800685e <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006848:	4b38      	ldr	r3, [pc, #224]	@ (800692c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800684a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800684c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8006850:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006854:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006856:	4a35      	ldr	r2, [pc, #212]	@ (800692c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006858:	430b      	orrs	r3, r1
 800685a:	6513      	str	r3, [r2, #80]	@ 0x50
 800685c:	e003      	b.n	8006866 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800685e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006862:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006866:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800686a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800686e:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8006872:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006876:	2300      	movs	r3, #0
 8006878:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800687c:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006880:	460b      	mov	r3, r1
 8006882:	4313      	orrs	r3, r2
 8006884:	d058      	beq.n	8006938 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8006886:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800688a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800688e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006892:	d033      	beq.n	80068fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8006894:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006898:	d82c      	bhi.n	80068f4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800689a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800689e:	d02f      	beq.n	8006900 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80068a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80068a4:	d826      	bhi.n	80068f4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80068a6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80068aa:	d02b      	beq.n	8006904 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 80068ac:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80068b0:	d820      	bhi.n	80068f4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80068b2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80068b6:	d012      	beq.n	80068de <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 80068b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80068bc:	d81a      	bhi.n	80068f4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d022      	beq.n	8006908 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80068c2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80068c6:	d115      	bne.n	80068f4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80068c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068cc:	3308      	adds	r3, #8
 80068ce:	2101      	movs	r1, #1
 80068d0:	4618      	mov	r0, r3
 80068d2:	f001 f98d 	bl	8007bf0 <RCCEx_PLL2_Config>
 80068d6:	4603      	mov	r3, r0
 80068d8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80068dc:	e015      	b.n	800690a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80068de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068e2:	3328      	adds	r3, #40	@ 0x28
 80068e4:	2101      	movs	r1, #1
 80068e6:	4618      	mov	r0, r3
 80068e8:	f001 fa34 	bl	8007d54 <RCCEx_PLL3_Config>
 80068ec:	4603      	mov	r3, r0
 80068ee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80068f2:	e00a      	b.n	800690a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80068f4:	2301      	movs	r3, #1
 80068f6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80068fa:	e006      	b.n	800690a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80068fc:	bf00      	nop
 80068fe:	e004      	b.n	800690a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006900:	bf00      	nop
 8006902:	e002      	b.n	800690a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006904:	bf00      	nop
 8006906:	e000      	b.n	800690a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006908:	bf00      	nop
    }

    if (ret == HAL_OK)
 800690a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800690e:	2b00      	cmp	r3, #0
 8006910:	d10e      	bne.n	8006930 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006912:	4b06      	ldr	r3, [pc, #24]	@ (800692c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006914:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006916:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800691a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800691e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006922:	4a02      	ldr	r2, [pc, #8]	@ (800692c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006924:	430b      	orrs	r3, r1
 8006926:	6593      	str	r3, [r2, #88]	@ 0x58
 8006928:	e006      	b.n	8006938 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800692a:	bf00      	nop
 800692c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006930:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006934:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006938:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800693c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006940:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8006944:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006948:	2300      	movs	r3, #0
 800694a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800694e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8006952:	460b      	mov	r3, r1
 8006954:	4313      	orrs	r3, r2
 8006956:	d037      	beq.n	80069c8 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8006958:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800695c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800695e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006962:	d00e      	beq.n	8006982 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8006964:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006968:	d816      	bhi.n	8006998 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800696a:	2b00      	cmp	r3, #0
 800696c:	d018      	beq.n	80069a0 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800696e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006972:	d111      	bne.n	8006998 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006974:	4bc4      	ldr	r3, [pc, #784]	@ (8006c88 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006976:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006978:	4ac3      	ldr	r2, [pc, #780]	@ (8006c88 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800697a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800697e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006980:	e00f      	b.n	80069a2 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006982:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006986:	3308      	adds	r3, #8
 8006988:	2101      	movs	r1, #1
 800698a:	4618      	mov	r0, r3
 800698c:	f001 f930 	bl	8007bf0 <RCCEx_PLL2_Config>
 8006990:	4603      	mov	r3, r0
 8006992:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006996:	e004      	b.n	80069a2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006998:	2301      	movs	r3, #1
 800699a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800699e:	e000      	b.n	80069a2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 80069a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80069a2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d10a      	bne.n	80069c0 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80069aa:	4bb7      	ldr	r3, [pc, #732]	@ (8006c88 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80069ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80069ae:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80069b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80069b8:	4ab3      	ldr	r2, [pc, #716]	@ (8006c88 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80069ba:	430b      	orrs	r3, r1
 80069bc:	6513      	str	r3, [r2, #80]	@ 0x50
 80069be:	e003      	b.n	80069c8 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069c0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80069c4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80069c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069d0:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80069d4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80069d8:	2300      	movs	r3, #0
 80069da:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80069de:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80069e2:	460b      	mov	r3, r1
 80069e4:	4313      	orrs	r3, r2
 80069e6:	d039      	beq.n	8006a5c <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80069e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80069ee:	2b03      	cmp	r3, #3
 80069f0:	d81c      	bhi.n	8006a2c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80069f2:	a201      	add	r2, pc, #4	@ (adr r2, 80069f8 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80069f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069f8:	08006a35 	.word	0x08006a35
 80069fc:	08006a09 	.word	0x08006a09
 8006a00:	08006a17 	.word	0x08006a17
 8006a04:	08006a35 	.word	0x08006a35
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a08:	4b9f      	ldr	r3, [pc, #636]	@ (8006c88 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006a0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a0c:	4a9e      	ldr	r2, [pc, #632]	@ (8006c88 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006a0e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006a12:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006a14:	e00f      	b.n	8006a36 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006a16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a1a:	3308      	adds	r3, #8
 8006a1c:	2102      	movs	r1, #2
 8006a1e:	4618      	mov	r0, r3
 8006a20:	f001 f8e6 	bl	8007bf0 <RCCEx_PLL2_Config>
 8006a24:	4603      	mov	r3, r0
 8006a26:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006a2a:	e004      	b.n	8006a36 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006a2c:	2301      	movs	r3, #1
 8006a2e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006a32:	e000      	b.n	8006a36 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8006a34:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a36:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d10a      	bne.n	8006a54 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006a3e:	4b92      	ldr	r3, [pc, #584]	@ (8006c88 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006a40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006a42:	f023 0103 	bic.w	r1, r3, #3
 8006a46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a4a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006a4c:	4a8e      	ldr	r2, [pc, #568]	@ (8006c88 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006a4e:	430b      	orrs	r3, r1
 8006a50:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006a52:	e003      	b.n	8006a5c <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a54:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006a58:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006a5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a64:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8006a68:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006a72:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006a76:	460b      	mov	r3, r1
 8006a78:	4313      	orrs	r3, r2
 8006a7a:	f000 8099 	beq.w	8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006a7e:	4b83      	ldr	r3, [pc, #524]	@ (8006c8c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	4a82      	ldr	r2, [pc, #520]	@ (8006c8c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006a84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006a88:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006a8a:	f7fc fa05 	bl	8002e98 <HAL_GetTick>
 8006a8e:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006a92:	e00b      	b.n	8006aac <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a94:	f7fc fa00 	bl	8002e98 <HAL_GetTick>
 8006a98:	4602      	mov	r2, r0
 8006a9a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8006a9e:	1ad3      	subs	r3, r2, r3
 8006aa0:	2b64      	cmp	r3, #100	@ 0x64
 8006aa2:	d903      	bls.n	8006aac <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8006aa4:	2303      	movs	r3, #3
 8006aa6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006aaa:	e005      	b.n	8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006aac:	4b77      	ldr	r3, [pc, #476]	@ (8006c8c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d0ed      	beq.n	8006a94 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8006ab8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d173      	bne.n	8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006ac0:	4b71      	ldr	r3, [pc, #452]	@ (8006c88 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006ac2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006ac4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ac8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006acc:	4053      	eors	r3, r2
 8006ace:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d015      	beq.n	8006b02 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006ad6:	4b6c      	ldr	r3, [pc, #432]	@ (8006c88 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006ad8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ada:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006ade:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006ae2:	4b69      	ldr	r3, [pc, #420]	@ (8006c88 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006ae4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ae6:	4a68      	ldr	r2, [pc, #416]	@ (8006c88 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006ae8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006aec:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006aee:	4b66      	ldr	r3, [pc, #408]	@ (8006c88 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006af0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006af2:	4a65      	ldr	r2, [pc, #404]	@ (8006c88 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006af4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006af8:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006afa:	4a63      	ldr	r2, [pc, #396]	@ (8006c88 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006afc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006b00:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006b02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b06:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006b0a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006b0e:	d118      	bne.n	8006b42 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b10:	f7fc f9c2 	bl	8002e98 <HAL_GetTick>
 8006b14:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006b18:	e00d      	b.n	8006b36 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b1a:	f7fc f9bd 	bl	8002e98 <HAL_GetTick>
 8006b1e:	4602      	mov	r2, r0
 8006b20:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8006b24:	1ad2      	subs	r2, r2, r3
 8006b26:	f241 3388 	movw	r3, #5000	@ 0x1388
 8006b2a:	429a      	cmp	r2, r3
 8006b2c:	d903      	bls.n	8006b36 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8006b2e:	2303      	movs	r3, #3
 8006b30:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8006b34:	e005      	b.n	8006b42 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006b36:	4b54      	ldr	r3, [pc, #336]	@ (8006c88 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006b38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b3a:	f003 0302 	and.w	r3, r3, #2
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d0eb      	beq.n	8006b1a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8006b42:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d129      	bne.n	8006b9e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006b4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b4e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006b52:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006b56:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006b5a:	d10e      	bne.n	8006b7a <HAL_RCCEx_PeriphCLKConfig+0x846>
 8006b5c:	4b4a      	ldr	r3, [pc, #296]	@ (8006c88 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006b5e:	691b      	ldr	r3, [r3, #16]
 8006b60:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8006b64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b68:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006b6c:	091a      	lsrs	r2, r3, #4
 8006b6e:	4b48      	ldr	r3, [pc, #288]	@ (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006b70:	4013      	ands	r3, r2
 8006b72:	4a45      	ldr	r2, [pc, #276]	@ (8006c88 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006b74:	430b      	orrs	r3, r1
 8006b76:	6113      	str	r3, [r2, #16]
 8006b78:	e005      	b.n	8006b86 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8006b7a:	4b43      	ldr	r3, [pc, #268]	@ (8006c88 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006b7c:	691b      	ldr	r3, [r3, #16]
 8006b7e:	4a42      	ldr	r2, [pc, #264]	@ (8006c88 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006b80:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006b84:	6113      	str	r3, [r2, #16]
 8006b86:	4b40      	ldr	r3, [pc, #256]	@ (8006c88 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006b88:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8006b8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b8e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006b92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006b96:	4a3c      	ldr	r2, [pc, #240]	@ (8006c88 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006b98:	430b      	orrs	r3, r1
 8006b9a:	6713      	str	r3, [r2, #112]	@ 0x70
 8006b9c:	e008      	b.n	8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006b9e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006ba2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8006ba6:	e003      	b.n	8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ba8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006bac:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006bb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bb8:	f002 0301 	and.w	r3, r2, #1
 8006bbc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006bc6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8006bca:	460b      	mov	r3, r1
 8006bcc:	4313      	orrs	r3, r2
 8006bce:	f000 808f 	beq.w	8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8006bd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bd6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006bd8:	2b28      	cmp	r3, #40	@ 0x28
 8006bda:	d871      	bhi.n	8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8006bdc:	a201      	add	r2, pc, #4	@ (adr r2, 8006be4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8006bde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006be2:	bf00      	nop
 8006be4:	08006cc9 	.word	0x08006cc9
 8006be8:	08006cc1 	.word	0x08006cc1
 8006bec:	08006cc1 	.word	0x08006cc1
 8006bf0:	08006cc1 	.word	0x08006cc1
 8006bf4:	08006cc1 	.word	0x08006cc1
 8006bf8:	08006cc1 	.word	0x08006cc1
 8006bfc:	08006cc1 	.word	0x08006cc1
 8006c00:	08006cc1 	.word	0x08006cc1
 8006c04:	08006c95 	.word	0x08006c95
 8006c08:	08006cc1 	.word	0x08006cc1
 8006c0c:	08006cc1 	.word	0x08006cc1
 8006c10:	08006cc1 	.word	0x08006cc1
 8006c14:	08006cc1 	.word	0x08006cc1
 8006c18:	08006cc1 	.word	0x08006cc1
 8006c1c:	08006cc1 	.word	0x08006cc1
 8006c20:	08006cc1 	.word	0x08006cc1
 8006c24:	08006cab 	.word	0x08006cab
 8006c28:	08006cc1 	.word	0x08006cc1
 8006c2c:	08006cc1 	.word	0x08006cc1
 8006c30:	08006cc1 	.word	0x08006cc1
 8006c34:	08006cc1 	.word	0x08006cc1
 8006c38:	08006cc1 	.word	0x08006cc1
 8006c3c:	08006cc1 	.word	0x08006cc1
 8006c40:	08006cc1 	.word	0x08006cc1
 8006c44:	08006cc9 	.word	0x08006cc9
 8006c48:	08006cc1 	.word	0x08006cc1
 8006c4c:	08006cc1 	.word	0x08006cc1
 8006c50:	08006cc1 	.word	0x08006cc1
 8006c54:	08006cc1 	.word	0x08006cc1
 8006c58:	08006cc1 	.word	0x08006cc1
 8006c5c:	08006cc1 	.word	0x08006cc1
 8006c60:	08006cc1 	.word	0x08006cc1
 8006c64:	08006cc9 	.word	0x08006cc9
 8006c68:	08006cc1 	.word	0x08006cc1
 8006c6c:	08006cc1 	.word	0x08006cc1
 8006c70:	08006cc1 	.word	0x08006cc1
 8006c74:	08006cc1 	.word	0x08006cc1
 8006c78:	08006cc1 	.word	0x08006cc1
 8006c7c:	08006cc1 	.word	0x08006cc1
 8006c80:	08006cc1 	.word	0x08006cc1
 8006c84:	08006cc9 	.word	0x08006cc9
 8006c88:	58024400 	.word	0x58024400
 8006c8c:	58024800 	.word	0x58024800
 8006c90:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006c94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c98:	3308      	adds	r3, #8
 8006c9a:	2101      	movs	r1, #1
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	f000 ffa7 	bl	8007bf0 <RCCEx_PLL2_Config>
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006ca8:	e00f      	b.n	8006cca <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006caa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cae:	3328      	adds	r3, #40	@ 0x28
 8006cb0:	2101      	movs	r1, #1
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	f001 f84e 	bl	8007d54 <RCCEx_PLL3_Config>
 8006cb8:	4603      	mov	r3, r0
 8006cba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006cbe:	e004      	b.n	8006cca <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006cc0:	2301      	movs	r3, #1
 8006cc2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006cc6:	e000      	b.n	8006cca <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8006cc8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006cca:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d10a      	bne.n	8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006cd2:	4bbf      	ldr	r3, [pc, #764]	@ (8006fd0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006cd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006cd6:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8006cda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cde:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006ce0:	4abb      	ldr	r2, [pc, #748]	@ (8006fd0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006ce2:	430b      	orrs	r3, r1
 8006ce4:	6553      	str	r3, [r2, #84]	@ 0x54
 8006ce6:	e003      	b.n	8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ce8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006cec:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006cf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cf8:	f002 0302 	and.w	r3, r2, #2
 8006cfc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006d00:	2300      	movs	r3, #0
 8006d02:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006d06:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8006d0a:	460b      	mov	r3, r1
 8006d0c:	4313      	orrs	r3, r2
 8006d0e:	d041      	beq.n	8006d94 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006d10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006d16:	2b05      	cmp	r3, #5
 8006d18:	d824      	bhi.n	8006d64 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8006d1a:	a201      	add	r2, pc, #4	@ (adr r2, 8006d20 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8006d1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d20:	08006d6d 	.word	0x08006d6d
 8006d24:	08006d39 	.word	0x08006d39
 8006d28:	08006d4f 	.word	0x08006d4f
 8006d2c:	08006d6d 	.word	0x08006d6d
 8006d30:	08006d6d 	.word	0x08006d6d
 8006d34:	08006d6d 	.word	0x08006d6d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006d38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d3c:	3308      	adds	r3, #8
 8006d3e:	2101      	movs	r1, #1
 8006d40:	4618      	mov	r0, r3
 8006d42:	f000 ff55 	bl	8007bf0 <RCCEx_PLL2_Config>
 8006d46:	4603      	mov	r3, r0
 8006d48:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006d4c:	e00f      	b.n	8006d6e <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006d4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d52:	3328      	adds	r3, #40	@ 0x28
 8006d54:	2101      	movs	r1, #1
 8006d56:	4618      	mov	r0, r3
 8006d58:	f000 fffc 	bl	8007d54 <RCCEx_PLL3_Config>
 8006d5c:	4603      	mov	r3, r0
 8006d5e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006d62:	e004      	b.n	8006d6e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006d64:	2301      	movs	r3, #1
 8006d66:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006d6a:	e000      	b.n	8006d6e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8006d6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d6e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d10a      	bne.n	8006d8c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006d76:	4b96      	ldr	r3, [pc, #600]	@ (8006fd0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006d78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d7a:	f023 0107 	bic.w	r1, r3, #7
 8006d7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d82:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006d84:	4a92      	ldr	r2, [pc, #584]	@ (8006fd0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006d86:	430b      	orrs	r3, r1
 8006d88:	6553      	str	r3, [r2, #84]	@ 0x54
 8006d8a:	e003      	b.n	8006d94 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d8c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006d90:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006d94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d9c:	f002 0304 	and.w	r3, r2, #4
 8006da0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006da4:	2300      	movs	r3, #0
 8006da6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006daa:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006dae:	460b      	mov	r3, r1
 8006db0:	4313      	orrs	r3, r2
 8006db2:	d044      	beq.n	8006e3e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006db4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006db8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006dbc:	2b05      	cmp	r3, #5
 8006dbe:	d825      	bhi.n	8006e0c <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8006dc0:	a201      	add	r2, pc, #4	@ (adr r2, 8006dc8 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8006dc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dc6:	bf00      	nop
 8006dc8:	08006e15 	.word	0x08006e15
 8006dcc:	08006de1 	.word	0x08006de1
 8006dd0:	08006df7 	.word	0x08006df7
 8006dd4:	08006e15 	.word	0x08006e15
 8006dd8:	08006e15 	.word	0x08006e15
 8006ddc:	08006e15 	.word	0x08006e15
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006de0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006de4:	3308      	adds	r3, #8
 8006de6:	2101      	movs	r1, #1
 8006de8:	4618      	mov	r0, r3
 8006dea:	f000 ff01 	bl	8007bf0 <RCCEx_PLL2_Config>
 8006dee:	4603      	mov	r3, r0
 8006df0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006df4:	e00f      	b.n	8006e16 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006df6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006dfa:	3328      	adds	r3, #40	@ 0x28
 8006dfc:	2101      	movs	r1, #1
 8006dfe:	4618      	mov	r0, r3
 8006e00:	f000 ffa8 	bl	8007d54 <RCCEx_PLL3_Config>
 8006e04:	4603      	mov	r3, r0
 8006e06:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006e0a:	e004      	b.n	8006e16 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006e0c:	2301      	movs	r3, #1
 8006e0e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006e12:	e000      	b.n	8006e16 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8006e14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e16:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d10b      	bne.n	8006e36 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006e1e:	4b6c      	ldr	r3, [pc, #432]	@ (8006fd0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006e20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e22:	f023 0107 	bic.w	r1, r3, #7
 8006e26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e2e:	4a68      	ldr	r2, [pc, #416]	@ (8006fd0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006e30:	430b      	orrs	r3, r1
 8006e32:	6593      	str	r3, [r2, #88]	@ 0x58
 8006e34:	e003      	b.n	8006e3e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e36:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006e3a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006e3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e46:	f002 0320 	and.w	r3, r2, #32
 8006e4a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006e4e:	2300      	movs	r3, #0
 8006e50:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006e54:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8006e58:	460b      	mov	r3, r1
 8006e5a:	4313      	orrs	r3, r2
 8006e5c:	d055      	beq.n	8006f0a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006e5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e62:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006e66:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006e6a:	d033      	beq.n	8006ed4 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8006e6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006e70:	d82c      	bhi.n	8006ecc <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006e72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e76:	d02f      	beq.n	8006ed8 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8006e78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e7c:	d826      	bhi.n	8006ecc <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006e7e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006e82:	d02b      	beq.n	8006edc <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8006e84:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006e88:	d820      	bhi.n	8006ecc <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006e8a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006e8e:	d012      	beq.n	8006eb6 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8006e90:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006e94:	d81a      	bhi.n	8006ecc <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d022      	beq.n	8006ee0 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8006e9a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006e9e:	d115      	bne.n	8006ecc <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006ea0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ea4:	3308      	adds	r3, #8
 8006ea6:	2100      	movs	r1, #0
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	f000 fea1 	bl	8007bf0 <RCCEx_PLL2_Config>
 8006eae:	4603      	mov	r3, r0
 8006eb0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006eb4:	e015      	b.n	8006ee2 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006eb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006eba:	3328      	adds	r3, #40	@ 0x28
 8006ebc:	2102      	movs	r1, #2
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	f000 ff48 	bl	8007d54 <RCCEx_PLL3_Config>
 8006ec4:	4603      	mov	r3, r0
 8006ec6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006eca:	e00a      	b.n	8006ee2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ecc:	2301      	movs	r3, #1
 8006ece:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006ed2:	e006      	b.n	8006ee2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006ed4:	bf00      	nop
 8006ed6:	e004      	b.n	8006ee2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006ed8:	bf00      	nop
 8006eda:	e002      	b.n	8006ee2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006edc:	bf00      	nop
 8006ede:	e000      	b.n	8006ee2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006ee0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ee2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d10b      	bne.n	8006f02 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006eea:	4b39      	ldr	r3, [pc, #228]	@ (8006fd0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006eec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006eee:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006ef2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ef6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006efa:	4a35      	ldr	r2, [pc, #212]	@ (8006fd0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006efc:	430b      	orrs	r3, r1
 8006efe:	6553      	str	r3, [r2, #84]	@ 0x54
 8006f00:	e003      	b.n	8006f0a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f02:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006f06:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006f0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f12:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8006f16:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006f20:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8006f24:	460b      	mov	r3, r1
 8006f26:	4313      	orrs	r3, r2
 8006f28:	d058      	beq.n	8006fdc <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006f2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f2e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006f32:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006f36:	d033      	beq.n	8006fa0 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8006f38:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006f3c:	d82c      	bhi.n	8006f98 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006f3e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006f42:	d02f      	beq.n	8006fa4 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8006f44:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006f48:	d826      	bhi.n	8006f98 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006f4a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006f4e:	d02b      	beq.n	8006fa8 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8006f50:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006f54:	d820      	bhi.n	8006f98 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006f56:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006f5a:	d012      	beq.n	8006f82 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8006f5c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006f60:	d81a      	bhi.n	8006f98 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d022      	beq.n	8006fac <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8006f66:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f6a:	d115      	bne.n	8006f98 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006f6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f70:	3308      	adds	r3, #8
 8006f72:	2100      	movs	r1, #0
 8006f74:	4618      	mov	r0, r3
 8006f76:	f000 fe3b 	bl	8007bf0 <RCCEx_PLL2_Config>
 8006f7a:	4603      	mov	r3, r0
 8006f7c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006f80:	e015      	b.n	8006fae <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006f82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f86:	3328      	adds	r3, #40	@ 0x28
 8006f88:	2102      	movs	r1, #2
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	f000 fee2 	bl	8007d54 <RCCEx_PLL3_Config>
 8006f90:	4603      	mov	r3, r0
 8006f92:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006f96:	e00a      	b.n	8006fae <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f98:	2301      	movs	r3, #1
 8006f9a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006f9e:	e006      	b.n	8006fae <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006fa0:	bf00      	nop
 8006fa2:	e004      	b.n	8006fae <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006fa4:	bf00      	nop
 8006fa6:	e002      	b.n	8006fae <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006fa8:	bf00      	nop
 8006faa:	e000      	b.n	8006fae <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006fac:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006fae:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d10e      	bne.n	8006fd4 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006fb6:	4b06      	ldr	r3, [pc, #24]	@ (8006fd0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006fb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006fba:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8006fbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fc2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006fc6:	4a02      	ldr	r2, [pc, #8]	@ (8006fd0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006fc8:	430b      	orrs	r3, r1
 8006fca:	6593      	str	r3, [r2, #88]	@ 0x58
 8006fcc:	e006      	b.n	8006fdc <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8006fce:	bf00      	nop
 8006fd0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fd4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006fd8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006fdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fe4:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8006fe8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006fec:	2300      	movs	r3, #0
 8006fee:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006ff2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8006ff6:	460b      	mov	r3, r1
 8006ff8:	4313      	orrs	r3, r2
 8006ffa:	d055      	beq.n	80070a8 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006ffc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007000:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007004:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007008:	d033      	beq.n	8007072 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800700a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800700e:	d82c      	bhi.n	800706a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8007010:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007014:	d02f      	beq.n	8007076 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8007016:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800701a:	d826      	bhi.n	800706a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800701c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007020:	d02b      	beq.n	800707a <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8007022:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007026:	d820      	bhi.n	800706a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8007028:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800702c:	d012      	beq.n	8007054 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800702e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007032:	d81a      	bhi.n	800706a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8007034:	2b00      	cmp	r3, #0
 8007036:	d022      	beq.n	800707e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8007038:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800703c:	d115      	bne.n	800706a <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800703e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007042:	3308      	adds	r3, #8
 8007044:	2100      	movs	r1, #0
 8007046:	4618      	mov	r0, r3
 8007048:	f000 fdd2 	bl	8007bf0 <RCCEx_PLL2_Config>
 800704c:	4603      	mov	r3, r0
 800704e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007052:	e015      	b.n	8007080 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007054:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007058:	3328      	adds	r3, #40	@ 0x28
 800705a:	2102      	movs	r1, #2
 800705c:	4618      	mov	r0, r3
 800705e:	f000 fe79 	bl	8007d54 <RCCEx_PLL3_Config>
 8007062:	4603      	mov	r3, r0
 8007064:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007068:	e00a      	b.n	8007080 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800706a:	2301      	movs	r3, #1
 800706c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007070:	e006      	b.n	8007080 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8007072:	bf00      	nop
 8007074:	e004      	b.n	8007080 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8007076:	bf00      	nop
 8007078:	e002      	b.n	8007080 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800707a:	bf00      	nop
 800707c:	e000      	b.n	8007080 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800707e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007080:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007084:	2b00      	cmp	r3, #0
 8007086:	d10b      	bne.n	80070a0 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007088:	4ba0      	ldr	r3, [pc, #640]	@ (800730c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800708a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800708c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8007090:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007094:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007098:	4a9c      	ldr	r2, [pc, #624]	@ (800730c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800709a:	430b      	orrs	r3, r1
 800709c:	6593      	str	r3, [r2, #88]	@ 0x58
 800709e:	e003      	b.n	80070a8 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070a0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80070a4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 80070a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070b0:	f002 0308 	and.w	r3, r2, #8
 80070b4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80070b8:	2300      	movs	r3, #0
 80070ba:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80070be:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80070c2:	460b      	mov	r3, r1
 80070c4:	4313      	orrs	r3, r2
 80070c6:	d01e      	beq.n	8007106 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 80070c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80070d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80070d4:	d10c      	bne.n	80070f0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80070d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070da:	3328      	adds	r3, #40	@ 0x28
 80070dc:	2102      	movs	r1, #2
 80070de:	4618      	mov	r0, r3
 80070e0:	f000 fe38 	bl	8007d54 <RCCEx_PLL3_Config>
 80070e4:	4603      	mov	r3, r0
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d002      	beq.n	80070f0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 80070ea:	2301      	movs	r3, #1
 80070ec:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 80070f0:	4b86      	ldr	r3, [pc, #536]	@ (800730c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80070f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80070f4:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80070f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007100:	4a82      	ldr	r2, [pc, #520]	@ (800730c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007102:	430b      	orrs	r3, r1
 8007104:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007106:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800710a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800710e:	f002 0310 	and.w	r3, r2, #16
 8007112:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007116:	2300      	movs	r3, #0
 8007118:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800711c:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8007120:	460b      	mov	r3, r1
 8007122:	4313      	orrs	r3, r2
 8007124:	d01e      	beq.n	8007164 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8007126:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800712a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800712e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007132:	d10c      	bne.n	800714e <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007134:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007138:	3328      	adds	r3, #40	@ 0x28
 800713a:	2102      	movs	r1, #2
 800713c:	4618      	mov	r0, r3
 800713e:	f000 fe09 	bl	8007d54 <RCCEx_PLL3_Config>
 8007142:	4603      	mov	r3, r0
 8007144:	2b00      	cmp	r3, #0
 8007146:	d002      	beq.n	800714e <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8007148:	2301      	movs	r3, #1
 800714a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800714e:	4b6f      	ldr	r3, [pc, #444]	@ (800730c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007150:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007152:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007156:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800715a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800715e:	4a6b      	ldr	r2, [pc, #428]	@ (800730c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007160:	430b      	orrs	r3, r1
 8007162:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007164:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800716c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8007170:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007172:	2300      	movs	r3, #0
 8007174:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007176:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800717a:	460b      	mov	r3, r1
 800717c:	4313      	orrs	r3, r2
 800717e:	d03e      	beq.n	80071fe <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8007180:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007184:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007188:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800718c:	d022      	beq.n	80071d4 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800718e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007192:	d81b      	bhi.n	80071cc <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8007194:	2b00      	cmp	r3, #0
 8007196:	d003      	beq.n	80071a0 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8007198:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800719c:	d00b      	beq.n	80071b6 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800719e:	e015      	b.n	80071cc <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80071a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071a4:	3308      	adds	r3, #8
 80071a6:	2100      	movs	r1, #0
 80071a8:	4618      	mov	r0, r3
 80071aa:	f000 fd21 	bl	8007bf0 <RCCEx_PLL2_Config>
 80071ae:	4603      	mov	r3, r0
 80071b0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80071b4:	e00f      	b.n	80071d6 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80071b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071ba:	3328      	adds	r3, #40	@ 0x28
 80071bc:	2102      	movs	r1, #2
 80071be:	4618      	mov	r0, r3
 80071c0:	f000 fdc8 	bl	8007d54 <RCCEx_PLL3_Config>
 80071c4:	4603      	mov	r3, r0
 80071c6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80071ca:	e004      	b.n	80071d6 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80071cc:	2301      	movs	r3, #1
 80071ce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80071d2:	e000      	b.n	80071d6 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 80071d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80071d6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d10b      	bne.n	80071f6 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80071de:	4b4b      	ldr	r3, [pc, #300]	@ (800730c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80071e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80071e2:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80071e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071ea:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80071ee:	4a47      	ldr	r2, [pc, #284]	@ (800730c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80071f0:	430b      	orrs	r3, r1
 80071f2:	6593      	str	r3, [r2, #88]	@ 0x58
 80071f4:	e003      	b.n	80071fe <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071f6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80071fa:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80071fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007202:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007206:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800720a:	673b      	str	r3, [r7, #112]	@ 0x70
 800720c:	2300      	movs	r3, #0
 800720e:	677b      	str	r3, [r7, #116]	@ 0x74
 8007210:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8007214:	460b      	mov	r3, r1
 8007216:	4313      	orrs	r3, r2
 8007218:	d03b      	beq.n	8007292 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800721a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800721e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007222:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007226:	d01f      	beq.n	8007268 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8007228:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800722c:	d818      	bhi.n	8007260 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800722e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007232:	d003      	beq.n	800723c <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8007234:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007238:	d007      	beq.n	800724a <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800723a:	e011      	b.n	8007260 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800723c:	4b33      	ldr	r3, [pc, #204]	@ (800730c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800723e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007240:	4a32      	ldr	r2, [pc, #200]	@ (800730c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007242:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007246:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8007248:	e00f      	b.n	800726a <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800724a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800724e:	3328      	adds	r3, #40	@ 0x28
 8007250:	2101      	movs	r1, #1
 8007252:	4618      	mov	r0, r3
 8007254:	f000 fd7e 	bl	8007d54 <RCCEx_PLL3_Config>
 8007258:	4603      	mov	r3, r0
 800725a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800725e:	e004      	b.n	800726a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007260:	2301      	movs	r3, #1
 8007262:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007266:	e000      	b.n	800726a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8007268:	bf00      	nop
    }

    if (ret == HAL_OK)
 800726a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800726e:	2b00      	cmp	r3, #0
 8007270:	d10b      	bne.n	800728a <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007272:	4b26      	ldr	r3, [pc, #152]	@ (800730c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007274:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007276:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800727a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800727e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007282:	4a22      	ldr	r2, [pc, #136]	@ (800730c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007284:	430b      	orrs	r3, r1
 8007286:	6553      	str	r3, [r2, #84]	@ 0x54
 8007288:	e003      	b.n	8007292 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800728a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800728e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007292:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800729a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800729e:	66bb      	str	r3, [r7, #104]	@ 0x68
 80072a0:	2300      	movs	r3, #0
 80072a2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80072a4:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80072a8:	460b      	mov	r3, r1
 80072aa:	4313      	orrs	r3, r2
 80072ac:	d034      	beq.n	8007318 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80072ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d003      	beq.n	80072c0 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 80072b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80072bc:	d007      	beq.n	80072ce <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 80072be:	e011      	b.n	80072e4 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80072c0:	4b12      	ldr	r3, [pc, #72]	@ (800730c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80072c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072c4:	4a11      	ldr	r2, [pc, #68]	@ (800730c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80072c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80072ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80072cc:	e00e      	b.n	80072ec <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80072ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072d2:	3308      	adds	r3, #8
 80072d4:	2102      	movs	r1, #2
 80072d6:	4618      	mov	r0, r3
 80072d8:	f000 fc8a 	bl	8007bf0 <RCCEx_PLL2_Config>
 80072dc:	4603      	mov	r3, r0
 80072de:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80072e2:	e003      	b.n	80072ec <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 80072e4:	2301      	movs	r3, #1
 80072e6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80072ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80072ec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d10d      	bne.n	8007310 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80072f4:	4b05      	ldr	r3, [pc, #20]	@ (800730c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80072f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80072f8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80072fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007300:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007302:	4a02      	ldr	r2, [pc, #8]	@ (800730c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007304:	430b      	orrs	r3, r1
 8007306:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007308:	e006      	b.n	8007318 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800730a:	bf00      	nop
 800730c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007310:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007314:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007318:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800731c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007320:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8007324:	663b      	str	r3, [r7, #96]	@ 0x60
 8007326:	2300      	movs	r3, #0
 8007328:	667b      	str	r3, [r7, #100]	@ 0x64
 800732a:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800732e:	460b      	mov	r3, r1
 8007330:	4313      	orrs	r3, r2
 8007332:	d00c      	beq.n	800734e <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007334:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007338:	3328      	adds	r3, #40	@ 0x28
 800733a:	2102      	movs	r1, #2
 800733c:	4618      	mov	r0, r3
 800733e:	f000 fd09 	bl	8007d54 <RCCEx_PLL3_Config>
 8007342:	4603      	mov	r3, r0
 8007344:	2b00      	cmp	r3, #0
 8007346:	d002      	beq.n	800734e <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8007348:	2301      	movs	r3, #1
 800734a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800734e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007356:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800735a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800735c:	2300      	movs	r3, #0
 800735e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007360:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8007364:	460b      	mov	r3, r1
 8007366:	4313      	orrs	r3, r2
 8007368:	d036      	beq.n	80073d8 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800736a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800736e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007370:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007374:	d018      	beq.n	80073a8 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8007376:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800737a:	d811      	bhi.n	80073a0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800737c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007380:	d014      	beq.n	80073ac <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8007382:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007386:	d80b      	bhi.n	80073a0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8007388:	2b00      	cmp	r3, #0
 800738a:	d011      	beq.n	80073b0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800738c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007390:	d106      	bne.n	80073a0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007392:	4bb7      	ldr	r3, [pc, #732]	@ (8007670 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007394:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007396:	4ab6      	ldr	r2, [pc, #728]	@ (8007670 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007398:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800739c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800739e:	e008      	b.n	80073b2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80073a0:	2301      	movs	r3, #1
 80073a2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80073a6:	e004      	b.n	80073b2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80073a8:	bf00      	nop
 80073aa:	e002      	b.n	80073b2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80073ac:	bf00      	nop
 80073ae:	e000      	b.n	80073b2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80073b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80073b2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d10a      	bne.n	80073d0 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80073ba:	4bad      	ldr	r3, [pc, #692]	@ (8007670 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80073bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073be:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80073c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073c6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80073c8:	4aa9      	ldr	r2, [pc, #676]	@ (8007670 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80073ca:	430b      	orrs	r3, r1
 80073cc:	6553      	str	r3, [r2, #84]	@ 0x54
 80073ce:	e003      	b.n	80073d8 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073d0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80073d4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80073d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073e0:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80073e4:	653b      	str	r3, [r7, #80]	@ 0x50
 80073e6:	2300      	movs	r3, #0
 80073e8:	657b      	str	r3, [r7, #84]	@ 0x54
 80073ea:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80073ee:	460b      	mov	r3, r1
 80073f0:	4313      	orrs	r3, r2
 80073f2:	d009      	beq.n	8007408 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80073f4:	4b9e      	ldr	r3, [pc, #632]	@ (8007670 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80073f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80073f8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80073fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007400:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007402:	4a9b      	ldr	r2, [pc, #620]	@ (8007670 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007404:	430b      	orrs	r3, r1
 8007406:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007408:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800740c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007410:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8007414:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007416:	2300      	movs	r3, #0
 8007418:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800741a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800741e:	460b      	mov	r3, r1
 8007420:	4313      	orrs	r3, r2
 8007422:	d009      	beq.n	8007438 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007424:	4b92      	ldr	r3, [pc, #584]	@ (8007670 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007426:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007428:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800742c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007430:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007432:	4a8f      	ldr	r2, [pc, #572]	@ (8007670 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007434:	430b      	orrs	r3, r1
 8007436:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007438:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800743c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007440:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8007444:	643b      	str	r3, [r7, #64]	@ 0x40
 8007446:	2300      	movs	r3, #0
 8007448:	647b      	str	r3, [r7, #68]	@ 0x44
 800744a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800744e:	460b      	mov	r3, r1
 8007450:	4313      	orrs	r3, r2
 8007452:	d00e      	beq.n	8007472 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007454:	4b86      	ldr	r3, [pc, #536]	@ (8007670 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007456:	691b      	ldr	r3, [r3, #16]
 8007458:	4a85      	ldr	r2, [pc, #532]	@ (8007670 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800745a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800745e:	6113      	str	r3, [r2, #16]
 8007460:	4b83      	ldr	r3, [pc, #524]	@ (8007670 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007462:	6919      	ldr	r1, [r3, #16]
 8007464:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007468:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800746c:	4a80      	ldr	r2, [pc, #512]	@ (8007670 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800746e:	430b      	orrs	r3, r1
 8007470:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007472:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800747a:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800747e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007480:	2300      	movs	r3, #0
 8007482:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007484:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8007488:	460b      	mov	r3, r1
 800748a:	4313      	orrs	r3, r2
 800748c:	d009      	beq.n	80074a2 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800748e:	4b78      	ldr	r3, [pc, #480]	@ (8007670 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007490:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007492:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007496:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800749a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800749c:	4a74      	ldr	r2, [pc, #464]	@ (8007670 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800749e:	430b      	orrs	r3, r1
 80074a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80074a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074aa:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80074ae:	633b      	str	r3, [r7, #48]	@ 0x30
 80074b0:	2300      	movs	r3, #0
 80074b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80074b4:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80074b8:	460b      	mov	r3, r1
 80074ba:	4313      	orrs	r3, r2
 80074bc:	d00a      	beq.n	80074d4 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80074be:	4b6c      	ldr	r3, [pc, #432]	@ (8007670 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80074c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80074c2:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80074c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074ce:	4a68      	ldr	r2, [pc, #416]	@ (8007670 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80074d0:	430b      	orrs	r3, r1
 80074d2:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80074d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074dc:	2100      	movs	r1, #0
 80074de:	62b9      	str	r1, [r7, #40]	@ 0x28
 80074e0:	f003 0301 	and.w	r3, r3, #1
 80074e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80074e6:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80074ea:	460b      	mov	r3, r1
 80074ec:	4313      	orrs	r3, r2
 80074ee:	d011      	beq.n	8007514 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80074f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074f4:	3308      	adds	r3, #8
 80074f6:	2100      	movs	r1, #0
 80074f8:	4618      	mov	r0, r3
 80074fa:	f000 fb79 	bl	8007bf0 <RCCEx_PLL2_Config>
 80074fe:	4603      	mov	r3, r0
 8007500:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8007504:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007508:	2b00      	cmp	r3, #0
 800750a:	d003      	beq.n	8007514 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800750c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007510:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8007514:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800751c:	2100      	movs	r1, #0
 800751e:	6239      	str	r1, [r7, #32]
 8007520:	f003 0302 	and.w	r3, r3, #2
 8007524:	627b      	str	r3, [r7, #36]	@ 0x24
 8007526:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800752a:	460b      	mov	r3, r1
 800752c:	4313      	orrs	r3, r2
 800752e:	d011      	beq.n	8007554 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007530:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007534:	3308      	adds	r3, #8
 8007536:	2101      	movs	r1, #1
 8007538:	4618      	mov	r0, r3
 800753a:	f000 fb59 	bl	8007bf0 <RCCEx_PLL2_Config>
 800753e:	4603      	mov	r3, r0
 8007540:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8007544:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007548:	2b00      	cmp	r3, #0
 800754a:	d003      	beq.n	8007554 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800754c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007550:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8007554:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800755c:	2100      	movs	r1, #0
 800755e:	61b9      	str	r1, [r7, #24]
 8007560:	f003 0304 	and.w	r3, r3, #4
 8007564:	61fb      	str	r3, [r7, #28]
 8007566:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800756a:	460b      	mov	r3, r1
 800756c:	4313      	orrs	r3, r2
 800756e:	d011      	beq.n	8007594 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007570:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007574:	3308      	adds	r3, #8
 8007576:	2102      	movs	r1, #2
 8007578:	4618      	mov	r0, r3
 800757a:	f000 fb39 	bl	8007bf0 <RCCEx_PLL2_Config>
 800757e:	4603      	mov	r3, r0
 8007580:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8007584:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007588:	2b00      	cmp	r3, #0
 800758a:	d003      	beq.n	8007594 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800758c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007590:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8007594:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800759c:	2100      	movs	r1, #0
 800759e:	6139      	str	r1, [r7, #16]
 80075a0:	f003 0308 	and.w	r3, r3, #8
 80075a4:	617b      	str	r3, [r7, #20]
 80075a6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80075aa:	460b      	mov	r3, r1
 80075ac:	4313      	orrs	r3, r2
 80075ae:	d011      	beq.n	80075d4 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80075b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075b4:	3328      	adds	r3, #40	@ 0x28
 80075b6:	2100      	movs	r1, #0
 80075b8:	4618      	mov	r0, r3
 80075ba:	f000 fbcb 	bl	8007d54 <RCCEx_PLL3_Config>
 80075be:	4603      	mov	r3, r0
 80075c0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 80075c4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d003      	beq.n	80075d4 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075cc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80075d0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80075d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075dc:	2100      	movs	r1, #0
 80075de:	60b9      	str	r1, [r7, #8]
 80075e0:	f003 0310 	and.w	r3, r3, #16
 80075e4:	60fb      	str	r3, [r7, #12]
 80075e6:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80075ea:	460b      	mov	r3, r1
 80075ec:	4313      	orrs	r3, r2
 80075ee:	d011      	beq.n	8007614 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80075f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075f4:	3328      	adds	r3, #40	@ 0x28
 80075f6:	2101      	movs	r1, #1
 80075f8:	4618      	mov	r0, r3
 80075fa:	f000 fbab 	bl	8007d54 <RCCEx_PLL3_Config>
 80075fe:	4603      	mov	r3, r0
 8007600:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8007604:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007608:	2b00      	cmp	r3, #0
 800760a:	d003      	beq.n	8007614 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800760c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007610:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8007614:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800761c:	2100      	movs	r1, #0
 800761e:	6039      	str	r1, [r7, #0]
 8007620:	f003 0320 	and.w	r3, r3, #32
 8007624:	607b      	str	r3, [r7, #4]
 8007626:	e9d7 1200 	ldrd	r1, r2, [r7]
 800762a:	460b      	mov	r3, r1
 800762c:	4313      	orrs	r3, r2
 800762e:	d011      	beq.n	8007654 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007630:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007634:	3328      	adds	r3, #40	@ 0x28
 8007636:	2102      	movs	r1, #2
 8007638:	4618      	mov	r0, r3
 800763a:	f000 fb8b 	bl	8007d54 <RCCEx_PLL3_Config>
 800763e:	4603      	mov	r3, r0
 8007640:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8007644:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007648:	2b00      	cmp	r3, #0
 800764a:	d003      	beq.n	8007654 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800764c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007650:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8007654:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8007658:	2b00      	cmp	r3, #0
 800765a:	d101      	bne.n	8007660 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800765c:	2300      	movs	r3, #0
 800765e:	e000      	b.n	8007662 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8007660:	2301      	movs	r3, #1
}
 8007662:	4618      	mov	r0, r3
 8007664:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8007668:	46bd      	mov	sp, r7
 800766a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800766e:	bf00      	nop
 8007670:	58024400 	.word	0x58024400

08007674 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007674:	b580      	push	{r7, lr}
 8007676:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007678:	f7fe fe00 	bl	800627c <HAL_RCC_GetHCLKFreq>
 800767c:	4602      	mov	r2, r0
 800767e:	4b06      	ldr	r3, [pc, #24]	@ (8007698 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007680:	6a1b      	ldr	r3, [r3, #32]
 8007682:	091b      	lsrs	r3, r3, #4
 8007684:	f003 0307 	and.w	r3, r3, #7
 8007688:	4904      	ldr	r1, [pc, #16]	@ (800769c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800768a:	5ccb      	ldrb	r3, [r1, r3]
 800768c:	f003 031f 	and.w	r3, r3, #31
 8007690:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007694:	4618      	mov	r0, r3
 8007696:	bd80      	pop	{r7, pc}
 8007698:	58024400 	.word	0x58024400
 800769c:	08012658 	.word	0x08012658

080076a0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80076a0:	b480      	push	{r7}
 80076a2:	b089      	sub	sp, #36	@ 0x24
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80076a8:	4ba1      	ldr	r3, [pc, #644]	@ (8007930 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80076aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076ac:	f003 0303 	and.w	r3, r3, #3
 80076b0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80076b2:	4b9f      	ldr	r3, [pc, #636]	@ (8007930 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80076b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076b6:	0b1b      	lsrs	r3, r3, #12
 80076b8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80076bc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80076be:	4b9c      	ldr	r3, [pc, #624]	@ (8007930 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80076c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076c2:	091b      	lsrs	r3, r3, #4
 80076c4:	f003 0301 	and.w	r3, r3, #1
 80076c8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80076ca:	4b99      	ldr	r3, [pc, #612]	@ (8007930 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80076cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076ce:	08db      	lsrs	r3, r3, #3
 80076d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80076d4:	693a      	ldr	r2, [r7, #16]
 80076d6:	fb02 f303 	mul.w	r3, r2, r3
 80076da:	ee07 3a90 	vmov	s15, r3
 80076de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076e2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80076e6:	697b      	ldr	r3, [r7, #20]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	f000 8111 	beq.w	8007910 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80076ee:	69bb      	ldr	r3, [r7, #24]
 80076f0:	2b02      	cmp	r3, #2
 80076f2:	f000 8083 	beq.w	80077fc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80076f6:	69bb      	ldr	r3, [r7, #24]
 80076f8:	2b02      	cmp	r3, #2
 80076fa:	f200 80a1 	bhi.w	8007840 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80076fe:	69bb      	ldr	r3, [r7, #24]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d003      	beq.n	800770c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007704:	69bb      	ldr	r3, [r7, #24]
 8007706:	2b01      	cmp	r3, #1
 8007708:	d056      	beq.n	80077b8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800770a:	e099      	b.n	8007840 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800770c:	4b88      	ldr	r3, [pc, #544]	@ (8007930 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f003 0320 	and.w	r3, r3, #32
 8007714:	2b00      	cmp	r3, #0
 8007716:	d02d      	beq.n	8007774 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007718:	4b85      	ldr	r3, [pc, #532]	@ (8007930 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	08db      	lsrs	r3, r3, #3
 800771e:	f003 0303 	and.w	r3, r3, #3
 8007722:	4a84      	ldr	r2, [pc, #528]	@ (8007934 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007724:	fa22 f303 	lsr.w	r3, r2, r3
 8007728:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800772a:	68bb      	ldr	r3, [r7, #8]
 800772c:	ee07 3a90 	vmov	s15, r3
 8007730:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007734:	697b      	ldr	r3, [r7, #20]
 8007736:	ee07 3a90 	vmov	s15, r3
 800773a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800773e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007742:	4b7b      	ldr	r3, [pc, #492]	@ (8007930 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007744:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007746:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800774a:	ee07 3a90 	vmov	s15, r3
 800774e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007752:	ed97 6a03 	vldr	s12, [r7, #12]
 8007756:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007938 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800775a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800775e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007762:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007766:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800776a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800776e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007772:	e087      	b.n	8007884 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007774:	697b      	ldr	r3, [r7, #20]
 8007776:	ee07 3a90 	vmov	s15, r3
 800777a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800777e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800793c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007782:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007786:	4b6a      	ldr	r3, [pc, #424]	@ (8007930 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007788:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800778a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800778e:	ee07 3a90 	vmov	s15, r3
 8007792:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007796:	ed97 6a03 	vldr	s12, [r7, #12]
 800779a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007938 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800779e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80077a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80077aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80077b6:	e065      	b.n	8007884 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80077b8:	697b      	ldr	r3, [r7, #20]
 80077ba:	ee07 3a90 	vmov	s15, r3
 80077be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077c2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007940 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80077c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80077ca:	4b59      	ldr	r3, [pc, #356]	@ (8007930 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80077cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077d2:	ee07 3a90 	vmov	s15, r3
 80077d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077da:	ed97 6a03 	vldr	s12, [r7, #12]
 80077de:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007938 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80077e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80077e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80077ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80077fa:	e043      	b.n	8007884 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80077fc:	697b      	ldr	r3, [r7, #20]
 80077fe:	ee07 3a90 	vmov	s15, r3
 8007802:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007806:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007944 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800780a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800780e:	4b48      	ldr	r3, [pc, #288]	@ (8007930 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007810:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007812:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007816:	ee07 3a90 	vmov	s15, r3
 800781a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800781e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007822:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007938 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007826:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800782a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800782e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007832:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007836:	ee67 7a27 	vmul.f32	s15, s14, s15
 800783a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800783e:	e021      	b.n	8007884 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007840:	697b      	ldr	r3, [r7, #20]
 8007842:	ee07 3a90 	vmov	s15, r3
 8007846:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800784a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007940 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800784e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007852:	4b37      	ldr	r3, [pc, #220]	@ (8007930 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007854:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007856:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800785a:	ee07 3a90 	vmov	s15, r3
 800785e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007862:	ed97 6a03 	vldr	s12, [r7, #12]
 8007866:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007938 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800786a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800786e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007872:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007876:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800787a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800787e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007882:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8007884:	4b2a      	ldr	r3, [pc, #168]	@ (8007930 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007886:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007888:	0a5b      	lsrs	r3, r3, #9
 800788a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800788e:	ee07 3a90 	vmov	s15, r3
 8007892:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007896:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800789a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800789e:	edd7 6a07 	vldr	s13, [r7, #28]
 80078a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80078a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80078aa:	ee17 2a90 	vmov	r2, s15
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80078b2:	4b1f      	ldr	r3, [pc, #124]	@ (8007930 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80078b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078b6:	0c1b      	lsrs	r3, r3, #16
 80078b8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80078bc:	ee07 3a90 	vmov	s15, r3
 80078c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078c4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80078c8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80078cc:	edd7 6a07 	vldr	s13, [r7, #28]
 80078d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80078d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80078d8:	ee17 2a90 	vmov	r2, s15
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80078e0:	4b13      	ldr	r3, [pc, #76]	@ (8007930 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80078e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078e4:	0e1b      	lsrs	r3, r3, #24
 80078e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80078ea:	ee07 3a90 	vmov	s15, r3
 80078ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078f2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80078f6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80078fa:	edd7 6a07 	vldr	s13, [r7, #28]
 80078fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007902:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007906:	ee17 2a90 	vmov	r2, s15
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800790e:	e008      	b.n	8007922 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2200      	movs	r2, #0
 8007914:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	2200      	movs	r2, #0
 800791a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2200      	movs	r2, #0
 8007920:	609a      	str	r2, [r3, #8]
}
 8007922:	bf00      	nop
 8007924:	3724      	adds	r7, #36	@ 0x24
 8007926:	46bd      	mov	sp, r7
 8007928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792c:	4770      	bx	lr
 800792e:	bf00      	nop
 8007930:	58024400 	.word	0x58024400
 8007934:	03d09000 	.word	0x03d09000
 8007938:	46000000 	.word	0x46000000
 800793c:	4c742400 	.word	0x4c742400
 8007940:	4a742400 	.word	0x4a742400
 8007944:	4bbebc20 	.word	0x4bbebc20

08007948 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007948:	b480      	push	{r7}
 800794a:	b089      	sub	sp, #36	@ 0x24
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007950:	4ba1      	ldr	r3, [pc, #644]	@ (8007bd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007952:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007954:	f003 0303 	and.w	r3, r3, #3
 8007958:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800795a:	4b9f      	ldr	r3, [pc, #636]	@ (8007bd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800795c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800795e:	0d1b      	lsrs	r3, r3, #20
 8007960:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007964:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007966:	4b9c      	ldr	r3, [pc, #624]	@ (8007bd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007968:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800796a:	0a1b      	lsrs	r3, r3, #8
 800796c:	f003 0301 	and.w	r3, r3, #1
 8007970:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8007972:	4b99      	ldr	r3, [pc, #612]	@ (8007bd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007974:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007976:	08db      	lsrs	r3, r3, #3
 8007978:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800797c:	693a      	ldr	r2, [r7, #16]
 800797e:	fb02 f303 	mul.w	r3, r2, r3
 8007982:	ee07 3a90 	vmov	s15, r3
 8007986:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800798a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800798e:	697b      	ldr	r3, [r7, #20]
 8007990:	2b00      	cmp	r3, #0
 8007992:	f000 8111 	beq.w	8007bb8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007996:	69bb      	ldr	r3, [r7, #24]
 8007998:	2b02      	cmp	r3, #2
 800799a:	f000 8083 	beq.w	8007aa4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800799e:	69bb      	ldr	r3, [r7, #24]
 80079a0:	2b02      	cmp	r3, #2
 80079a2:	f200 80a1 	bhi.w	8007ae8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80079a6:	69bb      	ldr	r3, [r7, #24]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d003      	beq.n	80079b4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80079ac:	69bb      	ldr	r3, [r7, #24]
 80079ae:	2b01      	cmp	r3, #1
 80079b0:	d056      	beq.n	8007a60 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80079b2:	e099      	b.n	8007ae8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80079b4:	4b88      	ldr	r3, [pc, #544]	@ (8007bd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	f003 0320 	and.w	r3, r3, #32
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d02d      	beq.n	8007a1c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80079c0:	4b85      	ldr	r3, [pc, #532]	@ (8007bd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	08db      	lsrs	r3, r3, #3
 80079c6:	f003 0303 	and.w	r3, r3, #3
 80079ca:	4a84      	ldr	r2, [pc, #528]	@ (8007bdc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80079cc:	fa22 f303 	lsr.w	r3, r2, r3
 80079d0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80079d2:	68bb      	ldr	r3, [r7, #8]
 80079d4:	ee07 3a90 	vmov	s15, r3
 80079d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079dc:	697b      	ldr	r3, [r7, #20]
 80079de:	ee07 3a90 	vmov	s15, r3
 80079e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80079ea:	4b7b      	ldr	r3, [pc, #492]	@ (8007bd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80079ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079f2:	ee07 3a90 	vmov	s15, r3
 80079f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80079fe:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007be0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007a02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a0a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007a0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a16:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007a1a:	e087      	b.n	8007b2c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007a1c:	697b      	ldr	r3, [r7, #20]
 8007a1e:	ee07 3a90 	vmov	s15, r3
 8007a22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a26:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007be4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007a2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a2e:	4b6a      	ldr	r3, [pc, #424]	@ (8007bd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007a30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a36:	ee07 3a90 	vmov	s15, r3
 8007a3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a42:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007be0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007a46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a4e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007a52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a5a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007a5e:	e065      	b.n	8007b2c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007a60:	697b      	ldr	r3, [r7, #20]
 8007a62:	ee07 3a90 	vmov	s15, r3
 8007a66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a6a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007be8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007a6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a72:	4b59      	ldr	r3, [pc, #356]	@ (8007bd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007a74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a7a:	ee07 3a90 	vmov	s15, r3
 8007a7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a82:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a86:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007be0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007a8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a92:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007a96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a9e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007aa2:	e043      	b.n	8007b2c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007aa4:	697b      	ldr	r3, [r7, #20]
 8007aa6:	ee07 3a90 	vmov	s15, r3
 8007aaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007aae:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007bec <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007ab2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ab6:	4b48      	ldr	r3, [pc, #288]	@ (8007bd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007ab8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007aba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007abe:	ee07 3a90 	vmov	s15, r3
 8007ac2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ac6:	ed97 6a03 	vldr	s12, [r7, #12]
 8007aca:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007be0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007ace:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ad2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ad6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007ada:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ade:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ae2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007ae6:	e021      	b.n	8007b2c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007ae8:	697b      	ldr	r3, [r7, #20]
 8007aea:	ee07 3a90 	vmov	s15, r3
 8007aee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007af2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007be8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007af6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007afa:	4b37      	ldr	r3, [pc, #220]	@ (8007bd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007afc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007afe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b02:	ee07 3a90 	vmov	s15, r3
 8007b06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b0e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007be0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007b12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b1a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007b1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b26:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007b2a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8007b2c:	4b2a      	ldr	r3, [pc, #168]	@ (8007bd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007b2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b30:	0a5b      	lsrs	r3, r3, #9
 8007b32:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007b36:	ee07 3a90 	vmov	s15, r3
 8007b3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b3e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007b42:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007b46:	edd7 6a07 	vldr	s13, [r7, #28]
 8007b4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007b4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007b52:	ee17 2a90 	vmov	r2, s15
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8007b5a:	4b1f      	ldr	r3, [pc, #124]	@ (8007bd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007b5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b5e:	0c1b      	lsrs	r3, r3, #16
 8007b60:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007b64:	ee07 3a90 	vmov	s15, r3
 8007b68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b6c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007b70:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007b74:	edd7 6a07 	vldr	s13, [r7, #28]
 8007b78:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007b7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007b80:	ee17 2a90 	vmov	r2, s15
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007b88:	4b13      	ldr	r3, [pc, #76]	@ (8007bd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007b8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b8c:	0e1b      	lsrs	r3, r3, #24
 8007b8e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007b92:	ee07 3a90 	vmov	s15, r3
 8007b96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b9a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007b9e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007ba2:	edd7 6a07 	vldr	s13, [r7, #28]
 8007ba6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007baa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007bae:	ee17 2a90 	vmov	r2, s15
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007bb6:	e008      	b.n	8007bca <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	2200      	movs	r2, #0
 8007bbc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	609a      	str	r2, [r3, #8]
}
 8007bca:	bf00      	nop
 8007bcc:	3724      	adds	r7, #36	@ 0x24
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd4:	4770      	bx	lr
 8007bd6:	bf00      	nop
 8007bd8:	58024400 	.word	0x58024400
 8007bdc:	03d09000 	.word	0x03d09000
 8007be0:	46000000 	.word	0x46000000
 8007be4:	4c742400 	.word	0x4c742400
 8007be8:	4a742400 	.word	0x4a742400
 8007bec:	4bbebc20 	.word	0x4bbebc20

08007bf0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b084      	sub	sp, #16
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
 8007bf8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007bfe:	4b53      	ldr	r3, [pc, #332]	@ (8007d4c <RCCEx_PLL2_Config+0x15c>)
 8007c00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c02:	f003 0303 	and.w	r3, r3, #3
 8007c06:	2b03      	cmp	r3, #3
 8007c08:	d101      	bne.n	8007c0e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007c0a:	2301      	movs	r3, #1
 8007c0c:	e099      	b.n	8007d42 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007c0e:	4b4f      	ldr	r3, [pc, #316]	@ (8007d4c <RCCEx_PLL2_Config+0x15c>)
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	4a4e      	ldr	r2, [pc, #312]	@ (8007d4c <RCCEx_PLL2_Config+0x15c>)
 8007c14:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007c18:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007c1a:	f7fb f93d 	bl	8002e98 <HAL_GetTick>
 8007c1e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007c20:	e008      	b.n	8007c34 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007c22:	f7fb f939 	bl	8002e98 <HAL_GetTick>
 8007c26:	4602      	mov	r2, r0
 8007c28:	68bb      	ldr	r3, [r7, #8]
 8007c2a:	1ad3      	subs	r3, r2, r3
 8007c2c:	2b02      	cmp	r3, #2
 8007c2e:	d901      	bls.n	8007c34 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007c30:	2303      	movs	r3, #3
 8007c32:	e086      	b.n	8007d42 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007c34:	4b45      	ldr	r3, [pc, #276]	@ (8007d4c <RCCEx_PLL2_Config+0x15c>)
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d1f0      	bne.n	8007c22 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007c40:	4b42      	ldr	r3, [pc, #264]	@ (8007d4c <RCCEx_PLL2_Config+0x15c>)
 8007c42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c44:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	031b      	lsls	r3, r3, #12
 8007c4e:	493f      	ldr	r1, [pc, #252]	@ (8007d4c <RCCEx_PLL2_Config+0x15c>)
 8007c50:	4313      	orrs	r3, r2
 8007c52:	628b      	str	r3, [r1, #40]	@ 0x28
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	685b      	ldr	r3, [r3, #4]
 8007c58:	3b01      	subs	r3, #1
 8007c5a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	689b      	ldr	r3, [r3, #8]
 8007c62:	3b01      	subs	r3, #1
 8007c64:	025b      	lsls	r3, r3, #9
 8007c66:	b29b      	uxth	r3, r3
 8007c68:	431a      	orrs	r2, r3
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	68db      	ldr	r3, [r3, #12]
 8007c6e:	3b01      	subs	r3, #1
 8007c70:	041b      	lsls	r3, r3, #16
 8007c72:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007c76:	431a      	orrs	r2, r3
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	691b      	ldr	r3, [r3, #16]
 8007c7c:	3b01      	subs	r3, #1
 8007c7e:	061b      	lsls	r3, r3, #24
 8007c80:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007c84:	4931      	ldr	r1, [pc, #196]	@ (8007d4c <RCCEx_PLL2_Config+0x15c>)
 8007c86:	4313      	orrs	r3, r2
 8007c88:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007c8a:	4b30      	ldr	r3, [pc, #192]	@ (8007d4c <RCCEx_PLL2_Config+0x15c>)
 8007c8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c8e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	695b      	ldr	r3, [r3, #20]
 8007c96:	492d      	ldr	r1, [pc, #180]	@ (8007d4c <RCCEx_PLL2_Config+0x15c>)
 8007c98:	4313      	orrs	r3, r2
 8007c9a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007c9c:	4b2b      	ldr	r3, [pc, #172]	@ (8007d4c <RCCEx_PLL2_Config+0x15c>)
 8007c9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ca0:	f023 0220 	bic.w	r2, r3, #32
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	699b      	ldr	r3, [r3, #24]
 8007ca8:	4928      	ldr	r1, [pc, #160]	@ (8007d4c <RCCEx_PLL2_Config+0x15c>)
 8007caa:	4313      	orrs	r3, r2
 8007cac:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007cae:	4b27      	ldr	r3, [pc, #156]	@ (8007d4c <RCCEx_PLL2_Config+0x15c>)
 8007cb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cb2:	4a26      	ldr	r2, [pc, #152]	@ (8007d4c <RCCEx_PLL2_Config+0x15c>)
 8007cb4:	f023 0310 	bic.w	r3, r3, #16
 8007cb8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007cba:	4b24      	ldr	r3, [pc, #144]	@ (8007d4c <RCCEx_PLL2_Config+0x15c>)
 8007cbc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007cbe:	4b24      	ldr	r3, [pc, #144]	@ (8007d50 <RCCEx_PLL2_Config+0x160>)
 8007cc0:	4013      	ands	r3, r2
 8007cc2:	687a      	ldr	r2, [r7, #4]
 8007cc4:	69d2      	ldr	r2, [r2, #28]
 8007cc6:	00d2      	lsls	r2, r2, #3
 8007cc8:	4920      	ldr	r1, [pc, #128]	@ (8007d4c <RCCEx_PLL2_Config+0x15c>)
 8007cca:	4313      	orrs	r3, r2
 8007ccc:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007cce:	4b1f      	ldr	r3, [pc, #124]	@ (8007d4c <RCCEx_PLL2_Config+0x15c>)
 8007cd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cd2:	4a1e      	ldr	r2, [pc, #120]	@ (8007d4c <RCCEx_PLL2_Config+0x15c>)
 8007cd4:	f043 0310 	orr.w	r3, r3, #16
 8007cd8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007cda:	683b      	ldr	r3, [r7, #0]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d106      	bne.n	8007cee <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007ce0:	4b1a      	ldr	r3, [pc, #104]	@ (8007d4c <RCCEx_PLL2_Config+0x15c>)
 8007ce2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ce4:	4a19      	ldr	r2, [pc, #100]	@ (8007d4c <RCCEx_PLL2_Config+0x15c>)
 8007ce6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007cea:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007cec:	e00f      	b.n	8007d0e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007cee:	683b      	ldr	r3, [r7, #0]
 8007cf0:	2b01      	cmp	r3, #1
 8007cf2:	d106      	bne.n	8007d02 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007cf4:	4b15      	ldr	r3, [pc, #84]	@ (8007d4c <RCCEx_PLL2_Config+0x15c>)
 8007cf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cf8:	4a14      	ldr	r2, [pc, #80]	@ (8007d4c <RCCEx_PLL2_Config+0x15c>)
 8007cfa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007cfe:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007d00:	e005      	b.n	8007d0e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007d02:	4b12      	ldr	r3, [pc, #72]	@ (8007d4c <RCCEx_PLL2_Config+0x15c>)
 8007d04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d06:	4a11      	ldr	r2, [pc, #68]	@ (8007d4c <RCCEx_PLL2_Config+0x15c>)
 8007d08:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007d0c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007d0e:	4b0f      	ldr	r3, [pc, #60]	@ (8007d4c <RCCEx_PLL2_Config+0x15c>)
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	4a0e      	ldr	r2, [pc, #56]	@ (8007d4c <RCCEx_PLL2_Config+0x15c>)
 8007d14:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007d18:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007d1a:	f7fb f8bd 	bl	8002e98 <HAL_GetTick>
 8007d1e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007d20:	e008      	b.n	8007d34 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007d22:	f7fb f8b9 	bl	8002e98 <HAL_GetTick>
 8007d26:	4602      	mov	r2, r0
 8007d28:	68bb      	ldr	r3, [r7, #8]
 8007d2a:	1ad3      	subs	r3, r2, r3
 8007d2c:	2b02      	cmp	r3, #2
 8007d2e:	d901      	bls.n	8007d34 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007d30:	2303      	movs	r3, #3
 8007d32:	e006      	b.n	8007d42 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007d34:	4b05      	ldr	r3, [pc, #20]	@ (8007d4c <RCCEx_PLL2_Config+0x15c>)
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d0f0      	beq.n	8007d22 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007d40:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d42:	4618      	mov	r0, r3
 8007d44:	3710      	adds	r7, #16
 8007d46:	46bd      	mov	sp, r7
 8007d48:	bd80      	pop	{r7, pc}
 8007d4a:	bf00      	nop
 8007d4c:	58024400 	.word	0x58024400
 8007d50:	ffff0007 	.word	0xffff0007

08007d54 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007d54:	b580      	push	{r7, lr}
 8007d56:	b084      	sub	sp, #16
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
 8007d5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007d5e:	2300      	movs	r3, #0
 8007d60:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007d62:	4b53      	ldr	r3, [pc, #332]	@ (8007eb0 <RCCEx_PLL3_Config+0x15c>)
 8007d64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d66:	f003 0303 	and.w	r3, r3, #3
 8007d6a:	2b03      	cmp	r3, #3
 8007d6c:	d101      	bne.n	8007d72 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007d6e:	2301      	movs	r3, #1
 8007d70:	e099      	b.n	8007ea6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007d72:	4b4f      	ldr	r3, [pc, #316]	@ (8007eb0 <RCCEx_PLL3_Config+0x15c>)
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	4a4e      	ldr	r2, [pc, #312]	@ (8007eb0 <RCCEx_PLL3_Config+0x15c>)
 8007d78:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007d7c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007d7e:	f7fb f88b 	bl	8002e98 <HAL_GetTick>
 8007d82:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007d84:	e008      	b.n	8007d98 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007d86:	f7fb f887 	bl	8002e98 <HAL_GetTick>
 8007d8a:	4602      	mov	r2, r0
 8007d8c:	68bb      	ldr	r3, [r7, #8]
 8007d8e:	1ad3      	subs	r3, r2, r3
 8007d90:	2b02      	cmp	r3, #2
 8007d92:	d901      	bls.n	8007d98 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007d94:	2303      	movs	r3, #3
 8007d96:	e086      	b.n	8007ea6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007d98:	4b45      	ldr	r3, [pc, #276]	@ (8007eb0 <RCCEx_PLL3_Config+0x15c>)
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d1f0      	bne.n	8007d86 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007da4:	4b42      	ldr	r3, [pc, #264]	@ (8007eb0 <RCCEx_PLL3_Config+0x15c>)
 8007da6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007da8:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	051b      	lsls	r3, r3, #20
 8007db2:	493f      	ldr	r1, [pc, #252]	@ (8007eb0 <RCCEx_PLL3_Config+0x15c>)
 8007db4:	4313      	orrs	r3, r2
 8007db6:	628b      	str	r3, [r1, #40]	@ 0x28
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	685b      	ldr	r3, [r3, #4]
 8007dbc:	3b01      	subs	r3, #1
 8007dbe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	689b      	ldr	r3, [r3, #8]
 8007dc6:	3b01      	subs	r3, #1
 8007dc8:	025b      	lsls	r3, r3, #9
 8007dca:	b29b      	uxth	r3, r3
 8007dcc:	431a      	orrs	r2, r3
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	68db      	ldr	r3, [r3, #12]
 8007dd2:	3b01      	subs	r3, #1
 8007dd4:	041b      	lsls	r3, r3, #16
 8007dd6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007dda:	431a      	orrs	r2, r3
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	691b      	ldr	r3, [r3, #16]
 8007de0:	3b01      	subs	r3, #1
 8007de2:	061b      	lsls	r3, r3, #24
 8007de4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007de8:	4931      	ldr	r1, [pc, #196]	@ (8007eb0 <RCCEx_PLL3_Config+0x15c>)
 8007dea:	4313      	orrs	r3, r2
 8007dec:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007dee:	4b30      	ldr	r3, [pc, #192]	@ (8007eb0 <RCCEx_PLL3_Config+0x15c>)
 8007df0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007df2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	695b      	ldr	r3, [r3, #20]
 8007dfa:	492d      	ldr	r1, [pc, #180]	@ (8007eb0 <RCCEx_PLL3_Config+0x15c>)
 8007dfc:	4313      	orrs	r3, r2
 8007dfe:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007e00:	4b2b      	ldr	r3, [pc, #172]	@ (8007eb0 <RCCEx_PLL3_Config+0x15c>)
 8007e02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e04:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	699b      	ldr	r3, [r3, #24]
 8007e0c:	4928      	ldr	r1, [pc, #160]	@ (8007eb0 <RCCEx_PLL3_Config+0x15c>)
 8007e0e:	4313      	orrs	r3, r2
 8007e10:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007e12:	4b27      	ldr	r3, [pc, #156]	@ (8007eb0 <RCCEx_PLL3_Config+0x15c>)
 8007e14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e16:	4a26      	ldr	r2, [pc, #152]	@ (8007eb0 <RCCEx_PLL3_Config+0x15c>)
 8007e18:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007e1c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007e1e:	4b24      	ldr	r3, [pc, #144]	@ (8007eb0 <RCCEx_PLL3_Config+0x15c>)
 8007e20:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007e22:	4b24      	ldr	r3, [pc, #144]	@ (8007eb4 <RCCEx_PLL3_Config+0x160>)
 8007e24:	4013      	ands	r3, r2
 8007e26:	687a      	ldr	r2, [r7, #4]
 8007e28:	69d2      	ldr	r2, [r2, #28]
 8007e2a:	00d2      	lsls	r2, r2, #3
 8007e2c:	4920      	ldr	r1, [pc, #128]	@ (8007eb0 <RCCEx_PLL3_Config+0x15c>)
 8007e2e:	4313      	orrs	r3, r2
 8007e30:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007e32:	4b1f      	ldr	r3, [pc, #124]	@ (8007eb0 <RCCEx_PLL3_Config+0x15c>)
 8007e34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e36:	4a1e      	ldr	r2, [pc, #120]	@ (8007eb0 <RCCEx_PLL3_Config+0x15c>)
 8007e38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007e3c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d106      	bne.n	8007e52 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007e44:	4b1a      	ldr	r3, [pc, #104]	@ (8007eb0 <RCCEx_PLL3_Config+0x15c>)
 8007e46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e48:	4a19      	ldr	r2, [pc, #100]	@ (8007eb0 <RCCEx_PLL3_Config+0x15c>)
 8007e4a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8007e4e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007e50:	e00f      	b.n	8007e72 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	2b01      	cmp	r3, #1
 8007e56:	d106      	bne.n	8007e66 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007e58:	4b15      	ldr	r3, [pc, #84]	@ (8007eb0 <RCCEx_PLL3_Config+0x15c>)
 8007e5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e5c:	4a14      	ldr	r2, [pc, #80]	@ (8007eb0 <RCCEx_PLL3_Config+0x15c>)
 8007e5e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007e62:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007e64:	e005      	b.n	8007e72 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007e66:	4b12      	ldr	r3, [pc, #72]	@ (8007eb0 <RCCEx_PLL3_Config+0x15c>)
 8007e68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e6a:	4a11      	ldr	r2, [pc, #68]	@ (8007eb0 <RCCEx_PLL3_Config+0x15c>)
 8007e6c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007e70:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007e72:	4b0f      	ldr	r3, [pc, #60]	@ (8007eb0 <RCCEx_PLL3_Config+0x15c>)
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	4a0e      	ldr	r2, [pc, #56]	@ (8007eb0 <RCCEx_PLL3_Config+0x15c>)
 8007e78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007e7c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007e7e:	f7fb f80b 	bl	8002e98 <HAL_GetTick>
 8007e82:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007e84:	e008      	b.n	8007e98 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007e86:	f7fb f807 	bl	8002e98 <HAL_GetTick>
 8007e8a:	4602      	mov	r2, r0
 8007e8c:	68bb      	ldr	r3, [r7, #8]
 8007e8e:	1ad3      	subs	r3, r2, r3
 8007e90:	2b02      	cmp	r3, #2
 8007e92:	d901      	bls.n	8007e98 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007e94:	2303      	movs	r3, #3
 8007e96:	e006      	b.n	8007ea6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007e98:	4b05      	ldr	r3, [pc, #20]	@ (8007eb0 <RCCEx_PLL3_Config+0x15c>)
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d0f0      	beq.n	8007e86 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007ea4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	3710      	adds	r7, #16
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	bd80      	pop	{r7, pc}
 8007eae:	bf00      	nop
 8007eb0:	58024400 	.word	0x58024400
 8007eb4:	ffff0007 	.word	0xffff0007

08007eb8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b082      	sub	sp, #8
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d101      	bne.n	8007eca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007ec6:	2301      	movs	r3, #1
 8007ec8:	e049      	b.n	8007f5e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007ed0:	b2db      	uxtb	r3, r3
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d106      	bne.n	8007ee4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	2200      	movs	r2, #0
 8007eda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007ede:	6878      	ldr	r0, [r7, #4]
 8007ee0:	f7fa f824 	bl	8001f2c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2202      	movs	r2, #2
 8007ee8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681a      	ldr	r2, [r3, #0]
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	3304      	adds	r3, #4
 8007ef4:	4619      	mov	r1, r3
 8007ef6:	4610      	mov	r0, r2
 8007ef8:	f000 fb12 	bl	8008520 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	2201      	movs	r2, #1
 8007f00:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2201      	movs	r2, #1
 8007f08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2201      	movs	r2, #1
 8007f10:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2201      	movs	r2, #1
 8007f18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	2201      	movs	r2, #1
 8007f20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	2201      	movs	r2, #1
 8007f28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	2201      	movs	r2, #1
 8007f30:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2201      	movs	r2, #1
 8007f38:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2201      	movs	r2, #1
 8007f40:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2201      	movs	r2, #1
 8007f48:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2201      	movs	r2, #1
 8007f50:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2201      	movs	r2, #1
 8007f58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007f5c:	2300      	movs	r3, #0
}
 8007f5e:	4618      	mov	r0, r3
 8007f60:	3708      	adds	r7, #8
 8007f62:	46bd      	mov	sp, r7
 8007f64:	bd80      	pop	{r7, pc}
	...

08007f68 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007f68:	b480      	push	{r7}
 8007f6a:	b085      	sub	sp, #20
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007f76:	b2db      	uxtb	r3, r3
 8007f78:	2b01      	cmp	r3, #1
 8007f7a:	d001      	beq.n	8007f80 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007f7c:	2301      	movs	r3, #1
 8007f7e:	e05e      	b.n	800803e <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2202      	movs	r2, #2
 8007f84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	68da      	ldr	r2, [r3, #12]
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	f042 0201 	orr.w	r2, r2, #1
 8007f96:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	4a2b      	ldr	r2, [pc, #172]	@ (800804c <HAL_TIM_Base_Start_IT+0xe4>)
 8007f9e:	4293      	cmp	r3, r2
 8007fa0:	d02c      	beq.n	8007ffc <HAL_TIM_Base_Start_IT+0x94>
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007faa:	d027      	beq.n	8007ffc <HAL_TIM_Base_Start_IT+0x94>
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	4a27      	ldr	r2, [pc, #156]	@ (8008050 <HAL_TIM_Base_Start_IT+0xe8>)
 8007fb2:	4293      	cmp	r3, r2
 8007fb4:	d022      	beq.n	8007ffc <HAL_TIM_Base_Start_IT+0x94>
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	4a26      	ldr	r2, [pc, #152]	@ (8008054 <HAL_TIM_Base_Start_IT+0xec>)
 8007fbc:	4293      	cmp	r3, r2
 8007fbe:	d01d      	beq.n	8007ffc <HAL_TIM_Base_Start_IT+0x94>
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	4a24      	ldr	r2, [pc, #144]	@ (8008058 <HAL_TIM_Base_Start_IT+0xf0>)
 8007fc6:	4293      	cmp	r3, r2
 8007fc8:	d018      	beq.n	8007ffc <HAL_TIM_Base_Start_IT+0x94>
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	4a23      	ldr	r2, [pc, #140]	@ (800805c <HAL_TIM_Base_Start_IT+0xf4>)
 8007fd0:	4293      	cmp	r3, r2
 8007fd2:	d013      	beq.n	8007ffc <HAL_TIM_Base_Start_IT+0x94>
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	4a21      	ldr	r2, [pc, #132]	@ (8008060 <HAL_TIM_Base_Start_IT+0xf8>)
 8007fda:	4293      	cmp	r3, r2
 8007fdc:	d00e      	beq.n	8007ffc <HAL_TIM_Base_Start_IT+0x94>
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	4a20      	ldr	r2, [pc, #128]	@ (8008064 <HAL_TIM_Base_Start_IT+0xfc>)
 8007fe4:	4293      	cmp	r3, r2
 8007fe6:	d009      	beq.n	8007ffc <HAL_TIM_Base_Start_IT+0x94>
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	4a1e      	ldr	r2, [pc, #120]	@ (8008068 <HAL_TIM_Base_Start_IT+0x100>)
 8007fee:	4293      	cmp	r3, r2
 8007ff0:	d004      	beq.n	8007ffc <HAL_TIM_Base_Start_IT+0x94>
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	4a1d      	ldr	r2, [pc, #116]	@ (800806c <HAL_TIM_Base_Start_IT+0x104>)
 8007ff8:	4293      	cmp	r3, r2
 8007ffa:	d115      	bne.n	8008028 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	689a      	ldr	r2, [r3, #8]
 8008002:	4b1b      	ldr	r3, [pc, #108]	@ (8008070 <HAL_TIM_Base_Start_IT+0x108>)
 8008004:	4013      	ands	r3, r2
 8008006:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	2b06      	cmp	r3, #6
 800800c:	d015      	beq.n	800803a <HAL_TIM_Base_Start_IT+0xd2>
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008014:	d011      	beq.n	800803a <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	681a      	ldr	r2, [r3, #0]
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	f042 0201 	orr.w	r2, r2, #1
 8008024:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008026:	e008      	b.n	800803a <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	681a      	ldr	r2, [r3, #0]
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	f042 0201 	orr.w	r2, r2, #1
 8008036:	601a      	str	r2, [r3, #0]
 8008038:	e000      	b.n	800803c <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800803a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800803c:	2300      	movs	r3, #0
}
 800803e:	4618      	mov	r0, r3
 8008040:	3714      	adds	r7, #20
 8008042:	46bd      	mov	sp, r7
 8008044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008048:	4770      	bx	lr
 800804a:	bf00      	nop
 800804c:	40010000 	.word	0x40010000
 8008050:	40000400 	.word	0x40000400
 8008054:	40000800 	.word	0x40000800
 8008058:	40000c00 	.word	0x40000c00
 800805c:	40010400 	.word	0x40010400
 8008060:	40001800 	.word	0x40001800
 8008064:	40014000 	.word	0x40014000
 8008068:	4000e000 	.word	0x4000e000
 800806c:	4000e400 	.word	0x4000e400
 8008070:	00010007 	.word	0x00010007

08008074 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8008074:	b480      	push	{r7}
 8008076:	b083      	sub	sp, #12
 8008078:	af00      	add	r7, sp, #0
 800807a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	68da      	ldr	r2, [r3, #12]
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	f022 0201 	bic.w	r2, r2, #1
 800808a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	6a1a      	ldr	r2, [r3, #32]
 8008092:	f241 1311 	movw	r3, #4369	@ 0x1111
 8008096:	4013      	ands	r3, r2
 8008098:	2b00      	cmp	r3, #0
 800809a:	d10f      	bne.n	80080bc <HAL_TIM_Base_Stop_IT+0x48>
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	6a1a      	ldr	r2, [r3, #32]
 80080a2:	f240 4344 	movw	r3, #1092	@ 0x444
 80080a6:	4013      	ands	r3, r2
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d107      	bne.n	80080bc <HAL_TIM_Base_Stop_IT+0x48>
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	681a      	ldr	r2, [r3, #0]
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	f022 0201 	bic.w	r2, r2, #1
 80080ba:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2201      	movs	r2, #1
 80080c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80080c4:	2300      	movs	r3, #0
}
 80080c6:	4618      	mov	r0, r3
 80080c8:	370c      	adds	r7, #12
 80080ca:	46bd      	mov	sp, r7
 80080cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d0:	4770      	bx	lr

080080d2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80080d2:	b580      	push	{r7, lr}
 80080d4:	b084      	sub	sp, #16
 80080d6:	af00      	add	r7, sp, #0
 80080d8:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	68db      	ldr	r3, [r3, #12]
 80080e0:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	691b      	ldr	r3, [r3, #16]
 80080e8:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80080ea:	68bb      	ldr	r3, [r7, #8]
 80080ec:	f003 0302 	and.w	r3, r3, #2
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d020      	beq.n	8008136 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	f003 0302 	and.w	r3, r3, #2
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d01b      	beq.n	8008136 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	f06f 0202 	mvn.w	r2, #2
 8008106:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2201      	movs	r2, #1
 800810c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	699b      	ldr	r3, [r3, #24]
 8008114:	f003 0303 	and.w	r3, r3, #3
 8008118:	2b00      	cmp	r3, #0
 800811a:	d003      	beq.n	8008124 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800811c:	6878      	ldr	r0, [r7, #4]
 800811e:	f000 f9e1 	bl	80084e4 <HAL_TIM_IC_CaptureCallback>
 8008122:	e005      	b.n	8008130 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008124:	6878      	ldr	r0, [r7, #4]
 8008126:	f000 f9d3 	bl	80084d0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800812a:	6878      	ldr	r0, [r7, #4]
 800812c:	f000 f9e4 	bl	80084f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2200      	movs	r2, #0
 8008134:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008136:	68bb      	ldr	r3, [r7, #8]
 8008138:	f003 0304 	and.w	r3, r3, #4
 800813c:	2b00      	cmp	r3, #0
 800813e:	d020      	beq.n	8008182 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	f003 0304 	and.w	r3, r3, #4
 8008146:	2b00      	cmp	r3, #0
 8008148:	d01b      	beq.n	8008182 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	f06f 0204 	mvn.w	r2, #4
 8008152:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2202      	movs	r2, #2
 8008158:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	699b      	ldr	r3, [r3, #24]
 8008160:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008164:	2b00      	cmp	r3, #0
 8008166:	d003      	beq.n	8008170 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008168:	6878      	ldr	r0, [r7, #4]
 800816a:	f000 f9bb 	bl	80084e4 <HAL_TIM_IC_CaptureCallback>
 800816e:	e005      	b.n	800817c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008170:	6878      	ldr	r0, [r7, #4]
 8008172:	f000 f9ad 	bl	80084d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008176:	6878      	ldr	r0, [r7, #4]
 8008178:	f000 f9be 	bl	80084f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2200      	movs	r2, #0
 8008180:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008182:	68bb      	ldr	r3, [r7, #8]
 8008184:	f003 0308 	and.w	r3, r3, #8
 8008188:	2b00      	cmp	r3, #0
 800818a:	d020      	beq.n	80081ce <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	f003 0308 	and.w	r3, r3, #8
 8008192:	2b00      	cmp	r3, #0
 8008194:	d01b      	beq.n	80081ce <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	f06f 0208 	mvn.w	r2, #8
 800819e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2204      	movs	r2, #4
 80081a4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	69db      	ldr	r3, [r3, #28]
 80081ac:	f003 0303 	and.w	r3, r3, #3
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d003      	beq.n	80081bc <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80081b4:	6878      	ldr	r0, [r7, #4]
 80081b6:	f000 f995 	bl	80084e4 <HAL_TIM_IC_CaptureCallback>
 80081ba:	e005      	b.n	80081c8 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80081bc:	6878      	ldr	r0, [r7, #4]
 80081be:	f000 f987 	bl	80084d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80081c2:	6878      	ldr	r0, [r7, #4]
 80081c4:	f000 f998 	bl	80084f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2200      	movs	r2, #0
 80081cc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80081ce:	68bb      	ldr	r3, [r7, #8]
 80081d0:	f003 0310 	and.w	r3, r3, #16
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d020      	beq.n	800821a <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	f003 0310 	and.w	r3, r3, #16
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d01b      	beq.n	800821a <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	f06f 0210 	mvn.w	r2, #16
 80081ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2208      	movs	r2, #8
 80081f0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	69db      	ldr	r3, [r3, #28]
 80081f8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d003      	beq.n	8008208 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008200:	6878      	ldr	r0, [r7, #4]
 8008202:	f000 f96f 	bl	80084e4 <HAL_TIM_IC_CaptureCallback>
 8008206:	e005      	b.n	8008214 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008208:	6878      	ldr	r0, [r7, #4]
 800820a:	f000 f961 	bl	80084d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800820e:	6878      	ldr	r0, [r7, #4]
 8008210:	f000 f972 	bl	80084f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2200      	movs	r2, #0
 8008218:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800821a:	68bb      	ldr	r3, [r7, #8]
 800821c:	f003 0301 	and.w	r3, r3, #1
 8008220:	2b00      	cmp	r3, #0
 8008222:	d00c      	beq.n	800823e <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	f003 0301 	and.w	r3, r3, #1
 800822a:	2b00      	cmp	r3, #0
 800822c:	d007      	beq.n	800823e <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	f06f 0201 	mvn.w	r2, #1
 8008236:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008238:	6878      	ldr	r0, [r7, #4]
 800823a:	f7f9 fa85 	bl	8001748 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800823e:	68bb      	ldr	r3, [r7, #8]
 8008240:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008244:	2b00      	cmp	r3, #0
 8008246:	d104      	bne.n	8008252 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8008248:	68bb      	ldr	r3, [r7, #8]
 800824a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800824e:	2b00      	cmp	r3, #0
 8008250:	d00c      	beq.n	800826c <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008258:	2b00      	cmp	r3, #0
 800825a:	d007      	beq.n	800826c <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8008264:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008266:	6878      	ldr	r0, [r7, #4]
 8008268:	f000 fb50 	bl	800890c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800826c:	68bb      	ldr	r3, [r7, #8]
 800826e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008272:	2b00      	cmp	r3, #0
 8008274:	d00c      	beq.n	8008290 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800827c:	2b00      	cmp	r3, #0
 800827e:	d007      	beq.n	8008290 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8008288:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800828a:	6878      	ldr	r0, [r7, #4]
 800828c:	f000 fb48 	bl	8008920 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008290:	68bb      	ldr	r3, [r7, #8]
 8008292:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008296:	2b00      	cmp	r3, #0
 8008298:	d00c      	beq.n	80082b4 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d007      	beq.n	80082b4 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80082ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80082ae:	6878      	ldr	r0, [r7, #4]
 80082b0:	f000 f92c 	bl	800850c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80082b4:	68bb      	ldr	r3, [r7, #8]
 80082b6:	f003 0320 	and.w	r3, r3, #32
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d00c      	beq.n	80082d8 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	f003 0320 	and.w	r3, r3, #32
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d007      	beq.n	80082d8 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	f06f 0220 	mvn.w	r2, #32
 80082d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80082d2:	6878      	ldr	r0, [r7, #4]
 80082d4:	f000 fb10 	bl	80088f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80082d8:	bf00      	nop
 80082da:	3710      	adds	r7, #16
 80082dc:	46bd      	mov	sp, r7
 80082de:	bd80      	pop	{r7, pc}

080082e0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b084      	sub	sp, #16
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	6078      	str	r0, [r7, #4]
 80082e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80082ea:	2300      	movs	r3, #0
 80082ec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80082f4:	2b01      	cmp	r3, #1
 80082f6:	d101      	bne.n	80082fc <HAL_TIM_ConfigClockSource+0x1c>
 80082f8:	2302      	movs	r3, #2
 80082fa:	e0dc      	b.n	80084b6 <HAL_TIM_ConfigClockSource+0x1d6>
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2201      	movs	r2, #1
 8008300:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2202      	movs	r2, #2
 8008308:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	689b      	ldr	r3, [r3, #8]
 8008312:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008314:	68ba      	ldr	r2, [r7, #8]
 8008316:	4b6a      	ldr	r3, [pc, #424]	@ (80084c0 <HAL_TIM_ConfigClockSource+0x1e0>)
 8008318:	4013      	ands	r3, r2
 800831a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800831c:	68bb      	ldr	r3, [r7, #8]
 800831e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008322:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	68ba      	ldr	r2, [r7, #8]
 800832a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800832c:	683b      	ldr	r3, [r7, #0]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	4a64      	ldr	r2, [pc, #400]	@ (80084c4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8008332:	4293      	cmp	r3, r2
 8008334:	f000 80a9 	beq.w	800848a <HAL_TIM_ConfigClockSource+0x1aa>
 8008338:	4a62      	ldr	r2, [pc, #392]	@ (80084c4 <HAL_TIM_ConfigClockSource+0x1e4>)
 800833a:	4293      	cmp	r3, r2
 800833c:	f200 80ae 	bhi.w	800849c <HAL_TIM_ConfigClockSource+0x1bc>
 8008340:	4a61      	ldr	r2, [pc, #388]	@ (80084c8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8008342:	4293      	cmp	r3, r2
 8008344:	f000 80a1 	beq.w	800848a <HAL_TIM_ConfigClockSource+0x1aa>
 8008348:	4a5f      	ldr	r2, [pc, #380]	@ (80084c8 <HAL_TIM_ConfigClockSource+0x1e8>)
 800834a:	4293      	cmp	r3, r2
 800834c:	f200 80a6 	bhi.w	800849c <HAL_TIM_ConfigClockSource+0x1bc>
 8008350:	4a5e      	ldr	r2, [pc, #376]	@ (80084cc <HAL_TIM_ConfigClockSource+0x1ec>)
 8008352:	4293      	cmp	r3, r2
 8008354:	f000 8099 	beq.w	800848a <HAL_TIM_ConfigClockSource+0x1aa>
 8008358:	4a5c      	ldr	r2, [pc, #368]	@ (80084cc <HAL_TIM_ConfigClockSource+0x1ec>)
 800835a:	4293      	cmp	r3, r2
 800835c:	f200 809e 	bhi.w	800849c <HAL_TIM_ConfigClockSource+0x1bc>
 8008360:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008364:	f000 8091 	beq.w	800848a <HAL_TIM_ConfigClockSource+0x1aa>
 8008368:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800836c:	f200 8096 	bhi.w	800849c <HAL_TIM_ConfigClockSource+0x1bc>
 8008370:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008374:	f000 8089 	beq.w	800848a <HAL_TIM_ConfigClockSource+0x1aa>
 8008378:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800837c:	f200 808e 	bhi.w	800849c <HAL_TIM_ConfigClockSource+0x1bc>
 8008380:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008384:	d03e      	beq.n	8008404 <HAL_TIM_ConfigClockSource+0x124>
 8008386:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800838a:	f200 8087 	bhi.w	800849c <HAL_TIM_ConfigClockSource+0x1bc>
 800838e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008392:	f000 8086 	beq.w	80084a2 <HAL_TIM_ConfigClockSource+0x1c2>
 8008396:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800839a:	d87f      	bhi.n	800849c <HAL_TIM_ConfigClockSource+0x1bc>
 800839c:	2b70      	cmp	r3, #112	@ 0x70
 800839e:	d01a      	beq.n	80083d6 <HAL_TIM_ConfigClockSource+0xf6>
 80083a0:	2b70      	cmp	r3, #112	@ 0x70
 80083a2:	d87b      	bhi.n	800849c <HAL_TIM_ConfigClockSource+0x1bc>
 80083a4:	2b60      	cmp	r3, #96	@ 0x60
 80083a6:	d050      	beq.n	800844a <HAL_TIM_ConfigClockSource+0x16a>
 80083a8:	2b60      	cmp	r3, #96	@ 0x60
 80083aa:	d877      	bhi.n	800849c <HAL_TIM_ConfigClockSource+0x1bc>
 80083ac:	2b50      	cmp	r3, #80	@ 0x50
 80083ae:	d03c      	beq.n	800842a <HAL_TIM_ConfigClockSource+0x14a>
 80083b0:	2b50      	cmp	r3, #80	@ 0x50
 80083b2:	d873      	bhi.n	800849c <HAL_TIM_ConfigClockSource+0x1bc>
 80083b4:	2b40      	cmp	r3, #64	@ 0x40
 80083b6:	d058      	beq.n	800846a <HAL_TIM_ConfigClockSource+0x18a>
 80083b8:	2b40      	cmp	r3, #64	@ 0x40
 80083ba:	d86f      	bhi.n	800849c <HAL_TIM_ConfigClockSource+0x1bc>
 80083bc:	2b30      	cmp	r3, #48	@ 0x30
 80083be:	d064      	beq.n	800848a <HAL_TIM_ConfigClockSource+0x1aa>
 80083c0:	2b30      	cmp	r3, #48	@ 0x30
 80083c2:	d86b      	bhi.n	800849c <HAL_TIM_ConfigClockSource+0x1bc>
 80083c4:	2b20      	cmp	r3, #32
 80083c6:	d060      	beq.n	800848a <HAL_TIM_ConfigClockSource+0x1aa>
 80083c8:	2b20      	cmp	r3, #32
 80083ca:	d867      	bhi.n	800849c <HAL_TIM_ConfigClockSource+0x1bc>
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d05c      	beq.n	800848a <HAL_TIM_ConfigClockSource+0x1aa>
 80083d0:	2b10      	cmp	r3, #16
 80083d2:	d05a      	beq.n	800848a <HAL_TIM_ConfigClockSource+0x1aa>
 80083d4:	e062      	b.n	800849c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80083da:	683b      	ldr	r3, [r7, #0]
 80083dc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80083de:	683b      	ldr	r3, [r7, #0]
 80083e0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80083e2:	683b      	ldr	r3, [r7, #0]
 80083e4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80083e6:	f000 f9cb 	bl	8008780 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	689b      	ldr	r3, [r3, #8]
 80083f0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80083f2:	68bb      	ldr	r3, [r7, #8]
 80083f4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80083f8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	68ba      	ldr	r2, [r7, #8]
 8008400:	609a      	str	r2, [r3, #8]
      break;
 8008402:	e04f      	b.n	80084a4 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008408:	683b      	ldr	r3, [r7, #0]
 800840a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800840c:	683b      	ldr	r3, [r7, #0]
 800840e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008410:	683b      	ldr	r3, [r7, #0]
 8008412:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008414:	f000 f9b4 	bl	8008780 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	689a      	ldr	r2, [r3, #8]
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008426:	609a      	str	r2, [r3, #8]
      break;
 8008428:	e03c      	b.n	80084a4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800842e:	683b      	ldr	r3, [r7, #0]
 8008430:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008432:	683b      	ldr	r3, [r7, #0]
 8008434:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008436:	461a      	mov	r2, r3
 8008438:	f000 f924 	bl	8008684 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	2150      	movs	r1, #80	@ 0x50
 8008442:	4618      	mov	r0, r3
 8008444:	f000 f97e 	bl	8008744 <TIM_ITRx_SetConfig>
      break;
 8008448:	e02c      	b.n	80084a4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008452:	683b      	ldr	r3, [r7, #0]
 8008454:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008456:	461a      	mov	r2, r3
 8008458:	f000 f943 	bl	80086e2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	2160      	movs	r1, #96	@ 0x60
 8008462:	4618      	mov	r0, r3
 8008464:	f000 f96e 	bl	8008744 <TIM_ITRx_SetConfig>
      break;
 8008468:	e01c      	b.n	80084a4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800846e:	683b      	ldr	r3, [r7, #0]
 8008470:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008472:	683b      	ldr	r3, [r7, #0]
 8008474:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008476:	461a      	mov	r2, r3
 8008478:	f000 f904 	bl	8008684 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	2140      	movs	r1, #64	@ 0x40
 8008482:	4618      	mov	r0, r3
 8008484:	f000 f95e 	bl	8008744 <TIM_ITRx_SetConfig>
      break;
 8008488:	e00c      	b.n	80084a4 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681a      	ldr	r2, [r3, #0]
 800848e:	683b      	ldr	r3, [r7, #0]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	4619      	mov	r1, r3
 8008494:	4610      	mov	r0, r2
 8008496:	f000 f955 	bl	8008744 <TIM_ITRx_SetConfig>
      break;
 800849a:	e003      	b.n	80084a4 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800849c:	2301      	movs	r3, #1
 800849e:	73fb      	strb	r3, [r7, #15]
      break;
 80084a0:	e000      	b.n	80084a4 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 80084a2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	2201      	movs	r2, #1
 80084a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	2200      	movs	r2, #0
 80084b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80084b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80084b6:	4618      	mov	r0, r3
 80084b8:	3710      	adds	r7, #16
 80084ba:	46bd      	mov	sp, r7
 80084bc:	bd80      	pop	{r7, pc}
 80084be:	bf00      	nop
 80084c0:	ffceff88 	.word	0xffceff88
 80084c4:	00100040 	.word	0x00100040
 80084c8:	00100030 	.word	0x00100030
 80084cc:	00100020 	.word	0x00100020

080084d0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80084d0:	b480      	push	{r7}
 80084d2:	b083      	sub	sp, #12
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80084d8:	bf00      	nop
 80084da:	370c      	adds	r7, #12
 80084dc:	46bd      	mov	sp, r7
 80084de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e2:	4770      	bx	lr

080084e4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80084e4:	b480      	push	{r7}
 80084e6:	b083      	sub	sp, #12
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80084ec:	bf00      	nop
 80084ee:	370c      	adds	r7, #12
 80084f0:	46bd      	mov	sp, r7
 80084f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f6:	4770      	bx	lr

080084f8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80084f8:	b480      	push	{r7}
 80084fa:	b083      	sub	sp, #12
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008500:	bf00      	nop
 8008502:	370c      	adds	r7, #12
 8008504:	46bd      	mov	sp, r7
 8008506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850a:	4770      	bx	lr

0800850c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800850c:	b480      	push	{r7}
 800850e:	b083      	sub	sp, #12
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008514:	bf00      	nop
 8008516:	370c      	adds	r7, #12
 8008518:	46bd      	mov	sp, r7
 800851a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851e:	4770      	bx	lr

08008520 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008520:	b480      	push	{r7}
 8008522:	b085      	sub	sp, #20
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]
 8008528:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	4a4a      	ldr	r2, [pc, #296]	@ (800865c <TIM_Base_SetConfig+0x13c>)
 8008534:	4293      	cmp	r3, r2
 8008536:	d013      	beq.n	8008560 <TIM_Base_SetConfig+0x40>
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800853e:	d00f      	beq.n	8008560 <TIM_Base_SetConfig+0x40>
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	4a47      	ldr	r2, [pc, #284]	@ (8008660 <TIM_Base_SetConfig+0x140>)
 8008544:	4293      	cmp	r3, r2
 8008546:	d00b      	beq.n	8008560 <TIM_Base_SetConfig+0x40>
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	4a46      	ldr	r2, [pc, #280]	@ (8008664 <TIM_Base_SetConfig+0x144>)
 800854c:	4293      	cmp	r3, r2
 800854e:	d007      	beq.n	8008560 <TIM_Base_SetConfig+0x40>
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	4a45      	ldr	r2, [pc, #276]	@ (8008668 <TIM_Base_SetConfig+0x148>)
 8008554:	4293      	cmp	r3, r2
 8008556:	d003      	beq.n	8008560 <TIM_Base_SetConfig+0x40>
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	4a44      	ldr	r2, [pc, #272]	@ (800866c <TIM_Base_SetConfig+0x14c>)
 800855c:	4293      	cmp	r3, r2
 800855e:	d108      	bne.n	8008572 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008566:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008568:	683b      	ldr	r3, [r7, #0]
 800856a:	685b      	ldr	r3, [r3, #4]
 800856c:	68fa      	ldr	r2, [r7, #12]
 800856e:	4313      	orrs	r3, r2
 8008570:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	4a39      	ldr	r2, [pc, #228]	@ (800865c <TIM_Base_SetConfig+0x13c>)
 8008576:	4293      	cmp	r3, r2
 8008578:	d027      	beq.n	80085ca <TIM_Base_SetConfig+0xaa>
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008580:	d023      	beq.n	80085ca <TIM_Base_SetConfig+0xaa>
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	4a36      	ldr	r2, [pc, #216]	@ (8008660 <TIM_Base_SetConfig+0x140>)
 8008586:	4293      	cmp	r3, r2
 8008588:	d01f      	beq.n	80085ca <TIM_Base_SetConfig+0xaa>
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	4a35      	ldr	r2, [pc, #212]	@ (8008664 <TIM_Base_SetConfig+0x144>)
 800858e:	4293      	cmp	r3, r2
 8008590:	d01b      	beq.n	80085ca <TIM_Base_SetConfig+0xaa>
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	4a34      	ldr	r2, [pc, #208]	@ (8008668 <TIM_Base_SetConfig+0x148>)
 8008596:	4293      	cmp	r3, r2
 8008598:	d017      	beq.n	80085ca <TIM_Base_SetConfig+0xaa>
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	4a33      	ldr	r2, [pc, #204]	@ (800866c <TIM_Base_SetConfig+0x14c>)
 800859e:	4293      	cmp	r3, r2
 80085a0:	d013      	beq.n	80085ca <TIM_Base_SetConfig+0xaa>
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	4a32      	ldr	r2, [pc, #200]	@ (8008670 <TIM_Base_SetConfig+0x150>)
 80085a6:	4293      	cmp	r3, r2
 80085a8:	d00f      	beq.n	80085ca <TIM_Base_SetConfig+0xaa>
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	4a31      	ldr	r2, [pc, #196]	@ (8008674 <TIM_Base_SetConfig+0x154>)
 80085ae:	4293      	cmp	r3, r2
 80085b0:	d00b      	beq.n	80085ca <TIM_Base_SetConfig+0xaa>
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	4a30      	ldr	r2, [pc, #192]	@ (8008678 <TIM_Base_SetConfig+0x158>)
 80085b6:	4293      	cmp	r3, r2
 80085b8:	d007      	beq.n	80085ca <TIM_Base_SetConfig+0xaa>
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	4a2f      	ldr	r2, [pc, #188]	@ (800867c <TIM_Base_SetConfig+0x15c>)
 80085be:	4293      	cmp	r3, r2
 80085c0:	d003      	beq.n	80085ca <TIM_Base_SetConfig+0xaa>
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	4a2e      	ldr	r2, [pc, #184]	@ (8008680 <TIM_Base_SetConfig+0x160>)
 80085c6:	4293      	cmp	r3, r2
 80085c8:	d108      	bne.n	80085dc <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80085d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80085d2:	683b      	ldr	r3, [r7, #0]
 80085d4:	68db      	ldr	r3, [r3, #12]
 80085d6:	68fa      	ldr	r2, [r7, #12]
 80085d8:	4313      	orrs	r3, r2
 80085da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80085e2:	683b      	ldr	r3, [r7, #0]
 80085e4:	695b      	ldr	r3, [r3, #20]
 80085e6:	4313      	orrs	r3, r2
 80085e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	68fa      	ldr	r2, [r7, #12]
 80085ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80085f0:	683b      	ldr	r3, [r7, #0]
 80085f2:	689a      	ldr	r2, [r3, #8]
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	681a      	ldr	r2, [r3, #0]
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	4a16      	ldr	r2, [pc, #88]	@ (800865c <TIM_Base_SetConfig+0x13c>)
 8008604:	4293      	cmp	r3, r2
 8008606:	d00f      	beq.n	8008628 <TIM_Base_SetConfig+0x108>
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	4a18      	ldr	r2, [pc, #96]	@ (800866c <TIM_Base_SetConfig+0x14c>)
 800860c:	4293      	cmp	r3, r2
 800860e:	d00b      	beq.n	8008628 <TIM_Base_SetConfig+0x108>
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	4a17      	ldr	r2, [pc, #92]	@ (8008670 <TIM_Base_SetConfig+0x150>)
 8008614:	4293      	cmp	r3, r2
 8008616:	d007      	beq.n	8008628 <TIM_Base_SetConfig+0x108>
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	4a16      	ldr	r2, [pc, #88]	@ (8008674 <TIM_Base_SetConfig+0x154>)
 800861c:	4293      	cmp	r3, r2
 800861e:	d003      	beq.n	8008628 <TIM_Base_SetConfig+0x108>
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	4a15      	ldr	r2, [pc, #84]	@ (8008678 <TIM_Base_SetConfig+0x158>)
 8008624:	4293      	cmp	r3, r2
 8008626:	d103      	bne.n	8008630 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	691a      	ldr	r2, [r3, #16]
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	2201      	movs	r2, #1
 8008634:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	691b      	ldr	r3, [r3, #16]
 800863a:	f003 0301 	and.w	r3, r3, #1
 800863e:	2b01      	cmp	r3, #1
 8008640:	d105      	bne.n	800864e <TIM_Base_SetConfig+0x12e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	691b      	ldr	r3, [r3, #16]
 8008646:	f023 0201 	bic.w	r2, r3, #1
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	611a      	str	r2, [r3, #16]
  }
}
 800864e:	bf00      	nop
 8008650:	3714      	adds	r7, #20
 8008652:	46bd      	mov	sp, r7
 8008654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008658:	4770      	bx	lr
 800865a:	bf00      	nop
 800865c:	40010000 	.word	0x40010000
 8008660:	40000400 	.word	0x40000400
 8008664:	40000800 	.word	0x40000800
 8008668:	40000c00 	.word	0x40000c00
 800866c:	40010400 	.word	0x40010400
 8008670:	40014000 	.word	0x40014000
 8008674:	40014400 	.word	0x40014400
 8008678:	40014800 	.word	0x40014800
 800867c:	4000e000 	.word	0x4000e000
 8008680:	4000e400 	.word	0x4000e400

08008684 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008684:	b480      	push	{r7}
 8008686:	b087      	sub	sp, #28
 8008688:	af00      	add	r7, sp, #0
 800868a:	60f8      	str	r0, [r7, #12]
 800868c:	60b9      	str	r1, [r7, #8]
 800868e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	6a1b      	ldr	r3, [r3, #32]
 8008694:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	6a1b      	ldr	r3, [r3, #32]
 800869a:	f023 0201 	bic.w	r2, r3, #1
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	699b      	ldr	r3, [r3, #24]
 80086a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80086a8:	693b      	ldr	r3, [r7, #16]
 80086aa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80086ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	011b      	lsls	r3, r3, #4
 80086b4:	693a      	ldr	r2, [r7, #16]
 80086b6:	4313      	orrs	r3, r2
 80086b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80086ba:	697b      	ldr	r3, [r7, #20]
 80086bc:	f023 030a 	bic.w	r3, r3, #10
 80086c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80086c2:	697a      	ldr	r2, [r7, #20]
 80086c4:	68bb      	ldr	r3, [r7, #8]
 80086c6:	4313      	orrs	r3, r2
 80086c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	693a      	ldr	r2, [r7, #16]
 80086ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	697a      	ldr	r2, [r7, #20]
 80086d4:	621a      	str	r2, [r3, #32]
}
 80086d6:	bf00      	nop
 80086d8:	371c      	adds	r7, #28
 80086da:	46bd      	mov	sp, r7
 80086dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e0:	4770      	bx	lr

080086e2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80086e2:	b480      	push	{r7}
 80086e4:	b087      	sub	sp, #28
 80086e6:	af00      	add	r7, sp, #0
 80086e8:	60f8      	str	r0, [r7, #12]
 80086ea:	60b9      	str	r1, [r7, #8]
 80086ec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	6a1b      	ldr	r3, [r3, #32]
 80086f2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	6a1b      	ldr	r3, [r3, #32]
 80086f8:	f023 0210 	bic.w	r2, r3, #16
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	699b      	ldr	r3, [r3, #24]
 8008704:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008706:	693b      	ldr	r3, [r7, #16]
 8008708:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800870c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	031b      	lsls	r3, r3, #12
 8008712:	693a      	ldr	r2, [r7, #16]
 8008714:	4313      	orrs	r3, r2
 8008716:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008718:	697b      	ldr	r3, [r7, #20]
 800871a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800871e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008720:	68bb      	ldr	r3, [r7, #8]
 8008722:	011b      	lsls	r3, r3, #4
 8008724:	697a      	ldr	r2, [r7, #20]
 8008726:	4313      	orrs	r3, r2
 8008728:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	693a      	ldr	r2, [r7, #16]
 800872e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	697a      	ldr	r2, [r7, #20]
 8008734:	621a      	str	r2, [r3, #32]
}
 8008736:	bf00      	nop
 8008738:	371c      	adds	r7, #28
 800873a:	46bd      	mov	sp, r7
 800873c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008740:	4770      	bx	lr
	...

08008744 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008744:	b480      	push	{r7}
 8008746:	b085      	sub	sp, #20
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]
 800874c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	689b      	ldr	r3, [r3, #8]
 8008752:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008754:	68fa      	ldr	r2, [r7, #12]
 8008756:	4b09      	ldr	r3, [pc, #36]	@ (800877c <TIM_ITRx_SetConfig+0x38>)
 8008758:	4013      	ands	r3, r2
 800875a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800875c:	683a      	ldr	r2, [r7, #0]
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	4313      	orrs	r3, r2
 8008762:	f043 0307 	orr.w	r3, r3, #7
 8008766:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	68fa      	ldr	r2, [r7, #12]
 800876c:	609a      	str	r2, [r3, #8]
}
 800876e:	bf00      	nop
 8008770:	3714      	adds	r7, #20
 8008772:	46bd      	mov	sp, r7
 8008774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008778:	4770      	bx	lr
 800877a:	bf00      	nop
 800877c:	ffcfff8f 	.word	0xffcfff8f

08008780 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008780:	b480      	push	{r7}
 8008782:	b087      	sub	sp, #28
 8008784:	af00      	add	r7, sp, #0
 8008786:	60f8      	str	r0, [r7, #12]
 8008788:	60b9      	str	r1, [r7, #8]
 800878a:	607a      	str	r2, [r7, #4]
 800878c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	689b      	ldr	r3, [r3, #8]
 8008792:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008794:	697b      	ldr	r3, [r7, #20]
 8008796:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800879a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800879c:	683b      	ldr	r3, [r7, #0]
 800879e:	021a      	lsls	r2, r3, #8
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	431a      	orrs	r2, r3
 80087a4:	68bb      	ldr	r3, [r7, #8]
 80087a6:	4313      	orrs	r3, r2
 80087a8:	697a      	ldr	r2, [r7, #20]
 80087aa:	4313      	orrs	r3, r2
 80087ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	697a      	ldr	r2, [r7, #20]
 80087b2:	609a      	str	r2, [r3, #8]
}
 80087b4:	bf00      	nop
 80087b6:	371c      	adds	r7, #28
 80087b8:	46bd      	mov	sp, r7
 80087ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087be:	4770      	bx	lr

080087c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80087c0:	b480      	push	{r7}
 80087c2:	b085      	sub	sp, #20
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
 80087c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80087d0:	2b01      	cmp	r3, #1
 80087d2:	d101      	bne.n	80087d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80087d4:	2302      	movs	r3, #2
 80087d6:	e077      	b.n	80088c8 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	2201      	movs	r2, #1
 80087dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	2202      	movs	r2, #2
 80087e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	685b      	ldr	r3, [r3, #4]
 80087ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	689b      	ldr	r3, [r3, #8]
 80087f6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	4a35      	ldr	r2, [pc, #212]	@ (80088d4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80087fe:	4293      	cmp	r3, r2
 8008800:	d004      	beq.n	800880c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	4a34      	ldr	r2, [pc, #208]	@ (80088d8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008808:	4293      	cmp	r3, r2
 800880a:	d108      	bne.n	800881e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008812:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008814:	683b      	ldr	r3, [r7, #0]
 8008816:	685b      	ldr	r3, [r3, #4]
 8008818:	68fa      	ldr	r2, [r7, #12]
 800881a:	4313      	orrs	r3, r2
 800881c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008824:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008826:	683b      	ldr	r3, [r7, #0]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	68fa      	ldr	r2, [r7, #12]
 800882c:	4313      	orrs	r3, r2
 800882e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	68fa      	ldr	r2, [r7, #12]
 8008836:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	4a25      	ldr	r2, [pc, #148]	@ (80088d4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800883e:	4293      	cmp	r3, r2
 8008840:	d02c      	beq.n	800889c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800884a:	d027      	beq.n	800889c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	4a22      	ldr	r2, [pc, #136]	@ (80088dc <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8008852:	4293      	cmp	r3, r2
 8008854:	d022      	beq.n	800889c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	4a21      	ldr	r2, [pc, #132]	@ (80088e0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800885c:	4293      	cmp	r3, r2
 800885e:	d01d      	beq.n	800889c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	4a1f      	ldr	r2, [pc, #124]	@ (80088e4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8008866:	4293      	cmp	r3, r2
 8008868:	d018      	beq.n	800889c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	4a1a      	ldr	r2, [pc, #104]	@ (80088d8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008870:	4293      	cmp	r3, r2
 8008872:	d013      	beq.n	800889c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	4a1b      	ldr	r2, [pc, #108]	@ (80088e8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800887a:	4293      	cmp	r3, r2
 800887c:	d00e      	beq.n	800889c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	4a1a      	ldr	r2, [pc, #104]	@ (80088ec <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8008884:	4293      	cmp	r3, r2
 8008886:	d009      	beq.n	800889c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	4a18      	ldr	r2, [pc, #96]	@ (80088f0 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800888e:	4293      	cmp	r3, r2
 8008890:	d004      	beq.n	800889c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	4a17      	ldr	r2, [pc, #92]	@ (80088f4 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8008898:	4293      	cmp	r3, r2
 800889a:	d10c      	bne.n	80088b6 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800889c:	68bb      	ldr	r3, [r7, #8]
 800889e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80088a2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80088a4:	683b      	ldr	r3, [r7, #0]
 80088a6:	689b      	ldr	r3, [r3, #8]
 80088a8:	68ba      	ldr	r2, [r7, #8]
 80088aa:	4313      	orrs	r3, r2
 80088ac:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	68ba      	ldr	r2, [r7, #8]
 80088b4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	2201      	movs	r2, #1
 80088ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	2200      	movs	r2, #0
 80088c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80088c6:	2300      	movs	r3, #0
}
 80088c8:	4618      	mov	r0, r3
 80088ca:	3714      	adds	r7, #20
 80088cc:	46bd      	mov	sp, r7
 80088ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d2:	4770      	bx	lr
 80088d4:	40010000 	.word	0x40010000
 80088d8:	40010400 	.word	0x40010400
 80088dc:	40000400 	.word	0x40000400
 80088e0:	40000800 	.word	0x40000800
 80088e4:	40000c00 	.word	0x40000c00
 80088e8:	40001800 	.word	0x40001800
 80088ec:	40014000 	.word	0x40014000
 80088f0:	4000e000 	.word	0x4000e000
 80088f4:	4000e400 	.word	0x4000e400

080088f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80088f8:	b480      	push	{r7}
 80088fa:	b083      	sub	sp, #12
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008900:	bf00      	nop
 8008902:	370c      	adds	r7, #12
 8008904:	46bd      	mov	sp, r7
 8008906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890a:	4770      	bx	lr

0800890c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800890c:	b480      	push	{r7}
 800890e:	b083      	sub	sp, #12
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008914:	bf00      	nop
 8008916:	370c      	adds	r7, #12
 8008918:	46bd      	mov	sp, r7
 800891a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891e:	4770      	bx	lr

08008920 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008920:	b480      	push	{r7}
 8008922:	b083      	sub	sp, #12
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008928:	bf00      	nop
 800892a:	370c      	adds	r7, #12
 800892c:	46bd      	mov	sp, r7
 800892e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008932:	4770      	bx	lr

08008934 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008934:	b580      	push	{r7, lr}
 8008936:	b082      	sub	sp, #8
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	2b00      	cmp	r3, #0
 8008940:	d101      	bne.n	8008946 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008942:	2301      	movs	r3, #1
 8008944:	e042      	b.n	80089cc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800894c:	2b00      	cmp	r3, #0
 800894e:	d106      	bne.n	800895e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	2200      	movs	r2, #0
 8008954:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008958:	6878      	ldr	r0, [r7, #4]
 800895a:	f7f9 fe51 	bl	8002600 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	2224      	movs	r2, #36	@ 0x24
 8008962:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	681a      	ldr	r2, [r3, #0]
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	f022 0201 	bic.w	r2, r2, #1
 8008974:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800897a:	2b00      	cmp	r3, #0
 800897c:	d002      	beq.n	8008984 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800897e:	6878      	ldr	r0, [r7, #4]
 8008980:	f001 fc10 	bl	800a1a4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008984:	6878      	ldr	r0, [r7, #4]
 8008986:	f000 fda1 	bl	80094cc <UART_SetConfig>
 800898a:	4603      	mov	r3, r0
 800898c:	2b01      	cmp	r3, #1
 800898e:	d101      	bne.n	8008994 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008990:	2301      	movs	r3, #1
 8008992:	e01b      	b.n	80089cc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	685a      	ldr	r2, [r3, #4]
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80089a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	689a      	ldr	r2, [r3, #8]
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80089b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	681a      	ldr	r2, [r3, #0]
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	f042 0201 	orr.w	r2, r2, #1
 80089c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80089c4:	6878      	ldr	r0, [r7, #4]
 80089c6:	f001 fc8f 	bl	800a2e8 <UART_CheckIdleState>
 80089ca:	4603      	mov	r3, r0
}
 80089cc:	4618      	mov	r0, r3
 80089ce:	3708      	adds	r7, #8
 80089d0:	46bd      	mov	sp, r7
 80089d2:	bd80      	pop	{r7, pc}

080089d4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80089d4:	b580      	push	{r7, lr}
 80089d6:	b08a      	sub	sp, #40	@ 0x28
 80089d8:	af02      	add	r7, sp, #8
 80089da:	60f8      	str	r0, [r7, #12]
 80089dc:	60b9      	str	r1, [r7, #8]
 80089de:	603b      	str	r3, [r7, #0]
 80089e0:	4613      	mov	r3, r2
 80089e2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80089ea:	2b20      	cmp	r3, #32
 80089ec:	d17b      	bne.n	8008ae6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80089ee:	68bb      	ldr	r3, [r7, #8]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d002      	beq.n	80089fa <HAL_UART_Transmit+0x26>
 80089f4:	88fb      	ldrh	r3, [r7, #6]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d101      	bne.n	80089fe <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80089fa:	2301      	movs	r3, #1
 80089fc:	e074      	b.n	8008ae8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	2200      	movs	r2, #0
 8008a02:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	2221      	movs	r2, #33	@ 0x21
 8008a0a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008a0e:	f7fa fa43 	bl	8002e98 <HAL_GetTick>
 8008a12:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	88fa      	ldrh	r2, [r7, #6]
 8008a18:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	88fa      	ldrh	r2, [r7, #6]
 8008a20:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	689b      	ldr	r3, [r3, #8]
 8008a28:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008a2c:	d108      	bne.n	8008a40 <HAL_UART_Transmit+0x6c>
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	691b      	ldr	r3, [r3, #16]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d104      	bne.n	8008a40 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008a36:	2300      	movs	r3, #0
 8008a38:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008a3a:	68bb      	ldr	r3, [r7, #8]
 8008a3c:	61bb      	str	r3, [r7, #24]
 8008a3e:	e003      	b.n	8008a48 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008a40:	68bb      	ldr	r3, [r7, #8]
 8008a42:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008a44:	2300      	movs	r3, #0
 8008a46:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008a48:	e030      	b.n	8008aac <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008a4a:	683b      	ldr	r3, [r7, #0]
 8008a4c:	9300      	str	r3, [sp, #0]
 8008a4e:	697b      	ldr	r3, [r7, #20]
 8008a50:	2200      	movs	r2, #0
 8008a52:	2180      	movs	r1, #128	@ 0x80
 8008a54:	68f8      	ldr	r0, [r7, #12]
 8008a56:	f001 fcf1 	bl	800a43c <UART_WaitOnFlagUntilTimeout>
 8008a5a:	4603      	mov	r3, r0
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d005      	beq.n	8008a6c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	2220      	movs	r2, #32
 8008a64:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8008a68:	2303      	movs	r3, #3
 8008a6a:	e03d      	b.n	8008ae8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8008a6c:	69fb      	ldr	r3, [r7, #28]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d10b      	bne.n	8008a8a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008a72:	69bb      	ldr	r3, [r7, #24]
 8008a74:	881b      	ldrh	r3, [r3, #0]
 8008a76:	461a      	mov	r2, r3
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008a80:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8008a82:	69bb      	ldr	r3, [r7, #24]
 8008a84:	3302      	adds	r3, #2
 8008a86:	61bb      	str	r3, [r7, #24]
 8008a88:	e007      	b.n	8008a9a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008a8a:	69fb      	ldr	r3, [r7, #28]
 8008a8c:	781a      	ldrb	r2, [r3, #0]
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8008a94:	69fb      	ldr	r3, [r7, #28]
 8008a96:	3301      	adds	r3, #1
 8008a98:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008aa0:	b29b      	uxth	r3, r3
 8008aa2:	3b01      	subs	r3, #1
 8008aa4:	b29a      	uxth	r2, r3
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008ab2:	b29b      	uxth	r3, r3
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d1c8      	bne.n	8008a4a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008ab8:	683b      	ldr	r3, [r7, #0]
 8008aba:	9300      	str	r3, [sp, #0]
 8008abc:	697b      	ldr	r3, [r7, #20]
 8008abe:	2200      	movs	r2, #0
 8008ac0:	2140      	movs	r1, #64	@ 0x40
 8008ac2:	68f8      	ldr	r0, [r7, #12]
 8008ac4:	f001 fcba 	bl	800a43c <UART_WaitOnFlagUntilTimeout>
 8008ac8:	4603      	mov	r3, r0
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d005      	beq.n	8008ada <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	2220      	movs	r2, #32
 8008ad2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8008ad6:	2303      	movs	r3, #3
 8008ad8:	e006      	b.n	8008ae8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	2220      	movs	r2, #32
 8008ade:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	e000      	b.n	8008ae8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8008ae6:	2302      	movs	r3, #2
  }
}
 8008ae8:	4618      	mov	r0, r3
 8008aea:	3720      	adds	r7, #32
 8008aec:	46bd      	mov	sp, r7
 8008aee:	bd80      	pop	{r7, pc}

08008af0 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008af0:	b580      	push	{r7, lr}
 8008af2:	b08a      	sub	sp, #40	@ 0x28
 8008af4:	af02      	add	r7, sp, #8
 8008af6:	60f8      	str	r0, [r7, #12]
 8008af8:	60b9      	str	r1, [r7, #8]
 8008afa:	603b      	str	r3, [r7, #0]
 8008afc:	4613      	mov	r3, r2
 8008afe:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008b06:	2b20      	cmp	r3, #32
 8008b08:	f040 80b5 	bne.w	8008c76 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8008b0c:	68bb      	ldr	r3, [r7, #8]
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d002      	beq.n	8008b18 <HAL_UART_Receive+0x28>
 8008b12:	88fb      	ldrh	r3, [r7, #6]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d101      	bne.n	8008b1c <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8008b18:	2301      	movs	r3, #1
 8008b1a:	e0ad      	b.n	8008c78 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	2200      	movs	r2, #0
 8008b20:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	2222      	movs	r2, #34	@ 0x22
 8008b28:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	2200      	movs	r2, #0
 8008b30:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008b32:	f7fa f9b1 	bl	8002e98 <HAL_GetTick>
 8008b36:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	88fa      	ldrh	r2, [r7, #6]
 8008b3c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	88fa      	ldrh	r2, [r7, #6]
 8008b44:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	689b      	ldr	r3, [r3, #8]
 8008b4c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008b50:	d10e      	bne.n	8008b70 <HAL_UART_Receive+0x80>
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	691b      	ldr	r3, [r3, #16]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d105      	bne.n	8008b66 <HAL_UART_Receive+0x76>
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8008b60:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008b64:	e02d      	b.n	8008bc2 <HAL_UART_Receive+0xd2>
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	22ff      	movs	r2, #255	@ 0xff
 8008b6a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008b6e:	e028      	b.n	8008bc2 <HAL_UART_Receive+0xd2>
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	689b      	ldr	r3, [r3, #8]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d10d      	bne.n	8008b94 <HAL_UART_Receive+0xa4>
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	691b      	ldr	r3, [r3, #16]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d104      	bne.n	8008b8a <HAL_UART_Receive+0x9a>
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	22ff      	movs	r2, #255	@ 0xff
 8008b84:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008b88:	e01b      	b.n	8008bc2 <HAL_UART_Receive+0xd2>
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	227f      	movs	r2, #127	@ 0x7f
 8008b8e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008b92:	e016      	b.n	8008bc2 <HAL_UART_Receive+0xd2>
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	689b      	ldr	r3, [r3, #8]
 8008b98:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008b9c:	d10d      	bne.n	8008bba <HAL_UART_Receive+0xca>
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	691b      	ldr	r3, [r3, #16]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d104      	bne.n	8008bb0 <HAL_UART_Receive+0xc0>
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	227f      	movs	r2, #127	@ 0x7f
 8008baa:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008bae:	e008      	b.n	8008bc2 <HAL_UART_Receive+0xd2>
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	223f      	movs	r2, #63	@ 0x3f
 8008bb4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008bb8:	e003      	b.n	8008bc2 <HAL_UART_Receive+0xd2>
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008bc8:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	689b      	ldr	r3, [r3, #8]
 8008bce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008bd2:	d108      	bne.n	8008be6 <HAL_UART_Receive+0xf6>
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	691b      	ldr	r3, [r3, #16]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d104      	bne.n	8008be6 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8008bdc:	2300      	movs	r3, #0
 8008bde:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008be0:	68bb      	ldr	r3, [r7, #8]
 8008be2:	61bb      	str	r3, [r7, #24]
 8008be4:	e003      	b.n	8008bee <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8008be6:	68bb      	ldr	r3, [r7, #8]
 8008be8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008bea:	2300      	movs	r3, #0
 8008bec:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8008bee:	e036      	b.n	8008c5e <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8008bf0:	683b      	ldr	r3, [r7, #0]
 8008bf2:	9300      	str	r3, [sp, #0]
 8008bf4:	697b      	ldr	r3, [r7, #20]
 8008bf6:	2200      	movs	r2, #0
 8008bf8:	2120      	movs	r1, #32
 8008bfa:	68f8      	ldr	r0, [r7, #12]
 8008bfc:	f001 fc1e 	bl	800a43c <UART_WaitOnFlagUntilTimeout>
 8008c00:	4603      	mov	r3, r0
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d005      	beq.n	8008c12 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	2220      	movs	r2, #32
 8008c0a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 8008c0e:	2303      	movs	r3, #3
 8008c10:	e032      	b.n	8008c78 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8008c12:	69fb      	ldr	r3, [r7, #28]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d10c      	bne.n	8008c32 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c1e:	b29a      	uxth	r2, r3
 8008c20:	8a7b      	ldrh	r3, [r7, #18]
 8008c22:	4013      	ands	r3, r2
 8008c24:	b29a      	uxth	r2, r3
 8008c26:	69bb      	ldr	r3, [r7, #24]
 8008c28:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8008c2a:	69bb      	ldr	r3, [r7, #24]
 8008c2c:	3302      	adds	r3, #2
 8008c2e:	61bb      	str	r3, [r7, #24]
 8008c30:	e00c      	b.n	8008c4c <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c38:	b2da      	uxtb	r2, r3
 8008c3a:	8a7b      	ldrh	r3, [r7, #18]
 8008c3c:	b2db      	uxtb	r3, r3
 8008c3e:	4013      	ands	r3, r2
 8008c40:	b2da      	uxtb	r2, r3
 8008c42:	69fb      	ldr	r3, [r7, #28]
 8008c44:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8008c46:	69fb      	ldr	r3, [r7, #28]
 8008c48:	3301      	adds	r3, #1
 8008c4a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008c52:	b29b      	uxth	r3, r3
 8008c54:	3b01      	subs	r3, #1
 8008c56:	b29a      	uxth	r2, r3
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008c64:	b29b      	uxth	r3, r3
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d1c2      	bne.n	8008bf0 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	2220      	movs	r2, #32
 8008c6e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 8008c72:	2300      	movs	r3, #0
 8008c74:	e000      	b.n	8008c78 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8008c76:	2302      	movs	r3, #2
  }
}
 8008c78:	4618      	mov	r0, r3
 8008c7a:	3720      	adds	r7, #32
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	bd80      	pop	{r7, pc}

08008c80 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b08a      	sub	sp, #40	@ 0x28
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	60f8      	str	r0, [r7, #12]
 8008c88:	60b9      	str	r1, [r7, #8]
 8008c8a:	4613      	mov	r3, r2
 8008c8c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008c94:	2b20      	cmp	r3, #32
 8008c96:	d137      	bne.n	8008d08 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8008c98:	68bb      	ldr	r3, [r7, #8]
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d002      	beq.n	8008ca4 <HAL_UART_Receive_IT+0x24>
 8008c9e:	88fb      	ldrh	r3, [r7, #6]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d101      	bne.n	8008ca8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8008ca4:	2301      	movs	r3, #1
 8008ca6:	e030      	b.n	8008d0a <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	2200      	movs	r2, #0
 8008cac:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	4a18      	ldr	r2, [pc, #96]	@ (8008d14 <HAL_UART_Receive_IT+0x94>)
 8008cb4:	4293      	cmp	r3, r2
 8008cb6:	d01f      	beq.n	8008cf8 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	685b      	ldr	r3, [r3, #4]
 8008cbe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d018      	beq.n	8008cf8 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ccc:	697b      	ldr	r3, [r7, #20]
 8008cce:	e853 3f00 	ldrex	r3, [r3]
 8008cd2:	613b      	str	r3, [r7, #16]
   return(result);
 8008cd4:	693b      	ldr	r3, [r7, #16]
 8008cd6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008cda:	627b      	str	r3, [r7, #36]	@ 0x24
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	461a      	mov	r2, r3
 8008ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ce4:	623b      	str	r3, [r7, #32]
 8008ce6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ce8:	69f9      	ldr	r1, [r7, #28]
 8008cea:	6a3a      	ldr	r2, [r7, #32]
 8008cec:	e841 2300 	strex	r3, r2, [r1]
 8008cf0:	61bb      	str	r3, [r7, #24]
   return(result);
 8008cf2:	69bb      	ldr	r3, [r7, #24]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d1e6      	bne.n	8008cc6 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008cf8:	88fb      	ldrh	r3, [r7, #6]
 8008cfa:	461a      	mov	r2, r3
 8008cfc:	68b9      	ldr	r1, [r7, #8]
 8008cfe:	68f8      	ldr	r0, [r7, #12]
 8008d00:	f001 fc0a 	bl	800a518 <UART_Start_Receive_IT>
 8008d04:	4603      	mov	r3, r0
 8008d06:	e000      	b.n	8008d0a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008d08:	2302      	movs	r3, #2
  }
}
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	3728      	adds	r7, #40	@ 0x28
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	bd80      	pop	{r7, pc}
 8008d12:	bf00      	nop
 8008d14:	58000c00 	.word	0x58000c00

08008d18 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008d18:	b580      	push	{r7, lr}
 8008d1a:	b0ba      	sub	sp, #232	@ 0xe8
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	69db      	ldr	r3, [r3, #28]
 8008d26:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	689b      	ldr	r3, [r3, #8]
 8008d3a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008d3e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8008d42:	f640 030f 	movw	r3, #2063	@ 0x80f
 8008d46:	4013      	ands	r3, r2
 8008d48:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8008d4c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d11b      	bne.n	8008d8c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008d54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d58:	f003 0320 	and.w	r3, r3, #32
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d015      	beq.n	8008d8c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008d60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008d64:	f003 0320 	and.w	r3, r3, #32
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d105      	bne.n	8008d78 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008d6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008d70:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d009      	beq.n	8008d8c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	f000 8377 	beq.w	8009470 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008d86:	6878      	ldr	r0, [r7, #4]
 8008d88:	4798      	blx	r3
      }
      return;
 8008d8a:	e371      	b.n	8009470 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008d8c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	f000 8123 	beq.w	8008fdc <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008d96:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008d9a:	4b8d      	ldr	r3, [pc, #564]	@ (8008fd0 <HAL_UART_IRQHandler+0x2b8>)
 8008d9c:	4013      	ands	r3, r2
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d106      	bne.n	8008db0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008da2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8008da6:	4b8b      	ldr	r3, [pc, #556]	@ (8008fd4 <HAL_UART_IRQHandler+0x2bc>)
 8008da8:	4013      	ands	r3, r2
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	f000 8116 	beq.w	8008fdc <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008db0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008db4:	f003 0301 	and.w	r3, r3, #1
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d011      	beq.n	8008de0 <HAL_UART_IRQHandler+0xc8>
 8008dbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008dc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d00b      	beq.n	8008de0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	2201      	movs	r2, #1
 8008dce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008dd6:	f043 0201 	orr.w	r2, r3, #1
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008de0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008de4:	f003 0302 	and.w	r3, r3, #2
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d011      	beq.n	8008e10 <HAL_UART_IRQHandler+0xf8>
 8008dec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008df0:	f003 0301 	and.w	r3, r3, #1
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d00b      	beq.n	8008e10 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	2202      	movs	r2, #2
 8008dfe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008e06:	f043 0204 	orr.w	r2, r3, #4
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008e10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008e14:	f003 0304 	and.w	r3, r3, #4
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d011      	beq.n	8008e40 <HAL_UART_IRQHandler+0x128>
 8008e1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008e20:	f003 0301 	and.w	r3, r3, #1
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d00b      	beq.n	8008e40 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	2204      	movs	r2, #4
 8008e2e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008e36:	f043 0202 	orr.w	r2, r3, #2
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008e40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008e44:	f003 0308 	and.w	r3, r3, #8
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d017      	beq.n	8008e7c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008e4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008e50:	f003 0320 	and.w	r3, r3, #32
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d105      	bne.n	8008e64 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008e58:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008e5c:	4b5c      	ldr	r3, [pc, #368]	@ (8008fd0 <HAL_UART_IRQHandler+0x2b8>)
 8008e5e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d00b      	beq.n	8008e7c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	2208      	movs	r2, #8
 8008e6a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008e72:	f043 0208 	orr.w	r2, r3, #8
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008e7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008e80:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d012      	beq.n	8008eae <HAL_UART_IRQHandler+0x196>
 8008e88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008e8c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d00c      	beq.n	8008eae <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008e9c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008ea4:	f043 0220 	orr.w	r2, r3, #32
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	f000 82dd 	beq.w	8009474 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008eba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008ebe:	f003 0320 	and.w	r3, r3, #32
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d013      	beq.n	8008eee <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008ec6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008eca:	f003 0320 	and.w	r3, r3, #32
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d105      	bne.n	8008ede <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008ed2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008ed6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d007      	beq.n	8008eee <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d003      	beq.n	8008eee <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008eea:	6878      	ldr	r0, [r7, #4]
 8008eec:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008ef4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	689b      	ldr	r3, [r3, #8]
 8008efe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f02:	2b40      	cmp	r3, #64	@ 0x40
 8008f04:	d005      	beq.n	8008f12 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008f06:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008f0a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d054      	beq.n	8008fbc <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008f12:	6878      	ldr	r0, [r7, #4]
 8008f14:	f001 fc22 	bl	800a75c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	689b      	ldr	r3, [r3, #8]
 8008f1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f22:	2b40      	cmp	r3, #64	@ 0x40
 8008f24:	d146      	bne.n	8008fb4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	3308      	adds	r3, #8
 8008f2c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f30:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008f34:	e853 3f00 	ldrex	r3, [r3]
 8008f38:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008f3c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008f40:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008f44:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	3308      	adds	r3, #8
 8008f4e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008f52:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008f56:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f5a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008f5e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008f62:	e841 2300 	strex	r3, r2, [r1]
 8008f66:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008f6a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d1d9      	bne.n	8008f26 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d017      	beq.n	8008fac <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008f82:	4a15      	ldr	r2, [pc, #84]	@ (8008fd8 <HAL_UART_IRQHandler+0x2c0>)
 8008f84:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	f7fa fc59 	bl	8003844 <HAL_DMA_Abort_IT>
 8008f92:	4603      	mov	r3, r0
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d019      	beq.n	8008fcc <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008f9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008fa0:	687a      	ldr	r2, [r7, #4]
 8008fa2:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8008fa6:	4610      	mov	r0, r2
 8008fa8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008faa:	e00f      	b.n	8008fcc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008fac:	6878      	ldr	r0, [r7, #4]
 8008fae:	f000 fa77 	bl	80094a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008fb2:	e00b      	b.n	8008fcc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008fb4:	6878      	ldr	r0, [r7, #4]
 8008fb6:	f000 fa73 	bl	80094a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008fba:	e007      	b.n	8008fcc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008fbc:	6878      	ldr	r0, [r7, #4]
 8008fbe:	f000 fa6f 	bl	80094a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	2200      	movs	r2, #0
 8008fc6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8008fca:	e253      	b.n	8009474 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008fcc:	bf00      	nop
    return;
 8008fce:	e251      	b.n	8009474 <HAL_UART_IRQHandler+0x75c>
 8008fd0:	10000001 	.word	0x10000001
 8008fd4:	04000120 	.word	0x04000120
 8008fd8:	0800a829 	.word	0x0800a829

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008fe0:	2b01      	cmp	r3, #1
 8008fe2:	f040 81e7 	bne.w	80093b4 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008fe6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008fea:	f003 0310 	and.w	r3, r3, #16
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	f000 81e0 	beq.w	80093b4 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008ff4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008ff8:	f003 0310 	and.w	r3, r3, #16
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	f000 81d9 	beq.w	80093b4 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	2210      	movs	r2, #16
 8009008:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	689b      	ldr	r3, [r3, #8]
 8009010:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009014:	2b40      	cmp	r3, #64	@ 0x40
 8009016:	f040 8151 	bne.w	80092bc <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	4a96      	ldr	r2, [pc, #600]	@ (800927c <HAL_UART_IRQHandler+0x564>)
 8009024:	4293      	cmp	r3, r2
 8009026:	d068      	beq.n	80090fa <HAL_UART_IRQHandler+0x3e2>
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	4a93      	ldr	r2, [pc, #588]	@ (8009280 <HAL_UART_IRQHandler+0x568>)
 8009032:	4293      	cmp	r3, r2
 8009034:	d061      	beq.n	80090fa <HAL_UART_IRQHandler+0x3e2>
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	4a91      	ldr	r2, [pc, #580]	@ (8009284 <HAL_UART_IRQHandler+0x56c>)
 8009040:	4293      	cmp	r3, r2
 8009042:	d05a      	beq.n	80090fa <HAL_UART_IRQHandler+0x3e2>
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	4a8e      	ldr	r2, [pc, #568]	@ (8009288 <HAL_UART_IRQHandler+0x570>)
 800904e:	4293      	cmp	r3, r2
 8009050:	d053      	beq.n	80090fa <HAL_UART_IRQHandler+0x3e2>
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	4a8c      	ldr	r2, [pc, #560]	@ (800928c <HAL_UART_IRQHandler+0x574>)
 800905c:	4293      	cmp	r3, r2
 800905e:	d04c      	beq.n	80090fa <HAL_UART_IRQHandler+0x3e2>
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	4a89      	ldr	r2, [pc, #548]	@ (8009290 <HAL_UART_IRQHandler+0x578>)
 800906a:	4293      	cmp	r3, r2
 800906c:	d045      	beq.n	80090fa <HAL_UART_IRQHandler+0x3e2>
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	4a87      	ldr	r2, [pc, #540]	@ (8009294 <HAL_UART_IRQHandler+0x57c>)
 8009078:	4293      	cmp	r3, r2
 800907a:	d03e      	beq.n	80090fa <HAL_UART_IRQHandler+0x3e2>
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	4a84      	ldr	r2, [pc, #528]	@ (8009298 <HAL_UART_IRQHandler+0x580>)
 8009086:	4293      	cmp	r3, r2
 8009088:	d037      	beq.n	80090fa <HAL_UART_IRQHandler+0x3e2>
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	4a82      	ldr	r2, [pc, #520]	@ (800929c <HAL_UART_IRQHandler+0x584>)
 8009094:	4293      	cmp	r3, r2
 8009096:	d030      	beq.n	80090fa <HAL_UART_IRQHandler+0x3e2>
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	4a7f      	ldr	r2, [pc, #508]	@ (80092a0 <HAL_UART_IRQHandler+0x588>)
 80090a2:	4293      	cmp	r3, r2
 80090a4:	d029      	beq.n	80090fa <HAL_UART_IRQHandler+0x3e2>
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	4a7d      	ldr	r2, [pc, #500]	@ (80092a4 <HAL_UART_IRQHandler+0x58c>)
 80090b0:	4293      	cmp	r3, r2
 80090b2:	d022      	beq.n	80090fa <HAL_UART_IRQHandler+0x3e2>
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	4a7a      	ldr	r2, [pc, #488]	@ (80092a8 <HAL_UART_IRQHandler+0x590>)
 80090be:	4293      	cmp	r3, r2
 80090c0:	d01b      	beq.n	80090fa <HAL_UART_IRQHandler+0x3e2>
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	4a78      	ldr	r2, [pc, #480]	@ (80092ac <HAL_UART_IRQHandler+0x594>)
 80090cc:	4293      	cmp	r3, r2
 80090ce:	d014      	beq.n	80090fa <HAL_UART_IRQHandler+0x3e2>
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	4a75      	ldr	r2, [pc, #468]	@ (80092b0 <HAL_UART_IRQHandler+0x598>)
 80090da:	4293      	cmp	r3, r2
 80090dc:	d00d      	beq.n	80090fa <HAL_UART_IRQHandler+0x3e2>
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	4a73      	ldr	r2, [pc, #460]	@ (80092b4 <HAL_UART_IRQHandler+0x59c>)
 80090e8:	4293      	cmp	r3, r2
 80090ea:	d006      	beq.n	80090fa <HAL_UART_IRQHandler+0x3e2>
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	4a70      	ldr	r2, [pc, #448]	@ (80092b8 <HAL_UART_IRQHandler+0x5a0>)
 80090f6:	4293      	cmp	r3, r2
 80090f8:	d106      	bne.n	8009108 <HAL_UART_IRQHandler+0x3f0>
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	685b      	ldr	r3, [r3, #4]
 8009104:	b29b      	uxth	r3, r3
 8009106:	e005      	b.n	8009114 <HAL_UART_IRQHandler+0x3fc>
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	685b      	ldr	r3, [r3, #4]
 8009112:	b29b      	uxth	r3, r3
 8009114:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009118:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800911c:	2b00      	cmp	r3, #0
 800911e:	f000 81ab 	beq.w	8009478 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009128:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800912c:	429a      	cmp	r2, r3
 800912e:	f080 81a3 	bcs.w	8009478 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009138:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009142:	69db      	ldr	r3, [r3, #28]
 8009144:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009148:	f000 8087 	beq.w	800925a <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009154:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009158:	e853 3f00 	ldrex	r3, [r3]
 800915c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009160:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009164:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009168:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	461a      	mov	r2, r3
 8009172:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009176:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800917a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800917e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009182:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009186:	e841 2300 	strex	r3, r2, [r1]
 800918a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800918e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009192:	2b00      	cmp	r3, #0
 8009194:	d1da      	bne.n	800914c <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	3308      	adds	r3, #8
 800919c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800919e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80091a0:	e853 3f00 	ldrex	r3, [r3]
 80091a4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80091a6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80091a8:	f023 0301 	bic.w	r3, r3, #1
 80091ac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	3308      	adds	r3, #8
 80091b6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80091ba:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80091be:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091c0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80091c2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80091c6:	e841 2300 	strex	r3, r2, [r1]
 80091ca:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80091cc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d1e1      	bne.n	8009196 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	3308      	adds	r3, #8
 80091d8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091da:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80091dc:	e853 3f00 	ldrex	r3, [r3]
 80091e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80091e2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80091e4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80091e8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	3308      	adds	r3, #8
 80091f2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80091f6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80091f8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091fa:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80091fc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80091fe:	e841 2300 	strex	r3, r2, [r1]
 8009202:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009204:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009206:	2b00      	cmp	r3, #0
 8009208:	d1e3      	bne.n	80091d2 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	2220      	movs	r2, #32
 800920e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	2200      	movs	r2, #0
 8009216:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800921e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009220:	e853 3f00 	ldrex	r3, [r3]
 8009224:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009226:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009228:	f023 0310 	bic.w	r3, r3, #16
 800922c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	461a      	mov	r2, r3
 8009236:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800923a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800923c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800923e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009240:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009242:	e841 2300 	strex	r3, r2, [r1]
 8009246:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009248:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800924a:	2b00      	cmp	r3, #0
 800924c:	d1e4      	bne.n	8009218 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009254:	4618      	mov	r0, r3
 8009256:	f7f9 ffd7 	bl	8003208 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	2202      	movs	r2, #2
 800925e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800926c:	b29b      	uxth	r3, r3
 800926e:	1ad3      	subs	r3, r2, r3
 8009270:	b29b      	uxth	r3, r3
 8009272:	4619      	mov	r1, r3
 8009274:	6878      	ldr	r0, [r7, #4]
 8009276:	f000 f91d 	bl	80094b4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800927a:	e0fd      	b.n	8009478 <HAL_UART_IRQHandler+0x760>
 800927c:	40020010 	.word	0x40020010
 8009280:	40020028 	.word	0x40020028
 8009284:	40020040 	.word	0x40020040
 8009288:	40020058 	.word	0x40020058
 800928c:	40020070 	.word	0x40020070
 8009290:	40020088 	.word	0x40020088
 8009294:	400200a0 	.word	0x400200a0
 8009298:	400200b8 	.word	0x400200b8
 800929c:	40020410 	.word	0x40020410
 80092a0:	40020428 	.word	0x40020428
 80092a4:	40020440 	.word	0x40020440
 80092a8:	40020458 	.word	0x40020458
 80092ac:	40020470 	.word	0x40020470
 80092b0:	40020488 	.word	0x40020488
 80092b4:	400204a0 	.word	0x400204a0
 80092b8:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80092c8:	b29b      	uxth	r3, r3
 80092ca:	1ad3      	subs	r3, r2, r3
 80092cc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80092d6:	b29b      	uxth	r3, r3
 80092d8:	2b00      	cmp	r3, #0
 80092da:	f000 80cf 	beq.w	800947c <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 80092de:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	f000 80ca 	beq.w	800947c <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092f0:	e853 3f00 	ldrex	r3, [r3]
 80092f4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80092f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80092f8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80092fc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	461a      	mov	r2, r3
 8009306:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800930a:	647b      	str	r3, [r7, #68]	@ 0x44
 800930c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800930e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009310:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009312:	e841 2300 	strex	r3, r2, [r1]
 8009316:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009318:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800931a:	2b00      	cmp	r3, #0
 800931c:	d1e4      	bne.n	80092e8 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	3308      	adds	r3, #8
 8009324:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009328:	e853 3f00 	ldrex	r3, [r3]
 800932c:	623b      	str	r3, [r7, #32]
   return(result);
 800932e:	6a3a      	ldr	r2, [r7, #32]
 8009330:	4b55      	ldr	r3, [pc, #340]	@ (8009488 <HAL_UART_IRQHandler+0x770>)
 8009332:	4013      	ands	r3, r2
 8009334:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	3308      	adds	r3, #8
 800933e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009342:	633a      	str	r2, [r7, #48]	@ 0x30
 8009344:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009346:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009348:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800934a:	e841 2300 	strex	r3, r2, [r1]
 800934e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009350:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009352:	2b00      	cmp	r3, #0
 8009354:	d1e3      	bne.n	800931e <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	2220      	movs	r2, #32
 800935a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	2200      	movs	r2, #0
 8009362:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	2200      	movs	r2, #0
 8009368:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009370:	693b      	ldr	r3, [r7, #16]
 8009372:	e853 3f00 	ldrex	r3, [r3]
 8009376:	60fb      	str	r3, [r7, #12]
   return(result);
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	f023 0310 	bic.w	r3, r3, #16
 800937e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	461a      	mov	r2, r3
 8009388:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800938c:	61fb      	str	r3, [r7, #28]
 800938e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009390:	69b9      	ldr	r1, [r7, #24]
 8009392:	69fa      	ldr	r2, [r7, #28]
 8009394:	e841 2300 	strex	r3, r2, [r1]
 8009398:	617b      	str	r3, [r7, #20]
   return(result);
 800939a:	697b      	ldr	r3, [r7, #20]
 800939c:	2b00      	cmp	r3, #0
 800939e:	d1e4      	bne.n	800936a <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	2202      	movs	r2, #2
 80093a4:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80093a6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80093aa:	4619      	mov	r1, r3
 80093ac:	6878      	ldr	r0, [r7, #4]
 80093ae:	f000 f881 	bl	80094b4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80093b2:	e063      	b.n	800947c <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80093b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80093b8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d00e      	beq.n	80093de <HAL_UART_IRQHandler+0x6c6>
 80093c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80093c4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d008      	beq.n	80093de <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80093d4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80093d6:	6878      	ldr	r0, [r7, #4]
 80093d8:	f001 ff84 	bl	800b2e4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80093dc:	e051      	b.n	8009482 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80093de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80093e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d014      	beq.n	8009414 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80093ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80093ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d105      	bne.n	8009402 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80093f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80093fa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d008      	beq.n	8009414 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009406:	2b00      	cmp	r3, #0
 8009408:	d03a      	beq.n	8009480 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800940e:	6878      	ldr	r0, [r7, #4]
 8009410:	4798      	blx	r3
    }
    return;
 8009412:	e035      	b.n	8009480 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009414:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009418:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800941c:	2b00      	cmp	r3, #0
 800941e:	d009      	beq.n	8009434 <HAL_UART_IRQHandler+0x71c>
 8009420:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009424:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009428:	2b00      	cmp	r3, #0
 800942a:	d003      	beq.n	8009434 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800942c:	6878      	ldr	r0, [r7, #4]
 800942e:	f001 fa11 	bl	800a854 <UART_EndTransmit_IT>
    return;
 8009432:	e026      	b.n	8009482 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009434:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009438:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800943c:	2b00      	cmp	r3, #0
 800943e:	d009      	beq.n	8009454 <HAL_UART_IRQHandler+0x73c>
 8009440:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009444:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009448:	2b00      	cmp	r3, #0
 800944a:	d003      	beq.n	8009454 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800944c:	6878      	ldr	r0, [r7, #4]
 800944e:	f001 ff5d 	bl	800b30c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009452:	e016      	b.n	8009482 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009454:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009458:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800945c:	2b00      	cmp	r3, #0
 800945e:	d010      	beq.n	8009482 <HAL_UART_IRQHandler+0x76a>
 8009460:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009464:	2b00      	cmp	r3, #0
 8009466:	da0c      	bge.n	8009482 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009468:	6878      	ldr	r0, [r7, #4]
 800946a:	f001 ff45 	bl	800b2f8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800946e:	e008      	b.n	8009482 <HAL_UART_IRQHandler+0x76a>
      return;
 8009470:	bf00      	nop
 8009472:	e006      	b.n	8009482 <HAL_UART_IRQHandler+0x76a>
    return;
 8009474:	bf00      	nop
 8009476:	e004      	b.n	8009482 <HAL_UART_IRQHandler+0x76a>
      return;
 8009478:	bf00      	nop
 800947a:	e002      	b.n	8009482 <HAL_UART_IRQHandler+0x76a>
      return;
 800947c:	bf00      	nop
 800947e:	e000      	b.n	8009482 <HAL_UART_IRQHandler+0x76a>
    return;
 8009480:	bf00      	nop
  }
}
 8009482:	37e8      	adds	r7, #232	@ 0xe8
 8009484:	46bd      	mov	sp, r7
 8009486:	bd80      	pop	{r7, pc}
 8009488:	effffffe 	.word	0xeffffffe

0800948c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800948c:	b480      	push	{r7}
 800948e:	b083      	sub	sp, #12
 8009490:	af00      	add	r7, sp, #0
 8009492:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009494:	bf00      	nop
 8009496:	370c      	adds	r7, #12
 8009498:	46bd      	mov	sp, r7
 800949a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949e:	4770      	bx	lr

080094a0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80094a0:	b480      	push	{r7}
 80094a2:	b083      	sub	sp, #12
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80094a8:	bf00      	nop
 80094aa:	370c      	adds	r7, #12
 80094ac:	46bd      	mov	sp, r7
 80094ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b2:	4770      	bx	lr

080094b4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80094b4:	b480      	push	{r7}
 80094b6:	b083      	sub	sp, #12
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	6078      	str	r0, [r7, #4]
 80094bc:	460b      	mov	r3, r1
 80094be:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80094c0:	bf00      	nop
 80094c2:	370c      	adds	r7, #12
 80094c4:	46bd      	mov	sp, r7
 80094c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ca:	4770      	bx	lr

080094cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80094cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80094d0:	b092      	sub	sp, #72	@ 0x48
 80094d2:	af00      	add	r7, sp, #0
 80094d4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80094d6:	2300      	movs	r3, #0
 80094d8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80094dc:	697b      	ldr	r3, [r7, #20]
 80094de:	689a      	ldr	r2, [r3, #8]
 80094e0:	697b      	ldr	r3, [r7, #20]
 80094e2:	691b      	ldr	r3, [r3, #16]
 80094e4:	431a      	orrs	r2, r3
 80094e6:	697b      	ldr	r3, [r7, #20]
 80094e8:	695b      	ldr	r3, [r3, #20]
 80094ea:	431a      	orrs	r2, r3
 80094ec:	697b      	ldr	r3, [r7, #20]
 80094ee:	69db      	ldr	r3, [r3, #28]
 80094f0:	4313      	orrs	r3, r2
 80094f2:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80094f4:	697b      	ldr	r3, [r7, #20]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	681a      	ldr	r2, [r3, #0]
 80094fa:	4bbe      	ldr	r3, [pc, #760]	@ (80097f4 <UART_SetConfig+0x328>)
 80094fc:	4013      	ands	r3, r2
 80094fe:	697a      	ldr	r2, [r7, #20]
 8009500:	6812      	ldr	r2, [r2, #0]
 8009502:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009504:	430b      	orrs	r3, r1
 8009506:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009508:	697b      	ldr	r3, [r7, #20]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	685b      	ldr	r3, [r3, #4]
 800950e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009512:	697b      	ldr	r3, [r7, #20]
 8009514:	68da      	ldr	r2, [r3, #12]
 8009516:	697b      	ldr	r3, [r7, #20]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	430a      	orrs	r2, r1
 800951c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800951e:	697b      	ldr	r3, [r7, #20]
 8009520:	699b      	ldr	r3, [r3, #24]
 8009522:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009524:	697b      	ldr	r3, [r7, #20]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	4ab3      	ldr	r2, [pc, #716]	@ (80097f8 <UART_SetConfig+0x32c>)
 800952a:	4293      	cmp	r3, r2
 800952c:	d004      	beq.n	8009538 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800952e:	697b      	ldr	r3, [r7, #20]
 8009530:	6a1b      	ldr	r3, [r3, #32]
 8009532:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009534:	4313      	orrs	r3, r2
 8009536:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009538:	697b      	ldr	r3, [r7, #20]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	689a      	ldr	r2, [r3, #8]
 800953e:	4baf      	ldr	r3, [pc, #700]	@ (80097fc <UART_SetConfig+0x330>)
 8009540:	4013      	ands	r3, r2
 8009542:	697a      	ldr	r2, [r7, #20]
 8009544:	6812      	ldr	r2, [r2, #0]
 8009546:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009548:	430b      	orrs	r3, r1
 800954a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800954c:	697b      	ldr	r3, [r7, #20]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009552:	f023 010f 	bic.w	r1, r3, #15
 8009556:	697b      	ldr	r3, [r7, #20]
 8009558:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800955a:	697b      	ldr	r3, [r7, #20]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	430a      	orrs	r2, r1
 8009560:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009562:	697b      	ldr	r3, [r7, #20]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	4aa6      	ldr	r2, [pc, #664]	@ (8009800 <UART_SetConfig+0x334>)
 8009568:	4293      	cmp	r3, r2
 800956a:	d177      	bne.n	800965c <UART_SetConfig+0x190>
 800956c:	4ba5      	ldr	r3, [pc, #660]	@ (8009804 <UART_SetConfig+0x338>)
 800956e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009570:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009574:	2b28      	cmp	r3, #40	@ 0x28
 8009576:	d86d      	bhi.n	8009654 <UART_SetConfig+0x188>
 8009578:	a201      	add	r2, pc, #4	@ (adr r2, 8009580 <UART_SetConfig+0xb4>)
 800957a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800957e:	bf00      	nop
 8009580:	08009625 	.word	0x08009625
 8009584:	08009655 	.word	0x08009655
 8009588:	08009655 	.word	0x08009655
 800958c:	08009655 	.word	0x08009655
 8009590:	08009655 	.word	0x08009655
 8009594:	08009655 	.word	0x08009655
 8009598:	08009655 	.word	0x08009655
 800959c:	08009655 	.word	0x08009655
 80095a0:	0800962d 	.word	0x0800962d
 80095a4:	08009655 	.word	0x08009655
 80095a8:	08009655 	.word	0x08009655
 80095ac:	08009655 	.word	0x08009655
 80095b0:	08009655 	.word	0x08009655
 80095b4:	08009655 	.word	0x08009655
 80095b8:	08009655 	.word	0x08009655
 80095bc:	08009655 	.word	0x08009655
 80095c0:	08009635 	.word	0x08009635
 80095c4:	08009655 	.word	0x08009655
 80095c8:	08009655 	.word	0x08009655
 80095cc:	08009655 	.word	0x08009655
 80095d0:	08009655 	.word	0x08009655
 80095d4:	08009655 	.word	0x08009655
 80095d8:	08009655 	.word	0x08009655
 80095dc:	08009655 	.word	0x08009655
 80095e0:	0800963d 	.word	0x0800963d
 80095e4:	08009655 	.word	0x08009655
 80095e8:	08009655 	.word	0x08009655
 80095ec:	08009655 	.word	0x08009655
 80095f0:	08009655 	.word	0x08009655
 80095f4:	08009655 	.word	0x08009655
 80095f8:	08009655 	.word	0x08009655
 80095fc:	08009655 	.word	0x08009655
 8009600:	08009645 	.word	0x08009645
 8009604:	08009655 	.word	0x08009655
 8009608:	08009655 	.word	0x08009655
 800960c:	08009655 	.word	0x08009655
 8009610:	08009655 	.word	0x08009655
 8009614:	08009655 	.word	0x08009655
 8009618:	08009655 	.word	0x08009655
 800961c:	08009655 	.word	0x08009655
 8009620:	0800964d 	.word	0x0800964d
 8009624:	2301      	movs	r3, #1
 8009626:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800962a:	e326      	b.n	8009c7a <UART_SetConfig+0x7ae>
 800962c:	2304      	movs	r3, #4
 800962e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009632:	e322      	b.n	8009c7a <UART_SetConfig+0x7ae>
 8009634:	2308      	movs	r3, #8
 8009636:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800963a:	e31e      	b.n	8009c7a <UART_SetConfig+0x7ae>
 800963c:	2310      	movs	r3, #16
 800963e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009642:	e31a      	b.n	8009c7a <UART_SetConfig+0x7ae>
 8009644:	2320      	movs	r3, #32
 8009646:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800964a:	e316      	b.n	8009c7a <UART_SetConfig+0x7ae>
 800964c:	2340      	movs	r3, #64	@ 0x40
 800964e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009652:	e312      	b.n	8009c7a <UART_SetConfig+0x7ae>
 8009654:	2380      	movs	r3, #128	@ 0x80
 8009656:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800965a:	e30e      	b.n	8009c7a <UART_SetConfig+0x7ae>
 800965c:	697b      	ldr	r3, [r7, #20]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	4a69      	ldr	r2, [pc, #420]	@ (8009808 <UART_SetConfig+0x33c>)
 8009662:	4293      	cmp	r3, r2
 8009664:	d130      	bne.n	80096c8 <UART_SetConfig+0x1fc>
 8009666:	4b67      	ldr	r3, [pc, #412]	@ (8009804 <UART_SetConfig+0x338>)
 8009668:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800966a:	f003 0307 	and.w	r3, r3, #7
 800966e:	2b05      	cmp	r3, #5
 8009670:	d826      	bhi.n	80096c0 <UART_SetConfig+0x1f4>
 8009672:	a201      	add	r2, pc, #4	@ (adr r2, 8009678 <UART_SetConfig+0x1ac>)
 8009674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009678:	08009691 	.word	0x08009691
 800967c:	08009699 	.word	0x08009699
 8009680:	080096a1 	.word	0x080096a1
 8009684:	080096a9 	.word	0x080096a9
 8009688:	080096b1 	.word	0x080096b1
 800968c:	080096b9 	.word	0x080096b9
 8009690:	2300      	movs	r3, #0
 8009692:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009696:	e2f0      	b.n	8009c7a <UART_SetConfig+0x7ae>
 8009698:	2304      	movs	r3, #4
 800969a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800969e:	e2ec      	b.n	8009c7a <UART_SetConfig+0x7ae>
 80096a0:	2308      	movs	r3, #8
 80096a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096a6:	e2e8      	b.n	8009c7a <UART_SetConfig+0x7ae>
 80096a8:	2310      	movs	r3, #16
 80096aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096ae:	e2e4      	b.n	8009c7a <UART_SetConfig+0x7ae>
 80096b0:	2320      	movs	r3, #32
 80096b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096b6:	e2e0      	b.n	8009c7a <UART_SetConfig+0x7ae>
 80096b8:	2340      	movs	r3, #64	@ 0x40
 80096ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096be:	e2dc      	b.n	8009c7a <UART_SetConfig+0x7ae>
 80096c0:	2380      	movs	r3, #128	@ 0x80
 80096c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096c6:	e2d8      	b.n	8009c7a <UART_SetConfig+0x7ae>
 80096c8:	697b      	ldr	r3, [r7, #20]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	4a4f      	ldr	r2, [pc, #316]	@ (800980c <UART_SetConfig+0x340>)
 80096ce:	4293      	cmp	r3, r2
 80096d0:	d130      	bne.n	8009734 <UART_SetConfig+0x268>
 80096d2:	4b4c      	ldr	r3, [pc, #304]	@ (8009804 <UART_SetConfig+0x338>)
 80096d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80096d6:	f003 0307 	and.w	r3, r3, #7
 80096da:	2b05      	cmp	r3, #5
 80096dc:	d826      	bhi.n	800972c <UART_SetConfig+0x260>
 80096de:	a201      	add	r2, pc, #4	@ (adr r2, 80096e4 <UART_SetConfig+0x218>)
 80096e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096e4:	080096fd 	.word	0x080096fd
 80096e8:	08009705 	.word	0x08009705
 80096ec:	0800970d 	.word	0x0800970d
 80096f0:	08009715 	.word	0x08009715
 80096f4:	0800971d 	.word	0x0800971d
 80096f8:	08009725 	.word	0x08009725
 80096fc:	2300      	movs	r3, #0
 80096fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009702:	e2ba      	b.n	8009c7a <UART_SetConfig+0x7ae>
 8009704:	2304      	movs	r3, #4
 8009706:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800970a:	e2b6      	b.n	8009c7a <UART_SetConfig+0x7ae>
 800970c:	2308      	movs	r3, #8
 800970e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009712:	e2b2      	b.n	8009c7a <UART_SetConfig+0x7ae>
 8009714:	2310      	movs	r3, #16
 8009716:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800971a:	e2ae      	b.n	8009c7a <UART_SetConfig+0x7ae>
 800971c:	2320      	movs	r3, #32
 800971e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009722:	e2aa      	b.n	8009c7a <UART_SetConfig+0x7ae>
 8009724:	2340      	movs	r3, #64	@ 0x40
 8009726:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800972a:	e2a6      	b.n	8009c7a <UART_SetConfig+0x7ae>
 800972c:	2380      	movs	r3, #128	@ 0x80
 800972e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009732:	e2a2      	b.n	8009c7a <UART_SetConfig+0x7ae>
 8009734:	697b      	ldr	r3, [r7, #20]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	4a35      	ldr	r2, [pc, #212]	@ (8009810 <UART_SetConfig+0x344>)
 800973a:	4293      	cmp	r3, r2
 800973c:	d130      	bne.n	80097a0 <UART_SetConfig+0x2d4>
 800973e:	4b31      	ldr	r3, [pc, #196]	@ (8009804 <UART_SetConfig+0x338>)
 8009740:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009742:	f003 0307 	and.w	r3, r3, #7
 8009746:	2b05      	cmp	r3, #5
 8009748:	d826      	bhi.n	8009798 <UART_SetConfig+0x2cc>
 800974a:	a201      	add	r2, pc, #4	@ (adr r2, 8009750 <UART_SetConfig+0x284>)
 800974c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009750:	08009769 	.word	0x08009769
 8009754:	08009771 	.word	0x08009771
 8009758:	08009779 	.word	0x08009779
 800975c:	08009781 	.word	0x08009781
 8009760:	08009789 	.word	0x08009789
 8009764:	08009791 	.word	0x08009791
 8009768:	2300      	movs	r3, #0
 800976a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800976e:	e284      	b.n	8009c7a <UART_SetConfig+0x7ae>
 8009770:	2304      	movs	r3, #4
 8009772:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009776:	e280      	b.n	8009c7a <UART_SetConfig+0x7ae>
 8009778:	2308      	movs	r3, #8
 800977a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800977e:	e27c      	b.n	8009c7a <UART_SetConfig+0x7ae>
 8009780:	2310      	movs	r3, #16
 8009782:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009786:	e278      	b.n	8009c7a <UART_SetConfig+0x7ae>
 8009788:	2320      	movs	r3, #32
 800978a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800978e:	e274      	b.n	8009c7a <UART_SetConfig+0x7ae>
 8009790:	2340      	movs	r3, #64	@ 0x40
 8009792:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009796:	e270      	b.n	8009c7a <UART_SetConfig+0x7ae>
 8009798:	2380      	movs	r3, #128	@ 0x80
 800979a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800979e:	e26c      	b.n	8009c7a <UART_SetConfig+0x7ae>
 80097a0:	697b      	ldr	r3, [r7, #20]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	4a1b      	ldr	r2, [pc, #108]	@ (8009814 <UART_SetConfig+0x348>)
 80097a6:	4293      	cmp	r3, r2
 80097a8:	d142      	bne.n	8009830 <UART_SetConfig+0x364>
 80097aa:	4b16      	ldr	r3, [pc, #88]	@ (8009804 <UART_SetConfig+0x338>)
 80097ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80097ae:	f003 0307 	and.w	r3, r3, #7
 80097b2:	2b05      	cmp	r3, #5
 80097b4:	d838      	bhi.n	8009828 <UART_SetConfig+0x35c>
 80097b6:	a201      	add	r2, pc, #4	@ (adr r2, 80097bc <UART_SetConfig+0x2f0>)
 80097b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097bc:	080097d5 	.word	0x080097d5
 80097c0:	080097dd 	.word	0x080097dd
 80097c4:	080097e5 	.word	0x080097e5
 80097c8:	080097ed 	.word	0x080097ed
 80097cc:	08009819 	.word	0x08009819
 80097d0:	08009821 	.word	0x08009821
 80097d4:	2300      	movs	r3, #0
 80097d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097da:	e24e      	b.n	8009c7a <UART_SetConfig+0x7ae>
 80097dc:	2304      	movs	r3, #4
 80097de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097e2:	e24a      	b.n	8009c7a <UART_SetConfig+0x7ae>
 80097e4:	2308      	movs	r3, #8
 80097e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097ea:	e246      	b.n	8009c7a <UART_SetConfig+0x7ae>
 80097ec:	2310      	movs	r3, #16
 80097ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097f2:	e242      	b.n	8009c7a <UART_SetConfig+0x7ae>
 80097f4:	cfff69f3 	.word	0xcfff69f3
 80097f8:	58000c00 	.word	0x58000c00
 80097fc:	11fff4ff 	.word	0x11fff4ff
 8009800:	40011000 	.word	0x40011000
 8009804:	58024400 	.word	0x58024400
 8009808:	40004400 	.word	0x40004400
 800980c:	40004800 	.word	0x40004800
 8009810:	40004c00 	.word	0x40004c00
 8009814:	40005000 	.word	0x40005000
 8009818:	2320      	movs	r3, #32
 800981a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800981e:	e22c      	b.n	8009c7a <UART_SetConfig+0x7ae>
 8009820:	2340      	movs	r3, #64	@ 0x40
 8009822:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009826:	e228      	b.n	8009c7a <UART_SetConfig+0x7ae>
 8009828:	2380      	movs	r3, #128	@ 0x80
 800982a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800982e:	e224      	b.n	8009c7a <UART_SetConfig+0x7ae>
 8009830:	697b      	ldr	r3, [r7, #20]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	4ab1      	ldr	r2, [pc, #708]	@ (8009afc <UART_SetConfig+0x630>)
 8009836:	4293      	cmp	r3, r2
 8009838:	d176      	bne.n	8009928 <UART_SetConfig+0x45c>
 800983a:	4bb1      	ldr	r3, [pc, #708]	@ (8009b00 <UART_SetConfig+0x634>)
 800983c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800983e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009842:	2b28      	cmp	r3, #40	@ 0x28
 8009844:	d86c      	bhi.n	8009920 <UART_SetConfig+0x454>
 8009846:	a201      	add	r2, pc, #4	@ (adr r2, 800984c <UART_SetConfig+0x380>)
 8009848:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800984c:	080098f1 	.word	0x080098f1
 8009850:	08009921 	.word	0x08009921
 8009854:	08009921 	.word	0x08009921
 8009858:	08009921 	.word	0x08009921
 800985c:	08009921 	.word	0x08009921
 8009860:	08009921 	.word	0x08009921
 8009864:	08009921 	.word	0x08009921
 8009868:	08009921 	.word	0x08009921
 800986c:	080098f9 	.word	0x080098f9
 8009870:	08009921 	.word	0x08009921
 8009874:	08009921 	.word	0x08009921
 8009878:	08009921 	.word	0x08009921
 800987c:	08009921 	.word	0x08009921
 8009880:	08009921 	.word	0x08009921
 8009884:	08009921 	.word	0x08009921
 8009888:	08009921 	.word	0x08009921
 800988c:	08009901 	.word	0x08009901
 8009890:	08009921 	.word	0x08009921
 8009894:	08009921 	.word	0x08009921
 8009898:	08009921 	.word	0x08009921
 800989c:	08009921 	.word	0x08009921
 80098a0:	08009921 	.word	0x08009921
 80098a4:	08009921 	.word	0x08009921
 80098a8:	08009921 	.word	0x08009921
 80098ac:	08009909 	.word	0x08009909
 80098b0:	08009921 	.word	0x08009921
 80098b4:	08009921 	.word	0x08009921
 80098b8:	08009921 	.word	0x08009921
 80098bc:	08009921 	.word	0x08009921
 80098c0:	08009921 	.word	0x08009921
 80098c4:	08009921 	.word	0x08009921
 80098c8:	08009921 	.word	0x08009921
 80098cc:	08009911 	.word	0x08009911
 80098d0:	08009921 	.word	0x08009921
 80098d4:	08009921 	.word	0x08009921
 80098d8:	08009921 	.word	0x08009921
 80098dc:	08009921 	.word	0x08009921
 80098e0:	08009921 	.word	0x08009921
 80098e4:	08009921 	.word	0x08009921
 80098e8:	08009921 	.word	0x08009921
 80098ec:	08009919 	.word	0x08009919
 80098f0:	2301      	movs	r3, #1
 80098f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098f6:	e1c0      	b.n	8009c7a <UART_SetConfig+0x7ae>
 80098f8:	2304      	movs	r3, #4
 80098fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098fe:	e1bc      	b.n	8009c7a <UART_SetConfig+0x7ae>
 8009900:	2308      	movs	r3, #8
 8009902:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009906:	e1b8      	b.n	8009c7a <UART_SetConfig+0x7ae>
 8009908:	2310      	movs	r3, #16
 800990a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800990e:	e1b4      	b.n	8009c7a <UART_SetConfig+0x7ae>
 8009910:	2320      	movs	r3, #32
 8009912:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009916:	e1b0      	b.n	8009c7a <UART_SetConfig+0x7ae>
 8009918:	2340      	movs	r3, #64	@ 0x40
 800991a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800991e:	e1ac      	b.n	8009c7a <UART_SetConfig+0x7ae>
 8009920:	2380      	movs	r3, #128	@ 0x80
 8009922:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009926:	e1a8      	b.n	8009c7a <UART_SetConfig+0x7ae>
 8009928:	697b      	ldr	r3, [r7, #20]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	4a75      	ldr	r2, [pc, #468]	@ (8009b04 <UART_SetConfig+0x638>)
 800992e:	4293      	cmp	r3, r2
 8009930:	d130      	bne.n	8009994 <UART_SetConfig+0x4c8>
 8009932:	4b73      	ldr	r3, [pc, #460]	@ (8009b00 <UART_SetConfig+0x634>)
 8009934:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009936:	f003 0307 	and.w	r3, r3, #7
 800993a:	2b05      	cmp	r3, #5
 800993c:	d826      	bhi.n	800998c <UART_SetConfig+0x4c0>
 800993e:	a201      	add	r2, pc, #4	@ (adr r2, 8009944 <UART_SetConfig+0x478>)
 8009940:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009944:	0800995d 	.word	0x0800995d
 8009948:	08009965 	.word	0x08009965
 800994c:	0800996d 	.word	0x0800996d
 8009950:	08009975 	.word	0x08009975
 8009954:	0800997d 	.word	0x0800997d
 8009958:	08009985 	.word	0x08009985
 800995c:	2300      	movs	r3, #0
 800995e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009962:	e18a      	b.n	8009c7a <UART_SetConfig+0x7ae>
 8009964:	2304      	movs	r3, #4
 8009966:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800996a:	e186      	b.n	8009c7a <UART_SetConfig+0x7ae>
 800996c:	2308      	movs	r3, #8
 800996e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009972:	e182      	b.n	8009c7a <UART_SetConfig+0x7ae>
 8009974:	2310      	movs	r3, #16
 8009976:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800997a:	e17e      	b.n	8009c7a <UART_SetConfig+0x7ae>
 800997c:	2320      	movs	r3, #32
 800997e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009982:	e17a      	b.n	8009c7a <UART_SetConfig+0x7ae>
 8009984:	2340      	movs	r3, #64	@ 0x40
 8009986:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800998a:	e176      	b.n	8009c7a <UART_SetConfig+0x7ae>
 800998c:	2380      	movs	r3, #128	@ 0x80
 800998e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009992:	e172      	b.n	8009c7a <UART_SetConfig+0x7ae>
 8009994:	697b      	ldr	r3, [r7, #20]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	4a5b      	ldr	r2, [pc, #364]	@ (8009b08 <UART_SetConfig+0x63c>)
 800999a:	4293      	cmp	r3, r2
 800999c:	d130      	bne.n	8009a00 <UART_SetConfig+0x534>
 800999e:	4b58      	ldr	r3, [pc, #352]	@ (8009b00 <UART_SetConfig+0x634>)
 80099a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80099a2:	f003 0307 	and.w	r3, r3, #7
 80099a6:	2b05      	cmp	r3, #5
 80099a8:	d826      	bhi.n	80099f8 <UART_SetConfig+0x52c>
 80099aa:	a201      	add	r2, pc, #4	@ (adr r2, 80099b0 <UART_SetConfig+0x4e4>)
 80099ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099b0:	080099c9 	.word	0x080099c9
 80099b4:	080099d1 	.word	0x080099d1
 80099b8:	080099d9 	.word	0x080099d9
 80099bc:	080099e1 	.word	0x080099e1
 80099c0:	080099e9 	.word	0x080099e9
 80099c4:	080099f1 	.word	0x080099f1
 80099c8:	2300      	movs	r3, #0
 80099ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099ce:	e154      	b.n	8009c7a <UART_SetConfig+0x7ae>
 80099d0:	2304      	movs	r3, #4
 80099d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099d6:	e150      	b.n	8009c7a <UART_SetConfig+0x7ae>
 80099d8:	2308      	movs	r3, #8
 80099da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099de:	e14c      	b.n	8009c7a <UART_SetConfig+0x7ae>
 80099e0:	2310      	movs	r3, #16
 80099e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099e6:	e148      	b.n	8009c7a <UART_SetConfig+0x7ae>
 80099e8:	2320      	movs	r3, #32
 80099ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099ee:	e144      	b.n	8009c7a <UART_SetConfig+0x7ae>
 80099f0:	2340      	movs	r3, #64	@ 0x40
 80099f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099f6:	e140      	b.n	8009c7a <UART_SetConfig+0x7ae>
 80099f8:	2380      	movs	r3, #128	@ 0x80
 80099fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099fe:	e13c      	b.n	8009c7a <UART_SetConfig+0x7ae>
 8009a00:	697b      	ldr	r3, [r7, #20]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	4a41      	ldr	r2, [pc, #260]	@ (8009b0c <UART_SetConfig+0x640>)
 8009a06:	4293      	cmp	r3, r2
 8009a08:	f040 8082 	bne.w	8009b10 <UART_SetConfig+0x644>
 8009a0c:	4b3c      	ldr	r3, [pc, #240]	@ (8009b00 <UART_SetConfig+0x634>)
 8009a0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009a10:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009a14:	2b28      	cmp	r3, #40	@ 0x28
 8009a16:	d86d      	bhi.n	8009af4 <UART_SetConfig+0x628>
 8009a18:	a201      	add	r2, pc, #4	@ (adr r2, 8009a20 <UART_SetConfig+0x554>)
 8009a1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a1e:	bf00      	nop
 8009a20:	08009ac5 	.word	0x08009ac5
 8009a24:	08009af5 	.word	0x08009af5
 8009a28:	08009af5 	.word	0x08009af5
 8009a2c:	08009af5 	.word	0x08009af5
 8009a30:	08009af5 	.word	0x08009af5
 8009a34:	08009af5 	.word	0x08009af5
 8009a38:	08009af5 	.word	0x08009af5
 8009a3c:	08009af5 	.word	0x08009af5
 8009a40:	08009acd 	.word	0x08009acd
 8009a44:	08009af5 	.word	0x08009af5
 8009a48:	08009af5 	.word	0x08009af5
 8009a4c:	08009af5 	.word	0x08009af5
 8009a50:	08009af5 	.word	0x08009af5
 8009a54:	08009af5 	.word	0x08009af5
 8009a58:	08009af5 	.word	0x08009af5
 8009a5c:	08009af5 	.word	0x08009af5
 8009a60:	08009ad5 	.word	0x08009ad5
 8009a64:	08009af5 	.word	0x08009af5
 8009a68:	08009af5 	.word	0x08009af5
 8009a6c:	08009af5 	.word	0x08009af5
 8009a70:	08009af5 	.word	0x08009af5
 8009a74:	08009af5 	.word	0x08009af5
 8009a78:	08009af5 	.word	0x08009af5
 8009a7c:	08009af5 	.word	0x08009af5
 8009a80:	08009add 	.word	0x08009add
 8009a84:	08009af5 	.word	0x08009af5
 8009a88:	08009af5 	.word	0x08009af5
 8009a8c:	08009af5 	.word	0x08009af5
 8009a90:	08009af5 	.word	0x08009af5
 8009a94:	08009af5 	.word	0x08009af5
 8009a98:	08009af5 	.word	0x08009af5
 8009a9c:	08009af5 	.word	0x08009af5
 8009aa0:	08009ae5 	.word	0x08009ae5
 8009aa4:	08009af5 	.word	0x08009af5
 8009aa8:	08009af5 	.word	0x08009af5
 8009aac:	08009af5 	.word	0x08009af5
 8009ab0:	08009af5 	.word	0x08009af5
 8009ab4:	08009af5 	.word	0x08009af5
 8009ab8:	08009af5 	.word	0x08009af5
 8009abc:	08009af5 	.word	0x08009af5
 8009ac0:	08009aed 	.word	0x08009aed
 8009ac4:	2301      	movs	r3, #1
 8009ac6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009aca:	e0d6      	b.n	8009c7a <UART_SetConfig+0x7ae>
 8009acc:	2304      	movs	r3, #4
 8009ace:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ad2:	e0d2      	b.n	8009c7a <UART_SetConfig+0x7ae>
 8009ad4:	2308      	movs	r3, #8
 8009ad6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ada:	e0ce      	b.n	8009c7a <UART_SetConfig+0x7ae>
 8009adc:	2310      	movs	r3, #16
 8009ade:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ae2:	e0ca      	b.n	8009c7a <UART_SetConfig+0x7ae>
 8009ae4:	2320      	movs	r3, #32
 8009ae6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009aea:	e0c6      	b.n	8009c7a <UART_SetConfig+0x7ae>
 8009aec:	2340      	movs	r3, #64	@ 0x40
 8009aee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009af2:	e0c2      	b.n	8009c7a <UART_SetConfig+0x7ae>
 8009af4:	2380      	movs	r3, #128	@ 0x80
 8009af6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009afa:	e0be      	b.n	8009c7a <UART_SetConfig+0x7ae>
 8009afc:	40011400 	.word	0x40011400
 8009b00:	58024400 	.word	0x58024400
 8009b04:	40007800 	.word	0x40007800
 8009b08:	40007c00 	.word	0x40007c00
 8009b0c:	40011800 	.word	0x40011800
 8009b10:	697b      	ldr	r3, [r7, #20]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	4aad      	ldr	r2, [pc, #692]	@ (8009dcc <UART_SetConfig+0x900>)
 8009b16:	4293      	cmp	r3, r2
 8009b18:	d176      	bne.n	8009c08 <UART_SetConfig+0x73c>
 8009b1a:	4bad      	ldr	r3, [pc, #692]	@ (8009dd0 <UART_SetConfig+0x904>)
 8009b1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009b1e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009b22:	2b28      	cmp	r3, #40	@ 0x28
 8009b24:	d86c      	bhi.n	8009c00 <UART_SetConfig+0x734>
 8009b26:	a201      	add	r2, pc, #4	@ (adr r2, 8009b2c <UART_SetConfig+0x660>)
 8009b28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b2c:	08009bd1 	.word	0x08009bd1
 8009b30:	08009c01 	.word	0x08009c01
 8009b34:	08009c01 	.word	0x08009c01
 8009b38:	08009c01 	.word	0x08009c01
 8009b3c:	08009c01 	.word	0x08009c01
 8009b40:	08009c01 	.word	0x08009c01
 8009b44:	08009c01 	.word	0x08009c01
 8009b48:	08009c01 	.word	0x08009c01
 8009b4c:	08009bd9 	.word	0x08009bd9
 8009b50:	08009c01 	.word	0x08009c01
 8009b54:	08009c01 	.word	0x08009c01
 8009b58:	08009c01 	.word	0x08009c01
 8009b5c:	08009c01 	.word	0x08009c01
 8009b60:	08009c01 	.word	0x08009c01
 8009b64:	08009c01 	.word	0x08009c01
 8009b68:	08009c01 	.word	0x08009c01
 8009b6c:	08009be1 	.word	0x08009be1
 8009b70:	08009c01 	.word	0x08009c01
 8009b74:	08009c01 	.word	0x08009c01
 8009b78:	08009c01 	.word	0x08009c01
 8009b7c:	08009c01 	.word	0x08009c01
 8009b80:	08009c01 	.word	0x08009c01
 8009b84:	08009c01 	.word	0x08009c01
 8009b88:	08009c01 	.word	0x08009c01
 8009b8c:	08009be9 	.word	0x08009be9
 8009b90:	08009c01 	.word	0x08009c01
 8009b94:	08009c01 	.word	0x08009c01
 8009b98:	08009c01 	.word	0x08009c01
 8009b9c:	08009c01 	.word	0x08009c01
 8009ba0:	08009c01 	.word	0x08009c01
 8009ba4:	08009c01 	.word	0x08009c01
 8009ba8:	08009c01 	.word	0x08009c01
 8009bac:	08009bf1 	.word	0x08009bf1
 8009bb0:	08009c01 	.word	0x08009c01
 8009bb4:	08009c01 	.word	0x08009c01
 8009bb8:	08009c01 	.word	0x08009c01
 8009bbc:	08009c01 	.word	0x08009c01
 8009bc0:	08009c01 	.word	0x08009c01
 8009bc4:	08009c01 	.word	0x08009c01
 8009bc8:	08009c01 	.word	0x08009c01
 8009bcc:	08009bf9 	.word	0x08009bf9
 8009bd0:	2301      	movs	r3, #1
 8009bd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009bd6:	e050      	b.n	8009c7a <UART_SetConfig+0x7ae>
 8009bd8:	2304      	movs	r3, #4
 8009bda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009bde:	e04c      	b.n	8009c7a <UART_SetConfig+0x7ae>
 8009be0:	2308      	movs	r3, #8
 8009be2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009be6:	e048      	b.n	8009c7a <UART_SetConfig+0x7ae>
 8009be8:	2310      	movs	r3, #16
 8009bea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009bee:	e044      	b.n	8009c7a <UART_SetConfig+0x7ae>
 8009bf0:	2320      	movs	r3, #32
 8009bf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009bf6:	e040      	b.n	8009c7a <UART_SetConfig+0x7ae>
 8009bf8:	2340      	movs	r3, #64	@ 0x40
 8009bfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009bfe:	e03c      	b.n	8009c7a <UART_SetConfig+0x7ae>
 8009c00:	2380      	movs	r3, #128	@ 0x80
 8009c02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c06:	e038      	b.n	8009c7a <UART_SetConfig+0x7ae>
 8009c08:	697b      	ldr	r3, [r7, #20]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	4a71      	ldr	r2, [pc, #452]	@ (8009dd4 <UART_SetConfig+0x908>)
 8009c0e:	4293      	cmp	r3, r2
 8009c10:	d130      	bne.n	8009c74 <UART_SetConfig+0x7a8>
 8009c12:	4b6f      	ldr	r3, [pc, #444]	@ (8009dd0 <UART_SetConfig+0x904>)
 8009c14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009c16:	f003 0307 	and.w	r3, r3, #7
 8009c1a:	2b05      	cmp	r3, #5
 8009c1c:	d826      	bhi.n	8009c6c <UART_SetConfig+0x7a0>
 8009c1e:	a201      	add	r2, pc, #4	@ (adr r2, 8009c24 <UART_SetConfig+0x758>)
 8009c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c24:	08009c3d 	.word	0x08009c3d
 8009c28:	08009c45 	.word	0x08009c45
 8009c2c:	08009c4d 	.word	0x08009c4d
 8009c30:	08009c55 	.word	0x08009c55
 8009c34:	08009c5d 	.word	0x08009c5d
 8009c38:	08009c65 	.word	0x08009c65
 8009c3c:	2302      	movs	r3, #2
 8009c3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c42:	e01a      	b.n	8009c7a <UART_SetConfig+0x7ae>
 8009c44:	2304      	movs	r3, #4
 8009c46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c4a:	e016      	b.n	8009c7a <UART_SetConfig+0x7ae>
 8009c4c:	2308      	movs	r3, #8
 8009c4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c52:	e012      	b.n	8009c7a <UART_SetConfig+0x7ae>
 8009c54:	2310      	movs	r3, #16
 8009c56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c5a:	e00e      	b.n	8009c7a <UART_SetConfig+0x7ae>
 8009c5c:	2320      	movs	r3, #32
 8009c5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c62:	e00a      	b.n	8009c7a <UART_SetConfig+0x7ae>
 8009c64:	2340      	movs	r3, #64	@ 0x40
 8009c66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c6a:	e006      	b.n	8009c7a <UART_SetConfig+0x7ae>
 8009c6c:	2380      	movs	r3, #128	@ 0x80
 8009c6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c72:	e002      	b.n	8009c7a <UART_SetConfig+0x7ae>
 8009c74:	2380      	movs	r3, #128	@ 0x80
 8009c76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009c7a:	697b      	ldr	r3, [r7, #20]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	4a55      	ldr	r2, [pc, #340]	@ (8009dd4 <UART_SetConfig+0x908>)
 8009c80:	4293      	cmp	r3, r2
 8009c82:	f040 80f8 	bne.w	8009e76 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009c86:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009c8a:	2b20      	cmp	r3, #32
 8009c8c:	dc46      	bgt.n	8009d1c <UART_SetConfig+0x850>
 8009c8e:	2b02      	cmp	r3, #2
 8009c90:	db75      	blt.n	8009d7e <UART_SetConfig+0x8b2>
 8009c92:	3b02      	subs	r3, #2
 8009c94:	2b1e      	cmp	r3, #30
 8009c96:	d872      	bhi.n	8009d7e <UART_SetConfig+0x8b2>
 8009c98:	a201      	add	r2, pc, #4	@ (adr r2, 8009ca0 <UART_SetConfig+0x7d4>)
 8009c9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c9e:	bf00      	nop
 8009ca0:	08009d23 	.word	0x08009d23
 8009ca4:	08009d7f 	.word	0x08009d7f
 8009ca8:	08009d2b 	.word	0x08009d2b
 8009cac:	08009d7f 	.word	0x08009d7f
 8009cb0:	08009d7f 	.word	0x08009d7f
 8009cb4:	08009d7f 	.word	0x08009d7f
 8009cb8:	08009d3b 	.word	0x08009d3b
 8009cbc:	08009d7f 	.word	0x08009d7f
 8009cc0:	08009d7f 	.word	0x08009d7f
 8009cc4:	08009d7f 	.word	0x08009d7f
 8009cc8:	08009d7f 	.word	0x08009d7f
 8009ccc:	08009d7f 	.word	0x08009d7f
 8009cd0:	08009d7f 	.word	0x08009d7f
 8009cd4:	08009d7f 	.word	0x08009d7f
 8009cd8:	08009d4b 	.word	0x08009d4b
 8009cdc:	08009d7f 	.word	0x08009d7f
 8009ce0:	08009d7f 	.word	0x08009d7f
 8009ce4:	08009d7f 	.word	0x08009d7f
 8009ce8:	08009d7f 	.word	0x08009d7f
 8009cec:	08009d7f 	.word	0x08009d7f
 8009cf0:	08009d7f 	.word	0x08009d7f
 8009cf4:	08009d7f 	.word	0x08009d7f
 8009cf8:	08009d7f 	.word	0x08009d7f
 8009cfc:	08009d7f 	.word	0x08009d7f
 8009d00:	08009d7f 	.word	0x08009d7f
 8009d04:	08009d7f 	.word	0x08009d7f
 8009d08:	08009d7f 	.word	0x08009d7f
 8009d0c:	08009d7f 	.word	0x08009d7f
 8009d10:	08009d7f 	.word	0x08009d7f
 8009d14:	08009d7f 	.word	0x08009d7f
 8009d18:	08009d71 	.word	0x08009d71
 8009d1c:	2b40      	cmp	r3, #64	@ 0x40
 8009d1e:	d02a      	beq.n	8009d76 <UART_SetConfig+0x8aa>
 8009d20:	e02d      	b.n	8009d7e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009d22:	f7fd fca7 	bl	8007674 <HAL_RCCEx_GetD3PCLK1Freq>
 8009d26:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009d28:	e02f      	b.n	8009d8a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009d2a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009d2e:	4618      	mov	r0, r3
 8009d30:	f7fd fcb6 	bl	80076a0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009d34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009d38:	e027      	b.n	8009d8a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009d3a:	f107 0318 	add.w	r3, r7, #24
 8009d3e:	4618      	mov	r0, r3
 8009d40:	f7fd fe02 	bl	8007948 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009d44:	69fb      	ldr	r3, [r7, #28]
 8009d46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009d48:	e01f      	b.n	8009d8a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009d4a:	4b21      	ldr	r3, [pc, #132]	@ (8009dd0 <UART_SetConfig+0x904>)
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	f003 0320 	and.w	r3, r3, #32
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d009      	beq.n	8009d6a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009d56:	4b1e      	ldr	r3, [pc, #120]	@ (8009dd0 <UART_SetConfig+0x904>)
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	08db      	lsrs	r3, r3, #3
 8009d5c:	f003 0303 	and.w	r3, r3, #3
 8009d60:	4a1d      	ldr	r2, [pc, #116]	@ (8009dd8 <UART_SetConfig+0x90c>)
 8009d62:	fa22 f303 	lsr.w	r3, r2, r3
 8009d66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009d68:	e00f      	b.n	8009d8a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8009d6a:	4b1b      	ldr	r3, [pc, #108]	@ (8009dd8 <UART_SetConfig+0x90c>)
 8009d6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009d6e:	e00c      	b.n	8009d8a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009d70:	4b1a      	ldr	r3, [pc, #104]	@ (8009ddc <UART_SetConfig+0x910>)
 8009d72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009d74:	e009      	b.n	8009d8a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009d76:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009d7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009d7c:	e005      	b.n	8009d8a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8009d7e:	2300      	movs	r3, #0
 8009d80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009d82:	2301      	movs	r3, #1
 8009d84:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009d88:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009d8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	f000 81ee 	beq.w	800a16e <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009d92:	697b      	ldr	r3, [r7, #20]
 8009d94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d96:	4a12      	ldr	r2, [pc, #72]	@ (8009de0 <UART_SetConfig+0x914>)
 8009d98:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009d9c:	461a      	mov	r2, r3
 8009d9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009da0:	fbb3 f3f2 	udiv	r3, r3, r2
 8009da4:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009da6:	697b      	ldr	r3, [r7, #20]
 8009da8:	685a      	ldr	r2, [r3, #4]
 8009daa:	4613      	mov	r3, r2
 8009dac:	005b      	lsls	r3, r3, #1
 8009dae:	4413      	add	r3, r2
 8009db0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009db2:	429a      	cmp	r2, r3
 8009db4:	d305      	bcc.n	8009dc2 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009db6:	697b      	ldr	r3, [r7, #20]
 8009db8:	685b      	ldr	r3, [r3, #4]
 8009dba:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009dbc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009dbe:	429a      	cmp	r2, r3
 8009dc0:	d910      	bls.n	8009de4 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8009dc2:	2301      	movs	r3, #1
 8009dc4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009dc8:	e1d1      	b.n	800a16e <UART_SetConfig+0xca2>
 8009dca:	bf00      	nop
 8009dcc:	40011c00 	.word	0x40011c00
 8009dd0:	58024400 	.word	0x58024400
 8009dd4:	58000c00 	.word	0x58000c00
 8009dd8:	03d09000 	.word	0x03d09000
 8009ddc:	003d0900 	.word	0x003d0900
 8009de0:	08012678 	.word	0x08012678
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009de4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009de6:	2200      	movs	r2, #0
 8009de8:	60bb      	str	r3, [r7, #8]
 8009dea:	60fa      	str	r2, [r7, #12]
 8009dec:	697b      	ldr	r3, [r7, #20]
 8009dee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009df0:	4ac0      	ldr	r2, [pc, #768]	@ (800a0f4 <UART_SetConfig+0xc28>)
 8009df2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009df6:	b29b      	uxth	r3, r3
 8009df8:	2200      	movs	r2, #0
 8009dfa:	603b      	str	r3, [r7, #0]
 8009dfc:	607a      	str	r2, [r7, #4]
 8009dfe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009e02:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009e06:	f7f6 fc97 	bl	8000738 <__aeabi_uldivmod>
 8009e0a:	4602      	mov	r2, r0
 8009e0c:	460b      	mov	r3, r1
 8009e0e:	4610      	mov	r0, r2
 8009e10:	4619      	mov	r1, r3
 8009e12:	f04f 0200 	mov.w	r2, #0
 8009e16:	f04f 0300 	mov.w	r3, #0
 8009e1a:	020b      	lsls	r3, r1, #8
 8009e1c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009e20:	0202      	lsls	r2, r0, #8
 8009e22:	6979      	ldr	r1, [r7, #20]
 8009e24:	6849      	ldr	r1, [r1, #4]
 8009e26:	0849      	lsrs	r1, r1, #1
 8009e28:	2000      	movs	r0, #0
 8009e2a:	460c      	mov	r4, r1
 8009e2c:	4605      	mov	r5, r0
 8009e2e:	eb12 0804 	adds.w	r8, r2, r4
 8009e32:	eb43 0905 	adc.w	r9, r3, r5
 8009e36:	697b      	ldr	r3, [r7, #20]
 8009e38:	685b      	ldr	r3, [r3, #4]
 8009e3a:	2200      	movs	r2, #0
 8009e3c:	469a      	mov	sl, r3
 8009e3e:	4693      	mov	fp, r2
 8009e40:	4652      	mov	r2, sl
 8009e42:	465b      	mov	r3, fp
 8009e44:	4640      	mov	r0, r8
 8009e46:	4649      	mov	r1, r9
 8009e48:	f7f6 fc76 	bl	8000738 <__aeabi_uldivmod>
 8009e4c:	4602      	mov	r2, r0
 8009e4e:	460b      	mov	r3, r1
 8009e50:	4613      	mov	r3, r2
 8009e52:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009e54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e56:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009e5a:	d308      	bcc.n	8009e6e <UART_SetConfig+0x9a2>
 8009e5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e5e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009e62:	d204      	bcs.n	8009e6e <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8009e64:	697b      	ldr	r3, [r7, #20]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009e6a:	60da      	str	r2, [r3, #12]
 8009e6c:	e17f      	b.n	800a16e <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8009e6e:	2301      	movs	r3, #1
 8009e70:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009e74:	e17b      	b.n	800a16e <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009e76:	697b      	ldr	r3, [r7, #20]
 8009e78:	69db      	ldr	r3, [r3, #28]
 8009e7a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009e7e:	f040 80bd 	bne.w	8009ffc <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8009e82:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009e86:	2b20      	cmp	r3, #32
 8009e88:	dc48      	bgt.n	8009f1c <UART_SetConfig+0xa50>
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	db7b      	blt.n	8009f86 <UART_SetConfig+0xaba>
 8009e8e:	2b20      	cmp	r3, #32
 8009e90:	d879      	bhi.n	8009f86 <UART_SetConfig+0xaba>
 8009e92:	a201      	add	r2, pc, #4	@ (adr r2, 8009e98 <UART_SetConfig+0x9cc>)
 8009e94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e98:	08009f23 	.word	0x08009f23
 8009e9c:	08009f2b 	.word	0x08009f2b
 8009ea0:	08009f87 	.word	0x08009f87
 8009ea4:	08009f87 	.word	0x08009f87
 8009ea8:	08009f33 	.word	0x08009f33
 8009eac:	08009f87 	.word	0x08009f87
 8009eb0:	08009f87 	.word	0x08009f87
 8009eb4:	08009f87 	.word	0x08009f87
 8009eb8:	08009f43 	.word	0x08009f43
 8009ebc:	08009f87 	.word	0x08009f87
 8009ec0:	08009f87 	.word	0x08009f87
 8009ec4:	08009f87 	.word	0x08009f87
 8009ec8:	08009f87 	.word	0x08009f87
 8009ecc:	08009f87 	.word	0x08009f87
 8009ed0:	08009f87 	.word	0x08009f87
 8009ed4:	08009f87 	.word	0x08009f87
 8009ed8:	08009f53 	.word	0x08009f53
 8009edc:	08009f87 	.word	0x08009f87
 8009ee0:	08009f87 	.word	0x08009f87
 8009ee4:	08009f87 	.word	0x08009f87
 8009ee8:	08009f87 	.word	0x08009f87
 8009eec:	08009f87 	.word	0x08009f87
 8009ef0:	08009f87 	.word	0x08009f87
 8009ef4:	08009f87 	.word	0x08009f87
 8009ef8:	08009f87 	.word	0x08009f87
 8009efc:	08009f87 	.word	0x08009f87
 8009f00:	08009f87 	.word	0x08009f87
 8009f04:	08009f87 	.word	0x08009f87
 8009f08:	08009f87 	.word	0x08009f87
 8009f0c:	08009f87 	.word	0x08009f87
 8009f10:	08009f87 	.word	0x08009f87
 8009f14:	08009f87 	.word	0x08009f87
 8009f18:	08009f79 	.word	0x08009f79
 8009f1c:	2b40      	cmp	r3, #64	@ 0x40
 8009f1e:	d02e      	beq.n	8009f7e <UART_SetConfig+0xab2>
 8009f20:	e031      	b.n	8009f86 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009f22:	f7fc f9db 	bl	80062dc <HAL_RCC_GetPCLK1Freq>
 8009f26:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009f28:	e033      	b.n	8009f92 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009f2a:	f7fc f9ed 	bl	8006308 <HAL_RCC_GetPCLK2Freq>
 8009f2e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009f30:	e02f      	b.n	8009f92 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009f32:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009f36:	4618      	mov	r0, r3
 8009f38:	f7fd fbb2 	bl	80076a0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009f3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f40:	e027      	b.n	8009f92 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009f42:	f107 0318 	add.w	r3, r7, #24
 8009f46:	4618      	mov	r0, r3
 8009f48:	f7fd fcfe 	bl	8007948 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009f4c:	69fb      	ldr	r3, [r7, #28]
 8009f4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f50:	e01f      	b.n	8009f92 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009f52:	4b69      	ldr	r3, [pc, #420]	@ (800a0f8 <UART_SetConfig+0xc2c>)
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	f003 0320 	and.w	r3, r3, #32
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d009      	beq.n	8009f72 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009f5e:	4b66      	ldr	r3, [pc, #408]	@ (800a0f8 <UART_SetConfig+0xc2c>)
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	08db      	lsrs	r3, r3, #3
 8009f64:	f003 0303 	and.w	r3, r3, #3
 8009f68:	4a64      	ldr	r2, [pc, #400]	@ (800a0fc <UART_SetConfig+0xc30>)
 8009f6a:	fa22 f303 	lsr.w	r3, r2, r3
 8009f6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009f70:	e00f      	b.n	8009f92 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8009f72:	4b62      	ldr	r3, [pc, #392]	@ (800a0fc <UART_SetConfig+0xc30>)
 8009f74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f76:	e00c      	b.n	8009f92 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009f78:	4b61      	ldr	r3, [pc, #388]	@ (800a100 <UART_SetConfig+0xc34>)
 8009f7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f7c:	e009      	b.n	8009f92 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009f7e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009f82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f84:	e005      	b.n	8009f92 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8009f86:	2300      	movs	r3, #0
 8009f88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009f8a:	2301      	movs	r3, #1
 8009f8c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009f90:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009f92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	f000 80ea 	beq.w	800a16e <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009f9a:	697b      	ldr	r3, [r7, #20]
 8009f9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f9e:	4a55      	ldr	r2, [pc, #340]	@ (800a0f4 <UART_SetConfig+0xc28>)
 8009fa0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009fa4:	461a      	mov	r2, r3
 8009fa6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009fa8:	fbb3 f3f2 	udiv	r3, r3, r2
 8009fac:	005a      	lsls	r2, r3, #1
 8009fae:	697b      	ldr	r3, [r7, #20]
 8009fb0:	685b      	ldr	r3, [r3, #4]
 8009fb2:	085b      	lsrs	r3, r3, #1
 8009fb4:	441a      	add	r2, r3
 8009fb6:	697b      	ldr	r3, [r7, #20]
 8009fb8:	685b      	ldr	r3, [r3, #4]
 8009fba:	fbb2 f3f3 	udiv	r3, r2, r3
 8009fbe:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009fc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fc2:	2b0f      	cmp	r3, #15
 8009fc4:	d916      	bls.n	8009ff4 <UART_SetConfig+0xb28>
 8009fc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fc8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009fcc:	d212      	bcs.n	8009ff4 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009fce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fd0:	b29b      	uxth	r3, r3
 8009fd2:	f023 030f 	bic.w	r3, r3, #15
 8009fd6:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009fd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fda:	085b      	lsrs	r3, r3, #1
 8009fdc:	b29b      	uxth	r3, r3
 8009fde:	f003 0307 	and.w	r3, r3, #7
 8009fe2:	b29a      	uxth	r2, r3
 8009fe4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009fe6:	4313      	orrs	r3, r2
 8009fe8:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8009fea:	697b      	ldr	r3, [r7, #20]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8009ff0:	60da      	str	r2, [r3, #12]
 8009ff2:	e0bc      	b.n	800a16e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8009ff4:	2301      	movs	r3, #1
 8009ff6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009ffa:	e0b8      	b.n	800a16e <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009ffc:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a000:	2b20      	cmp	r3, #32
 800a002:	dc4b      	bgt.n	800a09c <UART_SetConfig+0xbd0>
 800a004:	2b00      	cmp	r3, #0
 800a006:	f2c0 8087 	blt.w	800a118 <UART_SetConfig+0xc4c>
 800a00a:	2b20      	cmp	r3, #32
 800a00c:	f200 8084 	bhi.w	800a118 <UART_SetConfig+0xc4c>
 800a010:	a201      	add	r2, pc, #4	@ (adr r2, 800a018 <UART_SetConfig+0xb4c>)
 800a012:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a016:	bf00      	nop
 800a018:	0800a0a3 	.word	0x0800a0a3
 800a01c:	0800a0ab 	.word	0x0800a0ab
 800a020:	0800a119 	.word	0x0800a119
 800a024:	0800a119 	.word	0x0800a119
 800a028:	0800a0b3 	.word	0x0800a0b3
 800a02c:	0800a119 	.word	0x0800a119
 800a030:	0800a119 	.word	0x0800a119
 800a034:	0800a119 	.word	0x0800a119
 800a038:	0800a0c3 	.word	0x0800a0c3
 800a03c:	0800a119 	.word	0x0800a119
 800a040:	0800a119 	.word	0x0800a119
 800a044:	0800a119 	.word	0x0800a119
 800a048:	0800a119 	.word	0x0800a119
 800a04c:	0800a119 	.word	0x0800a119
 800a050:	0800a119 	.word	0x0800a119
 800a054:	0800a119 	.word	0x0800a119
 800a058:	0800a0d3 	.word	0x0800a0d3
 800a05c:	0800a119 	.word	0x0800a119
 800a060:	0800a119 	.word	0x0800a119
 800a064:	0800a119 	.word	0x0800a119
 800a068:	0800a119 	.word	0x0800a119
 800a06c:	0800a119 	.word	0x0800a119
 800a070:	0800a119 	.word	0x0800a119
 800a074:	0800a119 	.word	0x0800a119
 800a078:	0800a119 	.word	0x0800a119
 800a07c:	0800a119 	.word	0x0800a119
 800a080:	0800a119 	.word	0x0800a119
 800a084:	0800a119 	.word	0x0800a119
 800a088:	0800a119 	.word	0x0800a119
 800a08c:	0800a119 	.word	0x0800a119
 800a090:	0800a119 	.word	0x0800a119
 800a094:	0800a119 	.word	0x0800a119
 800a098:	0800a10b 	.word	0x0800a10b
 800a09c:	2b40      	cmp	r3, #64	@ 0x40
 800a09e:	d037      	beq.n	800a110 <UART_SetConfig+0xc44>
 800a0a0:	e03a      	b.n	800a118 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a0a2:	f7fc f91b 	bl	80062dc <HAL_RCC_GetPCLK1Freq>
 800a0a6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a0a8:	e03c      	b.n	800a124 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a0aa:	f7fc f92d 	bl	8006308 <HAL_RCC_GetPCLK2Freq>
 800a0ae:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a0b0:	e038      	b.n	800a124 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a0b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a0b6:	4618      	mov	r0, r3
 800a0b8:	f7fd faf2 	bl	80076a0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a0bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a0c0:	e030      	b.n	800a124 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a0c2:	f107 0318 	add.w	r3, r7, #24
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	f7fd fc3e 	bl	8007948 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a0cc:	69fb      	ldr	r3, [r7, #28]
 800a0ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a0d0:	e028      	b.n	800a124 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a0d2:	4b09      	ldr	r3, [pc, #36]	@ (800a0f8 <UART_SetConfig+0xc2c>)
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	f003 0320 	and.w	r3, r3, #32
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d012      	beq.n	800a104 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a0de:	4b06      	ldr	r3, [pc, #24]	@ (800a0f8 <UART_SetConfig+0xc2c>)
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	08db      	lsrs	r3, r3, #3
 800a0e4:	f003 0303 	and.w	r3, r3, #3
 800a0e8:	4a04      	ldr	r2, [pc, #16]	@ (800a0fc <UART_SetConfig+0xc30>)
 800a0ea:	fa22 f303 	lsr.w	r3, r2, r3
 800a0ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a0f0:	e018      	b.n	800a124 <UART_SetConfig+0xc58>
 800a0f2:	bf00      	nop
 800a0f4:	08012678 	.word	0x08012678
 800a0f8:	58024400 	.word	0x58024400
 800a0fc:	03d09000 	.word	0x03d09000
 800a100:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800a104:	4b24      	ldr	r3, [pc, #144]	@ (800a198 <UART_SetConfig+0xccc>)
 800a106:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a108:	e00c      	b.n	800a124 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a10a:	4b24      	ldr	r3, [pc, #144]	@ (800a19c <UART_SetConfig+0xcd0>)
 800a10c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a10e:	e009      	b.n	800a124 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a110:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a114:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a116:	e005      	b.n	800a124 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800a118:	2300      	movs	r3, #0
 800a11a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a11c:	2301      	movs	r3, #1
 800a11e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a122:	bf00      	nop
    }

    if (pclk != 0U)
 800a124:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a126:	2b00      	cmp	r3, #0
 800a128:	d021      	beq.n	800a16e <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a12a:	697b      	ldr	r3, [r7, #20]
 800a12c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a12e:	4a1c      	ldr	r2, [pc, #112]	@ (800a1a0 <UART_SetConfig+0xcd4>)
 800a130:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a134:	461a      	mov	r2, r3
 800a136:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a138:	fbb3 f2f2 	udiv	r2, r3, r2
 800a13c:	697b      	ldr	r3, [r7, #20]
 800a13e:	685b      	ldr	r3, [r3, #4]
 800a140:	085b      	lsrs	r3, r3, #1
 800a142:	441a      	add	r2, r3
 800a144:	697b      	ldr	r3, [r7, #20]
 800a146:	685b      	ldr	r3, [r3, #4]
 800a148:	fbb2 f3f3 	udiv	r3, r2, r3
 800a14c:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a14e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a150:	2b0f      	cmp	r3, #15
 800a152:	d909      	bls.n	800a168 <UART_SetConfig+0xc9c>
 800a154:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a156:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a15a:	d205      	bcs.n	800a168 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a15c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a15e:	b29a      	uxth	r2, r3
 800a160:	697b      	ldr	r3, [r7, #20]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	60da      	str	r2, [r3, #12]
 800a166:	e002      	b.n	800a16e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800a168:	2301      	movs	r3, #1
 800a16a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a16e:	697b      	ldr	r3, [r7, #20]
 800a170:	2201      	movs	r2, #1
 800a172:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800a176:	697b      	ldr	r3, [r7, #20]
 800a178:	2201      	movs	r2, #1
 800a17a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a17e:	697b      	ldr	r3, [r7, #20]
 800a180:	2200      	movs	r2, #0
 800a182:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800a184:	697b      	ldr	r3, [r7, #20]
 800a186:	2200      	movs	r2, #0
 800a188:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800a18a:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800a18e:	4618      	mov	r0, r3
 800a190:	3748      	adds	r7, #72	@ 0x48
 800a192:	46bd      	mov	sp, r7
 800a194:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a198:	03d09000 	.word	0x03d09000
 800a19c:	003d0900 	.word	0x003d0900
 800a1a0:	08012678 	.word	0x08012678

0800a1a4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a1a4:	b480      	push	{r7}
 800a1a6:	b083      	sub	sp, #12
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1b0:	f003 0308 	and.w	r3, r3, #8
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d00a      	beq.n	800a1ce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	685b      	ldr	r3, [r3, #4]
 800a1be:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	430a      	orrs	r2, r1
 800a1cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1d2:	f003 0301 	and.w	r3, r3, #1
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d00a      	beq.n	800a1f0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	685b      	ldr	r3, [r3, #4]
 800a1e0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	430a      	orrs	r2, r1
 800a1ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1f4:	f003 0302 	and.w	r3, r3, #2
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d00a      	beq.n	800a212 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	685b      	ldr	r3, [r3, #4]
 800a202:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	430a      	orrs	r2, r1
 800a210:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a216:	f003 0304 	and.w	r3, r3, #4
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d00a      	beq.n	800a234 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	685b      	ldr	r3, [r3, #4]
 800a224:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	430a      	orrs	r2, r1
 800a232:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a238:	f003 0310 	and.w	r3, r3, #16
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d00a      	beq.n	800a256 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	689b      	ldr	r3, [r3, #8]
 800a246:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	430a      	orrs	r2, r1
 800a254:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a25a:	f003 0320 	and.w	r3, r3, #32
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d00a      	beq.n	800a278 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	689b      	ldr	r3, [r3, #8]
 800a268:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	430a      	orrs	r2, r1
 800a276:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a27c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a280:	2b00      	cmp	r3, #0
 800a282:	d01a      	beq.n	800a2ba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	685b      	ldr	r3, [r3, #4]
 800a28a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	430a      	orrs	r2, r1
 800a298:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a29e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a2a2:	d10a      	bne.n	800a2ba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	685b      	ldr	r3, [r3, #4]
 800a2aa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	430a      	orrs	r2, r1
 800a2b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a2be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d00a      	beq.n	800a2dc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	685b      	ldr	r3, [r3, #4]
 800a2cc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	430a      	orrs	r2, r1
 800a2da:	605a      	str	r2, [r3, #4]
  }
}
 800a2dc:	bf00      	nop
 800a2de:	370c      	adds	r7, #12
 800a2e0:	46bd      	mov	sp, r7
 800a2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e6:	4770      	bx	lr

0800a2e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a2e8:	b580      	push	{r7, lr}
 800a2ea:	b098      	sub	sp, #96	@ 0x60
 800a2ec:	af02      	add	r7, sp, #8
 800a2ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	2200      	movs	r2, #0
 800a2f4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a2f8:	f7f8 fdce 	bl	8002e98 <HAL_GetTick>
 800a2fc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	f003 0308 	and.w	r3, r3, #8
 800a308:	2b08      	cmp	r3, #8
 800a30a:	d12f      	bne.n	800a36c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a30c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a310:	9300      	str	r3, [sp, #0]
 800a312:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a314:	2200      	movs	r2, #0
 800a316:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a31a:	6878      	ldr	r0, [r7, #4]
 800a31c:	f000 f88e 	bl	800a43c <UART_WaitOnFlagUntilTimeout>
 800a320:	4603      	mov	r3, r0
 800a322:	2b00      	cmp	r3, #0
 800a324:	d022      	beq.n	800a36c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a32c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a32e:	e853 3f00 	ldrex	r3, [r3]
 800a332:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a334:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a336:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a33a:	653b      	str	r3, [r7, #80]	@ 0x50
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	461a      	mov	r2, r3
 800a342:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a344:	647b      	str	r3, [r7, #68]	@ 0x44
 800a346:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a348:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a34a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a34c:	e841 2300 	strex	r3, r2, [r1]
 800a350:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a352:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a354:	2b00      	cmp	r3, #0
 800a356:	d1e6      	bne.n	800a326 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	2220      	movs	r2, #32
 800a35c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	2200      	movs	r2, #0
 800a364:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a368:	2303      	movs	r3, #3
 800a36a:	e063      	b.n	800a434 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	f003 0304 	and.w	r3, r3, #4
 800a376:	2b04      	cmp	r3, #4
 800a378:	d149      	bne.n	800a40e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a37a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a37e:	9300      	str	r3, [sp, #0]
 800a380:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a382:	2200      	movs	r2, #0
 800a384:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a388:	6878      	ldr	r0, [r7, #4]
 800a38a:	f000 f857 	bl	800a43c <UART_WaitOnFlagUntilTimeout>
 800a38e:	4603      	mov	r3, r0
 800a390:	2b00      	cmp	r3, #0
 800a392:	d03c      	beq.n	800a40e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a39a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a39c:	e853 3f00 	ldrex	r3, [r3]
 800a3a0:	623b      	str	r3, [r7, #32]
   return(result);
 800a3a2:	6a3b      	ldr	r3, [r7, #32]
 800a3a4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a3a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	461a      	mov	r2, r3
 800a3b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a3b2:	633b      	str	r3, [r7, #48]	@ 0x30
 800a3b4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3b6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a3b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a3ba:	e841 2300 	strex	r3, r2, [r1]
 800a3be:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a3c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d1e6      	bne.n	800a394 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	3308      	adds	r3, #8
 800a3cc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3ce:	693b      	ldr	r3, [r7, #16]
 800a3d0:	e853 3f00 	ldrex	r3, [r3]
 800a3d4:	60fb      	str	r3, [r7, #12]
   return(result);
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	f023 0301 	bic.w	r3, r3, #1
 800a3dc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	3308      	adds	r3, #8
 800a3e4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a3e6:	61fa      	str	r2, [r7, #28]
 800a3e8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3ea:	69b9      	ldr	r1, [r7, #24]
 800a3ec:	69fa      	ldr	r2, [r7, #28]
 800a3ee:	e841 2300 	strex	r3, r2, [r1]
 800a3f2:	617b      	str	r3, [r7, #20]
   return(result);
 800a3f4:	697b      	ldr	r3, [r7, #20]
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d1e5      	bne.n	800a3c6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	2220      	movs	r2, #32
 800a3fe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	2200      	movs	r2, #0
 800a406:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a40a:	2303      	movs	r3, #3
 800a40c:	e012      	b.n	800a434 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	2220      	movs	r2, #32
 800a412:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	2220      	movs	r2, #32
 800a41a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	2200      	movs	r2, #0
 800a422:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	2200      	movs	r2, #0
 800a428:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	2200      	movs	r2, #0
 800a42e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a432:	2300      	movs	r3, #0
}
 800a434:	4618      	mov	r0, r3
 800a436:	3758      	adds	r7, #88	@ 0x58
 800a438:	46bd      	mov	sp, r7
 800a43a:	bd80      	pop	{r7, pc}

0800a43c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a43c:	b580      	push	{r7, lr}
 800a43e:	b084      	sub	sp, #16
 800a440:	af00      	add	r7, sp, #0
 800a442:	60f8      	str	r0, [r7, #12]
 800a444:	60b9      	str	r1, [r7, #8]
 800a446:	603b      	str	r3, [r7, #0]
 800a448:	4613      	mov	r3, r2
 800a44a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a44c:	e04f      	b.n	800a4ee <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a44e:	69bb      	ldr	r3, [r7, #24]
 800a450:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a454:	d04b      	beq.n	800a4ee <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a456:	f7f8 fd1f 	bl	8002e98 <HAL_GetTick>
 800a45a:	4602      	mov	r2, r0
 800a45c:	683b      	ldr	r3, [r7, #0]
 800a45e:	1ad3      	subs	r3, r2, r3
 800a460:	69ba      	ldr	r2, [r7, #24]
 800a462:	429a      	cmp	r2, r3
 800a464:	d302      	bcc.n	800a46c <UART_WaitOnFlagUntilTimeout+0x30>
 800a466:	69bb      	ldr	r3, [r7, #24]
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d101      	bne.n	800a470 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a46c:	2303      	movs	r3, #3
 800a46e:	e04e      	b.n	800a50e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	f003 0304 	and.w	r3, r3, #4
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d037      	beq.n	800a4ee <UART_WaitOnFlagUntilTimeout+0xb2>
 800a47e:	68bb      	ldr	r3, [r7, #8]
 800a480:	2b80      	cmp	r3, #128	@ 0x80
 800a482:	d034      	beq.n	800a4ee <UART_WaitOnFlagUntilTimeout+0xb2>
 800a484:	68bb      	ldr	r3, [r7, #8]
 800a486:	2b40      	cmp	r3, #64	@ 0x40
 800a488:	d031      	beq.n	800a4ee <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	69db      	ldr	r3, [r3, #28]
 800a490:	f003 0308 	and.w	r3, r3, #8
 800a494:	2b08      	cmp	r3, #8
 800a496:	d110      	bne.n	800a4ba <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	2208      	movs	r2, #8
 800a49e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a4a0:	68f8      	ldr	r0, [r7, #12]
 800a4a2:	f000 f95b 	bl	800a75c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	2208      	movs	r2, #8
 800a4aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	2200      	movs	r2, #0
 800a4b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a4b6:	2301      	movs	r3, #1
 800a4b8:	e029      	b.n	800a50e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	69db      	ldr	r3, [r3, #28]
 800a4c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a4c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a4c8:	d111      	bne.n	800a4ee <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a4d2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a4d4:	68f8      	ldr	r0, [r7, #12]
 800a4d6:	f000 f941 	bl	800a75c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	2220      	movs	r2, #32
 800a4de:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	2200      	movs	r2, #0
 800a4e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a4ea:	2303      	movs	r3, #3
 800a4ec:	e00f      	b.n	800a50e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	69da      	ldr	r2, [r3, #28]
 800a4f4:	68bb      	ldr	r3, [r7, #8]
 800a4f6:	4013      	ands	r3, r2
 800a4f8:	68ba      	ldr	r2, [r7, #8]
 800a4fa:	429a      	cmp	r2, r3
 800a4fc:	bf0c      	ite	eq
 800a4fe:	2301      	moveq	r3, #1
 800a500:	2300      	movne	r3, #0
 800a502:	b2db      	uxtb	r3, r3
 800a504:	461a      	mov	r2, r3
 800a506:	79fb      	ldrb	r3, [r7, #7]
 800a508:	429a      	cmp	r2, r3
 800a50a:	d0a0      	beq.n	800a44e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a50c:	2300      	movs	r3, #0
}
 800a50e:	4618      	mov	r0, r3
 800a510:	3710      	adds	r7, #16
 800a512:	46bd      	mov	sp, r7
 800a514:	bd80      	pop	{r7, pc}
	...

0800a518 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a518:	b480      	push	{r7}
 800a51a:	b0a3      	sub	sp, #140	@ 0x8c
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	60f8      	str	r0, [r7, #12]
 800a520:	60b9      	str	r1, [r7, #8]
 800a522:	4613      	mov	r3, r2
 800a524:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	68ba      	ldr	r2, [r7, #8]
 800a52a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	88fa      	ldrh	r2, [r7, #6]
 800a530:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	88fa      	ldrh	r2, [r7, #6]
 800a538:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	2200      	movs	r2, #0
 800a540:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	689b      	ldr	r3, [r3, #8]
 800a546:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a54a:	d10e      	bne.n	800a56a <UART_Start_Receive_IT+0x52>
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	691b      	ldr	r3, [r3, #16]
 800a550:	2b00      	cmp	r3, #0
 800a552:	d105      	bne.n	800a560 <UART_Start_Receive_IT+0x48>
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800a55a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a55e:	e02d      	b.n	800a5bc <UART_Start_Receive_IT+0xa4>
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	22ff      	movs	r2, #255	@ 0xff
 800a564:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a568:	e028      	b.n	800a5bc <UART_Start_Receive_IT+0xa4>
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	689b      	ldr	r3, [r3, #8]
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d10d      	bne.n	800a58e <UART_Start_Receive_IT+0x76>
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	691b      	ldr	r3, [r3, #16]
 800a576:	2b00      	cmp	r3, #0
 800a578:	d104      	bne.n	800a584 <UART_Start_Receive_IT+0x6c>
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	22ff      	movs	r2, #255	@ 0xff
 800a57e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a582:	e01b      	b.n	800a5bc <UART_Start_Receive_IT+0xa4>
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	227f      	movs	r2, #127	@ 0x7f
 800a588:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a58c:	e016      	b.n	800a5bc <UART_Start_Receive_IT+0xa4>
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	689b      	ldr	r3, [r3, #8]
 800a592:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a596:	d10d      	bne.n	800a5b4 <UART_Start_Receive_IT+0x9c>
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	691b      	ldr	r3, [r3, #16]
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d104      	bne.n	800a5aa <UART_Start_Receive_IT+0x92>
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	227f      	movs	r2, #127	@ 0x7f
 800a5a4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a5a8:	e008      	b.n	800a5bc <UART_Start_Receive_IT+0xa4>
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	223f      	movs	r2, #63	@ 0x3f
 800a5ae:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a5b2:	e003      	b.n	800a5bc <UART_Start_Receive_IT+0xa4>
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	2200      	movs	r2, #0
 800a5b8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	2200      	movs	r2, #0
 800a5c0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	2222      	movs	r2, #34	@ 0x22
 800a5c8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	3308      	adds	r3, #8
 800a5d2:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5d4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a5d6:	e853 3f00 	ldrex	r3, [r3]
 800a5da:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800a5dc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a5de:	f043 0301 	orr.w	r3, r3, #1
 800a5e2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	3308      	adds	r3, #8
 800a5ec:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800a5f0:	673a      	str	r2, [r7, #112]	@ 0x70
 800a5f2:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5f4:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800a5f6:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800a5f8:	e841 2300 	strex	r3, r2, [r1]
 800a5fc:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800a5fe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a600:	2b00      	cmp	r3, #0
 800a602:	d1e3      	bne.n	800a5cc <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a608:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a60c:	d14f      	bne.n	800a6ae <UART_Start_Receive_IT+0x196>
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800a614:	88fa      	ldrh	r2, [r7, #6]
 800a616:	429a      	cmp	r2, r3
 800a618:	d349      	bcc.n	800a6ae <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	689b      	ldr	r3, [r3, #8]
 800a61e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a622:	d107      	bne.n	800a634 <UART_Start_Receive_IT+0x11c>
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	691b      	ldr	r3, [r3, #16]
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d103      	bne.n	800a634 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	4a47      	ldr	r2, [pc, #284]	@ (800a74c <UART_Start_Receive_IT+0x234>)
 800a630:	675a      	str	r2, [r3, #116]	@ 0x74
 800a632:	e002      	b.n	800a63a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	4a46      	ldr	r2, [pc, #280]	@ (800a750 <UART_Start_Receive_IT+0x238>)
 800a638:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	691b      	ldr	r3, [r3, #16]
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d01a      	beq.n	800a678 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a648:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a64a:	e853 3f00 	ldrex	r3, [r3]
 800a64e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800a650:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a652:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a656:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	461a      	mov	r2, r3
 800a660:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a664:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a666:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a668:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800a66a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800a66c:	e841 2300 	strex	r3, r2, [r1]
 800a670:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800a672:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a674:	2b00      	cmp	r3, #0
 800a676:	d1e4      	bne.n	800a642 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	3308      	adds	r3, #8
 800a67e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a680:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a682:	e853 3f00 	ldrex	r3, [r3]
 800a686:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a688:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a68a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a68e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	3308      	adds	r3, #8
 800a696:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800a698:	64ba      	str	r2, [r7, #72]	@ 0x48
 800a69a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a69c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a69e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a6a0:	e841 2300 	strex	r3, r2, [r1]
 800a6a4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800a6a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d1e5      	bne.n	800a678 <UART_Start_Receive_IT+0x160>
 800a6ac:	e046      	b.n	800a73c <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	689b      	ldr	r3, [r3, #8]
 800a6b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a6b6:	d107      	bne.n	800a6c8 <UART_Start_Receive_IT+0x1b0>
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	691b      	ldr	r3, [r3, #16]
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d103      	bne.n	800a6c8 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	4a24      	ldr	r2, [pc, #144]	@ (800a754 <UART_Start_Receive_IT+0x23c>)
 800a6c4:	675a      	str	r2, [r3, #116]	@ 0x74
 800a6c6:	e002      	b.n	800a6ce <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	4a23      	ldr	r2, [pc, #140]	@ (800a758 <UART_Start_Receive_IT+0x240>)
 800a6cc:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	691b      	ldr	r3, [r3, #16]
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d019      	beq.n	800a70a <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6de:	e853 3f00 	ldrex	r3, [r3]
 800a6e2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a6e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6e6:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800a6ea:	677b      	str	r3, [r7, #116]	@ 0x74
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	461a      	mov	r2, r3
 800a6f2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a6f4:	637b      	str	r3, [r7, #52]	@ 0x34
 800a6f6:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6f8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a6fa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a6fc:	e841 2300 	strex	r3, r2, [r1]
 800a700:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800a702:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a704:	2b00      	cmp	r3, #0
 800a706:	d1e6      	bne.n	800a6d6 <UART_Start_Receive_IT+0x1be>
 800a708:	e018      	b.n	800a73c <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a710:	697b      	ldr	r3, [r7, #20]
 800a712:	e853 3f00 	ldrex	r3, [r3]
 800a716:	613b      	str	r3, [r7, #16]
   return(result);
 800a718:	693b      	ldr	r3, [r7, #16]
 800a71a:	f043 0320 	orr.w	r3, r3, #32
 800a71e:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	461a      	mov	r2, r3
 800a726:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a728:	623b      	str	r3, [r7, #32]
 800a72a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a72c:	69f9      	ldr	r1, [r7, #28]
 800a72e:	6a3a      	ldr	r2, [r7, #32]
 800a730:	e841 2300 	strex	r3, r2, [r1]
 800a734:	61bb      	str	r3, [r7, #24]
   return(result);
 800a736:	69bb      	ldr	r3, [r7, #24]
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d1e6      	bne.n	800a70a <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800a73c:	2300      	movs	r3, #0
}
 800a73e:	4618      	mov	r0, r3
 800a740:	378c      	adds	r7, #140	@ 0x8c
 800a742:	46bd      	mov	sp, r7
 800a744:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a748:	4770      	bx	lr
 800a74a:	bf00      	nop
 800a74c:	0800af7d 	.word	0x0800af7d
 800a750:	0800ac1d 	.word	0x0800ac1d
 800a754:	0800aa65 	.word	0x0800aa65
 800a758:	0800a8ad 	.word	0x0800a8ad

0800a75c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a75c:	b480      	push	{r7}
 800a75e:	b095      	sub	sp, #84	@ 0x54
 800a760:	af00      	add	r7, sp, #0
 800a762:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a76a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a76c:	e853 3f00 	ldrex	r3, [r3]
 800a770:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a772:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a774:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a778:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	461a      	mov	r2, r3
 800a780:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a782:	643b      	str	r3, [r7, #64]	@ 0x40
 800a784:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a786:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a788:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a78a:	e841 2300 	strex	r3, r2, [r1]
 800a78e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a790:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a792:	2b00      	cmp	r3, #0
 800a794:	d1e6      	bne.n	800a764 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	3308      	adds	r3, #8
 800a79c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a79e:	6a3b      	ldr	r3, [r7, #32]
 800a7a0:	e853 3f00 	ldrex	r3, [r3]
 800a7a4:	61fb      	str	r3, [r7, #28]
   return(result);
 800a7a6:	69fa      	ldr	r2, [r7, #28]
 800a7a8:	4b1e      	ldr	r3, [pc, #120]	@ (800a824 <UART_EndRxTransfer+0xc8>)
 800a7aa:	4013      	ands	r3, r2
 800a7ac:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	3308      	adds	r3, #8
 800a7b4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a7b6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a7b8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7ba:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a7bc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a7be:	e841 2300 	strex	r3, r2, [r1]
 800a7c2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a7c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d1e5      	bne.n	800a796 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a7ce:	2b01      	cmp	r3, #1
 800a7d0:	d118      	bne.n	800a804 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	e853 3f00 	ldrex	r3, [r3]
 800a7de:	60bb      	str	r3, [r7, #8]
   return(result);
 800a7e0:	68bb      	ldr	r3, [r7, #8]
 800a7e2:	f023 0310 	bic.w	r3, r3, #16
 800a7e6:	647b      	str	r3, [r7, #68]	@ 0x44
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	461a      	mov	r2, r3
 800a7ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a7f0:	61bb      	str	r3, [r7, #24]
 800a7f2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7f4:	6979      	ldr	r1, [r7, #20]
 800a7f6:	69ba      	ldr	r2, [r7, #24]
 800a7f8:	e841 2300 	strex	r3, r2, [r1]
 800a7fc:	613b      	str	r3, [r7, #16]
   return(result);
 800a7fe:	693b      	ldr	r3, [r7, #16]
 800a800:	2b00      	cmp	r3, #0
 800a802:	d1e6      	bne.n	800a7d2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	2220      	movs	r2, #32
 800a808:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	2200      	movs	r2, #0
 800a810:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	2200      	movs	r2, #0
 800a816:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a818:	bf00      	nop
 800a81a:	3754      	adds	r7, #84	@ 0x54
 800a81c:	46bd      	mov	sp, r7
 800a81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a822:	4770      	bx	lr
 800a824:	effffffe 	.word	0xeffffffe

0800a828 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a828:	b580      	push	{r7, lr}
 800a82a:	b084      	sub	sp, #16
 800a82c:	af00      	add	r7, sp, #0
 800a82e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a834:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	2200      	movs	r2, #0
 800a83a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	2200      	movs	r2, #0
 800a842:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a846:	68f8      	ldr	r0, [r7, #12]
 800a848:	f7fe fe2a 	bl	80094a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a84c:	bf00      	nop
 800a84e:	3710      	adds	r7, #16
 800a850:	46bd      	mov	sp, r7
 800a852:	bd80      	pop	{r7, pc}

0800a854 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a854:	b580      	push	{r7, lr}
 800a856:	b088      	sub	sp, #32
 800a858:	af00      	add	r7, sp, #0
 800a85a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	e853 3f00 	ldrex	r3, [r3]
 800a868:	60bb      	str	r3, [r7, #8]
   return(result);
 800a86a:	68bb      	ldr	r3, [r7, #8]
 800a86c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a870:	61fb      	str	r3, [r7, #28]
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	461a      	mov	r2, r3
 800a878:	69fb      	ldr	r3, [r7, #28]
 800a87a:	61bb      	str	r3, [r7, #24]
 800a87c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a87e:	6979      	ldr	r1, [r7, #20]
 800a880:	69ba      	ldr	r2, [r7, #24]
 800a882:	e841 2300 	strex	r3, r2, [r1]
 800a886:	613b      	str	r3, [r7, #16]
   return(result);
 800a888:	693b      	ldr	r3, [r7, #16]
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d1e6      	bne.n	800a85c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	2220      	movs	r2, #32
 800a892:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	2200      	movs	r2, #0
 800a89a:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a89c:	6878      	ldr	r0, [r7, #4]
 800a89e:	f7fe fdf5 	bl	800948c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a8a2:	bf00      	nop
 800a8a4:	3720      	adds	r7, #32
 800a8a6:	46bd      	mov	sp, r7
 800a8a8:	bd80      	pop	{r7, pc}
	...

0800a8ac <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800a8ac:	b580      	push	{r7, lr}
 800a8ae:	b09c      	sub	sp, #112	@ 0x70
 800a8b0:	af00      	add	r7, sp, #0
 800a8b2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a8ba:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a8c4:	2b22      	cmp	r3, #34	@ 0x22
 800a8c6:	f040 80be 	bne.w	800aa46 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8d0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a8d4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800a8d8:	b2d9      	uxtb	r1, r3
 800a8da:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800a8de:	b2da      	uxtb	r2, r3
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a8e4:	400a      	ands	r2, r1
 800a8e6:	b2d2      	uxtb	r2, r2
 800a8e8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a8ee:	1c5a      	adds	r2, r3, #1
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a8fa:	b29b      	uxth	r3, r3
 800a8fc:	3b01      	subs	r3, #1
 800a8fe:	b29a      	uxth	r2, r3
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a90c:	b29b      	uxth	r3, r3
 800a90e:	2b00      	cmp	r3, #0
 800a910:	f040 80a1 	bne.w	800aa56 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a91a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a91c:	e853 3f00 	ldrex	r3, [r3]
 800a920:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a922:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a924:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a928:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	461a      	mov	r2, r3
 800a930:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a932:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a934:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a936:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a938:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a93a:	e841 2300 	strex	r3, r2, [r1]
 800a93e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a940:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a942:	2b00      	cmp	r3, #0
 800a944:	d1e6      	bne.n	800a914 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	3308      	adds	r3, #8
 800a94c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a94e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a950:	e853 3f00 	ldrex	r3, [r3]
 800a954:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a956:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a958:	f023 0301 	bic.w	r3, r3, #1
 800a95c:	667b      	str	r3, [r7, #100]	@ 0x64
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	3308      	adds	r3, #8
 800a964:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800a966:	647a      	str	r2, [r7, #68]	@ 0x44
 800a968:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a96a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a96c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a96e:	e841 2300 	strex	r3, r2, [r1]
 800a972:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a974:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a976:	2b00      	cmp	r3, #0
 800a978:	d1e5      	bne.n	800a946 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	2220      	movs	r2, #32
 800a97e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	2200      	movs	r2, #0
 800a986:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	2200      	movs	r2, #0
 800a98c:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	4a33      	ldr	r2, [pc, #204]	@ (800aa60 <UART_RxISR_8BIT+0x1b4>)
 800a994:	4293      	cmp	r3, r2
 800a996:	d01f      	beq.n	800a9d8 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	685b      	ldr	r3, [r3, #4]
 800a99e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d018      	beq.n	800a9d8 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9ae:	e853 3f00 	ldrex	r3, [r3]
 800a9b2:	623b      	str	r3, [r7, #32]
   return(result);
 800a9b4:	6a3b      	ldr	r3, [r7, #32]
 800a9b6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a9ba:	663b      	str	r3, [r7, #96]	@ 0x60
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	461a      	mov	r2, r3
 800a9c2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a9c4:	633b      	str	r3, [r7, #48]	@ 0x30
 800a9c6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9c8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a9ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a9cc:	e841 2300 	strex	r3, r2, [r1]
 800a9d0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a9d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d1e6      	bne.n	800a9a6 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a9dc:	2b01      	cmp	r3, #1
 800a9de:	d12e      	bne.n	800aa3e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	2200      	movs	r2, #0
 800a9e4:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9ec:	693b      	ldr	r3, [r7, #16]
 800a9ee:	e853 3f00 	ldrex	r3, [r3]
 800a9f2:	60fb      	str	r3, [r7, #12]
   return(result);
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	f023 0310 	bic.w	r3, r3, #16
 800a9fa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	461a      	mov	r2, r3
 800aa02:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800aa04:	61fb      	str	r3, [r7, #28]
 800aa06:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa08:	69b9      	ldr	r1, [r7, #24]
 800aa0a:	69fa      	ldr	r2, [r7, #28]
 800aa0c:	e841 2300 	strex	r3, r2, [r1]
 800aa10:	617b      	str	r3, [r7, #20]
   return(result);
 800aa12:	697b      	ldr	r3, [r7, #20]
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d1e6      	bne.n	800a9e6 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	69db      	ldr	r3, [r3, #28]
 800aa1e:	f003 0310 	and.w	r3, r3, #16
 800aa22:	2b10      	cmp	r3, #16
 800aa24:	d103      	bne.n	800aa2e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	2210      	movs	r2, #16
 800aa2c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800aa34:	4619      	mov	r1, r3
 800aa36:	6878      	ldr	r0, [r7, #4]
 800aa38:	f7fe fd3c 	bl	80094b4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800aa3c:	e00b      	b.n	800aa56 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800aa3e:	6878      	ldr	r0, [r7, #4]
 800aa40:	f7f6 fd6c 	bl	800151c <HAL_UART_RxCpltCallback>
}
 800aa44:	e007      	b.n	800aa56 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	699a      	ldr	r2, [r3, #24]
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	f042 0208 	orr.w	r2, r2, #8
 800aa54:	619a      	str	r2, [r3, #24]
}
 800aa56:	bf00      	nop
 800aa58:	3770      	adds	r7, #112	@ 0x70
 800aa5a:	46bd      	mov	sp, r7
 800aa5c:	bd80      	pop	{r7, pc}
 800aa5e:	bf00      	nop
 800aa60:	58000c00 	.word	0x58000c00

0800aa64 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800aa64:	b580      	push	{r7, lr}
 800aa66:	b09c      	sub	sp, #112	@ 0x70
 800aa68:	af00      	add	r7, sp, #0
 800aa6a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800aa72:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800aa7c:	2b22      	cmp	r3, #34	@ 0x22
 800aa7e:	f040 80be 	bne.w	800abfe <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa88:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aa90:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800aa92:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800aa96:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800aa9a:	4013      	ands	r3, r2
 800aa9c:	b29a      	uxth	r2, r3
 800aa9e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800aaa0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aaa6:	1c9a      	adds	r2, r3, #2
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800aab2:	b29b      	uxth	r3, r3
 800aab4:	3b01      	subs	r3, #1
 800aab6:	b29a      	uxth	r2, r3
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800aac4:	b29b      	uxth	r3, r3
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	f040 80a1 	bne.w	800ac0e <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aad2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800aad4:	e853 3f00 	ldrex	r3, [r3]
 800aad8:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800aada:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800aadc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800aae0:	667b      	str	r3, [r7, #100]	@ 0x64
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	461a      	mov	r2, r3
 800aae8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800aaea:	657b      	str	r3, [r7, #84]	@ 0x54
 800aaec:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aaee:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800aaf0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800aaf2:	e841 2300 	strex	r3, r2, [r1]
 800aaf6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800aaf8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d1e6      	bne.n	800aacc <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	3308      	adds	r3, #8
 800ab04:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab08:	e853 3f00 	ldrex	r3, [r3]
 800ab0c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ab0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab10:	f023 0301 	bic.w	r3, r3, #1
 800ab14:	663b      	str	r3, [r7, #96]	@ 0x60
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	3308      	adds	r3, #8
 800ab1c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800ab1e:	643a      	str	r2, [r7, #64]	@ 0x40
 800ab20:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab22:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ab24:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ab26:	e841 2300 	strex	r3, r2, [r1]
 800ab2a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ab2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d1e5      	bne.n	800aafe <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	2220      	movs	r2, #32
 800ab36:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	2200      	movs	r2, #0
 800ab3e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	2200      	movs	r2, #0
 800ab44:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	4a33      	ldr	r2, [pc, #204]	@ (800ac18 <UART_RxISR_16BIT+0x1b4>)
 800ab4c:	4293      	cmp	r3, r2
 800ab4e:	d01f      	beq.n	800ab90 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	685b      	ldr	r3, [r3, #4]
 800ab56:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d018      	beq.n	800ab90 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab64:	6a3b      	ldr	r3, [r7, #32]
 800ab66:	e853 3f00 	ldrex	r3, [r3]
 800ab6a:	61fb      	str	r3, [r7, #28]
   return(result);
 800ab6c:	69fb      	ldr	r3, [r7, #28]
 800ab6e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800ab72:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	461a      	mov	r2, r3
 800ab7a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ab7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ab7e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab80:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ab82:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ab84:	e841 2300 	strex	r3, r2, [r1]
 800ab88:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ab8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d1e6      	bne.n	800ab5e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ab94:	2b01      	cmp	r3, #1
 800ab96:	d12e      	bne.n	800abf6 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	2200      	movs	r2, #0
 800ab9c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	e853 3f00 	ldrex	r3, [r3]
 800abaa:	60bb      	str	r3, [r7, #8]
   return(result);
 800abac:	68bb      	ldr	r3, [r7, #8]
 800abae:	f023 0310 	bic.w	r3, r3, #16
 800abb2:	65bb      	str	r3, [r7, #88]	@ 0x58
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	461a      	mov	r2, r3
 800abba:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800abbc:	61bb      	str	r3, [r7, #24]
 800abbe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abc0:	6979      	ldr	r1, [r7, #20]
 800abc2:	69ba      	ldr	r2, [r7, #24]
 800abc4:	e841 2300 	strex	r3, r2, [r1]
 800abc8:	613b      	str	r3, [r7, #16]
   return(result);
 800abca:	693b      	ldr	r3, [r7, #16]
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d1e6      	bne.n	800ab9e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	69db      	ldr	r3, [r3, #28]
 800abd6:	f003 0310 	and.w	r3, r3, #16
 800abda:	2b10      	cmp	r3, #16
 800abdc:	d103      	bne.n	800abe6 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	2210      	movs	r2, #16
 800abe4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800abec:	4619      	mov	r1, r3
 800abee:	6878      	ldr	r0, [r7, #4]
 800abf0:	f7fe fc60 	bl	80094b4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800abf4:	e00b      	b.n	800ac0e <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800abf6:	6878      	ldr	r0, [r7, #4]
 800abf8:	f7f6 fc90 	bl	800151c <HAL_UART_RxCpltCallback>
}
 800abfc:	e007      	b.n	800ac0e <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	699a      	ldr	r2, [r3, #24]
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	f042 0208 	orr.w	r2, r2, #8
 800ac0c:	619a      	str	r2, [r3, #24]
}
 800ac0e:	bf00      	nop
 800ac10:	3770      	adds	r7, #112	@ 0x70
 800ac12:	46bd      	mov	sp, r7
 800ac14:	bd80      	pop	{r7, pc}
 800ac16:	bf00      	nop
 800ac18:	58000c00 	.word	0x58000c00

0800ac1c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800ac1c:	b580      	push	{r7, lr}
 800ac1e:	b0ac      	sub	sp, #176	@ 0xb0
 800ac20:	af00      	add	r7, sp, #0
 800ac22:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800ac2a:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	69db      	ldr	r3, [r3, #28]
 800ac34:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	689b      	ldr	r3, [r3, #8]
 800ac48:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ac52:	2b22      	cmp	r3, #34	@ 0x22
 800ac54:	f040 8180 	bne.w	800af58 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800ac5e:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800ac62:	e123      	b.n	800aeac <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac6a:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800ac6e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800ac72:	b2d9      	uxtb	r1, r3
 800ac74:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800ac78:	b2da      	uxtb	r2, r3
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ac7e:	400a      	ands	r2, r1
 800ac80:	b2d2      	uxtb	r2, r2
 800ac82:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ac88:	1c5a      	adds	r2, r3, #1
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ac94:	b29b      	uxth	r3, r3
 800ac96:	3b01      	subs	r3, #1
 800ac98:	b29a      	uxth	r2, r3
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	69db      	ldr	r3, [r3, #28]
 800aca6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800acaa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800acae:	f003 0307 	and.w	r3, r3, #7
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d053      	beq.n	800ad5e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800acb6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800acba:	f003 0301 	and.w	r3, r3, #1
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d011      	beq.n	800ace6 <UART_RxISR_8BIT_FIFOEN+0xca>
 800acc2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800acc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800acca:	2b00      	cmp	r3, #0
 800accc:	d00b      	beq.n	800ace6 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	2201      	movs	r2, #1
 800acd4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800acdc:	f043 0201 	orr.w	r2, r3, #1
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ace6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800acea:	f003 0302 	and.w	r3, r3, #2
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d011      	beq.n	800ad16 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800acf2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800acf6:	f003 0301 	and.w	r3, r3, #1
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d00b      	beq.n	800ad16 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	2202      	movs	r2, #2
 800ad04:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ad0c:	f043 0204 	orr.w	r2, r3, #4
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ad16:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ad1a:	f003 0304 	and.w	r3, r3, #4
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d011      	beq.n	800ad46 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800ad22:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800ad26:	f003 0301 	and.w	r3, r3, #1
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d00b      	beq.n	800ad46 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	2204      	movs	r2, #4
 800ad34:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ad3c:	f043 0202 	orr.w	r2, r3, #2
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d006      	beq.n	800ad5e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ad50:	6878      	ldr	r0, [r7, #4]
 800ad52:	f7fe fba5 	bl	80094a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	2200      	movs	r2, #0
 800ad5a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ad64:	b29b      	uxth	r3, r3
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	f040 80a0 	bne.w	800aeac <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad72:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ad74:	e853 3f00 	ldrex	r3, [r3]
 800ad78:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800ad7a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ad7c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ad80:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	461a      	mov	r2, r3
 800ad8a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ad8e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800ad90:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad92:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800ad94:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800ad96:	e841 2300 	strex	r3, r2, [r1]
 800ad9a:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800ad9c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d1e4      	bne.n	800ad6c <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	3308      	adds	r3, #8
 800ada8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adaa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800adac:	e853 3f00 	ldrex	r3, [r3]
 800adb0:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800adb2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800adb4:	4b6e      	ldr	r3, [pc, #440]	@ (800af70 <UART_RxISR_8BIT_FIFOEN+0x354>)
 800adb6:	4013      	ands	r3, r2
 800adb8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	3308      	adds	r3, #8
 800adc2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800adc6:	66ba      	str	r2, [r7, #104]	@ 0x68
 800adc8:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adca:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800adcc:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800adce:	e841 2300 	strex	r3, r2, [r1]
 800add2:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800add4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800add6:	2b00      	cmp	r3, #0
 800add8:	d1e3      	bne.n	800ada2 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	2220      	movs	r2, #32
 800adde:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	2200      	movs	r2, #0
 800ade6:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	2200      	movs	r2, #0
 800adec:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	4a60      	ldr	r2, [pc, #384]	@ (800af74 <UART_RxISR_8BIT_FIFOEN+0x358>)
 800adf4:	4293      	cmp	r3, r2
 800adf6:	d021      	beq.n	800ae3c <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	685b      	ldr	r3, [r3, #4]
 800adfe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d01a      	beq.n	800ae3c <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae0c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ae0e:	e853 3f00 	ldrex	r3, [r3]
 800ae12:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800ae14:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ae16:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800ae1a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	461a      	mov	r2, r3
 800ae24:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800ae28:	657b      	str	r3, [r7, #84]	@ 0x54
 800ae2a:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae2c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800ae2e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ae30:	e841 2300 	strex	r3, r2, [r1]
 800ae34:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800ae36:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d1e4      	bne.n	800ae06 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ae40:	2b01      	cmp	r3, #1
 800ae42:	d130      	bne.n	800aea6 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	2200      	movs	r2, #0
 800ae48:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae52:	e853 3f00 	ldrex	r3, [r3]
 800ae56:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ae58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae5a:	f023 0310 	bic.w	r3, r3, #16
 800ae5e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	461a      	mov	r2, r3
 800ae68:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ae6c:	643b      	str	r3, [r7, #64]	@ 0x40
 800ae6e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae70:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ae72:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ae74:	e841 2300 	strex	r3, r2, [r1]
 800ae78:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ae7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d1e4      	bne.n	800ae4a <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	69db      	ldr	r3, [r3, #28]
 800ae86:	f003 0310 	and.w	r3, r3, #16
 800ae8a:	2b10      	cmp	r3, #16
 800ae8c:	d103      	bne.n	800ae96 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	2210      	movs	r2, #16
 800ae94:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ae9c:	4619      	mov	r1, r3
 800ae9e:	6878      	ldr	r0, [r7, #4]
 800aea0:	f7fe fb08 	bl	80094b4 <HAL_UARTEx_RxEventCallback>
 800aea4:	e002      	b.n	800aeac <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800aea6:	6878      	ldr	r0, [r7, #4]
 800aea8:	f7f6 fb38 	bl	800151c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800aeac:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d006      	beq.n	800aec2 <UART_RxISR_8BIT_FIFOEN+0x2a6>
 800aeb4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800aeb8:	f003 0320 	and.w	r3, r3, #32
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	f47f aed1 	bne.w	800ac64 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800aec8:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800aecc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d049      	beq.n	800af68 <UART_RxISR_8BIT_FIFOEN+0x34c>
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800aeda:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800aede:	429a      	cmp	r2, r3
 800aee0:	d242      	bcs.n	800af68 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	3308      	adds	r3, #8
 800aee8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aeea:	6a3b      	ldr	r3, [r7, #32]
 800aeec:	e853 3f00 	ldrex	r3, [r3]
 800aef0:	61fb      	str	r3, [r7, #28]
   return(result);
 800aef2:	69fb      	ldr	r3, [r7, #28]
 800aef4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800aef8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	3308      	adds	r3, #8
 800af02:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800af06:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800af08:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af0a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800af0c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800af0e:	e841 2300 	strex	r3, r2, [r1]
 800af12:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800af14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af16:	2b00      	cmp	r3, #0
 800af18:	d1e3      	bne.n	800aee2 <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	4a16      	ldr	r2, [pc, #88]	@ (800af78 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800af1e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	e853 3f00 	ldrex	r3, [r3]
 800af2c:	60bb      	str	r3, [r7, #8]
   return(result);
 800af2e:	68bb      	ldr	r3, [r7, #8]
 800af30:	f043 0320 	orr.w	r3, r3, #32
 800af34:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	461a      	mov	r2, r3
 800af3e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800af42:	61bb      	str	r3, [r7, #24]
 800af44:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af46:	6979      	ldr	r1, [r7, #20]
 800af48:	69ba      	ldr	r2, [r7, #24]
 800af4a:	e841 2300 	strex	r3, r2, [r1]
 800af4e:	613b      	str	r3, [r7, #16]
   return(result);
 800af50:	693b      	ldr	r3, [r7, #16]
 800af52:	2b00      	cmp	r3, #0
 800af54:	d1e4      	bne.n	800af20 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800af56:	e007      	b.n	800af68 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	699a      	ldr	r2, [r3, #24]
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	f042 0208 	orr.w	r2, r2, #8
 800af66:	619a      	str	r2, [r3, #24]
}
 800af68:	bf00      	nop
 800af6a:	37b0      	adds	r7, #176	@ 0xb0
 800af6c:	46bd      	mov	sp, r7
 800af6e:	bd80      	pop	{r7, pc}
 800af70:	effffffe 	.word	0xeffffffe
 800af74:	58000c00 	.word	0x58000c00
 800af78:	0800a8ad 	.word	0x0800a8ad

0800af7c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800af7c:	b580      	push	{r7, lr}
 800af7e:	b0ae      	sub	sp, #184	@ 0xb8
 800af80:	af00      	add	r7, sp, #0
 800af82:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800af8a:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	69db      	ldr	r3, [r3, #28]
 800af94:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	689b      	ldr	r3, [r3, #8]
 800afa8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800afb2:	2b22      	cmp	r3, #34	@ 0x22
 800afb4:	f040 8184 	bne.w	800b2c0 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800afbe:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800afc2:	e127      	b.n	800b214 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800afca:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800afd2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800afd6:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800afda:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800afde:	4013      	ands	r3, r2
 800afe0:	b29a      	uxth	r2, r3
 800afe2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800afe6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800afec:	1c9a      	adds	r2, r3, #2
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800aff8:	b29b      	uxth	r3, r3
 800affa:	3b01      	subs	r3, #1
 800affc:	b29a      	uxth	r2, r3
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	69db      	ldr	r3, [r3, #28]
 800b00a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800b00e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b012:	f003 0307 	and.w	r3, r3, #7
 800b016:	2b00      	cmp	r3, #0
 800b018:	d053      	beq.n	800b0c2 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b01a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b01e:	f003 0301 	and.w	r3, r3, #1
 800b022:	2b00      	cmp	r3, #0
 800b024:	d011      	beq.n	800b04a <UART_RxISR_16BIT_FIFOEN+0xce>
 800b026:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b02a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d00b      	beq.n	800b04a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	2201      	movs	r2, #1
 800b038:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b040:	f043 0201 	orr.w	r2, r3, #1
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b04a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b04e:	f003 0302 	and.w	r3, r3, #2
 800b052:	2b00      	cmp	r3, #0
 800b054:	d011      	beq.n	800b07a <UART_RxISR_16BIT_FIFOEN+0xfe>
 800b056:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b05a:	f003 0301 	and.w	r3, r3, #1
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d00b      	beq.n	800b07a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	2202      	movs	r2, #2
 800b068:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b070:	f043 0204 	orr.w	r2, r3, #4
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b07a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b07e:	f003 0304 	and.w	r3, r3, #4
 800b082:	2b00      	cmp	r3, #0
 800b084:	d011      	beq.n	800b0aa <UART_RxISR_16BIT_FIFOEN+0x12e>
 800b086:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b08a:	f003 0301 	and.w	r3, r3, #1
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d00b      	beq.n	800b0aa <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	2204      	movs	r2, #4
 800b098:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b0a0:	f043 0202 	orr.w	r2, r3, #2
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d006      	beq.n	800b0c2 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b0b4:	6878      	ldr	r0, [r7, #4]
 800b0b6:	f7fe f9f3 	bl	80094a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	2200      	movs	r2, #0
 800b0be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b0c8:	b29b      	uxth	r3, r3
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	f040 80a2 	bne.w	800b214 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0d6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b0d8:	e853 3f00 	ldrex	r3, [r3]
 800b0dc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800b0de:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b0e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b0e4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	461a      	mov	r2, r3
 800b0ee:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b0f2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b0f6:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0f8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800b0fa:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800b0fe:	e841 2300 	strex	r3, r2, [r1]
 800b102:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800b104:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b106:	2b00      	cmp	r3, #0
 800b108:	d1e2      	bne.n	800b0d0 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	3308      	adds	r3, #8
 800b110:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b112:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b114:	e853 3f00 	ldrex	r3, [r3]
 800b118:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800b11a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800b11c:	4b6e      	ldr	r3, [pc, #440]	@ (800b2d8 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 800b11e:	4013      	ands	r3, r2
 800b120:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	3308      	adds	r3, #8
 800b12a:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800b12e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800b130:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b132:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800b134:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b136:	e841 2300 	strex	r3, r2, [r1]
 800b13a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800b13c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d1e3      	bne.n	800b10a <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	2220      	movs	r2, #32
 800b146:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	2200      	movs	r2, #0
 800b14e:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	2200      	movs	r2, #0
 800b154:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	4a60      	ldr	r2, [pc, #384]	@ (800b2dc <UART_RxISR_16BIT_FIFOEN+0x360>)
 800b15c:	4293      	cmp	r3, r2
 800b15e:	d021      	beq.n	800b1a4 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	685b      	ldr	r3, [r3, #4]
 800b166:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d01a      	beq.n	800b1a4 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b174:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b176:	e853 3f00 	ldrex	r3, [r3]
 800b17a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b17c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b17e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b182:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	461a      	mov	r2, r3
 800b18c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800b190:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b192:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b194:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b196:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b198:	e841 2300 	strex	r3, r2, [r1]
 800b19c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b19e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d1e4      	bne.n	800b16e <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b1a8:	2b01      	cmp	r3, #1
 800b1aa:	d130      	bne.n	800b20e <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	2200      	movs	r2, #0
 800b1b0:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1ba:	e853 3f00 	ldrex	r3, [r3]
 800b1be:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b1c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b1c2:	f023 0310 	bic.w	r3, r3, #16
 800b1c6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	461a      	mov	r2, r3
 800b1d0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800b1d4:	647b      	str	r3, [r7, #68]	@ 0x44
 800b1d6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1d8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b1da:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b1dc:	e841 2300 	strex	r3, r2, [r1]
 800b1e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b1e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d1e4      	bne.n	800b1b2 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	69db      	ldr	r3, [r3, #28]
 800b1ee:	f003 0310 	and.w	r3, r3, #16
 800b1f2:	2b10      	cmp	r3, #16
 800b1f4:	d103      	bne.n	800b1fe <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	2210      	movs	r2, #16
 800b1fc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b204:	4619      	mov	r1, r3
 800b206:	6878      	ldr	r0, [r7, #4]
 800b208:	f7fe f954 	bl	80094b4 <HAL_UARTEx_RxEventCallback>
 800b20c:	e002      	b.n	800b214 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800b20e:	6878      	ldr	r0, [r7, #4]
 800b210:	f7f6 f984 	bl	800151c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b214:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d006      	beq.n	800b22a <UART_RxISR_16BIT_FIFOEN+0x2ae>
 800b21c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b220:	f003 0320 	and.w	r3, r3, #32
 800b224:	2b00      	cmp	r3, #0
 800b226:	f47f aecd 	bne.w	800afc4 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b230:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800b234:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d049      	beq.n	800b2d0 <UART_RxISR_16BIT_FIFOEN+0x354>
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800b242:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800b246:	429a      	cmp	r2, r3
 800b248:	d242      	bcs.n	800b2d0 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	3308      	adds	r3, #8
 800b250:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b254:	e853 3f00 	ldrex	r3, [r3]
 800b258:	623b      	str	r3, [r7, #32]
   return(result);
 800b25a:	6a3b      	ldr	r3, [r7, #32]
 800b25c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b260:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	3308      	adds	r3, #8
 800b26a:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800b26e:	633a      	str	r2, [r7, #48]	@ 0x30
 800b270:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b272:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b274:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b276:	e841 2300 	strex	r3, r2, [r1]
 800b27a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b27c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d1e3      	bne.n	800b24a <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	4a16      	ldr	r2, [pc, #88]	@ (800b2e0 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800b286:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b28e:	693b      	ldr	r3, [r7, #16]
 800b290:	e853 3f00 	ldrex	r3, [r3]
 800b294:	60fb      	str	r3, [r7, #12]
   return(result);
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	f043 0320 	orr.w	r3, r3, #32
 800b29c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	461a      	mov	r2, r3
 800b2a6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b2aa:	61fb      	str	r3, [r7, #28]
 800b2ac:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2ae:	69b9      	ldr	r1, [r7, #24]
 800b2b0:	69fa      	ldr	r2, [r7, #28]
 800b2b2:	e841 2300 	strex	r3, r2, [r1]
 800b2b6:	617b      	str	r3, [r7, #20]
   return(result);
 800b2b8:	697b      	ldr	r3, [r7, #20]
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d1e4      	bne.n	800b288 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b2be:	e007      	b.n	800b2d0 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	699a      	ldr	r2, [r3, #24]
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	f042 0208 	orr.w	r2, r2, #8
 800b2ce:	619a      	str	r2, [r3, #24]
}
 800b2d0:	bf00      	nop
 800b2d2:	37b8      	adds	r7, #184	@ 0xb8
 800b2d4:	46bd      	mov	sp, r7
 800b2d6:	bd80      	pop	{r7, pc}
 800b2d8:	effffffe 	.word	0xeffffffe
 800b2dc:	58000c00 	.word	0x58000c00
 800b2e0:	0800aa65 	.word	0x0800aa65

0800b2e4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b2e4:	b480      	push	{r7}
 800b2e6:	b083      	sub	sp, #12
 800b2e8:	af00      	add	r7, sp, #0
 800b2ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b2ec:	bf00      	nop
 800b2ee:	370c      	adds	r7, #12
 800b2f0:	46bd      	mov	sp, r7
 800b2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f6:	4770      	bx	lr

0800b2f8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b2f8:	b480      	push	{r7}
 800b2fa:	b083      	sub	sp, #12
 800b2fc:	af00      	add	r7, sp, #0
 800b2fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b300:	bf00      	nop
 800b302:	370c      	adds	r7, #12
 800b304:	46bd      	mov	sp, r7
 800b306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b30a:	4770      	bx	lr

0800b30c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b30c:	b480      	push	{r7}
 800b30e:	b083      	sub	sp, #12
 800b310:	af00      	add	r7, sp, #0
 800b312:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b314:	bf00      	nop
 800b316:	370c      	adds	r7, #12
 800b318:	46bd      	mov	sp, r7
 800b31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b31e:	4770      	bx	lr

0800b320 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b320:	b480      	push	{r7}
 800b322:	b085      	sub	sp, #20
 800b324:	af00      	add	r7, sp, #0
 800b326:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b32e:	2b01      	cmp	r3, #1
 800b330:	d101      	bne.n	800b336 <HAL_UARTEx_DisableFifoMode+0x16>
 800b332:	2302      	movs	r3, #2
 800b334:	e027      	b.n	800b386 <HAL_UARTEx_DisableFifoMode+0x66>
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	2201      	movs	r2, #1
 800b33a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	2224      	movs	r2, #36	@ 0x24
 800b342:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	681a      	ldr	r2, [r3, #0]
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	f022 0201 	bic.w	r2, r2, #1
 800b35c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b364:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	2200      	movs	r2, #0
 800b36a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	68fa      	ldr	r2, [r7, #12]
 800b372:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	2220      	movs	r2, #32
 800b378:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	2200      	movs	r2, #0
 800b380:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b384:	2300      	movs	r3, #0
}
 800b386:	4618      	mov	r0, r3
 800b388:	3714      	adds	r7, #20
 800b38a:	46bd      	mov	sp, r7
 800b38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b390:	4770      	bx	lr

0800b392 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b392:	b580      	push	{r7, lr}
 800b394:	b084      	sub	sp, #16
 800b396:	af00      	add	r7, sp, #0
 800b398:	6078      	str	r0, [r7, #4]
 800b39a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b3a2:	2b01      	cmp	r3, #1
 800b3a4:	d101      	bne.n	800b3aa <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b3a6:	2302      	movs	r3, #2
 800b3a8:	e02d      	b.n	800b406 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	2201      	movs	r2, #1
 800b3ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	2224      	movs	r2, #36	@ 0x24
 800b3b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	681a      	ldr	r2, [r3, #0]
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	f022 0201 	bic.w	r2, r2, #1
 800b3d0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	689b      	ldr	r3, [r3, #8]
 800b3d8:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	683a      	ldr	r2, [r7, #0]
 800b3e2:	430a      	orrs	r2, r1
 800b3e4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b3e6:	6878      	ldr	r0, [r7, #4]
 800b3e8:	f000 f850 	bl	800b48c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	68fa      	ldr	r2, [r7, #12]
 800b3f2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	2220      	movs	r2, #32
 800b3f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	2200      	movs	r2, #0
 800b400:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b404:	2300      	movs	r3, #0
}
 800b406:	4618      	mov	r0, r3
 800b408:	3710      	adds	r7, #16
 800b40a:	46bd      	mov	sp, r7
 800b40c:	bd80      	pop	{r7, pc}

0800b40e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b40e:	b580      	push	{r7, lr}
 800b410:	b084      	sub	sp, #16
 800b412:	af00      	add	r7, sp, #0
 800b414:	6078      	str	r0, [r7, #4]
 800b416:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b41e:	2b01      	cmp	r3, #1
 800b420:	d101      	bne.n	800b426 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b422:	2302      	movs	r3, #2
 800b424:	e02d      	b.n	800b482 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	2201      	movs	r2, #1
 800b42a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	2224      	movs	r2, #36	@ 0x24
 800b432:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	681a      	ldr	r2, [r3, #0]
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	f022 0201 	bic.w	r2, r2, #1
 800b44c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	689b      	ldr	r3, [r3, #8]
 800b454:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	683a      	ldr	r2, [r7, #0]
 800b45e:	430a      	orrs	r2, r1
 800b460:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b462:	6878      	ldr	r0, [r7, #4]
 800b464:	f000 f812 	bl	800b48c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	68fa      	ldr	r2, [r7, #12]
 800b46e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	2220      	movs	r2, #32
 800b474:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	2200      	movs	r2, #0
 800b47c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b480:	2300      	movs	r3, #0
}
 800b482:	4618      	mov	r0, r3
 800b484:	3710      	adds	r7, #16
 800b486:	46bd      	mov	sp, r7
 800b488:	bd80      	pop	{r7, pc}
	...

0800b48c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b48c:	b480      	push	{r7}
 800b48e:	b085      	sub	sp, #20
 800b490:	af00      	add	r7, sp, #0
 800b492:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d108      	bne.n	800b4ae <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	2201      	movs	r2, #1
 800b4a0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	2201      	movs	r2, #1
 800b4a8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b4ac:	e031      	b.n	800b512 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b4ae:	2310      	movs	r3, #16
 800b4b0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b4b2:	2310      	movs	r3, #16
 800b4b4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	689b      	ldr	r3, [r3, #8]
 800b4bc:	0e5b      	lsrs	r3, r3, #25
 800b4be:	b2db      	uxtb	r3, r3
 800b4c0:	f003 0307 	and.w	r3, r3, #7
 800b4c4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	689b      	ldr	r3, [r3, #8]
 800b4cc:	0f5b      	lsrs	r3, r3, #29
 800b4ce:	b2db      	uxtb	r3, r3
 800b4d0:	f003 0307 	and.w	r3, r3, #7
 800b4d4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b4d6:	7bbb      	ldrb	r3, [r7, #14]
 800b4d8:	7b3a      	ldrb	r2, [r7, #12]
 800b4da:	4911      	ldr	r1, [pc, #68]	@ (800b520 <UARTEx_SetNbDataToProcess+0x94>)
 800b4dc:	5c8a      	ldrb	r2, [r1, r2]
 800b4de:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b4e2:	7b3a      	ldrb	r2, [r7, #12]
 800b4e4:	490f      	ldr	r1, [pc, #60]	@ (800b524 <UARTEx_SetNbDataToProcess+0x98>)
 800b4e6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b4e8:	fb93 f3f2 	sdiv	r3, r3, r2
 800b4ec:	b29a      	uxth	r2, r3
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b4f4:	7bfb      	ldrb	r3, [r7, #15]
 800b4f6:	7b7a      	ldrb	r2, [r7, #13]
 800b4f8:	4909      	ldr	r1, [pc, #36]	@ (800b520 <UARTEx_SetNbDataToProcess+0x94>)
 800b4fa:	5c8a      	ldrb	r2, [r1, r2]
 800b4fc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b500:	7b7a      	ldrb	r2, [r7, #13]
 800b502:	4908      	ldr	r1, [pc, #32]	@ (800b524 <UARTEx_SetNbDataToProcess+0x98>)
 800b504:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b506:	fb93 f3f2 	sdiv	r3, r3, r2
 800b50a:	b29a      	uxth	r2, r3
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800b512:	bf00      	nop
 800b514:	3714      	adds	r7, #20
 800b516:	46bd      	mov	sp, r7
 800b518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b51c:	4770      	bx	lr
 800b51e:	bf00      	nop
 800b520:	08012690 	.word	0x08012690
 800b524:	08012698 	.word	0x08012698

0800b528 <Data_Analyse>:
/**
 * @brief 数据解析函数  如更换MCU平台或更换软件库，只需将串口接收到的值传入该函数即可解析
 * @param  rec 串口接收到的字节数据
 */
void Data_Analyse(uint8_t rec)
{
 800b528:	b480      	push	{r7}
 800b52a:	b083      	sub	sp, #12
 800b52c:	af00      	add	r7, sp, #0
 800b52e:	4603      	mov	r3, r0
 800b530:	71fb      	strb	r3, [r7, #7]
		float ActVal[6];
	} posture;
	static uint8_t count = 0;
	static uint8_t i = 0;

	ch = rec;
 800b532:	4a48      	ldr	r2, [pc, #288]	@ (800b654 <Data_Analyse+0x12c>)
 800b534:	79fb      	ldrb	r3, [r7, #7]
 800b536:	7013      	strb	r3, [r2, #0]
//	HAL_UART_Transmit(&huart10, &ch, 1, 0xff);
//	HAL_UART_Transmit(&huart10, (uint8_t*) ch, 1, 0xff);
	switch (count)
 800b538:	4b47      	ldr	r3, [pc, #284]	@ (800b658 <Data_Analyse+0x130>)
 800b53a:	781b      	ldrb	r3, [r3, #0]
 800b53c:	2b04      	cmp	r3, #4
 800b53e:	d87c      	bhi.n	800b63a <Data_Analyse+0x112>
 800b540:	a201      	add	r2, pc, #4	@ (adr r2, 800b548 <Data_Analyse+0x20>)
 800b542:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b546:	bf00      	nop
 800b548:	0800b55d 	.word	0x0800b55d
 800b54c:	0800b57b 	.word	0x0800b57b
 800b550:	0800b5a7 	.word	0x0800b5a7
 800b554:	0800b5dd 	.word	0x0800b5dd
 800b558:	0800b5fb 	.word	0x0800b5fb
	{
	case 0:
		if (ch == 0x0d)
 800b55c:	4b3d      	ldr	r3, [pc, #244]	@ (800b654 <Data_Analyse+0x12c>)
 800b55e:	781b      	ldrb	r3, [r3, #0]
 800b560:	2b0d      	cmp	r3, #13
 800b562:	d106      	bne.n	800b572 <Data_Analyse+0x4a>
			count++;
 800b564:	4b3c      	ldr	r3, [pc, #240]	@ (800b658 <Data_Analyse+0x130>)
 800b566:	781b      	ldrb	r3, [r3, #0]
 800b568:	3301      	adds	r3, #1
 800b56a:	b2da      	uxtb	r2, r3
 800b56c:	4b3a      	ldr	r3, [pc, #232]	@ (800b658 <Data_Analyse+0x130>)
 800b56e:	701a      	strb	r2, [r3, #0]
		else
			count = 0;
		break;
 800b570:	e06a      	b.n	800b648 <Data_Analyse+0x120>
			count = 0;
 800b572:	4b39      	ldr	r3, [pc, #228]	@ (800b658 <Data_Analyse+0x130>)
 800b574:	2200      	movs	r2, #0
 800b576:	701a      	strb	r2, [r3, #0]
		break;
 800b578:	e066      	b.n	800b648 <Data_Analyse+0x120>
	case 1:
		if (ch == 0x0a)
 800b57a:	4b36      	ldr	r3, [pc, #216]	@ (800b654 <Data_Analyse+0x12c>)
 800b57c:	781b      	ldrb	r3, [r3, #0]
 800b57e:	2b0a      	cmp	r3, #10
 800b580:	d109      	bne.n	800b596 <Data_Analyse+0x6e>
		{
			i = 0;
 800b582:	4b36      	ldr	r3, [pc, #216]	@ (800b65c <Data_Analyse+0x134>)
 800b584:	2200      	movs	r2, #0
 800b586:	701a      	strb	r2, [r3, #0]
			count++;
 800b588:	4b33      	ldr	r3, [pc, #204]	@ (800b658 <Data_Analyse+0x130>)
 800b58a:	781b      	ldrb	r3, [r3, #0]
 800b58c:	3301      	adds	r3, #1
 800b58e:	b2da      	uxtb	r2, r3
 800b590:	4b31      	ldr	r3, [pc, #196]	@ (800b658 <Data_Analyse+0x130>)
 800b592:	701a      	strb	r2, [r3, #0]
		}
		else if (ch == 0x0d)
			;
		else
			count = 0;
		break;
 800b594:	e055      	b.n	800b642 <Data_Analyse+0x11a>
		else if (ch == 0x0d)
 800b596:	4b2f      	ldr	r3, [pc, #188]	@ (800b654 <Data_Analyse+0x12c>)
 800b598:	781b      	ldrb	r3, [r3, #0]
 800b59a:	2b0d      	cmp	r3, #13
 800b59c:	d051      	beq.n	800b642 <Data_Analyse+0x11a>
			count = 0;
 800b59e:	4b2e      	ldr	r3, [pc, #184]	@ (800b658 <Data_Analyse+0x130>)
 800b5a0:	2200      	movs	r2, #0
 800b5a2:	701a      	strb	r2, [r3, #0]
		break;
 800b5a4:	e04d      	b.n	800b642 <Data_Analyse+0x11a>
	case 2:
		posture.date[i] = ch;
 800b5a6:	4b2d      	ldr	r3, [pc, #180]	@ (800b65c <Data_Analyse+0x134>)
 800b5a8:	781b      	ldrb	r3, [r3, #0]
 800b5aa:	461a      	mov	r2, r3
 800b5ac:	4b29      	ldr	r3, [pc, #164]	@ (800b654 <Data_Analyse+0x12c>)
 800b5ae:	7819      	ldrb	r1, [r3, #0]
 800b5b0:	4b2b      	ldr	r3, [pc, #172]	@ (800b660 <Data_Analyse+0x138>)
 800b5b2:	5499      	strb	r1, [r3, r2]
		i++;
 800b5b4:	4b29      	ldr	r3, [pc, #164]	@ (800b65c <Data_Analyse+0x134>)
 800b5b6:	781b      	ldrb	r3, [r3, #0]
 800b5b8:	3301      	adds	r3, #1
 800b5ba:	b2da      	uxtb	r2, r3
 800b5bc:	4b27      	ldr	r3, [pc, #156]	@ (800b65c <Data_Analyse+0x134>)
 800b5be:	701a      	strb	r2, [r3, #0]
		if (i >= 24)
 800b5c0:	4b26      	ldr	r3, [pc, #152]	@ (800b65c <Data_Analyse+0x134>)
 800b5c2:	781b      	ldrb	r3, [r3, #0]
 800b5c4:	2b17      	cmp	r3, #23
 800b5c6:	d93e      	bls.n	800b646 <Data_Analyse+0x11e>
		{
			i = 0;
 800b5c8:	4b24      	ldr	r3, [pc, #144]	@ (800b65c <Data_Analyse+0x134>)
 800b5ca:	2200      	movs	r2, #0
 800b5cc:	701a      	strb	r2, [r3, #0]
			count++;
 800b5ce:	4b22      	ldr	r3, [pc, #136]	@ (800b658 <Data_Analyse+0x130>)
 800b5d0:	781b      	ldrb	r3, [r3, #0]
 800b5d2:	3301      	adds	r3, #1
 800b5d4:	b2da      	uxtb	r2, r3
 800b5d6:	4b20      	ldr	r3, [pc, #128]	@ (800b658 <Data_Analyse+0x130>)
 800b5d8:	701a      	strb	r2, [r3, #0]
		}
		break;
 800b5da:	e034      	b.n	800b646 <Data_Analyse+0x11e>
	case 3:
		if (ch == 0x0a)
 800b5dc:	4b1d      	ldr	r3, [pc, #116]	@ (800b654 <Data_Analyse+0x12c>)
 800b5de:	781b      	ldrb	r3, [r3, #0]
 800b5e0:	2b0a      	cmp	r3, #10
 800b5e2:	d106      	bne.n	800b5f2 <Data_Analyse+0xca>
			count++;
 800b5e4:	4b1c      	ldr	r3, [pc, #112]	@ (800b658 <Data_Analyse+0x130>)
 800b5e6:	781b      	ldrb	r3, [r3, #0]
 800b5e8:	3301      	adds	r3, #1
 800b5ea:	b2da      	uxtb	r2, r3
 800b5ec:	4b1a      	ldr	r3, [pc, #104]	@ (800b658 <Data_Analyse+0x130>)
 800b5ee:	701a      	strb	r2, [r3, #0]
		else
			count = 0;
		break;
 800b5f0:	e02a      	b.n	800b648 <Data_Analyse+0x120>
			count = 0;
 800b5f2:	4b19      	ldr	r3, [pc, #100]	@ (800b658 <Data_Analyse+0x130>)
 800b5f4:	2200      	movs	r2, #0
 800b5f6:	701a      	strb	r2, [r3, #0]
		break;
 800b5f8:	e026      	b.n	800b648 <Data_Analyse+0x120>
	case 4:
		if (ch == 0x0d)
 800b5fa:	4b16      	ldr	r3, [pc, #88]	@ (800b654 <Data_Analyse+0x12c>)
 800b5fc:	781b      	ldrb	r3, [r3, #0]
 800b5fe:	2b0d      	cmp	r3, #13
 800b600:	d117      	bne.n	800b632 <Data_Analyse+0x10a>
		{
			zangle = posture.ActVal[0];
 800b602:	4b17      	ldr	r3, [pc, #92]	@ (800b660 <Data_Analyse+0x138>)
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	4a17      	ldr	r2, [pc, #92]	@ (800b664 <Data_Analyse+0x13c>)
 800b608:	6013      	str	r3, [r2, #0]
			xangle = posture.ActVal[1];
 800b60a:	4b15      	ldr	r3, [pc, #84]	@ (800b660 <Data_Analyse+0x138>)
 800b60c:	685b      	ldr	r3, [r3, #4]
 800b60e:	4a16      	ldr	r2, [pc, #88]	@ (800b668 <Data_Analyse+0x140>)
 800b610:	6013      	str	r3, [r2, #0]
			yangle = posture.ActVal[2];
 800b612:	4b13      	ldr	r3, [pc, #76]	@ (800b660 <Data_Analyse+0x138>)
 800b614:	689b      	ldr	r3, [r3, #8]
 800b616:	4a15      	ldr	r2, [pc, #84]	@ (800b66c <Data_Analyse+0x144>)
 800b618:	6013      	str	r3, [r2, #0]
			pos_x = posture.ActVal[3];
 800b61a:	4b11      	ldr	r3, [pc, #68]	@ (800b660 <Data_Analyse+0x138>)
 800b61c:	68db      	ldr	r3, [r3, #12]
 800b61e:	4a14      	ldr	r2, [pc, #80]	@ (800b670 <Data_Analyse+0x148>)
 800b620:	6013      	str	r3, [r2, #0]
			pos_y = posture.ActVal[4];
 800b622:	4b0f      	ldr	r3, [pc, #60]	@ (800b660 <Data_Analyse+0x138>)
 800b624:	691b      	ldr	r3, [r3, #16]
 800b626:	4a13      	ldr	r2, [pc, #76]	@ (800b674 <Data_Analyse+0x14c>)
 800b628:	6013      	str	r3, [r2, #0]
			w_z = posture.ActVal[5];
 800b62a:	4b0d      	ldr	r3, [pc, #52]	@ (800b660 <Data_Analyse+0x138>)
 800b62c:	695b      	ldr	r3, [r3, #20]
 800b62e:	4a12      	ldr	r2, [pc, #72]	@ (800b678 <Data_Analyse+0x150>)
 800b630:	6013      	str	r3, [r2, #0]
		}
		count = 0;
 800b632:	4b09      	ldr	r3, [pc, #36]	@ (800b658 <Data_Analyse+0x130>)
 800b634:	2200      	movs	r2, #0
 800b636:	701a      	strb	r2, [r3, #0]
		break;
 800b638:	e006      	b.n	800b648 <Data_Analyse+0x120>
	default:
		count = 0;
 800b63a:	4b07      	ldr	r3, [pc, #28]	@ (800b658 <Data_Analyse+0x130>)
 800b63c:	2200      	movs	r2, #0
 800b63e:	701a      	strb	r2, [r3, #0]
		break;
 800b640:	e002      	b.n	800b648 <Data_Analyse+0x120>
		break;
 800b642:	bf00      	nop
 800b644:	e000      	b.n	800b648 <Data_Analyse+0x120>
		break;
 800b646:	bf00      	nop
	}
}
 800b648:	bf00      	nop
 800b64a:	370c      	adds	r7, #12
 800b64c:	46bd      	mov	sp, r7
 800b64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b652:	4770      	bx	lr
 800b654:	24000b08 	.word	0x24000b08
 800b658:	24000b09 	.word	0x24000b09
 800b65c:	24000b0a 	.word	0x24000b0a
 800b660:	24000b0c 	.word	0x24000b0c
 800b664:	24000af8 	.word	0x24000af8
 800b668:	24000afc 	.word	0x24000afc
 800b66c:	24000b00 	.word	0x24000b00
 800b670:	24000af0 	.word	0x24000af0
 800b674:	24000af4 	.word	0x24000af4
 800b678:	24000b04 	.word	0x24000b04

0800b67c <Move_Arm>:
extern float tx_target;
extern float ty_target;
extern bool TX2_ENABLE;
//控制单个舵机运动
//参数：sevoID:舵机ID，Position:转动角度（这里以270°为例）,Time:转动时间
void Move_Arm(uint8_t servoID, int16_t Position, uint16_t Time) {
 800b67c:	b580      	push	{r7, lr}
 800b67e:	b086      	sub	sp, #24
 800b680:	af00      	add	r7, sp, #0
 800b682:	4603      	mov	r3, r0
 800b684:	71fb      	strb	r3, [r7, #7]
 800b686:	460b      	mov	r3, r1
 800b688:	80bb      	strh	r3, [r7, #4]
 800b68a:	4613      	mov	r3, r2
 800b68c:	807b      	strh	r3, [r7, #2]
	uint8_t TxBuf[11];
	if (servoID > 31 || !(Time > 0) || Position > 32767) {
 800b68e:	79fb      	ldrb	r3, [r7, #7]
 800b690:	2b1f      	cmp	r3, #31
 800b692:	d82b      	bhi.n	800b6ec <Move_Arm+0x70>
 800b694:	887b      	ldrh	r3, [r7, #2]
 800b696:	2b00      	cmp	r3, #0
 800b698:	d028      	beq.n	800b6ec <Move_Arm+0x70>
		return;
	}
	TxBuf[0] = FRAME_HEADER;
 800b69a:	2355      	movs	r3, #85	@ 0x55
 800b69c:	733b      	strb	r3, [r7, #12]
	TxBuf[1] = FRAME_HEADER;
 800b69e:	2355      	movs	r3, #85	@ 0x55
 800b6a0:	737b      	strb	r3, [r7, #13]
	TxBuf[2] = 8;
 800b6a2:	2308      	movs	r3, #8
 800b6a4:	73bb      	strb	r3, [r7, #14]
	TxBuf[3] = CMD_SERVO_MOVE;
 800b6a6:	2303      	movs	r3, #3
 800b6a8:	73fb      	strb	r3, [r7, #15]
	TxBuf[4] = 1;
 800b6aa:	2301      	movs	r3, #1
 800b6ac:	743b      	strb	r3, [r7, #16]
	TxBuf[5] = (uint8_t) Time;
 800b6ae:	887b      	ldrh	r3, [r7, #2]
 800b6b0:	b2db      	uxtb	r3, r3
 800b6b2:	747b      	strb	r3, [r7, #17]
	TxBuf[6] = (uint8_t) (Time >> 8);
 800b6b4:	887b      	ldrh	r3, [r7, #2]
 800b6b6:	0a1b      	lsrs	r3, r3, #8
 800b6b8:	b29b      	uxth	r3, r3
 800b6ba:	b2db      	uxtb	r3, r3
 800b6bc:	74bb      	strb	r3, [r7, #18]
	TxBuf[7] = servoID;
 800b6be:	79fb      	ldrb	r3, [r7, #7]
 800b6c0:	74fb      	strb	r3, [r7, #19]
	TxBuf[8] = (uint8_t) Position;
 800b6c2:	88bb      	ldrh	r3, [r7, #4]
 800b6c4:	b2db      	uxtb	r3, r3
 800b6c6:	753b      	strb	r3, [r7, #20]
	TxBuf[9] = (uint8_t) (Position >> 8);
 800b6c8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800b6cc:	121b      	asrs	r3, r3, #8
 800b6ce:	b21b      	sxth	r3, r3
 800b6d0:	b2db      	uxtb	r3, r3
 800b6d2:	757b      	strb	r3, [r7, #21]

	HAL_UART_Transmit(&jixiebi_usart, TxBuf, 10, 0xffff);
 800b6d4:	f107 010c 	add.w	r1, r7, #12
 800b6d8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b6dc:	220a      	movs	r2, #10
 800b6de:	4805      	ldr	r0, [pc, #20]	@ (800b6f4 <Move_Arm+0x78>)
 800b6e0:	f7fd f978 	bl	80089d4 <HAL_UART_Transmit>
	HAL_Delay(5);
 800b6e4:	2005      	movs	r0, #5
 800b6e6:	f7f7 fbe3 	bl	8002eb0 <HAL_Delay>
 800b6ea:	e000      	b.n	800b6ee <Move_Arm+0x72>
		return;
 800b6ec:	bf00      	nop

}
 800b6ee:	3718      	adds	r7, #24
 800b6f0:	46bd      	mov	sp, r7
 800b6f2:	bd80      	pop	{r7, pc}
 800b6f4:	2400064c 	.word	0x2400064c

0800b6f8 <Start>:

}

extern int QR_Flag;
void Start(void) //下降14000
{
 800b6f8:	b580      	push	{r7, lr}
 800b6fa:	b082      	sub	sp, #8
 800b6fc:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart10, (uint8_t*) "我来扫码辣\n", sizeof("我来扫码辣\n") - 1,0xffff);
 800b6fe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b702:	2210      	movs	r2, #16
 800b704:	492c      	ldr	r1, [pc, #176]	@ (800b7b8 <Start+0xc0>)
 800b706:	482d      	ldr	r0, [pc, #180]	@ (800b7bc <Start+0xc4>)
 800b708:	f7fd f964 	bl	80089d4 <HAL_UART_Transmit>
	bool temp = Move_Line(RunSpeed, RunAcc, 8250);
 800b70c:	f242 023a 	movw	r2, #8250	@ 0x203a
 800b710:	2178      	movs	r1, #120	@ 0x78
 800b712:	2064      	movs	r0, #100	@ 0x64
 800b714:	f000 fb68 	bl	800bde8 <Move_Line>
 800b718:	4603      	mov	r3, r0
 800b71a:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(50);
 800b71c:	2032      	movs	r0, #50	@ 0x32
 800b71e:	f7f7 fbc7 	bl	8002eb0 <HAL_Delay>
	while(temp != true)
 800b722:	e007      	b.n	800b734 <Start+0x3c>
	{
		temp = Move_Line(RunSpeed, RunAcc, 8250);
 800b724:	f242 023a 	movw	r2, #8250	@ 0x203a
 800b728:	2178      	movs	r1, #120	@ 0x78
 800b72a:	2064      	movs	r0, #100	@ 0x64
 800b72c:	f000 fb5c 	bl	800bde8 <Move_Line>
 800b730:	4603      	mov	r3, r0
 800b732:	71fb      	strb	r3, [r7, #7]
	while(temp != true)
 800b734:	79fb      	ldrb	r3, [r7, #7]
 800b736:	f083 0301 	eor.w	r3, r3, #1
 800b73a:	b2db      	uxtb	r3, r3
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d1f1      	bne.n	800b724 <Start+0x2c>
	}
	HAL_UART_Transmit(&huart10, (uint8_t*) "确认接收\n", sizeof("确认接收\n") - 1,0xffff);
 800b740:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b744:	220d      	movs	r2, #13
 800b746:	491e      	ldr	r1, [pc, #120]	@ (800b7c0 <Start+0xc8>)
 800b748:	481c      	ldr	r0, [pc, #112]	@ (800b7bc <Start+0xc4>)
 800b74a:	f7fd f943 	bl	80089d4 <HAL_UART_Transmit>
	//	先将爪子升起来，避免打到TX2或者物料盘
	Drop_Location_jiang(320, 160, 4000);
 800b74e:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 800b752:	21a0      	movs	r1, #160	@ 0xa0
 800b754:	f44f 70a0 	mov.w	r0, #320	@ 0x140
 800b758:	f000 fd7a 	bl	800c250 <Drop_Location_jiang>
	//	将舵机向外转动
	FT_Servo_Orth();
 800b75c:	f001 ff08 	bl	800d570 <FT_Servo_Orth>
	Move_Arm(1, 500, 300); //爪子张开
 800b760:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800b764:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800b768:	2001      	movs	r0, #1
 800b76a:	f7ff ff87 	bl	800b67c <Move_Arm>
	Move_Arm(6, 500, 300);
 800b76e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800b772:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800b776:	2006      	movs	r0, #6
 800b778:	f7ff ff80 	bl	800b67c <Move_Arm>
	Drop_Location_jiang(320, 160, 11000);
 800b77c:	f642 22f8 	movw	r2, #11000	@ 0x2af8
 800b780:	21a0      	movs	r1, #160	@ 0xa0
 800b782:	f44f 70a0 	mov.w	r0, #320	@ 0x140
 800b786:	f000 fd63 	bl	800c250 <Drop_Location_jiang>
	// 向前移动到扫码区域
	while (QR_Flag == false)
 800b78a:	bf00      	nop
 800b78c:	4b0d      	ldr	r3, [pc, #52]	@ (800b7c4 <Start+0xcc>)
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	2b00      	cmp	r3, #0
 800b792:	d0fb      	beq.n	800b78c <Start+0x94>
	{
		;  //等待扫码完成
	}
	// 扫码完成后将爪子提起来
	Move_Arm(6, 900, 300);
 800b794:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800b798:	f44f 7161 	mov.w	r1, #900	@ 0x384
 800b79c:	2006      	movs	r0, #6
 800b79e:	f7ff ff6d 	bl	800b67c <Move_Arm>
	Drop_Location_jiang(320, 160, 8600);
 800b7a2:	f242 1298 	movw	r2, #8600	@ 0x2198
 800b7a6:	21a0      	movs	r1, #160	@ 0xa0
 800b7a8:	f44f 70a0 	mov.w	r0, #320	@ 0x140
 800b7ac:	f000 fd50 	bl	800c250 <Drop_Location_jiang>
	
}
 800b7b0:	bf00      	nop
 800b7b2:	3708      	adds	r7, #8
 800b7b4:	46bd      	mov	sp, r7
 800b7b6:	bd80      	pop	{r7, pc}
 800b7b8:	08012414 	.word	0x08012414
 800b7bc:	24000a58 	.word	0x24000a58
 800b7c0:	08012428 	.word	0x08012428
 800b7c4:	24000020 	.word	0x24000020

0800b7c8 <Emm_V5_Pos_Control>:
 * @param    raF ：相位/绝对标志，false为相对运动，true为绝对值运动
 * @param    snF ：多机同步标志 ，false为不启用，true为启用
 * @retval   地址 + 功能码 + 命令状态 + 校验字节
 */
void Emm_V5_Pos_Control(uint8_t addr, uint8_t dir, uint16_t vel, uint8_t acc,
		uint32_t clk, bool raF, bool snF) {
 800b7c8:	b590      	push	{r4, r7, lr}
 800b7ca:	b083      	sub	sp, #12
 800b7cc:	af00      	add	r7, sp, #0
 800b7ce:	4604      	mov	r4, r0
 800b7d0:	4608      	mov	r0, r1
 800b7d2:	4611      	mov	r1, r2
 800b7d4:	461a      	mov	r2, r3
 800b7d6:	4623      	mov	r3, r4
 800b7d8:	71fb      	strb	r3, [r7, #7]
 800b7da:	4603      	mov	r3, r0
 800b7dc:	71bb      	strb	r3, [r7, #6]
 800b7de:	460b      	mov	r3, r1
 800b7e0:	80bb      	strh	r3, [r7, #4]
 800b7e2:	4613      	mov	r3, r2
 800b7e4:	70fb      	strb	r3, [r7, #3]

	// 装载命令
	cmd[0] = addr;                      // 地址
 800b7e6:	4a20      	ldr	r2, [pc, #128]	@ (800b868 <Emm_V5_Pos_Control+0xa0>)
 800b7e8:	79fb      	ldrb	r3, [r7, #7]
 800b7ea:	7013      	strb	r3, [r2, #0]
	cmd[1] = 0xFD;                      // 功能码
 800b7ec:	4b1e      	ldr	r3, [pc, #120]	@ (800b868 <Emm_V5_Pos_Control+0xa0>)
 800b7ee:	22fd      	movs	r2, #253	@ 0xfd
 800b7f0:	705a      	strb	r2, [r3, #1]
	cmd[2] = dir;                       // 方向
 800b7f2:	4a1d      	ldr	r2, [pc, #116]	@ (800b868 <Emm_V5_Pos_Control+0xa0>)
 800b7f4:	79bb      	ldrb	r3, [r7, #6]
 800b7f6:	7093      	strb	r3, [r2, #2]
	cmd[3] = (uint8_t) (vel >> 8);       // 速度(RPM)高8位字节
 800b7f8:	88bb      	ldrh	r3, [r7, #4]
 800b7fa:	0a1b      	lsrs	r3, r3, #8
 800b7fc:	b29b      	uxth	r3, r3
 800b7fe:	b2da      	uxtb	r2, r3
 800b800:	4b19      	ldr	r3, [pc, #100]	@ (800b868 <Emm_V5_Pos_Control+0xa0>)
 800b802:	70da      	strb	r2, [r3, #3]
	cmd[4] = (uint8_t) (vel >> 0);       // 速度(RPM)低8位字节
 800b804:	88bb      	ldrh	r3, [r7, #4]
 800b806:	b2da      	uxtb	r2, r3
 800b808:	4b17      	ldr	r3, [pc, #92]	@ (800b868 <Emm_V5_Pos_Control+0xa0>)
 800b80a:	711a      	strb	r2, [r3, #4]
	cmd[5] = acc;                       // 加速度，注意：0是直接启动
 800b80c:	4a16      	ldr	r2, [pc, #88]	@ (800b868 <Emm_V5_Pos_Control+0xa0>)
 800b80e:	78fb      	ldrb	r3, [r7, #3]
 800b810:	7153      	strb	r3, [r2, #5]
	cmd[6] = (uint8_t) (clk >> 24);      // 脉冲数(bit24 - bit31)
 800b812:	69bb      	ldr	r3, [r7, #24]
 800b814:	0e1b      	lsrs	r3, r3, #24
 800b816:	b2da      	uxtb	r2, r3
 800b818:	4b13      	ldr	r3, [pc, #76]	@ (800b868 <Emm_V5_Pos_Control+0xa0>)
 800b81a:	719a      	strb	r2, [r3, #6]
	cmd[7] = (uint8_t) (clk >> 16);      // 脉冲数(bit16 - bit23)
 800b81c:	69bb      	ldr	r3, [r7, #24]
 800b81e:	0c1b      	lsrs	r3, r3, #16
 800b820:	b2da      	uxtb	r2, r3
 800b822:	4b11      	ldr	r3, [pc, #68]	@ (800b868 <Emm_V5_Pos_Control+0xa0>)
 800b824:	71da      	strb	r2, [r3, #7]
	cmd[8] = (uint8_t) (clk >> 8);       // 脉冲数(bit8  - bit15)
 800b826:	69bb      	ldr	r3, [r7, #24]
 800b828:	0a1b      	lsrs	r3, r3, #8
 800b82a:	b2da      	uxtb	r2, r3
 800b82c:	4b0e      	ldr	r3, [pc, #56]	@ (800b868 <Emm_V5_Pos_Control+0xa0>)
 800b82e:	721a      	strb	r2, [r3, #8]
	cmd[9] = (uint8_t) (clk >> 0);       // 脉冲数(bit0  - bit7 )
 800b830:	69bb      	ldr	r3, [r7, #24]
 800b832:	b2da      	uxtb	r2, r3
 800b834:	4b0c      	ldr	r3, [pc, #48]	@ (800b868 <Emm_V5_Pos_Control+0xa0>)
 800b836:	725a      	strb	r2, [r3, #9]
	cmd[10] = raF;                       // 相位/绝对标志，false为相对运动，true为绝对值运动
 800b838:	7f3a      	ldrb	r2, [r7, #28]
 800b83a:	4b0b      	ldr	r3, [pc, #44]	@ (800b868 <Emm_V5_Pos_Control+0xa0>)
 800b83c:	729a      	strb	r2, [r3, #10]
	cmd[11] = snF;                       // 多机同步运动标志，false为不启用，true为启用
 800b83e:	f897 2020 	ldrb.w	r2, [r7, #32]
 800b842:	4b09      	ldr	r3, [pc, #36]	@ (800b868 <Emm_V5_Pos_Control+0xa0>)
 800b844:	72da      	strb	r2, [r3, #11]
	cmd[12] = 0x6B;                      // 校验字节
 800b846:	4b08      	ldr	r3, [pc, #32]	@ (800b868 <Emm_V5_Pos_Control+0xa0>)
 800b848:	226b      	movs	r2, #107	@ 0x6b
 800b84a:	731a      	strb	r2, [r3, #12]

	// 发送命令
	FDCAN_Send_Msg(cmd, 13);
 800b84c:	210d      	movs	r1, #13
 800b84e:	4806      	ldr	r0, [pc, #24]	@ (800b868 <Emm_V5_Pos_Control+0xa0>)
 800b850:	f7f5 fa22 	bl	8000c98 <FDCAN_Send_Msg>
	HAL_Delay(10);
 800b854:	200a      	movs	r0, #10
 800b856:	f7f7 fb2b 	bl	8002eb0 <HAL_Delay>
	Emm_mode = 1;
 800b85a:	4b04      	ldr	r3, [pc, #16]	@ (800b86c <Emm_V5_Pos_Control+0xa4>)
 800b85c:	2201      	movs	r2, #1
 800b85e:	701a      	strb	r2, [r3, #0]
}
 800b860:	bf00      	nop
 800b862:	370c      	adds	r7, #12
 800b864:	46bd      	mov	sp, r7
 800b866:	bd90      	pop	{r4, r7, pc}
 800b868:	24000b24 	.word	0x24000b24
 800b86c:	240002b8 	.word	0x240002b8

0800b870 <Emm_V5_Stop_Now>:
 * @brief    立即停止（所有控制模式都通用）
 * @param    addr  ：电机地址
 * @param    snF   ：多机同步标志，false为不启用，true为启用
 * @retval   地址 + 功能码 + 命令状态 + 校验字节
 */
void Emm_V5_Stop_Now(uint8_t addr, bool snF) {
 800b870:	b580      	push	{r7, lr}
 800b872:	b082      	sub	sp, #8
 800b874:	af00      	add	r7, sp, #0
 800b876:	4603      	mov	r3, r0
 800b878:	460a      	mov	r2, r1
 800b87a:	71fb      	strb	r3, [r7, #7]
 800b87c:	4613      	mov	r3, r2
 800b87e:	71bb      	strb	r3, [r7, #6]

	// 装载命令
	cmd[0] = addr;                       // 地址
 800b880:	4a0b      	ldr	r2, [pc, #44]	@ (800b8b0 <Emm_V5_Stop_Now+0x40>)
 800b882:	79fb      	ldrb	r3, [r7, #7]
 800b884:	7013      	strb	r3, [r2, #0]
	cmd[1] = 0xFE;                       // 功能码
 800b886:	4b0a      	ldr	r3, [pc, #40]	@ (800b8b0 <Emm_V5_Stop_Now+0x40>)
 800b888:	22fe      	movs	r2, #254	@ 0xfe
 800b88a:	705a      	strb	r2, [r3, #1]
	cmd[2] = 0x98;                       // 辅助码
 800b88c:	4b08      	ldr	r3, [pc, #32]	@ (800b8b0 <Emm_V5_Stop_Now+0x40>)
 800b88e:	2298      	movs	r2, #152	@ 0x98
 800b890:	709a      	strb	r2, [r3, #2]
	cmd[3] = snF;                        // 多机同步运动标志
 800b892:	79ba      	ldrb	r2, [r7, #6]
 800b894:	4b06      	ldr	r3, [pc, #24]	@ (800b8b0 <Emm_V5_Stop_Now+0x40>)
 800b896:	70da      	strb	r2, [r3, #3]
	cmd[4] = 0x6B;                       // 校验字节
 800b898:	4b05      	ldr	r3, [pc, #20]	@ (800b8b0 <Emm_V5_Stop_Now+0x40>)
 800b89a:	226b      	movs	r2, #107	@ 0x6b
 800b89c:	711a      	strb	r2, [r3, #4]

	// 发送命令
	FDCAN_Send_Msg(cmd, 5);
 800b89e:	2105      	movs	r1, #5
 800b8a0:	4803      	ldr	r0, [pc, #12]	@ (800b8b0 <Emm_V5_Stop_Now+0x40>)
 800b8a2:	f7f5 f9f9 	bl	8000c98 <FDCAN_Send_Msg>
}
 800b8a6:	bf00      	nop
 800b8a8:	3708      	adds	r7, #8
 800b8aa:	46bd      	mov	sp, r7
 800b8ac:	bd80      	pop	{r7, pc}
 800b8ae:	bf00      	nop
 800b8b0:	24000b24 	.word	0x24000b24

0800b8b4 <Emm_V5_Synchronous_motion>:
/**
 * @brief    多机同步运动
 * @param    addr  ：电机地址
 * @retval   地址 + 功能码 + 命令状态 + 校验字节
 */
void Emm_V5_Synchronous_motion(void) {
 800b8b4:	b580      	push	{r7, lr}
 800b8b6:	af00      	add	r7, sp, #0

	// 装载命令
	cmd[0] = 0x00;                       // 地址
 800b8b8:	4b0a      	ldr	r3, [pc, #40]	@ (800b8e4 <Emm_V5_Synchronous_motion+0x30>)
 800b8ba:	2200      	movs	r2, #0
 800b8bc:	701a      	strb	r2, [r3, #0]
	cmd[1] = 0xFF;                       // 功能码
 800b8be:	4b09      	ldr	r3, [pc, #36]	@ (800b8e4 <Emm_V5_Synchronous_motion+0x30>)
 800b8c0:	22ff      	movs	r2, #255	@ 0xff
 800b8c2:	705a      	strb	r2, [r3, #1]
	cmd[2] = 0x66;                       // 辅助码
 800b8c4:	4b07      	ldr	r3, [pc, #28]	@ (800b8e4 <Emm_V5_Synchronous_motion+0x30>)
 800b8c6:	2266      	movs	r2, #102	@ 0x66
 800b8c8:	709a      	strb	r2, [r3, #2]
	cmd[3] = 0x6B;                       // 校验字节
 800b8ca:	4b06      	ldr	r3, [pc, #24]	@ (800b8e4 <Emm_V5_Synchronous_motion+0x30>)
 800b8cc:	226b      	movs	r2, #107	@ 0x6b
 800b8ce:	70da      	strb	r2, [r3, #3]

	// 发送命令
	FDCAN_Send_Msg(cmd, 4);
 800b8d0:	2104      	movs	r1, #4
 800b8d2:	4804      	ldr	r0, [pc, #16]	@ (800b8e4 <Emm_V5_Synchronous_motion+0x30>)
 800b8d4:	f7f5 f9e0 	bl	8000c98 <FDCAN_Send_Msg>
	HAL_Delay(5);
 800b8d8:	2005      	movs	r0, #5
 800b8da:	f7f7 fae9 	bl	8002eb0 <HAL_Delay>
}
 800b8de:	bf00      	nop
 800b8e0:	bd80      	pop	{r7, pc}
 800b8e2:	bf00      	nop
 800b8e4:	24000b24 	.word	0x24000b24

0800b8e8 <limit>:
float A_out;
float TX_X_out;
float TX_Y_out;

// 输出限幅
float limit(float x, float min, float max) {
 800b8e8:	b480      	push	{r7}
 800b8ea:	b085      	sub	sp, #20
 800b8ec:	af00      	add	r7, sp, #0
 800b8ee:	ed87 0a03 	vstr	s0, [r7, #12]
 800b8f2:	edc7 0a02 	vstr	s1, [r7, #8]
 800b8f6:	ed87 1a01 	vstr	s2, [r7, #4]
	x = (x > max) ? max : ((x < min) ? min : x);
 800b8fa:	ed97 7a03 	vldr	s14, [r7, #12]
 800b8fe:	edd7 7a01 	vldr	s15, [r7, #4]
 800b902:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b906:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b90a:	dd01      	ble.n	800b910 <limit+0x28>
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	e00b      	b.n	800b928 <limit+0x40>
 800b910:	ed97 7a03 	vldr	s14, [r7, #12]
 800b914:	edd7 7a02 	vldr	s15, [r7, #8]
 800b918:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b91c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b920:	d501      	bpl.n	800b926 <limit+0x3e>
 800b922:	68bb      	ldr	r3, [r7, #8]
 800b924:	e000      	b.n	800b928 <limit+0x40>
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	60fb      	str	r3, [r7, #12]
	return x;
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	ee07 3a90 	vmov	s15, r3
}
 800b930:	eeb0 0a67 	vmov.f32	s0, s15
 800b934:	3714      	adds	r7, #20
 800b936:	46bd      	mov	sp, r7
 800b938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b93c:	4770      	bx	lr
	...

0800b940 <PID_Init>:
		return in;
	}
}

//	初始化PID结构体
void PID_Init(void) {
 800b940:	b480      	push	{r7}
 800b942:	af00      	add	r7, sp, #0
	//======================X=====================//   20   60
	XPID.P = 20;    //0.57    0  0.1
 800b944:	4b69      	ldr	r3, [pc, #420]	@ (800baec <PID_Init+0x1ac>)
 800b946:	4a6a      	ldr	r2, [pc, #424]	@ (800baf0 <PID_Init+0x1b0>)
 800b948:	601a      	str	r2, [r3, #0]
	XPID.I = 0;
 800b94a:	4b68      	ldr	r3, [pc, #416]	@ (800baec <PID_Init+0x1ac>)
 800b94c:	f04f 0200 	mov.w	r2, #0
 800b950:	609a      	str	r2, [r3, #8]
	XPID.D = 60;
 800b952:	4b66      	ldr	r3, [pc, #408]	@ (800baec <PID_Init+0x1ac>)
 800b954:	4a67      	ldr	r2, [pc, #412]	@ (800baf4 <PID_Init+0x1b4>)
 800b956:	615a      	str	r2, [r3, #20]

	XPID.I_LIMIT = 100.0;
 800b958:	4b64      	ldr	r3, [pc, #400]	@ (800baec <PID_Init+0x1ac>)
 800b95a:	4a67      	ldr	r2, [pc, #412]	@ (800baf8 <PID_Init+0x1b8>)
 800b95c:	611a      	str	r2, [r3, #16]
	XPID.OUT_LIMIT = 100.0;
 800b95e:	4b63      	ldr	r3, [pc, #396]	@ (800baec <PID_Init+0x1ac>)
 800b960:	4a65      	ldr	r2, [pc, #404]	@ (800baf8 <PID_Init+0x1b8>)
 800b962:	621a      	str	r2, [r3, #32]

	XPID.P_OUT = 0.0;
 800b964:	4b61      	ldr	r3, [pc, #388]	@ (800baec <PID_Init+0x1ac>)
 800b966:	f04f 0200 	mov.w	r2, #0
 800b96a:	605a      	str	r2, [r3, #4]
	XPID.I_OUT = 0.0;
 800b96c:	4b5f      	ldr	r3, [pc, #380]	@ (800baec <PID_Init+0x1ac>)
 800b96e:	f04f 0200 	mov.w	r2, #0
 800b972:	60da      	str	r2, [r3, #12]
	XPID.D_OUT = 0.0;
 800b974:	4b5d      	ldr	r3, [pc, #372]	@ (800baec <PID_Init+0x1ac>)
 800b976:	f04f 0200 	mov.w	r2, #0
 800b97a:	619a      	str	r2, [r3, #24]

	XPID.OUT = 0.0;
 800b97c:	4b5b      	ldr	r3, [pc, #364]	@ (800baec <PID_Init+0x1ac>)
 800b97e:	f04f 0200 	mov.w	r2, #0
 800b982:	61da      	str	r2, [r3, #28]

	XPID.err = 0.0;
 800b984:	4b59      	ldr	r3, [pc, #356]	@ (800baec <PID_Init+0x1ac>)
 800b986:	2200      	movs	r2, #0
 800b988:	849a      	strh	r2, [r3, #36]	@ 0x24
	XPID.err_err = 0.0;
 800b98a:	4b58      	ldr	r3, [pc, #352]	@ (800baec <PID_Init+0x1ac>)
 800b98c:	2200      	movs	r2, #0
 800b98e:	84da      	strh	r2, [r3, #38]	@ 0x26
	XPID.err_old = 0.0;
 800b990:	4b56      	ldr	r3, [pc, #344]	@ (800baec <PID_Init+0x1ac>)
 800b992:	2200      	movs	r2, #0
 800b994:	851a      	strh	r2, [r3, #40]	@ 0x28

	//========= =============Y=====================//
	YPID.P = 20;    //0.89                     //0.8 0 0.01
 800b996:	4b59      	ldr	r3, [pc, #356]	@ (800bafc <PID_Init+0x1bc>)
 800b998:	4a55      	ldr	r2, [pc, #340]	@ (800baf0 <PID_Init+0x1b0>)
 800b99a:	601a      	str	r2, [r3, #0]
	YPID.I = 0;
 800b99c:	4b57      	ldr	r3, [pc, #348]	@ (800bafc <PID_Init+0x1bc>)
 800b99e:	f04f 0200 	mov.w	r2, #0
 800b9a2:	609a      	str	r2, [r3, #8]
	YPID.D = 60;    //60
 800b9a4:	4b55      	ldr	r3, [pc, #340]	@ (800bafc <PID_Init+0x1bc>)
 800b9a6:	4a53      	ldr	r2, [pc, #332]	@ (800baf4 <PID_Init+0x1b4>)
 800b9a8:	615a      	str	r2, [r3, #20]
	YPID.I_LIMIT = 100.0;
 800b9aa:	4b54      	ldr	r3, [pc, #336]	@ (800bafc <PID_Init+0x1bc>)
 800b9ac:	4a52      	ldr	r2, [pc, #328]	@ (800baf8 <PID_Init+0x1b8>)
 800b9ae:	611a      	str	r2, [r3, #16]
	YPID.OUT_LIMIT = 100.0;
 800b9b0:	4b52      	ldr	r3, [pc, #328]	@ (800bafc <PID_Init+0x1bc>)
 800b9b2:	4a51      	ldr	r2, [pc, #324]	@ (800baf8 <PID_Init+0x1b8>)
 800b9b4:	621a      	str	r2, [r3, #32]

	YPID.P_OUT = 0.0;
 800b9b6:	4b51      	ldr	r3, [pc, #324]	@ (800bafc <PID_Init+0x1bc>)
 800b9b8:	f04f 0200 	mov.w	r2, #0
 800b9bc:	605a      	str	r2, [r3, #4]
	YPID.I_OUT = 0.0;
 800b9be:	4b4f      	ldr	r3, [pc, #316]	@ (800bafc <PID_Init+0x1bc>)
 800b9c0:	f04f 0200 	mov.w	r2, #0
 800b9c4:	60da      	str	r2, [r3, #12]
	YPID.D_OUT = 0.0;
 800b9c6:	4b4d      	ldr	r3, [pc, #308]	@ (800bafc <PID_Init+0x1bc>)
 800b9c8:	f04f 0200 	mov.w	r2, #0
 800b9cc:	619a      	str	r2, [r3, #24]

	YPID.OUT = 0.0;
 800b9ce:	4b4b      	ldr	r3, [pc, #300]	@ (800bafc <PID_Init+0x1bc>)
 800b9d0:	f04f 0200 	mov.w	r2, #0
 800b9d4:	61da      	str	r2, [r3, #28]

	YPID.err = 0.0;
 800b9d6:	4b49      	ldr	r3, [pc, #292]	@ (800bafc <PID_Init+0x1bc>)
 800b9d8:	2200      	movs	r2, #0
 800b9da:	849a      	strh	r2, [r3, #36]	@ 0x24
	YPID.err_err = 0.0;
 800b9dc:	4b47      	ldr	r3, [pc, #284]	@ (800bafc <PID_Init+0x1bc>)
 800b9de:	2200      	movs	r2, #0
 800b9e0:	84da      	strh	r2, [r3, #38]	@ 0x26
	YPID.err_old = 0.0;
 800b9e2:	4b46      	ldr	r3, [pc, #280]	@ (800bafc <PID_Init+0x1bc>)
 800b9e4:	2200      	movs	r2, #0
 800b9e6:	851a      	strh	r2, [r3, #40]	@ 0x28

	//======================A=====================//
	APID.P = 0.9;
 800b9e8:	4b45      	ldr	r3, [pc, #276]	@ (800bb00 <PID_Init+0x1c0>)
 800b9ea:	4a46      	ldr	r2, [pc, #280]	@ (800bb04 <PID_Init+0x1c4>)
 800b9ec:	601a      	str	r2, [r3, #0]
	APID.I = 0.0;
 800b9ee:	4b44      	ldr	r3, [pc, #272]	@ (800bb00 <PID_Init+0x1c0>)
 800b9f0:	f04f 0200 	mov.w	r2, #0
 800b9f4:	609a      	str	r2, [r3, #8]
	APID.D = 0.0;
 800b9f6:	4b42      	ldr	r3, [pc, #264]	@ (800bb00 <PID_Init+0x1c0>)
 800b9f8:	f04f 0200 	mov.w	r2, #0
 800b9fc:	615a      	str	r2, [r3, #20]

	APID.I_LIMIT = 1000.0;
 800b9fe:	4b40      	ldr	r3, [pc, #256]	@ (800bb00 <PID_Init+0x1c0>)
 800ba00:	4a41      	ldr	r2, [pc, #260]	@ (800bb08 <PID_Init+0x1c8>)
 800ba02:	611a      	str	r2, [r3, #16]
	APID.OUT_LIMIT = 2350.0;
 800ba04:	4b3e      	ldr	r3, [pc, #248]	@ (800bb00 <PID_Init+0x1c0>)
 800ba06:	4a41      	ldr	r2, [pc, #260]	@ (800bb0c <PID_Init+0x1cc>)
 800ba08:	621a      	str	r2, [r3, #32]

	APID.P_OUT = 0.0;
 800ba0a:	4b3d      	ldr	r3, [pc, #244]	@ (800bb00 <PID_Init+0x1c0>)
 800ba0c:	f04f 0200 	mov.w	r2, #0
 800ba10:	605a      	str	r2, [r3, #4]
	APID.I_OUT = 0.0;
 800ba12:	4b3b      	ldr	r3, [pc, #236]	@ (800bb00 <PID_Init+0x1c0>)
 800ba14:	f04f 0200 	mov.w	r2, #0
 800ba18:	60da      	str	r2, [r3, #12]
	APID.D_OUT = 0.0;
 800ba1a:	4b39      	ldr	r3, [pc, #228]	@ (800bb00 <PID_Init+0x1c0>)
 800ba1c:	f04f 0200 	mov.w	r2, #0
 800ba20:	619a      	str	r2, [r3, #24]

	APID.OUT = 0.0;
 800ba22:	4b37      	ldr	r3, [pc, #220]	@ (800bb00 <PID_Init+0x1c0>)
 800ba24:	f04f 0200 	mov.w	r2, #0
 800ba28:	61da      	str	r2, [r3, #28]

	APID.err = 0.0;
 800ba2a:	4b35      	ldr	r3, [pc, #212]	@ (800bb00 <PID_Init+0x1c0>)
 800ba2c:	2200      	movs	r2, #0
 800ba2e:	849a      	strh	r2, [r3, #36]	@ 0x24
	APID.err_err = 0.0;
 800ba30:	4b33      	ldr	r3, [pc, #204]	@ (800bb00 <PID_Init+0x1c0>)
 800ba32:	2200      	movs	r2, #0
 800ba34:	84da      	strh	r2, [r3, #38]	@ 0x26
	APID.err_old = 0.0;
 800ba36:	4b32      	ldr	r3, [pc, #200]	@ (800bb00 <PID_Init+0x1c0>)
 800ba38:	2200      	movs	r2, #0
 800ba3a:	851a      	strh	r2, [r3, #40]	@ 0x28
	//======================TX=====================//
	TXPID.P = 1;
 800ba3c:	4b34      	ldr	r3, [pc, #208]	@ (800bb10 <PID_Init+0x1d0>)
 800ba3e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800ba42:	601a      	str	r2, [r3, #0]
	TXPID.I = 0;
 800ba44:	4b32      	ldr	r3, [pc, #200]	@ (800bb10 <PID_Init+0x1d0>)
 800ba46:	f04f 0200 	mov.w	r2, #0
 800ba4a:	609a      	str	r2, [r3, #8]
	TXPID.D = 0.3;
 800ba4c:	4b30      	ldr	r3, [pc, #192]	@ (800bb10 <PID_Init+0x1d0>)
 800ba4e:	4a31      	ldr	r2, [pc, #196]	@ (800bb14 <PID_Init+0x1d4>)
 800ba50:	615a      	str	r2, [r3, #20]

	TXPID.I_LIMIT = 100.0;
 800ba52:	4b2f      	ldr	r3, [pc, #188]	@ (800bb10 <PID_Init+0x1d0>)
 800ba54:	4a28      	ldr	r2, [pc, #160]	@ (800baf8 <PID_Init+0x1b8>)
 800ba56:	611a      	str	r2, [r3, #16]
	TXPID.OUT_LIMIT = 300.0;
 800ba58:	4b2d      	ldr	r3, [pc, #180]	@ (800bb10 <PID_Init+0x1d0>)
 800ba5a:	4a2f      	ldr	r2, [pc, #188]	@ (800bb18 <PID_Init+0x1d8>)
 800ba5c:	621a      	str	r2, [r3, #32]

	TXPID.P_OUT = 0.0;
 800ba5e:	4b2c      	ldr	r3, [pc, #176]	@ (800bb10 <PID_Init+0x1d0>)
 800ba60:	f04f 0200 	mov.w	r2, #0
 800ba64:	605a      	str	r2, [r3, #4]
	TXPID.I_OUT = 0.0;
 800ba66:	4b2a      	ldr	r3, [pc, #168]	@ (800bb10 <PID_Init+0x1d0>)
 800ba68:	f04f 0200 	mov.w	r2, #0
 800ba6c:	60da      	str	r2, [r3, #12]
	TXPID.D_OUT = 0.0;
 800ba6e:	4b28      	ldr	r3, [pc, #160]	@ (800bb10 <PID_Init+0x1d0>)
 800ba70:	f04f 0200 	mov.w	r2, #0
 800ba74:	619a      	str	r2, [r3, #24]

	TXPID.OUT = 0.0;
 800ba76:	4b26      	ldr	r3, [pc, #152]	@ (800bb10 <PID_Init+0x1d0>)
 800ba78:	f04f 0200 	mov.w	r2, #0
 800ba7c:	61da      	str	r2, [r3, #28]

	TXPID.err = 0.0;
 800ba7e:	4b24      	ldr	r3, [pc, #144]	@ (800bb10 <PID_Init+0x1d0>)
 800ba80:	2200      	movs	r2, #0
 800ba82:	849a      	strh	r2, [r3, #36]	@ 0x24
	TXPID.err_err = 0.0;
 800ba84:	4b22      	ldr	r3, [pc, #136]	@ (800bb10 <PID_Init+0x1d0>)
 800ba86:	2200      	movs	r2, #0
 800ba88:	84da      	strh	r2, [r3, #38]	@ 0x26
	TXPID.err_old = 0.0;
 800ba8a:	4b21      	ldr	r3, [pc, #132]	@ (800bb10 <PID_Init+0x1d0>)
 800ba8c:	2200      	movs	r2, #0
 800ba8e:	851a      	strh	r2, [r3, #40]	@ 0x28

	//======================TY=====================//
	TYPID.P = -1;
 800ba90:	4b22      	ldr	r3, [pc, #136]	@ (800bb1c <PID_Init+0x1dc>)
 800ba92:	4a23      	ldr	r2, [pc, #140]	@ (800bb20 <PID_Init+0x1e0>)
 800ba94:	601a      	str	r2, [r3, #0]
	TYPID.I = -0;      //0.9  0.01   0.3
 800ba96:	4b21      	ldr	r3, [pc, #132]	@ (800bb1c <PID_Init+0x1dc>)
 800ba98:	f04f 0200 	mov.w	r2, #0
 800ba9c:	609a      	str	r2, [r3, #8]
	//0.9 0 0.2
	TYPID.D = -0.3;
 800ba9e:	4b1f      	ldr	r3, [pc, #124]	@ (800bb1c <PID_Init+0x1dc>)
 800baa0:	4a20      	ldr	r2, [pc, #128]	@ (800bb24 <PID_Init+0x1e4>)
 800baa2:	615a      	str	r2, [r3, #20]

	TYPID.I_LIMIT = 100.0;
 800baa4:	4b1d      	ldr	r3, [pc, #116]	@ (800bb1c <PID_Init+0x1dc>)
 800baa6:	4a14      	ldr	r2, [pc, #80]	@ (800baf8 <PID_Init+0x1b8>)
 800baa8:	611a      	str	r2, [r3, #16]
	TYPID.OUT_LIMIT = 300.0;
 800baaa:	4b1c      	ldr	r3, [pc, #112]	@ (800bb1c <PID_Init+0x1dc>)
 800baac:	4a1a      	ldr	r2, [pc, #104]	@ (800bb18 <PID_Init+0x1d8>)
 800baae:	621a      	str	r2, [r3, #32]

	TYPID.P_OUT = 0.0;
 800bab0:	4b1a      	ldr	r3, [pc, #104]	@ (800bb1c <PID_Init+0x1dc>)
 800bab2:	f04f 0200 	mov.w	r2, #0
 800bab6:	605a      	str	r2, [r3, #4]
	TYPID.I_OUT = 0.0;
 800bab8:	4b18      	ldr	r3, [pc, #96]	@ (800bb1c <PID_Init+0x1dc>)
 800baba:	f04f 0200 	mov.w	r2, #0
 800babe:	60da      	str	r2, [r3, #12]
	TYPID.D_OUT = 0.0;
 800bac0:	4b16      	ldr	r3, [pc, #88]	@ (800bb1c <PID_Init+0x1dc>)
 800bac2:	f04f 0200 	mov.w	r2, #0
 800bac6:	619a      	str	r2, [r3, #24]

	TYPID.OUT = 0.0;
 800bac8:	4b14      	ldr	r3, [pc, #80]	@ (800bb1c <PID_Init+0x1dc>)
 800baca:	f04f 0200 	mov.w	r2, #0
 800bace:	61da      	str	r2, [r3, #28]

	TYPID.err = 0.0;
 800bad0:	4b12      	ldr	r3, [pc, #72]	@ (800bb1c <PID_Init+0x1dc>)
 800bad2:	2200      	movs	r2, #0
 800bad4:	849a      	strh	r2, [r3, #36]	@ 0x24
	TYPID.err_err = 0.0;
 800bad6:	4b11      	ldr	r3, [pc, #68]	@ (800bb1c <PID_Init+0x1dc>)
 800bad8:	2200      	movs	r2, #0
 800bada:	84da      	strh	r2, [r3, #38]	@ 0x26
	TYPID.err_old = 0.0;
 800badc:	4b0f      	ldr	r3, [pc, #60]	@ (800bb1c <PID_Init+0x1dc>)
 800bade:	2200      	movs	r2, #0
 800bae0:	851a      	strh	r2, [r3, #40]	@ 0x28
}
 800bae2:	bf00      	nop
 800bae4:	46bd      	mov	sp, r7
 800bae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baea:	4770      	bx	lr
 800baec:	24000b3c 	.word	0x24000b3c
 800baf0:	41a00000 	.word	0x41a00000
 800baf4:	42700000 	.word	0x42700000
 800baf8:	42c80000 	.word	0x42c80000
 800bafc:	24000b68 	.word	0x24000b68
 800bb00:	24000b94 	.word	0x24000b94
 800bb04:	3f666666 	.word	0x3f666666
 800bb08:	447a0000 	.word	0x447a0000
 800bb0c:	4512e000 	.word	0x4512e000
 800bb10:	24000bc0 	.word	0x24000bc0
 800bb14:	3e99999a 	.word	0x3e99999a
 800bb18:	43960000 	.word	0x43960000
 800bb1c:	24000bec 	.word	0x24000bec
 800bb20:	bf800000 	.word	0xbf800000
 800bb24:	be99999a 	.word	0xbe99999a

0800bb28 <Tx_X_Ctrl>:
	PID->err_old = PID->err;

	return PID->OUT;
}
/* TX的X轴调整 */
short Tx_X_Ctrl(_PID *PID, float goal) {
 800bb28:	b580      	push	{r7, lr}
 800bb2a:	b082      	sub	sp, #8
 800bb2c:	af00      	add	r7, sp, #0
 800bb2e:	6078      	str	r0, [r7, #4]
 800bb30:	ed87 0a00 	vstr	s0, [r7]
	PID->err = Tx_NOW - goal;
 800bb34:	4b4e      	ldr	r3, [pc, #312]	@ (800bc70 <Tx_X_Ctrl+0x148>)
 800bb36:	ed93 7a00 	vldr	s14, [r3]
 800bb3a:	edd7 7a00 	vldr	s15, [r7]
 800bb3e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bb42:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bb46:	ee17 3a90 	vmov	r3, s15
 800bb4a:	b21a      	sxth	r2, r3
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	849a      	strh	r2, [r3, #36]	@ 0x24

	PID->err_err = PID->err - PID->err_old;
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 800bb56:	b29a      	uxth	r2, r3
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	@ 0x28
 800bb5e:	b29b      	uxth	r3, r3
 800bb60:	1ad3      	subs	r3, r2, r3
 800bb62:	b29b      	uxth	r3, r3
 800bb64:	b21a      	sxth	r2, r3
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	84da      	strh	r2, [r3, #38]	@ 0x26

	PID->P_OUT = PID->P * PID->err;
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	ed93 7a00 	vldr	s14, [r3]
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 800bb76:	ee07 3a90 	vmov	s15, r3
 800bb7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bb7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	edc3 7a01 	vstr	s15, [r3, #4]
	PID->I_OUT += PID->I * PID->err;
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	ed93 7a03 	vldr	s14, [r3, #12]
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	edd3 6a02 	vldr	s13, [r3, #8]
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 800bb9a:	ee07 3a90 	vmov	s15, r3
 800bb9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bba2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800bba6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	edc3 7a03 	vstr	s15, [r3, #12]
	PID->D_OUT = PID->D * PID->err_err;
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	ed93 7a05 	vldr	s14, [r3, #20]
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	@ 0x26
 800bbbc:	ee07 3a90 	vmov	s15, r3
 800bbc0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bbc4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	edc3 7a06 	vstr	s15, [r3, #24]

	PID->I_OUT = limit(PID->I_OUT, -PID->I_LIMIT, PID->I_LIMIT);
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	ed93 7a03 	vldr	s14, [r3, #12]
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	edd3 7a04 	vldr	s15, [r3, #16]
 800bbda:	eef1 7a67 	vneg.f32	s15, s15
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	edd3 6a04 	vldr	s13, [r3, #16]
 800bbe4:	eeb0 1a66 	vmov.f32	s2, s13
 800bbe8:	eef0 0a67 	vmov.f32	s1, s15
 800bbec:	eeb0 0a47 	vmov.f32	s0, s14
 800bbf0:	f7ff fe7a 	bl	800b8e8 <limit>
 800bbf4:	eef0 7a40 	vmov.f32	s15, s0
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	edc3 7a03 	vstr	s15, [r3, #12]

	PID->OUT = PID->P_OUT + PID->I_OUT + PID->D_OUT;
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	ed93 7a01 	vldr	s14, [r3, #4]
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	edd3 7a03 	vldr	s15, [r3, #12]
 800bc0a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	edd3 7a06 	vldr	s15, [r3, #24]
 800bc14:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	edc3 7a07 	vstr	s15, [r3, #28]

	PID->OUT = limit(PID->OUT, -PID->OUT_LIMIT, PID->OUT_LIMIT);
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	ed93 7a07 	vldr	s14, [r3, #28]
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	edd3 7a08 	vldr	s15, [r3, #32]
 800bc2a:	eef1 7a67 	vneg.f32	s15, s15
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	edd3 6a08 	vldr	s13, [r3, #32]
 800bc34:	eeb0 1a66 	vmov.f32	s2, s13
 800bc38:	eef0 0a67 	vmov.f32	s1, s15
 800bc3c:	eeb0 0a47 	vmov.f32	s0, s14
 800bc40:	f7ff fe52 	bl	800b8e8 <limit>
 800bc44:	eef0 7a40 	vmov.f32	s15, s0
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	edc3 7a07 	vstr	s15, [r3, #28]

	PID->err_old = PID->err;
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	f9b3 2024 	ldrsh.w	r2, [r3, #36]	@ 0x24
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	851a      	strh	r2, [r3, #40]	@ 0x28

	return PID->OUT;
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	edd3 7a07 	vldr	s15, [r3, #28]
 800bc5e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bc62:	ee17 3a90 	vmov	r3, s15
 800bc66:	b21b      	sxth	r3, r3
}
 800bc68:	4618      	mov	r0, r3
 800bc6a:	3708      	adds	r7, #8
 800bc6c:	46bd      	mov	sp, r7
 800bc6e:	bd80      	pop	{r7, pc}
 800bc70:	24000470 	.word	0x24000470

0800bc74 <Tx_Y_Ctrl>:

/* TX的Y轴调整 */
short Tx_Y_Ctrl(_PID *PID, float goal) {
 800bc74:	b580      	push	{r7, lr}
 800bc76:	b082      	sub	sp, #8
 800bc78:	af00      	add	r7, sp, #0
 800bc7a:	6078      	str	r0, [r7, #4]
 800bc7c:	ed87 0a00 	vstr	s0, [r7]
	PID->err = Ty_NOW - goal;
 800bc80:	4b4e      	ldr	r3, [pc, #312]	@ (800bdbc <Tx_Y_Ctrl+0x148>)
 800bc82:	ed93 7a00 	vldr	s14, [r3]
 800bc86:	edd7 7a00 	vldr	s15, [r7]
 800bc8a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bc8e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bc92:	ee17 3a90 	vmov	r3, s15
 800bc96:	b21a      	sxth	r2, r3
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	849a      	strh	r2, [r3, #36]	@ 0x24

	PID->err_err = PID->err - PID->err_old;
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 800bca2:	b29a      	uxth	r2, r3
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	@ 0x28
 800bcaa:	b29b      	uxth	r3, r3
 800bcac:	1ad3      	subs	r3, r2, r3
 800bcae:	b29b      	uxth	r3, r3
 800bcb0:	b21a      	sxth	r2, r3
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	84da      	strh	r2, [r3, #38]	@ 0x26

	PID->P_OUT = PID->P * PID->err;
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	ed93 7a00 	vldr	s14, [r3]
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 800bcc2:	ee07 3a90 	vmov	s15, r3
 800bcc6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bcca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	edc3 7a01 	vstr	s15, [r3, #4]
	PID->I_OUT += PID->I * PID->err;
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	ed93 7a03 	vldr	s14, [r3, #12]
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	edd3 6a02 	vldr	s13, [r3, #8]
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 800bce6:	ee07 3a90 	vmov	s15, r3
 800bcea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bcee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800bcf2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	edc3 7a03 	vstr	s15, [r3, #12]
	PID->D_OUT = PID->D * PID->err_err;
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	ed93 7a05 	vldr	s14, [r3, #20]
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	@ 0x26
 800bd08:	ee07 3a90 	vmov	s15, r3
 800bd0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bd10:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	edc3 7a06 	vstr	s15, [r3, #24]

	PID->I_OUT = limit(PID->I_OUT, -PID->I_LIMIT, PID->I_LIMIT);
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	ed93 7a03 	vldr	s14, [r3, #12]
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	edd3 7a04 	vldr	s15, [r3, #16]
 800bd26:	eef1 7a67 	vneg.f32	s15, s15
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	edd3 6a04 	vldr	s13, [r3, #16]
 800bd30:	eeb0 1a66 	vmov.f32	s2, s13
 800bd34:	eef0 0a67 	vmov.f32	s1, s15
 800bd38:	eeb0 0a47 	vmov.f32	s0, s14
 800bd3c:	f7ff fdd4 	bl	800b8e8 <limit>
 800bd40:	eef0 7a40 	vmov.f32	s15, s0
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	edc3 7a03 	vstr	s15, [r3, #12]

	PID->OUT = PID->P_OUT + PID->I_OUT + PID->D_OUT;
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	ed93 7a01 	vldr	s14, [r3, #4]
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	edd3 7a03 	vldr	s15, [r3, #12]
 800bd56:	ee37 7a27 	vadd.f32	s14, s14, s15
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	edd3 7a06 	vldr	s15, [r3, #24]
 800bd60:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	edc3 7a07 	vstr	s15, [r3, #28]

	PID->OUT = limit(PID->OUT, -PID->OUT_LIMIT, PID->OUT_LIMIT);
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	ed93 7a07 	vldr	s14, [r3, #28]
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	edd3 7a08 	vldr	s15, [r3, #32]
 800bd76:	eef1 7a67 	vneg.f32	s15, s15
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	edd3 6a08 	vldr	s13, [r3, #32]
 800bd80:	eeb0 1a66 	vmov.f32	s2, s13
 800bd84:	eef0 0a67 	vmov.f32	s1, s15
 800bd88:	eeb0 0a47 	vmov.f32	s0, s14
 800bd8c:	f7ff fdac 	bl	800b8e8 <limit>
 800bd90:	eef0 7a40 	vmov.f32	s15, s0
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	edc3 7a07 	vstr	s15, [r3, #28]

	PID->err_old = PID->err;
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	f9b3 2024 	ldrsh.w	r2, [r3, #36]	@ 0x24
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	851a      	strh	r2, [r3, #40]	@ 0x28

	return PID->OUT;
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	edd3 7a07 	vldr	s15, [r3, #28]
 800bdaa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bdae:	ee17 3a90 	vmov	r3, s15
 800bdb2:	b21b      	sxth	r3, r3
}
 800bdb4:	4618      	mov	r0, r3
 800bdb6:	3708      	adds	r7, #8
 800bdb8:	46bd      	mov	sp, r7
 800bdba:	bd80      	pop	{r7, pc}
 800bdbc:	24000474 	.word	0x24000474

0800bdc0 <GetRxFlag>:
bool Call_Flag = false;

int time5_jiancha = 0;

uint8_t GetRxFlag(void)
{
 800bdc0:	b480      	push	{r7}
 800bdc2:	af00      	add	r7, sp, #0
	if (RxFlag == 1)
 800bdc4:	4b07      	ldr	r3, [pc, #28]	@ (800bde4 <GetRxFlag+0x24>)
 800bdc6:	781b      	ldrb	r3, [r3, #0]
 800bdc8:	2b01      	cmp	r3, #1
 800bdca:	d104      	bne.n	800bdd6 <GetRxFlag+0x16>
	{
		RxFlag = 0;
 800bdcc:	4b05      	ldr	r3, [pc, #20]	@ (800bde4 <GetRxFlag+0x24>)
 800bdce:	2200      	movs	r2, #0
 800bdd0:	701a      	strb	r2, [r3, #0]
		return 1;
 800bdd2:	2301      	movs	r3, #1
 800bdd4:	e000      	b.n	800bdd8 <GetRxFlag+0x18>
	}
	return 0;
 800bdd6:	2300      	movs	r3, #0
}
 800bdd8:	4618      	mov	r0, r3
 800bdda:	46bd      	mov	sp, r7
 800bddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde0:	4770      	bx	lr
 800bde2:	bf00      	nop
 800bde4:	240002b9 	.word	0x240002b9

0800bde8 <Move_Line>:
//		;
////	RxFlag = 0;·
//	HAL_Delay(30);
//}
bool Move_Line(u16 speed, u8 acc, u32 length)
{
 800bde8:	b580      	push	{r7, lr}
 800bdea:	b086      	sub	sp, #24
 800bdec:	af04      	add	r7, sp, #16
 800bdee:	4603      	mov	r3, r0
 800bdf0:	603a      	str	r2, [r7, #0]
 800bdf2:	80fb      	strh	r3, [r7, #6]
 800bdf4:	460b      	mov	r3, r1
 800bdf6:	717b      	strb	r3, [r7, #5]
	// 查询当前是否有阻塞操作,有阻塞操作，结束函数并返回false
	if (Choke_Flag == true)
 800bdf8:	4b26      	ldr	r3, [pc, #152]	@ (800be94 <Move_Line+0xac>)
 800bdfa:	781b      	ldrb	r3, [r3, #0]
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d001      	beq.n	800be04 <Move_Line+0x1c>
		return false;
 800be00:	2300      	movs	r3, #0
 800be02:	e042      	b.n	800be8a <Move_Line+0xa2>
	else
		Choke_Flag = true;
 800be04:	4b23      	ldr	r3, [pc, #140]	@ (800be94 <Move_Line+0xac>)
 800be06:	2201      	movs	r2, #1
 800be08:	701a      	strb	r2, [r3, #0]
	// 无阻塞操作，申请阻塞
	Apply_Chock = true;
 800be0a:	4b23      	ldr	r3, [pc, #140]	@ (800be98 <Move_Line+0xb0>)
 800be0c:	2201      	movs	r2, #1
 800be0e:	701a      	strb	r2, [r3, #0]
	// 底盘步进电机移动
	Emm_V5_Pos_Control(1, 0, speed, acc, length, 0, true);
 800be10:	7979      	ldrb	r1, [r7, #5]
 800be12:	88fa      	ldrh	r2, [r7, #6]
 800be14:	2301      	movs	r3, #1
 800be16:	9302      	str	r3, [sp, #8]
 800be18:	2300      	movs	r3, #0
 800be1a:	9301      	str	r3, [sp, #4]
 800be1c:	683b      	ldr	r3, [r7, #0]
 800be1e:	9300      	str	r3, [sp, #0]
 800be20:	460b      	mov	r3, r1
 800be22:	2100      	movs	r1, #0
 800be24:	2001      	movs	r0, #1
 800be26:	f7ff fccf 	bl	800b7c8 <Emm_V5_Pos_Control>
	Emm_V5_Pos_Control(2, 0, speed, acc, length, 0, true);
 800be2a:	7979      	ldrb	r1, [r7, #5]
 800be2c:	88fa      	ldrh	r2, [r7, #6]
 800be2e:	2301      	movs	r3, #1
 800be30:	9302      	str	r3, [sp, #8]
 800be32:	2300      	movs	r3, #0
 800be34:	9301      	str	r3, [sp, #4]
 800be36:	683b      	ldr	r3, [r7, #0]
 800be38:	9300      	str	r3, [sp, #0]
 800be3a:	460b      	mov	r3, r1
 800be3c:	2100      	movs	r1, #0
 800be3e:	2002      	movs	r0, #2
 800be40:	f7ff fcc2 	bl	800b7c8 <Emm_V5_Pos_Control>
	Emm_V5_Pos_Control(3, 0, speed, acc, length, 0, true);
 800be44:	7979      	ldrb	r1, [r7, #5]
 800be46:	88fa      	ldrh	r2, [r7, #6]
 800be48:	2301      	movs	r3, #1
 800be4a:	9302      	str	r3, [sp, #8]
 800be4c:	2300      	movs	r3, #0
 800be4e:	9301      	str	r3, [sp, #4]
 800be50:	683b      	ldr	r3, [r7, #0]
 800be52:	9300      	str	r3, [sp, #0]
 800be54:	460b      	mov	r3, r1
 800be56:	2100      	movs	r1, #0
 800be58:	2003      	movs	r0, #3
 800be5a:	f7ff fcb5 	bl	800b7c8 <Emm_V5_Pos_Control>
	Emm_V5_Pos_Control(4, 0, speed, acc, length, 0, true);
 800be5e:	7979      	ldrb	r1, [r7, #5]
 800be60:	88fa      	ldrh	r2, [r7, #6]
 800be62:	2301      	movs	r3, #1
 800be64:	9302      	str	r3, [sp, #8]
 800be66:	2300      	movs	r3, #0
 800be68:	9301      	str	r3, [sp, #4]
 800be6a:	683b      	ldr	r3, [r7, #0]
 800be6c:	9300      	str	r3, [sp, #0]
 800be6e:	460b      	mov	r3, r1
 800be70:	2100      	movs	r1, #0
 800be72:	2004      	movs	r0, #4
 800be74:	f7ff fca8 	bl	800b7c8 <Emm_V5_Pos_Control>
	// 触发多机同步开始运动
	Emm_V5_Synchronous_motion();
 800be78:	f7ff fd1c 	bl	800b8b4 <Emm_V5_Synchronous_motion>
	// 使能阻塞定时器中断
	HAL_TIM_Base_Start_IT(&htim12);
 800be7c:	4807      	ldr	r0, [pc, #28]	@ (800be9c <Move_Line+0xb4>)
 800be7e:	f7fc f873 	bl	8007f68 <HAL_TIM_Base_Start_IT>
	Call_Flag = true;
 800be82:	4b07      	ldr	r3, [pc, #28]	@ (800bea0 <Move_Line+0xb8>)
 800be84:	2201      	movs	r2, #1
 800be86:	701a      	strb	r2, [r3, #0]
	return true;
 800be88:	2301      	movs	r3, #1
}
 800be8a:	4618      	mov	r0, r3
 800be8c:	3708      	adds	r7, #8
 800be8e:	46bd      	mov	sp, r7
 800be90:	bd80      	pop	{r7, pc}
 800be92:	bf00      	nop
 800be94:	24000c20 	.word	0x24000c20
 800be98:	24000c21 	.word	0x24000c21
 800be9c:	2400056c 	.word	0x2400056c
 800bea0:	24000c22 	.word	0x24000c22

0800bea4 <Move_Left>:
bool Move_Left(u16 speed, u8 acc, u32 length)
{
 800bea4:	b580      	push	{r7, lr}
 800bea6:	b086      	sub	sp, #24
 800bea8:	af04      	add	r7, sp, #16
 800beaa:	4603      	mov	r3, r0
 800beac:	603a      	str	r2, [r7, #0]
 800beae:	80fb      	strh	r3, [r7, #6]
 800beb0:	460b      	mov	r3, r1
 800beb2:	717b      	strb	r3, [r7, #5]
	// 查询当前是否有阻塞操作,有阻塞操作，结束函数并返回false
	if (Choke_Flag == true)
 800beb4:	4b26      	ldr	r3, [pc, #152]	@ (800bf50 <Move_Left+0xac>)
 800beb6:	781b      	ldrb	r3, [r3, #0]
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d001      	beq.n	800bec0 <Move_Left+0x1c>
		return false;
 800bebc:	2300      	movs	r3, #0
 800bebe:	e042      	b.n	800bf46 <Move_Left+0xa2>
	else
		Choke_Flag = true;
 800bec0:	4b23      	ldr	r3, [pc, #140]	@ (800bf50 <Move_Left+0xac>)
 800bec2:	2201      	movs	r2, #1
 800bec4:	701a      	strb	r2, [r3, #0]
	// 无阻塞操作，申请阻塞
	Apply_Chock = true;
 800bec6:	4b23      	ldr	r3, [pc, #140]	@ (800bf54 <Move_Left+0xb0>)
 800bec8:	2201      	movs	r2, #1
 800beca:	701a      	strb	r2, [r3, #0]
	// 底盘步进电机移动
	Emm_V5_Pos_Control(1, 1, speed, acc, length, 0, true);
 800becc:	7979      	ldrb	r1, [r7, #5]
 800bece:	88fa      	ldrh	r2, [r7, #6]
 800bed0:	2301      	movs	r3, #1
 800bed2:	9302      	str	r3, [sp, #8]
 800bed4:	2300      	movs	r3, #0
 800bed6:	9301      	str	r3, [sp, #4]
 800bed8:	683b      	ldr	r3, [r7, #0]
 800beda:	9300      	str	r3, [sp, #0]
 800bedc:	460b      	mov	r3, r1
 800bede:	2101      	movs	r1, #1
 800bee0:	2001      	movs	r0, #1
 800bee2:	f7ff fc71 	bl	800b7c8 <Emm_V5_Pos_Control>
	Emm_V5_Pos_Control(2, 0, speed, acc, length, 0, true);
 800bee6:	7979      	ldrb	r1, [r7, #5]
 800bee8:	88fa      	ldrh	r2, [r7, #6]
 800beea:	2301      	movs	r3, #1
 800beec:	9302      	str	r3, [sp, #8]
 800beee:	2300      	movs	r3, #0
 800bef0:	9301      	str	r3, [sp, #4]
 800bef2:	683b      	ldr	r3, [r7, #0]
 800bef4:	9300      	str	r3, [sp, #0]
 800bef6:	460b      	mov	r3, r1
 800bef8:	2100      	movs	r1, #0
 800befa:	2002      	movs	r0, #2
 800befc:	f7ff fc64 	bl	800b7c8 <Emm_V5_Pos_Control>
	Emm_V5_Pos_Control(3, 1, speed, acc, length, 0, true);
 800bf00:	7979      	ldrb	r1, [r7, #5]
 800bf02:	88fa      	ldrh	r2, [r7, #6]
 800bf04:	2301      	movs	r3, #1
 800bf06:	9302      	str	r3, [sp, #8]
 800bf08:	2300      	movs	r3, #0
 800bf0a:	9301      	str	r3, [sp, #4]
 800bf0c:	683b      	ldr	r3, [r7, #0]
 800bf0e:	9300      	str	r3, [sp, #0]
 800bf10:	460b      	mov	r3, r1
 800bf12:	2101      	movs	r1, #1
 800bf14:	2003      	movs	r0, #3
 800bf16:	f7ff fc57 	bl	800b7c8 <Emm_V5_Pos_Control>
	Emm_V5_Pos_Control(4, 0, speed, acc, length, 0, true);
 800bf1a:	7979      	ldrb	r1, [r7, #5]
 800bf1c:	88fa      	ldrh	r2, [r7, #6]
 800bf1e:	2301      	movs	r3, #1
 800bf20:	9302      	str	r3, [sp, #8]
 800bf22:	2300      	movs	r3, #0
 800bf24:	9301      	str	r3, [sp, #4]
 800bf26:	683b      	ldr	r3, [r7, #0]
 800bf28:	9300      	str	r3, [sp, #0]
 800bf2a:	460b      	mov	r3, r1
 800bf2c:	2100      	movs	r1, #0
 800bf2e:	2004      	movs	r0, #4
 800bf30:	f7ff fc4a 	bl	800b7c8 <Emm_V5_Pos_Control>
	// 触发多机同步开始运动
	Emm_V5_Synchronous_motion();
 800bf34:	f7ff fcbe 	bl	800b8b4 <Emm_V5_Synchronous_motion>
	// 使能阻塞定时器中断
	HAL_TIM_Base_Start_IT(&htim12);
 800bf38:	4807      	ldr	r0, [pc, #28]	@ (800bf58 <Move_Left+0xb4>)
 800bf3a:	f7fc f815 	bl	8007f68 <HAL_TIM_Base_Start_IT>
	Call_Flag = true;
 800bf3e:	4b07      	ldr	r3, [pc, #28]	@ (800bf5c <Move_Left+0xb8>)
 800bf40:	2201      	movs	r2, #1
 800bf42:	701a      	strb	r2, [r3, #0]
	return true;
 800bf44:	2301      	movs	r3, #1
}
 800bf46:	4618      	mov	r0, r3
 800bf48:	3708      	adds	r7, #8
 800bf4a:	46bd      	mov	sp, r7
 800bf4c:	bd80      	pop	{r7, pc}
 800bf4e:	bf00      	nop
 800bf50:	24000c20 	.word	0x24000c20
 800bf54:	24000c21 	.word	0x24000c21
 800bf58:	2400056c 	.word	0x2400056c
 800bf5c:	24000c22 	.word	0x24000c22

0800bf60 <Move_Back>:

bool Move_Back(u16 speed, u8 acc, u32 length)
{
 800bf60:	b580      	push	{r7, lr}
 800bf62:	b086      	sub	sp, #24
 800bf64:	af04      	add	r7, sp, #16
 800bf66:	4603      	mov	r3, r0
 800bf68:	603a      	str	r2, [r7, #0]
 800bf6a:	80fb      	strh	r3, [r7, #6]
 800bf6c:	460b      	mov	r3, r1
 800bf6e:	717b      	strb	r3, [r7, #5]
	// 查询当前是否有阻塞操作,有阻塞操作，结束函数并返回false
	if (Choke_Flag == true)
 800bf70:	4b26      	ldr	r3, [pc, #152]	@ (800c00c <Move_Back+0xac>)
 800bf72:	781b      	ldrb	r3, [r3, #0]
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d001      	beq.n	800bf7c <Move_Back+0x1c>
		return false;
 800bf78:	2300      	movs	r3, #0
 800bf7a:	e042      	b.n	800c002 <Move_Back+0xa2>
	else
		Choke_Flag = true;
 800bf7c:	4b23      	ldr	r3, [pc, #140]	@ (800c00c <Move_Back+0xac>)
 800bf7e:	2201      	movs	r2, #1
 800bf80:	701a      	strb	r2, [r3, #0]
	// 无阻塞操作，申请阻塞
	Apply_Chock = true;
 800bf82:	4b23      	ldr	r3, [pc, #140]	@ (800c010 <Move_Back+0xb0>)
 800bf84:	2201      	movs	r2, #1
 800bf86:	701a      	strb	r2, [r3, #0]
	// 底盘步进电机移动
	Emm_V5_Pos_Control(1, 1, speed, acc, length, 0, true);
 800bf88:	7979      	ldrb	r1, [r7, #5]
 800bf8a:	88fa      	ldrh	r2, [r7, #6]
 800bf8c:	2301      	movs	r3, #1
 800bf8e:	9302      	str	r3, [sp, #8]
 800bf90:	2300      	movs	r3, #0
 800bf92:	9301      	str	r3, [sp, #4]
 800bf94:	683b      	ldr	r3, [r7, #0]
 800bf96:	9300      	str	r3, [sp, #0]
 800bf98:	460b      	mov	r3, r1
 800bf9a:	2101      	movs	r1, #1
 800bf9c:	2001      	movs	r0, #1
 800bf9e:	f7ff fc13 	bl	800b7c8 <Emm_V5_Pos_Control>
	Emm_V5_Pos_Control(2, 1, speed, acc, length, 0, true);
 800bfa2:	7979      	ldrb	r1, [r7, #5]
 800bfa4:	88fa      	ldrh	r2, [r7, #6]
 800bfa6:	2301      	movs	r3, #1
 800bfa8:	9302      	str	r3, [sp, #8]
 800bfaa:	2300      	movs	r3, #0
 800bfac:	9301      	str	r3, [sp, #4]
 800bfae:	683b      	ldr	r3, [r7, #0]
 800bfb0:	9300      	str	r3, [sp, #0]
 800bfb2:	460b      	mov	r3, r1
 800bfb4:	2101      	movs	r1, #1
 800bfb6:	2002      	movs	r0, #2
 800bfb8:	f7ff fc06 	bl	800b7c8 <Emm_V5_Pos_Control>
	Emm_V5_Pos_Control(3, 1, speed, acc, length, 0, true);
 800bfbc:	7979      	ldrb	r1, [r7, #5]
 800bfbe:	88fa      	ldrh	r2, [r7, #6]
 800bfc0:	2301      	movs	r3, #1
 800bfc2:	9302      	str	r3, [sp, #8]
 800bfc4:	2300      	movs	r3, #0
 800bfc6:	9301      	str	r3, [sp, #4]
 800bfc8:	683b      	ldr	r3, [r7, #0]
 800bfca:	9300      	str	r3, [sp, #0]
 800bfcc:	460b      	mov	r3, r1
 800bfce:	2101      	movs	r1, #1
 800bfd0:	2003      	movs	r0, #3
 800bfd2:	f7ff fbf9 	bl	800b7c8 <Emm_V5_Pos_Control>
	Emm_V5_Pos_Control(4, 1, speed, acc, length, 0, true);
 800bfd6:	7979      	ldrb	r1, [r7, #5]
 800bfd8:	88fa      	ldrh	r2, [r7, #6]
 800bfda:	2301      	movs	r3, #1
 800bfdc:	9302      	str	r3, [sp, #8]
 800bfde:	2300      	movs	r3, #0
 800bfe0:	9301      	str	r3, [sp, #4]
 800bfe2:	683b      	ldr	r3, [r7, #0]
 800bfe4:	9300      	str	r3, [sp, #0]
 800bfe6:	460b      	mov	r3, r1
 800bfe8:	2101      	movs	r1, #1
 800bfea:	2004      	movs	r0, #4
 800bfec:	f7ff fbec 	bl	800b7c8 <Emm_V5_Pos_Control>
	// 触发多机同步开始运动
	Emm_V5_Synchronous_motion();
 800bff0:	f7ff fc60 	bl	800b8b4 <Emm_V5_Synchronous_motion>
	// 使能阻塞定时器中断
	HAL_TIM_Base_Start_IT(&htim12);
 800bff4:	4807      	ldr	r0, [pc, #28]	@ (800c014 <Move_Back+0xb4>)
 800bff6:	f7fb ffb7 	bl	8007f68 <HAL_TIM_Base_Start_IT>
	Call_Flag = true;
 800bffa:	4b07      	ldr	r3, [pc, #28]	@ (800c018 <Move_Back+0xb8>)
 800bffc:	2201      	movs	r2, #1
 800bffe:	701a      	strb	r2, [r3, #0]
	return true;
 800c000:	2301      	movs	r3, #1
}
 800c002:	4618      	mov	r0, r3
 800c004:	3708      	adds	r7, #8
 800c006:	46bd      	mov	sp, r7
 800c008:	bd80      	pop	{r7, pc}
 800c00a:	bf00      	nop
 800c00c:	24000c20 	.word	0x24000c20
 800c010:	24000c21 	.word	0x24000c21
 800c014:	2400056c 	.word	0x2400056c
 800c018:	24000c22 	.word	0x24000c22

0800c01c <Move_fanxuzhuan>:

bool Move_fanxuzhuan(u16 speed, u8 acc, u32 length)
{
 800c01c:	b580      	push	{r7, lr}
 800c01e:	b086      	sub	sp, #24
 800c020:	af04      	add	r7, sp, #16
 800c022:	4603      	mov	r3, r0
 800c024:	603a      	str	r2, [r7, #0]
 800c026:	80fb      	strh	r3, [r7, #6]
 800c028:	460b      	mov	r3, r1
 800c02a:	717b      	strb	r3, [r7, #5]
	// 查询当前是否有阻塞操作,有阻塞操作，结束函数并返回false
	if (Choke_Flag == true)
 800c02c:	4b26      	ldr	r3, [pc, #152]	@ (800c0c8 <Move_fanxuzhuan+0xac>)
 800c02e:	781b      	ldrb	r3, [r3, #0]
 800c030:	2b00      	cmp	r3, #0
 800c032:	d001      	beq.n	800c038 <Move_fanxuzhuan+0x1c>
		return false;
 800c034:	2300      	movs	r3, #0
 800c036:	e042      	b.n	800c0be <Move_fanxuzhuan+0xa2>
	else
		Choke_Flag = true;
 800c038:	4b23      	ldr	r3, [pc, #140]	@ (800c0c8 <Move_fanxuzhuan+0xac>)
 800c03a:	2201      	movs	r2, #1
 800c03c:	701a      	strb	r2, [r3, #0]
	// 无阻塞操作，申请阻塞
	Apply_Chock = true;
 800c03e:	4b23      	ldr	r3, [pc, #140]	@ (800c0cc <Move_fanxuzhuan+0xb0>)
 800c040:	2201      	movs	r2, #1
 800c042:	701a      	strb	r2, [r3, #0]
	// 底盘步进电机移动
	Emm_V5_Pos_Control(1, 1, speed, acc, length, 0, true);
 800c044:	7979      	ldrb	r1, [r7, #5]
 800c046:	88fa      	ldrh	r2, [r7, #6]
 800c048:	2301      	movs	r3, #1
 800c04a:	9302      	str	r3, [sp, #8]
 800c04c:	2300      	movs	r3, #0
 800c04e:	9301      	str	r3, [sp, #4]
 800c050:	683b      	ldr	r3, [r7, #0]
 800c052:	9300      	str	r3, [sp, #0]
 800c054:	460b      	mov	r3, r1
 800c056:	2101      	movs	r1, #1
 800c058:	2001      	movs	r0, #1
 800c05a:	f7ff fbb5 	bl	800b7c8 <Emm_V5_Pos_Control>
	Emm_V5_Pos_Control(2, 0, speed, acc, length, 0, true);
 800c05e:	7979      	ldrb	r1, [r7, #5]
 800c060:	88fa      	ldrh	r2, [r7, #6]
 800c062:	2301      	movs	r3, #1
 800c064:	9302      	str	r3, [sp, #8]
 800c066:	2300      	movs	r3, #0
 800c068:	9301      	str	r3, [sp, #4]
 800c06a:	683b      	ldr	r3, [r7, #0]
 800c06c:	9300      	str	r3, [sp, #0]
 800c06e:	460b      	mov	r3, r1
 800c070:	2100      	movs	r1, #0
 800c072:	2002      	movs	r0, #2
 800c074:	f7ff fba8 	bl	800b7c8 <Emm_V5_Pos_Control>
	Emm_V5_Pos_Control(3, 0, speed, acc, length, 0, true);
 800c078:	7979      	ldrb	r1, [r7, #5]
 800c07a:	88fa      	ldrh	r2, [r7, #6]
 800c07c:	2301      	movs	r3, #1
 800c07e:	9302      	str	r3, [sp, #8]
 800c080:	2300      	movs	r3, #0
 800c082:	9301      	str	r3, [sp, #4]
 800c084:	683b      	ldr	r3, [r7, #0]
 800c086:	9300      	str	r3, [sp, #0]
 800c088:	460b      	mov	r3, r1
 800c08a:	2100      	movs	r1, #0
 800c08c:	2003      	movs	r0, #3
 800c08e:	f7ff fb9b 	bl	800b7c8 <Emm_V5_Pos_Control>
	Emm_V5_Pos_Control(4, 1, speed, acc, length, 0, true);
 800c092:	7979      	ldrb	r1, [r7, #5]
 800c094:	88fa      	ldrh	r2, [r7, #6]
 800c096:	2301      	movs	r3, #1
 800c098:	9302      	str	r3, [sp, #8]
 800c09a:	2300      	movs	r3, #0
 800c09c:	9301      	str	r3, [sp, #4]
 800c09e:	683b      	ldr	r3, [r7, #0]
 800c0a0:	9300      	str	r3, [sp, #0]
 800c0a2:	460b      	mov	r3, r1
 800c0a4:	2101      	movs	r1, #1
 800c0a6:	2004      	movs	r0, #4
 800c0a8:	f7ff fb8e 	bl	800b7c8 <Emm_V5_Pos_Control>
	// 触发多机同步开始运动
	Emm_V5_Synchronous_motion();
 800c0ac:	f7ff fc02 	bl	800b8b4 <Emm_V5_Synchronous_motion>
	// 使能阻塞定时器中断
	HAL_TIM_Base_Start_IT(&htim12);
 800c0b0:	4807      	ldr	r0, [pc, #28]	@ (800c0d0 <Move_fanxuzhuan+0xb4>)
 800c0b2:	f7fb ff59 	bl	8007f68 <HAL_TIM_Base_Start_IT>
	Call_Flag = true;
 800c0b6:	4b07      	ldr	r3, [pc, #28]	@ (800c0d4 <Move_fanxuzhuan+0xb8>)
 800c0b8:	2201      	movs	r2, #1
 800c0ba:	701a      	strb	r2, [r3, #0]
	return true;
 800c0bc:	2301      	movs	r3, #1
}
 800c0be:	4618      	mov	r0, r3
 800c0c0:	3708      	adds	r7, #8
 800c0c2:	46bd      	mov	sp, r7
 800c0c4:	bd80      	pop	{r7, pc}
 800c0c6:	bf00      	nop
 800c0c8:	24000c20 	.word	0x24000c20
 800c0cc:	24000c21 	.word	0x24000c21
 800c0d0:	2400056c 	.word	0x2400056c
 800c0d4:	24000c22 	.word	0x24000c22

0800c0d8 <Move_Right>:
// //	RxFlag = 0;
// 	HAL_Delay(30);
// }

bool Move_Right(u16 speed, u8 acc, u32 length)
{
 800c0d8:	b580      	push	{r7, lr}
 800c0da:	b086      	sub	sp, #24
 800c0dc:	af04      	add	r7, sp, #16
 800c0de:	4603      	mov	r3, r0
 800c0e0:	603a      	str	r2, [r7, #0]
 800c0e2:	80fb      	strh	r3, [r7, #6]
 800c0e4:	460b      	mov	r3, r1
 800c0e6:	717b      	strb	r3, [r7, #5]
	// 查询当前是否有阻塞操作,有阻塞操作，结束函数并返回false
	if (Choke_Flag == true)
 800c0e8:	4b26      	ldr	r3, [pc, #152]	@ (800c184 <Move_Right+0xac>)
 800c0ea:	781b      	ldrb	r3, [r3, #0]
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d001      	beq.n	800c0f4 <Move_Right+0x1c>
		return false;
 800c0f0:	2300      	movs	r3, #0
 800c0f2:	e042      	b.n	800c17a <Move_Right+0xa2>
	else
		Choke_Flag = true;
 800c0f4:	4b23      	ldr	r3, [pc, #140]	@ (800c184 <Move_Right+0xac>)
 800c0f6:	2201      	movs	r2, #1
 800c0f8:	701a      	strb	r2, [r3, #0]
	// 无阻塞操作，申请阻塞
	Apply_Chock = true;
 800c0fa:	4b23      	ldr	r3, [pc, #140]	@ (800c188 <Move_Right+0xb0>)
 800c0fc:	2201      	movs	r2, #1
 800c0fe:	701a      	strb	r2, [r3, #0]
	// 底盘步进电机移动
	Emm_V5_Pos_Control(1, 0, speed, acc, length, 0, true);
 800c100:	7979      	ldrb	r1, [r7, #5]
 800c102:	88fa      	ldrh	r2, [r7, #6]
 800c104:	2301      	movs	r3, #1
 800c106:	9302      	str	r3, [sp, #8]
 800c108:	2300      	movs	r3, #0
 800c10a:	9301      	str	r3, [sp, #4]
 800c10c:	683b      	ldr	r3, [r7, #0]
 800c10e:	9300      	str	r3, [sp, #0]
 800c110:	460b      	mov	r3, r1
 800c112:	2100      	movs	r1, #0
 800c114:	2001      	movs	r0, #1
 800c116:	f7ff fb57 	bl	800b7c8 <Emm_V5_Pos_Control>
	Emm_V5_Pos_Control(2, 1, speed, acc, length, 0, true);
 800c11a:	7979      	ldrb	r1, [r7, #5]
 800c11c:	88fa      	ldrh	r2, [r7, #6]
 800c11e:	2301      	movs	r3, #1
 800c120:	9302      	str	r3, [sp, #8]
 800c122:	2300      	movs	r3, #0
 800c124:	9301      	str	r3, [sp, #4]
 800c126:	683b      	ldr	r3, [r7, #0]
 800c128:	9300      	str	r3, [sp, #0]
 800c12a:	460b      	mov	r3, r1
 800c12c:	2101      	movs	r1, #1
 800c12e:	2002      	movs	r0, #2
 800c130:	f7ff fb4a 	bl	800b7c8 <Emm_V5_Pos_Control>
	Emm_V5_Pos_Control(3, 0, speed, acc, length, 0, true);
 800c134:	7979      	ldrb	r1, [r7, #5]
 800c136:	88fa      	ldrh	r2, [r7, #6]
 800c138:	2301      	movs	r3, #1
 800c13a:	9302      	str	r3, [sp, #8]
 800c13c:	2300      	movs	r3, #0
 800c13e:	9301      	str	r3, [sp, #4]
 800c140:	683b      	ldr	r3, [r7, #0]
 800c142:	9300      	str	r3, [sp, #0]
 800c144:	460b      	mov	r3, r1
 800c146:	2100      	movs	r1, #0
 800c148:	2003      	movs	r0, #3
 800c14a:	f7ff fb3d 	bl	800b7c8 <Emm_V5_Pos_Control>
	Emm_V5_Pos_Control(4, 1, speed, acc, length, 0, true);
 800c14e:	7979      	ldrb	r1, [r7, #5]
 800c150:	88fa      	ldrh	r2, [r7, #6]
 800c152:	2301      	movs	r3, #1
 800c154:	9302      	str	r3, [sp, #8]
 800c156:	2300      	movs	r3, #0
 800c158:	9301      	str	r3, [sp, #4]
 800c15a:	683b      	ldr	r3, [r7, #0]
 800c15c:	9300      	str	r3, [sp, #0]
 800c15e:	460b      	mov	r3, r1
 800c160:	2101      	movs	r1, #1
 800c162:	2004      	movs	r0, #4
 800c164:	f7ff fb30 	bl	800b7c8 <Emm_V5_Pos_Control>
	// 触发多机同步开始运动
	Emm_V5_Synchronous_motion();
 800c168:	f7ff fba4 	bl	800b8b4 <Emm_V5_Synchronous_motion>
	// 使能阻塞定时器中断
	HAL_TIM_Base_Start_IT(&htim12);
 800c16c:	4807      	ldr	r0, [pc, #28]	@ (800c18c <Move_Right+0xb4>)
 800c16e:	f7fb fefb 	bl	8007f68 <HAL_TIM_Base_Start_IT>
	Call_Flag = true;
 800c172:	4b07      	ldr	r3, [pc, #28]	@ (800c190 <Move_Right+0xb8>)
 800c174:	2201      	movs	r2, #1
 800c176:	701a      	strb	r2, [r3, #0]
	return true;
 800c178:	2301      	movs	r3, #1
}
 800c17a:	4618      	mov	r0, r3
 800c17c:	3708      	adds	r7, #8
 800c17e:	46bd      	mov	sp, r7
 800c180:	bd80      	pop	{r7, pc}
 800c182:	bf00      	nop
 800c184:	24000c20 	.word	0x24000c20
 800c188:	24000c21 	.word	0x24000c21
 800c18c:	2400056c 	.word	0x2400056c
 800c190:	24000c22 	.word	0x24000c22

0800c194 <Move_zhengxuzhuan>:
////	RxFlag = 0;
//	HAL_Delay(30);
//}

bool Move_zhengxuzhuan(u16 speed, u8 acc, u32 length)
{
 800c194:	b580      	push	{r7, lr}
 800c196:	b086      	sub	sp, #24
 800c198:	af04      	add	r7, sp, #16
 800c19a:	4603      	mov	r3, r0
 800c19c:	603a      	str	r2, [r7, #0]
 800c19e:	80fb      	strh	r3, [r7, #6]
 800c1a0:	460b      	mov	r3, r1
 800c1a2:	717b      	strb	r3, [r7, #5]
	// 查询当前是否有阻塞操作,有阻塞操作，结束函数并返回false
	if (Choke_Flag == true)
 800c1a4:	4b26      	ldr	r3, [pc, #152]	@ (800c240 <Move_zhengxuzhuan+0xac>)
 800c1a6:	781b      	ldrb	r3, [r3, #0]
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d001      	beq.n	800c1b0 <Move_zhengxuzhuan+0x1c>
		return false;
 800c1ac:	2300      	movs	r3, #0
 800c1ae:	e042      	b.n	800c236 <Move_zhengxuzhuan+0xa2>
	else
		Choke_Flag = true;
 800c1b0:	4b23      	ldr	r3, [pc, #140]	@ (800c240 <Move_zhengxuzhuan+0xac>)
 800c1b2:	2201      	movs	r2, #1
 800c1b4:	701a      	strb	r2, [r3, #0]
	// 无阻塞操作，申请阻塞
	Apply_Chock = true;
 800c1b6:	4b23      	ldr	r3, [pc, #140]	@ (800c244 <Move_zhengxuzhuan+0xb0>)
 800c1b8:	2201      	movs	r2, #1
 800c1ba:	701a      	strb	r2, [r3, #0]
	// 底盘步进电机移动
	Emm_V5_Pos_Control(1, 0, speed, acc, length, 0, true);
 800c1bc:	7979      	ldrb	r1, [r7, #5]
 800c1be:	88fa      	ldrh	r2, [r7, #6]
 800c1c0:	2301      	movs	r3, #1
 800c1c2:	9302      	str	r3, [sp, #8]
 800c1c4:	2300      	movs	r3, #0
 800c1c6:	9301      	str	r3, [sp, #4]
 800c1c8:	683b      	ldr	r3, [r7, #0]
 800c1ca:	9300      	str	r3, [sp, #0]
 800c1cc:	460b      	mov	r3, r1
 800c1ce:	2100      	movs	r1, #0
 800c1d0:	2001      	movs	r0, #1
 800c1d2:	f7ff faf9 	bl	800b7c8 <Emm_V5_Pos_Control>
	Emm_V5_Pos_Control(2, 1, speed, acc, length, 0, true);
 800c1d6:	7979      	ldrb	r1, [r7, #5]
 800c1d8:	88fa      	ldrh	r2, [r7, #6]
 800c1da:	2301      	movs	r3, #1
 800c1dc:	9302      	str	r3, [sp, #8]
 800c1de:	2300      	movs	r3, #0
 800c1e0:	9301      	str	r3, [sp, #4]
 800c1e2:	683b      	ldr	r3, [r7, #0]
 800c1e4:	9300      	str	r3, [sp, #0]
 800c1e6:	460b      	mov	r3, r1
 800c1e8:	2101      	movs	r1, #1
 800c1ea:	2002      	movs	r0, #2
 800c1ec:	f7ff faec 	bl	800b7c8 <Emm_V5_Pos_Control>
	Emm_V5_Pos_Control(3, 1, speed, acc, length, 0, true);
 800c1f0:	7979      	ldrb	r1, [r7, #5]
 800c1f2:	88fa      	ldrh	r2, [r7, #6]
 800c1f4:	2301      	movs	r3, #1
 800c1f6:	9302      	str	r3, [sp, #8]
 800c1f8:	2300      	movs	r3, #0
 800c1fa:	9301      	str	r3, [sp, #4]
 800c1fc:	683b      	ldr	r3, [r7, #0]
 800c1fe:	9300      	str	r3, [sp, #0]
 800c200:	460b      	mov	r3, r1
 800c202:	2101      	movs	r1, #1
 800c204:	2003      	movs	r0, #3
 800c206:	f7ff fadf 	bl	800b7c8 <Emm_V5_Pos_Control>
	Emm_V5_Pos_Control(4, 0, speed, acc, length, 0, true);
 800c20a:	7979      	ldrb	r1, [r7, #5]
 800c20c:	88fa      	ldrh	r2, [r7, #6]
 800c20e:	2301      	movs	r3, #1
 800c210:	9302      	str	r3, [sp, #8]
 800c212:	2300      	movs	r3, #0
 800c214:	9301      	str	r3, [sp, #4]
 800c216:	683b      	ldr	r3, [r7, #0]
 800c218:	9300      	str	r3, [sp, #0]
 800c21a:	460b      	mov	r3, r1
 800c21c:	2100      	movs	r1, #0
 800c21e:	2004      	movs	r0, #4
 800c220:	f7ff fad2 	bl	800b7c8 <Emm_V5_Pos_Control>
	// 触发多机同步开始运动
	Emm_V5_Synchronous_motion();
 800c224:	f7ff fb46 	bl	800b8b4 <Emm_V5_Synchronous_motion>
	// 使能阻塞定时器中断
	HAL_TIM_Base_Start_IT(&htim12);
 800c228:	4807      	ldr	r0, [pc, #28]	@ (800c248 <Move_zhengxuzhuan+0xb4>)
 800c22a:	f7fb fe9d 	bl	8007f68 <HAL_TIM_Base_Start_IT>
	Call_Flag = true;
 800c22e:	4b07      	ldr	r3, [pc, #28]	@ (800c24c <Move_zhengxuzhuan+0xb8>)
 800c230:	2201      	movs	r2, #1
 800c232:	701a      	strb	r2, [r3, #0]
	return true;
 800c234:	2301      	movs	r3, #1
}
 800c236:	4618      	mov	r0, r3
 800c238:	3708      	adds	r7, #8
 800c23a:	46bd      	mov	sp, r7
 800c23c:	bd80      	pop	{r7, pc}
 800c23e:	bf00      	nop
 800c240:	24000c20 	.word	0x24000c20
 800c244:	24000c21 	.word	0x24000c21
 800c248:	2400056c 	.word	0x2400056c
 800c24c:	24000c22 	.word	0x24000c22

0800c250 <Drop_Location_jiang>:
//	if(High_Length>=14000)
//		Emm_V5_Stop_Now(5,0);
//	HAL_Delay(30);
//}
void Drop_Location_jiang(u16 speed, u8 acc, u32 length)
{
 800c250:	b580      	push	{r7, lr}
 800c252:	b088      	sub	sp, #32
 800c254:	af04      	add	r7, sp, #16
 800c256:	4603      	mov	r3, r0
 800c258:	603a      	str	r2, [r7, #0]
 800c25a:	80fb      	strh	r3, [r7, #6]
 800c25c:	460b      	mov	r3, r1
 800c25e:	717b      	strb	r3, [r7, #5]
	int time;
	time = length / speed * 20;  //毫秒
 800c260:	88fb      	ldrh	r3, [r7, #6]
 800c262:	683a      	ldr	r2, [r7, #0]
 800c264:	fbb2 f2f3 	udiv	r2, r2, r3
 800c268:	4613      	mov	r3, r2
 800c26a:	009b      	lsls	r3, r3, #2
 800c26c:	4413      	add	r3, r2
 800c26e:	009b      	lsls	r3, r3, #2
 800c270:	60fb      	str	r3, [r7, #12]
	Emm_V5_Pos_Control(5, 1, speed, acc, length, 1, 0);
 800c272:	7979      	ldrb	r1, [r7, #5]
 800c274:	88fa      	ldrh	r2, [r7, #6]
 800c276:	2300      	movs	r3, #0
 800c278:	9302      	str	r3, [sp, #8]
 800c27a:	2301      	movs	r3, #1
 800c27c:	9301      	str	r3, [sp, #4]
 800c27e:	683b      	ldr	r3, [r7, #0]
 800c280:	9300      	str	r3, [sp, #0]
 800c282:	460b      	mov	r3, r1
 800c284:	2101      	movs	r1, #1
 800c286:	2005      	movs	r0, #5
 800c288:	f7ff fa9e 	bl	800b7c8 <Emm_V5_Pos_Control>
//	检查到位回读
	Emm_mode = 1;
 800c28c:	4b0f      	ldr	r3, [pc, #60]	@ (800c2cc <Drop_Location_jiang+0x7c>)
 800c28e:	2201      	movs	r2, #1
 800c290:	701a      	strb	r2, [r3, #0]
	time5_jiancha = (time + 800) / 10;
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	f503 7348 	add.w	r3, r3, #800	@ 0x320
 800c298:	4a0d      	ldr	r2, [pc, #52]	@ (800c2d0 <Drop_Location_jiang+0x80>)
 800c29a:	fb82 1203 	smull	r1, r2, r2, r3
 800c29e:	1092      	asrs	r2, r2, #2
 800c2a0:	17db      	asrs	r3, r3, #31
 800c2a2:	1ad3      	subs	r3, r2, r3
 800c2a4:	4a0b      	ldr	r2, [pc, #44]	@ (800c2d4 <Drop_Location_jiang+0x84>)
 800c2a6:	6013      	str	r3, [r2, #0]
	while ((GetRxFlag() == 0) && (time5_jiancha != 0))
 800c2a8:	bf00      	nop
 800c2aa:	f7ff fd89 	bl	800bdc0 <GetRxFlag>
 800c2ae:	4603      	mov	r3, r0
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d103      	bne.n	800c2bc <Drop_Location_jiang+0x6c>
 800c2b4:	4b07      	ldr	r3, [pc, #28]	@ (800c2d4 <Drop_Location_jiang+0x84>)
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d1f6      	bne.n	800c2aa <Drop_Location_jiang+0x5a>
		;
	HAL_Delay(30);
 800c2bc:	201e      	movs	r0, #30
 800c2be:	f7f6 fdf7 	bl	8002eb0 <HAL_Delay>
}
 800c2c2:	bf00      	nop
 800c2c4:	3710      	adds	r7, #16
 800c2c6:	46bd      	mov	sp, r7
 800c2c8:	bd80      	pop	{r7, pc}
 800c2ca:	bf00      	nop
 800c2cc:	240002b8 	.word	0x240002b8
 800c2d0:	66666667 	.word	0x66666667
 800c2d4:	24000c24 	.word	0x24000c24

0800c2d8 <Move_Stop>:
	Emm_V5_Synchronous_motion();  // 触发多机同步开始运动

}

void Move_Stop(void)
{
 800c2d8:	b580      	push	{r7, lr}
 800c2da:	af00      	add	r7, sp, #0
	Emm_V5_Stop_Now(1, true);
 800c2dc:	2101      	movs	r1, #1
 800c2de:	2001      	movs	r0, #1
 800c2e0:	f7ff fac6 	bl	800b870 <Emm_V5_Stop_Now>
	Emm_V5_Stop_Now(2, true);
 800c2e4:	2101      	movs	r1, #1
 800c2e6:	2002      	movs	r0, #2
 800c2e8:	f7ff fac2 	bl	800b870 <Emm_V5_Stop_Now>
	Emm_V5_Stop_Now(3, true);
 800c2ec:	2101      	movs	r1, #1
 800c2ee:	2003      	movs	r0, #3
 800c2f0:	f7ff fabe 	bl	800b870 <Emm_V5_Stop_Now>
	Emm_V5_Stop_Now(4, true);
 800c2f4:	2101      	movs	r1, #1
 800c2f6:	2004      	movs	r0, #4
 800c2f8:	f7ff faba 	bl	800b870 <Emm_V5_Stop_Now>
	Emm_V5_Synchronous_motion();  // 触发多机同步开始运动
 800c2fc:	f7ff fada 	bl	800b8b4 <Emm_V5_Synchronous_motion>
}
 800c300:	bf00      	nop
 800c302:	bd80      	pop	{r7, pc}

0800c304 <Move_TO_jianzhi1>:
	Move_Line(RunSpeed, RunAcc, Lineclk);
	HAL_Delay(yanshi);
}

void Move_TO_jianzhi1(float Backclk, float fanzhuanclk) //粗加工区
{
 800c304:	b580      	push	{r7, lr}
 800c306:	b084      	sub	sp, #16
 800c308:	af00      	add	r7, sp, #0
 800c30a:	ed87 0a01 	vstr	s0, [r7, #4]
 800c30e:	edc7 0a00 	vstr	s1, [r7]
	HAL_UART_Transmit(&huart10, (uint8_t*) "我要后退喽\n", sizeof("我要后退喽\n") - 1,0xffff);
 800c312:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c316:	2210      	movs	r2, #16
 800c318:	4930      	ldr	r1, [pc, #192]	@ (800c3dc <Move_TO_jianzhi1+0xd8>)
 800c31a:	4831      	ldr	r0, [pc, #196]	@ (800c3e0 <Move_TO_jianzhi1+0xdc>)
 800c31c:	f7fc fb5a 	bl	80089d4 <HAL_UART_Transmit>
	bool temp = Move_Back(RunSpeed, RunAcc, Backclk);
 800c320:	edd7 7a01 	vldr	s15, [r7, #4]
 800c324:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c328:	ee17 2a90 	vmov	r2, s15
 800c32c:	2178      	movs	r1, #120	@ 0x78
 800c32e:	2064      	movs	r0, #100	@ 0x64
 800c330:	f7ff fe16 	bl	800bf60 <Move_Back>
 800c334:	4603      	mov	r3, r0
 800c336:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(50);
 800c338:	2032      	movs	r0, #50	@ 0x32
 800c33a:	f7f6 fdb9 	bl	8002eb0 <HAL_Delay>
	while (temp != true)
 800c33e:	e00b      	b.n	800c358 <Move_TO_jianzhi1+0x54>
	{
		temp = Move_Back(RunSpeed, RunAcc, Backclk);
 800c340:	edd7 7a01 	vldr	s15, [r7, #4]
 800c344:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c348:	ee17 2a90 	vmov	r2, s15
 800c34c:	2178      	movs	r1, #120	@ 0x78
 800c34e:	2064      	movs	r0, #100	@ 0x64
 800c350:	f7ff fe06 	bl	800bf60 <Move_Back>
 800c354:	4603      	mov	r3, r0
 800c356:	73fb      	strb	r3, [r7, #15]
	while (temp != true)
 800c358:	7bfb      	ldrb	r3, [r7, #15]
 800c35a:	f083 0301 	eor.w	r3, r3, #1
 800c35e:	b2db      	uxtb	r3, r3
 800c360:	2b00      	cmp	r3, #0
 800c362:	d1ed      	bne.n	800c340 <Move_TO_jianzhi1+0x3c>
	}
	HAL_UART_Transmit(&huart10, (uint8_t*) "确认接收\n", sizeof("确认接收\n") - 1,0xffff);
 800c364:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c368:	220d      	movs	r2, #13
 800c36a:	491e      	ldr	r1, [pc, #120]	@ (800c3e4 <Move_TO_jianzhi1+0xe0>)
 800c36c:	481c      	ldr	r0, [pc, #112]	@ (800c3e0 <Move_TO_jianzhi1+0xdc>)
 800c36e:	f7fc fb31 	bl	80089d4 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart10, (uint8_t*) "我要转45度辣\n", sizeof("我要转45度辣\n") - 1,0xffff);
 800c372:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c376:	2212      	movs	r2, #18
 800c378:	491b      	ldr	r1, [pc, #108]	@ (800c3e8 <Move_TO_jianzhi1+0xe4>)
 800c37a:	4819      	ldr	r0, [pc, #100]	@ (800c3e0 <Move_TO_jianzhi1+0xdc>)
 800c37c:	f7fc fb2a 	bl	80089d4 <HAL_UART_Transmit>
	temp = Move_fanxuzhuan(RunSpeed, RunAcc, fanzhuanclk);
 800c380:	edd7 7a00 	vldr	s15, [r7]
 800c384:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c388:	ee17 2a90 	vmov	r2, s15
 800c38c:	2178      	movs	r1, #120	@ 0x78
 800c38e:	2064      	movs	r0, #100	@ 0x64
 800c390:	f7ff fe44 	bl	800c01c <Move_fanxuzhuan>
 800c394:	4603      	mov	r3, r0
 800c396:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(50);
 800c398:	2032      	movs	r0, #50	@ 0x32
 800c39a:	f7f6 fd89 	bl	8002eb0 <HAL_Delay>
	while (temp != true)
 800c39e:	e00b      	b.n	800c3b8 <Move_TO_jianzhi1+0xb4>
	{
		temp = Move_fanxuzhuan(RunSpeed, RunAcc, fanzhuanclk);
 800c3a0:	edd7 7a00 	vldr	s15, [r7]
 800c3a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c3a8:	ee17 2a90 	vmov	r2, s15
 800c3ac:	2178      	movs	r1, #120	@ 0x78
 800c3ae:	2064      	movs	r0, #100	@ 0x64
 800c3b0:	f7ff fe34 	bl	800c01c <Move_fanxuzhuan>
 800c3b4:	4603      	mov	r3, r0
 800c3b6:	73fb      	strb	r3, [r7, #15]
	while (temp != true)
 800c3b8:	7bfb      	ldrb	r3, [r7, #15]
 800c3ba:	f083 0301 	eor.w	r3, r3, #1
 800c3be:	b2db      	uxtb	r3, r3
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d1ed      	bne.n	800c3a0 <Move_TO_jianzhi1+0x9c>
	}
	HAL_UART_Transmit(&huart10, (uint8_t*) "确认接收\n", sizeof("确认接收\n") - 1,0xffff);
 800c3c4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c3c8:	220d      	movs	r2, #13
 800c3ca:	4906      	ldr	r1, [pc, #24]	@ (800c3e4 <Move_TO_jianzhi1+0xe0>)
 800c3cc:	4804      	ldr	r0, [pc, #16]	@ (800c3e0 <Move_TO_jianzhi1+0xdc>)
 800c3ce:	f7fc fb01 	bl	80089d4 <HAL_UART_Transmit>
}
 800c3d2:	bf00      	nop
 800c3d4:	3710      	adds	r7, #16
 800c3d6:	46bd      	mov	sp, r7
 800c3d8:	bd80      	pop	{r7, pc}
 800c3da:	bf00      	nop
 800c3dc:	08012438 	.word	0x08012438
 800c3e0:	24000a58 	.word	0x24000a58
 800c3e4:	0801244c 	.word	0x0801244c
 800c3e8:	0801245c 	.word	0x0801245c

0800c3ec <Move_TO_zancunqu>:

void Move_TO_zancunqu(float Lineclk, float fanzhuanclk) //暂存区
{
 800c3ec:	b580      	push	{r7, lr}
 800c3ee:	b084      	sub	sp, #16
 800c3f0:	af00      	add	r7, sp, #0
 800c3f2:	ed87 0a01 	vstr	s0, [r7, #4]
 800c3f6:	edc7 0a00 	vstr	s1, [r7]
	HAL_UART_Transmit(&huart10, (uint8_t*) "向十字出发喽\n", sizeof("向十字出发喽\n") - 1,0xffff);
 800c3fa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c3fe:	2213      	movs	r2, #19
 800c400:	4930      	ldr	r1, [pc, #192]	@ (800c4c4 <Move_TO_zancunqu+0xd8>)
 800c402:	4831      	ldr	r0, [pc, #196]	@ (800c4c8 <Move_TO_zancunqu+0xdc>)
 800c404:	f7fc fae6 	bl	80089d4 <HAL_UART_Transmit>
	bool temp = Move_Line(RunSpeed, RunAcc, Lineclk);
 800c408:	edd7 7a01 	vldr	s15, [r7, #4]
 800c40c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c410:	ee17 2a90 	vmov	r2, s15
 800c414:	2178      	movs	r1, #120	@ 0x78
 800c416:	2064      	movs	r0, #100	@ 0x64
 800c418:	f7ff fce6 	bl	800bde8 <Move_Line>
 800c41c:	4603      	mov	r3, r0
 800c41e:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(50);
 800c420:	2032      	movs	r0, #50	@ 0x32
 800c422:	f7f6 fd45 	bl	8002eb0 <HAL_Delay>
	while (temp != true)
 800c426:	e00b      	b.n	800c440 <Move_TO_zancunqu+0x54>
	{
		temp = Move_Line(RunSpeed, RunAcc, Lineclk);
 800c428:	edd7 7a01 	vldr	s15, [r7, #4]
 800c42c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c430:	ee17 2a90 	vmov	r2, s15
 800c434:	2178      	movs	r1, #120	@ 0x78
 800c436:	2064      	movs	r0, #100	@ 0x64
 800c438:	f7ff fcd6 	bl	800bde8 <Move_Line>
 800c43c:	4603      	mov	r3, r0
 800c43e:	73fb      	strb	r3, [r7, #15]
	while (temp != true)
 800c440:	7bfb      	ldrb	r3, [r7, #15]
 800c442:	f083 0301 	eor.w	r3, r3, #1
 800c446:	b2db      	uxtb	r3, r3
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d1ed      	bne.n	800c428 <Move_TO_zancunqu+0x3c>
	}
	HAL_UART_Transmit(&huart10, (uint8_t*) "收到\n", sizeof("收到\n") - 1,0xffff);
 800c44c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c450:	2207      	movs	r2, #7
 800c452:	491e      	ldr	r1, [pc, #120]	@ (800c4cc <Move_TO_zancunqu+0xe0>)
 800c454:	481c      	ldr	r0, [pc, #112]	@ (800c4c8 <Move_TO_zancunqu+0xdc>)
 800c456:	f7fc fabd 	bl	80089d4 <HAL_UART_Transmit>
//	旋转
	HAL_UART_Transmit(&huart10, (uint8_t*) "喜不喜欢我的反旋转\n", sizeof("喜不喜欢我的反旋转\n") - 1,0xffff);
 800c45a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c45e:	221c      	movs	r2, #28
 800c460:	491b      	ldr	r1, [pc, #108]	@ (800c4d0 <Move_TO_zancunqu+0xe4>)
 800c462:	4819      	ldr	r0, [pc, #100]	@ (800c4c8 <Move_TO_zancunqu+0xdc>)
 800c464:	f7fc fab6 	bl	80089d4 <HAL_UART_Transmit>
	temp = Move_fanxuzhuan(RunSpeed, RunAcc, fanzhuanclk);
 800c468:	edd7 7a00 	vldr	s15, [r7]
 800c46c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c470:	ee17 2a90 	vmov	r2, s15
 800c474:	2178      	movs	r1, #120	@ 0x78
 800c476:	2064      	movs	r0, #100	@ 0x64
 800c478:	f7ff fdd0 	bl	800c01c <Move_fanxuzhuan>
 800c47c:	4603      	mov	r3, r0
 800c47e:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(50);
 800c480:	2032      	movs	r0, #50	@ 0x32
 800c482:	f7f6 fd15 	bl	8002eb0 <HAL_Delay>

	while (temp != true)
 800c486:	e00b      	b.n	800c4a0 <Move_TO_zancunqu+0xb4>
	{
		temp = Move_fanxuzhuan(RunSpeed, RunAcc, fanzhuanclk);
 800c488:	edd7 7a00 	vldr	s15, [r7]
 800c48c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c490:	ee17 2a90 	vmov	r2, s15
 800c494:	2178      	movs	r1, #120	@ 0x78
 800c496:	2064      	movs	r0, #100	@ 0x64
 800c498:	f7ff fdc0 	bl	800c01c <Move_fanxuzhuan>
 800c49c:	4603      	mov	r3, r0
 800c49e:	73fb      	strb	r3, [r7, #15]
	while (temp != true)
 800c4a0:	7bfb      	ldrb	r3, [r7, #15]
 800c4a2:	f083 0301 	eor.w	r3, r3, #1
 800c4a6:	b2db      	uxtb	r3, r3
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d1ed      	bne.n	800c488 <Move_TO_zancunqu+0x9c>
//		HAL_UART_Transmit(&huart10, (uint8_t*) "反选转的temp是false\n", sizeof("反选转的temp是false\n") - 1,0xffff);
	}
	HAL_UART_Transmit(&huart10, (uint8_t*) "转个45度给你看看\n", sizeof("转个45度给你看看\n") - 1,0xffff);
 800c4ac:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c4b0:	2218      	movs	r2, #24
 800c4b2:	4908      	ldr	r1, [pc, #32]	@ (800c4d4 <Move_TO_zancunqu+0xe8>)
 800c4b4:	4804      	ldr	r0, [pc, #16]	@ (800c4c8 <Move_TO_zancunqu+0xdc>)
 800c4b6:	f7fc fa8d 	bl	80089d4 <HAL_UART_Transmit>
}
 800c4ba:	bf00      	nop
 800c4bc:	3710      	adds	r7, #16
 800c4be:	46bd      	mov	sp, r7
 800c4c0:	bd80      	pop	{r7, pc}
 800c4c2:	bf00      	nop
 800c4c4:	08012470 	.word	0x08012470
 800c4c8:	24000a58 	.word	0x24000a58
 800c4cc:	08012484 	.word	0x08012484
 800c4d0:	0801248c 	.word	0x0801248c
 800c4d4:	080124ac 	.word	0x080124ac

0800c4d8 <Move_TO_jianzhi2>:


void Move_TO_jianzhi2(float Backclk, float Zhengzhuanclk) //从暂存区回到原料区
{
 800c4d8:	b580      	push	{r7, lr}
 800c4da:	b084      	sub	sp, #16
 800c4dc:	af00      	add	r7, sp, #0
 800c4de:	ed87 0a01 	vstr	s0, [r7, #4]
 800c4e2:	edc7 0a00 	vstr	s1, [r7]
	HAL_UART_Transmit(&huart10, (uint8_t*) "向粗加工区出发\n", sizeof("向粗加工区出发\n") - 1,0xffff);
 800c4e6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c4ea:	2216      	movs	r2, #22
 800c4ec:	4930      	ldr	r1, [pc, #192]	@ (800c5b0 <Move_TO_jianzhi2+0xd8>)
 800c4ee:	4831      	ldr	r0, [pc, #196]	@ (800c5b4 <Move_TO_jianzhi2+0xdc>)
 800c4f0:	f7fc fa70 	bl	80089d4 <HAL_UART_Transmit>
	bool temp = Move_Back(RunSpeed, RunAcc, Backclk);
 800c4f4:	edd7 7a01 	vldr	s15, [r7, #4]
 800c4f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c4fc:	ee17 2a90 	vmov	r2, s15
 800c500:	2178      	movs	r1, #120	@ 0x78
 800c502:	2064      	movs	r0, #100	@ 0x64
 800c504:	f7ff fd2c 	bl	800bf60 <Move_Back>
 800c508:	4603      	mov	r3, r0
 800c50a:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(50);
 800c50c:	2032      	movs	r0, #50	@ 0x32
 800c50e:	f7f6 fccf 	bl	8002eb0 <HAL_Delay>
	while (temp != true)
 800c512:	e00b      	b.n	800c52c <Move_TO_jianzhi2+0x54>
	{
		temp = Move_Back(RunSpeed, RunAcc, Backclk);
 800c514:	edd7 7a01 	vldr	s15, [r7, #4]
 800c518:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c51c:	ee17 2a90 	vmov	r2, s15
 800c520:	2178      	movs	r1, #120	@ 0x78
 800c522:	2064      	movs	r0, #100	@ 0x64
 800c524:	f7ff fd1c 	bl	800bf60 <Move_Back>
 800c528:	4603      	mov	r3, r0
 800c52a:	73fb      	strb	r3, [r7, #15]
	while (temp != true)
 800c52c:	7bfb      	ldrb	r3, [r7, #15]
 800c52e:	f083 0301 	eor.w	r3, r3, #1
 800c532:	b2db      	uxtb	r3, r3
 800c534:	2b00      	cmp	r3, #0
 800c536:	d1ed      	bne.n	800c514 <Move_TO_jianzhi2+0x3c>
//		HAL_UART_Transmit(&huart10, (uint8_t*) "后退的temp是false\n", sizeof("后退的temp是false\n") - 1,0xffff);
	}
	HAL_UART_Transmit(&huart10, (uint8_t*) "到位\n", sizeof("到位\n") - 1,0xffff);
 800c538:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c53c:	2207      	movs	r2, #7
 800c53e:	491e      	ldr	r1, [pc, #120]	@ (800c5b8 <Move_TO_jianzhi2+0xe0>)
 800c540:	481c      	ldr	r0, [pc, #112]	@ (800c5b4 <Move_TO_jianzhi2+0xdc>)
 800c542:	f7fc fa47 	bl	80089d4 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart10, (uint8_t*) "来个正转给大家开开眼\n", sizeof("来个正转给大家开开眼\n") - 1,0xffff);
 800c546:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c54a:	221f      	movs	r2, #31
 800c54c:	491b      	ldr	r1, [pc, #108]	@ (800c5bc <Move_TO_jianzhi2+0xe4>)
 800c54e:	4819      	ldr	r0, [pc, #100]	@ (800c5b4 <Move_TO_jianzhi2+0xdc>)
 800c550:	f7fc fa40 	bl	80089d4 <HAL_UART_Transmit>
	temp = Move_zhengxuzhuan(RunSpeed, RunAcc, Zhengzhuanclk);
 800c554:	edd7 7a00 	vldr	s15, [r7]
 800c558:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c55c:	ee17 2a90 	vmov	r2, s15
 800c560:	2178      	movs	r1, #120	@ 0x78
 800c562:	2064      	movs	r0, #100	@ 0x64
 800c564:	f7ff fe16 	bl	800c194 <Move_zhengxuzhuan>
 800c568:	4603      	mov	r3, r0
 800c56a:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(50);
 800c56c:	2032      	movs	r0, #50	@ 0x32
 800c56e:	f7f6 fc9f 	bl	8002eb0 <HAL_Delay>
	while (temp != true)
 800c572:	e00b      	b.n	800c58c <Move_TO_jianzhi2+0xb4>
	{
		temp = Move_zhengxuzhuan(RunSpeed, RunAcc, Zhengzhuanclk);
 800c574:	edd7 7a00 	vldr	s15, [r7]
 800c578:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c57c:	ee17 2a90 	vmov	r2, s15
 800c580:	2178      	movs	r1, #120	@ 0x78
 800c582:	2064      	movs	r0, #100	@ 0x64
 800c584:	f7ff fe06 	bl	800c194 <Move_zhengxuzhuan>
 800c588:	4603      	mov	r3, r0
 800c58a:	73fb      	strb	r3, [r7, #15]
	while (temp != true)
 800c58c:	7bfb      	ldrb	r3, [r7, #15]
 800c58e:	f083 0301 	eor.w	r3, r3, #1
 800c592:	b2db      	uxtb	r3, r3
 800c594:	2b00      	cmp	r3, #0
 800c596:	d1ed      	bne.n	800c574 <Move_TO_jianzhi2+0x9c>
//		HAL_UART_Transmit(&huart10, (uint8_t*) "正旋转的temp是false\n", sizeof("正旋转的temp是false\n") - 1,0xffff);
	}
	HAL_UART_Transmit(&huart10, (uint8_t*) "转晕了家人们\n", sizeof("转晕了家人们\n") - 1,0xffff);
 800c598:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c59c:	2213      	movs	r2, #19
 800c59e:	4908      	ldr	r1, [pc, #32]	@ (800c5c0 <Move_TO_jianzhi2+0xe8>)
 800c5a0:	4804      	ldr	r0, [pc, #16]	@ (800c5b4 <Move_TO_jianzhi2+0xdc>)
 800c5a2:	f7fc fa17 	bl	80089d4 <HAL_UART_Transmit>
}
 800c5a6:	bf00      	nop
 800c5a8:	3710      	adds	r7, #16
 800c5aa:	46bd      	mov	sp, r7
 800c5ac:	bd80      	pop	{r7, pc}
 800c5ae:	bf00      	nop
 800c5b0:	080124c8 	.word	0x080124c8
 800c5b4:	24000a58 	.word	0x24000a58
 800c5b8:	080124e0 	.word	0x080124e0
 800c5bc:	080124e8 	.word	0x080124e8
 800c5c0:	08012508 	.word	0x08012508

0800c5c4 <Move_TO_cujiagongqu>:
void Move_TO_cujiagongqu(float Backclk) //粗加工区
{
 800c5c4:	b580      	push	{r7, lr}
 800c5c6:	b084      	sub	sp, #16
 800c5c8:	af00      	add	r7, sp, #0
 800c5ca:	ed87 0a01 	vstr	s0, [r7, #4]
	HAL_UART_Transmit(&huart10, (uint8_t*) "粗加工区好难走啊\n", sizeof("粗加工区好难走啊\n") - 1,0xffff);
 800c5ce:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c5d2:	2219      	movs	r2, #25
 800c5d4:	4918      	ldr	r1, [pc, #96]	@ (800c638 <Move_TO_cujiagongqu+0x74>)
 800c5d6:	4819      	ldr	r0, [pc, #100]	@ (800c63c <Move_TO_cujiagongqu+0x78>)
 800c5d8:	f7fc f9fc 	bl	80089d4 <HAL_UART_Transmit>
	bool temp = Move_Back(RunSpeed, RunAcc, Backclk);
 800c5dc:	edd7 7a01 	vldr	s15, [r7, #4]
 800c5e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c5e4:	ee17 2a90 	vmov	r2, s15
 800c5e8:	2178      	movs	r1, #120	@ 0x78
 800c5ea:	2064      	movs	r0, #100	@ 0x64
 800c5ec:	f7ff fcb8 	bl	800bf60 <Move_Back>
 800c5f0:	4603      	mov	r3, r0
 800c5f2:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(50);
 800c5f4:	2032      	movs	r0, #50	@ 0x32
 800c5f6:	f7f6 fc5b 	bl	8002eb0 <HAL_Delay>
	while (temp != true)
 800c5fa:	e00b      	b.n	800c614 <Move_TO_cujiagongqu+0x50>
	{
		temp = Move_Back(RunSpeed, RunAcc, Backclk);
 800c5fc:	edd7 7a01 	vldr	s15, [r7, #4]
 800c600:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c604:	ee17 2a90 	vmov	r2, s15
 800c608:	2178      	movs	r1, #120	@ 0x78
 800c60a:	2064      	movs	r0, #100	@ 0x64
 800c60c:	f7ff fca8 	bl	800bf60 <Move_Back>
 800c610:	4603      	mov	r3, r0
 800c612:	73fb      	strb	r3, [r7, #15]
	while (temp != true)
 800c614:	7bfb      	ldrb	r3, [r7, #15]
 800c616:	f083 0301 	eor.w	r3, r3, #1
 800c61a:	b2db      	uxtb	r3, r3
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d1ed      	bne.n	800c5fc <Move_TO_cujiagongqu+0x38>
	}
	HAL_UART_Transmit(&huart10, (uint8_t*) "你说的对\n", sizeof("你说的对\n") - 1,0xffff);
 800c620:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c624:	220d      	movs	r2, #13
 800c626:	4906      	ldr	r1, [pc, #24]	@ (800c640 <Move_TO_cujiagongqu+0x7c>)
 800c628:	4804      	ldr	r0, [pc, #16]	@ (800c63c <Move_TO_cujiagongqu+0x78>)
 800c62a:	f7fc f9d3 	bl	80089d4 <HAL_UART_Transmit>
	// Move_Back(RunSpeed, RunAcc, Backclk);
	// HAL_Delay(yanshi);
}
 800c62e:	bf00      	nop
 800c630:	3710      	adds	r7, #16
 800c632:	46bd      	mov	sp, r7
 800c634:	bd80      	pop	{r7, pc}
 800c636:	bf00      	nop
 800c638:	0801251c 	.word	0x0801251c
 800c63c:	24000a58 	.word	0x24000a58
 800c640:	08012538 	.word	0x08012538

0800c644 <Move_TO_jianzhi3>:
void Move_TO_jianzhi3(float Backclk, float Zhengzhuanclk) //从暂存区回到原料区
{
 800c644:	b580      	push	{r7, lr}
 800c646:	b084      	sub	sp, #16
 800c648:	af00      	add	r7, sp, #0
 800c64a:	ed87 0a01 	vstr	s0, [r7, #4]
 800c64e:	edc7 0a00 	vstr	s1, [r7]

	HAL_UART_Transmit(&huart10, (uint8_t*) "到拐角了家人们\n", sizeof("到拐角了家人们\n") - 1,0xffff);
 800c652:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c656:	2216      	movs	r2, #22
 800c658:	4930      	ldr	r1, [pc, #192]	@ (800c71c <Move_TO_jianzhi3+0xd8>)
 800c65a:	4831      	ldr	r0, [pc, #196]	@ (800c720 <Move_TO_jianzhi3+0xdc>)
 800c65c:	f7fc f9ba 	bl	80089d4 <HAL_UART_Transmit>
	bool temp = Move_Back(RunSpeed, RunAcc, Backclk);
 800c660:	edd7 7a01 	vldr	s15, [r7, #4]
 800c664:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c668:	ee17 2a90 	vmov	r2, s15
 800c66c:	2178      	movs	r1, #120	@ 0x78
 800c66e:	2064      	movs	r0, #100	@ 0x64
 800c670:	f7ff fc76 	bl	800bf60 <Move_Back>
 800c674:	4603      	mov	r3, r0
 800c676:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(50);
 800c678:	2032      	movs	r0, #50	@ 0x32
 800c67a:	f7f6 fc19 	bl	8002eb0 <HAL_Delay>
	while (temp != true)
 800c67e:	e00b      	b.n	800c698 <Move_TO_jianzhi3+0x54>
	{
		temp = Move_Back(RunSpeed, RunAcc, Backclk);
 800c680:	edd7 7a01 	vldr	s15, [r7, #4]
 800c684:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c688:	ee17 2a90 	vmov	r2, s15
 800c68c:	2178      	movs	r1, #120	@ 0x78
 800c68e:	2064      	movs	r0, #100	@ 0x64
 800c690:	f7ff fc66 	bl	800bf60 <Move_Back>
 800c694:	4603      	mov	r3, r0
 800c696:	73fb      	strb	r3, [r7, #15]
	while (temp != true)
 800c698:	7bfb      	ldrb	r3, [r7, #15]
 800c69a:	f083 0301 	eor.w	r3, r3, #1
 800c69e:	b2db      	uxtb	r3, r3
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d1ed      	bne.n	800c680 <Move_TO_jianzhi3+0x3c>
	}
	HAL_UART_Transmit(&huart10, (uint8_t*) "滴滴\n", sizeof("滴滴\n") - 1,0xffff);
 800c6a4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c6a8:	2207      	movs	r2, #7
 800c6aa:	491e      	ldr	r1, [pc, #120]	@ (800c724 <Move_TO_jianzhi3+0xe0>)
 800c6ac:	481c      	ldr	r0, [pc, #112]	@ (800c720 <Move_TO_jianzhi3+0xdc>)
 800c6ae:	f7fc f991 	bl	80089d4 <HAL_UART_Transmit>
	// Move_Back(RunSpeed, RunAcc, Backclk);
	// HAL_Delay(yanshi);
	HAL_UART_Transmit(&huart10, (uint8_t*) "欸我再转\n", sizeof("欸我再转\n") - 1,0xffff);
 800c6b2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c6b6:	220d      	movs	r2, #13
 800c6b8:	491b      	ldr	r1, [pc, #108]	@ (800c728 <Move_TO_jianzhi3+0xe4>)
 800c6ba:	4819      	ldr	r0, [pc, #100]	@ (800c720 <Move_TO_jianzhi3+0xdc>)
 800c6bc:	f7fc f98a 	bl	80089d4 <HAL_UART_Transmit>
	temp = Move_zhengxuzhuan(RunSpeed, RunAcc, Zhengzhuanclk);
 800c6c0:	edd7 7a00 	vldr	s15, [r7]
 800c6c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c6c8:	ee17 2a90 	vmov	r2, s15
 800c6cc:	2178      	movs	r1, #120	@ 0x78
 800c6ce:	2064      	movs	r0, #100	@ 0x64
 800c6d0:	f7ff fd60 	bl	800c194 <Move_zhengxuzhuan>
 800c6d4:	4603      	mov	r3, r0
 800c6d6:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(50);
 800c6d8:	2032      	movs	r0, #50	@ 0x32
 800c6da:	f7f6 fbe9 	bl	8002eb0 <HAL_Delay>
	while (temp != true)
 800c6de:	e00b      	b.n	800c6f8 <Move_TO_jianzhi3+0xb4>
	{
		temp = Move_zhengxuzhuan(RunSpeed, RunAcc, Zhengzhuanclk);
 800c6e0:	edd7 7a00 	vldr	s15, [r7]
 800c6e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c6e8:	ee17 2a90 	vmov	r2, s15
 800c6ec:	2178      	movs	r1, #120	@ 0x78
 800c6ee:	2064      	movs	r0, #100	@ 0x64
 800c6f0:	f7ff fd50 	bl	800c194 <Move_zhengxuzhuan>
 800c6f4:	4603      	mov	r3, r0
 800c6f6:	73fb      	strb	r3, [r7, #15]
	while (temp != true)
 800c6f8:	7bfb      	ldrb	r3, [r7, #15]
 800c6fa:	f083 0301 	eor.w	r3, r3, #1
 800c6fe:	b2db      	uxtb	r3, r3
 800c700:	2b00      	cmp	r3, #0
 800c702:	d1ed      	bne.n	800c6e0 <Move_TO_jianzhi3+0x9c>
	}
	HAL_UART_Transmit(&huart10, (uint8_t*) "差不多要到了吧\n", sizeof("差不多要到了吧\n") - 1,0xffff);
 800c704:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c708:	2216      	movs	r2, #22
 800c70a:	4908      	ldr	r1, [pc, #32]	@ (800c72c <Move_TO_jianzhi3+0xe8>)
 800c70c:	4804      	ldr	r0, [pc, #16]	@ (800c720 <Move_TO_jianzhi3+0xdc>)
 800c70e:	f7fc f961 	bl	80089d4 <HAL_UART_Transmit>
//	 Move_zhengxuzhuan(RunSpeed, RunAcc, Zhengzhuanclk);
//	 HAL_Delay(yanshi);
}
 800c712:	bf00      	nop
 800c714:	3710      	adds	r7, #16
 800c716:	46bd      	mov	sp, r7
 800c718:	bd80      	pop	{r7, pc}
 800c71a:	bf00      	nop
 800c71c:	08012548 	.word	0x08012548
 800c720:	24000a58 	.word	0x24000a58
 800c724:	08012560 	.word	0x08012560
 800c728:	08012568 	.word	0x08012568
 800c72c:	08012578 	.word	0x08012578

0800c730 <Move_TO_fanyuanliaoqu>:
void Move_TO_fanyuanliaoqu(float Backclk) //物料区
{
 800c730:	b580      	push	{r7, lr}
 800c732:	b084      	sub	sp, #16
 800c734:	af00      	add	r7, sp, #0
 800c736:	ed87 0a01 	vstr	s0, [r7, #4]
	HAL_UART_Transmit(&huart10, (uint8_t*) "回到了梦开始的地方\n", sizeof("回到了梦开始的地方\n") - 1,0xffff);
 800c73a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c73e:	221c      	movs	r2, #28
 800c740:	4915      	ldr	r1, [pc, #84]	@ (800c798 <Move_TO_fanyuanliaoqu+0x68>)
 800c742:	4816      	ldr	r0, [pc, #88]	@ (800c79c <Move_TO_fanyuanliaoqu+0x6c>)
 800c744:	f7fc f946 	bl	80089d4 <HAL_UART_Transmit>
	bool temp = Move_Back(RunSpeed, RunAcc, Backclk);
 800c748:	edd7 7a01 	vldr	s15, [r7, #4]
 800c74c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c750:	ee17 2a90 	vmov	r2, s15
 800c754:	2178      	movs	r1, #120	@ 0x78
 800c756:	2064      	movs	r0, #100	@ 0x64
 800c758:	f7ff fc02 	bl	800bf60 <Move_Back>
 800c75c:	4603      	mov	r3, r0
 800c75e:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(50);
 800c760:	2032      	movs	r0, #50	@ 0x32
 800c762:	f7f6 fba5 	bl	8002eb0 <HAL_Delay>
	while (temp != true)
 800c766:	e00b      	b.n	800c780 <Move_TO_fanyuanliaoqu+0x50>
	{
		temp = Move_Back(RunSpeed, RunAcc, Backclk);
 800c768:	edd7 7a01 	vldr	s15, [r7, #4]
 800c76c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c770:	ee17 2a90 	vmov	r2, s15
 800c774:	2178      	movs	r1, #120	@ 0x78
 800c776:	2064      	movs	r0, #100	@ 0x64
 800c778:	f7ff fbf2 	bl	800bf60 <Move_Back>
 800c77c:	4603      	mov	r3, r0
 800c77e:	73fb      	strb	r3, [r7, #15]
	while (temp != true)
 800c780:	7bfb      	ldrb	r3, [r7, #15]
 800c782:	f083 0301 	eor.w	r3, r3, #1
 800c786:	b2db      	uxtb	r3, r3
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d1ed      	bne.n	800c768 <Move_TO_fanyuanliaoqu+0x38>
	}
	// Move_Back(RunSpeed, RunAcc, Lineclk);
	// HAL_Delay(20000);
}
 800c78c:	bf00      	nop
 800c78e:	bf00      	nop
 800c790:	3710      	adds	r7, #16
 800c792:	46bd      	mov	sp, r7
 800c794:	bd80      	pop	{r7, pc}
 800c796:	bf00      	nop
 800c798:	08012590 	.word	0x08012590
 800c79c:	24000a58 	.word	0x24000a58

0800c7a0 <Move_Action_Nopid_Left_Ctrl>:
// 	}
// }

//这个函数是爪子朝向左边时，也就是在原料区进行ACTION调整的
void Move_Action_Nopid_Left_Ctrl(float x_goal, float y_goal)
{
 800c7a0:	b580      	push	{r7, lr}
 800c7a2:	b084      	sub	sp, #16
 800c7a4:	af00      	add	r7, sp, #0
 800c7a6:	ed87 0a01 	vstr	s0, [r7, #4]
 800c7aa:	edc7 0a00 	vstr	s1, [r7]
	while (1)
	{
//		取X,Y差值
		uint16_t X_Diff = (uint16_t)ABS(X_NOW - x_goal);
 800c7ae:	4b86      	ldr	r3, [pc, #536]	@ (800c9c8 <Move_Action_Nopid_Left_Ctrl+0x228>)
 800c7b0:	ed93 7a00 	vldr	s14, [r3]
 800c7b4:	edd7 7a01 	vldr	s15, [r7, #4]
 800c7b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c7bc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c7c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c7c4:	dd0c      	ble.n	800c7e0 <Move_Action_Nopid_Left_Ctrl+0x40>
 800c7c6:	4b80      	ldr	r3, [pc, #512]	@ (800c9c8 <Move_Action_Nopid_Left_Ctrl+0x228>)
 800c7c8:	ed93 7a00 	vldr	s14, [r3]
 800c7cc:	edd7 7a01 	vldr	s15, [r7, #4]
 800c7d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c7d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c7d8:	ee17 3a90 	vmov	r3, s15
 800c7dc:	b29b      	uxth	r3, r3
 800c7de:	e00d      	b.n	800c7fc <Move_Action_Nopid_Left_Ctrl+0x5c>
 800c7e0:	4b79      	ldr	r3, [pc, #484]	@ (800c9c8 <Move_Action_Nopid_Left_Ctrl+0x228>)
 800c7e2:	ed93 7a00 	vldr	s14, [r3]
 800c7e6:	edd7 7a01 	vldr	s15, [r7, #4]
 800c7ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c7ee:	eef1 7a67 	vneg.f32	s15, s15
 800c7f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c7f6:	ee17 3a90 	vmov	r3, s15
 800c7fa:	b29b      	uxth	r3, r3
 800c7fc:	817b      	strh	r3, [r7, #10]
		uint16_t Y_Diff = (uint16_t)ABS(Y_NOW - y_goal);
 800c7fe:	4b73      	ldr	r3, [pc, #460]	@ (800c9cc <Move_Action_Nopid_Left_Ctrl+0x22c>)
 800c800:	edd3 7a00 	vldr	s15, [r3]
 800c804:	eeb1 7a67 	vneg.f32	s14, s15
 800c808:	edd7 7a00 	vldr	s15, [r7]
 800c80c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c810:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c814:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c818:	dd0e      	ble.n	800c838 <Move_Action_Nopid_Left_Ctrl+0x98>
 800c81a:	4b6c      	ldr	r3, [pc, #432]	@ (800c9cc <Move_Action_Nopid_Left_Ctrl+0x22c>)
 800c81c:	edd3 7a00 	vldr	s15, [r3]
 800c820:	eeb1 7a67 	vneg.f32	s14, s15
 800c824:	edd7 7a00 	vldr	s15, [r7]
 800c828:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c82c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c830:	ee17 3a90 	vmov	r3, s15
 800c834:	b29b      	uxth	r3, r3
 800c836:	e00f      	b.n	800c858 <Move_Action_Nopid_Left_Ctrl+0xb8>
 800c838:	4b64      	ldr	r3, [pc, #400]	@ (800c9cc <Move_Action_Nopid_Left_Ctrl+0x22c>)
 800c83a:	edd3 7a00 	vldr	s15, [r3]
 800c83e:	eeb1 7a67 	vneg.f32	s14, s15
 800c842:	edd7 7a00 	vldr	s15, [r7]
 800c846:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c84a:	eef1 7a67 	vneg.f32	s15, s15
 800c84e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c852:	ee17 3a90 	vmov	r3, s15
 800c856:	b29b      	uxth	r3, r3
 800c858:	813b      	strh	r3, [r7, #8]
//		差值满足要求, 结束调节
		if(( X_Diff <  10 ) && ( Y_Diff < 10 ))
 800c85a:	897b      	ldrh	r3, [r7, #10]
 800c85c:	2b09      	cmp	r3, #9
 800c85e:	d803      	bhi.n	800c868 <Move_Action_Nopid_Left_Ctrl+0xc8>
 800c860:	893b      	ldrh	r3, [r7, #8]
 800c862:	2b09      	cmp	r3, #9
 800c864:	f240 80ab 	bls.w	800c9be <Move_Action_Nopid_Left_Ctrl+0x21e>
			return;

		// 当前X坐标小于目标X
		if ((X_NOW - x_goal) < 0)
 800c868:	4b57      	ldr	r3, [pc, #348]	@ (800c9c8 <Move_Action_Nopid_Left_Ctrl+0x228>)
 800c86a:	ed93 7a00 	vldr	s14, [r3]
 800c86e:	edd7 7a01 	vldr	s15, [r7, #4]
 800c872:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c876:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c87a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c87e:	d51d      	bpl.n	800c8bc <Move_Action_Nopid_Left_Ctrl+0x11c>
		{
			bool temp = Move_Left(Action_Speed, Action_Acc, X_Diff * 5);
 800c880:	897a      	ldrh	r2, [r7, #10]
 800c882:	4613      	mov	r3, r2
 800c884:	009b      	lsls	r3, r3, #2
 800c886:	4413      	add	r3, r2
 800c888:	461a      	mov	r2, r3
 800c88a:	2164      	movs	r1, #100	@ 0x64
 800c88c:	2064      	movs	r0, #100	@ 0x64
 800c88e:	f7ff fb09 	bl	800bea4 <Move_Left>
 800c892:	4603      	mov	r3, r0
 800c894:	73fb      	strb	r3, [r7, #15]
			while (temp != true)
 800c896:	e00a      	b.n	800c8ae <Move_Action_Nopid_Left_Ctrl+0x10e>
			{
				temp = Move_Left(Action_Speed, Action_Acc,X_Diff * 5);
 800c898:	897a      	ldrh	r2, [r7, #10]
 800c89a:	4613      	mov	r3, r2
 800c89c:	009b      	lsls	r3, r3, #2
 800c89e:	4413      	add	r3, r2
 800c8a0:	461a      	mov	r2, r3
 800c8a2:	2164      	movs	r1, #100	@ 0x64
 800c8a4:	2064      	movs	r0, #100	@ 0x64
 800c8a6:	f7ff fafd 	bl	800bea4 <Move_Left>
 800c8aa:	4603      	mov	r3, r0
 800c8ac:	73fb      	strb	r3, [r7, #15]
			while (temp != true)
 800c8ae:	7bfb      	ldrb	r3, [r7, #15]
 800c8b0:	f083 0301 	eor.w	r3, r3, #1
 800c8b4:	b2db      	uxtb	r3, r3
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d1ee      	bne.n	800c898 <Move_Action_Nopid_Left_Ctrl+0xf8>
 800c8ba:	e028      	b.n	800c90e <Move_Action_Nopid_Left_Ctrl+0x16e>
			}
		}
		// 当前X坐标大于目标X
		else if ((X_NOW - x_goal) > 0)
 800c8bc:	4b42      	ldr	r3, [pc, #264]	@ (800c9c8 <Move_Action_Nopid_Left_Ctrl+0x228>)
 800c8be:	ed93 7a00 	vldr	s14, [r3]
 800c8c2:	edd7 7a01 	vldr	s15, [r7, #4]
 800c8c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c8ca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c8ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c8d2:	dd1c      	ble.n	800c90e <Move_Action_Nopid_Left_Ctrl+0x16e>
		{
			bool temp = Move_Right(Action_Speed, Action_Acc, X_Diff * 5);
 800c8d4:	897a      	ldrh	r2, [r7, #10]
 800c8d6:	4613      	mov	r3, r2
 800c8d8:	009b      	lsls	r3, r3, #2
 800c8da:	4413      	add	r3, r2
 800c8dc:	461a      	mov	r2, r3
 800c8de:	2164      	movs	r1, #100	@ 0x64
 800c8e0:	2064      	movs	r0, #100	@ 0x64
 800c8e2:	f7ff fbf9 	bl	800c0d8 <Move_Right>
 800c8e6:	4603      	mov	r3, r0
 800c8e8:	73bb      	strb	r3, [r7, #14]
			while (temp != true)
 800c8ea:	e00a      	b.n	800c902 <Move_Action_Nopid_Left_Ctrl+0x162>
			{
				temp = Move_Right(Action_Speed, Action_Acc,X_Diff * 5);
 800c8ec:	897a      	ldrh	r2, [r7, #10]
 800c8ee:	4613      	mov	r3, r2
 800c8f0:	009b      	lsls	r3, r3, #2
 800c8f2:	4413      	add	r3, r2
 800c8f4:	461a      	mov	r2, r3
 800c8f6:	2164      	movs	r1, #100	@ 0x64
 800c8f8:	2064      	movs	r0, #100	@ 0x64
 800c8fa:	f7ff fbed 	bl	800c0d8 <Move_Right>
 800c8fe:	4603      	mov	r3, r0
 800c900:	73bb      	strb	r3, [r7, #14]
			while (temp != true)
 800c902:	7bbb      	ldrb	r3, [r7, #14]
 800c904:	f083 0301 	eor.w	r3, r3, #1
 800c908:	b2db      	uxtb	r3, r3
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d1ee      	bne.n	800c8ec <Move_Action_Nopid_Left_Ctrl+0x14c>
			}
		}
		// 当前Y坐标小于目标Y
		if (Y_NOW - y_goal < 0)
 800c90e:	4b2f      	ldr	r3, [pc, #188]	@ (800c9cc <Move_Action_Nopid_Left_Ctrl+0x22c>)
 800c910:	edd3 7a00 	vldr	s15, [r3]
 800c914:	eeb1 7a67 	vneg.f32	s14, s15
 800c918:	edd7 7a00 	vldr	s15, [r7]
 800c91c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c920:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c924:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c928:	d51d      	bpl.n	800c966 <Move_Action_Nopid_Left_Ctrl+0x1c6>
		{
			bool temp = Move_Line(Action_Speed, Action_Acc,Y_Diff * 5);
 800c92a:	893a      	ldrh	r2, [r7, #8]
 800c92c:	4613      	mov	r3, r2
 800c92e:	009b      	lsls	r3, r3, #2
 800c930:	4413      	add	r3, r2
 800c932:	461a      	mov	r2, r3
 800c934:	2164      	movs	r1, #100	@ 0x64
 800c936:	2064      	movs	r0, #100	@ 0x64
 800c938:	f7ff fa56 	bl	800bde8 <Move_Line>
 800c93c:	4603      	mov	r3, r0
 800c93e:	737b      	strb	r3, [r7, #13]
			while (temp != true)
 800c940:	e00a      	b.n	800c958 <Move_Action_Nopid_Left_Ctrl+0x1b8>
			{
				temp = Move_Line(Action_Speed, Action_Acc,Y_Diff * 5);
 800c942:	893a      	ldrh	r2, [r7, #8]
 800c944:	4613      	mov	r3, r2
 800c946:	009b      	lsls	r3, r3, #2
 800c948:	4413      	add	r3, r2
 800c94a:	461a      	mov	r2, r3
 800c94c:	2164      	movs	r1, #100	@ 0x64
 800c94e:	2064      	movs	r0, #100	@ 0x64
 800c950:	f7ff fa4a 	bl	800bde8 <Move_Line>
 800c954:	4603      	mov	r3, r0
 800c956:	737b      	strb	r3, [r7, #13]
			while (temp != true)
 800c958:	7b7b      	ldrb	r3, [r7, #13]
 800c95a:	f083 0301 	eor.w	r3, r3, #1
 800c95e:	b2db      	uxtb	r3, r3
 800c960:	2b00      	cmp	r3, #0
 800c962:	d1ee      	bne.n	800c942 <Move_Action_Nopid_Left_Ctrl+0x1a2>
 800c964:	e723      	b.n	800c7ae <Move_Action_Nopid_Left_Ctrl+0xe>
			}
		}
		// 当前Y坐标大于目标Y
		else if (Y_NOW - y_goal > 0)
 800c966:	4b19      	ldr	r3, [pc, #100]	@ (800c9cc <Move_Action_Nopid_Left_Ctrl+0x22c>)
 800c968:	edd3 7a00 	vldr	s15, [r3]
 800c96c:	eeb1 7a67 	vneg.f32	s14, s15
 800c970:	edd7 7a00 	vldr	s15, [r7]
 800c974:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c978:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c97c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c980:	dd1c      	ble.n	800c9bc <Move_Action_Nopid_Left_Ctrl+0x21c>
		{
			bool temp = Move_Back(Action_Speed, Action_Acc,Y_Diff * 5);
 800c982:	893a      	ldrh	r2, [r7, #8]
 800c984:	4613      	mov	r3, r2
 800c986:	009b      	lsls	r3, r3, #2
 800c988:	4413      	add	r3, r2
 800c98a:	461a      	mov	r2, r3
 800c98c:	2164      	movs	r1, #100	@ 0x64
 800c98e:	2064      	movs	r0, #100	@ 0x64
 800c990:	f7ff fae6 	bl	800bf60 <Move_Back>
 800c994:	4603      	mov	r3, r0
 800c996:	733b      	strb	r3, [r7, #12]
			while (temp != true)
 800c998:	e00a      	b.n	800c9b0 <Move_Action_Nopid_Left_Ctrl+0x210>
			{
				temp = Move_Back(Action_Speed, Action_Acc,Y_Diff* 5);
 800c99a:	893a      	ldrh	r2, [r7, #8]
 800c99c:	4613      	mov	r3, r2
 800c99e:	009b      	lsls	r3, r3, #2
 800c9a0:	4413      	add	r3, r2
 800c9a2:	461a      	mov	r2, r3
 800c9a4:	2164      	movs	r1, #100	@ 0x64
 800c9a6:	2064      	movs	r0, #100	@ 0x64
 800c9a8:	f7ff fada 	bl	800bf60 <Move_Back>
 800c9ac:	4603      	mov	r3, r0
 800c9ae:	733b      	strb	r3, [r7, #12]
			while (temp != true)
 800c9b0:	7b3b      	ldrb	r3, [r7, #12]
 800c9b2:	f083 0301 	eor.w	r3, r3, #1
 800c9b6:	b2db      	uxtb	r3, r3
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d1ee      	bne.n	800c99a <Move_Action_Nopid_Left_Ctrl+0x1fa>
	{
 800c9bc:	e6f7      	b.n	800c7ae <Move_Action_Nopid_Left_Ctrl+0xe>
			return;
 800c9be:	bf00      	nop
			}
		}

	}
}
 800c9c0:	3710      	adds	r7, #16
 800c9c2:	46bd      	mov	sp, r7
 800c9c4:	bd80      	pop	{r7, pc}
 800c9c6:	bf00      	nop
 800c9c8:	24000af0 	.word	0x24000af0
 800c9cc:	24000af4 	.word	0x24000af4

0800c9d0 <Move_Action_Nopid_Forward_Ctrl>:
//这个函数是爪子朝向前方时，第一个十字和粗加工区进行ACTION调整
bool Move_Action_Nopid_Forward_Ctrl(float x_goal, float y_goal)
{
 800c9d0:	b580      	push	{r7, lr}
 800c9d2:	b088      	sub	sp, #32
 800c9d4:	af00      	add	r7, sp, #0
 800c9d6:	ed87 0a01 	vstr	s0, [r7, #4]
 800c9da:	edc7 0a00 	vstr	s1, [r7]
	//ACTION调整
	//		取X,Y差值
	uint16_t X_Diff = (uint16_t)ABS(X_NOW - x_goal);
 800c9de:	4bb2      	ldr	r3, [pc, #712]	@ (800cca8 <Move_Action_Nopid_Forward_Ctrl+0x2d8>)
 800c9e0:	ed93 7a00 	vldr	s14, [r3]
 800c9e4:	edd7 7a01 	vldr	s15, [r7, #4]
 800c9e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c9ec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c9f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c9f4:	dd0c      	ble.n	800ca10 <Move_Action_Nopid_Forward_Ctrl+0x40>
 800c9f6:	4bac      	ldr	r3, [pc, #688]	@ (800cca8 <Move_Action_Nopid_Forward_Ctrl+0x2d8>)
 800c9f8:	ed93 7a00 	vldr	s14, [r3]
 800c9fc:	edd7 7a01 	vldr	s15, [r7, #4]
 800ca00:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ca04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ca08:	ee17 3a90 	vmov	r3, s15
 800ca0c:	b29b      	uxth	r3, r3
 800ca0e:	e00d      	b.n	800ca2c <Move_Action_Nopid_Forward_Ctrl+0x5c>
 800ca10:	4ba5      	ldr	r3, [pc, #660]	@ (800cca8 <Move_Action_Nopid_Forward_Ctrl+0x2d8>)
 800ca12:	ed93 7a00 	vldr	s14, [r3]
 800ca16:	edd7 7a01 	vldr	s15, [r7, #4]
 800ca1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ca1e:	eef1 7a67 	vneg.f32	s15, s15
 800ca22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ca26:	ee17 3a90 	vmov	r3, s15
 800ca2a:	b29b      	uxth	r3, r3
 800ca2c:	837b      	strh	r3, [r7, #26]
	uint16_t Y_Diff = (uint16_t)ABS(Y_NOW - y_goal);
 800ca2e:	4b9f      	ldr	r3, [pc, #636]	@ (800ccac <Move_Action_Nopid_Forward_Ctrl+0x2dc>)
 800ca30:	edd3 7a00 	vldr	s15, [r3]
 800ca34:	eeb1 7a67 	vneg.f32	s14, s15
 800ca38:	edd7 7a00 	vldr	s15, [r7]
 800ca3c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ca40:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800ca44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca48:	dd0e      	ble.n	800ca68 <Move_Action_Nopid_Forward_Ctrl+0x98>
 800ca4a:	4b98      	ldr	r3, [pc, #608]	@ (800ccac <Move_Action_Nopid_Forward_Ctrl+0x2dc>)
 800ca4c:	edd3 7a00 	vldr	s15, [r3]
 800ca50:	eeb1 7a67 	vneg.f32	s14, s15
 800ca54:	edd7 7a00 	vldr	s15, [r7]
 800ca58:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ca5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ca60:	ee17 3a90 	vmov	r3, s15
 800ca64:	b29b      	uxth	r3, r3
 800ca66:	e00f      	b.n	800ca88 <Move_Action_Nopid_Forward_Ctrl+0xb8>
 800ca68:	4b90      	ldr	r3, [pc, #576]	@ (800ccac <Move_Action_Nopid_Forward_Ctrl+0x2dc>)
 800ca6a:	edd3 7a00 	vldr	s15, [r3]
 800ca6e:	eeb1 7a67 	vneg.f32	s14, s15
 800ca72:	edd7 7a00 	vldr	s15, [r7]
 800ca76:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ca7a:	eef1 7a67 	vneg.f32	s15, s15
 800ca7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ca82:	ee17 3a90 	vmov	r3, s15
 800ca86:	b29b      	uxth	r3, r3
 800ca88:	833b      	strh	r3, [r7, #24]
	char X_send[8];
	char Y_send[8];
	sprintf(X_send, "%d", X_Diff);
 800ca8a:	8b7a      	ldrh	r2, [r7, #26]
 800ca8c:	f107 0310 	add.w	r3, r7, #16
 800ca90:	4987      	ldr	r1, [pc, #540]	@ (800ccb0 <Move_Action_Nopid_Forward_Ctrl+0x2e0>)
 800ca92:	4618      	mov	r0, r3
 800ca94:	f002 faea 	bl	800f06c <siprintf>
	sprintf(Y_send, "%d", Y_Diff);
 800ca98:	8b3a      	ldrh	r2, [r7, #24]
 800ca9a:	f107 0308 	add.w	r3, r7, #8
 800ca9e:	4984      	ldr	r1, [pc, #528]	@ (800ccb0 <Move_Action_Nopid_Forward_Ctrl+0x2e0>)
 800caa0:	4618      	mov	r0, r3
 800caa2:	f002 fae3 	bl	800f06c <siprintf>
	if( X_Diff <  10 )
 800caa6:	8b7b      	ldrh	r3, [r7, #26]
 800caa8:	2b09      	cmp	r3, #9
 800caaa:	d806      	bhi.n	800caba <Move_Action_Nopid_Forward_Ctrl+0xea>
		HAL_UART_Transmit(&huart10, (uint8_t*) "X_Diff = ", sizeof("X_Diff = ") - 2,0xffff);
 800caac:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800cab0:	2208      	movs	r2, #8
 800cab2:	4980      	ldr	r1, [pc, #512]	@ (800ccb4 <Move_Action_Nopid_Forward_Ctrl+0x2e4>)
 800cab4:	4880      	ldr	r0, [pc, #512]	@ (800ccb8 <Move_Action_Nopid_Forward_Ctrl+0x2e8>)
 800cab6:	f7fb ff8d 	bl	80089d4 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart10, (uint8_t*) X_send, sizeof(X_send) - 1,0xffff);
 800caba:	f107 0110 	add.w	r1, r7, #16
 800cabe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800cac2:	2207      	movs	r2, #7
 800cac4:	487c      	ldr	r0, [pc, #496]	@ (800ccb8 <Move_Action_Nopid_Forward_Ctrl+0x2e8>)
 800cac6:	f7fb ff85 	bl	80089d4 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart10, (uint8_t*) "\n", sizeof("\n= ") - 1,0xffff);
 800caca:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800cace:	2203      	movs	r2, #3
 800cad0:	497a      	ldr	r1, [pc, #488]	@ (800ccbc <Move_Action_Nopid_Forward_Ctrl+0x2ec>)
 800cad2:	4879      	ldr	r0, [pc, #484]	@ (800ccb8 <Move_Action_Nopid_Forward_Ctrl+0x2e8>)
 800cad4:	f7fb ff7e 	bl	80089d4 <HAL_UART_Transmit>
	if( Y_Diff <  10 )
 800cad8:	8b3b      	ldrh	r3, [r7, #24]
 800cada:	2b09      	cmp	r3, #9
 800cadc:	d806      	bhi.n	800caec <Move_Action_Nopid_Forward_Ctrl+0x11c>
		HAL_UART_Transmit(&huart10, (uint8_t*) "Y_Diff = ", sizeof("X_Diff = ") - 2,0xffff);
 800cade:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800cae2:	2208      	movs	r2, #8
 800cae4:	4976      	ldr	r1, [pc, #472]	@ (800ccc0 <Move_Action_Nopid_Forward_Ctrl+0x2f0>)
 800cae6:	4874      	ldr	r0, [pc, #464]	@ (800ccb8 <Move_Action_Nopid_Forward_Ctrl+0x2e8>)
 800cae8:	f7fb ff74 	bl	80089d4 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart10, (uint8_t*) Y_send, sizeof(Y_send) - 1,0xffff);
 800caec:	f107 0108 	add.w	r1, r7, #8
 800caf0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800caf4:	2207      	movs	r2, #7
 800caf6:	4870      	ldr	r0, [pc, #448]	@ (800ccb8 <Move_Action_Nopid_Forward_Ctrl+0x2e8>)
 800caf8:	f7fb ff6c 	bl	80089d4 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart10, (uint8_t*) "\n", sizeof("\n= ") - 1,0xffff);
 800cafc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800cb00:	2203      	movs	r2, #3
 800cb02:	496e      	ldr	r1, [pc, #440]	@ (800ccbc <Move_Action_Nopid_Forward_Ctrl+0x2ec>)
 800cb04:	486c      	ldr	r0, [pc, #432]	@ (800ccb8 <Move_Action_Nopid_Forward_Ctrl+0x2e8>)
 800cb06:	f7fb ff65 	bl	80089d4 <HAL_UART_Transmit>

	if(( X_Diff <  10 ) && ( Y_Diff < 10 ))
 800cb0a:	8b7b      	ldrh	r3, [r7, #26]
 800cb0c:	2b09      	cmp	r3, #9
 800cb0e:	d804      	bhi.n	800cb1a <Move_Action_Nopid_Forward_Ctrl+0x14a>
 800cb10:	8b3b      	ldrh	r3, [r7, #24]
 800cb12:	2b09      	cmp	r3, #9
 800cb14:	d801      	bhi.n	800cb1a <Move_Action_Nopid_Forward_Ctrl+0x14a>
		return true;
 800cb16:	2301      	movs	r3, #1
 800cb18:	e0c2      	b.n	800cca0 <Move_Action_Nopid_Forward_Ctrl+0x2d0>
//	X差值不满足要求
	if( X_Diff >=  10 )
 800cb1a:	8b7b      	ldrh	r3, [r7, #26]
 800cb1c:	2b09      	cmp	r3, #9
 800cb1e:	d95b      	bls.n	800cbd8 <Move_Action_Nopid_Forward_Ctrl+0x208>
	{
//		X与当前目标值差值小于0
		if ((X_NOW - x_goal) < 0)
 800cb20:	4b61      	ldr	r3, [pc, #388]	@ (800cca8 <Move_Action_Nopid_Forward_Ctrl+0x2d8>)
 800cb22:	ed93 7a00 	vldr	s14, [r3]
 800cb26:	edd7 7a01 	vldr	s15, [r7, #4]
 800cb2a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cb2e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800cb32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb36:	d521      	bpl.n	800cb7c <Move_Action_Nopid_Forward_Ctrl+0x1ac>
		{
			bool temp = Move_Line(Action_Speed, Action_Acc, X_Diff* 3);
 800cb38:	8b7a      	ldrh	r2, [r7, #26]
 800cb3a:	4613      	mov	r3, r2
 800cb3c:	005b      	lsls	r3, r3, #1
 800cb3e:	4413      	add	r3, r2
 800cb40:	461a      	mov	r2, r3
 800cb42:	2164      	movs	r1, #100	@ 0x64
 800cb44:	2064      	movs	r0, #100	@ 0x64
 800cb46:	f7ff f94f 	bl	800bde8 <Move_Line>
 800cb4a:	4603      	mov	r3, r0
 800cb4c:	77fb      	strb	r3, [r7, #31]
			HAL_Delay(5);
 800cb4e:	2005      	movs	r0, #5
 800cb50:	f7f6 f9ae 	bl	8002eb0 <HAL_Delay>
			while (temp != true)
 800cb54:	e00a      	b.n	800cb6c <Move_Action_Nopid_Forward_Ctrl+0x19c>
			{
				temp = Move_Line(Action_Speed, Action_Acc, X_Diff * 3);
 800cb56:	8b7a      	ldrh	r2, [r7, #26]
 800cb58:	4613      	mov	r3, r2
 800cb5a:	005b      	lsls	r3, r3, #1
 800cb5c:	4413      	add	r3, r2
 800cb5e:	461a      	mov	r2, r3
 800cb60:	2164      	movs	r1, #100	@ 0x64
 800cb62:	2064      	movs	r0, #100	@ 0x64
 800cb64:	f7ff f940 	bl	800bde8 <Move_Line>
 800cb68:	4603      	mov	r3, r0
 800cb6a:	77fb      	strb	r3, [r7, #31]
			while (temp != true)
 800cb6c:	7ffb      	ldrb	r3, [r7, #31]
 800cb6e:	f083 0301 	eor.w	r3, r3, #1
 800cb72:	b2db      	uxtb	r3, r3
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d1ee      	bne.n	800cb56 <Move_Action_Nopid_Forward_Ctrl+0x186>
			}
			return false;
 800cb78:	2300      	movs	r3, #0
 800cb7a:	e091      	b.n	800cca0 <Move_Action_Nopid_Forward_Ctrl+0x2d0>
		}
			// 当前X坐标大于目标X
		else if ((X_NOW - x_goal) > 0)
 800cb7c:	4b4a      	ldr	r3, [pc, #296]	@ (800cca8 <Move_Action_Nopid_Forward_Ctrl+0x2d8>)
 800cb7e:	ed93 7a00 	vldr	s14, [r3]
 800cb82:	edd7 7a01 	vldr	s15, [r7, #4]
 800cb86:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cb8a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800cb8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb92:	dd21      	ble.n	800cbd8 <Move_Action_Nopid_Forward_Ctrl+0x208>
		{
			bool temp = Move_Back(Action_Speed, Action_Acc, X_Diff * 3);
 800cb94:	8b7a      	ldrh	r2, [r7, #26]
 800cb96:	4613      	mov	r3, r2
 800cb98:	005b      	lsls	r3, r3, #1
 800cb9a:	4413      	add	r3, r2
 800cb9c:	461a      	mov	r2, r3
 800cb9e:	2164      	movs	r1, #100	@ 0x64
 800cba0:	2064      	movs	r0, #100	@ 0x64
 800cba2:	f7ff f9dd 	bl	800bf60 <Move_Back>
 800cba6:	4603      	mov	r3, r0
 800cba8:	77bb      	strb	r3, [r7, #30]
			HAL_Delay(5);
 800cbaa:	2005      	movs	r0, #5
 800cbac:	f7f6 f980 	bl	8002eb0 <HAL_Delay>
			while (temp != true)
 800cbb0:	e00a      	b.n	800cbc8 <Move_Action_Nopid_Forward_Ctrl+0x1f8>
			{
				temp = Move_Back(Action_Speed, Action_Acc, X_Diff * 3);
 800cbb2:	8b7a      	ldrh	r2, [r7, #26]
 800cbb4:	4613      	mov	r3, r2
 800cbb6:	005b      	lsls	r3, r3, #1
 800cbb8:	4413      	add	r3, r2
 800cbba:	461a      	mov	r2, r3
 800cbbc:	2164      	movs	r1, #100	@ 0x64
 800cbbe:	2064      	movs	r0, #100	@ 0x64
 800cbc0:	f7ff f9ce 	bl	800bf60 <Move_Back>
 800cbc4:	4603      	mov	r3, r0
 800cbc6:	77bb      	strb	r3, [r7, #30]
			while (temp != true)
 800cbc8:	7fbb      	ldrb	r3, [r7, #30]
 800cbca:	f083 0301 	eor.w	r3, r3, #1
 800cbce:	b2db      	uxtb	r3, r3
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d1ee      	bne.n	800cbb2 <Move_Action_Nopid_Forward_Ctrl+0x1e2>
			}
			return false;
 800cbd4:	2300      	movs	r3, #0
 800cbd6:	e063      	b.n	800cca0 <Move_Action_Nopid_Forward_Ctrl+0x2d0>
		}
	}
	if ( Y_Diff >= 10 )
 800cbd8:	8b3b      	ldrh	r3, [r7, #24]
 800cbda:	2b09      	cmp	r3, #9
 800cbdc:	d95f      	bls.n	800cc9e <Move_Action_Nopid_Forward_Ctrl+0x2ce>
	{
		// 当前Y坐标小于目标Y
		if ((Y_NOW - y_goal) < 0)
 800cbde:	4b33      	ldr	r3, [pc, #204]	@ (800ccac <Move_Action_Nopid_Forward_Ctrl+0x2dc>)
 800cbe0:	edd3 7a00 	vldr	s15, [r3]
 800cbe4:	eeb1 7a67 	vneg.f32	s14, s15
 800cbe8:	edd7 7a00 	vldr	s15, [r7]
 800cbec:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cbf0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800cbf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cbf8:	d521      	bpl.n	800cc3e <Move_Action_Nopid_Forward_Ctrl+0x26e>
		{
			bool temp = Move_Right(Action_Speed, Action_Acc,Y_Diff * 3);
 800cbfa:	8b3a      	ldrh	r2, [r7, #24]
 800cbfc:	4613      	mov	r3, r2
 800cbfe:	005b      	lsls	r3, r3, #1
 800cc00:	4413      	add	r3, r2
 800cc02:	461a      	mov	r2, r3
 800cc04:	2164      	movs	r1, #100	@ 0x64
 800cc06:	2064      	movs	r0, #100	@ 0x64
 800cc08:	f7ff fa66 	bl	800c0d8 <Move_Right>
 800cc0c:	4603      	mov	r3, r0
 800cc0e:	777b      	strb	r3, [r7, #29]
			HAL_Delay(5);
 800cc10:	2005      	movs	r0, #5
 800cc12:	f7f6 f94d 	bl	8002eb0 <HAL_Delay>
			while (temp != true)
 800cc16:	e00a      	b.n	800cc2e <Move_Action_Nopid_Forward_Ctrl+0x25e>
			{
				temp = Move_Right(Action_Speed, Action_Acc, Y_Diff * 3);
 800cc18:	8b3a      	ldrh	r2, [r7, #24]
 800cc1a:	4613      	mov	r3, r2
 800cc1c:	005b      	lsls	r3, r3, #1
 800cc1e:	4413      	add	r3, r2
 800cc20:	461a      	mov	r2, r3
 800cc22:	2164      	movs	r1, #100	@ 0x64
 800cc24:	2064      	movs	r0, #100	@ 0x64
 800cc26:	f7ff fa57 	bl	800c0d8 <Move_Right>
 800cc2a:	4603      	mov	r3, r0
 800cc2c:	777b      	strb	r3, [r7, #29]
			while (temp != true)
 800cc2e:	7f7b      	ldrb	r3, [r7, #29]
 800cc30:	f083 0301 	eor.w	r3, r3, #1
 800cc34:	b2db      	uxtb	r3, r3
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d1ee      	bne.n	800cc18 <Move_Action_Nopid_Forward_Ctrl+0x248>
			}
			return false;
 800cc3a:	2300      	movs	r3, #0
 800cc3c:	e030      	b.n	800cca0 <Move_Action_Nopid_Forward_Ctrl+0x2d0>
		}
		// 当前Y坐标大于目标Y
		else if (Y_NOW - y_goal > 0)
 800cc3e:	4b1b      	ldr	r3, [pc, #108]	@ (800ccac <Move_Action_Nopid_Forward_Ctrl+0x2dc>)
 800cc40:	edd3 7a00 	vldr	s15, [r3]
 800cc44:	eeb1 7a67 	vneg.f32	s14, s15
 800cc48:	edd7 7a00 	vldr	s15, [r7]
 800cc4c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cc50:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800cc54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc58:	dd21      	ble.n	800cc9e <Move_Action_Nopid_Forward_Ctrl+0x2ce>
		{
			bool temp = Move_Left(Action_Speed, Action_Acc, Y_Diff * 3);
 800cc5a:	8b3a      	ldrh	r2, [r7, #24]
 800cc5c:	4613      	mov	r3, r2
 800cc5e:	005b      	lsls	r3, r3, #1
 800cc60:	4413      	add	r3, r2
 800cc62:	461a      	mov	r2, r3
 800cc64:	2164      	movs	r1, #100	@ 0x64
 800cc66:	2064      	movs	r0, #100	@ 0x64
 800cc68:	f7ff f91c 	bl	800bea4 <Move_Left>
 800cc6c:	4603      	mov	r3, r0
 800cc6e:	773b      	strb	r3, [r7, #28]
			HAL_Delay(5);
 800cc70:	2005      	movs	r0, #5
 800cc72:	f7f6 f91d 	bl	8002eb0 <HAL_Delay>
			while (temp != true)
 800cc76:	e00a      	b.n	800cc8e <Move_Action_Nopid_Forward_Ctrl+0x2be>
			{
				temp = Move_Left(Action_Speed, Action_Acc, Y_Diff * 3);
 800cc78:	8b3a      	ldrh	r2, [r7, #24]
 800cc7a:	4613      	mov	r3, r2
 800cc7c:	005b      	lsls	r3, r3, #1
 800cc7e:	4413      	add	r3, r2
 800cc80:	461a      	mov	r2, r3
 800cc82:	2164      	movs	r1, #100	@ 0x64
 800cc84:	2064      	movs	r0, #100	@ 0x64
 800cc86:	f7ff f90d 	bl	800bea4 <Move_Left>
 800cc8a:	4603      	mov	r3, r0
 800cc8c:	773b      	strb	r3, [r7, #28]
			while (temp != true)
 800cc8e:	7f3b      	ldrb	r3, [r7, #28]
 800cc90:	f083 0301 	eor.w	r3, r3, #1
 800cc94:	b2db      	uxtb	r3, r3
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d1ee      	bne.n	800cc78 <Move_Action_Nopid_Forward_Ctrl+0x2a8>
			}
			return false;
 800cc9a:	2300      	movs	r3, #0
 800cc9c:	e000      	b.n	800cca0 <Move_Action_Nopid_Forward_Ctrl+0x2d0>
		}
	}
	return false;
 800cc9e:	2300      	movs	r3, #0
}
 800cca0:	4618      	mov	r0, r3
 800cca2:	3720      	adds	r7, #32
 800cca4:	46bd      	mov	sp, r7
 800cca6:	bd80      	pop	{r7, pc}
 800cca8:	24000af0 	.word	0x24000af0
 800ccac:	24000af4 	.word	0x24000af4
 800ccb0:	080125b0 	.word	0x080125b0
 800ccb4:	080125b4 	.word	0x080125b4
 800ccb8:	24000a58 	.word	0x24000a58
 800ccbc:	080125c0 	.word	0x080125c0
 800ccc0:	080125c4 	.word	0x080125c4

0800ccc4 <Host2SCS>:
}

//1个16位数拆分为2个8位数
//DataL为低位，DataH为高位
void Host2SCS(uint8_t *DataL, uint8_t *DataH, int Data)
{
 800ccc4:	b480      	push	{r7}
 800ccc6:	b085      	sub	sp, #20
 800ccc8:	af00      	add	r7, sp, #0
 800ccca:	60f8      	str	r0, [r7, #12]
 800cccc:	60b9      	str	r1, [r7, #8]
 800ccce:	607a      	str	r2, [r7, #4]
	if (End)
 800ccd0:	4b0e      	ldr	r3, [pc, #56]	@ (800cd0c <Host2SCS+0x48>)
 800ccd2:	781b      	ldrb	r3, [r3, #0]
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d009      	beq.n	800ccec <Host2SCS+0x28>
	{
		*DataL = (Data >> 8);
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	121b      	asrs	r3, r3, #8
 800ccdc:	b2da      	uxtb	r2, r3
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	701a      	strb	r2, [r3, #0]
		*DataH = (Data & 0xff);
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	b2da      	uxtb	r2, r3
 800cce6:	68bb      	ldr	r3, [r7, #8]
 800cce8:	701a      	strb	r2, [r3, #0]
	else
	{
		*DataH = (Data >> 8);
		*DataL = (Data & 0xff);
	}
}
 800ccea:	e008      	b.n	800ccfe <Host2SCS+0x3a>
		*DataH = (Data >> 8);
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	121b      	asrs	r3, r3, #8
 800ccf0:	b2da      	uxtb	r2, r3
 800ccf2:	68bb      	ldr	r3, [r7, #8]
 800ccf4:	701a      	strb	r2, [r3, #0]
		*DataL = (Data & 0xff);
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	b2da      	uxtb	r2, r3
 800ccfa:	68fb      	ldr	r3, [r7, #12]
 800ccfc:	701a      	strb	r2, [r3, #0]
}
 800ccfe:	bf00      	nop
 800cd00:	3714      	adds	r7, #20
 800cd02:	46bd      	mov	sp, r7
 800cd04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd08:	4770      	bx	lr
 800cd0a:	bf00      	nop
 800cd0c:	24000c2a 	.word	0x24000c2a

0800cd10 <writeBuf>:
	return Data;
}

void writeBuf(uint8_t ID, uint8_t MemAddr, uint8_t *nDat, uint8_t nLen,
		uint8_t Fun)
{
 800cd10:	b580      	push	{r7, lr}
 800cd12:	b086      	sub	sp, #24
 800cd14:	af00      	add	r7, sp, #0
 800cd16:	603a      	str	r2, [r7, #0]
 800cd18:	461a      	mov	r2, r3
 800cd1a:	4603      	mov	r3, r0
 800cd1c:	71fb      	strb	r3, [r7, #7]
 800cd1e:	460b      	mov	r3, r1
 800cd20:	71bb      	strb	r3, [r7, #6]
 800cd22:	4613      	mov	r3, r2
 800cd24:	717b      	strb	r3, [r7, #5]
	uint8_t i;
	uint8_t msgLen = 2;
 800cd26:	2302      	movs	r3, #2
 800cd28:	75bb      	strb	r3, [r7, #22]
	uint8_t bBuf[6];
	uint8_t CheckSum = 0;
 800cd2a:	2300      	movs	r3, #0
 800cd2c:	73fb      	strb	r3, [r7, #15]
	bBuf[0] = 0xff;
 800cd2e:	23ff      	movs	r3, #255	@ 0xff
 800cd30:	743b      	strb	r3, [r7, #16]
	bBuf[1] = 0xff;
 800cd32:	23ff      	movs	r3, #255	@ 0xff
 800cd34:	747b      	strb	r3, [r7, #17]
	bBuf[2] = ID;
 800cd36:	79fb      	ldrb	r3, [r7, #7]
 800cd38:	74bb      	strb	r3, [r7, #18]
	bBuf[4] = Fun;
 800cd3a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800cd3e:	753b      	strb	r3, [r7, #20]
	if (nDat)
 800cd40:	683b      	ldr	r3, [r7, #0]
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	d010      	beq.n	800cd68 <writeBuf+0x58>
	{
		msgLen += nLen + 1;
 800cd46:	797a      	ldrb	r2, [r7, #5]
 800cd48:	7dbb      	ldrb	r3, [r7, #22]
 800cd4a:	4413      	add	r3, r2
 800cd4c:	b2db      	uxtb	r3, r3
 800cd4e:	3301      	adds	r3, #1
 800cd50:	75bb      	strb	r3, [r7, #22]
		bBuf[3] = msgLen;
 800cd52:	7dbb      	ldrb	r3, [r7, #22]
 800cd54:	74fb      	strb	r3, [r7, #19]
		bBuf[5] = MemAddr;
 800cd56:	79bb      	ldrb	r3, [r7, #6]
 800cd58:	757b      	strb	r3, [r7, #21]
		writeSCS(bBuf, 6);
 800cd5a:	f107 0310 	add.w	r3, r7, #16
 800cd5e:	2106      	movs	r1, #6
 800cd60:	4618      	mov	r0, r3
 800cd62:	f000 f911 	bl	800cf88 <writeSCS>
 800cd66:	e007      	b.n	800cd78 <writeBuf+0x68>

	}
	else
	{
		bBuf[3] = msgLen;
 800cd68:	7dbb      	ldrb	r3, [r7, #22]
 800cd6a:	74fb      	strb	r3, [r7, #19]
		writeSCS(bBuf, 5);
 800cd6c:	f107 0310 	add.w	r3, r7, #16
 800cd70:	2105      	movs	r1, #5
 800cd72:	4618      	mov	r0, r3
 800cd74:	f000 f908 	bl	800cf88 <writeSCS>
	}
	CheckSum = ID + msgLen + Fun + MemAddr;
 800cd78:	79fa      	ldrb	r2, [r7, #7]
 800cd7a:	7dbb      	ldrb	r3, [r7, #22]
 800cd7c:	4413      	add	r3, r2
 800cd7e:	b2da      	uxtb	r2, r3
 800cd80:	f897 3020 	ldrb.w	r3, [r7, #32]
 800cd84:	4413      	add	r3, r2
 800cd86:	b2da      	uxtb	r2, r3
 800cd88:	79bb      	ldrb	r3, [r7, #6]
 800cd8a:	4413      	add	r3, r2
 800cd8c:	b2db      	uxtb	r3, r3
 800cd8e:	73fb      	strb	r3, [r7, #15]
	if (nDat)
 800cd90:	683b      	ldr	r3, [r7, #0]
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d016      	beq.n	800cdc4 <writeBuf+0xb4>
	{
		for (i = 0; i < nLen; i++)
 800cd96:	2300      	movs	r3, #0
 800cd98:	75fb      	strb	r3, [r7, #23]
 800cd9a:	e00a      	b.n	800cdb2 <writeBuf+0xa2>
		{
			CheckSum += nDat[i];
 800cd9c:	7dfb      	ldrb	r3, [r7, #23]
 800cd9e:	683a      	ldr	r2, [r7, #0]
 800cda0:	4413      	add	r3, r2
 800cda2:	781a      	ldrb	r2, [r3, #0]
 800cda4:	7bfb      	ldrb	r3, [r7, #15]
 800cda6:	4413      	add	r3, r2
 800cda8:	b2db      	uxtb	r3, r3
 800cdaa:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < nLen; i++)
 800cdac:	7dfb      	ldrb	r3, [r7, #23]
 800cdae:	3301      	adds	r3, #1
 800cdb0:	75fb      	strb	r3, [r7, #23]
 800cdb2:	7dfa      	ldrb	r2, [r7, #23]
 800cdb4:	797b      	ldrb	r3, [r7, #5]
 800cdb6:	429a      	cmp	r2, r3
 800cdb8:	d3f0      	bcc.n	800cd9c <writeBuf+0x8c>
		}
		writeSCS(nDat, nLen);
 800cdba:	797b      	ldrb	r3, [r7, #5]
 800cdbc:	4619      	mov	r1, r3
 800cdbe:	6838      	ldr	r0, [r7, #0]
 800cdc0:	f000 f8e2 	bl	800cf88 <writeSCS>
	}
	CheckSum = ~CheckSum;
 800cdc4:	7bfb      	ldrb	r3, [r7, #15]
 800cdc6:	43db      	mvns	r3, r3
 800cdc8:	b2db      	uxtb	r3, r3
 800cdca:	73fb      	strb	r3, [r7, #15]
	writeSCS(&CheckSum, 1);
 800cdcc:	f107 030f 	add.w	r3, r7, #15
 800cdd0:	2101      	movs	r1, #1
 800cdd2:	4618      	mov	r0, r3
 800cdd4:	f000 f8d8 	bl	800cf88 <writeSCS>
}
 800cdd8:	bf00      	nop
 800cdda:	3718      	adds	r7, #24
 800cddc:	46bd      	mov	sp, r7
 800cdde:	bd80      	pop	{r7, pc}

0800cde0 <genWrite>:

//普通写指令
//舵机ID，MemAddr内存表地址，写入数据，写入长度
int genWrite(uint8_t ID, uint8_t MemAddr, uint8_t *nDat, uint8_t nLen)
{
 800cde0:	b580      	push	{r7, lr}
 800cde2:	b084      	sub	sp, #16
 800cde4:	af02      	add	r7, sp, #8
 800cde6:	603a      	str	r2, [r7, #0]
 800cde8:	461a      	mov	r2, r3
 800cdea:	4603      	mov	r3, r0
 800cdec:	71fb      	strb	r3, [r7, #7]
 800cdee:	460b      	mov	r3, r1
 800cdf0:	71bb      	strb	r3, [r7, #6]
 800cdf2:	4613      	mov	r3, r2
 800cdf4:	717b      	strb	r3, [r7, #5]
	rFlushSCS();
 800cdf6:	f000 f906 	bl	800d006 <rFlushSCS>
	writeBuf(ID, MemAddr, nDat, nLen, INST_WRITE);
 800cdfa:	797b      	ldrb	r3, [r7, #5]
 800cdfc:	79b9      	ldrb	r1, [r7, #6]
 800cdfe:	79f8      	ldrb	r0, [r7, #7]
 800ce00:	2203      	movs	r2, #3
 800ce02:	9200      	str	r2, [sp, #0]
 800ce04:	683a      	ldr	r2, [r7, #0]
 800ce06:	f7ff ff83 	bl	800cd10 <writeBuf>
	wFlushSCS();
 800ce0a:	f000 f903 	bl	800d014 <wFlushSCS>
	return Ack(ID);
 800ce0e:	79fb      	ldrb	r3, [r7, #7]
 800ce10:	4618      	mov	r0, r3
 800ce12:	f000 f82f 	bl	800ce74 <Ack>
 800ce16:	4603      	mov	r3, r0
}
 800ce18:	4618      	mov	r0, r3
 800ce1a:	3708      	adds	r7, #8
 800ce1c:	46bd      	mov	sp, r7
 800ce1e:	bd80      	pop	{r7, pc}

0800ce20 <checkHead>:
	Error = bBuf[2];
	return bBuf[0];
}

int checkHead(void)
{
 800ce20:	b580      	push	{r7, lr}
 800ce22:	b082      	sub	sp, #8
 800ce24:	af00      	add	r7, sp, #0
	uint8_t bDat;
	uint8_t bBuf[2] =
 800ce26:	2300      	movs	r3, #0
 800ce28:	80bb      	strh	r3, [r7, #4]
	{ 0, 0 };
	uint8_t Cnt = 0;
 800ce2a:	2300      	movs	r3, #0
 800ce2c:	71fb      	strb	r3, [r7, #7]
	while (1)
	{
		if (!readSCS(&bDat, 1))
 800ce2e:	1dbb      	adds	r3, r7, #6
 800ce30:	2101      	movs	r1, #1
 800ce32:	4618      	mov	r0, r3
 800ce34:	f000 f894 	bl	800cf60 <readSCS>
 800ce38:	4603      	mov	r3, r0
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d101      	bne.n	800ce42 <checkHead+0x22>
		{
			return 0;
 800ce3e:	2300      	movs	r3, #0
 800ce40:	e013      	b.n	800ce6a <checkHead+0x4a>
		}
		bBuf[1] = bBuf[0];
 800ce42:	793b      	ldrb	r3, [r7, #4]
 800ce44:	717b      	strb	r3, [r7, #5]
		bBuf[0] = bDat;
 800ce46:	79bb      	ldrb	r3, [r7, #6]
 800ce48:	713b      	strb	r3, [r7, #4]
		if (bBuf[0] == 0xff && bBuf[1] == 0xff)
 800ce4a:	793b      	ldrb	r3, [r7, #4]
 800ce4c:	2bff      	cmp	r3, #255	@ 0xff
 800ce4e:	d102      	bne.n	800ce56 <checkHead+0x36>
 800ce50:	797b      	ldrb	r3, [r7, #5]
 800ce52:	2bff      	cmp	r3, #255	@ 0xff
 800ce54:	d007      	beq.n	800ce66 <checkHead+0x46>
		{
			break;
		}
		Cnt++;
 800ce56:	79fb      	ldrb	r3, [r7, #7]
 800ce58:	3301      	adds	r3, #1
 800ce5a:	71fb      	strb	r3, [r7, #7]
		if (Cnt > 10)
 800ce5c:	79fb      	ldrb	r3, [r7, #7]
 800ce5e:	2b0a      	cmp	r3, #10
 800ce60:	d9e5      	bls.n	800ce2e <checkHead+0xe>
		{
			return 0;
 800ce62:	2300      	movs	r3, #0
 800ce64:	e001      	b.n	800ce6a <checkHead+0x4a>
			break;
 800ce66:	bf00      	nop
		}
	}
	return 1;
 800ce68:	2301      	movs	r3, #1
}
 800ce6a:	4618      	mov	r0, r3
 800ce6c:	3708      	adds	r7, #8
 800ce6e:	46bd      	mov	sp, r7
 800ce70:	bd80      	pop	{r7, pc}
	...

0800ce74 <Ack>:

//指令应答
int Ack(uint8_t ID)
{
 800ce74:	b580      	push	{r7, lr}
 800ce76:	b084      	sub	sp, #16
 800ce78:	af00      	add	r7, sp, #0
 800ce7a:	4603      	mov	r3, r0
 800ce7c:	71fb      	strb	r3, [r7, #7]
	uint8_t bBuf[4];
	uint8_t calSum;
	Error = 0;
 800ce7e:	4b1f      	ldr	r3, [pc, #124]	@ (800cefc <Ack+0x88>)
 800ce80:	2200      	movs	r2, #0
 800ce82:	701a      	strb	r2, [r3, #0]
	if (ID != 0xfe && Level)
 800ce84:	79fb      	ldrb	r3, [r7, #7]
 800ce86:	2bfe      	cmp	r3, #254	@ 0xfe
 800ce88:	d032      	beq.n	800cef0 <Ack+0x7c>
 800ce8a:	4b1d      	ldr	r3, [pc, #116]	@ (800cf00 <Ack+0x8c>)
 800ce8c:	781b      	ldrb	r3, [r3, #0]
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d02e      	beq.n	800cef0 <Ack+0x7c>
	{
		if (!checkHead())
 800ce92:	f7ff ffc5 	bl	800ce20 <checkHead>
 800ce96:	4603      	mov	r3, r0
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d101      	bne.n	800cea0 <Ack+0x2c>
		{
			return 0;
 800ce9c:	2300      	movs	r3, #0
 800ce9e:	e028      	b.n	800cef2 <Ack+0x7e>
		}
		if (readSCS(bBuf, 4) != 4)
 800cea0:	f107 0308 	add.w	r3, r7, #8
 800cea4:	2104      	movs	r1, #4
 800cea6:	4618      	mov	r0, r3
 800cea8:	f000 f85a 	bl	800cf60 <readSCS>
 800ceac:	4603      	mov	r3, r0
 800ceae:	2b04      	cmp	r3, #4
 800ceb0:	d001      	beq.n	800ceb6 <Ack+0x42>
		{
			return 0;
 800ceb2:	2300      	movs	r3, #0
 800ceb4:	e01d      	b.n	800cef2 <Ack+0x7e>
		}
		if (bBuf[0] != ID)
 800ceb6:	7a3b      	ldrb	r3, [r7, #8]
 800ceb8:	79fa      	ldrb	r2, [r7, #7]
 800ceba:	429a      	cmp	r2, r3
 800cebc:	d001      	beq.n	800cec2 <Ack+0x4e>
		{
			return 0;
 800cebe:	2300      	movs	r3, #0
 800cec0:	e017      	b.n	800cef2 <Ack+0x7e>
		}
		if (bBuf[1] != 2)
 800cec2:	7a7b      	ldrb	r3, [r7, #9]
 800cec4:	2b02      	cmp	r3, #2
 800cec6:	d001      	beq.n	800cecc <Ack+0x58>
		{
			return 0;
 800cec8:	2300      	movs	r3, #0
 800ceca:	e012      	b.n	800cef2 <Ack+0x7e>
		}
		calSum = ~(bBuf[0] + bBuf[1] + bBuf[2]);
 800cecc:	7a3a      	ldrb	r2, [r7, #8]
 800cece:	7a7b      	ldrb	r3, [r7, #9]
 800ced0:	4413      	add	r3, r2
 800ced2:	b2da      	uxtb	r2, r3
 800ced4:	7abb      	ldrb	r3, [r7, #10]
 800ced6:	4413      	add	r3, r2
 800ced8:	b2db      	uxtb	r3, r3
 800ceda:	43db      	mvns	r3, r3
 800cedc:	73fb      	strb	r3, [r7, #15]
		if (calSum != bBuf[3])
 800cede:	7afb      	ldrb	r3, [r7, #11]
 800cee0:	7bfa      	ldrb	r2, [r7, #15]
 800cee2:	429a      	cmp	r2, r3
 800cee4:	d001      	beq.n	800ceea <Ack+0x76>
		{
			return 0;
 800cee6:	2300      	movs	r3, #0
 800cee8:	e003      	b.n	800cef2 <Ack+0x7e>
		}
		Error = bBuf[2];
 800ceea:	7aba      	ldrb	r2, [r7, #10]
 800ceec:	4b03      	ldr	r3, [pc, #12]	@ (800cefc <Ack+0x88>)
 800ceee:	701a      	strb	r2, [r3, #0]
	}
	return 1;
 800cef0:	2301      	movs	r3, #1
}
 800cef2:	4618      	mov	r0, r3
 800cef4:	3710      	adds	r7, #16
 800cef6:	46bd      	mov	sp, r7
 800cef8:	bd80      	pop	{r7, pc}
 800cefa:	bf00      	nop
 800cefc:	24000c2b 	.word	0x24000c2b
 800cf00:	24000061 	.word	0x24000061

0800cf04 <Uart_Send>:
#include "stm32h7xx_hal.h"
#include "SCS_Uart.h"
#include "usart.h"

void Uart_Send(uint8_t *buf, uint16_t len)
{
 800cf04:	b580      	push	{r7, lr}
 800cf06:	b082      	sub	sp, #8
 800cf08:	af00      	add	r7, sp, #0
 800cf0a:	6078      	str	r0, [r7, #4]
 800cf0c:	460b      	mov	r3, r1
 800cf0e:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&huart6, buf, len, HAL_MAX_DELAY);
 800cf10:	887a      	ldrh	r2, [r7, #2]
 800cf12:	f04f 33ff 	mov.w	r3, #4294967295
 800cf16:	6879      	ldr	r1, [r7, #4]
 800cf18:	4803      	ldr	r0, [pc, #12]	@ (800cf28 <Uart_Send+0x24>)
 800cf1a:	f7fb fd5b 	bl	80089d4 <HAL_UART_Transmit>
}
 800cf1e:	bf00      	nop
 800cf20:	3708      	adds	r7, #8
 800cf22:	46bd      	mov	sp, r7
 800cf24:	bd80      	pop	{r7, pc}
 800cf26:	bf00      	nop
 800cf28:	240009c4 	.word	0x240009c4

0800cf2c <Uart_Read>:

int16_t Uart_Read(uint8_t *buf, uint16_t len, uint32_t timeout)
{
 800cf2c:	b580      	push	{r7, lr}
 800cf2e:	b084      	sub	sp, #16
 800cf30:	af00      	add	r7, sp, #0
 800cf32:	60f8      	str	r0, [r7, #12]
 800cf34:	460b      	mov	r3, r1
 800cf36:	607a      	str	r2, [r7, #4]
 800cf38:	817b      	strh	r3, [r7, #10]
	if (HAL_UART_Receive(&huart6, buf, len, timeout) == HAL_OK)
 800cf3a:	897a      	ldrh	r2, [r7, #10]
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	68f9      	ldr	r1, [r7, #12]
 800cf40:	4806      	ldr	r0, [pc, #24]	@ (800cf5c <Uart_Read+0x30>)
 800cf42:	f7fb fdd5 	bl	8008af0 <HAL_UART_Receive>
 800cf46:	4603      	mov	r3, r0
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d102      	bne.n	800cf52 <Uart_Read+0x26>
	{
		return len;
 800cf4c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800cf50:	e000      	b.n	800cf54 <Uart_Read+0x28>
	}
	else
	{
		return 0;
 800cf52:	2300      	movs	r3, #0
	}
}
 800cf54:	4618      	mov	r0, r3
 800cf56:	3710      	adds	r7, #16
 800cf58:	46bd      	mov	sp, r7
 800cf5a:	bd80      	pop	{r7, pc}
 800cf5c:	240009c4 	.word	0x240009c4

0800cf60 <readSCS>:
uint8_t wBuf[128];
uint8_t wLen = 0;

//UART 接收数据接口
int readSCS(unsigned char *nDat, int nLen)
{
 800cf60:	b580      	push	{r7, lr}
 800cf62:	b082      	sub	sp, #8
 800cf64:	af00      	add	r7, sp, #0
 800cf66:	6078      	str	r0, [r7, #4]
 800cf68:	6039      	str	r1, [r7, #0]
	return Uart_Read(nDat, nLen, IOTimeOut);
 800cf6a:	683b      	ldr	r3, [r7, #0]
 800cf6c:	b29b      	uxth	r3, r3
 800cf6e:	4a05      	ldr	r2, [pc, #20]	@ (800cf84 <readSCS+0x24>)
 800cf70:	6812      	ldr	r2, [r2, #0]
 800cf72:	4619      	mov	r1, r3
 800cf74:	6878      	ldr	r0, [r7, #4]
 800cf76:	f7ff ffd9 	bl	800cf2c <Uart_Read>
 800cf7a:	4603      	mov	r3, r0
}
 800cf7c:	4618      	mov	r0, r3
 800cf7e:	3708      	adds	r7, #8
 800cf80:	46bd      	mov	sp, r7
 800cf82:	bd80      	pop	{r7, pc}
 800cf84:	24000064 	.word	0x24000064

0800cf88 <writeSCS>:

//UART 发送数据接口
int writeSCS(unsigned char *nDat, int nLen)
{
 800cf88:	b480      	push	{r7}
 800cf8a:	b083      	sub	sp, #12
 800cf8c:	af00      	add	r7, sp, #0
 800cf8e:	6078      	str	r0, [r7, #4]
 800cf90:	6039      	str	r1, [r7, #0]
	while (nLen--)
 800cf92:	e014      	b.n	800cfbe <writeSCS+0x36>
	{
		if (wLen < sizeof(wBuf))
 800cf94:	4b10      	ldr	r3, [pc, #64]	@ (800cfd8 <writeSCS+0x50>)
 800cf96:	781b      	ldrb	r3, [r3, #0]
 800cf98:	b25b      	sxtb	r3, r3
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	db0f      	blt.n	800cfbe <writeSCS+0x36>
		{
			wBuf[wLen] = *nDat;
 800cf9e:	4b0e      	ldr	r3, [pc, #56]	@ (800cfd8 <writeSCS+0x50>)
 800cfa0:	781b      	ldrb	r3, [r3, #0]
 800cfa2:	461a      	mov	r2, r3
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	7819      	ldrb	r1, [r3, #0]
 800cfa8:	4b0c      	ldr	r3, [pc, #48]	@ (800cfdc <writeSCS+0x54>)
 800cfaa:	5499      	strb	r1, [r3, r2]
			wLen++;
 800cfac:	4b0a      	ldr	r3, [pc, #40]	@ (800cfd8 <writeSCS+0x50>)
 800cfae:	781b      	ldrb	r3, [r3, #0]
 800cfb0:	3301      	adds	r3, #1
 800cfb2:	b2da      	uxtb	r2, r3
 800cfb4:	4b08      	ldr	r3, [pc, #32]	@ (800cfd8 <writeSCS+0x50>)
 800cfb6:	701a      	strb	r2, [r3, #0]
			nDat++;
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	3301      	adds	r3, #1
 800cfbc:	607b      	str	r3, [r7, #4]
	while (nLen--)
 800cfbe:	683b      	ldr	r3, [r7, #0]
 800cfc0:	1e5a      	subs	r2, r3, #1
 800cfc2:	603a      	str	r2, [r7, #0]
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d1e5      	bne.n	800cf94 <writeSCS+0xc>
		}
	}
	return wLen;
 800cfc8:	4b03      	ldr	r3, [pc, #12]	@ (800cfd8 <writeSCS+0x50>)
 800cfca:	781b      	ldrb	r3, [r3, #0]
}
 800cfcc:	4618      	mov	r0, r3
 800cfce:	370c      	adds	r7, #12
 800cfd0:	46bd      	mov	sp, r7
 800cfd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfd6:	4770      	bx	lr
 800cfd8:	24000cac 	.word	0x24000cac
 800cfdc:	24000c2c 	.word	0x24000c2c

0800cfe0 <nopDelay>:
	return wLen;
}

//等待舵机总线切换(约8us)
void nopDelay(void)
{
 800cfe0:	b480      	push	{r7}
 800cfe2:	b083      	sub	sp, #12
 800cfe4:	af00      	add	r7, sp, #0
	uint16_t i = 500;
 800cfe6:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800cfea:	80fb      	strh	r3, [r7, #6]
	while (i--)
 800cfec:	bf00      	nop
 800cfee:	88fb      	ldrh	r3, [r7, #6]
 800cff0:	1e5a      	subs	r2, r3, #1
 800cff2:	80fa      	strh	r2, [r7, #6]
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	d1fa      	bne.n	800cfee <nopDelay+0xe>
		;
}
 800cff8:	bf00      	nop
 800cffa:	bf00      	nop
 800cffc:	370c      	adds	r7, #12
 800cffe:	46bd      	mov	sp, r7
 800d000:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d004:	4770      	bx	lr

0800d006 <rFlushSCS>:

//接收缓冲区刷新
void rFlushSCS()
{
 800d006:	b580      	push	{r7, lr}
 800d008:	af00      	add	r7, sp, #0
	nopDelay();
 800d00a:	f7ff ffe9 	bl	800cfe0 <nopDelay>
}
 800d00e:	bf00      	nop
 800d010:	bd80      	pop	{r7, pc}
	...

0800d014 <wFlushSCS>:

//发送缓冲区刷新
void wFlushSCS()
{
 800d014:	b580      	push	{r7, lr}
 800d016:	af00      	add	r7, sp, #0
	if (wLen)
 800d018:	4b07      	ldr	r3, [pc, #28]	@ (800d038 <wFlushSCS+0x24>)
 800d01a:	781b      	ldrb	r3, [r3, #0]
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d008      	beq.n	800d032 <wFlushSCS+0x1e>
	{
		Uart_Send(wBuf, wLen);
 800d020:	4b05      	ldr	r3, [pc, #20]	@ (800d038 <wFlushSCS+0x24>)
 800d022:	781b      	ldrb	r3, [r3, #0]
 800d024:	4619      	mov	r1, r3
 800d026:	4805      	ldr	r0, [pc, #20]	@ (800d03c <wFlushSCS+0x28>)
 800d028:	f7ff ff6c 	bl	800cf04 <Uart_Send>
		wLen = 0;
 800d02c:	4b02      	ldr	r3, [pc, #8]	@ (800d038 <wFlushSCS+0x24>)
 800d02e:	2200      	movs	r2, #0
 800d030:	701a      	strb	r2, [r3, #0]
	}
}
 800d032:	bf00      	nop
 800d034:	bd80      	pop	{r7, pc}
 800d036:	bf00      	nop
 800d038:	24000cac 	.word	0x24000cac
 800d03c:	24000c2c 	.word	0x24000c2c

0800d040 <WritePosEx>:
{
	return Err;
}

int WritePosEx(uint8_t ID, int16_t Position, uint16_t Speed, uint8_t ACC)
{
 800d040:	b590      	push	{r4, r7, lr}
 800d042:	b085      	sub	sp, #20
 800d044:	af00      	add	r7, sp, #0
 800d046:	4604      	mov	r4, r0
 800d048:	4608      	mov	r0, r1
 800d04a:	4611      	mov	r1, r2
 800d04c:	461a      	mov	r2, r3
 800d04e:	4623      	mov	r3, r4
 800d050:	71fb      	strb	r3, [r7, #7]
 800d052:	4603      	mov	r3, r0
 800d054:	80bb      	strh	r3, [r7, #4]
 800d056:	460b      	mov	r3, r1
 800d058:	807b      	strh	r3, [r7, #2]
 800d05a:	4613      	mov	r3, r2
 800d05c:	71bb      	strb	r3, [r7, #6]
	uint8_t bBuf[7];
	if (Position < 0)
 800d05e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800d062:	2b00      	cmp	r3, #0
 800d064:	da09      	bge.n	800d07a <WritePosEx+0x3a>
	{
		Position = -Position;
 800d066:	88bb      	ldrh	r3, [r7, #4]
 800d068:	425b      	negs	r3, r3
 800d06a:	b29b      	uxth	r3, r3
 800d06c:	80bb      	strh	r3, [r7, #4]
		Position |= (1 << 15);
 800d06e:	88bb      	ldrh	r3, [r7, #4]
 800d070:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d074:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d078:	80bb      	strh	r3, [r7, #4]
	}

	bBuf[0] = ACC;
 800d07a:	79bb      	ldrb	r3, [r7, #6]
 800d07c:	723b      	strb	r3, [r7, #8]
	Host2SCS(bBuf + 1, bBuf + 2, Position);
 800d07e:	f107 0308 	add.w	r3, r7, #8
 800d082:	3301      	adds	r3, #1
 800d084:	f107 0108 	add.w	r1, r7, #8
 800d088:	3102      	adds	r1, #2
 800d08a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800d08e:	4618      	mov	r0, r3
 800d090:	f7ff fe18 	bl	800ccc4 <Host2SCS>
	Host2SCS(bBuf + 3, bBuf + 4, 0);
 800d094:	f107 0308 	add.w	r3, r7, #8
 800d098:	3303      	adds	r3, #3
 800d09a:	f107 0108 	add.w	r1, r7, #8
 800d09e:	3104      	adds	r1, #4
 800d0a0:	2200      	movs	r2, #0
 800d0a2:	4618      	mov	r0, r3
 800d0a4:	f7ff fe0e 	bl	800ccc4 <Host2SCS>
	Host2SCS(bBuf + 5, bBuf + 6, Speed);
 800d0a8:	f107 0308 	add.w	r3, r7, #8
 800d0ac:	3305      	adds	r3, #5
 800d0ae:	f107 0108 	add.w	r1, r7, #8
 800d0b2:	3106      	adds	r1, #6
 800d0b4:	887a      	ldrh	r2, [r7, #2]
 800d0b6:	4618      	mov	r0, r3
 800d0b8:	f7ff fe04 	bl	800ccc4 <Host2SCS>

	return genWrite(ID, SMS_STS_ACC, bBuf, 7);
 800d0bc:	f107 0208 	add.w	r2, r7, #8
 800d0c0:	79f8      	ldrb	r0, [r7, #7]
 800d0c2:	2307      	movs	r3, #7
 800d0c4:	2129      	movs	r1, #41	@ 0x29
 800d0c6:	f7ff fe8b 	bl	800cde0 <genWrite>
 800d0ca:	4603      	mov	r3, r0
}
 800d0cc:	4618      	mov	r0, r3
 800d0ce:	3714      	adds	r7, #20
 800d0d0:	46bd      	mov	sp, r7
 800d0d2:	bd90      	pop	{r4, r7, pc}

0800d0d4 <Action_Show>:
extern float x;
extern float y;
extern int colour;
extern char Point_Flag;

void Action_Show(void) {
 800d0d4:	b580      	push	{r7, lr}
 800d0d6:	af00      	add	r7, sp, #0
	sprintf(Z_str, "%.2f", zangle);
 800d0d8:	4b30      	ldr	r3, [pc, #192]	@ (800d19c <Action_Show+0xc8>)
 800d0da:	edd3 7a00 	vldr	s15, [r3]
 800d0de:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800d0e2:	ec53 2b17 	vmov	r2, r3, d7
 800d0e6:	492e      	ldr	r1, [pc, #184]	@ (800d1a0 <Action_Show+0xcc>)
 800d0e8:	482e      	ldr	r0, [pc, #184]	@ (800d1a4 <Action_Show+0xd0>)
 800d0ea:	f001 ffbf 	bl	800f06c <siprintf>
	sprintf(X_srt, "%.2f", pos_x);
 800d0ee:	4b2e      	ldr	r3, [pc, #184]	@ (800d1a8 <Action_Show+0xd4>)
 800d0f0:	edd3 7a00 	vldr	s15, [r3]
 800d0f4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800d0f8:	ec53 2b17 	vmov	r2, r3, d7
 800d0fc:	4928      	ldr	r1, [pc, #160]	@ (800d1a0 <Action_Show+0xcc>)
 800d0fe:	482b      	ldr	r0, [pc, #172]	@ (800d1ac <Action_Show+0xd8>)
 800d100:	f001 ffb4 	bl	800f06c <siprintf>
	sprintf(Y_srt, "%.2f", pos_y);
 800d104:	4b2a      	ldr	r3, [pc, #168]	@ (800d1b0 <Action_Show+0xdc>)
 800d106:	edd3 7a00 	vldr	s15, [r3]
 800d10a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800d10e:	ec53 2b17 	vmov	r2, r3, d7
 800d112:	4923      	ldr	r1, [pc, #140]	@ (800d1a0 <Action_Show+0xcc>)
 800d114:	4827      	ldr	r0, [pc, #156]	@ (800d1b4 <Action_Show+0xe0>)
 800d116:	f001 ffa9 	bl	800f06c <siprintf>
	HAL_UART_Transmit(&huart4, (uint8_t*) "Z_Angle.txt=\"",
 800d11a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d11e:	220d      	movs	r2, #13
 800d120:	4925      	ldr	r1, [pc, #148]	@ (800d1b8 <Action_Show+0xe4>)
 800d122:	4826      	ldr	r0, [pc, #152]	@ (800d1bc <Action_Show+0xe8>)
 800d124:	f7fb fc56 	bl	80089d4 <HAL_UART_Transmit>
			sizeof("Z_Angle.txt=\"") - 1, 0xffff);
	HAL_UART_Transmit(&huart4, (uint8_t*) Z_str, sizeof(X_srt) - 1, 0xffff);
 800d128:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d12c:	2213      	movs	r2, #19
 800d12e:	491d      	ldr	r1, [pc, #116]	@ (800d1a4 <Action_Show+0xd0>)
 800d130:	4822      	ldr	r0, [pc, #136]	@ (800d1bc <Action_Show+0xe8>)
 800d132:	f7fb fc4f 	bl	80089d4 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart4, (uint8_t*) "\"\xff\xff\xff",
 800d136:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d13a:	2204      	movs	r2, #4
 800d13c:	4920      	ldr	r1, [pc, #128]	@ (800d1c0 <Action_Show+0xec>)
 800d13e:	481f      	ldr	r0, [pc, #124]	@ (800d1bc <Action_Show+0xe8>)
 800d140:	f7fb fc48 	bl	80089d4 <HAL_UART_Transmit>
			sizeof("\"\xff\xff\xff") - 1, 0xffff);

	HAL_UART_Transmit(&huart4, (uint8_t*) "X_Point.txt=\"",
 800d144:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d148:	220d      	movs	r2, #13
 800d14a:	491e      	ldr	r1, [pc, #120]	@ (800d1c4 <Action_Show+0xf0>)
 800d14c:	481b      	ldr	r0, [pc, #108]	@ (800d1bc <Action_Show+0xe8>)
 800d14e:	f7fb fc41 	bl	80089d4 <HAL_UART_Transmit>
			sizeof("X_Point.txt=\"") - 1, 0xffff);
	HAL_UART_Transmit(&huart4, (uint8_t*) X_srt, sizeof(X_srt) - 1, 0xffff);
 800d152:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d156:	2213      	movs	r2, #19
 800d158:	4914      	ldr	r1, [pc, #80]	@ (800d1ac <Action_Show+0xd8>)
 800d15a:	4818      	ldr	r0, [pc, #96]	@ (800d1bc <Action_Show+0xe8>)
 800d15c:	f7fb fc3a 	bl	80089d4 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart4, (uint8_t*) "\"\xff\xff\xff",
 800d160:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d164:	2204      	movs	r2, #4
 800d166:	4916      	ldr	r1, [pc, #88]	@ (800d1c0 <Action_Show+0xec>)
 800d168:	4814      	ldr	r0, [pc, #80]	@ (800d1bc <Action_Show+0xe8>)
 800d16a:	f7fb fc33 	bl	80089d4 <HAL_UART_Transmit>
			sizeof("\"\xff\xff\xff") - 1, 0xffff);

	HAL_UART_Transmit(&huart4, (uint8_t*) "Y_Point.txt=\"",
 800d16e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d172:	220d      	movs	r2, #13
 800d174:	4914      	ldr	r1, [pc, #80]	@ (800d1c8 <Action_Show+0xf4>)
 800d176:	4811      	ldr	r0, [pc, #68]	@ (800d1bc <Action_Show+0xe8>)
 800d178:	f7fb fc2c 	bl	80089d4 <HAL_UART_Transmit>
			sizeof("Y_Point.txt=\"") - 1, 0xffff);
	HAL_UART_Transmit(&huart4, (uint8_t*) Y_srt, sizeof(X_srt) - 1, 0xffff);
 800d17c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d180:	2213      	movs	r2, #19
 800d182:	490c      	ldr	r1, [pc, #48]	@ (800d1b4 <Action_Show+0xe0>)
 800d184:	480d      	ldr	r0, [pc, #52]	@ (800d1bc <Action_Show+0xe8>)
 800d186:	f7fb fc25 	bl	80089d4 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart4, (uint8_t*) "\"\xff\xff\xff",
 800d18a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d18e:	2204      	movs	r2, #4
 800d190:	490b      	ldr	r1, [pc, #44]	@ (800d1c0 <Action_Show+0xec>)
 800d192:	480a      	ldr	r0, [pc, #40]	@ (800d1bc <Action_Show+0xe8>)
 800d194:	f7fb fc1e 	bl	80089d4 <HAL_UART_Transmit>
			sizeof("\"\xff\xff\xff") - 1, 0xffff);
}
 800d198:	bf00      	nop
 800d19a:	bd80      	pop	{r7, pc}
 800d19c:	24000af8 	.word	0x24000af8
 800d1a0:	080125d0 	.word	0x080125d0
 800d1a4:	24000cb0 	.word	0x24000cb0
 800d1a8:	24000af0 	.word	0x24000af0
 800d1ac:	24000cb8 	.word	0x24000cb8
 800d1b0:	24000af4 	.word	0x24000af4
 800d1b4:	24000ccc 	.word	0x24000ccc
 800d1b8:	080125d8 	.word	0x080125d8
 800d1bc:	240005b8 	.word	0x240005b8
 800d1c0:	080125e8 	.word	0x080125e8
 800d1c4:	080125f0 	.word	0x080125f0
 800d1c8:	08012600 	.word	0x08012600

0800d1cc <QR_Show>:
extern int QR_data[6];
void QR_Show(void) {
 800d1cc:	b580      	push	{r7, lr}
 800d1ce:	b082      	sub	sp, #8
 800d1d0:	af00      	add	r7, sp, #0
	for (int i = 0; i < 6; i++) {
 800d1d2:	2300      	movs	r3, #0
 800d1d4:	607b      	str	r3, [r7, #4]
 800d1d6:	e00d      	b.n	800d1f4 <QR_Show+0x28>
		sprintf(&Y_pid[i], "%d", QR_data[i]);
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	4a14      	ldr	r2, [pc, #80]	@ (800d22c <QR_Show+0x60>)
 800d1dc:	1898      	adds	r0, r3, r2
 800d1de:	4a14      	ldr	r2, [pc, #80]	@ (800d230 <QR_Show+0x64>)
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d1e6:	461a      	mov	r2, r3
 800d1e8:	4912      	ldr	r1, [pc, #72]	@ (800d234 <QR_Show+0x68>)
 800d1ea:	f001 ff3f 	bl	800f06c <siprintf>
	for (int i = 0; i < 6; i++) {
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	3301      	adds	r3, #1
 800d1f2:	607b      	str	r3, [r7, #4]
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	2b05      	cmp	r3, #5
 800d1f8:	ddee      	ble.n	800d1d8 <QR_Show+0xc>
	}
	HAL_UART_Transmit(&huart4, (uint8_t*) "QR.txt=\"", sizeof("QR.txt=\"") - 1,
 800d1fa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d1fe:	2208      	movs	r2, #8
 800d200:	490d      	ldr	r1, [pc, #52]	@ (800d238 <QR_Show+0x6c>)
 800d202:	480e      	ldr	r0, [pc, #56]	@ (800d23c <QR_Show+0x70>)
 800d204:	f7fb fbe6 	bl	80089d4 <HAL_UART_Transmit>
			0xffff);
	HAL_UART_Transmit(&huart4, (uint8_t*) Y_pid, sizeof(Y_pid) - 1, 0xffff);
 800d208:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d20c:	2213      	movs	r2, #19
 800d20e:	4907      	ldr	r1, [pc, #28]	@ (800d22c <QR_Show+0x60>)
 800d210:	480a      	ldr	r0, [pc, #40]	@ (800d23c <QR_Show+0x70>)
 800d212:	f7fb fbdf 	bl	80089d4 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart4, (uint8_t*) "\"\xff\xff\xff",
 800d216:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d21a:	2204      	movs	r2, #4
 800d21c:	4908      	ldr	r1, [pc, #32]	@ (800d240 <QR_Show+0x74>)
 800d21e:	4807      	ldr	r0, [pc, #28]	@ (800d23c <QR_Show+0x70>)
 800d220:	f7fb fbd8 	bl	80089d4 <HAL_UART_Transmit>
	 HAL_UART_Transmit(&huart4, (uint8_t*) QR_data, sizeof(QR_data) - 1, 0xffff);
	 HAL_UART_Transmit(&huart4, (uint8_t*) "\"\xff\xff\xff",
	 sizeof("\"\xff\xff\xff") - 1, 0xffff);
	 */

}
 800d224:	bf00      	nop
 800d226:	3708      	adds	r7, #8
 800d228:	46bd      	mov	sp, r7
 800d22a:	bd80      	pop	{r7, pc}
 800d22c:	24000ce0 	.word	0x24000ce0
 800d230:	24000000 	.word	0x24000000
 800d234:	08012610 	.word	0x08012610
 800d238:	08012614 	.word	0x08012614
 800d23c:	240005b8 	.word	0x240005b8
 800d240:	080125e8 	.word	0x080125e8

0800d244 <Point_Show>:
extern char Check_flag;
// 借用一下屏幕上的识别物料颜色，查看flag系统标志位
extern uint16_t flag;

// TODO：屏幕缺失字符"+",暂时判断为编码格式问题，需要通过串口助手确定编码格式
void Point_Show(void) {
 800d244:	b580      	push	{r7, lr}
 800d246:	af00      	add	r7, sp, #0
////		TX2点位数据还未接收，结束该函数
//		return ;
//	}
//	Point_Flag = 0;
//	在抓取过程中,进行颜色校验，如果颜色与抓取目标颜色不同，则放弃该帧数据，并传递放弃稳定性计算标志位
	if(Match_Flag != colour)
 800d248:	4b38      	ldr	r3, [pc, #224]	@ (800d32c <Point_Show+0xe8>)
 800d24a:	781b      	ldrb	r3, [r3, #0]
 800d24c:	461a      	mov	r2, r3
 800d24e:	4b38      	ldr	r3, [pc, #224]	@ (800d330 <Point_Show+0xec>)
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	429a      	cmp	r2, r3
 800d254:	d003      	beq.n	800d25e <Point_Show+0x1a>
		Check_flag = 0;
 800d256:	4b37      	ldr	r3, [pc, #220]	@ (800d334 <Point_Show+0xf0>)
 800d258:	2200      	movs	r2, #0
 800d25a:	701a      	strb	r2, [r3, #0]
 800d25c:	e002      	b.n	800d264 <Point_Show+0x20>
	else
		Check_flag = 1;
 800d25e:	4b35      	ldr	r3, [pc, #212]	@ (800d334 <Point_Show+0xf0>)
 800d260:	2201      	movs	r2, #1
 800d262:	701a      	strb	r2, [r3, #0]
	sprintf(TX2_X_Point, "%.2f", x);
 800d264:	4b34      	ldr	r3, [pc, #208]	@ (800d338 <Point_Show+0xf4>)
 800d266:	edd3 7a00 	vldr	s15, [r3]
 800d26a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800d26e:	ec53 2b17 	vmov	r2, r3, d7
 800d272:	4932      	ldr	r1, [pc, #200]	@ (800d33c <Point_Show+0xf8>)
 800d274:	4832      	ldr	r0, [pc, #200]	@ (800d340 <Point_Show+0xfc>)
 800d276:	f001 fef9 	bl	800f06c <siprintf>
	sprintf(TX2_Y_Point, "%.2f", y);
 800d27a:	4b32      	ldr	r3, [pc, #200]	@ (800d344 <Point_Show+0x100>)
 800d27c:	edd3 7a00 	vldr	s15, [r3]
 800d280:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800d284:	ec53 2b17 	vmov	r2, r3, d7
 800d288:	492c      	ldr	r1, [pc, #176]	@ (800d33c <Point_Show+0xf8>)
 800d28a:	482f      	ldr	r0, [pc, #188]	@ (800d348 <Point_Show+0x104>)
 800d28c:	f001 feee 	bl	800f06c <siprintf>
	sprintf(TX2_Color, "%d", flag);
 800d290:	4b2e      	ldr	r3, [pc, #184]	@ (800d34c <Point_Show+0x108>)
 800d292:	881b      	ldrh	r3, [r3, #0]
 800d294:	461a      	mov	r2, r3
 800d296:	492e      	ldr	r1, [pc, #184]	@ (800d350 <Point_Show+0x10c>)
 800d298:	482e      	ldr	r0, [pc, #184]	@ (800d354 <Point_Show+0x110>)
 800d29a:	f001 fee7 	bl	800f06c <siprintf>
//	开始发送一帧点位数据
	HAL_UART_Transmit(&huart4, (uint8_t*) "Point.txt=\"",sizeof("Point.txt=\"") - 1, 0xffff);
 800d29e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d2a2:	220b      	movs	r2, #11
 800d2a4:	492c      	ldr	r1, [pc, #176]	@ (800d358 <Point_Show+0x114>)
 800d2a6:	482d      	ldr	r0, [pc, #180]	@ (800d35c <Point_Show+0x118>)
 800d2a8:	f7fb fb94 	bl	80089d4 <HAL_UART_Transmit>
	if(Choke_Flag == true)
 800d2ac:	4b2c      	ldr	r3, [pc, #176]	@ (800d360 <Point_Show+0x11c>)
 800d2ae:	781b      	ldrb	r3, [r3, #0]
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	d007      	beq.n	800d2c4 <Point_Show+0x80>
		HAL_UART_Transmit(&huart4, (uint8_t*) "true", sizeof("true") - 2, 0xffff);
 800d2b4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d2b8:	2203      	movs	r2, #3
 800d2ba:	492a      	ldr	r1, [pc, #168]	@ (800d364 <Point_Show+0x120>)
 800d2bc:	4827      	ldr	r0, [pc, #156]	@ (800d35c <Point_Show+0x118>)
 800d2be:	f7fb fb89 	bl	80089d4 <HAL_UART_Transmit>
 800d2c2:	e006      	b.n	800d2d2 <Point_Show+0x8e>
	else
		HAL_UART_Transmit(&huart4, (uint8_t*) "false", sizeof("false") - 2, 0xffff);
 800d2c4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d2c8:	2204      	movs	r2, #4
 800d2ca:	4927      	ldr	r1, [pc, #156]	@ (800d368 <Point_Show+0x124>)
 800d2cc:	4823      	ldr	r0, [pc, #140]	@ (800d35c <Point_Show+0x118>)
 800d2ce:	f7fb fb81 	bl	80089d4 <HAL_UART_Transmit>
//	HAL_UART_Transmit(&huart4, (uint8_t*) TX2_X_Point, sizeof(TX2_X_Point) - 2, 0xffff);
	HAL_UART_Transmit(&huart4, (uint8_t*) "+", sizeof("+")-2, 0xffff);
 800d2d2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d2d6:	2200      	movs	r2, #0
 800d2d8:	4924      	ldr	r1, [pc, #144]	@ (800d36c <Point_Show+0x128>)
 800d2da:	4820      	ldr	r0, [pc, #128]	@ (800d35c <Point_Show+0x118>)
 800d2dc:	f7fb fb7a 	bl	80089d4 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart4, (uint8_t*) TX2_Y_Point, sizeof(TX2_Y_Point) - 1, 0xffff);
 800d2e0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d2e4:	2207      	movs	r2, #7
 800d2e6:	4918      	ldr	r1, [pc, #96]	@ (800d348 <Point_Show+0x104>)
 800d2e8:	481c      	ldr	r0, [pc, #112]	@ (800d35c <Point_Show+0x118>)
 800d2ea:	f7fb fb73 	bl	80089d4 <HAL_UART_Transmit>
//	结束发送一帧点位数据
	HAL_UART_Transmit(&huart4, (uint8_t*) "\"\xff\xff\xff",sizeof("\"\xff\xff\xff") - 1, 0xffff);
 800d2ee:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d2f2:	2204      	movs	r2, #4
 800d2f4:	491e      	ldr	r1, [pc, #120]	@ (800d370 <Point_Show+0x12c>)
 800d2f6:	4819      	ldr	r0, [pc, #100]	@ (800d35c <Point_Show+0x118>)
 800d2f8:	f7fb fb6c 	bl	80089d4 <HAL_UART_Transmit>

//	开始发送一帧颜色数据
	HAL_UART_Transmit(&huart4, (uint8_t*) "Color.txt=\"",sizeof("Color.txt=\"") - 1, 0xffff);
 800d2fc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d300:	220b      	movs	r2, #11
 800d302:	491c      	ldr	r1, [pc, #112]	@ (800d374 <Point_Show+0x130>)
 800d304:	4815      	ldr	r0, [pc, #84]	@ (800d35c <Point_Show+0x118>)
 800d306:	f7fb fb65 	bl	80089d4 <HAL_UART_Transmit>

	HAL_UART_Transmit(&huart4, (uint8_t*) TX2_Color, sizeof(TX2_Color)-1 , 0xffff);
 800d30a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d30e:	2201      	movs	r2, #1
 800d310:	4910      	ldr	r1, [pc, #64]	@ (800d354 <Point_Show+0x110>)
 800d312:	4812      	ldr	r0, [pc, #72]	@ (800d35c <Point_Show+0x118>)
 800d314:	f7fb fb5e 	bl	80089d4 <HAL_UART_Transmit>

//	结束发送一帧颜色数据
	HAL_UART_Transmit(&huart4, (uint8_t*) "\"\xff\xff\xff",sizeof("\"\xff\xff\xff") - 1, 0xffff);
 800d318:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d31c:	2204      	movs	r2, #4
 800d31e:	4914      	ldr	r1, [pc, #80]	@ (800d370 <Point_Show+0x12c>)
 800d320:	480e      	ldr	r0, [pc, #56]	@ (800d35c <Point_Show+0x118>)
 800d322:	f7fb fb57 	bl	80089d4 <HAL_UART_Transmit>
}
 800d326:	bf00      	nop
 800d328:	bd80      	pop	{r7, pc}
 800d32a:	bf00      	nop
 800d32c:	24000481 	.word	0x24000481
 800d330:	2400047c 	.word	0x2400047c
 800d334:	24000482 	.word	0x24000482
 800d338:	24000470 	.word	0x24000470
 800d33c:	080125d0 	.word	0x080125d0
 800d340:	24000cf4 	.word	0x24000cf4
 800d344:	24000474 	.word	0x24000474
 800d348:	24000cfc 	.word	0x24000cfc
 800d34c:	2400047a 	.word	0x2400047a
 800d350:	08012610 	.word	0x08012610
 800d354:	24000d04 	.word	0x24000d04
 800d358:	08012620 	.word	0x08012620
 800d35c:	240005b8 	.word	0x240005b8
 800d360:	24000c20 	.word	0x24000c20
 800d364:	0801262c 	.word	0x0801262c
 800d368:	08012634 	.word	0x08012634
 800d36c:	0801263c 	.word	0x0801263c
 800d370:	080125e8 	.word	0x080125e8
 800d374:	08012640 	.word	0x08012640

0800d378 <Check_Flag>:

void Check_Flag(uint8_t rec) {
 800d378:	b480      	push	{r7}
 800d37a:	b083      	sub	sp, #12
 800d37c:	af00      	add	r7, sp, #0
 800d37e:	4603      	mov	r3, r0
 800d380:	71fb      	strb	r3, [r7, #7]
	static uint8_t ch;
	static uint8_t count = 0;

	ch = rec;
 800d382:	4a45      	ldr	r2, [pc, #276]	@ (800d498 <Check_Flag+0x120>)
 800d384:	79fb      	ldrb	r3, [r7, #7]
 800d386:	7013      	strb	r3, [r2, #0]

	switch (count) {
 800d388:	4b44      	ldr	r3, [pc, #272]	@ (800d49c <Check_Flag+0x124>)
 800d38a:	781b      	ldrb	r3, [r3, #0]
 800d38c:	2b05      	cmp	r3, #5
 800d38e:	d876      	bhi.n	800d47e <Check_Flag+0x106>
 800d390:	a201      	add	r2, pc, #4	@ (adr r2, 800d398 <Check_Flag+0x20>)
 800d392:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d396:	bf00      	nop
 800d398:	0800d3b1 	.word	0x0800d3b1
 800d39c:	0800d3e9 	.word	0x0800d3e9
 800d3a0:	0800d40f 	.word	0x0800d40f
 800d3a4:	0800d42d 	.word	0x0800d42d
 800d3a8:	0800d44b 	.word	0x0800d44b
 800d3ac:	0800d469 	.word	0x0800d469
	case 0:
		if (ch == 'G')
 800d3b0:	4b39      	ldr	r3, [pc, #228]	@ (800d498 <Check_Flag+0x120>)
 800d3b2:	781b      	ldrb	r3, [r3, #0]
 800d3b4:	2b47      	cmp	r3, #71	@ 0x47
 800d3b6:	d103      	bne.n	800d3c0 <Check_Flag+0x48>
			count = 1;
 800d3b8:	4b38      	ldr	r3, [pc, #224]	@ (800d49c <Check_Flag+0x124>)
 800d3ba:	2201      	movs	r2, #1
 800d3bc:	701a      	strb	r2, [r3, #0]
			count = 2;
		else if (ch == 'M')
			count = 4;
		else
			count = 0;
		break;
 800d3be:	e065      	b.n	800d48c <Check_Flag+0x114>
		else if (ch == 'R')
 800d3c0:	4b35      	ldr	r3, [pc, #212]	@ (800d498 <Check_Flag+0x120>)
 800d3c2:	781b      	ldrb	r3, [r3, #0]
 800d3c4:	2b52      	cmp	r3, #82	@ 0x52
 800d3c6:	d103      	bne.n	800d3d0 <Check_Flag+0x58>
			count = 2;
 800d3c8:	4b34      	ldr	r3, [pc, #208]	@ (800d49c <Check_Flag+0x124>)
 800d3ca:	2202      	movs	r2, #2
 800d3cc:	701a      	strb	r2, [r3, #0]
		break;
 800d3ce:	e05d      	b.n	800d48c <Check_Flag+0x114>
		else if (ch == 'M')
 800d3d0:	4b31      	ldr	r3, [pc, #196]	@ (800d498 <Check_Flag+0x120>)
 800d3d2:	781b      	ldrb	r3, [r3, #0]
 800d3d4:	2b4d      	cmp	r3, #77	@ 0x4d
 800d3d6:	d103      	bne.n	800d3e0 <Check_Flag+0x68>
			count = 4;
 800d3d8:	4b30      	ldr	r3, [pc, #192]	@ (800d49c <Check_Flag+0x124>)
 800d3da:	2204      	movs	r2, #4
 800d3dc:	701a      	strb	r2, [r3, #0]
		break;
 800d3de:	e055      	b.n	800d48c <Check_Flag+0x114>
			count = 0;
 800d3e0:	4b2e      	ldr	r3, [pc, #184]	@ (800d49c <Check_Flag+0x124>)
 800d3e2:	2200      	movs	r2, #0
 800d3e4:	701a      	strb	r2, [r3, #0]
		break;
 800d3e6:	e051      	b.n	800d48c <Check_Flag+0x114>
	case 1:
		if (ch == 'o') {
 800d3e8:	4b2b      	ldr	r3, [pc, #172]	@ (800d498 <Check_Flag+0x120>)
 800d3ea:	781b      	ldrb	r3, [r3, #0]
 800d3ec:	2b6f      	cmp	r3, #111	@ 0x6f
 800d3ee:	d106      	bne.n	800d3fe <Check_Flag+0x86>
			System_Flag = 1;
 800d3f0:	4b2b      	ldr	r3, [pc, #172]	@ (800d4a0 <Check_Flag+0x128>)
 800d3f2:	2201      	movs	r2, #1
 800d3f4:	701a      	strb	r2, [r3, #0]
			count = 0;
 800d3f6:	4b29      	ldr	r3, [pc, #164]	@ (800d49c <Check_Flag+0x124>)
 800d3f8:	2200      	movs	r2, #0
 800d3fa:	701a      	strb	r2, [r3, #0]
		} else if (ch == 'G')
			;
		else
			count = 0;
		break;
 800d3fc:	e043      	b.n	800d486 <Check_Flag+0x10e>
		} else if (ch == 'G')
 800d3fe:	4b26      	ldr	r3, [pc, #152]	@ (800d498 <Check_Flag+0x120>)
 800d400:	781b      	ldrb	r3, [r3, #0]
 800d402:	2b47      	cmp	r3, #71	@ 0x47
 800d404:	d03f      	beq.n	800d486 <Check_Flag+0x10e>
			count = 0;
 800d406:	4b25      	ldr	r3, [pc, #148]	@ (800d49c <Check_Flag+0x124>)
 800d408:	2200      	movs	r2, #0
 800d40a:	701a      	strb	r2, [r3, #0]
		break;
 800d40c:	e03b      	b.n	800d486 <Check_Flag+0x10e>
	case 2:
//		此处用于判断是否进入准备模式，调整车身姿态
		if (ch == 'e')
 800d40e:	4b22      	ldr	r3, [pc, #136]	@ (800d498 <Check_Flag+0x120>)
 800d410:	781b      	ldrb	r3, [r3, #0]
 800d412:	2b65      	cmp	r3, #101	@ 0x65
 800d414:	d106      	bne.n	800d424 <Check_Flag+0xac>
			count++;
 800d416:	4b21      	ldr	r3, [pc, #132]	@ (800d49c <Check_Flag+0x124>)
 800d418:	781b      	ldrb	r3, [r3, #0]
 800d41a:	3301      	adds	r3, #1
 800d41c:	b2da      	uxtb	r2, r3
 800d41e:	4b1f      	ldr	r3, [pc, #124]	@ (800d49c <Check_Flag+0x124>)
 800d420:	701a      	strb	r2, [r3, #0]
		else
			count = 0;
		break;
 800d422:	e033      	b.n	800d48c <Check_Flag+0x114>
			count = 0;
 800d424:	4b1d      	ldr	r3, [pc, #116]	@ (800d49c <Check_Flag+0x124>)
 800d426:	2200      	movs	r2, #0
 800d428:	701a      	strb	r2, [r3, #0]
		break;
 800d42a:	e02f      	b.n	800d48c <Check_Flag+0x114>
	case 3:
		if (ch == 'a') {
 800d42c:	4b1a      	ldr	r3, [pc, #104]	@ (800d498 <Check_Flag+0x120>)
 800d42e:	781b      	ldrb	r3, [r3, #0]
 800d430:	2b61      	cmp	r3, #97	@ 0x61
 800d432:	d106      	bne.n	800d442 <Check_Flag+0xca>
			Ready_Flag = 1;
 800d434:	4b1b      	ldr	r3, [pc, #108]	@ (800d4a4 <Check_Flag+0x12c>)
 800d436:	2201      	movs	r2, #1
 800d438:	701a      	strb	r2, [r3, #0]
			count = 0;
 800d43a:	4b18      	ldr	r3, [pc, #96]	@ (800d49c <Check_Flag+0x124>)
 800d43c:	2200      	movs	r2, #0
 800d43e:	701a      	strb	r2, [r3, #0]
		} else
			count = 0;
		break;
 800d440:	e024      	b.n	800d48c <Check_Flag+0x114>
			count = 0;
 800d442:	4b16      	ldr	r3, [pc, #88]	@ (800d49c <Check_Flag+0x124>)
 800d444:	2200      	movs	r2, #0
 800d446:	701a      	strb	r2, [r3, #0]
		break;
 800d448:	e020      	b.n	800d48c <Check_Flag+0x114>
	case 4:
		if (ch == 'a')
 800d44a:	4b13      	ldr	r3, [pc, #76]	@ (800d498 <Check_Flag+0x120>)
 800d44c:	781b      	ldrb	r3, [r3, #0]
 800d44e:	2b61      	cmp	r3, #97	@ 0x61
 800d450:	d106      	bne.n	800d460 <Check_Flag+0xe8>
			count++;
 800d452:	4b12      	ldr	r3, [pc, #72]	@ (800d49c <Check_Flag+0x124>)
 800d454:	781b      	ldrb	r3, [r3, #0]
 800d456:	3301      	adds	r3, #1
 800d458:	b2da      	uxtb	r2, r3
 800d45a:	4b10      	ldr	r3, [pc, #64]	@ (800d49c <Check_Flag+0x124>)
 800d45c:	701a      	strb	r2, [r3, #0]
		else
			count = 0;
		break;
 800d45e:	e015      	b.n	800d48c <Check_Flag+0x114>
			count = 0;
 800d460:	4b0e      	ldr	r3, [pc, #56]	@ (800d49c <Check_Flag+0x124>)
 800d462:	2200      	movs	r2, #0
 800d464:	701a      	strb	r2, [r3, #0]
		break;
 800d466:	e011      	b.n	800d48c <Check_Flag+0x114>
	case 5:
		if (ch == 't') {
 800d468:	4b0b      	ldr	r3, [pc, #44]	@ (800d498 <Check_Flag+0x120>)
 800d46a:	781b      	ldrb	r3, [r3, #0]
 800d46c:	2b74      	cmp	r3, #116	@ 0x74
 800d46e:	d10c      	bne.n	800d48a <Check_Flag+0x112>
			System_Flag = 1;
 800d470:	4b0b      	ldr	r3, [pc, #44]	@ (800d4a0 <Check_Flag+0x128>)
 800d472:	2201      	movs	r2, #1
 800d474:	701a      	strb	r2, [r3, #0]
			count = 0;
 800d476:	4b09      	ldr	r3, [pc, #36]	@ (800d49c <Check_Flag+0x124>)
 800d478:	2200      	movs	r2, #0
 800d47a:	701a      	strb	r2, [r3, #0]
		}
		break;
 800d47c:	e005      	b.n	800d48a <Check_Flag+0x112>
	default:
		count = 0;
 800d47e:	4b07      	ldr	r3, [pc, #28]	@ (800d49c <Check_Flag+0x124>)
 800d480:	2200      	movs	r2, #0
 800d482:	701a      	strb	r2, [r3, #0]
		break;
 800d484:	e002      	b.n	800d48c <Check_Flag+0x114>
		break;
 800d486:	bf00      	nop
 800d488:	e000      	b.n	800d48c <Check_Flag+0x114>
		break;
 800d48a:	bf00      	nop
	}

}
 800d48c:	bf00      	nop
 800d48e:	370c      	adds	r7, #12
 800d490:	46bd      	mov	sp, r7
 800d492:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d496:	4770      	bx	lr
 800d498:	24000d08 	.word	0x24000d08
 800d49c:	24000d09 	.word	0x24000d09
 800d4a0:	24000d06 	.word	0x24000d06
 800d4a4:	24000d07 	.word	0x24000d07

0800d4a8 <Check_Status>:
	首先，在步进电机上电以后，需要进行调零，找到一个零位用来确定后面一切操作的参考点，因此5号步进电机设置为上电回零
	但是在比赛过程中，要求车身及其垂直投影部分在未发车前全部处于发车区域，这就要求爪子在发车前是在车体内侧的，同时爪子不能处于太高处，否则违规
	因此在Check_Status()函数用于在回零操作已完成后进行调整，以满足发车条件，
*/
uint8_t Check_Status(void)
{
 800d4a8:	b580      	push	{r7, lr}
 800d4aa:	af00      	add	r7, sp, #0
//  首先控制步进电机,回到零点
	Drop_Location_jiang(200, 120, 0);
 800d4ac:	2200      	movs	r2, #0
 800d4ae:	2178      	movs	r1, #120	@ 0x78
 800d4b0:	20c8      	movs	r0, #200	@ 0xc8
 800d4b2:	f7fe fecd 	bl	800c250 <Drop_Location_jiang>
	Move_Arm(1, 50, 300);
 800d4b6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800d4ba:	2132      	movs	r1, #50	@ 0x32
 800d4bc:	2001      	movs	r0, #1
 800d4be:	f7fe f8dd 	bl	800b67c <Move_Arm>
//  6号舵机900
	Move_Arm(6, 900, 300);
 800d4c2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800d4c6:	f44f 7161 	mov.w	r1, #900	@ 0x384
 800d4ca:	2006      	movs	r0, #6
 800d4cc:	f7fe f8d6 	bl	800b67c <Move_Arm>
//  旋转物料结构的支撑舵机
	FT_Servo_Zero(0);
 800d4d0:	2000      	movs	r0, #0
 800d4d2:	f000 f82f 	bl	800d534 <FT_Servo_Zero>
//  旋转爪子结构的支撑舵机
	FT_Servo_Zero(1);
 800d4d6:	2001      	movs	r0, #1
 800d4d8:	f000 f82c 	bl	800d534 <FT_Servo_Zero>
//  步进电机下降,将位置调整为最最低点
	Drop_Location_jiang(200, 120, 9000);
 800d4dc:	f242 3228 	movw	r2, #9000	@ 0x2328
 800d4e0:	2178      	movs	r1, #120	@ 0x78
 800d4e2:	20c8      	movs	r0, #200	@ 0xc8
 800d4e4:	f7fe feb4 	bl	800c250 <Drop_Location_jiang>
	return 1;
 800d4e8:	2301      	movs	r3, #1
}
 800d4ea:	4618      	mov	r0, r3
 800d4ec:	bd80      	pop	{r7, pc}

0800d4ee <Roll_Status>:

uint8_t Roll_Status(void)
{
 800d4ee:	b580      	push	{r7, lr}
 800d4f0:	af00      	add	r7, sp, #0
//  首先控制步进电机,回到零点
	Drop_Location_jiang(200, 120, 0);
 800d4f2:	2200      	movs	r2, #0
 800d4f4:	2178      	movs	r1, #120	@ 0x78
 800d4f6:	20c8      	movs	r0, #200	@ 0xc8
 800d4f8:	f7fe feaa 	bl	800c250 <Drop_Location_jiang>
	Move_Arm(1, 50, 300);
 800d4fc:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800d500:	2132      	movs	r1, #50	@ 0x32
 800d502:	2001      	movs	r0, #1
 800d504:	f7fe f8ba 	bl	800b67c <Move_Arm>
//  6号舵机900
	Move_Arm(6, 900, 300);
 800d508:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800d50c:	f44f 7161 	mov.w	r1, #900	@ 0x384
 800d510:	2006      	movs	r0, #6
 800d512:	f7fe f8b3 	bl	800b67c <Move_Arm>
//  旋转物料结构的支撑舵机
	FT_Servo_Zero(0);
 800d516:	2000      	movs	r0, #0
 800d518:	f000 f80c 	bl	800d534 <FT_Servo_Zero>
//  旋转爪子结构的支撑舵机
	FT_Servo_Zero(1);
 800d51c:	2001      	movs	r0, #1
 800d51e:	f000 f809 	bl	800d534 <FT_Servo_Zero>
//  步进电机下降,将位置调整为最最低点
	Drop_Location_jiang(200, 120, 7000);
 800d522:	f641 3258 	movw	r2, #7000	@ 0x1b58
 800d526:	2178      	movs	r1, #120	@ 0x78
 800d528:	20c8      	movs	r0, #200	@ 0xc8
 800d52a:	f7fe fe91 	bl	800c250 <Drop_Location_jiang>
//	Choke_Flag = false;
	return 1;
 800d52e:	2301      	movs	r3, #1
}
 800d530:	4618      	mov	r0, r3
 800d532:	bd80      	pop	{r7, pc}

0800d534 <FT_Servo_Zero>:
	Move_Arm(1, 500, 300); 
}

// 将目标舵机回零
uint8_t FT_Servo_Zero(uint8_t Number)
{
 800d534:	b580      	push	{r7, lr}
 800d536:	b082      	sub	sp, #8
 800d538:	af00      	add	r7, sp, #0
 800d53a:	4603      	mov	r3, r0
 800d53c:	71fb      	strb	r3, [r7, #7]
	if(Number == 0)
 800d53e:	79fb      	ldrb	r3, [r7, #7]
 800d540:	2b00      	cmp	r3, #0
 800d542:	d106      	bne.n	800d552 <FT_Servo_Zero+0x1e>
		WritePosEx(0, 0, 0, 0);
 800d544:	2300      	movs	r3, #0
 800d546:	2200      	movs	r2, #0
 800d548:	2100      	movs	r1, #0
 800d54a:	2000      	movs	r0, #0
 800d54c:	f7ff fd78 	bl	800d040 <WritePosEx>
 800d550:	e009      	b.n	800d566 <FT_Servo_Zero+0x32>
	else if (Number == 1)
 800d552:	79fb      	ldrb	r3, [r7, #7]
 800d554:	2b01      	cmp	r3, #1
 800d556:	d106      	bne.n	800d566 <FT_Servo_Zero+0x32>
		WritePosEx(1, 1020, 0, 0);
 800d558:	2300      	movs	r3, #0
 800d55a:	2200      	movs	r2, #0
 800d55c:	f44f 717f 	mov.w	r1, #1020	@ 0x3fc
 800d560:	2001      	movs	r0, #1
 800d562:	f7ff fd6d 	bl	800d040 <WritePosEx>
	return 1;
 800d566:	2301      	movs	r3, #1
}
 800d568:	4618      	mov	r0, r3
 800d56a:	3708      	adds	r7, #8
 800d56c:	46bd      	mov	sp, r7
 800d56e:	bd80      	pop	{r7, pc}

0800d570 <FT_Servo_Orth>:

// 将爪子处飞特舵机调整为向外，正交于车身
uint8_t FT_Servo_Orth(void)
{
 800d570:	b580      	push	{r7, lr}
 800d572:	af00      	add	r7, sp, #0
	WritePosEx(1, 3087, 0, 0);
 800d574:	2300      	movs	r3, #0
 800d576:	2200      	movs	r2, #0
 800d578:	f640 410f 	movw	r1, #3087	@ 0xc0f
 800d57c:	2001      	movs	r0, #1
 800d57e:	f7ff fd5f 	bl	800d040 <WritePosEx>
	return 1;
 800d582:	2301      	movs	r3, #1
}
 800d584:	4618      	mov	r0, r3
 800d586:	bd80      	pop	{r7, pc}

0800d588 <malloc>:
 800d588:	4b02      	ldr	r3, [pc, #8]	@ (800d594 <malloc+0xc>)
 800d58a:	4601      	mov	r1, r0
 800d58c:	6818      	ldr	r0, [r3, #0]
 800d58e:	f000 b825 	b.w	800d5dc <_malloc_r>
 800d592:	bf00      	nop
 800d594:	240001e0 	.word	0x240001e0

0800d598 <sbrk_aligned>:
 800d598:	b570      	push	{r4, r5, r6, lr}
 800d59a:	4e0f      	ldr	r6, [pc, #60]	@ (800d5d8 <sbrk_aligned+0x40>)
 800d59c:	460c      	mov	r4, r1
 800d59e:	6831      	ldr	r1, [r6, #0]
 800d5a0:	4605      	mov	r5, r0
 800d5a2:	b911      	cbnz	r1, 800d5aa <sbrk_aligned+0x12>
 800d5a4:	f001 fe50 	bl	800f248 <_sbrk_r>
 800d5a8:	6030      	str	r0, [r6, #0]
 800d5aa:	4621      	mov	r1, r4
 800d5ac:	4628      	mov	r0, r5
 800d5ae:	f001 fe4b 	bl	800f248 <_sbrk_r>
 800d5b2:	1c43      	adds	r3, r0, #1
 800d5b4:	d103      	bne.n	800d5be <sbrk_aligned+0x26>
 800d5b6:	f04f 34ff 	mov.w	r4, #4294967295
 800d5ba:	4620      	mov	r0, r4
 800d5bc:	bd70      	pop	{r4, r5, r6, pc}
 800d5be:	1cc4      	adds	r4, r0, #3
 800d5c0:	f024 0403 	bic.w	r4, r4, #3
 800d5c4:	42a0      	cmp	r0, r4
 800d5c6:	d0f8      	beq.n	800d5ba <sbrk_aligned+0x22>
 800d5c8:	1a21      	subs	r1, r4, r0
 800d5ca:	4628      	mov	r0, r5
 800d5cc:	f001 fe3c 	bl	800f248 <_sbrk_r>
 800d5d0:	3001      	adds	r0, #1
 800d5d2:	d1f2      	bne.n	800d5ba <sbrk_aligned+0x22>
 800d5d4:	e7ef      	b.n	800d5b6 <sbrk_aligned+0x1e>
 800d5d6:	bf00      	nop
 800d5d8:	24000d0c 	.word	0x24000d0c

0800d5dc <_malloc_r>:
 800d5dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d5e0:	1ccd      	adds	r5, r1, #3
 800d5e2:	f025 0503 	bic.w	r5, r5, #3
 800d5e6:	3508      	adds	r5, #8
 800d5e8:	2d0c      	cmp	r5, #12
 800d5ea:	bf38      	it	cc
 800d5ec:	250c      	movcc	r5, #12
 800d5ee:	2d00      	cmp	r5, #0
 800d5f0:	4606      	mov	r6, r0
 800d5f2:	db01      	blt.n	800d5f8 <_malloc_r+0x1c>
 800d5f4:	42a9      	cmp	r1, r5
 800d5f6:	d904      	bls.n	800d602 <_malloc_r+0x26>
 800d5f8:	230c      	movs	r3, #12
 800d5fa:	6033      	str	r3, [r6, #0]
 800d5fc:	2000      	movs	r0, #0
 800d5fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d602:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d6d8 <_malloc_r+0xfc>
 800d606:	f000 f869 	bl	800d6dc <__malloc_lock>
 800d60a:	f8d8 3000 	ldr.w	r3, [r8]
 800d60e:	461c      	mov	r4, r3
 800d610:	bb44      	cbnz	r4, 800d664 <_malloc_r+0x88>
 800d612:	4629      	mov	r1, r5
 800d614:	4630      	mov	r0, r6
 800d616:	f7ff ffbf 	bl	800d598 <sbrk_aligned>
 800d61a:	1c43      	adds	r3, r0, #1
 800d61c:	4604      	mov	r4, r0
 800d61e:	d158      	bne.n	800d6d2 <_malloc_r+0xf6>
 800d620:	f8d8 4000 	ldr.w	r4, [r8]
 800d624:	4627      	mov	r7, r4
 800d626:	2f00      	cmp	r7, #0
 800d628:	d143      	bne.n	800d6b2 <_malloc_r+0xd6>
 800d62a:	2c00      	cmp	r4, #0
 800d62c:	d04b      	beq.n	800d6c6 <_malloc_r+0xea>
 800d62e:	6823      	ldr	r3, [r4, #0]
 800d630:	4639      	mov	r1, r7
 800d632:	4630      	mov	r0, r6
 800d634:	eb04 0903 	add.w	r9, r4, r3
 800d638:	f001 fe06 	bl	800f248 <_sbrk_r>
 800d63c:	4581      	cmp	r9, r0
 800d63e:	d142      	bne.n	800d6c6 <_malloc_r+0xea>
 800d640:	6821      	ldr	r1, [r4, #0]
 800d642:	1a6d      	subs	r5, r5, r1
 800d644:	4629      	mov	r1, r5
 800d646:	4630      	mov	r0, r6
 800d648:	f7ff ffa6 	bl	800d598 <sbrk_aligned>
 800d64c:	3001      	adds	r0, #1
 800d64e:	d03a      	beq.n	800d6c6 <_malloc_r+0xea>
 800d650:	6823      	ldr	r3, [r4, #0]
 800d652:	442b      	add	r3, r5
 800d654:	6023      	str	r3, [r4, #0]
 800d656:	f8d8 3000 	ldr.w	r3, [r8]
 800d65a:	685a      	ldr	r2, [r3, #4]
 800d65c:	bb62      	cbnz	r2, 800d6b8 <_malloc_r+0xdc>
 800d65e:	f8c8 7000 	str.w	r7, [r8]
 800d662:	e00f      	b.n	800d684 <_malloc_r+0xa8>
 800d664:	6822      	ldr	r2, [r4, #0]
 800d666:	1b52      	subs	r2, r2, r5
 800d668:	d420      	bmi.n	800d6ac <_malloc_r+0xd0>
 800d66a:	2a0b      	cmp	r2, #11
 800d66c:	d917      	bls.n	800d69e <_malloc_r+0xc2>
 800d66e:	1961      	adds	r1, r4, r5
 800d670:	42a3      	cmp	r3, r4
 800d672:	6025      	str	r5, [r4, #0]
 800d674:	bf18      	it	ne
 800d676:	6059      	strne	r1, [r3, #4]
 800d678:	6863      	ldr	r3, [r4, #4]
 800d67a:	bf08      	it	eq
 800d67c:	f8c8 1000 	streq.w	r1, [r8]
 800d680:	5162      	str	r2, [r4, r5]
 800d682:	604b      	str	r3, [r1, #4]
 800d684:	4630      	mov	r0, r6
 800d686:	f000 f82f 	bl	800d6e8 <__malloc_unlock>
 800d68a:	f104 000b 	add.w	r0, r4, #11
 800d68e:	1d23      	adds	r3, r4, #4
 800d690:	f020 0007 	bic.w	r0, r0, #7
 800d694:	1ac2      	subs	r2, r0, r3
 800d696:	bf1c      	itt	ne
 800d698:	1a1b      	subne	r3, r3, r0
 800d69a:	50a3      	strne	r3, [r4, r2]
 800d69c:	e7af      	b.n	800d5fe <_malloc_r+0x22>
 800d69e:	6862      	ldr	r2, [r4, #4]
 800d6a0:	42a3      	cmp	r3, r4
 800d6a2:	bf0c      	ite	eq
 800d6a4:	f8c8 2000 	streq.w	r2, [r8]
 800d6a8:	605a      	strne	r2, [r3, #4]
 800d6aa:	e7eb      	b.n	800d684 <_malloc_r+0xa8>
 800d6ac:	4623      	mov	r3, r4
 800d6ae:	6864      	ldr	r4, [r4, #4]
 800d6b0:	e7ae      	b.n	800d610 <_malloc_r+0x34>
 800d6b2:	463c      	mov	r4, r7
 800d6b4:	687f      	ldr	r7, [r7, #4]
 800d6b6:	e7b6      	b.n	800d626 <_malloc_r+0x4a>
 800d6b8:	461a      	mov	r2, r3
 800d6ba:	685b      	ldr	r3, [r3, #4]
 800d6bc:	42a3      	cmp	r3, r4
 800d6be:	d1fb      	bne.n	800d6b8 <_malloc_r+0xdc>
 800d6c0:	2300      	movs	r3, #0
 800d6c2:	6053      	str	r3, [r2, #4]
 800d6c4:	e7de      	b.n	800d684 <_malloc_r+0xa8>
 800d6c6:	230c      	movs	r3, #12
 800d6c8:	6033      	str	r3, [r6, #0]
 800d6ca:	4630      	mov	r0, r6
 800d6cc:	f000 f80c 	bl	800d6e8 <__malloc_unlock>
 800d6d0:	e794      	b.n	800d5fc <_malloc_r+0x20>
 800d6d2:	6005      	str	r5, [r0, #0]
 800d6d4:	e7d6      	b.n	800d684 <_malloc_r+0xa8>
 800d6d6:	bf00      	nop
 800d6d8:	24000d10 	.word	0x24000d10

0800d6dc <__malloc_lock>:
 800d6dc:	4801      	ldr	r0, [pc, #4]	@ (800d6e4 <__malloc_lock+0x8>)
 800d6de:	f001 be00 	b.w	800f2e2 <__retarget_lock_acquire_recursive>
 800d6e2:	bf00      	nop
 800d6e4:	24000e54 	.word	0x24000e54

0800d6e8 <__malloc_unlock>:
 800d6e8:	4801      	ldr	r0, [pc, #4]	@ (800d6f0 <__malloc_unlock+0x8>)
 800d6ea:	f001 bdfb 	b.w	800f2e4 <__retarget_lock_release_recursive>
 800d6ee:	bf00      	nop
 800d6f0:	24000e54 	.word	0x24000e54

0800d6f4 <sulp>:
 800d6f4:	b570      	push	{r4, r5, r6, lr}
 800d6f6:	4604      	mov	r4, r0
 800d6f8:	460d      	mov	r5, r1
 800d6fa:	4616      	mov	r6, r2
 800d6fc:	ec45 4b10 	vmov	d0, r4, r5
 800d700:	f003 fafa 	bl	8010cf8 <__ulp>
 800d704:	b17e      	cbz	r6, 800d726 <sulp+0x32>
 800d706:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800d70a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800d70e:	2b00      	cmp	r3, #0
 800d710:	dd09      	ble.n	800d726 <sulp+0x32>
 800d712:	051b      	lsls	r3, r3, #20
 800d714:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 800d718:	2000      	movs	r0, #0
 800d71a:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 800d71e:	ec41 0b17 	vmov	d7, r0, r1
 800d722:	ee20 0b07 	vmul.f64	d0, d0, d7
 800d726:	bd70      	pop	{r4, r5, r6, pc}

0800d728 <_strtod_l>:
 800d728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d72c:	ed2d 8b0a 	vpush	{d8-d12}
 800d730:	b097      	sub	sp, #92	@ 0x5c
 800d732:	4688      	mov	r8, r1
 800d734:	920e      	str	r2, [sp, #56]	@ 0x38
 800d736:	2200      	movs	r2, #0
 800d738:	9212      	str	r2, [sp, #72]	@ 0x48
 800d73a:	9005      	str	r0, [sp, #20]
 800d73c:	f04f 0a00 	mov.w	sl, #0
 800d740:	f04f 0b00 	mov.w	fp, #0
 800d744:	460a      	mov	r2, r1
 800d746:	9211      	str	r2, [sp, #68]	@ 0x44
 800d748:	7811      	ldrb	r1, [r2, #0]
 800d74a:	292b      	cmp	r1, #43	@ 0x2b
 800d74c:	d04c      	beq.n	800d7e8 <_strtod_l+0xc0>
 800d74e:	d839      	bhi.n	800d7c4 <_strtod_l+0x9c>
 800d750:	290d      	cmp	r1, #13
 800d752:	d833      	bhi.n	800d7bc <_strtod_l+0x94>
 800d754:	2908      	cmp	r1, #8
 800d756:	d833      	bhi.n	800d7c0 <_strtod_l+0x98>
 800d758:	2900      	cmp	r1, #0
 800d75a:	d03c      	beq.n	800d7d6 <_strtod_l+0xae>
 800d75c:	2200      	movs	r2, #0
 800d75e:	9208      	str	r2, [sp, #32]
 800d760:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 800d762:	782a      	ldrb	r2, [r5, #0]
 800d764:	2a30      	cmp	r2, #48	@ 0x30
 800d766:	f040 80b5 	bne.w	800d8d4 <_strtod_l+0x1ac>
 800d76a:	786a      	ldrb	r2, [r5, #1]
 800d76c:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800d770:	2a58      	cmp	r2, #88	@ 0x58
 800d772:	d170      	bne.n	800d856 <_strtod_l+0x12e>
 800d774:	9302      	str	r3, [sp, #8]
 800d776:	9b08      	ldr	r3, [sp, #32]
 800d778:	9301      	str	r3, [sp, #4]
 800d77a:	ab12      	add	r3, sp, #72	@ 0x48
 800d77c:	9300      	str	r3, [sp, #0]
 800d77e:	4a8b      	ldr	r2, [pc, #556]	@ (800d9ac <_strtod_l+0x284>)
 800d780:	9805      	ldr	r0, [sp, #20]
 800d782:	ab13      	add	r3, sp, #76	@ 0x4c
 800d784:	a911      	add	r1, sp, #68	@ 0x44
 800d786:	f002 fc5f 	bl	8010048 <__gethex>
 800d78a:	f010 060f 	ands.w	r6, r0, #15
 800d78e:	4604      	mov	r4, r0
 800d790:	d005      	beq.n	800d79e <_strtod_l+0x76>
 800d792:	2e06      	cmp	r6, #6
 800d794:	d12a      	bne.n	800d7ec <_strtod_l+0xc4>
 800d796:	3501      	adds	r5, #1
 800d798:	2300      	movs	r3, #0
 800d79a:	9511      	str	r5, [sp, #68]	@ 0x44
 800d79c:	9308      	str	r3, [sp, #32]
 800d79e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	f040 852f 	bne.w	800e204 <_strtod_l+0xadc>
 800d7a6:	9b08      	ldr	r3, [sp, #32]
 800d7a8:	ec4b ab10 	vmov	d0, sl, fp
 800d7ac:	b1cb      	cbz	r3, 800d7e2 <_strtod_l+0xba>
 800d7ae:	eeb1 0b40 	vneg.f64	d0, d0
 800d7b2:	b017      	add	sp, #92	@ 0x5c
 800d7b4:	ecbd 8b0a 	vpop	{d8-d12}
 800d7b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7bc:	2920      	cmp	r1, #32
 800d7be:	d1cd      	bne.n	800d75c <_strtod_l+0x34>
 800d7c0:	3201      	adds	r2, #1
 800d7c2:	e7c0      	b.n	800d746 <_strtod_l+0x1e>
 800d7c4:	292d      	cmp	r1, #45	@ 0x2d
 800d7c6:	d1c9      	bne.n	800d75c <_strtod_l+0x34>
 800d7c8:	2101      	movs	r1, #1
 800d7ca:	9108      	str	r1, [sp, #32]
 800d7cc:	1c51      	adds	r1, r2, #1
 800d7ce:	9111      	str	r1, [sp, #68]	@ 0x44
 800d7d0:	7852      	ldrb	r2, [r2, #1]
 800d7d2:	2a00      	cmp	r2, #0
 800d7d4:	d1c4      	bne.n	800d760 <_strtod_l+0x38>
 800d7d6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d7d8:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	f040 850f 	bne.w	800e200 <_strtod_l+0xad8>
 800d7e2:	ec4b ab10 	vmov	d0, sl, fp
 800d7e6:	e7e4      	b.n	800d7b2 <_strtod_l+0x8a>
 800d7e8:	2100      	movs	r1, #0
 800d7ea:	e7ee      	b.n	800d7ca <_strtod_l+0xa2>
 800d7ec:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800d7ee:	b13a      	cbz	r2, 800d800 <_strtod_l+0xd8>
 800d7f0:	2135      	movs	r1, #53	@ 0x35
 800d7f2:	a814      	add	r0, sp, #80	@ 0x50
 800d7f4:	f003 fb77 	bl	8010ee6 <__copybits>
 800d7f8:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800d7fa:	9805      	ldr	r0, [sp, #20]
 800d7fc:	f002 ff48 	bl	8010690 <_Bfree>
 800d800:	1e73      	subs	r3, r6, #1
 800d802:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800d804:	2b04      	cmp	r3, #4
 800d806:	d806      	bhi.n	800d816 <_strtod_l+0xee>
 800d808:	e8df f003 	tbb	[pc, r3]
 800d80c:	201d0314 	.word	0x201d0314
 800d810:	14          	.byte	0x14
 800d811:	00          	.byte	0x00
 800d812:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 800d816:	05e3      	lsls	r3, r4, #23
 800d818:	bf48      	it	mi
 800d81a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800d81e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d822:	0d1b      	lsrs	r3, r3, #20
 800d824:	051b      	lsls	r3, r3, #20
 800d826:	2b00      	cmp	r3, #0
 800d828:	d1b9      	bne.n	800d79e <_strtod_l+0x76>
 800d82a:	f001 fd2f 	bl	800f28c <__errno>
 800d82e:	2322      	movs	r3, #34	@ 0x22
 800d830:	6003      	str	r3, [r0, #0]
 800d832:	e7b4      	b.n	800d79e <_strtod_l+0x76>
 800d834:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 800d838:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800d83c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800d840:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800d844:	e7e7      	b.n	800d816 <_strtod_l+0xee>
 800d846:	f8df b16c 	ldr.w	fp, [pc, #364]	@ 800d9b4 <_strtod_l+0x28c>
 800d84a:	e7e4      	b.n	800d816 <_strtod_l+0xee>
 800d84c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800d850:	f04f 3aff 	mov.w	sl, #4294967295
 800d854:	e7df      	b.n	800d816 <_strtod_l+0xee>
 800d856:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d858:	1c5a      	adds	r2, r3, #1
 800d85a:	9211      	str	r2, [sp, #68]	@ 0x44
 800d85c:	785b      	ldrb	r3, [r3, #1]
 800d85e:	2b30      	cmp	r3, #48	@ 0x30
 800d860:	d0f9      	beq.n	800d856 <_strtod_l+0x12e>
 800d862:	2b00      	cmp	r3, #0
 800d864:	d09b      	beq.n	800d79e <_strtod_l+0x76>
 800d866:	2301      	movs	r3, #1
 800d868:	2600      	movs	r6, #0
 800d86a:	9307      	str	r3, [sp, #28]
 800d86c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d86e:	930a      	str	r3, [sp, #40]	@ 0x28
 800d870:	46b1      	mov	r9, r6
 800d872:	4635      	mov	r5, r6
 800d874:	220a      	movs	r2, #10
 800d876:	9811      	ldr	r0, [sp, #68]	@ 0x44
 800d878:	7804      	ldrb	r4, [r0, #0]
 800d87a:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 800d87e:	b2d9      	uxtb	r1, r3
 800d880:	2909      	cmp	r1, #9
 800d882:	d929      	bls.n	800d8d8 <_strtod_l+0x1b0>
 800d884:	494a      	ldr	r1, [pc, #296]	@ (800d9b0 <_strtod_l+0x288>)
 800d886:	2201      	movs	r2, #1
 800d888:	f001 fc94 	bl	800f1b4 <strncmp>
 800d88c:	b378      	cbz	r0, 800d8ee <_strtod_l+0x1c6>
 800d88e:	2000      	movs	r0, #0
 800d890:	4622      	mov	r2, r4
 800d892:	462b      	mov	r3, r5
 800d894:	4607      	mov	r7, r0
 800d896:	9006      	str	r0, [sp, #24]
 800d898:	2a65      	cmp	r2, #101	@ 0x65
 800d89a:	d001      	beq.n	800d8a0 <_strtod_l+0x178>
 800d89c:	2a45      	cmp	r2, #69	@ 0x45
 800d89e:	d117      	bne.n	800d8d0 <_strtod_l+0x1a8>
 800d8a0:	b91b      	cbnz	r3, 800d8aa <_strtod_l+0x182>
 800d8a2:	9b07      	ldr	r3, [sp, #28]
 800d8a4:	4303      	orrs	r3, r0
 800d8a6:	d096      	beq.n	800d7d6 <_strtod_l+0xae>
 800d8a8:	2300      	movs	r3, #0
 800d8aa:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 800d8ae:	f108 0201 	add.w	r2, r8, #1
 800d8b2:	9211      	str	r2, [sp, #68]	@ 0x44
 800d8b4:	f898 2001 	ldrb.w	r2, [r8, #1]
 800d8b8:	2a2b      	cmp	r2, #43	@ 0x2b
 800d8ba:	d06b      	beq.n	800d994 <_strtod_l+0x26c>
 800d8bc:	2a2d      	cmp	r2, #45	@ 0x2d
 800d8be:	d071      	beq.n	800d9a4 <_strtod_l+0x27c>
 800d8c0:	f04f 0e00 	mov.w	lr, #0
 800d8c4:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 800d8c8:	2c09      	cmp	r4, #9
 800d8ca:	d979      	bls.n	800d9c0 <_strtod_l+0x298>
 800d8cc:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 800d8d0:	2400      	movs	r4, #0
 800d8d2:	e094      	b.n	800d9fe <_strtod_l+0x2d6>
 800d8d4:	2300      	movs	r3, #0
 800d8d6:	e7c7      	b.n	800d868 <_strtod_l+0x140>
 800d8d8:	2d08      	cmp	r5, #8
 800d8da:	f100 0001 	add.w	r0, r0, #1
 800d8de:	bfd4      	ite	le
 800d8e0:	fb02 3909 	mlale	r9, r2, r9, r3
 800d8e4:	fb02 3606 	mlagt	r6, r2, r6, r3
 800d8e8:	3501      	adds	r5, #1
 800d8ea:	9011      	str	r0, [sp, #68]	@ 0x44
 800d8ec:	e7c3      	b.n	800d876 <_strtod_l+0x14e>
 800d8ee:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d8f0:	1c5a      	adds	r2, r3, #1
 800d8f2:	9211      	str	r2, [sp, #68]	@ 0x44
 800d8f4:	785a      	ldrb	r2, [r3, #1]
 800d8f6:	b375      	cbz	r5, 800d956 <_strtod_l+0x22e>
 800d8f8:	4607      	mov	r7, r0
 800d8fa:	462b      	mov	r3, r5
 800d8fc:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800d900:	2909      	cmp	r1, #9
 800d902:	d913      	bls.n	800d92c <_strtod_l+0x204>
 800d904:	2101      	movs	r1, #1
 800d906:	9106      	str	r1, [sp, #24]
 800d908:	e7c6      	b.n	800d898 <_strtod_l+0x170>
 800d90a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d90c:	1c5a      	adds	r2, r3, #1
 800d90e:	9211      	str	r2, [sp, #68]	@ 0x44
 800d910:	785a      	ldrb	r2, [r3, #1]
 800d912:	3001      	adds	r0, #1
 800d914:	2a30      	cmp	r2, #48	@ 0x30
 800d916:	d0f8      	beq.n	800d90a <_strtod_l+0x1e2>
 800d918:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800d91c:	2b08      	cmp	r3, #8
 800d91e:	f200 8476 	bhi.w	800e20e <_strtod_l+0xae6>
 800d922:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d924:	930a      	str	r3, [sp, #40]	@ 0x28
 800d926:	4607      	mov	r7, r0
 800d928:	2000      	movs	r0, #0
 800d92a:	4603      	mov	r3, r0
 800d92c:	3a30      	subs	r2, #48	@ 0x30
 800d92e:	f100 0101 	add.w	r1, r0, #1
 800d932:	d023      	beq.n	800d97c <_strtod_l+0x254>
 800d934:	440f      	add	r7, r1
 800d936:	eb00 0c03 	add.w	ip, r0, r3
 800d93a:	4619      	mov	r1, r3
 800d93c:	240a      	movs	r4, #10
 800d93e:	4561      	cmp	r1, ip
 800d940:	d10b      	bne.n	800d95a <_strtod_l+0x232>
 800d942:	1c5c      	adds	r4, r3, #1
 800d944:	4403      	add	r3, r0
 800d946:	2b08      	cmp	r3, #8
 800d948:	4404      	add	r4, r0
 800d94a:	dc11      	bgt.n	800d970 <_strtod_l+0x248>
 800d94c:	230a      	movs	r3, #10
 800d94e:	fb03 2909 	mla	r9, r3, r9, r2
 800d952:	2100      	movs	r1, #0
 800d954:	e013      	b.n	800d97e <_strtod_l+0x256>
 800d956:	4628      	mov	r0, r5
 800d958:	e7dc      	b.n	800d914 <_strtod_l+0x1ec>
 800d95a:	2908      	cmp	r1, #8
 800d95c:	f101 0101 	add.w	r1, r1, #1
 800d960:	dc02      	bgt.n	800d968 <_strtod_l+0x240>
 800d962:	fb04 f909 	mul.w	r9, r4, r9
 800d966:	e7ea      	b.n	800d93e <_strtod_l+0x216>
 800d968:	2910      	cmp	r1, #16
 800d96a:	bfd8      	it	le
 800d96c:	4366      	mulle	r6, r4
 800d96e:	e7e6      	b.n	800d93e <_strtod_l+0x216>
 800d970:	2b0f      	cmp	r3, #15
 800d972:	dcee      	bgt.n	800d952 <_strtod_l+0x22a>
 800d974:	230a      	movs	r3, #10
 800d976:	fb03 2606 	mla	r6, r3, r6, r2
 800d97a:	e7ea      	b.n	800d952 <_strtod_l+0x22a>
 800d97c:	461c      	mov	r4, r3
 800d97e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d980:	1c5a      	adds	r2, r3, #1
 800d982:	9211      	str	r2, [sp, #68]	@ 0x44
 800d984:	785a      	ldrb	r2, [r3, #1]
 800d986:	4608      	mov	r0, r1
 800d988:	4623      	mov	r3, r4
 800d98a:	e7b7      	b.n	800d8fc <_strtod_l+0x1d4>
 800d98c:	2301      	movs	r3, #1
 800d98e:	2700      	movs	r7, #0
 800d990:	9306      	str	r3, [sp, #24]
 800d992:	e786      	b.n	800d8a2 <_strtod_l+0x17a>
 800d994:	f04f 0e00 	mov.w	lr, #0
 800d998:	f108 0202 	add.w	r2, r8, #2
 800d99c:	9211      	str	r2, [sp, #68]	@ 0x44
 800d99e:	f898 2002 	ldrb.w	r2, [r8, #2]
 800d9a2:	e78f      	b.n	800d8c4 <_strtod_l+0x19c>
 800d9a4:	f04f 0e01 	mov.w	lr, #1
 800d9a8:	e7f6      	b.n	800d998 <_strtod_l+0x270>
 800d9aa:	bf00      	nop
 800d9ac:	080126b8 	.word	0x080126b8
 800d9b0:	080126a0 	.word	0x080126a0
 800d9b4:	7ff00000 	.word	0x7ff00000
 800d9b8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800d9ba:	1c54      	adds	r4, r2, #1
 800d9bc:	9411      	str	r4, [sp, #68]	@ 0x44
 800d9be:	7852      	ldrb	r2, [r2, #1]
 800d9c0:	2a30      	cmp	r2, #48	@ 0x30
 800d9c2:	d0f9      	beq.n	800d9b8 <_strtod_l+0x290>
 800d9c4:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 800d9c8:	2c08      	cmp	r4, #8
 800d9ca:	d881      	bhi.n	800d8d0 <_strtod_l+0x1a8>
 800d9cc:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 800d9d0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800d9d2:	9209      	str	r2, [sp, #36]	@ 0x24
 800d9d4:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800d9d6:	1c51      	adds	r1, r2, #1
 800d9d8:	9111      	str	r1, [sp, #68]	@ 0x44
 800d9da:	7852      	ldrb	r2, [r2, #1]
 800d9dc:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 800d9e0:	2c09      	cmp	r4, #9
 800d9e2:	d938      	bls.n	800da56 <_strtod_l+0x32e>
 800d9e4:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 800d9e6:	1b0c      	subs	r4, r1, r4
 800d9e8:	2c08      	cmp	r4, #8
 800d9ea:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 800d9ee:	dc02      	bgt.n	800d9f6 <_strtod_l+0x2ce>
 800d9f0:	4564      	cmp	r4, ip
 800d9f2:	bfa8      	it	ge
 800d9f4:	4664      	movge	r4, ip
 800d9f6:	f1be 0f00 	cmp.w	lr, #0
 800d9fa:	d000      	beq.n	800d9fe <_strtod_l+0x2d6>
 800d9fc:	4264      	negs	r4, r4
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	d14e      	bne.n	800daa0 <_strtod_l+0x378>
 800da02:	9b07      	ldr	r3, [sp, #28]
 800da04:	4318      	orrs	r0, r3
 800da06:	f47f aeca 	bne.w	800d79e <_strtod_l+0x76>
 800da0a:	9b06      	ldr	r3, [sp, #24]
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	f47f aee2 	bne.w	800d7d6 <_strtod_l+0xae>
 800da12:	2a69      	cmp	r2, #105	@ 0x69
 800da14:	d027      	beq.n	800da66 <_strtod_l+0x33e>
 800da16:	dc24      	bgt.n	800da62 <_strtod_l+0x33a>
 800da18:	2a49      	cmp	r2, #73	@ 0x49
 800da1a:	d024      	beq.n	800da66 <_strtod_l+0x33e>
 800da1c:	2a4e      	cmp	r2, #78	@ 0x4e
 800da1e:	f47f aeda 	bne.w	800d7d6 <_strtod_l+0xae>
 800da22:	4997      	ldr	r1, [pc, #604]	@ (800dc80 <_strtod_l+0x558>)
 800da24:	a811      	add	r0, sp, #68	@ 0x44
 800da26:	f002 fd31 	bl	801048c <__match>
 800da2a:	2800      	cmp	r0, #0
 800da2c:	f43f aed3 	beq.w	800d7d6 <_strtod_l+0xae>
 800da30:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800da32:	781b      	ldrb	r3, [r3, #0]
 800da34:	2b28      	cmp	r3, #40	@ 0x28
 800da36:	d12d      	bne.n	800da94 <_strtod_l+0x36c>
 800da38:	4992      	ldr	r1, [pc, #584]	@ (800dc84 <_strtod_l+0x55c>)
 800da3a:	aa14      	add	r2, sp, #80	@ 0x50
 800da3c:	a811      	add	r0, sp, #68	@ 0x44
 800da3e:	f002 fd39 	bl	80104b4 <__hexnan>
 800da42:	2805      	cmp	r0, #5
 800da44:	d126      	bne.n	800da94 <_strtod_l+0x36c>
 800da46:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800da48:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 800da4c:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800da50:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800da54:	e6a3      	b.n	800d79e <_strtod_l+0x76>
 800da56:	240a      	movs	r4, #10
 800da58:	fb04 2c0c 	mla	ip, r4, ip, r2
 800da5c:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 800da60:	e7b8      	b.n	800d9d4 <_strtod_l+0x2ac>
 800da62:	2a6e      	cmp	r2, #110	@ 0x6e
 800da64:	e7db      	b.n	800da1e <_strtod_l+0x2f6>
 800da66:	4988      	ldr	r1, [pc, #544]	@ (800dc88 <_strtod_l+0x560>)
 800da68:	a811      	add	r0, sp, #68	@ 0x44
 800da6a:	f002 fd0f 	bl	801048c <__match>
 800da6e:	2800      	cmp	r0, #0
 800da70:	f43f aeb1 	beq.w	800d7d6 <_strtod_l+0xae>
 800da74:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800da76:	4985      	ldr	r1, [pc, #532]	@ (800dc8c <_strtod_l+0x564>)
 800da78:	3b01      	subs	r3, #1
 800da7a:	a811      	add	r0, sp, #68	@ 0x44
 800da7c:	9311      	str	r3, [sp, #68]	@ 0x44
 800da7e:	f002 fd05 	bl	801048c <__match>
 800da82:	b910      	cbnz	r0, 800da8a <_strtod_l+0x362>
 800da84:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800da86:	3301      	adds	r3, #1
 800da88:	9311      	str	r3, [sp, #68]	@ 0x44
 800da8a:	f8df b214 	ldr.w	fp, [pc, #532]	@ 800dca0 <_strtod_l+0x578>
 800da8e:	f04f 0a00 	mov.w	sl, #0
 800da92:	e684      	b.n	800d79e <_strtod_l+0x76>
 800da94:	487e      	ldr	r0, [pc, #504]	@ (800dc90 <_strtod_l+0x568>)
 800da96:	f001 fc37 	bl	800f308 <nan>
 800da9a:	ec5b ab10 	vmov	sl, fp, d0
 800da9e:	e67e      	b.n	800d79e <_strtod_l+0x76>
 800daa0:	ee07 9a90 	vmov	s15, r9
 800daa4:	1be2      	subs	r2, r4, r7
 800daa6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800daaa:	2d00      	cmp	r5, #0
 800daac:	bf08      	it	eq
 800daae:	461d      	moveq	r5, r3
 800dab0:	2b10      	cmp	r3, #16
 800dab2:	9209      	str	r2, [sp, #36]	@ 0x24
 800dab4:	461a      	mov	r2, r3
 800dab6:	bfa8      	it	ge
 800dab8:	2210      	movge	r2, #16
 800daba:	2b09      	cmp	r3, #9
 800dabc:	ec5b ab17 	vmov	sl, fp, d7
 800dac0:	dc15      	bgt.n	800daee <_strtod_l+0x3c6>
 800dac2:	1be1      	subs	r1, r4, r7
 800dac4:	2900      	cmp	r1, #0
 800dac6:	f43f ae6a 	beq.w	800d79e <_strtod_l+0x76>
 800daca:	eba4 0107 	sub.w	r1, r4, r7
 800dace:	dd72      	ble.n	800dbb6 <_strtod_l+0x48e>
 800dad0:	2916      	cmp	r1, #22
 800dad2:	dc59      	bgt.n	800db88 <_strtod_l+0x460>
 800dad4:	4b6f      	ldr	r3, [pc, #444]	@ (800dc94 <_strtod_l+0x56c>)
 800dad6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dad8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dadc:	ed93 7b00 	vldr	d7, [r3]
 800dae0:	ec4b ab16 	vmov	d6, sl, fp
 800dae4:	ee27 7b06 	vmul.f64	d7, d7, d6
 800dae8:	ec5b ab17 	vmov	sl, fp, d7
 800daec:	e657      	b.n	800d79e <_strtod_l+0x76>
 800daee:	4969      	ldr	r1, [pc, #420]	@ (800dc94 <_strtod_l+0x56c>)
 800daf0:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800daf4:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 800daf8:	ee06 6a90 	vmov	s13, r6
 800dafc:	2b0f      	cmp	r3, #15
 800dafe:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 800db02:	eea7 6b05 	vfma.f64	d6, d7, d5
 800db06:	ec5b ab16 	vmov	sl, fp, d6
 800db0a:	ddda      	ble.n	800dac2 <_strtod_l+0x39a>
 800db0c:	1a9a      	subs	r2, r3, r2
 800db0e:	1be1      	subs	r1, r4, r7
 800db10:	440a      	add	r2, r1
 800db12:	2a00      	cmp	r2, #0
 800db14:	f340 8094 	ble.w	800dc40 <_strtod_l+0x518>
 800db18:	f012 000f 	ands.w	r0, r2, #15
 800db1c:	d00a      	beq.n	800db34 <_strtod_l+0x40c>
 800db1e:	495d      	ldr	r1, [pc, #372]	@ (800dc94 <_strtod_l+0x56c>)
 800db20:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800db24:	ed91 7b00 	vldr	d7, [r1]
 800db28:	ec4b ab16 	vmov	d6, sl, fp
 800db2c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800db30:	ec5b ab17 	vmov	sl, fp, d7
 800db34:	f032 020f 	bics.w	r2, r2, #15
 800db38:	d073      	beq.n	800dc22 <_strtod_l+0x4fa>
 800db3a:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 800db3e:	dd47      	ble.n	800dbd0 <_strtod_l+0x4a8>
 800db40:	2400      	movs	r4, #0
 800db42:	4625      	mov	r5, r4
 800db44:	9407      	str	r4, [sp, #28]
 800db46:	4626      	mov	r6, r4
 800db48:	9a05      	ldr	r2, [sp, #20]
 800db4a:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800dca0 <_strtod_l+0x578>
 800db4e:	2322      	movs	r3, #34	@ 0x22
 800db50:	6013      	str	r3, [r2, #0]
 800db52:	f04f 0a00 	mov.w	sl, #0
 800db56:	9b07      	ldr	r3, [sp, #28]
 800db58:	2b00      	cmp	r3, #0
 800db5a:	f43f ae20 	beq.w	800d79e <_strtod_l+0x76>
 800db5e:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800db60:	9805      	ldr	r0, [sp, #20]
 800db62:	f002 fd95 	bl	8010690 <_Bfree>
 800db66:	9805      	ldr	r0, [sp, #20]
 800db68:	4631      	mov	r1, r6
 800db6a:	f002 fd91 	bl	8010690 <_Bfree>
 800db6e:	9805      	ldr	r0, [sp, #20]
 800db70:	4629      	mov	r1, r5
 800db72:	f002 fd8d 	bl	8010690 <_Bfree>
 800db76:	9907      	ldr	r1, [sp, #28]
 800db78:	9805      	ldr	r0, [sp, #20]
 800db7a:	f002 fd89 	bl	8010690 <_Bfree>
 800db7e:	9805      	ldr	r0, [sp, #20]
 800db80:	4621      	mov	r1, r4
 800db82:	f002 fd85 	bl	8010690 <_Bfree>
 800db86:	e60a      	b.n	800d79e <_strtod_l+0x76>
 800db88:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 800db8c:	1be0      	subs	r0, r4, r7
 800db8e:	4281      	cmp	r1, r0
 800db90:	dbbc      	blt.n	800db0c <_strtod_l+0x3e4>
 800db92:	4a40      	ldr	r2, [pc, #256]	@ (800dc94 <_strtod_l+0x56c>)
 800db94:	f1c3 030f 	rsb	r3, r3, #15
 800db98:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800db9c:	ed91 7b00 	vldr	d7, [r1]
 800dba0:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800dba2:	ec4b ab16 	vmov	d6, sl, fp
 800dba6:	1acb      	subs	r3, r1, r3
 800dba8:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800dbac:	ee27 7b06 	vmul.f64	d7, d7, d6
 800dbb0:	ed92 6b00 	vldr	d6, [r2]
 800dbb4:	e796      	b.n	800dae4 <_strtod_l+0x3bc>
 800dbb6:	3116      	adds	r1, #22
 800dbb8:	dba8      	blt.n	800db0c <_strtod_l+0x3e4>
 800dbba:	4b36      	ldr	r3, [pc, #216]	@ (800dc94 <_strtod_l+0x56c>)
 800dbbc:	1b3c      	subs	r4, r7, r4
 800dbbe:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800dbc2:	ed94 7b00 	vldr	d7, [r4]
 800dbc6:	ec4b ab16 	vmov	d6, sl, fp
 800dbca:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800dbce:	e78b      	b.n	800dae8 <_strtod_l+0x3c0>
 800dbd0:	2000      	movs	r0, #0
 800dbd2:	ec4b ab17 	vmov	d7, sl, fp
 800dbd6:	4e30      	ldr	r6, [pc, #192]	@ (800dc98 <_strtod_l+0x570>)
 800dbd8:	1112      	asrs	r2, r2, #4
 800dbda:	4601      	mov	r1, r0
 800dbdc:	2a01      	cmp	r2, #1
 800dbde:	dc23      	bgt.n	800dc28 <_strtod_l+0x500>
 800dbe0:	b108      	cbz	r0, 800dbe6 <_strtod_l+0x4be>
 800dbe2:	ec5b ab17 	vmov	sl, fp, d7
 800dbe6:	4a2c      	ldr	r2, [pc, #176]	@ (800dc98 <_strtod_l+0x570>)
 800dbe8:	482c      	ldr	r0, [pc, #176]	@ (800dc9c <_strtod_l+0x574>)
 800dbea:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800dbee:	ed92 7b00 	vldr	d7, [r2]
 800dbf2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800dbf6:	ec4b ab16 	vmov	d6, sl, fp
 800dbfa:	4a29      	ldr	r2, [pc, #164]	@ (800dca0 <_strtod_l+0x578>)
 800dbfc:	ee27 7b06 	vmul.f64	d7, d7, d6
 800dc00:	ee17 1a90 	vmov	r1, s15
 800dc04:	400a      	ands	r2, r1
 800dc06:	4282      	cmp	r2, r0
 800dc08:	ec5b ab17 	vmov	sl, fp, d7
 800dc0c:	d898      	bhi.n	800db40 <_strtod_l+0x418>
 800dc0e:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 800dc12:	4282      	cmp	r2, r0
 800dc14:	bf86      	itte	hi
 800dc16:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 800dca4 <_strtod_l+0x57c>
 800dc1a:	f04f 3aff 	movhi.w	sl, #4294967295
 800dc1e:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 800dc22:	2200      	movs	r2, #0
 800dc24:	9206      	str	r2, [sp, #24]
 800dc26:	e076      	b.n	800dd16 <_strtod_l+0x5ee>
 800dc28:	f012 0f01 	tst.w	r2, #1
 800dc2c:	d004      	beq.n	800dc38 <_strtod_l+0x510>
 800dc2e:	ed96 6b00 	vldr	d6, [r6]
 800dc32:	2001      	movs	r0, #1
 800dc34:	ee27 7b06 	vmul.f64	d7, d7, d6
 800dc38:	3101      	adds	r1, #1
 800dc3a:	1052      	asrs	r2, r2, #1
 800dc3c:	3608      	adds	r6, #8
 800dc3e:	e7cd      	b.n	800dbdc <_strtod_l+0x4b4>
 800dc40:	d0ef      	beq.n	800dc22 <_strtod_l+0x4fa>
 800dc42:	4252      	negs	r2, r2
 800dc44:	f012 000f 	ands.w	r0, r2, #15
 800dc48:	d00a      	beq.n	800dc60 <_strtod_l+0x538>
 800dc4a:	4912      	ldr	r1, [pc, #72]	@ (800dc94 <_strtod_l+0x56c>)
 800dc4c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800dc50:	ed91 7b00 	vldr	d7, [r1]
 800dc54:	ec4b ab16 	vmov	d6, sl, fp
 800dc58:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800dc5c:	ec5b ab17 	vmov	sl, fp, d7
 800dc60:	1112      	asrs	r2, r2, #4
 800dc62:	d0de      	beq.n	800dc22 <_strtod_l+0x4fa>
 800dc64:	2a1f      	cmp	r2, #31
 800dc66:	dd1f      	ble.n	800dca8 <_strtod_l+0x580>
 800dc68:	2400      	movs	r4, #0
 800dc6a:	4625      	mov	r5, r4
 800dc6c:	9407      	str	r4, [sp, #28]
 800dc6e:	4626      	mov	r6, r4
 800dc70:	9a05      	ldr	r2, [sp, #20]
 800dc72:	2322      	movs	r3, #34	@ 0x22
 800dc74:	f04f 0a00 	mov.w	sl, #0
 800dc78:	f04f 0b00 	mov.w	fp, #0
 800dc7c:	6013      	str	r3, [r2, #0]
 800dc7e:	e76a      	b.n	800db56 <_strtod_l+0x42e>
 800dc80:	08012705 	.word	0x08012705
 800dc84:	080126a4 	.word	0x080126a4
 800dc88:	080126fd 	.word	0x080126fd
 800dc8c:	0801273a 	.word	0x0801273a
 800dc90:	08012ae8 	.word	0x08012ae8
 800dc94:	080128b8 	.word	0x080128b8
 800dc98:	08012890 	.word	0x08012890
 800dc9c:	7ca00000 	.word	0x7ca00000
 800dca0:	7ff00000 	.word	0x7ff00000
 800dca4:	7fefffff 	.word	0x7fefffff
 800dca8:	f012 0110 	ands.w	r1, r2, #16
 800dcac:	bf18      	it	ne
 800dcae:	216a      	movne	r1, #106	@ 0x6a
 800dcb0:	9106      	str	r1, [sp, #24]
 800dcb2:	ec4b ab17 	vmov	d7, sl, fp
 800dcb6:	49b0      	ldr	r1, [pc, #704]	@ (800df78 <_strtod_l+0x850>)
 800dcb8:	2000      	movs	r0, #0
 800dcba:	07d6      	lsls	r6, r2, #31
 800dcbc:	d504      	bpl.n	800dcc8 <_strtod_l+0x5a0>
 800dcbe:	ed91 6b00 	vldr	d6, [r1]
 800dcc2:	2001      	movs	r0, #1
 800dcc4:	ee27 7b06 	vmul.f64	d7, d7, d6
 800dcc8:	1052      	asrs	r2, r2, #1
 800dcca:	f101 0108 	add.w	r1, r1, #8
 800dcce:	d1f4      	bne.n	800dcba <_strtod_l+0x592>
 800dcd0:	b108      	cbz	r0, 800dcd6 <_strtod_l+0x5ae>
 800dcd2:	ec5b ab17 	vmov	sl, fp, d7
 800dcd6:	9a06      	ldr	r2, [sp, #24]
 800dcd8:	b1b2      	cbz	r2, 800dd08 <_strtod_l+0x5e0>
 800dcda:	f3cb 510a 	ubfx	r1, fp, #20, #11
 800dcde:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 800dce2:	2a00      	cmp	r2, #0
 800dce4:	4658      	mov	r0, fp
 800dce6:	dd0f      	ble.n	800dd08 <_strtod_l+0x5e0>
 800dce8:	2a1f      	cmp	r2, #31
 800dcea:	dd55      	ble.n	800dd98 <_strtod_l+0x670>
 800dcec:	2a34      	cmp	r2, #52	@ 0x34
 800dcee:	bfde      	ittt	le
 800dcf0:	f04f 32ff 	movle.w	r2, #4294967295
 800dcf4:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 800dcf8:	408a      	lslle	r2, r1
 800dcfa:	f04f 0a00 	mov.w	sl, #0
 800dcfe:	bfcc      	ite	gt
 800dd00:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800dd04:	ea02 0b00 	andle.w	fp, r2, r0
 800dd08:	ec4b ab17 	vmov	d7, sl, fp
 800dd0c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800dd10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd14:	d0a8      	beq.n	800dc68 <_strtod_l+0x540>
 800dd16:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800dd18:	9805      	ldr	r0, [sp, #20]
 800dd1a:	f8cd 9000 	str.w	r9, [sp]
 800dd1e:	462a      	mov	r2, r5
 800dd20:	f002 fd1e 	bl	8010760 <__s2b>
 800dd24:	9007      	str	r0, [sp, #28]
 800dd26:	2800      	cmp	r0, #0
 800dd28:	f43f af0a 	beq.w	800db40 <_strtod_l+0x418>
 800dd2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dd2e:	1b3f      	subs	r7, r7, r4
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	bfb4      	ite	lt
 800dd34:	463b      	movlt	r3, r7
 800dd36:	2300      	movge	r3, #0
 800dd38:	930a      	str	r3, [sp, #40]	@ 0x28
 800dd3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dd3c:	ed9f bb8a 	vldr	d11, [pc, #552]	@ 800df68 <_strtod_l+0x840>
 800dd40:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800dd44:	2400      	movs	r4, #0
 800dd46:	930d      	str	r3, [sp, #52]	@ 0x34
 800dd48:	4625      	mov	r5, r4
 800dd4a:	9b07      	ldr	r3, [sp, #28]
 800dd4c:	9805      	ldr	r0, [sp, #20]
 800dd4e:	6859      	ldr	r1, [r3, #4]
 800dd50:	f002 fc5e 	bl	8010610 <_Balloc>
 800dd54:	4606      	mov	r6, r0
 800dd56:	2800      	cmp	r0, #0
 800dd58:	f43f aef6 	beq.w	800db48 <_strtod_l+0x420>
 800dd5c:	9b07      	ldr	r3, [sp, #28]
 800dd5e:	691a      	ldr	r2, [r3, #16]
 800dd60:	ec4b ab19 	vmov	d9, sl, fp
 800dd64:	3202      	adds	r2, #2
 800dd66:	f103 010c 	add.w	r1, r3, #12
 800dd6a:	0092      	lsls	r2, r2, #2
 800dd6c:	300c      	adds	r0, #12
 800dd6e:	f001 faba 	bl	800f2e6 <memcpy>
 800dd72:	eeb0 0b49 	vmov.f64	d0, d9
 800dd76:	9805      	ldr	r0, [sp, #20]
 800dd78:	aa14      	add	r2, sp, #80	@ 0x50
 800dd7a:	a913      	add	r1, sp, #76	@ 0x4c
 800dd7c:	f003 f82c 	bl	8010dd8 <__d2b>
 800dd80:	9012      	str	r0, [sp, #72]	@ 0x48
 800dd82:	2800      	cmp	r0, #0
 800dd84:	f43f aee0 	beq.w	800db48 <_strtod_l+0x420>
 800dd88:	9805      	ldr	r0, [sp, #20]
 800dd8a:	2101      	movs	r1, #1
 800dd8c:	f002 fd7e 	bl	801088c <__i2b>
 800dd90:	4605      	mov	r5, r0
 800dd92:	b940      	cbnz	r0, 800dda6 <_strtod_l+0x67e>
 800dd94:	2500      	movs	r5, #0
 800dd96:	e6d7      	b.n	800db48 <_strtod_l+0x420>
 800dd98:	f04f 31ff 	mov.w	r1, #4294967295
 800dd9c:	fa01 f202 	lsl.w	r2, r1, r2
 800dda0:	ea02 0a0a 	and.w	sl, r2, sl
 800dda4:	e7b0      	b.n	800dd08 <_strtod_l+0x5e0>
 800dda6:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 800dda8:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800ddaa:	2f00      	cmp	r7, #0
 800ddac:	bfab      	itete	ge
 800ddae:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 800ddb0:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 800ddb2:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 800ddb6:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 800ddba:	bfac      	ite	ge
 800ddbc:	eb07 0903 	addge.w	r9, r7, r3
 800ddc0:	eba3 0807 	sublt.w	r8, r3, r7
 800ddc4:	9b06      	ldr	r3, [sp, #24]
 800ddc6:	1aff      	subs	r7, r7, r3
 800ddc8:	4417      	add	r7, r2
 800ddca:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 800ddce:	4a6b      	ldr	r2, [pc, #428]	@ (800df7c <_strtod_l+0x854>)
 800ddd0:	3f01      	subs	r7, #1
 800ddd2:	4297      	cmp	r7, r2
 800ddd4:	da51      	bge.n	800de7a <_strtod_l+0x752>
 800ddd6:	1bd1      	subs	r1, r2, r7
 800ddd8:	291f      	cmp	r1, #31
 800ddda:	eba3 0301 	sub.w	r3, r3, r1
 800ddde:	f04f 0201 	mov.w	r2, #1
 800dde2:	dc3e      	bgt.n	800de62 <_strtod_l+0x73a>
 800dde4:	408a      	lsls	r2, r1
 800dde6:	920c      	str	r2, [sp, #48]	@ 0x30
 800dde8:	2200      	movs	r2, #0
 800ddea:	920b      	str	r2, [sp, #44]	@ 0x2c
 800ddec:	eb09 0703 	add.w	r7, r9, r3
 800ddf0:	4498      	add	r8, r3
 800ddf2:	9b06      	ldr	r3, [sp, #24]
 800ddf4:	45b9      	cmp	r9, r7
 800ddf6:	4498      	add	r8, r3
 800ddf8:	464b      	mov	r3, r9
 800ddfa:	bfa8      	it	ge
 800ddfc:	463b      	movge	r3, r7
 800ddfe:	4543      	cmp	r3, r8
 800de00:	bfa8      	it	ge
 800de02:	4643      	movge	r3, r8
 800de04:	2b00      	cmp	r3, #0
 800de06:	bfc2      	ittt	gt
 800de08:	1aff      	subgt	r7, r7, r3
 800de0a:	eba8 0803 	subgt.w	r8, r8, r3
 800de0e:	eba9 0903 	subgt.w	r9, r9, r3
 800de12:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800de14:	2b00      	cmp	r3, #0
 800de16:	dd16      	ble.n	800de46 <_strtod_l+0x71e>
 800de18:	4629      	mov	r1, r5
 800de1a:	9805      	ldr	r0, [sp, #20]
 800de1c:	461a      	mov	r2, r3
 800de1e:	f002 fdf5 	bl	8010a0c <__pow5mult>
 800de22:	4605      	mov	r5, r0
 800de24:	2800      	cmp	r0, #0
 800de26:	d0b5      	beq.n	800dd94 <_strtod_l+0x66c>
 800de28:	4601      	mov	r1, r0
 800de2a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800de2c:	9805      	ldr	r0, [sp, #20]
 800de2e:	f002 fd43 	bl	80108b8 <__multiply>
 800de32:	900f      	str	r0, [sp, #60]	@ 0x3c
 800de34:	2800      	cmp	r0, #0
 800de36:	f43f ae87 	beq.w	800db48 <_strtod_l+0x420>
 800de3a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800de3c:	9805      	ldr	r0, [sp, #20]
 800de3e:	f002 fc27 	bl	8010690 <_Bfree>
 800de42:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800de44:	9312      	str	r3, [sp, #72]	@ 0x48
 800de46:	2f00      	cmp	r7, #0
 800de48:	dc1b      	bgt.n	800de82 <_strtod_l+0x75a>
 800de4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	dd21      	ble.n	800de94 <_strtod_l+0x76c>
 800de50:	4631      	mov	r1, r6
 800de52:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800de54:	9805      	ldr	r0, [sp, #20]
 800de56:	f002 fdd9 	bl	8010a0c <__pow5mult>
 800de5a:	4606      	mov	r6, r0
 800de5c:	b9d0      	cbnz	r0, 800de94 <_strtod_l+0x76c>
 800de5e:	2600      	movs	r6, #0
 800de60:	e672      	b.n	800db48 <_strtod_l+0x420>
 800de62:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 800de66:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 800de6a:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 800de6e:	37e2      	adds	r7, #226	@ 0xe2
 800de70:	fa02 f107 	lsl.w	r1, r2, r7
 800de74:	910b      	str	r1, [sp, #44]	@ 0x2c
 800de76:	920c      	str	r2, [sp, #48]	@ 0x30
 800de78:	e7b8      	b.n	800ddec <_strtod_l+0x6c4>
 800de7a:	2200      	movs	r2, #0
 800de7c:	920b      	str	r2, [sp, #44]	@ 0x2c
 800de7e:	2201      	movs	r2, #1
 800de80:	e7f9      	b.n	800de76 <_strtod_l+0x74e>
 800de82:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800de84:	9805      	ldr	r0, [sp, #20]
 800de86:	463a      	mov	r2, r7
 800de88:	f002 fe1a 	bl	8010ac0 <__lshift>
 800de8c:	9012      	str	r0, [sp, #72]	@ 0x48
 800de8e:	2800      	cmp	r0, #0
 800de90:	d1db      	bne.n	800de4a <_strtod_l+0x722>
 800de92:	e659      	b.n	800db48 <_strtod_l+0x420>
 800de94:	f1b8 0f00 	cmp.w	r8, #0
 800de98:	dd07      	ble.n	800deaa <_strtod_l+0x782>
 800de9a:	4631      	mov	r1, r6
 800de9c:	9805      	ldr	r0, [sp, #20]
 800de9e:	4642      	mov	r2, r8
 800dea0:	f002 fe0e 	bl	8010ac0 <__lshift>
 800dea4:	4606      	mov	r6, r0
 800dea6:	2800      	cmp	r0, #0
 800dea8:	d0d9      	beq.n	800de5e <_strtod_l+0x736>
 800deaa:	f1b9 0f00 	cmp.w	r9, #0
 800deae:	dd08      	ble.n	800dec2 <_strtod_l+0x79a>
 800deb0:	4629      	mov	r1, r5
 800deb2:	9805      	ldr	r0, [sp, #20]
 800deb4:	464a      	mov	r2, r9
 800deb6:	f002 fe03 	bl	8010ac0 <__lshift>
 800deba:	4605      	mov	r5, r0
 800debc:	2800      	cmp	r0, #0
 800debe:	f43f ae43 	beq.w	800db48 <_strtod_l+0x420>
 800dec2:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800dec4:	9805      	ldr	r0, [sp, #20]
 800dec6:	4632      	mov	r2, r6
 800dec8:	f002 fe82 	bl	8010bd0 <__mdiff>
 800decc:	4604      	mov	r4, r0
 800dece:	2800      	cmp	r0, #0
 800ded0:	f43f ae3a 	beq.w	800db48 <_strtod_l+0x420>
 800ded4:	2300      	movs	r3, #0
 800ded6:	f8d0 800c 	ldr.w	r8, [r0, #12]
 800deda:	60c3      	str	r3, [r0, #12]
 800dedc:	4629      	mov	r1, r5
 800dede:	f002 fe5b 	bl	8010b98 <__mcmp>
 800dee2:	2800      	cmp	r0, #0
 800dee4:	da4e      	bge.n	800df84 <_strtod_l+0x85c>
 800dee6:	ea58 080a 	orrs.w	r8, r8, sl
 800deea:	d174      	bne.n	800dfd6 <_strtod_l+0x8ae>
 800deec:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800def0:	2b00      	cmp	r3, #0
 800def2:	d170      	bne.n	800dfd6 <_strtod_l+0x8ae>
 800def4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800def8:	0d1b      	lsrs	r3, r3, #20
 800defa:	051b      	lsls	r3, r3, #20
 800defc:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800df00:	d969      	bls.n	800dfd6 <_strtod_l+0x8ae>
 800df02:	6963      	ldr	r3, [r4, #20]
 800df04:	b913      	cbnz	r3, 800df0c <_strtod_l+0x7e4>
 800df06:	6923      	ldr	r3, [r4, #16]
 800df08:	2b01      	cmp	r3, #1
 800df0a:	dd64      	ble.n	800dfd6 <_strtod_l+0x8ae>
 800df0c:	4621      	mov	r1, r4
 800df0e:	2201      	movs	r2, #1
 800df10:	9805      	ldr	r0, [sp, #20]
 800df12:	f002 fdd5 	bl	8010ac0 <__lshift>
 800df16:	4629      	mov	r1, r5
 800df18:	4604      	mov	r4, r0
 800df1a:	f002 fe3d 	bl	8010b98 <__mcmp>
 800df1e:	2800      	cmp	r0, #0
 800df20:	dd59      	ble.n	800dfd6 <_strtod_l+0x8ae>
 800df22:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800df26:	9a06      	ldr	r2, [sp, #24]
 800df28:	0d1b      	lsrs	r3, r3, #20
 800df2a:	051b      	lsls	r3, r3, #20
 800df2c:	2a00      	cmp	r2, #0
 800df2e:	d070      	beq.n	800e012 <_strtod_l+0x8ea>
 800df30:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800df34:	d86d      	bhi.n	800e012 <_strtod_l+0x8ea>
 800df36:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800df3a:	f67f ae99 	bls.w	800dc70 <_strtod_l+0x548>
 800df3e:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 800df70 <_strtod_l+0x848>
 800df42:	ec4b ab16 	vmov	d6, sl, fp
 800df46:	4b0e      	ldr	r3, [pc, #56]	@ (800df80 <_strtod_l+0x858>)
 800df48:	ee26 7b07 	vmul.f64	d7, d6, d7
 800df4c:	ee17 2a90 	vmov	r2, s15
 800df50:	4013      	ands	r3, r2
 800df52:	ec5b ab17 	vmov	sl, fp, d7
 800df56:	2b00      	cmp	r3, #0
 800df58:	f47f ae01 	bne.w	800db5e <_strtod_l+0x436>
 800df5c:	9a05      	ldr	r2, [sp, #20]
 800df5e:	2322      	movs	r3, #34	@ 0x22
 800df60:	6013      	str	r3, [r2, #0]
 800df62:	e5fc      	b.n	800db5e <_strtod_l+0x436>
 800df64:	f3af 8000 	nop.w
 800df68:	ffc00000 	.word	0xffc00000
 800df6c:	41dfffff 	.word	0x41dfffff
 800df70:	00000000 	.word	0x00000000
 800df74:	39500000 	.word	0x39500000
 800df78:	080126d0 	.word	0x080126d0
 800df7c:	fffffc02 	.word	0xfffffc02
 800df80:	7ff00000 	.word	0x7ff00000
 800df84:	46d9      	mov	r9, fp
 800df86:	d15d      	bne.n	800e044 <_strtod_l+0x91c>
 800df88:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800df8c:	f1b8 0f00 	cmp.w	r8, #0
 800df90:	d02a      	beq.n	800dfe8 <_strtod_l+0x8c0>
 800df92:	4aab      	ldr	r2, [pc, #684]	@ (800e240 <_strtod_l+0xb18>)
 800df94:	4293      	cmp	r3, r2
 800df96:	d12a      	bne.n	800dfee <_strtod_l+0x8c6>
 800df98:	9b06      	ldr	r3, [sp, #24]
 800df9a:	4652      	mov	r2, sl
 800df9c:	b1fb      	cbz	r3, 800dfde <_strtod_l+0x8b6>
 800df9e:	4ba9      	ldr	r3, [pc, #676]	@ (800e244 <_strtod_l+0xb1c>)
 800dfa0:	ea0b 0303 	and.w	r3, fp, r3
 800dfa4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800dfa8:	f04f 31ff 	mov.w	r1, #4294967295
 800dfac:	d81a      	bhi.n	800dfe4 <_strtod_l+0x8bc>
 800dfae:	0d1b      	lsrs	r3, r3, #20
 800dfb0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800dfb4:	fa01 f303 	lsl.w	r3, r1, r3
 800dfb8:	429a      	cmp	r2, r3
 800dfba:	d118      	bne.n	800dfee <_strtod_l+0x8c6>
 800dfbc:	4ba2      	ldr	r3, [pc, #648]	@ (800e248 <_strtod_l+0xb20>)
 800dfbe:	4599      	cmp	r9, r3
 800dfc0:	d102      	bne.n	800dfc8 <_strtod_l+0x8a0>
 800dfc2:	3201      	adds	r2, #1
 800dfc4:	f43f adc0 	beq.w	800db48 <_strtod_l+0x420>
 800dfc8:	4b9e      	ldr	r3, [pc, #632]	@ (800e244 <_strtod_l+0xb1c>)
 800dfca:	ea09 0303 	and.w	r3, r9, r3
 800dfce:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 800dfd2:	f04f 0a00 	mov.w	sl, #0
 800dfd6:	9b06      	ldr	r3, [sp, #24]
 800dfd8:	2b00      	cmp	r3, #0
 800dfda:	d1b0      	bne.n	800df3e <_strtod_l+0x816>
 800dfdc:	e5bf      	b.n	800db5e <_strtod_l+0x436>
 800dfde:	f04f 33ff 	mov.w	r3, #4294967295
 800dfe2:	e7e9      	b.n	800dfb8 <_strtod_l+0x890>
 800dfe4:	460b      	mov	r3, r1
 800dfe6:	e7e7      	b.n	800dfb8 <_strtod_l+0x890>
 800dfe8:	ea53 030a 	orrs.w	r3, r3, sl
 800dfec:	d099      	beq.n	800df22 <_strtod_l+0x7fa>
 800dfee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dff0:	b1c3      	cbz	r3, 800e024 <_strtod_l+0x8fc>
 800dff2:	ea13 0f09 	tst.w	r3, r9
 800dff6:	d0ee      	beq.n	800dfd6 <_strtod_l+0x8ae>
 800dff8:	9a06      	ldr	r2, [sp, #24]
 800dffa:	4650      	mov	r0, sl
 800dffc:	4659      	mov	r1, fp
 800dffe:	f1b8 0f00 	cmp.w	r8, #0
 800e002:	d013      	beq.n	800e02c <_strtod_l+0x904>
 800e004:	f7ff fb76 	bl	800d6f4 <sulp>
 800e008:	ee39 7b00 	vadd.f64	d7, d9, d0
 800e00c:	ec5b ab17 	vmov	sl, fp, d7
 800e010:	e7e1      	b.n	800dfd6 <_strtod_l+0x8ae>
 800e012:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800e016:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800e01a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800e01e:	f04f 3aff 	mov.w	sl, #4294967295
 800e022:	e7d8      	b.n	800dfd6 <_strtod_l+0x8ae>
 800e024:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e026:	ea13 0f0a 	tst.w	r3, sl
 800e02a:	e7e4      	b.n	800dff6 <_strtod_l+0x8ce>
 800e02c:	f7ff fb62 	bl	800d6f4 <sulp>
 800e030:	ee39 0b40 	vsub.f64	d0, d9, d0
 800e034:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800e038:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e03c:	ec5b ab10 	vmov	sl, fp, d0
 800e040:	d1c9      	bne.n	800dfd6 <_strtod_l+0x8ae>
 800e042:	e615      	b.n	800dc70 <_strtod_l+0x548>
 800e044:	4629      	mov	r1, r5
 800e046:	4620      	mov	r0, r4
 800e048:	f002 ff1e 	bl	8010e88 <__ratio>
 800e04c:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 800e050:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800e054:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e058:	d85d      	bhi.n	800e116 <_strtod_l+0x9ee>
 800e05a:	f1b8 0f00 	cmp.w	r8, #0
 800e05e:	d164      	bne.n	800e12a <_strtod_l+0xa02>
 800e060:	f1ba 0f00 	cmp.w	sl, #0
 800e064:	d14b      	bne.n	800e0fe <_strtod_l+0x9d6>
 800e066:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e06a:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800e06e:	2b00      	cmp	r3, #0
 800e070:	d160      	bne.n	800e134 <_strtod_l+0xa0c>
 800e072:	eeb4 0bc8 	vcmpe.f64	d0, d8
 800e076:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800e07a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e07e:	d401      	bmi.n	800e084 <_strtod_l+0x95c>
 800e080:	ee20 8b08 	vmul.f64	d8, d0, d8
 800e084:	eeb1 ab48 	vneg.f64	d10, d8
 800e088:	486e      	ldr	r0, [pc, #440]	@ (800e244 <_strtod_l+0xb1c>)
 800e08a:	4970      	ldr	r1, [pc, #448]	@ (800e24c <_strtod_l+0xb24>)
 800e08c:	ea09 0700 	and.w	r7, r9, r0
 800e090:	428f      	cmp	r7, r1
 800e092:	ec53 2b1a 	vmov	r2, r3, d10
 800e096:	d17d      	bne.n	800e194 <_strtod_l+0xa6c>
 800e098:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 800e09c:	ec4b ab1c 	vmov	d12, sl, fp
 800e0a0:	eeb0 0b4c 	vmov.f64	d0, d12
 800e0a4:	f002 fe28 	bl	8010cf8 <__ulp>
 800e0a8:	4866      	ldr	r0, [pc, #408]	@ (800e244 <_strtod_l+0xb1c>)
 800e0aa:	eea0 cb0a 	vfma.f64	d12, d0, d10
 800e0ae:	ee1c 3a90 	vmov	r3, s25
 800e0b2:	4a67      	ldr	r2, [pc, #412]	@ (800e250 <_strtod_l+0xb28>)
 800e0b4:	ea03 0100 	and.w	r1, r3, r0
 800e0b8:	4291      	cmp	r1, r2
 800e0ba:	ec5b ab1c 	vmov	sl, fp, d12
 800e0be:	d93c      	bls.n	800e13a <_strtod_l+0xa12>
 800e0c0:	ee19 2a90 	vmov	r2, s19
 800e0c4:	4b60      	ldr	r3, [pc, #384]	@ (800e248 <_strtod_l+0xb20>)
 800e0c6:	429a      	cmp	r2, r3
 800e0c8:	d104      	bne.n	800e0d4 <_strtod_l+0x9ac>
 800e0ca:	ee19 3a10 	vmov	r3, s18
 800e0ce:	3301      	adds	r3, #1
 800e0d0:	f43f ad3a 	beq.w	800db48 <_strtod_l+0x420>
 800e0d4:	f8df b170 	ldr.w	fp, [pc, #368]	@ 800e248 <_strtod_l+0xb20>
 800e0d8:	f04f 3aff 	mov.w	sl, #4294967295
 800e0dc:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800e0de:	9805      	ldr	r0, [sp, #20]
 800e0e0:	f002 fad6 	bl	8010690 <_Bfree>
 800e0e4:	9805      	ldr	r0, [sp, #20]
 800e0e6:	4631      	mov	r1, r6
 800e0e8:	f002 fad2 	bl	8010690 <_Bfree>
 800e0ec:	9805      	ldr	r0, [sp, #20]
 800e0ee:	4629      	mov	r1, r5
 800e0f0:	f002 face 	bl	8010690 <_Bfree>
 800e0f4:	9805      	ldr	r0, [sp, #20]
 800e0f6:	4621      	mov	r1, r4
 800e0f8:	f002 faca 	bl	8010690 <_Bfree>
 800e0fc:	e625      	b.n	800dd4a <_strtod_l+0x622>
 800e0fe:	f1ba 0f01 	cmp.w	sl, #1
 800e102:	d103      	bne.n	800e10c <_strtod_l+0x9e4>
 800e104:	f1bb 0f00 	cmp.w	fp, #0
 800e108:	f43f adb2 	beq.w	800dc70 <_strtod_l+0x548>
 800e10c:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 800e110:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800e114:	e7b8      	b.n	800e088 <_strtod_l+0x960>
 800e116:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800e11a:	ee20 8b08 	vmul.f64	d8, d0, d8
 800e11e:	f1b8 0f00 	cmp.w	r8, #0
 800e122:	d0af      	beq.n	800e084 <_strtod_l+0x95c>
 800e124:	eeb0 ab48 	vmov.f64	d10, d8
 800e128:	e7ae      	b.n	800e088 <_strtod_l+0x960>
 800e12a:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 800e12e:	eeb0 8b4a 	vmov.f64	d8, d10
 800e132:	e7a9      	b.n	800e088 <_strtod_l+0x960>
 800e134:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 800e138:	e7a6      	b.n	800e088 <_strtod_l+0x960>
 800e13a:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800e13e:	9b06      	ldr	r3, [sp, #24]
 800e140:	46d9      	mov	r9, fp
 800e142:	2b00      	cmp	r3, #0
 800e144:	d1ca      	bne.n	800e0dc <_strtod_l+0x9b4>
 800e146:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e14a:	0d1b      	lsrs	r3, r3, #20
 800e14c:	051b      	lsls	r3, r3, #20
 800e14e:	429f      	cmp	r7, r3
 800e150:	d1c4      	bne.n	800e0dc <_strtod_l+0x9b4>
 800e152:	ec51 0b18 	vmov	r0, r1, d8
 800e156:	f7f2 fb07 	bl	8000768 <__aeabi_d2lz>
 800e15a:	f7f2 fabf 	bl	80006dc <__aeabi_l2d>
 800e15e:	f3cb 0913 	ubfx	r9, fp, #0, #20
 800e162:	ec41 0b17 	vmov	d7, r0, r1
 800e166:	ea49 090a 	orr.w	r9, r9, sl
 800e16a:	ea59 0908 	orrs.w	r9, r9, r8
 800e16e:	ee38 8b47 	vsub.f64	d8, d8, d7
 800e172:	d03c      	beq.n	800e1ee <_strtod_l+0xac6>
 800e174:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 800e228 <_strtod_l+0xb00>
 800e178:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800e17c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e180:	f53f aced 	bmi.w	800db5e <_strtod_l+0x436>
 800e184:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 800e230 <_strtod_l+0xb08>
 800e188:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800e18c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e190:	dda4      	ble.n	800e0dc <_strtod_l+0x9b4>
 800e192:	e4e4      	b.n	800db5e <_strtod_l+0x436>
 800e194:	9906      	ldr	r1, [sp, #24]
 800e196:	b1e1      	cbz	r1, 800e1d2 <_strtod_l+0xaaa>
 800e198:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 800e19c:	d819      	bhi.n	800e1d2 <_strtod_l+0xaaa>
 800e19e:	eeb4 8bcb 	vcmpe.f64	d8, d11
 800e1a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e1a6:	d811      	bhi.n	800e1cc <_strtod_l+0xaa4>
 800e1a8:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 800e1ac:	ee18 3a10 	vmov	r3, s16
 800e1b0:	2b01      	cmp	r3, #1
 800e1b2:	bf38      	it	cc
 800e1b4:	2301      	movcc	r3, #1
 800e1b6:	ee08 3a10 	vmov	s16, r3
 800e1ba:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 800e1be:	f1b8 0f00 	cmp.w	r8, #0
 800e1c2:	d111      	bne.n	800e1e8 <_strtod_l+0xac0>
 800e1c4:	eeb1 7b48 	vneg.f64	d7, d8
 800e1c8:	ec53 2b17 	vmov	r2, r3, d7
 800e1cc:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 800e1d0:	1bcb      	subs	r3, r1, r7
 800e1d2:	eeb0 0b49 	vmov.f64	d0, d9
 800e1d6:	ec43 2b1a 	vmov	d10, r2, r3
 800e1da:	f002 fd8d 	bl	8010cf8 <__ulp>
 800e1de:	eeaa 9b00 	vfma.f64	d9, d10, d0
 800e1e2:	ec5b ab19 	vmov	sl, fp, d9
 800e1e6:	e7aa      	b.n	800e13e <_strtod_l+0xa16>
 800e1e8:	eeb0 7b48 	vmov.f64	d7, d8
 800e1ec:	e7ec      	b.n	800e1c8 <_strtod_l+0xaa0>
 800e1ee:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 800e238 <_strtod_l+0xb10>
 800e1f2:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800e1f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e1fa:	f57f af6f 	bpl.w	800e0dc <_strtod_l+0x9b4>
 800e1fe:	e4ae      	b.n	800db5e <_strtod_l+0x436>
 800e200:	2300      	movs	r3, #0
 800e202:	9308      	str	r3, [sp, #32]
 800e204:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e206:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e208:	6013      	str	r3, [r2, #0]
 800e20a:	f7ff bacc 	b.w	800d7a6 <_strtod_l+0x7e>
 800e20e:	2a65      	cmp	r2, #101	@ 0x65
 800e210:	f43f abbc 	beq.w	800d98c <_strtod_l+0x264>
 800e214:	2a45      	cmp	r2, #69	@ 0x45
 800e216:	f43f abb9 	beq.w	800d98c <_strtod_l+0x264>
 800e21a:	2301      	movs	r3, #1
 800e21c:	9306      	str	r3, [sp, #24]
 800e21e:	f7ff bbf0 	b.w	800da02 <_strtod_l+0x2da>
 800e222:	bf00      	nop
 800e224:	f3af 8000 	nop.w
 800e228:	94a03595 	.word	0x94a03595
 800e22c:	3fdfffff 	.word	0x3fdfffff
 800e230:	35afe535 	.word	0x35afe535
 800e234:	3fe00000 	.word	0x3fe00000
 800e238:	94a03595 	.word	0x94a03595
 800e23c:	3fcfffff 	.word	0x3fcfffff
 800e240:	000fffff 	.word	0x000fffff
 800e244:	7ff00000 	.word	0x7ff00000
 800e248:	7fefffff 	.word	0x7fefffff
 800e24c:	7fe00000 	.word	0x7fe00000
 800e250:	7c9fffff 	.word	0x7c9fffff

0800e254 <_strtod_r>:
 800e254:	4b01      	ldr	r3, [pc, #4]	@ (800e25c <_strtod_r+0x8>)
 800e256:	f7ff ba67 	b.w	800d728 <_strtod_l>
 800e25a:	bf00      	nop
 800e25c:	24000074 	.word	0x24000074

0800e260 <__cvt>:
 800e260:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e262:	ed2d 8b02 	vpush	{d8}
 800e266:	eeb0 8b40 	vmov.f64	d8, d0
 800e26a:	b085      	sub	sp, #20
 800e26c:	4617      	mov	r7, r2
 800e26e:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800e270:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e272:	ee18 2a90 	vmov	r2, s17
 800e276:	f025 0520 	bic.w	r5, r5, #32
 800e27a:	2a00      	cmp	r2, #0
 800e27c:	bfb6      	itet	lt
 800e27e:	222d      	movlt	r2, #45	@ 0x2d
 800e280:	2200      	movge	r2, #0
 800e282:	eeb1 8b40 	vneglt.f64	d8, d0
 800e286:	2d46      	cmp	r5, #70	@ 0x46
 800e288:	460c      	mov	r4, r1
 800e28a:	701a      	strb	r2, [r3, #0]
 800e28c:	d004      	beq.n	800e298 <__cvt+0x38>
 800e28e:	2d45      	cmp	r5, #69	@ 0x45
 800e290:	d100      	bne.n	800e294 <__cvt+0x34>
 800e292:	3401      	adds	r4, #1
 800e294:	2102      	movs	r1, #2
 800e296:	e000      	b.n	800e29a <__cvt+0x3a>
 800e298:	2103      	movs	r1, #3
 800e29a:	ab03      	add	r3, sp, #12
 800e29c:	9301      	str	r3, [sp, #4]
 800e29e:	ab02      	add	r3, sp, #8
 800e2a0:	9300      	str	r3, [sp, #0]
 800e2a2:	4622      	mov	r2, r4
 800e2a4:	4633      	mov	r3, r6
 800e2a6:	eeb0 0b48 	vmov.f64	d0, d8
 800e2aa:	f001 f8c5 	bl	800f438 <_dtoa_r>
 800e2ae:	2d47      	cmp	r5, #71	@ 0x47
 800e2b0:	d114      	bne.n	800e2dc <__cvt+0x7c>
 800e2b2:	07fb      	lsls	r3, r7, #31
 800e2b4:	d50a      	bpl.n	800e2cc <__cvt+0x6c>
 800e2b6:	1902      	adds	r2, r0, r4
 800e2b8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800e2bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e2c0:	bf08      	it	eq
 800e2c2:	9203      	streq	r2, [sp, #12]
 800e2c4:	2130      	movs	r1, #48	@ 0x30
 800e2c6:	9b03      	ldr	r3, [sp, #12]
 800e2c8:	4293      	cmp	r3, r2
 800e2ca:	d319      	bcc.n	800e300 <__cvt+0xa0>
 800e2cc:	9b03      	ldr	r3, [sp, #12]
 800e2ce:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e2d0:	1a1b      	subs	r3, r3, r0
 800e2d2:	6013      	str	r3, [r2, #0]
 800e2d4:	b005      	add	sp, #20
 800e2d6:	ecbd 8b02 	vpop	{d8}
 800e2da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e2dc:	2d46      	cmp	r5, #70	@ 0x46
 800e2de:	eb00 0204 	add.w	r2, r0, r4
 800e2e2:	d1e9      	bne.n	800e2b8 <__cvt+0x58>
 800e2e4:	7803      	ldrb	r3, [r0, #0]
 800e2e6:	2b30      	cmp	r3, #48	@ 0x30
 800e2e8:	d107      	bne.n	800e2fa <__cvt+0x9a>
 800e2ea:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800e2ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e2f2:	bf1c      	itt	ne
 800e2f4:	f1c4 0401 	rsbne	r4, r4, #1
 800e2f8:	6034      	strne	r4, [r6, #0]
 800e2fa:	6833      	ldr	r3, [r6, #0]
 800e2fc:	441a      	add	r2, r3
 800e2fe:	e7db      	b.n	800e2b8 <__cvt+0x58>
 800e300:	1c5c      	adds	r4, r3, #1
 800e302:	9403      	str	r4, [sp, #12]
 800e304:	7019      	strb	r1, [r3, #0]
 800e306:	e7de      	b.n	800e2c6 <__cvt+0x66>

0800e308 <__exponent>:
 800e308:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e30a:	2900      	cmp	r1, #0
 800e30c:	bfba      	itte	lt
 800e30e:	4249      	neglt	r1, r1
 800e310:	232d      	movlt	r3, #45	@ 0x2d
 800e312:	232b      	movge	r3, #43	@ 0x2b
 800e314:	2909      	cmp	r1, #9
 800e316:	7002      	strb	r2, [r0, #0]
 800e318:	7043      	strb	r3, [r0, #1]
 800e31a:	dd29      	ble.n	800e370 <__exponent+0x68>
 800e31c:	f10d 0307 	add.w	r3, sp, #7
 800e320:	461d      	mov	r5, r3
 800e322:	270a      	movs	r7, #10
 800e324:	461a      	mov	r2, r3
 800e326:	fbb1 f6f7 	udiv	r6, r1, r7
 800e32a:	fb07 1416 	mls	r4, r7, r6, r1
 800e32e:	3430      	adds	r4, #48	@ 0x30
 800e330:	f802 4c01 	strb.w	r4, [r2, #-1]
 800e334:	460c      	mov	r4, r1
 800e336:	2c63      	cmp	r4, #99	@ 0x63
 800e338:	f103 33ff 	add.w	r3, r3, #4294967295
 800e33c:	4631      	mov	r1, r6
 800e33e:	dcf1      	bgt.n	800e324 <__exponent+0x1c>
 800e340:	3130      	adds	r1, #48	@ 0x30
 800e342:	1e94      	subs	r4, r2, #2
 800e344:	f803 1c01 	strb.w	r1, [r3, #-1]
 800e348:	1c41      	adds	r1, r0, #1
 800e34a:	4623      	mov	r3, r4
 800e34c:	42ab      	cmp	r3, r5
 800e34e:	d30a      	bcc.n	800e366 <__exponent+0x5e>
 800e350:	f10d 0309 	add.w	r3, sp, #9
 800e354:	1a9b      	subs	r3, r3, r2
 800e356:	42ac      	cmp	r4, r5
 800e358:	bf88      	it	hi
 800e35a:	2300      	movhi	r3, #0
 800e35c:	3302      	adds	r3, #2
 800e35e:	4403      	add	r3, r0
 800e360:	1a18      	subs	r0, r3, r0
 800e362:	b003      	add	sp, #12
 800e364:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e366:	f813 6b01 	ldrb.w	r6, [r3], #1
 800e36a:	f801 6f01 	strb.w	r6, [r1, #1]!
 800e36e:	e7ed      	b.n	800e34c <__exponent+0x44>
 800e370:	2330      	movs	r3, #48	@ 0x30
 800e372:	3130      	adds	r1, #48	@ 0x30
 800e374:	7083      	strb	r3, [r0, #2]
 800e376:	70c1      	strb	r1, [r0, #3]
 800e378:	1d03      	adds	r3, r0, #4
 800e37a:	e7f1      	b.n	800e360 <__exponent+0x58>
 800e37c:	0000      	movs	r0, r0
	...

0800e380 <_printf_float>:
 800e380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e384:	b08d      	sub	sp, #52	@ 0x34
 800e386:	460c      	mov	r4, r1
 800e388:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800e38c:	4616      	mov	r6, r2
 800e38e:	461f      	mov	r7, r3
 800e390:	4605      	mov	r5, r0
 800e392:	f000 ff21 	bl	800f1d8 <_localeconv_r>
 800e396:	f8d0 b000 	ldr.w	fp, [r0]
 800e39a:	4658      	mov	r0, fp
 800e39c:	f7f2 f808 	bl	80003b0 <strlen>
 800e3a0:	2300      	movs	r3, #0
 800e3a2:	930a      	str	r3, [sp, #40]	@ 0x28
 800e3a4:	f8d8 3000 	ldr.w	r3, [r8]
 800e3a8:	f894 9018 	ldrb.w	r9, [r4, #24]
 800e3ac:	6822      	ldr	r2, [r4, #0]
 800e3ae:	9005      	str	r0, [sp, #20]
 800e3b0:	3307      	adds	r3, #7
 800e3b2:	f023 0307 	bic.w	r3, r3, #7
 800e3b6:	f103 0108 	add.w	r1, r3, #8
 800e3ba:	f8c8 1000 	str.w	r1, [r8]
 800e3be:	ed93 0b00 	vldr	d0, [r3]
 800e3c2:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 800e620 <_printf_float+0x2a0>
 800e3c6:	eeb0 7bc0 	vabs.f64	d7, d0
 800e3ca:	eeb4 7b46 	vcmp.f64	d7, d6
 800e3ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e3d2:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 800e3d6:	dd24      	ble.n	800e422 <_printf_float+0xa2>
 800e3d8:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800e3dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e3e0:	d502      	bpl.n	800e3e8 <_printf_float+0x68>
 800e3e2:	232d      	movs	r3, #45	@ 0x2d
 800e3e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e3e8:	498f      	ldr	r1, [pc, #572]	@ (800e628 <_printf_float+0x2a8>)
 800e3ea:	4b90      	ldr	r3, [pc, #576]	@ (800e62c <_printf_float+0x2ac>)
 800e3ec:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 800e3f0:	bf94      	ite	ls
 800e3f2:	4688      	movls	r8, r1
 800e3f4:	4698      	movhi	r8, r3
 800e3f6:	f022 0204 	bic.w	r2, r2, #4
 800e3fa:	2303      	movs	r3, #3
 800e3fc:	6123      	str	r3, [r4, #16]
 800e3fe:	6022      	str	r2, [r4, #0]
 800e400:	f04f 0a00 	mov.w	sl, #0
 800e404:	9700      	str	r7, [sp, #0]
 800e406:	4633      	mov	r3, r6
 800e408:	aa0b      	add	r2, sp, #44	@ 0x2c
 800e40a:	4621      	mov	r1, r4
 800e40c:	4628      	mov	r0, r5
 800e40e:	f000 f9d1 	bl	800e7b4 <_printf_common>
 800e412:	3001      	adds	r0, #1
 800e414:	f040 8089 	bne.w	800e52a <_printf_float+0x1aa>
 800e418:	f04f 30ff 	mov.w	r0, #4294967295
 800e41c:	b00d      	add	sp, #52	@ 0x34
 800e41e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e422:	eeb4 0b40 	vcmp.f64	d0, d0
 800e426:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e42a:	d709      	bvc.n	800e440 <_printf_float+0xc0>
 800e42c:	ee10 3a90 	vmov	r3, s1
 800e430:	2b00      	cmp	r3, #0
 800e432:	bfbc      	itt	lt
 800e434:	232d      	movlt	r3, #45	@ 0x2d
 800e436:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800e43a:	497d      	ldr	r1, [pc, #500]	@ (800e630 <_printf_float+0x2b0>)
 800e43c:	4b7d      	ldr	r3, [pc, #500]	@ (800e634 <_printf_float+0x2b4>)
 800e43e:	e7d5      	b.n	800e3ec <_printf_float+0x6c>
 800e440:	6863      	ldr	r3, [r4, #4]
 800e442:	1c59      	adds	r1, r3, #1
 800e444:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 800e448:	d139      	bne.n	800e4be <_printf_float+0x13e>
 800e44a:	2306      	movs	r3, #6
 800e44c:	6063      	str	r3, [r4, #4]
 800e44e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800e452:	2300      	movs	r3, #0
 800e454:	6022      	str	r2, [r4, #0]
 800e456:	9303      	str	r3, [sp, #12]
 800e458:	ab0a      	add	r3, sp, #40	@ 0x28
 800e45a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800e45e:	ab09      	add	r3, sp, #36	@ 0x24
 800e460:	9300      	str	r3, [sp, #0]
 800e462:	6861      	ldr	r1, [r4, #4]
 800e464:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800e468:	4628      	mov	r0, r5
 800e46a:	f7ff fef9 	bl	800e260 <__cvt>
 800e46e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800e472:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e474:	4680      	mov	r8, r0
 800e476:	d129      	bne.n	800e4cc <_printf_float+0x14c>
 800e478:	1cc8      	adds	r0, r1, #3
 800e47a:	db02      	blt.n	800e482 <_printf_float+0x102>
 800e47c:	6863      	ldr	r3, [r4, #4]
 800e47e:	4299      	cmp	r1, r3
 800e480:	dd41      	ble.n	800e506 <_printf_float+0x186>
 800e482:	f1a9 0902 	sub.w	r9, r9, #2
 800e486:	fa5f f989 	uxtb.w	r9, r9
 800e48a:	3901      	subs	r1, #1
 800e48c:	464a      	mov	r2, r9
 800e48e:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800e492:	9109      	str	r1, [sp, #36]	@ 0x24
 800e494:	f7ff ff38 	bl	800e308 <__exponent>
 800e498:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e49a:	1813      	adds	r3, r2, r0
 800e49c:	2a01      	cmp	r2, #1
 800e49e:	4682      	mov	sl, r0
 800e4a0:	6123      	str	r3, [r4, #16]
 800e4a2:	dc02      	bgt.n	800e4aa <_printf_float+0x12a>
 800e4a4:	6822      	ldr	r2, [r4, #0]
 800e4a6:	07d2      	lsls	r2, r2, #31
 800e4a8:	d501      	bpl.n	800e4ae <_printf_float+0x12e>
 800e4aa:	3301      	adds	r3, #1
 800e4ac:	6123      	str	r3, [r4, #16]
 800e4ae:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800e4b2:	2b00      	cmp	r3, #0
 800e4b4:	d0a6      	beq.n	800e404 <_printf_float+0x84>
 800e4b6:	232d      	movs	r3, #45	@ 0x2d
 800e4b8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e4bc:	e7a2      	b.n	800e404 <_printf_float+0x84>
 800e4be:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800e4c2:	d1c4      	bne.n	800e44e <_printf_float+0xce>
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	d1c2      	bne.n	800e44e <_printf_float+0xce>
 800e4c8:	2301      	movs	r3, #1
 800e4ca:	e7bf      	b.n	800e44c <_printf_float+0xcc>
 800e4cc:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800e4d0:	d9db      	bls.n	800e48a <_printf_float+0x10a>
 800e4d2:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800e4d6:	d118      	bne.n	800e50a <_printf_float+0x18a>
 800e4d8:	2900      	cmp	r1, #0
 800e4da:	6863      	ldr	r3, [r4, #4]
 800e4dc:	dd0b      	ble.n	800e4f6 <_printf_float+0x176>
 800e4de:	6121      	str	r1, [r4, #16]
 800e4e0:	b913      	cbnz	r3, 800e4e8 <_printf_float+0x168>
 800e4e2:	6822      	ldr	r2, [r4, #0]
 800e4e4:	07d0      	lsls	r0, r2, #31
 800e4e6:	d502      	bpl.n	800e4ee <_printf_float+0x16e>
 800e4e8:	3301      	adds	r3, #1
 800e4ea:	440b      	add	r3, r1
 800e4ec:	6123      	str	r3, [r4, #16]
 800e4ee:	65a1      	str	r1, [r4, #88]	@ 0x58
 800e4f0:	f04f 0a00 	mov.w	sl, #0
 800e4f4:	e7db      	b.n	800e4ae <_printf_float+0x12e>
 800e4f6:	b913      	cbnz	r3, 800e4fe <_printf_float+0x17e>
 800e4f8:	6822      	ldr	r2, [r4, #0]
 800e4fa:	07d2      	lsls	r2, r2, #31
 800e4fc:	d501      	bpl.n	800e502 <_printf_float+0x182>
 800e4fe:	3302      	adds	r3, #2
 800e500:	e7f4      	b.n	800e4ec <_printf_float+0x16c>
 800e502:	2301      	movs	r3, #1
 800e504:	e7f2      	b.n	800e4ec <_printf_float+0x16c>
 800e506:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800e50a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e50c:	4299      	cmp	r1, r3
 800e50e:	db05      	blt.n	800e51c <_printf_float+0x19c>
 800e510:	6823      	ldr	r3, [r4, #0]
 800e512:	6121      	str	r1, [r4, #16]
 800e514:	07d8      	lsls	r0, r3, #31
 800e516:	d5ea      	bpl.n	800e4ee <_printf_float+0x16e>
 800e518:	1c4b      	adds	r3, r1, #1
 800e51a:	e7e7      	b.n	800e4ec <_printf_float+0x16c>
 800e51c:	2900      	cmp	r1, #0
 800e51e:	bfd4      	ite	le
 800e520:	f1c1 0202 	rsble	r2, r1, #2
 800e524:	2201      	movgt	r2, #1
 800e526:	4413      	add	r3, r2
 800e528:	e7e0      	b.n	800e4ec <_printf_float+0x16c>
 800e52a:	6823      	ldr	r3, [r4, #0]
 800e52c:	055a      	lsls	r2, r3, #21
 800e52e:	d407      	bmi.n	800e540 <_printf_float+0x1c0>
 800e530:	6923      	ldr	r3, [r4, #16]
 800e532:	4642      	mov	r2, r8
 800e534:	4631      	mov	r1, r6
 800e536:	4628      	mov	r0, r5
 800e538:	47b8      	blx	r7
 800e53a:	3001      	adds	r0, #1
 800e53c:	d12a      	bne.n	800e594 <_printf_float+0x214>
 800e53e:	e76b      	b.n	800e418 <_printf_float+0x98>
 800e540:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800e544:	f240 80e0 	bls.w	800e708 <_printf_float+0x388>
 800e548:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800e54c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e550:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e554:	d133      	bne.n	800e5be <_printf_float+0x23e>
 800e556:	4a38      	ldr	r2, [pc, #224]	@ (800e638 <_printf_float+0x2b8>)
 800e558:	2301      	movs	r3, #1
 800e55a:	4631      	mov	r1, r6
 800e55c:	4628      	mov	r0, r5
 800e55e:	47b8      	blx	r7
 800e560:	3001      	adds	r0, #1
 800e562:	f43f af59 	beq.w	800e418 <_printf_float+0x98>
 800e566:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800e56a:	4543      	cmp	r3, r8
 800e56c:	db02      	blt.n	800e574 <_printf_float+0x1f4>
 800e56e:	6823      	ldr	r3, [r4, #0]
 800e570:	07d8      	lsls	r0, r3, #31
 800e572:	d50f      	bpl.n	800e594 <_printf_float+0x214>
 800e574:	9b05      	ldr	r3, [sp, #20]
 800e576:	465a      	mov	r2, fp
 800e578:	4631      	mov	r1, r6
 800e57a:	4628      	mov	r0, r5
 800e57c:	47b8      	blx	r7
 800e57e:	3001      	adds	r0, #1
 800e580:	f43f af4a 	beq.w	800e418 <_printf_float+0x98>
 800e584:	f04f 0900 	mov.w	r9, #0
 800e588:	f108 38ff 	add.w	r8, r8, #4294967295
 800e58c:	f104 0a1a 	add.w	sl, r4, #26
 800e590:	45c8      	cmp	r8, r9
 800e592:	dc09      	bgt.n	800e5a8 <_printf_float+0x228>
 800e594:	6823      	ldr	r3, [r4, #0]
 800e596:	079b      	lsls	r3, r3, #30
 800e598:	f100 8107 	bmi.w	800e7aa <_printf_float+0x42a>
 800e59c:	68e0      	ldr	r0, [r4, #12]
 800e59e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e5a0:	4298      	cmp	r0, r3
 800e5a2:	bfb8      	it	lt
 800e5a4:	4618      	movlt	r0, r3
 800e5a6:	e739      	b.n	800e41c <_printf_float+0x9c>
 800e5a8:	2301      	movs	r3, #1
 800e5aa:	4652      	mov	r2, sl
 800e5ac:	4631      	mov	r1, r6
 800e5ae:	4628      	mov	r0, r5
 800e5b0:	47b8      	blx	r7
 800e5b2:	3001      	adds	r0, #1
 800e5b4:	f43f af30 	beq.w	800e418 <_printf_float+0x98>
 800e5b8:	f109 0901 	add.w	r9, r9, #1
 800e5bc:	e7e8      	b.n	800e590 <_printf_float+0x210>
 800e5be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	dc3b      	bgt.n	800e63c <_printf_float+0x2bc>
 800e5c4:	4a1c      	ldr	r2, [pc, #112]	@ (800e638 <_printf_float+0x2b8>)
 800e5c6:	2301      	movs	r3, #1
 800e5c8:	4631      	mov	r1, r6
 800e5ca:	4628      	mov	r0, r5
 800e5cc:	47b8      	blx	r7
 800e5ce:	3001      	adds	r0, #1
 800e5d0:	f43f af22 	beq.w	800e418 <_printf_float+0x98>
 800e5d4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800e5d8:	ea59 0303 	orrs.w	r3, r9, r3
 800e5dc:	d102      	bne.n	800e5e4 <_printf_float+0x264>
 800e5de:	6823      	ldr	r3, [r4, #0]
 800e5e0:	07d9      	lsls	r1, r3, #31
 800e5e2:	d5d7      	bpl.n	800e594 <_printf_float+0x214>
 800e5e4:	9b05      	ldr	r3, [sp, #20]
 800e5e6:	465a      	mov	r2, fp
 800e5e8:	4631      	mov	r1, r6
 800e5ea:	4628      	mov	r0, r5
 800e5ec:	47b8      	blx	r7
 800e5ee:	3001      	adds	r0, #1
 800e5f0:	f43f af12 	beq.w	800e418 <_printf_float+0x98>
 800e5f4:	f04f 0a00 	mov.w	sl, #0
 800e5f8:	f104 0b1a 	add.w	fp, r4, #26
 800e5fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e5fe:	425b      	negs	r3, r3
 800e600:	4553      	cmp	r3, sl
 800e602:	dc01      	bgt.n	800e608 <_printf_float+0x288>
 800e604:	464b      	mov	r3, r9
 800e606:	e794      	b.n	800e532 <_printf_float+0x1b2>
 800e608:	2301      	movs	r3, #1
 800e60a:	465a      	mov	r2, fp
 800e60c:	4631      	mov	r1, r6
 800e60e:	4628      	mov	r0, r5
 800e610:	47b8      	blx	r7
 800e612:	3001      	adds	r0, #1
 800e614:	f43f af00 	beq.w	800e418 <_printf_float+0x98>
 800e618:	f10a 0a01 	add.w	sl, sl, #1
 800e61c:	e7ee      	b.n	800e5fc <_printf_float+0x27c>
 800e61e:	bf00      	nop
 800e620:	ffffffff 	.word	0xffffffff
 800e624:	7fefffff 	.word	0x7fefffff
 800e628:	080126f8 	.word	0x080126f8
 800e62c:	080126fc 	.word	0x080126fc
 800e630:	08012700 	.word	0x08012700
 800e634:	08012704 	.word	0x08012704
 800e638:	08012aa8 	.word	0x08012aa8
 800e63c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e63e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800e642:	4553      	cmp	r3, sl
 800e644:	bfa8      	it	ge
 800e646:	4653      	movge	r3, sl
 800e648:	2b00      	cmp	r3, #0
 800e64a:	4699      	mov	r9, r3
 800e64c:	dc37      	bgt.n	800e6be <_printf_float+0x33e>
 800e64e:	2300      	movs	r3, #0
 800e650:	9307      	str	r3, [sp, #28]
 800e652:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e656:	f104 021a 	add.w	r2, r4, #26
 800e65a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e65c:	9907      	ldr	r1, [sp, #28]
 800e65e:	9306      	str	r3, [sp, #24]
 800e660:	eba3 0309 	sub.w	r3, r3, r9
 800e664:	428b      	cmp	r3, r1
 800e666:	dc31      	bgt.n	800e6cc <_printf_float+0x34c>
 800e668:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e66a:	459a      	cmp	sl, r3
 800e66c:	dc3b      	bgt.n	800e6e6 <_printf_float+0x366>
 800e66e:	6823      	ldr	r3, [r4, #0]
 800e670:	07da      	lsls	r2, r3, #31
 800e672:	d438      	bmi.n	800e6e6 <_printf_float+0x366>
 800e674:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e676:	ebaa 0903 	sub.w	r9, sl, r3
 800e67a:	9b06      	ldr	r3, [sp, #24]
 800e67c:	ebaa 0303 	sub.w	r3, sl, r3
 800e680:	4599      	cmp	r9, r3
 800e682:	bfa8      	it	ge
 800e684:	4699      	movge	r9, r3
 800e686:	f1b9 0f00 	cmp.w	r9, #0
 800e68a:	dc34      	bgt.n	800e6f6 <_printf_float+0x376>
 800e68c:	f04f 0800 	mov.w	r8, #0
 800e690:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e694:	f104 0b1a 	add.w	fp, r4, #26
 800e698:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e69a:	ebaa 0303 	sub.w	r3, sl, r3
 800e69e:	eba3 0309 	sub.w	r3, r3, r9
 800e6a2:	4543      	cmp	r3, r8
 800e6a4:	f77f af76 	ble.w	800e594 <_printf_float+0x214>
 800e6a8:	2301      	movs	r3, #1
 800e6aa:	465a      	mov	r2, fp
 800e6ac:	4631      	mov	r1, r6
 800e6ae:	4628      	mov	r0, r5
 800e6b0:	47b8      	blx	r7
 800e6b2:	3001      	adds	r0, #1
 800e6b4:	f43f aeb0 	beq.w	800e418 <_printf_float+0x98>
 800e6b8:	f108 0801 	add.w	r8, r8, #1
 800e6bc:	e7ec      	b.n	800e698 <_printf_float+0x318>
 800e6be:	4642      	mov	r2, r8
 800e6c0:	4631      	mov	r1, r6
 800e6c2:	4628      	mov	r0, r5
 800e6c4:	47b8      	blx	r7
 800e6c6:	3001      	adds	r0, #1
 800e6c8:	d1c1      	bne.n	800e64e <_printf_float+0x2ce>
 800e6ca:	e6a5      	b.n	800e418 <_printf_float+0x98>
 800e6cc:	2301      	movs	r3, #1
 800e6ce:	4631      	mov	r1, r6
 800e6d0:	4628      	mov	r0, r5
 800e6d2:	9206      	str	r2, [sp, #24]
 800e6d4:	47b8      	blx	r7
 800e6d6:	3001      	adds	r0, #1
 800e6d8:	f43f ae9e 	beq.w	800e418 <_printf_float+0x98>
 800e6dc:	9b07      	ldr	r3, [sp, #28]
 800e6de:	9a06      	ldr	r2, [sp, #24]
 800e6e0:	3301      	adds	r3, #1
 800e6e2:	9307      	str	r3, [sp, #28]
 800e6e4:	e7b9      	b.n	800e65a <_printf_float+0x2da>
 800e6e6:	9b05      	ldr	r3, [sp, #20]
 800e6e8:	465a      	mov	r2, fp
 800e6ea:	4631      	mov	r1, r6
 800e6ec:	4628      	mov	r0, r5
 800e6ee:	47b8      	blx	r7
 800e6f0:	3001      	adds	r0, #1
 800e6f2:	d1bf      	bne.n	800e674 <_printf_float+0x2f4>
 800e6f4:	e690      	b.n	800e418 <_printf_float+0x98>
 800e6f6:	9a06      	ldr	r2, [sp, #24]
 800e6f8:	464b      	mov	r3, r9
 800e6fa:	4442      	add	r2, r8
 800e6fc:	4631      	mov	r1, r6
 800e6fe:	4628      	mov	r0, r5
 800e700:	47b8      	blx	r7
 800e702:	3001      	adds	r0, #1
 800e704:	d1c2      	bne.n	800e68c <_printf_float+0x30c>
 800e706:	e687      	b.n	800e418 <_printf_float+0x98>
 800e708:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800e70c:	f1b9 0f01 	cmp.w	r9, #1
 800e710:	dc01      	bgt.n	800e716 <_printf_float+0x396>
 800e712:	07db      	lsls	r3, r3, #31
 800e714:	d536      	bpl.n	800e784 <_printf_float+0x404>
 800e716:	2301      	movs	r3, #1
 800e718:	4642      	mov	r2, r8
 800e71a:	4631      	mov	r1, r6
 800e71c:	4628      	mov	r0, r5
 800e71e:	47b8      	blx	r7
 800e720:	3001      	adds	r0, #1
 800e722:	f43f ae79 	beq.w	800e418 <_printf_float+0x98>
 800e726:	9b05      	ldr	r3, [sp, #20]
 800e728:	465a      	mov	r2, fp
 800e72a:	4631      	mov	r1, r6
 800e72c:	4628      	mov	r0, r5
 800e72e:	47b8      	blx	r7
 800e730:	3001      	adds	r0, #1
 800e732:	f43f ae71 	beq.w	800e418 <_printf_float+0x98>
 800e736:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800e73a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e73e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e742:	f109 39ff 	add.w	r9, r9, #4294967295
 800e746:	d018      	beq.n	800e77a <_printf_float+0x3fa>
 800e748:	464b      	mov	r3, r9
 800e74a:	f108 0201 	add.w	r2, r8, #1
 800e74e:	4631      	mov	r1, r6
 800e750:	4628      	mov	r0, r5
 800e752:	47b8      	blx	r7
 800e754:	3001      	adds	r0, #1
 800e756:	d10c      	bne.n	800e772 <_printf_float+0x3f2>
 800e758:	e65e      	b.n	800e418 <_printf_float+0x98>
 800e75a:	2301      	movs	r3, #1
 800e75c:	465a      	mov	r2, fp
 800e75e:	4631      	mov	r1, r6
 800e760:	4628      	mov	r0, r5
 800e762:	47b8      	blx	r7
 800e764:	3001      	adds	r0, #1
 800e766:	f43f ae57 	beq.w	800e418 <_printf_float+0x98>
 800e76a:	f108 0801 	add.w	r8, r8, #1
 800e76e:	45c8      	cmp	r8, r9
 800e770:	dbf3      	blt.n	800e75a <_printf_float+0x3da>
 800e772:	4653      	mov	r3, sl
 800e774:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800e778:	e6dc      	b.n	800e534 <_printf_float+0x1b4>
 800e77a:	f04f 0800 	mov.w	r8, #0
 800e77e:	f104 0b1a 	add.w	fp, r4, #26
 800e782:	e7f4      	b.n	800e76e <_printf_float+0x3ee>
 800e784:	2301      	movs	r3, #1
 800e786:	4642      	mov	r2, r8
 800e788:	e7e1      	b.n	800e74e <_printf_float+0x3ce>
 800e78a:	2301      	movs	r3, #1
 800e78c:	464a      	mov	r2, r9
 800e78e:	4631      	mov	r1, r6
 800e790:	4628      	mov	r0, r5
 800e792:	47b8      	blx	r7
 800e794:	3001      	adds	r0, #1
 800e796:	f43f ae3f 	beq.w	800e418 <_printf_float+0x98>
 800e79a:	f108 0801 	add.w	r8, r8, #1
 800e79e:	68e3      	ldr	r3, [r4, #12]
 800e7a0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e7a2:	1a5b      	subs	r3, r3, r1
 800e7a4:	4543      	cmp	r3, r8
 800e7a6:	dcf0      	bgt.n	800e78a <_printf_float+0x40a>
 800e7a8:	e6f8      	b.n	800e59c <_printf_float+0x21c>
 800e7aa:	f04f 0800 	mov.w	r8, #0
 800e7ae:	f104 0919 	add.w	r9, r4, #25
 800e7b2:	e7f4      	b.n	800e79e <_printf_float+0x41e>

0800e7b4 <_printf_common>:
 800e7b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e7b8:	4616      	mov	r6, r2
 800e7ba:	4698      	mov	r8, r3
 800e7bc:	688a      	ldr	r2, [r1, #8]
 800e7be:	690b      	ldr	r3, [r1, #16]
 800e7c0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e7c4:	4293      	cmp	r3, r2
 800e7c6:	bfb8      	it	lt
 800e7c8:	4613      	movlt	r3, r2
 800e7ca:	6033      	str	r3, [r6, #0]
 800e7cc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800e7d0:	4607      	mov	r7, r0
 800e7d2:	460c      	mov	r4, r1
 800e7d4:	b10a      	cbz	r2, 800e7da <_printf_common+0x26>
 800e7d6:	3301      	adds	r3, #1
 800e7d8:	6033      	str	r3, [r6, #0]
 800e7da:	6823      	ldr	r3, [r4, #0]
 800e7dc:	0699      	lsls	r1, r3, #26
 800e7de:	bf42      	ittt	mi
 800e7e0:	6833      	ldrmi	r3, [r6, #0]
 800e7e2:	3302      	addmi	r3, #2
 800e7e4:	6033      	strmi	r3, [r6, #0]
 800e7e6:	6825      	ldr	r5, [r4, #0]
 800e7e8:	f015 0506 	ands.w	r5, r5, #6
 800e7ec:	d106      	bne.n	800e7fc <_printf_common+0x48>
 800e7ee:	f104 0a19 	add.w	sl, r4, #25
 800e7f2:	68e3      	ldr	r3, [r4, #12]
 800e7f4:	6832      	ldr	r2, [r6, #0]
 800e7f6:	1a9b      	subs	r3, r3, r2
 800e7f8:	42ab      	cmp	r3, r5
 800e7fa:	dc26      	bgt.n	800e84a <_printf_common+0x96>
 800e7fc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800e800:	6822      	ldr	r2, [r4, #0]
 800e802:	3b00      	subs	r3, #0
 800e804:	bf18      	it	ne
 800e806:	2301      	movne	r3, #1
 800e808:	0692      	lsls	r2, r2, #26
 800e80a:	d42b      	bmi.n	800e864 <_printf_common+0xb0>
 800e80c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800e810:	4641      	mov	r1, r8
 800e812:	4638      	mov	r0, r7
 800e814:	47c8      	blx	r9
 800e816:	3001      	adds	r0, #1
 800e818:	d01e      	beq.n	800e858 <_printf_common+0xa4>
 800e81a:	6823      	ldr	r3, [r4, #0]
 800e81c:	6922      	ldr	r2, [r4, #16]
 800e81e:	f003 0306 	and.w	r3, r3, #6
 800e822:	2b04      	cmp	r3, #4
 800e824:	bf02      	ittt	eq
 800e826:	68e5      	ldreq	r5, [r4, #12]
 800e828:	6833      	ldreq	r3, [r6, #0]
 800e82a:	1aed      	subeq	r5, r5, r3
 800e82c:	68a3      	ldr	r3, [r4, #8]
 800e82e:	bf0c      	ite	eq
 800e830:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e834:	2500      	movne	r5, #0
 800e836:	4293      	cmp	r3, r2
 800e838:	bfc4      	itt	gt
 800e83a:	1a9b      	subgt	r3, r3, r2
 800e83c:	18ed      	addgt	r5, r5, r3
 800e83e:	2600      	movs	r6, #0
 800e840:	341a      	adds	r4, #26
 800e842:	42b5      	cmp	r5, r6
 800e844:	d11a      	bne.n	800e87c <_printf_common+0xc8>
 800e846:	2000      	movs	r0, #0
 800e848:	e008      	b.n	800e85c <_printf_common+0xa8>
 800e84a:	2301      	movs	r3, #1
 800e84c:	4652      	mov	r2, sl
 800e84e:	4641      	mov	r1, r8
 800e850:	4638      	mov	r0, r7
 800e852:	47c8      	blx	r9
 800e854:	3001      	adds	r0, #1
 800e856:	d103      	bne.n	800e860 <_printf_common+0xac>
 800e858:	f04f 30ff 	mov.w	r0, #4294967295
 800e85c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e860:	3501      	adds	r5, #1
 800e862:	e7c6      	b.n	800e7f2 <_printf_common+0x3e>
 800e864:	18e1      	adds	r1, r4, r3
 800e866:	1c5a      	adds	r2, r3, #1
 800e868:	2030      	movs	r0, #48	@ 0x30
 800e86a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800e86e:	4422      	add	r2, r4
 800e870:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800e874:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800e878:	3302      	adds	r3, #2
 800e87a:	e7c7      	b.n	800e80c <_printf_common+0x58>
 800e87c:	2301      	movs	r3, #1
 800e87e:	4622      	mov	r2, r4
 800e880:	4641      	mov	r1, r8
 800e882:	4638      	mov	r0, r7
 800e884:	47c8      	blx	r9
 800e886:	3001      	adds	r0, #1
 800e888:	d0e6      	beq.n	800e858 <_printf_common+0xa4>
 800e88a:	3601      	adds	r6, #1
 800e88c:	e7d9      	b.n	800e842 <_printf_common+0x8e>
	...

0800e890 <_printf_i>:
 800e890:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e894:	7e0f      	ldrb	r7, [r1, #24]
 800e896:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e898:	2f78      	cmp	r7, #120	@ 0x78
 800e89a:	4691      	mov	r9, r2
 800e89c:	4680      	mov	r8, r0
 800e89e:	460c      	mov	r4, r1
 800e8a0:	469a      	mov	sl, r3
 800e8a2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800e8a6:	d807      	bhi.n	800e8b8 <_printf_i+0x28>
 800e8a8:	2f62      	cmp	r7, #98	@ 0x62
 800e8aa:	d80a      	bhi.n	800e8c2 <_printf_i+0x32>
 800e8ac:	2f00      	cmp	r7, #0
 800e8ae:	f000 80d2 	beq.w	800ea56 <_printf_i+0x1c6>
 800e8b2:	2f58      	cmp	r7, #88	@ 0x58
 800e8b4:	f000 80b9 	beq.w	800ea2a <_printf_i+0x19a>
 800e8b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e8bc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800e8c0:	e03a      	b.n	800e938 <_printf_i+0xa8>
 800e8c2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800e8c6:	2b15      	cmp	r3, #21
 800e8c8:	d8f6      	bhi.n	800e8b8 <_printf_i+0x28>
 800e8ca:	a101      	add	r1, pc, #4	@ (adr r1, 800e8d0 <_printf_i+0x40>)
 800e8cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e8d0:	0800e929 	.word	0x0800e929
 800e8d4:	0800e93d 	.word	0x0800e93d
 800e8d8:	0800e8b9 	.word	0x0800e8b9
 800e8dc:	0800e8b9 	.word	0x0800e8b9
 800e8e0:	0800e8b9 	.word	0x0800e8b9
 800e8e4:	0800e8b9 	.word	0x0800e8b9
 800e8e8:	0800e93d 	.word	0x0800e93d
 800e8ec:	0800e8b9 	.word	0x0800e8b9
 800e8f0:	0800e8b9 	.word	0x0800e8b9
 800e8f4:	0800e8b9 	.word	0x0800e8b9
 800e8f8:	0800e8b9 	.word	0x0800e8b9
 800e8fc:	0800ea3d 	.word	0x0800ea3d
 800e900:	0800e967 	.word	0x0800e967
 800e904:	0800e9f7 	.word	0x0800e9f7
 800e908:	0800e8b9 	.word	0x0800e8b9
 800e90c:	0800e8b9 	.word	0x0800e8b9
 800e910:	0800ea5f 	.word	0x0800ea5f
 800e914:	0800e8b9 	.word	0x0800e8b9
 800e918:	0800e967 	.word	0x0800e967
 800e91c:	0800e8b9 	.word	0x0800e8b9
 800e920:	0800e8b9 	.word	0x0800e8b9
 800e924:	0800e9ff 	.word	0x0800e9ff
 800e928:	6833      	ldr	r3, [r6, #0]
 800e92a:	1d1a      	adds	r2, r3, #4
 800e92c:	681b      	ldr	r3, [r3, #0]
 800e92e:	6032      	str	r2, [r6, #0]
 800e930:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e934:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e938:	2301      	movs	r3, #1
 800e93a:	e09d      	b.n	800ea78 <_printf_i+0x1e8>
 800e93c:	6833      	ldr	r3, [r6, #0]
 800e93e:	6820      	ldr	r0, [r4, #0]
 800e940:	1d19      	adds	r1, r3, #4
 800e942:	6031      	str	r1, [r6, #0]
 800e944:	0606      	lsls	r6, r0, #24
 800e946:	d501      	bpl.n	800e94c <_printf_i+0xbc>
 800e948:	681d      	ldr	r5, [r3, #0]
 800e94a:	e003      	b.n	800e954 <_printf_i+0xc4>
 800e94c:	0645      	lsls	r5, r0, #25
 800e94e:	d5fb      	bpl.n	800e948 <_printf_i+0xb8>
 800e950:	f9b3 5000 	ldrsh.w	r5, [r3]
 800e954:	2d00      	cmp	r5, #0
 800e956:	da03      	bge.n	800e960 <_printf_i+0xd0>
 800e958:	232d      	movs	r3, #45	@ 0x2d
 800e95a:	426d      	negs	r5, r5
 800e95c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e960:	4859      	ldr	r0, [pc, #356]	@ (800eac8 <_printf_i+0x238>)
 800e962:	230a      	movs	r3, #10
 800e964:	e011      	b.n	800e98a <_printf_i+0xfa>
 800e966:	6821      	ldr	r1, [r4, #0]
 800e968:	6833      	ldr	r3, [r6, #0]
 800e96a:	0608      	lsls	r0, r1, #24
 800e96c:	f853 5b04 	ldr.w	r5, [r3], #4
 800e970:	d402      	bmi.n	800e978 <_printf_i+0xe8>
 800e972:	0649      	lsls	r1, r1, #25
 800e974:	bf48      	it	mi
 800e976:	b2ad      	uxthmi	r5, r5
 800e978:	2f6f      	cmp	r7, #111	@ 0x6f
 800e97a:	4853      	ldr	r0, [pc, #332]	@ (800eac8 <_printf_i+0x238>)
 800e97c:	6033      	str	r3, [r6, #0]
 800e97e:	bf14      	ite	ne
 800e980:	230a      	movne	r3, #10
 800e982:	2308      	moveq	r3, #8
 800e984:	2100      	movs	r1, #0
 800e986:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800e98a:	6866      	ldr	r6, [r4, #4]
 800e98c:	60a6      	str	r6, [r4, #8]
 800e98e:	2e00      	cmp	r6, #0
 800e990:	bfa2      	ittt	ge
 800e992:	6821      	ldrge	r1, [r4, #0]
 800e994:	f021 0104 	bicge.w	r1, r1, #4
 800e998:	6021      	strge	r1, [r4, #0]
 800e99a:	b90d      	cbnz	r5, 800e9a0 <_printf_i+0x110>
 800e99c:	2e00      	cmp	r6, #0
 800e99e:	d04b      	beq.n	800ea38 <_printf_i+0x1a8>
 800e9a0:	4616      	mov	r6, r2
 800e9a2:	fbb5 f1f3 	udiv	r1, r5, r3
 800e9a6:	fb03 5711 	mls	r7, r3, r1, r5
 800e9aa:	5dc7      	ldrb	r7, [r0, r7]
 800e9ac:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e9b0:	462f      	mov	r7, r5
 800e9b2:	42bb      	cmp	r3, r7
 800e9b4:	460d      	mov	r5, r1
 800e9b6:	d9f4      	bls.n	800e9a2 <_printf_i+0x112>
 800e9b8:	2b08      	cmp	r3, #8
 800e9ba:	d10b      	bne.n	800e9d4 <_printf_i+0x144>
 800e9bc:	6823      	ldr	r3, [r4, #0]
 800e9be:	07df      	lsls	r7, r3, #31
 800e9c0:	d508      	bpl.n	800e9d4 <_printf_i+0x144>
 800e9c2:	6923      	ldr	r3, [r4, #16]
 800e9c4:	6861      	ldr	r1, [r4, #4]
 800e9c6:	4299      	cmp	r1, r3
 800e9c8:	bfde      	ittt	le
 800e9ca:	2330      	movle	r3, #48	@ 0x30
 800e9cc:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e9d0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e9d4:	1b92      	subs	r2, r2, r6
 800e9d6:	6122      	str	r2, [r4, #16]
 800e9d8:	f8cd a000 	str.w	sl, [sp]
 800e9dc:	464b      	mov	r3, r9
 800e9de:	aa03      	add	r2, sp, #12
 800e9e0:	4621      	mov	r1, r4
 800e9e2:	4640      	mov	r0, r8
 800e9e4:	f7ff fee6 	bl	800e7b4 <_printf_common>
 800e9e8:	3001      	adds	r0, #1
 800e9ea:	d14a      	bne.n	800ea82 <_printf_i+0x1f2>
 800e9ec:	f04f 30ff 	mov.w	r0, #4294967295
 800e9f0:	b004      	add	sp, #16
 800e9f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e9f6:	6823      	ldr	r3, [r4, #0]
 800e9f8:	f043 0320 	orr.w	r3, r3, #32
 800e9fc:	6023      	str	r3, [r4, #0]
 800e9fe:	4833      	ldr	r0, [pc, #204]	@ (800eacc <_printf_i+0x23c>)
 800ea00:	2778      	movs	r7, #120	@ 0x78
 800ea02:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ea06:	6823      	ldr	r3, [r4, #0]
 800ea08:	6831      	ldr	r1, [r6, #0]
 800ea0a:	061f      	lsls	r7, r3, #24
 800ea0c:	f851 5b04 	ldr.w	r5, [r1], #4
 800ea10:	d402      	bmi.n	800ea18 <_printf_i+0x188>
 800ea12:	065f      	lsls	r7, r3, #25
 800ea14:	bf48      	it	mi
 800ea16:	b2ad      	uxthmi	r5, r5
 800ea18:	6031      	str	r1, [r6, #0]
 800ea1a:	07d9      	lsls	r1, r3, #31
 800ea1c:	bf44      	itt	mi
 800ea1e:	f043 0320 	orrmi.w	r3, r3, #32
 800ea22:	6023      	strmi	r3, [r4, #0]
 800ea24:	b11d      	cbz	r5, 800ea2e <_printf_i+0x19e>
 800ea26:	2310      	movs	r3, #16
 800ea28:	e7ac      	b.n	800e984 <_printf_i+0xf4>
 800ea2a:	4827      	ldr	r0, [pc, #156]	@ (800eac8 <_printf_i+0x238>)
 800ea2c:	e7e9      	b.n	800ea02 <_printf_i+0x172>
 800ea2e:	6823      	ldr	r3, [r4, #0]
 800ea30:	f023 0320 	bic.w	r3, r3, #32
 800ea34:	6023      	str	r3, [r4, #0]
 800ea36:	e7f6      	b.n	800ea26 <_printf_i+0x196>
 800ea38:	4616      	mov	r6, r2
 800ea3a:	e7bd      	b.n	800e9b8 <_printf_i+0x128>
 800ea3c:	6833      	ldr	r3, [r6, #0]
 800ea3e:	6825      	ldr	r5, [r4, #0]
 800ea40:	6961      	ldr	r1, [r4, #20]
 800ea42:	1d18      	adds	r0, r3, #4
 800ea44:	6030      	str	r0, [r6, #0]
 800ea46:	062e      	lsls	r6, r5, #24
 800ea48:	681b      	ldr	r3, [r3, #0]
 800ea4a:	d501      	bpl.n	800ea50 <_printf_i+0x1c0>
 800ea4c:	6019      	str	r1, [r3, #0]
 800ea4e:	e002      	b.n	800ea56 <_printf_i+0x1c6>
 800ea50:	0668      	lsls	r0, r5, #25
 800ea52:	d5fb      	bpl.n	800ea4c <_printf_i+0x1bc>
 800ea54:	8019      	strh	r1, [r3, #0]
 800ea56:	2300      	movs	r3, #0
 800ea58:	6123      	str	r3, [r4, #16]
 800ea5a:	4616      	mov	r6, r2
 800ea5c:	e7bc      	b.n	800e9d8 <_printf_i+0x148>
 800ea5e:	6833      	ldr	r3, [r6, #0]
 800ea60:	1d1a      	adds	r2, r3, #4
 800ea62:	6032      	str	r2, [r6, #0]
 800ea64:	681e      	ldr	r6, [r3, #0]
 800ea66:	6862      	ldr	r2, [r4, #4]
 800ea68:	2100      	movs	r1, #0
 800ea6a:	4630      	mov	r0, r6
 800ea6c:	f7f1 fc50 	bl	8000310 <memchr>
 800ea70:	b108      	cbz	r0, 800ea76 <_printf_i+0x1e6>
 800ea72:	1b80      	subs	r0, r0, r6
 800ea74:	6060      	str	r0, [r4, #4]
 800ea76:	6863      	ldr	r3, [r4, #4]
 800ea78:	6123      	str	r3, [r4, #16]
 800ea7a:	2300      	movs	r3, #0
 800ea7c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ea80:	e7aa      	b.n	800e9d8 <_printf_i+0x148>
 800ea82:	6923      	ldr	r3, [r4, #16]
 800ea84:	4632      	mov	r2, r6
 800ea86:	4649      	mov	r1, r9
 800ea88:	4640      	mov	r0, r8
 800ea8a:	47d0      	blx	sl
 800ea8c:	3001      	adds	r0, #1
 800ea8e:	d0ad      	beq.n	800e9ec <_printf_i+0x15c>
 800ea90:	6823      	ldr	r3, [r4, #0]
 800ea92:	079b      	lsls	r3, r3, #30
 800ea94:	d413      	bmi.n	800eabe <_printf_i+0x22e>
 800ea96:	68e0      	ldr	r0, [r4, #12]
 800ea98:	9b03      	ldr	r3, [sp, #12]
 800ea9a:	4298      	cmp	r0, r3
 800ea9c:	bfb8      	it	lt
 800ea9e:	4618      	movlt	r0, r3
 800eaa0:	e7a6      	b.n	800e9f0 <_printf_i+0x160>
 800eaa2:	2301      	movs	r3, #1
 800eaa4:	4632      	mov	r2, r6
 800eaa6:	4649      	mov	r1, r9
 800eaa8:	4640      	mov	r0, r8
 800eaaa:	47d0      	blx	sl
 800eaac:	3001      	adds	r0, #1
 800eaae:	d09d      	beq.n	800e9ec <_printf_i+0x15c>
 800eab0:	3501      	adds	r5, #1
 800eab2:	68e3      	ldr	r3, [r4, #12]
 800eab4:	9903      	ldr	r1, [sp, #12]
 800eab6:	1a5b      	subs	r3, r3, r1
 800eab8:	42ab      	cmp	r3, r5
 800eaba:	dcf2      	bgt.n	800eaa2 <_printf_i+0x212>
 800eabc:	e7eb      	b.n	800ea96 <_printf_i+0x206>
 800eabe:	2500      	movs	r5, #0
 800eac0:	f104 0619 	add.w	r6, r4, #25
 800eac4:	e7f5      	b.n	800eab2 <_printf_i+0x222>
 800eac6:	bf00      	nop
 800eac8:	08012708 	.word	0x08012708
 800eacc:	08012719 	.word	0x08012719

0800ead0 <_scanf_float>:
 800ead0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ead4:	b087      	sub	sp, #28
 800ead6:	4617      	mov	r7, r2
 800ead8:	9303      	str	r3, [sp, #12]
 800eada:	688b      	ldr	r3, [r1, #8]
 800eadc:	1e5a      	subs	r2, r3, #1
 800eade:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800eae2:	bf81      	itttt	hi
 800eae4:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800eae8:	eb03 0b05 	addhi.w	fp, r3, r5
 800eaec:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800eaf0:	608b      	strhi	r3, [r1, #8]
 800eaf2:	680b      	ldr	r3, [r1, #0]
 800eaf4:	460a      	mov	r2, r1
 800eaf6:	f04f 0500 	mov.w	r5, #0
 800eafa:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800eafe:	f842 3b1c 	str.w	r3, [r2], #28
 800eb02:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800eb06:	4680      	mov	r8, r0
 800eb08:	460c      	mov	r4, r1
 800eb0a:	bf98      	it	ls
 800eb0c:	f04f 0b00 	movls.w	fp, #0
 800eb10:	9201      	str	r2, [sp, #4]
 800eb12:	4616      	mov	r6, r2
 800eb14:	46aa      	mov	sl, r5
 800eb16:	46a9      	mov	r9, r5
 800eb18:	9502      	str	r5, [sp, #8]
 800eb1a:	68a2      	ldr	r2, [r4, #8]
 800eb1c:	b152      	cbz	r2, 800eb34 <_scanf_float+0x64>
 800eb1e:	683b      	ldr	r3, [r7, #0]
 800eb20:	781b      	ldrb	r3, [r3, #0]
 800eb22:	2b4e      	cmp	r3, #78	@ 0x4e
 800eb24:	d864      	bhi.n	800ebf0 <_scanf_float+0x120>
 800eb26:	2b40      	cmp	r3, #64	@ 0x40
 800eb28:	d83c      	bhi.n	800eba4 <_scanf_float+0xd4>
 800eb2a:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800eb2e:	b2c8      	uxtb	r0, r1
 800eb30:	280e      	cmp	r0, #14
 800eb32:	d93a      	bls.n	800ebaa <_scanf_float+0xda>
 800eb34:	f1b9 0f00 	cmp.w	r9, #0
 800eb38:	d003      	beq.n	800eb42 <_scanf_float+0x72>
 800eb3a:	6823      	ldr	r3, [r4, #0]
 800eb3c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800eb40:	6023      	str	r3, [r4, #0]
 800eb42:	f10a 3aff 	add.w	sl, sl, #4294967295
 800eb46:	f1ba 0f01 	cmp.w	sl, #1
 800eb4a:	f200 8117 	bhi.w	800ed7c <_scanf_float+0x2ac>
 800eb4e:	9b01      	ldr	r3, [sp, #4]
 800eb50:	429e      	cmp	r6, r3
 800eb52:	f200 8108 	bhi.w	800ed66 <_scanf_float+0x296>
 800eb56:	2001      	movs	r0, #1
 800eb58:	b007      	add	sp, #28
 800eb5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb5e:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800eb62:	2a0d      	cmp	r2, #13
 800eb64:	d8e6      	bhi.n	800eb34 <_scanf_float+0x64>
 800eb66:	a101      	add	r1, pc, #4	@ (adr r1, 800eb6c <_scanf_float+0x9c>)
 800eb68:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800eb6c:	0800ecb3 	.word	0x0800ecb3
 800eb70:	0800eb35 	.word	0x0800eb35
 800eb74:	0800eb35 	.word	0x0800eb35
 800eb78:	0800eb35 	.word	0x0800eb35
 800eb7c:	0800ed13 	.word	0x0800ed13
 800eb80:	0800eceb 	.word	0x0800eceb
 800eb84:	0800eb35 	.word	0x0800eb35
 800eb88:	0800eb35 	.word	0x0800eb35
 800eb8c:	0800ecc1 	.word	0x0800ecc1
 800eb90:	0800eb35 	.word	0x0800eb35
 800eb94:	0800eb35 	.word	0x0800eb35
 800eb98:	0800eb35 	.word	0x0800eb35
 800eb9c:	0800eb35 	.word	0x0800eb35
 800eba0:	0800ec79 	.word	0x0800ec79
 800eba4:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800eba8:	e7db      	b.n	800eb62 <_scanf_float+0x92>
 800ebaa:	290e      	cmp	r1, #14
 800ebac:	d8c2      	bhi.n	800eb34 <_scanf_float+0x64>
 800ebae:	a001      	add	r0, pc, #4	@ (adr r0, 800ebb4 <_scanf_float+0xe4>)
 800ebb0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800ebb4:	0800ec69 	.word	0x0800ec69
 800ebb8:	0800eb35 	.word	0x0800eb35
 800ebbc:	0800ec69 	.word	0x0800ec69
 800ebc0:	0800ecff 	.word	0x0800ecff
 800ebc4:	0800eb35 	.word	0x0800eb35
 800ebc8:	0800ec11 	.word	0x0800ec11
 800ebcc:	0800ec4f 	.word	0x0800ec4f
 800ebd0:	0800ec4f 	.word	0x0800ec4f
 800ebd4:	0800ec4f 	.word	0x0800ec4f
 800ebd8:	0800ec4f 	.word	0x0800ec4f
 800ebdc:	0800ec4f 	.word	0x0800ec4f
 800ebe0:	0800ec4f 	.word	0x0800ec4f
 800ebe4:	0800ec4f 	.word	0x0800ec4f
 800ebe8:	0800ec4f 	.word	0x0800ec4f
 800ebec:	0800ec4f 	.word	0x0800ec4f
 800ebf0:	2b6e      	cmp	r3, #110	@ 0x6e
 800ebf2:	d809      	bhi.n	800ec08 <_scanf_float+0x138>
 800ebf4:	2b60      	cmp	r3, #96	@ 0x60
 800ebf6:	d8b2      	bhi.n	800eb5e <_scanf_float+0x8e>
 800ebf8:	2b54      	cmp	r3, #84	@ 0x54
 800ebfa:	d07b      	beq.n	800ecf4 <_scanf_float+0x224>
 800ebfc:	2b59      	cmp	r3, #89	@ 0x59
 800ebfe:	d199      	bne.n	800eb34 <_scanf_float+0x64>
 800ec00:	2d07      	cmp	r5, #7
 800ec02:	d197      	bne.n	800eb34 <_scanf_float+0x64>
 800ec04:	2508      	movs	r5, #8
 800ec06:	e02c      	b.n	800ec62 <_scanf_float+0x192>
 800ec08:	2b74      	cmp	r3, #116	@ 0x74
 800ec0a:	d073      	beq.n	800ecf4 <_scanf_float+0x224>
 800ec0c:	2b79      	cmp	r3, #121	@ 0x79
 800ec0e:	e7f6      	b.n	800ebfe <_scanf_float+0x12e>
 800ec10:	6821      	ldr	r1, [r4, #0]
 800ec12:	05c8      	lsls	r0, r1, #23
 800ec14:	d51b      	bpl.n	800ec4e <_scanf_float+0x17e>
 800ec16:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800ec1a:	6021      	str	r1, [r4, #0]
 800ec1c:	f109 0901 	add.w	r9, r9, #1
 800ec20:	f1bb 0f00 	cmp.w	fp, #0
 800ec24:	d003      	beq.n	800ec2e <_scanf_float+0x15e>
 800ec26:	3201      	adds	r2, #1
 800ec28:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ec2c:	60a2      	str	r2, [r4, #8]
 800ec2e:	68a3      	ldr	r3, [r4, #8]
 800ec30:	3b01      	subs	r3, #1
 800ec32:	60a3      	str	r3, [r4, #8]
 800ec34:	6923      	ldr	r3, [r4, #16]
 800ec36:	3301      	adds	r3, #1
 800ec38:	6123      	str	r3, [r4, #16]
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	3b01      	subs	r3, #1
 800ec3e:	2b00      	cmp	r3, #0
 800ec40:	607b      	str	r3, [r7, #4]
 800ec42:	f340 8087 	ble.w	800ed54 <_scanf_float+0x284>
 800ec46:	683b      	ldr	r3, [r7, #0]
 800ec48:	3301      	adds	r3, #1
 800ec4a:	603b      	str	r3, [r7, #0]
 800ec4c:	e765      	b.n	800eb1a <_scanf_float+0x4a>
 800ec4e:	eb1a 0105 	adds.w	r1, sl, r5
 800ec52:	f47f af6f 	bne.w	800eb34 <_scanf_float+0x64>
 800ec56:	6822      	ldr	r2, [r4, #0]
 800ec58:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800ec5c:	6022      	str	r2, [r4, #0]
 800ec5e:	460d      	mov	r5, r1
 800ec60:	468a      	mov	sl, r1
 800ec62:	f806 3b01 	strb.w	r3, [r6], #1
 800ec66:	e7e2      	b.n	800ec2e <_scanf_float+0x15e>
 800ec68:	6822      	ldr	r2, [r4, #0]
 800ec6a:	0610      	lsls	r0, r2, #24
 800ec6c:	f57f af62 	bpl.w	800eb34 <_scanf_float+0x64>
 800ec70:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800ec74:	6022      	str	r2, [r4, #0]
 800ec76:	e7f4      	b.n	800ec62 <_scanf_float+0x192>
 800ec78:	f1ba 0f00 	cmp.w	sl, #0
 800ec7c:	d10e      	bne.n	800ec9c <_scanf_float+0x1cc>
 800ec7e:	f1b9 0f00 	cmp.w	r9, #0
 800ec82:	d10e      	bne.n	800eca2 <_scanf_float+0x1d2>
 800ec84:	6822      	ldr	r2, [r4, #0]
 800ec86:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800ec8a:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800ec8e:	d108      	bne.n	800eca2 <_scanf_float+0x1d2>
 800ec90:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800ec94:	6022      	str	r2, [r4, #0]
 800ec96:	f04f 0a01 	mov.w	sl, #1
 800ec9a:	e7e2      	b.n	800ec62 <_scanf_float+0x192>
 800ec9c:	f1ba 0f02 	cmp.w	sl, #2
 800eca0:	d055      	beq.n	800ed4e <_scanf_float+0x27e>
 800eca2:	2d01      	cmp	r5, #1
 800eca4:	d002      	beq.n	800ecac <_scanf_float+0x1dc>
 800eca6:	2d04      	cmp	r5, #4
 800eca8:	f47f af44 	bne.w	800eb34 <_scanf_float+0x64>
 800ecac:	3501      	adds	r5, #1
 800ecae:	b2ed      	uxtb	r5, r5
 800ecb0:	e7d7      	b.n	800ec62 <_scanf_float+0x192>
 800ecb2:	f1ba 0f01 	cmp.w	sl, #1
 800ecb6:	f47f af3d 	bne.w	800eb34 <_scanf_float+0x64>
 800ecba:	f04f 0a02 	mov.w	sl, #2
 800ecbe:	e7d0      	b.n	800ec62 <_scanf_float+0x192>
 800ecc0:	b97d      	cbnz	r5, 800ece2 <_scanf_float+0x212>
 800ecc2:	f1b9 0f00 	cmp.w	r9, #0
 800ecc6:	f47f af38 	bne.w	800eb3a <_scanf_float+0x6a>
 800ecca:	6822      	ldr	r2, [r4, #0]
 800eccc:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800ecd0:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800ecd4:	f040 8101 	bne.w	800eeda <_scanf_float+0x40a>
 800ecd8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800ecdc:	6022      	str	r2, [r4, #0]
 800ecde:	2501      	movs	r5, #1
 800ece0:	e7bf      	b.n	800ec62 <_scanf_float+0x192>
 800ece2:	2d03      	cmp	r5, #3
 800ece4:	d0e2      	beq.n	800ecac <_scanf_float+0x1dc>
 800ece6:	2d05      	cmp	r5, #5
 800ece8:	e7de      	b.n	800eca8 <_scanf_float+0x1d8>
 800ecea:	2d02      	cmp	r5, #2
 800ecec:	f47f af22 	bne.w	800eb34 <_scanf_float+0x64>
 800ecf0:	2503      	movs	r5, #3
 800ecf2:	e7b6      	b.n	800ec62 <_scanf_float+0x192>
 800ecf4:	2d06      	cmp	r5, #6
 800ecf6:	f47f af1d 	bne.w	800eb34 <_scanf_float+0x64>
 800ecfa:	2507      	movs	r5, #7
 800ecfc:	e7b1      	b.n	800ec62 <_scanf_float+0x192>
 800ecfe:	6822      	ldr	r2, [r4, #0]
 800ed00:	0591      	lsls	r1, r2, #22
 800ed02:	f57f af17 	bpl.w	800eb34 <_scanf_float+0x64>
 800ed06:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800ed0a:	6022      	str	r2, [r4, #0]
 800ed0c:	f8cd 9008 	str.w	r9, [sp, #8]
 800ed10:	e7a7      	b.n	800ec62 <_scanf_float+0x192>
 800ed12:	6822      	ldr	r2, [r4, #0]
 800ed14:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800ed18:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800ed1c:	d006      	beq.n	800ed2c <_scanf_float+0x25c>
 800ed1e:	0550      	lsls	r0, r2, #21
 800ed20:	f57f af08 	bpl.w	800eb34 <_scanf_float+0x64>
 800ed24:	f1b9 0f00 	cmp.w	r9, #0
 800ed28:	f000 80d7 	beq.w	800eeda <_scanf_float+0x40a>
 800ed2c:	0591      	lsls	r1, r2, #22
 800ed2e:	bf58      	it	pl
 800ed30:	9902      	ldrpl	r1, [sp, #8]
 800ed32:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800ed36:	bf58      	it	pl
 800ed38:	eba9 0101 	subpl.w	r1, r9, r1
 800ed3c:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800ed40:	bf58      	it	pl
 800ed42:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800ed46:	6022      	str	r2, [r4, #0]
 800ed48:	f04f 0900 	mov.w	r9, #0
 800ed4c:	e789      	b.n	800ec62 <_scanf_float+0x192>
 800ed4e:	f04f 0a03 	mov.w	sl, #3
 800ed52:	e786      	b.n	800ec62 <_scanf_float+0x192>
 800ed54:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800ed58:	4639      	mov	r1, r7
 800ed5a:	4640      	mov	r0, r8
 800ed5c:	4798      	blx	r3
 800ed5e:	2800      	cmp	r0, #0
 800ed60:	f43f aedb 	beq.w	800eb1a <_scanf_float+0x4a>
 800ed64:	e6e6      	b.n	800eb34 <_scanf_float+0x64>
 800ed66:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ed6a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ed6e:	463a      	mov	r2, r7
 800ed70:	4640      	mov	r0, r8
 800ed72:	4798      	blx	r3
 800ed74:	6923      	ldr	r3, [r4, #16]
 800ed76:	3b01      	subs	r3, #1
 800ed78:	6123      	str	r3, [r4, #16]
 800ed7a:	e6e8      	b.n	800eb4e <_scanf_float+0x7e>
 800ed7c:	1e6b      	subs	r3, r5, #1
 800ed7e:	2b06      	cmp	r3, #6
 800ed80:	d824      	bhi.n	800edcc <_scanf_float+0x2fc>
 800ed82:	2d02      	cmp	r5, #2
 800ed84:	d836      	bhi.n	800edf4 <_scanf_float+0x324>
 800ed86:	9b01      	ldr	r3, [sp, #4]
 800ed88:	429e      	cmp	r6, r3
 800ed8a:	f67f aee4 	bls.w	800eb56 <_scanf_float+0x86>
 800ed8e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ed92:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ed96:	463a      	mov	r2, r7
 800ed98:	4640      	mov	r0, r8
 800ed9a:	4798      	blx	r3
 800ed9c:	6923      	ldr	r3, [r4, #16]
 800ed9e:	3b01      	subs	r3, #1
 800eda0:	6123      	str	r3, [r4, #16]
 800eda2:	e7f0      	b.n	800ed86 <_scanf_float+0x2b6>
 800eda4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800eda8:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800edac:	463a      	mov	r2, r7
 800edae:	4640      	mov	r0, r8
 800edb0:	4798      	blx	r3
 800edb2:	6923      	ldr	r3, [r4, #16]
 800edb4:	3b01      	subs	r3, #1
 800edb6:	6123      	str	r3, [r4, #16]
 800edb8:	f10a 3aff 	add.w	sl, sl, #4294967295
 800edbc:	fa5f fa8a 	uxtb.w	sl, sl
 800edc0:	f1ba 0f02 	cmp.w	sl, #2
 800edc4:	d1ee      	bne.n	800eda4 <_scanf_float+0x2d4>
 800edc6:	3d03      	subs	r5, #3
 800edc8:	b2ed      	uxtb	r5, r5
 800edca:	1b76      	subs	r6, r6, r5
 800edcc:	6823      	ldr	r3, [r4, #0]
 800edce:	05da      	lsls	r2, r3, #23
 800edd0:	d530      	bpl.n	800ee34 <_scanf_float+0x364>
 800edd2:	055b      	lsls	r3, r3, #21
 800edd4:	d511      	bpl.n	800edfa <_scanf_float+0x32a>
 800edd6:	9b01      	ldr	r3, [sp, #4]
 800edd8:	429e      	cmp	r6, r3
 800edda:	f67f aebc 	bls.w	800eb56 <_scanf_float+0x86>
 800edde:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ede2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ede6:	463a      	mov	r2, r7
 800ede8:	4640      	mov	r0, r8
 800edea:	4798      	blx	r3
 800edec:	6923      	ldr	r3, [r4, #16]
 800edee:	3b01      	subs	r3, #1
 800edf0:	6123      	str	r3, [r4, #16]
 800edf2:	e7f0      	b.n	800edd6 <_scanf_float+0x306>
 800edf4:	46aa      	mov	sl, r5
 800edf6:	46b3      	mov	fp, r6
 800edf8:	e7de      	b.n	800edb8 <_scanf_float+0x2e8>
 800edfa:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800edfe:	6923      	ldr	r3, [r4, #16]
 800ee00:	2965      	cmp	r1, #101	@ 0x65
 800ee02:	f103 33ff 	add.w	r3, r3, #4294967295
 800ee06:	f106 35ff 	add.w	r5, r6, #4294967295
 800ee0a:	6123      	str	r3, [r4, #16]
 800ee0c:	d00c      	beq.n	800ee28 <_scanf_float+0x358>
 800ee0e:	2945      	cmp	r1, #69	@ 0x45
 800ee10:	d00a      	beq.n	800ee28 <_scanf_float+0x358>
 800ee12:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ee16:	463a      	mov	r2, r7
 800ee18:	4640      	mov	r0, r8
 800ee1a:	4798      	blx	r3
 800ee1c:	6923      	ldr	r3, [r4, #16]
 800ee1e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800ee22:	3b01      	subs	r3, #1
 800ee24:	1eb5      	subs	r5, r6, #2
 800ee26:	6123      	str	r3, [r4, #16]
 800ee28:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ee2c:	463a      	mov	r2, r7
 800ee2e:	4640      	mov	r0, r8
 800ee30:	4798      	blx	r3
 800ee32:	462e      	mov	r6, r5
 800ee34:	6822      	ldr	r2, [r4, #0]
 800ee36:	f012 0210 	ands.w	r2, r2, #16
 800ee3a:	d001      	beq.n	800ee40 <_scanf_float+0x370>
 800ee3c:	2000      	movs	r0, #0
 800ee3e:	e68b      	b.n	800eb58 <_scanf_float+0x88>
 800ee40:	7032      	strb	r2, [r6, #0]
 800ee42:	6823      	ldr	r3, [r4, #0]
 800ee44:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800ee48:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ee4c:	d11a      	bne.n	800ee84 <_scanf_float+0x3b4>
 800ee4e:	9b02      	ldr	r3, [sp, #8]
 800ee50:	454b      	cmp	r3, r9
 800ee52:	eba3 0209 	sub.w	r2, r3, r9
 800ee56:	d121      	bne.n	800ee9c <_scanf_float+0x3cc>
 800ee58:	9901      	ldr	r1, [sp, #4]
 800ee5a:	2200      	movs	r2, #0
 800ee5c:	4640      	mov	r0, r8
 800ee5e:	f7ff f9f9 	bl	800e254 <_strtod_r>
 800ee62:	9b03      	ldr	r3, [sp, #12]
 800ee64:	6821      	ldr	r1, [r4, #0]
 800ee66:	681b      	ldr	r3, [r3, #0]
 800ee68:	f011 0f02 	tst.w	r1, #2
 800ee6c:	f103 0204 	add.w	r2, r3, #4
 800ee70:	d01f      	beq.n	800eeb2 <_scanf_float+0x3e2>
 800ee72:	9903      	ldr	r1, [sp, #12]
 800ee74:	600a      	str	r2, [r1, #0]
 800ee76:	681b      	ldr	r3, [r3, #0]
 800ee78:	ed83 0b00 	vstr	d0, [r3]
 800ee7c:	68e3      	ldr	r3, [r4, #12]
 800ee7e:	3301      	adds	r3, #1
 800ee80:	60e3      	str	r3, [r4, #12]
 800ee82:	e7db      	b.n	800ee3c <_scanf_float+0x36c>
 800ee84:	9b04      	ldr	r3, [sp, #16]
 800ee86:	2b00      	cmp	r3, #0
 800ee88:	d0e6      	beq.n	800ee58 <_scanf_float+0x388>
 800ee8a:	9905      	ldr	r1, [sp, #20]
 800ee8c:	230a      	movs	r3, #10
 800ee8e:	3101      	adds	r1, #1
 800ee90:	4640      	mov	r0, r8
 800ee92:	f002 f8e7 	bl	8011064 <_strtol_r>
 800ee96:	9b04      	ldr	r3, [sp, #16]
 800ee98:	9e05      	ldr	r6, [sp, #20]
 800ee9a:	1ac2      	subs	r2, r0, r3
 800ee9c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800eea0:	429e      	cmp	r6, r3
 800eea2:	bf28      	it	cs
 800eea4:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800eea8:	490d      	ldr	r1, [pc, #52]	@ (800eee0 <_scanf_float+0x410>)
 800eeaa:	4630      	mov	r0, r6
 800eeac:	f000 f8de 	bl	800f06c <siprintf>
 800eeb0:	e7d2      	b.n	800ee58 <_scanf_float+0x388>
 800eeb2:	f011 0f04 	tst.w	r1, #4
 800eeb6:	9903      	ldr	r1, [sp, #12]
 800eeb8:	600a      	str	r2, [r1, #0]
 800eeba:	d1dc      	bne.n	800ee76 <_scanf_float+0x3a6>
 800eebc:	eeb4 0b40 	vcmp.f64	d0, d0
 800eec0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eec4:	681d      	ldr	r5, [r3, #0]
 800eec6:	d705      	bvc.n	800eed4 <_scanf_float+0x404>
 800eec8:	4806      	ldr	r0, [pc, #24]	@ (800eee4 <_scanf_float+0x414>)
 800eeca:	f000 fa25 	bl	800f318 <nanf>
 800eece:	ed85 0a00 	vstr	s0, [r5]
 800eed2:	e7d3      	b.n	800ee7c <_scanf_float+0x3ac>
 800eed4:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800eed8:	e7f9      	b.n	800eece <_scanf_float+0x3fe>
 800eeda:	f04f 0900 	mov.w	r9, #0
 800eede:	e630      	b.n	800eb42 <_scanf_float+0x72>
 800eee0:	0801272a 	.word	0x0801272a
 800eee4:	08012ae8 	.word	0x08012ae8

0800eee8 <std>:
 800eee8:	2300      	movs	r3, #0
 800eeea:	b510      	push	{r4, lr}
 800eeec:	4604      	mov	r4, r0
 800eeee:	e9c0 3300 	strd	r3, r3, [r0]
 800eef2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800eef6:	6083      	str	r3, [r0, #8]
 800eef8:	8181      	strh	r1, [r0, #12]
 800eefa:	6643      	str	r3, [r0, #100]	@ 0x64
 800eefc:	81c2      	strh	r2, [r0, #14]
 800eefe:	6183      	str	r3, [r0, #24]
 800ef00:	4619      	mov	r1, r3
 800ef02:	2208      	movs	r2, #8
 800ef04:	305c      	adds	r0, #92	@ 0x5c
 800ef06:	f000 f940 	bl	800f18a <memset>
 800ef0a:	4b0d      	ldr	r3, [pc, #52]	@ (800ef40 <std+0x58>)
 800ef0c:	6263      	str	r3, [r4, #36]	@ 0x24
 800ef0e:	4b0d      	ldr	r3, [pc, #52]	@ (800ef44 <std+0x5c>)
 800ef10:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ef12:	4b0d      	ldr	r3, [pc, #52]	@ (800ef48 <std+0x60>)
 800ef14:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ef16:	4b0d      	ldr	r3, [pc, #52]	@ (800ef4c <std+0x64>)
 800ef18:	6323      	str	r3, [r4, #48]	@ 0x30
 800ef1a:	4b0d      	ldr	r3, [pc, #52]	@ (800ef50 <std+0x68>)
 800ef1c:	6224      	str	r4, [r4, #32]
 800ef1e:	429c      	cmp	r4, r3
 800ef20:	d006      	beq.n	800ef30 <std+0x48>
 800ef22:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ef26:	4294      	cmp	r4, r2
 800ef28:	d002      	beq.n	800ef30 <std+0x48>
 800ef2a:	33d0      	adds	r3, #208	@ 0xd0
 800ef2c:	429c      	cmp	r4, r3
 800ef2e:	d105      	bne.n	800ef3c <std+0x54>
 800ef30:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ef34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ef38:	f000 b9d2 	b.w	800f2e0 <__retarget_lock_init_recursive>
 800ef3c:	bd10      	pop	{r4, pc}
 800ef3e:	bf00      	nop
 800ef40:	0800f101 	.word	0x0800f101
 800ef44:	0800f127 	.word	0x0800f127
 800ef48:	0800f15f 	.word	0x0800f15f
 800ef4c:	0800f183 	.word	0x0800f183
 800ef50:	24000d14 	.word	0x24000d14

0800ef54 <stdio_exit_handler>:
 800ef54:	4a02      	ldr	r2, [pc, #8]	@ (800ef60 <stdio_exit_handler+0xc>)
 800ef56:	4903      	ldr	r1, [pc, #12]	@ (800ef64 <stdio_exit_handler+0x10>)
 800ef58:	4803      	ldr	r0, [pc, #12]	@ (800ef68 <stdio_exit_handler+0x14>)
 800ef5a:	f000 b869 	b.w	800f030 <_fwalk_sglue>
 800ef5e:	bf00      	nop
 800ef60:	24000068 	.word	0x24000068
 800ef64:	08011a6d 	.word	0x08011a6d
 800ef68:	240001e4 	.word	0x240001e4

0800ef6c <cleanup_stdio>:
 800ef6c:	6841      	ldr	r1, [r0, #4]
 800ef6e:	4b0c      	ldr	r3, [pc, #48]	@ (800efa0 <cleanup_stdio+0x34>)
 800ef70:	4299      	cmp	r1, r3
 800ef72:	b510      	push	{r4, lr}
 800ef74:	4604      	mov	r4, r0
 800ef76:	d001      	beq.n	800ef7c <cleanup_stdio+0x10>
 800ef78:	f002 fd78 	bl	8011a6c <_fflush_r>
 800ef7c:	68a1      	ldr	r1, [r4, #8]
 800ef7e:	4b09      	ldr	r3, [pc, #36]	@ (800efa4 <cleanup_stdio+0x38>)
 800ef80:	4299      	cmp	r1, r3
 800ef82:	d002      	beq.n	800ef8a <cleanup_stdio+0x1e>
 800ef84:	4620      	mov	r0, r4
 800ef86:	f002 fd71 	bl	8011a6c <_fflush_r>
 800ef8a:	68e1      	ldr	r1, [r4, #12]
 800ef8c:	4b06      	ldr	r3, [pc, #24]	@ (800efa8 <cleanup_stdio+0x3c>)
 800ef8e:	4299      	cmp	r1, r3
 800ef90:	d004      	beq.n	800ef9c <cleanup_stdio+0x30>
 800ef92:	4620      	mov	r0, r4
 800ef94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ef98:	f002 bd68 	b.w	8011a6c <_fflush_r>
 800ef9c:	bd10      	pop	{r4, pc}
 800ef9e:	bf00      	nop
 800efa0:	24000d14 	.word	0x24000d14
 800efa4:	24000d7c 	.word	0x24000d7c
 800efa8:	24000de4 	.word	0x24000de4

0800efac <global_stdio_init.part.0>:
 800efac:	b510      	push	{r4, lr}
 800efae:	4b0b      	ldr	r3, [pc, #44]	@ (800efdc <global_stdio_init.part.0+0x30>)
 800efb0:	4c0b      	ldr	r4, [pc, #44]	@ (800efe0 <global_stdio_init.part.0+0x34>)
 800efb2:	4a0c      	ldr	r2, [pc, #48]	@ (800efe4 <global_stdio_init.part.0+0x38>)
 800efb4:	601a      	str	r2, [r3, #0]
 800efb6:	4620      	mov	r0, r4
 800efb8:	2200      	movs	r2, #0
 800efba:	2104      	movs	r1, #4
 800efbc:	f7ff ff94 	bl	800eee8 <std>
 800efc0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800efc4:	2201      	movs	r2, #1
 800efc6:	2109      	movs	r1, #9
 800efc8:	f7ff ff8e 	bl	800eee8 <std>
 800efcc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800efd0:	2202      	movs	r2, #2
 800efd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800efd6:	2112      	movs	r1, #18
 800efd8:	f7ff bf86 	b.w	800eee8 <std>
 800efdc:	24000e4c 	.word	0x24000e4c
 800efe0:	24000d14 	.word	0x24000d14
 800efe4:	0800ef55 	.word	0x0800ef55

0800efe8 <__sfp_lock_acquire>:
 800efe8:	4801      	ldr	r0, [pc, #4]	@ (800eff0 <__sfp_lock_acquire+0x8>)
 800efea:	f000 b97a 	b.w	800f2e2 <__retarget_lock_acquire_recursive>
 800efee:	bf00      	nop
 800eff0:	24000e55 	.word	0x24000e55

0800eff4 <__sfp_lock_release>:
 800eff4:	4801      	ldr	r0, [pc, #4]	@ (800effc <__sfp_lock_release+0x8>)
 800eff6:	f000 b975 	b.w	800f2e4 <__retarget_lock_release_recursive>
 800effa:	bf00      	nop
 800effc:	24000e55 	.word	0x24000e55

0800f000 <__sinit>:
 800f000:	b510      	push	{r4, lr}
 800f002:	4604      	mov	r4, r0
 800f004:	f7ff fff0 	bl	800efe8 <__sfp_lock_acquire>
 800f008:	6a23      	ldr	r3, [r4, #32]
 800f00a:	b11b      	cbz	r3, 800f014 <__sinit+0x14>
 800f00c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f010:	f7ff bff0 	b.w	800eff4 <__sfp_lock_release>
 800f014:	4b04      	ldr	r3, [pc, #16]	@ (800f028 <__sinit+0x28>)
 800f016:	6223      	str	r3, [r4, #32]
 800f018:	4b04      	ldr	r3, [pc, #16]	@ (800f02c <__sinit+0x2c>)
 800f01a:	681b      	ldr	r3, [r3, #0]
 800f01c:	2b00      	cmp	r3, #0
 800f01e:	d1f5      	bne.n	800f00c <__sinit+0xc>
 800f020:	f7ff ffc4 	bl	800efac <global_stdio_init.part.0>
 800f024:	e7f2      	b.n	800f00c <__sinit+0xc>
 800f026:	bf00      	nop
 800f028:	0800ef6d 	.word	0x0800ef6d
 800f02c:	24000e4c 	.word	0x24000e4c

0800f030 <_fwalk_sglue>:
 800f030:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f034:	4607      	mov	r7, r0
 800f036:	4688      	mov	r8, r1
 800f038:	4614      	mov	r4, r2
 800f03a:	2600      	movs	r6, #0
 800f03c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f040:	f1b9 0901 	subs.w	r9, r9, #1
 800f044:	d505      	bpl.n	800f052 <_fwalk_sglue+0x22>
 800f046:	6824      	ldr	r4, [r4, #0]
 800f048:	2c00      	cmp	r4, #0
 800f04a:	d1f7      	bne.n	800f03c <_fwalk_sglue+0xc>
 800f04c:	4630      	mov	r0, r6
 800f04e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f052:	89ab      	ldrh	r3, [r5, #12]
 800f054:	2b01      	cmp	r3, #1
 800f056:	d907      	bls.n	800f068 <_fwalk_sglue+0x38>
 800f058:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f05c:	3301      	adds	r3, #1
 800f05e:	d003      	beq.n	800f068 <_fwalk_sglue+0x38>
 800f060:	4629      	mov	r1, r5
 800f062:	4638      	mov	r0, r7
 800f064:	47c0      	blx	r8
 800f066:	4306      	orrs	r6, r0
 800f068:	3568      	adds	r5, #104	@ 0x68
 800f06a:	e7e9      	b.n	800f040 <_fwalk_sglue+0x10>

0800f06c <siprintf>:
 800f06c:	b40e      	push	{r1, r2, r3}
 800f06e:	b500      	push	{lr}
 800f070:	b09c      	sub	sp, #112	@ 0x70
 800f072:	ab1d      	add	r3, sp, #116	@ 0x74
 800f074:	9002      	str	r0, [sp, #8]
 800f076:	9006      	str	r0, [sp, #24]
 800f078:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800f07c:	4809      	ldr	r0, [pc, #36]	@ (800f0a4 <siprintf+0x38>)
 800f07e:	9107      	str	r1, [sp, #28]
 800f080:	9104      	str	r1, [sp, #16]
 800f082:	4909      	ldr	r1, [pc, #36]	@ (800f0a8 <siprintf+0x3c>)
 800f084:	f853 2b04 	ldr.w	r2, [r3], #4
 800f088:	9105      	str	r1, [sp, #20]
 800f08a:	6800      	ldr	r0, [r0, #0]
 800f08c:	9301      	str	r3, [sp, #4]
 800f08e:	a902      	add	r1, sp, #8
 800f090:	f002 f852 	bl	8011138 <_svfiprintf_r>
 800f094:	9b02      	ldr	r3, [sp, #8]
 800f096:	2200      	movs	r2, #0
 800f098:	701a      	strb	r2, [r3, #0]
 800f09a:	b01c      	add	sp, #112	@ 0x70
 800f09c:	f85d eb04 	ldr.w	lr, [sp], #4
 800f0a0:	b003      	add	sp, #12
 800f0a2:	4770      	bx	lr
 800f0a4:	240001e0 	.word	0x240001e0
 800f0a8:	ffff0208 	.word	0xffff0208

0800f0ac <siscanf>:
 800f0ac:	b40e      	push	{r1, r2, r3}
 800f0ae:	b530      	push	{r4, r5, lr}
 800f0b0:	b09c      	sub	sp, #112	@ 0x70
 800f0b2:	ac1f      	add	r4, sp, #124	@ 0x7c
 800f0b4:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800f0b8:	f854 5b04 	ldr.w	r5, [r4], #4
 800f0bc:	f8ad 2014 	strh.w	r2, [sp, #20]
 800f0c0:	9002      	str	r0, [sp, #8]
 800f0c2:	9006      	str	r0, [sp, #24]
 800f0c4:	f7f1 f974 	bl	80003b0 <strlen>
 800f0c8:	4b0b      	ldr	r3, [pc, #44]	@ (800f0f8 <siscanf+0x4c>)
 800f0ca:	9003      	str	r0, [sp, #12]
 800f0cc:	9007      	str	r0, [sp, #28]
 800f0ce:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f0d0:	480a      	ldr	r0, [pc, #40]	@ (800f0fc <siscanf+0x50>)
 800f0d2:	9401      	str	r4, [sp, #4]
 800f0d4:	2300      	movs	r3, #0
 800f0d6:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f0d8:	9314      	str	r3, [sp, #80]	@ 0x50
 800f0da:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800f0de:	f8ad 3016 	strh.w	r3, [sp, #22]
 800f0e2:	462a      	mov	r2, r5
 800f0e4:	4623      	mov	r3, r4
 800f0e6:	a902      	add	r1, sp, #8
 800f0e8:	6800      	ldr	r0, [r0, #0]
 800f0ea:	f002 f979 	bl	80113e0 <__ssvfiscanf_r>
 800f0ee:	b01c      	add	sp, #112	@ 0x70
 800f0f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f0f4:	b003      	add	sp, #12
 800f0f6:	4770      	bx	lr
 800f0f8:	0800f123 	.word	0x0800f123
 800f0fc:	240001e0 	.word	0x240001e0

0800f100 <__sread>:
 800f100:	b510      	push	{r4, lr}
 800f102:	460c      	mov	r4, r1
 800f104:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f108:	f000 f88c 	bl	800f224 <_read_r>
 800f10c:	2800      	cmp	r0, #0
 800f10e:	bfab      	itete	ge
 800f110:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800f112:	89a3      	ldrhlt	r3, [r4, #12]
 800f114:	181b      	addge	r3, r3, r0
 800f116:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800f11a:	bfac      	ite	ge
 800f11c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800f11e:	81a3      	strhlt	r3, [r4, #12]
 800f120:	bd10      	pop	{r4, pc}

0800f122 <__seofread>:
 800f122:	2000      	movs	r0, #0
 800f124:	4770      	bx	lr

0800f126 <__swrite>:
 800f126:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f12a:	461f      	mov	r7, r3
 800f12c:	898b      	ldrh	r3, [r1, #12]
 800f12e:	05db      	lsls	r3, r3, #23
 800f130:	4605      	mov	r5, r0
 800f132:	460c      	mov	r4, r1
 800f134:	4616      	mov	r6, r2
 800f136:	d505      	bpl.n	800f144 <__swrite+0x1e>
 800f138:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f13c:	2302      	movs	r3, #2
 800f13e:	2200      	movs	r2, #0
 800f140:	f000 f85e 	bl	800f200 <_lseek_r>
 800f144:	89a3      	ldrh	r3, [r4, #12]
 800f146:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f14a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800f14e:	81a3      	strh	r3, [r4, #12]
 800f150:	4632      	mov	r2, r6
 800f152:	463b      	mov	r3, r7
 800f154:	4628      	mov	r0, r5
 800f156:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f15a:	f000 b885 	b.w	800f268 <_write_r>

0800f15e <__sseek>:
 800f15e:	b510      	push	{r4, lr}
 800f160:	460c      	mov	r4, r1
 800f162:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f166:	f000 f84b 	bl	800f200 <_lseek_r>
 800f16a:	1c43      	adds	r3, r0, #1
 800f16c:	89a3      	ldrh	r3, [r4, #12]
 800f16e:	bf15      	itete	ne
 800f170:	6560      	strne	r0, [r4, #84]	@ 0x54
 800f172:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800f176:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800f17a:	81a3      	strheq	r3, [r4, #12]
 800f17c:	bf18      	it	ne
 800f17e:	81a3      	strhne	r3, [r4, #12]
 800f180:	bd10      	pop	{r4, pc}

0800f182 <__sclose>:
 800f182:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f186:	f000 b82b 	b.w	800f1e0 <_close_r>

0800f18a <memset>:
 800f18a:	4402      	add	r2, r0
 800f18c:	4603      	mov	r3, r0
 800f18e:	4293      	cmp	r3, r2
 800f190:	d100      	bne.n	800f194 <memset+0xa>
 800f192:	4770      	bx	lr
 800f194:	f803 1b01 	strb.w	r1, [r3], #1
 800f198:	e7f9      	b.n	800f18e <memset+0x4>

0800f19a <strchr>:
 800f19a:	b2c9      	uxtb	r1, r1
 800f19c:	4603      	mov	r3, r0
 800f19e:	4618      	mov	r0, r3
 800f1a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f1a4:	b112      	cbz	r2, 800f1ac <strchr+0x12>
 800f1a6:	428a      	cmp	r2, r1
 800f1a8:	d1f9      	bne.n	800f19e <strchr+0x4>
 800f1aa:	4770      	bx	lr
 800f1ac:	2900      	cmp	r1, #0
 800f1ae:	bf18      	it	ne
 800f1b0:	2000      	movne	r0, #0
 800f1b2:	4770      	bx	lr

0800f1b4 <strncmp>:
 800f1b4:	b510      	push	{r4, lr}
 800f1b6:	b16a      	cbz	r2, 800f1d4 <strncmp+0x20>
 800f1b8:	3901      	subs	r1, #1
 800f1ba:	1884      	adds	r4, r0, r2
 800f1bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f1c0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800f1c4:	429a      	cmp	r2, r3
 800f1c6:	d103      	bne.n	800f1d0 <strncmp+0x1c>
 800f1c8:	42a0      	cmp	r0, r4
 800f1ca:	d001      	beq.n	800f1d0 <strncmp+0x1c>
 800f1cc:	2a00      	cmp	r2, #0
 800f1ce:	d1f5      	bne.n	800f1bc <strncmp+0x8>
 800f1d0:	1ad0      	subs	r0, r2, r3
 800f1d2:	bd10      	pop	{r4, pc}
 800f1d4:	4610      	mov	r0, r2
 800f1d6:	e7fc      	b.n	800f1d2 <strncmp+0x1e>

0800f1d8 <_localeconv_r>:
 800f1d8:	4800      	ldr	r0, [pc, #0]	@ (800f1dc <_localeconv_r+0x4>)
 800f1da:	4770      	bx	lr
 800f1dc:	24000164 	.word	0x24000164

0800f1e0 <_close_r>:
 800f1e0:	b538      	push	{r3, r4, r5, lr}
 800f1e2:	4d06      	ldr	r5, [pc, #24]	@ (800f1fc <_close_r+0x1c>)
 800f1e4:	2300      	movs	r3, #0
 800f1e6:	4604      	mov	r4, r0
 800f1e8:	4608      	mov	r0, r1
 800f1ea:	602b      	str	r3, [r5, #0]
 800f1ec:	f7f2 fc80 	bl	8001af0 <_close>
 800f1f0:	1c43      	adds	r3, r0, #1
 800f1f2:	d102      	bne.n	800f1fa <_close_r+0x1a>
 800f1f4:	682b      	ldr	r3, [r5, #0]
 800f1f6:	b103      	cbz	r3, 800f1fa <_close_r+0x1a>
 800f1f8:	6023      	str	r3, [r4, #0]
 800f1fa:	bd38      	pop	{r3, r4, r5, pc}
 800f1fc:	24000e50 	.word	0x24000e50

0800f200 <_lseek_r>:
 800f200:	b538      	push	{r3, r4, r5, lr}
 800f202:	4d07      	ldr	r5, [pc, #28]	@ (800f220 <_lseek_r+0x20>)
 800f204:	4604      	mov	r4, r0
 800f206:	4608      	mov	r0, r1
 800f208:	4611      	mov	r1, r2
 800f20a:	2200      	movs	r2, #0
 800f20c:	602a      	str	r2, [r5, #0]
 800f20e:	461a      	mov	r2, r3
 800f210:	f7f2 fc95 	bl	8001b3e <_lseek>
 800f214:	1c43      	adds	r3, r0, #1
 800f216:	d102      	bne.n	800f21e <_lseek_r+0x1e>
 800f218:	682b      	ldr	r3, [r5, #0]
 800f21a:	b103      	cbz	r3, 800f21e <_lseek_r+0x1e>
 800f21c:	6023      	str	r3, [r4, #0]
 800f21e:	bd38      	pop	{r3, r4, r5, pc}
 800f220:	24000e50 	.word	0x24000e50

0800f224 <_read_r>:
 800f224:	b538      	push	{r3, r4, r5, lr}
 800f226:	4d07      	ldr	r5, [pc, #28]	@ (800f244 <_read_r+0x20>)
 800f228:	4604      	mov	r4, r0
 800f22a:	4608      	mov	r0, r1
 800f22c:	4611      	mov	r1, r2
 800f22e:	2200      	movs	r2, #0
 800f230:	602a      	str	r2, [r5, #0]
 800f232:	461a      	mov	r2, r3
 800f234:	f7f2 fc23 	bl	8001a7e <_read>
 800f238:	1c43      	adds	r3, r0, #1
 800f23a:	d102      	bne.n	800f242 <_read_r+0x1e>
 800f23c:	682b      	ldr	r3, [r5, #0]
 800f23e:	b103      	cbz	r3, 800f242 <_read_r+0x1e>
 800f240:	6023      	str	r3, [r4, #0]
 800f242:	bd38      	pop	{r3, r4, r5, pc}
 800f244:	24000e50 	.word	0x24000e50

0800f248 <_sbrk_r>:
 800f248:	b538      	push	{r3, r4, r5, lr}
 800f24a:	4d06      	ldr	r5, [pc, #24]	@ (800f264 <_sbrk_r+0x1c>)
 800f24c:	2300      	movs	r3, #0
 800f24e:	4604      	mov	r4, r0
 800f250:	4608      	mov	r0, r1
 800f252:	602b      	str	r3, [r5, #0]
 800f254:	f7f2 fc80 	bl	8001b58 <_sbrk>
 800f258:	1c43      	adds	r3, r0, #1
 800f25a:	d102      	bne.n	800f262 <_sbrk_r+0x1a>
 800f25c:	682b      	ldr	r3, [r5, #0]
 800f25e:	b103      	cbz	r3, 800f262 <_sbrk_r+0x1a>
 800f260:	6023      	str	r3, [r4, #0]
 800f262:	bd38      	pop	{r3, r4, r5, pc}
 800f264:	24000e50 	.word	0x24000e50

0800f268 <_write_r>:
 800f268:	b538      	push	{r3, r4, r5, lr}
 800f26a:	4d07      	ldr	r5, [pc, #28]	@ (800f288 <_write_r+0x20>)
 800f26c:	4604      	mov	r4, r0
 800f26e:	4608      	mov	r0, r1
 800f270:	4611      	mov	r1, r2
 800f272:	2200      	movs	r2, #0
 800f274:	602a      	str	r2, [r5, #0]
 800f276:	461a      	mov	r2, r3
 800f278:	f7f2 fc1e 	bl	8001ab8 <_write>
 800f27c:	1c43      	adds	r3, r0, #1
 800f27e:	d102      	bne.n	800f286 <_write_r+0x1e>
 800f280:	682b      	ldr	r3, [r5, #0]
 800f282:	b103      	cbz	r3, 800f286 <_write_r+0x1e>
 800f284:	6023      	str	r3, [r4, #0]
 800f286:	bd38      	pop	{r3, r4, r5, pc}
 800f288:	24000e50 	.word	0x24000e50

0800f28c <__errno>:
 800f28c:	4b01      	ldr	r3, [pc, #4]	@ (800f294 <__errno+0x8>)
 800f28e:	6818      	ldr	r0, [r3, #0]
 800f290:	4770      	bx	lr
 800f292:	bf00      	nop
 800f294:	240001e0 	.word	0x240001e0

0800f298 <__libc_init_array>:
 800f298:	b570      	push	{r4, r5, r6, lr}
 800f29a:	4d0d      	ldr	r5, [pc, #52]	@ (800f2d0 <__libc_init_array+0x38>)
 800f29c:	4c0d      	ldr	r4, [pc, #52]	@ (800f2d4 <__libc_init_array+0x3c>)
 800f29e:	1b64      	subs	r4, r4, r5
 800f2a0:	10a4      	asrs	r4, r4, #2
 800f2a2:	2600      	movs	r6, #0
 800f2a4:	42a6      	cmp	r6, r4
 800f2a6:	d109      	bne.n	800f2bc <__libc_init_array+0x24>
 800f2a8:	4d0b      	ldr	r5, [pc, #44]	@ (800f2d8 <__libc_init_array+0x40>)
 800f2aa:	4c0c      	ldr	r4, [pc, #48]	@ (800f2dc <__libc_init_array+0x44>)
 800f2ac:	f003 f822 	bl	80122f4 <_init>
 800f2b0:	1b64      	subs	r4, r4, r5
 800f2b2:	10a4      	asrs	r4, r4, #2
 800f2b4:	2600      	movs	r6, #0
 800f2b6:	42a6      	cmp	r6, r4
 800f2b8:	d105      	bne.n	800f2c6 <__libc_init_array+0x2e>
 800f2ba:	bd70      	pop	{r4, r5, r6, pc}
 800f2bc:	f855 3b04 	ldr.w	r3, [r5], #4
 800f2c0:	4798      	blx	r3
 800f2c2:	3601      	adds	r6, #1
 800f2c4:	e7ee      	b.n	800f2a4 <__libc_init_array+0xc>
 800f2c6:	f855 3b04 	ldr.w	r3, [r5], #4
 800f2ca:	4798      	blx	r3
 800f2cc:	3601      	adds	r6, #1
 800f2ce:	e7f2      	b.n	800f2b6 <__libc_init_array+0x1e>
 800f2d0:	08012af4 	.word	0x08012af4
 800f2d4:	08012af4 	.word	0x08012af4
 800f2d8:	08012af4 	.word	0x08012af4
 800f2dc:	08012af8 	.word	0x08012af8

0800f2e0 <__retarget_lock_init_recursive>:
 800f2e0:	4770      	bx	lr

0800f2e2 <__retarget_lock_acquire_recursive>:
 800f2e2:	4770      	bx	lr

0800f2e4 <__retarget_lock_release_recursive>:
 800f2e4:	4770      	bx	lr

0800f2e6 <memcpy>:
 800f2e6:	440a      	add	r2, r1
 800f2e8:	4291      	cmp	r1, r2
 800f2ea:	f100 33ff 	add.w	r3, r0, #4294967295
 800f2ee:	d100      	bne.n	800f2f2 <memcpy+0xc>
 800f2f0:	4770      	bx	lr
 800f2f2:	b510      	push	{r4, lr}
 800f2f4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f2f8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f2fc:	4291      	cmp	r1, r2
 800f2fe:	d1f9      	bne.n	800f2f4 <memcpy+0xe>
 800f300:	bd10      	pop	{r4, pc}
 800f302:	0000      	movs	r0, r0
 800f304:	0000      	movs	r0, r0
	...

0800f308 <nan>:
 800f308:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800f310 <nan+0x8>
 800f30c:	4770      	bx	lr
 800f30e:	bf00      	nop
 800f310:	00000000 	.word	0x00000000
 800f314:	7ff80000 	.word	0x7ff80000

0800f318 <nanf>:
 800f318:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800f320 <nanf+0x8>
 800f31c:	4770      	bx	lr
 800f31e:	bf00      	nop
 800f320:	7fc00000 	.word	0x7fc00000

0800f324 <quorem>:
 800f324:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f328:	6903      	ldr	r3, [r0, #16]
 800f32a:	690c      	ldr	r4, [r1, #16]
 800f32c:	42a3      	cmp	r3, r4
 800f32e:	4607      	mov	r7, r0
 800f330:	db7e      	blt.n	800f430 <quorem+0x10c>
 800f332:	3c01      	subs	r4, #1
 800f334:	f101 0814 	add.w	r8, r1, #20
 800f338:	00a3      	lsls	r3, r4, #2
 800f33a:	f100 0514 	add.w	r5, r0, #20
 800f33e:	9300      	str	r3, [sp, #0]
 800f340:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f344:	9301      	str	r3, [sp, #4]
 800f346:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f34a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f34e:	3301      	adds	r3, #1
 800f350:	429a      	cmp	r2, r3
 800f352:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f356:	fbb2 f6f3 	udiv	r6, r2, r3
 800f35a:	d32e      	bcc.n	800f3ba <quorem+0x96>
 800f35c:	f04f 0a00 	mov.w	sl, #0
 800f360:	46c4      	mov	ip, r8
 800f362:	46ae      	mov	lr, r5
 800f364:	46d3      	mov	fp, sl
 800f366:	f85c 3b04 	ldr.w	r3, [ip], #4
 800f36a:	b298      	uxth	r0, r3
 800f36c:	fb06 a000 	mla	r0, r6, r0, sl
 800f370:	0c02      	lsrs	r2, r0, #16
 800f372:	0c1b      	lsrs	r3, r3, #16
 800f374:	fb06 2303 	mla	r3, r6, r3, r2
 800f378:	f8de 2000 	ldr.w	r2, [lr]
 800f37c:	b280      	uxth	r0, r0
 800f37e:	b292      	uxth	r2, r2
 800f380:	1a12      	subs	r2, r2, r0
 800f382:	445a      	add	r2, fp
 800f384:	f8de 0000 	ldr.w	r0, [lr]
 800f388:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f38c:	b29b      	uxth	r3, r3
 800f38e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800f392:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800f396:	b292      	uxth	r2, r2
 800f398:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800f39c:	45e1      	cmp	r9, ip
 800f39e:	f84e 2b04 	str.w	r2, [lr], #4
 800f3a2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800f3a6:	d2de      	bcs.n	800f366 <quorem+0x42>
 800f3a8:	9b00      	ldr	r3, [sp, #0]
 800f3aa:	58eb      	ldr	r3, [r5, r3]
 800f3ac:	b92b      	cbnz	r3, 800f3ba <quorem+0x96>
 800f3ae:	9b01      	ldr	r3, [sp, #4]
 800f3b0:	3b04      	subs	r3, #4
 800f3b2:	429d      	cmp	r5, r3
 800f3b4:	461a      	mov	r2, r3
 800f3b6:	d32f      	bcc.n	800f418 <quorem+0xf4>
 800f3b8:	613c      	str	r4, [r7, #16]
 800f3ba:	4638      	mov	r0, r7
 800f3bc:	f001 fbec 	bl	8010b98 <__mcmp>
 800f3c0:	2800      	cmp	r0, #0
 800f3c2:	db25      	blt.n	800f410 <quorem+0xec>
 800f3c4:	4629      	mov	r1, r5
 800f3c6:	2000      	movs	r0, #0
 800f3c8:	f858 2b04 	ldr.w	r2, [r8], #4
 800f3cc:	f8d1 c000 	ldr.w	ip, [r1]
 800f3d0:	fa1f fe82 	uxth.w	lr, r2
 800f3d4:	fa1f f38c 	uxth.w	r3, ip
 800f3d8:	eba3 030e 	sub.w	r3, r3, lr
 800f3dc:	4403      	add	r3, r0
 800f3de:	0c12      	lsrs	r2, r2, #16
 800f3e0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800f3e4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800f3e8:	b29b      	uxth	r3, r3
 800f3ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f3ee:	45c1      	cmp	r9, r8
 800f3f0:	f841 3b04 	str.w	r3, [r1], #4
 800f3f4:	ea4f 4022 	mov.w	r0, r2, asr #16
 800f3f8:	d2e6      	bcs.n	800f3c8 <quorem+0xa4>
 800f3fa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f3fe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f402:	b922      	cbnz	r2, 800f40e <quorem+0xea>
 800f404:	3b04      	subs	r3, #4
 800f406:	429d      	cmp	r5, r3
 800f408:	461a      	mov	r2, r3
 800f40a:	d30b      	bcc.n	800f424 <quorem+0x100>
 800f40c:	613c      	str	r4, [r7, #16]
 800f40e:	3601      	adds	r6, #1
 800f410:	4630      	mov	r0, r6
 800f412:	b003      	add	sp, #12
 800f414:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f418:	6812      	ldr	r2, [r2, #0]
 800f41a:	3b04      	subs	r3, #4
 800f41c:	2a00      	cmp	r2, #0
 800f41e:	d1cb      	bne.n	800f3b8 <quorem+0x94>
 800f420:	3c01      	subs	r4, #1
 800f422:	e7c6      	b.n	800f3b2 <quorem+0x8e>
 800f424:	6812      	ldr	r2, [r2, #0]
 800f426:	3b04      	subs	r3, #4
 800f428:	2a00      	cmp	r2, #0
 800f42a:	d1ef      	bne.n	800f40c <quorem+0xe8>
 800f42c:	3c01      	subs	r4, #1
 800f42e:	e7ea      	b.n	800f406 <quorem+0xe2>
 800f430:	2000      	movs	r0, #0
 800f432:	e7ee      	b.n	800f412 <quorem+0xee>
 800f434:	0000      	movs	r0, r0
	...

0800f438 <_dtoa_r>:
 800f438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f43c:	ed2d 8b02 	vpush	{d8}
 800f440:	69c7      	ldr	r7, [r0, #28]
 800f442:	b091      	sub	sp, #68	@ 0x44
 800f444:	ed8d 0b02 	vstr	d0, [sp, #8]
 800f448:	ec55 4b10 	vmov	r4, r5, d0
 800f44c:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800f44e:	9107      	str	r1, [sp, #28]
 800f450:	4681      	mov	r9, r0
 800f452:	9209      	str	r2, [sp, #36]	@ 0x24
 800f454:	930d      	str	r3, [sp, #52]	@ 0x34
 800f456:	b97f      	cbnz	r7, 800f478 <_dtoa_r+0x40>
 800f458:	2010      	movs	r0, #16
 800f45a:	f7fe f895 	bl	800d588 <malloc>
 800f45e:	4602      	mov	r2, r0
 800f460:	f8c9 001c 	str.w	r0, [r9, #28]
 800f464:	b920      	cbnz	r0, 800f470 <_dtoa_r+0x38>
 800f466:	4ba0      	ldr	r3, [pc, #640]	@ (800f6e8 <_dtoa_r+0x2b0>)
 800f468:	21ef      	movs	r1, #239	@ 0xef
 800f46a:	48a0      	ldr	r0, [pc, #640]	@ (800f6ec <_dtoa_r+0x2b4>)
 800f46c:	f002 fbb4 	bl	8011bd8 <__assert_func>
 800f470:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800f474:	6007      	str	r7, [r0, #0]
 800f476:	60c7      	str	r7, [r0, #12]
 800f478:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800f47c:	6819      	ldr	r1, [r3, #0]
 800f47e:	b159      	cbz	r1, 800f498 <_dtoa_r+0x60>
 800f480:	685a      	ldr	r2, [r3, #4]
 800f482:	604a      	str	r2, [r1, #4]
 800f484:	2301      	movs	r3, #1
 800f486:	4093      	lsls	r3, r2
 800f488:	608b      	str	r3, [r1, #8]
 800f48a:	4648      	mov	r0, r9
 800f48c:	f001 f900 	bl	8010690 <_Bfree>
 800f490:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800f494:	2200      	movs	r2, #0
 800f496:	601a      	str	r2, [r3, #0]
 800f498:	1e2b      	subs	r3, r5, #0
 800f49a:	bfbb      	ittet	lt
 800f49c:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800f4a0:	9303      	strlt	r3, [sp, #12]
 800f4a2:	2300      	movge	r3, #0
 800f4a4:	2201      	movlt	r2, #1
 800f4a6:	bfac      	ite	ge
 800f4a8:	6033      	strge	r3, [r6, #0]
 800f4aa:	6032      	strlt	r2, [r6, #0]
 800f4ac:	4b90      	ldr	r3, [pc, #576]	@ (800f6f0 <_dtoa_r+0x2b8>)
 800f4ae:	9e03      	ldr	r6, [sp, #12]
 800f4b0:	43b3      	bics	r3, r6
 800f4b2:	d110      	bne.n	800f4d6 <_dtoa_r+0x9e>
 800f4b4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f4b6:	f242 730f 	movw	r3, #9999	@ 0x270f
 800f4ba:	6013      	str	r3, [r2, #0]
 800f4bc:	f3c6 0313 	ubfx	r3, r6, #0, #20
 800f4c0:	4323      	orrs	r3, r4
 800f4c2:	f000 84de 	beq.w	800fe82 <_dtoa_r+0xa4a>
 800f4c6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800f4c8:	4f8a      	ldr	r7, [pc, #552]	@ (800f6f4 <_dtoa_r+0x2bc>)
 800f4ca:	2b00      	cmp	r3, #0
 800f4cc:	f000 84e0 	beq.w	800fe90 <_dtoa_r+0xa58>
 800f4d0:	1cfb      	adds	r3, r7, #3
 800f4d2:	f000 bcdb 	b.w	800fe8c <_dtoa_r+0xa54>
 800f4d6:	ed9d 8b02 	vldr	d8, [sp, #8]
 800f4da:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800f4de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4e2:	d10a      	bne.n	800f4fa <_dtoa_r+0xc2>
 800f4e4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f4e6:	2301      	movs	r3, #1
 800f4e8:	6013      	str	r3, [r2, #0]
 800f4ea:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800f4ec:	b113      	cbz	r3, 800f4f4 <_dtoa_r+0xbc>
 800f4ee:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800f4f0:	4b81      	ldr	r3, [pc, #516]	@ (800f6f8 <_dtoa_r+0x2c0>)
 800f4f2:	6013      	str	r3, [r2, #0]
 800f4f4:	4f81      	ldr	r7, [pc, #516]	@ (800f6fc <_dtoa_r+0x2c4>)
 800f4f6:	f000 bccb 	b.w	800fe90 <_dtoa_r+0xa58>
 800f4fa:	aa0e      	add	r2, sp, #56	@ 0x38
 800f4fc:	a90f      	add	r1, sp, #60	@ 0x3c
 800f4fe:	4648      	mov	r0, r9
 800f500:	eeb0 0b48 	vmov.f64	d0, d8
 800f504:	f001 fc68 	bl	8010dd8 <__d2b>
 800f508:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800f50c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f50e:	9001      	str	r0, [sp, #4]
 800f510:	2b00      	cmp	r3, #0
 800f512:	d045      	beq.n	800f5a0 <_dtoa_r+0x168>
 800f514:	eeb0 7b48 	vmov.f64	d7, d8
 800f518:	ee18 1a90 	vmov	r1, s17
 800f51c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800f520:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800f524:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800f528:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800f52c:	2500      	movs	r5, #0
 800f52e:	ee07 1a90 	vmov	s15, r1
 800f532:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800f536:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800f6d0 <_dtoa_r+0x298>
 800f53a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800f53e:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800f6d8 <_dtoa_r+0x2a0>
 800f542:	eea7 6b05 	vfma.f64	d6, d7, d5
 800f546:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800f6e0 <_dtoa_r+0x2a8>
 800f54a:	ee07 3a90 	vmov	s15, r3
 800f54e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800f552:	eeb0 7b46 	vmov.f64	d7, d6
 800f556:	eea4 7b05 	vfma.f64	d7, d4, d5
 800f55a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800f55e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800f562:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f566:	ee16 8a90 	vmov	r8, s13
 800f56a:	d508      	bpl.n	800f57e <_dtoa_r+0x146>
 800f56c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800f570:	eeb4 6b47 	vcmp.f64	d6, d7
 800f574:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f578:	bf18      	it	ne
 800f57a:	f108 38ff 	addne.w	r8, r8, #4294967295
 800f57e:	f1b8 0f16 	cmp.w	r8, #22
 800f582:	d82b      	bhi.n	800f5dc <_dtoa_r+0x1a4>
 800f584:	495e      	ldr	r1, [pc, #376]	@ (800f700 <_dtoa_r+0x2c8>)
 800f586:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800f58a:	ed91 7b00 	vldr	d7, [r1]
 800f58e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800f592:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f596:	d501      	bpl.n	800f59c <_dtoa_r+0x164>
 800f598:	f108 38ff 	add.w	r8, r8, #4294967295
 800f59c:	2100      	movs	r1, #0
 800f59e:	e01e      	b.n	800f5de <_dtoa_r+0x1a6>
 800f5a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f5a2:	4413      	add	r3, r2
 800f5a4:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 800f5a8:	2920      	cmp	r1, #32
 800f5aa:	bfc1      	itttt	gt
 800f5ac:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 800f5b0:	408e      	lslgt	r6, r1
 800f5b2:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800f5b6:	fa24 f101 	lsrgt.w	r1, r4, r1
 800f5ba:	bfd6      	itet	le
 800f5bc:	f1c1 0120 	rsble	r1, r1, #32
 800f5c0:	4331      	orrgt	r1, r6
 800f5c2:	fa04 f101 	lslle.w	r1, r4, r1
 800f5c6:	ee07 1a90 	vmov	s15, r1
 800f5ca:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800f5ce:	3b01      	subs	r3, #1
 800f5d0:	ee17 1a90 	vmov	r1, s15
 800f5d4:	2501      	movs	r5, #1
 800f5d6:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800f5da:	e7a8      	b.n	800f52e <_dtoa_r+0xf6>
 800f5dc:	2101      	movs	r1, #1
 800f5de:	1ad2      	subs	r2, r2, r3
 800f5e0:	1e53      	subs	r3, r2, #1
 800f5e2:	9306      	str	r3, [sp, #24]
 800f5e4:	bf45      	ittet	mi
 800f5e6:	f1c2 0301 	rsbmi	r3, r2, #1
 800f5ea:	9305      	strmi	r3, [sp, #20]
 800f5ec:	2300      	movpl	r3, #0
 800f5ee:	2300      	movmi	r3, #0
 800f5f0:	bf4c      	ite	mi
 800f5f2:	9306      	strmi	r3, [sp, #24]
 800f5f4:	9305      	strpl	r3, [sp, #20]
 800f5f6:	f1b8 0f00 	cmp.w	r8, #0
 800f5fa:	910c      	str	r1, [sp, #48]	@ 0x30
 800f5fc:	db18      	blt.n	800f630 <_dtoa_r+0x1f8>
 800f5fe:	9b06      	ldr	r3, [sp, #24]
 800f600:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800f604:	4443      	add	r3, r8
 800f606:	9306      	str	r3, [sp, #24]
 800f608:	2300      	movs	r3, #0
 800f60a:	9a07      	ldr	r2, [sp, #28]
 800f60c:	2a09      	cmp	r2, #9
 800f60e:	d849      	bhi.n	800f6a4 <_dtoa_r+0x26c>
 800f610:	2a05      	cmp	r2, #5
 800f612:	bfc4      	itt	gt
 800f614:	3a04      	subgt	r2, #4
 800f616:	9207      	strgt	r2, [sp, #28]
 800f618:	9a07      	ldr	r2, [sp, #28]
 800f61a:	f1a2 0202 	sub.w	r2, r2, #2
 800f61e:	bfcc      	ite	gt
 800f620:	2400      	movgt	r4, #0
 800f622:	2401      	movle	r4, #1
 800f624:	2a03      	cmp	r2, #3
 800f626:	d848      	bhi.n	800f6ba <_dtoa_r+0x282>
 800f628:	e8df f002 	tbb	[pc, r2]
 800f62c:	3a2c2e0b 	.word	0x3a2c2e0b
 800f630:	9b05      	ldr	r3, [sp, #20]
 800f632:	2200      	movs	r2, #0
 800f634:	eba3 0308 	sub.w	r3, r3, r8
 800f638:	9305      	str	r3, [sp, #20]
 800f63a:	920a      	str	r2, [sp, #40]	@ 0x28
 800f63c:	f1c8 0300 	rsb	r3, r8, #0
 800f640:	e7e3      	b.n	800f60a <_dtoa_r+0x1d2>
 800f642:	2200      	movs	r2, #0
 800f644:	9208      	str	r2, [sp, #32]
 800f646:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f648:	2a00      	cmp	r2, #0
 800f64a:	dc39      	bgt.n	800f6c0 <_dtoa_r+0x288>
 800f64c:	f04f 0b01 	mov.w	fp, #1
 800f650:	46da      	mov	sl, fp
 800f652:	465a      	mov	r2, fp
 800f654:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800f658:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800f65c:	2100      	movs	r1, #0
 800f65e:	2004      	movs	r0, #4
 800f660:	f100 0614 	add.w	r6, r0, #20
 800f664:	4296      	cmp	r6, r2
 800f666:	d930      	bls.n	800f6ca <_dtoa_r+0x292>
 800f668:	6079      	str	r1, [r7, #4]
 800f66a:	4648      	mov	r0, r9
 800f66c:	9304      	str	r3, [sp, #16]
 800f66e:	f000 ffcf 	bl	8010610 <_Balloc>
 800f672:	9b04      	ldr	r3, [sp, #16]
 800f674:	4607      	mov	r7, r0
 800f676:	2800      	cmp	r0, #0
 800f678:	d146      	bne.n	800f708 <_dtoa_r+0x2d0>
 800f67a:	4b22      	ldr	r3, [pc, #136]	@ (800f704 <_dtoa_r+0x2cc>)
 800f67c:	4602      	mov	r2, r0
 800f67e:	f240 11af 	movw	r1, #431	@ 0x1af
 800f682:	e6f2      	b.n	800f46a <_dtoa_r+0x32>
 800f684:	2201      	movs	r2, #1
 800f686:	e7dd      	b.n	800f644 <_dtoa_r+0x20c>
 800f688:	2200      	movs	r2, #0
 800f68a:	9208      	str	r2, [sp, #32]
 800f68c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f68e:	eb08 0b02 	add.w	fp, r8, r2
 800f692:	f10b 0a01 	add.w	sl, fp, #1
 800f696:	4652      	mov	r2, sl
 800f698:	2a01      	cmp	r2, #1
 800f69a:	bfb8      	it	lt
 800f69c:	2201      	movlt	r2, #1
 800f69e:	e7db      	b.n	800f658 <_dtoa_r+0x220>
 800f6a0:	2201      	movs	r2, #1
 800f6a2:	e7f2      	b.n	800f68a <_dtoa_r+0x252>
 800f6a4:	2401      	movs	r4, #1
 800f6a6:	2200      	movs	r2, #0
 800f6a8:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800f6ac:	f04f 3bff 	mov.w	fp, #4294967295
 800f6b0:	2100      	movs	r1, #0
 800f6b2:	46da      	mov	sl, fp
 800f6b4:	2212      	movs	r2, #18
 800f6b6:	9109      	str	r1, [sp, #36]	@ 0x24
 800f6b8:	e7ce      	b.n	800f658 <_dtoa_r+0x220>
 800f6ba:	2201      	movs	r2, #1
 800f6bc:	9208      	str	r2, [sp, #32]
 800f6be:	e7f5      	b.n	800f6ac <_dtoa_r+0x274>
 800f6c0:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 800f6c4:	46da      	mov	sl, fp
 800f6c6:	465a      	mov	r2, fp
 800f6c8:	e7c6      	b.n	800f658 <_dtoa_r+0x220>
 800f6ca:	3101      	adds	r1, #1
 800f6cc:	0040      	lsls	r0, r0, #1
 800f6ce:	e7c7      	b.n	800f660 <_dtoa_r+0x228>
 800f6d0:	636f4361 	.word	0x636f4361
 800f6d4:	3fd287a7 	.word	0x3fd287a7
 800f6d8:	8b60c8b3 	.word	0x8b60c8b3
 800f6dc:	3fc68a28 	.word	0x3fc68a28
 800f6e0:	509f79fb 	.word	0x509f79fb
 800f6e4:	3fd34413 	.word	0x3fd34413
 800f6e8:	08012744 	.word	0x08012744
 800f6ec:	0801275b 	.word	0x0801275b
 800f6f0:	7ff00000 	.word	0x7ff00000
 800f6f4:	08012740 	.word	0x08012740
 800f6f8:	08012aa9 	.word	0x08012aa9
 800f6fc:	08012aa8 	.word	0x08012aa8
 800f700:	080128b8 	.word	0x080128b8
 800f704:	080127b3 	.word	0x080127b3
 800f708:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800f70c:	f1ba 0f0e 	cmp.w	sl, #14
 800f710:	6010      	str	r0, [r2, #0]
 800f712:	d86f      	bhi.n	800f7f4 <_dtoa_r+0x3bc>
 800f714:	2c00      	cmp	r4, #0
 800f716:	d06d      	beq.n	800f7f4 <_dtoa_r+0x3bc>
 800f718:	f1b8 0f00 	cmp.w	r8, #0
 800f71c:	f340 80c2 	ble.w	800f8a4 <_dtoa_r+0x46c>
 800f720:	4aca      	ldr	r2, [pc, #808]	@ (800fa4c <_dtoa_r+0x614>)
 800f722:	f008 010f 	and.w	r1, r8, #15
 800f726:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800f72a:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800f72e:	ed92 7b00 	vldr	d7, [r2]
 800f732:	ea4f 1128 	mov.w	r1, r8, asr #4
 800f736:	f000 80a9 	beq.w	800f88c <_dtoa_r+0x454>
 800f73a:	4ac5      	ldr	r2, [pc, #788]	@ (800fa50 <_dtoa_r+0x618>)
 800f73c:	ed92 6b08 	vldr	d6, [r2, #32]
 800f740:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800f744:	ed8d 6b02 	vstr	d6, [sp, #8]
 800f748:	f001 010f 	and.w	r1, r1, #15
 800f74c:	2203      	movs	r2, #3
 800f74e:	48c0      	ldr	r0, [pc, #768]	@ (800fa50 <_dtoa_r+0x618>)
 800f750:	2900      	cmp	r1, #0
 800f752:	f040 809d 	bne.w	800f890 <_dtoa_r+0x458>
 800f756:	ed9d 6b02 	vldr	d6, [sp, #8]
 800f75a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800f75e:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f762:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800f764:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f768:	2900      	cmp	r1, #0
 800f76a:	f000 80c1 	beq.w	800f8f0 <_dtoa_r+0x4b8>
 800f76e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800f772:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800f776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f77a:	f140 80b9 	bpl.w	800f8f0 <_dtoa_r+0x4b8>
 800f77e:	f1ba 0f00 	cmp.w	sl, #0
 800f782:	f000 80b5 	beq.w	800f8f0 <_dtoa_r+0x4b8>
 800f786:	f1bb 0f00 	cmp.w	fp, #0
 800f78a:	dd31      	ble.n	800f7f0 <_dtoa_r+0x3b8>
 800f78c:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800f790:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f794:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f798:	f108 31ff 	add.w	r1, r8, #4294967295
 800f79c:	9104      	str	r1, [sp, #16]
 800f79e:	3201      	adds	r2, #1
 800f7a0:	465c      	mov	r4, fp
 800f7a2:	ed9d 6b02 	vldr	d6, [sp, #8]
 800f7a6:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800f7aa:	ee07 2a90 	vmov	s15, r2
 800f7ae:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800f7b2:	eea7 5b06 	vfma.f64	d5, d7, d6
 800f7b6:	ee15 2a90 	vmov	r2, s11
 800f7ba:	ec51 0b15 	vmov	r0, r1, d5
 800f7be:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800f7c2:	2c00      	cmp	r4, #0
 800f7c4:	f040 8098 	bne.w	800f8f8 <_dtoa_r+0x4c0>
 800f7c8:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800f7cc:	ee36 6b47 	vsub.f64	d6, d6, d7
 800f7d0:	ec41 0b17 	vmov	d7, r0, r1
 800f7d4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f7d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f7dc:	f300 8261 	bgt.w	800fca2 <_dtoa_r+0x86a>
 800f7e0:	eeb1 7b47 	vneg.f64	d7, d7
 800f7e4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f7e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f7ec:	f100 80f5 	bmi.w	800f9da <_dtoa_r+0x5a2>
 800f7f0:	ed8d 8b02 	vstr	d8, [sp, #8]
 800f7f4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800f7f6:	2a00      	cmp	r2, #0
 800f7f8:	f2c0 812c 	blt.w	800fa54 <_dtoa_r+0x61c>
 800f7fc:	f1b8 0f0e 	cmp.w	r8, #14
 800f800:	f300 8128 	bgt.w	800fa54 <_dtoa_r+0x61c>
 800f804:	4b91      	ldr	r3, [pc, #580]	@ (800fa4c <_dtoa_r+0x614>)
 800f806:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800f80a:	ed93 6b00 	vldr	d6, [r3]
 800f80e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f810:	2b00      	cmp	r3, #0
 800f812:	da03      	bge.n	800f81c <_dtoa_r+0x3e4>
 800f814:	f1ba 0f00 	cmp.w	sl, #0
 800f818:	f340 80d2 	ble.w	800f9c0 <_dtoa_r+0x588>
 800f81c:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 800f820:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f824:	463e      	mov	r6, r7
 800f826:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800f82a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800f82e:	ee15 3a10 	vmov	r3, s10
 800f832:	3330      	adds	r3, #48	@ 0x30
 800f834:	f806 3b01 	strb.w	r3, [r6], #1
 800f838:	1bf3      	subs	r3, r6, r7
 800f83a:	459a      	cmp	sl, r3
 800f83c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800f840:	eea3 7b46 	vfms.f64	d7, d3, d6
 800f844:	f040 80f8 	bne.w	800fa38 <_dtoa_r+0x600>
 800f848:	ee37 7b07 	vadd.f64	d7, d7, d7
 800f84c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800f850:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f854:	f300 80dd 	bgt.w	800fa12 <_dtoa_r+0x5da>
 800f858:	eeb4 7b46 	vcmp.f64	d7, d6
 800f85c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f860:	d104      	bne.n	800f86c <_dtoa_r+0x434>
 800f862:	ee15 3a10 	vmov	r3, s10
 800f866:	07db      	lsls	r3, r3, #31
 800f868:	f100 80d3 	bmi.w	800fa12 <_dtoa_r+0x5da>
 800f86c:	9901      	ldr	r1, [sp, #4]
 800f86e:	4648      	mov	r0, r9
 800f870:	f000 ff0e 	bl	8010690 <_Bfree>
 800f874:	2300      	movs	r3, #0
 800f876:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f878:	7033      	strb	r3, [r6, #0]
 800f87a:	f108 0301 	add.w	r3, r8, #1
 800f87e:	6013      	str	r3, [r2, #0]
 800f880:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800f882:	2b00      	cmp	r3, #0
 800f884:	f000 8304 	beq.w	800fe90 <_dtoa_r+0xa58>
 800f888:	601e      	str	r6, [r3, #0]
 800f88a:	e301      	b.n	800fe90 <_dtoa_r+0xa58>
 800f88c:	2202      	movs	r2, #2
 800f88e:	e75e      	b.n	800f74e <_dtoa_r+0x316>
 800f890:	07cc      	lsls	r4, r1, #31
 800f892:	d504      	bpl.n	800f89e <_dtoa_r+0x466>
 800f894:	ed90 6b00 	vldr	d6, [r0]
 800f898:	3201      	adds	r2, #1
 800f89a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f89e:	1049      	asrs	r1, r1, #1
 800f8a0:	3008      	adds	r0, #8
 800f8a2:	e755      	b.n	800f750 <_dtoa_r+0x318>
 800f8a4:	d022      	beq.n	800f8ec <_dtoa_r+0x4b4>
 800f8a6:	f1c8 0100 	rsb	r1, r8, #0
 800f8aa:	4a68      	ldr	r2, [pc, #416]	@ (800fa4c <_dtoa_r+0x614>)
 800f8ac:	f001 000f 	and.w	r0, r1, #15
 800f8b0:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800f8b4:	ed92 7b00 	vldr	d7, [r2]
 800f8b8:	ee28 7b07 	vmul.f64	d7, d8, d7
 800f8bc:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f8c0:	4863      	ldr	r0, [pc, #396]	@ (800fa50 <_dtoa_r+0x618>)
 800f8c2:	1109      	asrs	r1, r1, #4
 800f8c4:	2400      	movs	r4, #0
 800f8c6:	2202      	movs	r2, #2
 800f8c8:	b929      	cbnz	r1, 800f8d6 <_dtoa_r+0x49e>
 800f8ca:	2c00      	cmp	r4, #0
 800f8cc:	f43f af49 	beq.w	800f762 <_dtoa_r+0x32a>
 800f8d0:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f8d4:	e745      	b.n	800f762 <_dtoa_r+0x32a>
 800f8d6:	07ce      	lsls	r6, r1, #31
 800f8d8:	d505      	bpl.n	800f8e6 <_dtoa_r+0x4ae>
 800f8da:	ed90 6b00 	vldr	d6, [r0]
 800f8de:	3201      	adds	r2, #1
 800f8e0:	2401      	movs	r4, #1
 800f8e2:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f8e6:	1049      	asrs	r1, r1, #1
 800f8e8:	3008      	adds	r0, #8
 800f8ea:	e7ed      	b.n	800f8c8 <_dtoa_r+0x490>
 800f8ec:	2202      	movs	r2, #2
 800f8ee:	e738      	b.n	800f762 <_dtoa_r+0x32a>
 800f8f0:	f8cd 8010 	str.w	r8, [sp, #16]
 800f8f4:	4654      	mov	r4, sl
 800f8f6:	e754      	b.n	800f7a2 <_dtoa_r+0x36a>
 800f8f8:	4a54      	ldr	r2, [pc, #336]	@ (800fa4c <_dtoa_r+0x614>)
 800f8fa:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800f8fe:	ed12 4b02 	vldr	d4, [r2, #-8]
 800f902:	9a08      	ldr	r2, [sp, #32]
 800f904:	ec41 0b17 	vmov	d7, r0, r1
 800f908:	443c      	add	r4, r7
 800f90a:	b34a      	cbz	r2, 800f960 <_dtoa_r+0x528>
 800f90c:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 800f910:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 800f914:	463e      	mov	r6, r7
 800f916:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800f91a:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800f91e:	ee35 7b47 	vsub.f64	d7, d5, d7
 800f922:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800f926:	ee14 2a90 	vmov	r2, s9
 800f92a:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800f92e:	3230      	adds	r2, #48	@ 0x30
 800f930:	ee36 6b45 	vsub.f64	d6, d6, d5
 800f934:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f938:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f93c:	f806 2b01 	strb.w	r2, [r6], #1
 800f940:	d438      	bmi.n	800f9b4 <_dtoa_r+0x57c>
 800f942:	ee32 5b46 	vsub.f64	d5, d2, d6
 800f946:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800f94a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f94e:	d462      	bmi.n	800fa16 <_dtoa_r+0x5de>
 800f950:	42a6      	cmp	r6, r4
 800f952:	f43f af4d 	beq.w	800f7f0 <_dtoa_r+0x3b8>
 800f956:	ee27 7b03 	vmul.f64	d7, d7, d3
 800f95a:	ee26 6b03 	vmul.f64	d6, d6, d3
 800f95e:	e7e0      	b.n	800f922 <_dtoa_r+0x4ea>
 800f960:	4621      	mov	r1, r4
 800f962:	463e      	mov	r6, r7
 800f964:	ee27 7b04 	vmul.f64	d7, d7, d4
 800f968:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800f96c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800f970:	ee14 2a90 	vmov	r2, s9
 800f974:	3230      	adds	r2, #48	@ 0x30
 800f976:	f806 2b01 	strb.w	r2, [r6], #1
 800f97a:	42a6      	cmp	r6, r4
 800f97c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800f980:	ee36 6b45 	vsub.f64	d6, d6, d5
 800f984:	d119      	bne.n	800f9ba <_dtoa_r+0x582>
 800f986:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 800f98a:	ee37 4b05 	vadd.f64	d4, d7, d5
 800f98e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800f992:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f996:	dc3e      	bgt.n	800fa16 <_dtoa_r+0x5de>
 800f998:	ee35 5b47 	vsub.f64	d5, d5, d7
 800f99c:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800f9a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f9a4:	f57f af24 	bpl.w	800f7f0 <_dtoa_r+0x3b8>
 800f9a8:	460e      	mov	r6, r1
 800f9aa:	3901      	subs	r1, #1
 800f9ac:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800f9b0:	2b30      	cmp	r3, #48	@ 0x30
 800f9b2:	d0f9      	beq.n	800f9a8 <_dtoa_r+0x570>
 800f9b4:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800f9b8:	e758      	b.n	800f86c <_dtoa_r+0x434>
 800f9ba:	ee26 6b03 	vmul.f64	d6, d6, d3
 800f9be:	e7d5      	b.n	800f96c <_dtoa_r+0x534>
 800f9c0:	d10b      	bne.n	800f9da <_dtoa_r+0x5a2>
 800f9c2:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800f9c6:	ee26 6b07 	vmul.f64	d6, d6, d7
 800f9ca:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f9ce:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f9d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f9d6:	f2c0 8161 	blt.w	800fc9c <_dtoa_r+0x864>
 800f9da:	2400      	movs	r4, #0
 800f9dc:	4625      	mov	r5, r4
 800f9de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f9e0:	43db      	mvns	r3, r3
 800f9e2:	9304      	str	r3, [sp, #16]
 800f9e4:	463e      	mov	r6, r7
 800f9e6:	f04f 0800 	mov.w	r8, #0
 800f9ea:	4621      	mov	r1, r4
 800f9ec:	4648      	mov	r0, r9
 800f9ee:	f000 fe4f 	bl	8010690 <_Bfree>
 800f9f2:	2d00      	cmp	r5, #0
 800f9f4:	d0de      	beq.n	800f9b4 <_dtoa_r+0x57c>
 800f9f6:	f1b8 0f00 	cmp.w	r8, #0
 800f9fa:	d005      	beq.n	800fa08 <_dtoa_r+0x5d0>
 800f9fc:	45a8      	cmp	r8, r5
 800f9fe:	d003      	beq.n	800fa08 <_dtoa_r+0x5d0>
 800fa00:	4641      	mov	r1, r8
 800fa02:	4648      	mov	r0, r9
 800fa04:	f000 fe44 	bl	8010690 <_Bfree>
 800fa08:	4629      	mov	r1, r5
 800fa0a:	4648      	mov	r0, r9
 800fa0c:	f000 fe40 	bl	8010690 <_Bfree>
 800fa10:	e7d0      	b.n	800f9b4 <_dtoa_r+0x57c>
 800fa12:	f8cd 8010 	str.w	r8, [sp, #16]
 800fa16:	4633      	mov	r3, r6
 800fa18:	461e      	mov	r6, r3
 800fa1a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fa1e:	2a39      	cmp	r2, #57	@ 0x39
 800fa20:	d106      	bne.n	800fa30 <_dtoa_r+0x5f8>
 800fa22:	429f      	cmp	r7, r3
 800fa24:	d1f8      	bne.n	800fa18 <_dtoa_r+0x5e0>
 800fa26:	9a04      	ldr	r2, [sp, #16]
 800fa28:	3201      	adds	r2, #1
 800fa2a:	9204      	str	r2, [sp, #16]
 800fa2c:	2230      	movs	r2, #48	@ 0x30
 800fa2e:	703a      	strb	r2, [r7, #0]
 800fa30:	781a      	ldrb	r2, [r3, #0]
 800fa32:	3201      	adds	r2, #1
 800fa34:	701a      	strb	r2, [r3, #0]
 800fa36:	e7bd      	b.n	800f9b4 <_dtoa_r+0x57c>
 800fa38:	ee27 7b04 	vmul.f64	d7, d7, d4
 800fa3c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800fa40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa44:	f47f aeef 	bne.w	800f826 <_dtoa_r+0x3ee>
 800fa48:	e710      	b.n	800f86c <_dtoa_r+0x434>
 800fa4a:	bf00      	nop
 800fa4c:	080128b8 	.word	0x080128b8
 800fa50:	08012890 	.word	0x08012890
 800fa54:	9908      	ldr	r1, [sp, #32]
 800fa56:	2900      	cmp	r1, #0
 800fa58:	f000 80e3 	beq.w	800fc22 <_dtoa_r+0x7ea>
 800fa5c:	9907      	ldr	r1, [sp, #28]
 800fa5e:	2901      	cmp	r1, #1
 800fa60:	f300 80c8 	bgt.w	800fbf4 <_dtoa_r+0x7bc>
 800fa64:	2d00      	cmp	r5, #0
 800fa66:	f000 80c1 	beq.w	800fbec <_dtoa_r+0x7b4>
 800fa6a:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800fa6e:	9e05      	ldr	r6, [sp, #20]
 800fa70:	461c      	mov	r4, r3
 800fa72:	9304      	str	r3, [sp, #16]
 800fa74:	9b05      	ldr	r3, [sp, #20]
 800fa76:	4413      	add	r3, r2
 800fa78:	9305      	str	r3, [sp, #20]
 800fa7a:	9b06      	ldr	r3, [sp, #24]
 800fa7c:	2101      	movs	r1, #1
 800fa7e:	4413      	add	r3, r2
 800fa80:	4648      	mov	r0, r9
 800fa82:	9306      	str	r3, [sp, #24]
 800fa84:	f000 ff02 	bl	801088c <__i2b>
 800fa88:	9b04      	ldr	r3, [sp, #16]
 800fa8a:	4605      	mov	r5, r0
 800fa8c:	b166      	cbz	r6, 800faa8 <_dtoa_r+0x670>
 800fa8e:	9a06      	ldr	r2, [sp, #24]
 800fa90:	2a00      	cmp	r2, #0
 800fa92:	dd09      	ble.n	800faa8 <_dtoa_r+0x670>
 800fa94:	42b2      	cmp	r2, r6
 800fa96:	9905      	ldr	r1, [sp, #20]
 800fa98:	bfa8      	it	ge
 800fa9a:	4632      	movge	r2, r6
 800fa9c:	1a89      	subs	r1, r1, r2
 800fa9e:	9105      	str	r1, [sp, #20]
 800faa0:	9906      	ldr	r1, [sp, #24]
 800faa2:	1ab6      	subs	r6, r6, r2
 800faa4:	1a8a      	subs	r2, r1, r2
 800faa6:	9206      	str	r2, [sp, #24]
 800faa8:	b1fb      	cbz	r3, 800faea <_dtoa_r+0x6b2>
 800faaa:	9a08      	ldr	r2, [sp, #32]
 800faac:	2a00      	cmp	r2, #0
 800faae:	f000 80bc 	beq.w	800fc2a <_dtoa_r+0x7f2>
 800fab2:	b19c      	cbz	r4, 800fadc <_dtoa_r+0x6a4>
 800fab4:	4629      	mov	r1, r5
 800fab6:	4622      	mov	r2, r4
 800fab8:	4648      	mov	r0, r9
 800faba:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fabc:	f000 ffa6 	bl	8010a0c <__pow5mult>
 800fac0:	9a01      	ldr	r2, [sp, #4]
 800fac2:	4601      	mov	r1, r0
 800fac4:	4605      	mov	r5, r0
 800fac6:	4648      	mov	r0, r9
 800fac8:	f000 fef6 	bl	80108b8 <__multiply>
 800facc:	9901      	ldr	r1, [sp, #4]
 800face:	9004      	str	r0, [sp, #16]
 800fad0:	4648      	mov	r0, r9
 800fad2:	f000 fddd 	bl	8010690 <_Bfree>
 800fad6:	9a04      	ldr	r2, [sp, #16]
 800fad8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fada:	9201      	str	r2, [sp, #4]
 800fadc:	1b1a      	subs	r2, r3, r4
 800fade:	d004      	beq.n	800faea <_dtoa_r+0x6b2>
 800fae0:	9901      	ldr	r1, [sp, #4]
 800fae2:	4648      	mov	r0, r9
 800fae4:	f000 ff92 	bl	8010a0c <__pow5mult>
 800fae8:	9001      	str	r0, [sp, #4]
 800faea:	2101      	movs	r1, #1
 800faec:	4648      	mov	r0, r9
 800faee:	f000 fecd 	bl	801088c <__i2b>
 800faf2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800faf4:	4604      	mov	r4, r0
 800faf6:	2b00      	cmp	r3, #0
 800faf8:	f000 81d0 	beq.w	800fe9c <_dtoa_r+0xa64>
 800fafc:	461a      	mov	r2, r3
 800fafe:	4601      	mov	r1, r0
 800fb00:	4648      	mov	r0, r9
 800fb02:	f000 ff83 	bl	8010a0c <__pow5mult>
 800fb06:	9b07      	ldr	r3, [sp, #28]
 800fb08:	2b01      	cmp	r3, #1
 800fb0a:	4604      	mov	r4, r0
 800fb0c:	f300 8095 	bgt.w	800fc3a <_dtoa_r+0x802>
 800fb10:	9b02      	ldr	r3, [sp, #8]
 800fb12:	2b00      	cmp	r3, #0
 800fb14:	f040 808b 	bne.w	800fc2e <_dtoa_r+0x7f6>
 800fb18:	9b03      	ldr	r3, [sp, #12]
 800fb1a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800fb1e:	2a00      	cmp	r2, #0
 800fb20:	f040 8087 	bne.w	800fc32 <_dtoa_r+0x7fa>
 800fb24:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800fb28:	0d12      	lsrs	r2, r2, #20
 800fb2a:	0512      	lsls	r2, r2, #20
 800fb2c:	2a00      	cmp	r2, #0
 800fb2e:	f000 8082 	beq.w	800fc36 <_dtoa_r+0x7fe>
 800fb32:	9b05      	ldr	r3, [sp, #20]
 800fb34:	3301      	adds	r3, #1
 800fb36:	9305      	str	r3, [sp, #20]
 800fb38:	9b06      	ldr	r3, [sp, #24]
 800fb3a:	3301      	adds	r3, #1
 800fb3c:	9306      	str	r3, [sp, #24]
 800fb3e:	2301      	movs	r3, #1
 800fb40:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fb42:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fb44:	2b00      	cmp	r3, #0
 800fb46:	f000 81af 	beq.w	800fea8 <_dtoa_r+0xa70>
 800fb4a:	6922      	ldr	r2, [r4, #16]
 800fb4c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800fb50:	6910      	ldr	r0, [r2, #16]
 800fb52:	f000 fe4f 	bl	80107f4 <__hi0bits>
 800fb56:	f1c0 0020 	rsb	r0, r0, #32
 800fb5a:	9b06      	ldr	r3, [sp, #24]
 800fb5c:	4418      	add	r0, r3
 800fb5e:	f010 001f 	ands.w	r0, r0, #31
 800fb62:	d076      	beq.n	800fc52 <_dtoa_r+0x81a>
 800fb64:	f1c0 0220 	rsb	r2, r0, #32
 800fb68:	2a04      	cmp	r2, #4
 800fb6a:	dd69      	ble.n	800fc40 <_dtoa_r+0x808>
 800fb6c:	9b05      	ldr	r3, [sp, #20]
 800fb6e:	f1c0 001c 	rsb	r0, r0, #28
 800fb72:	4403      	add	r3, r0
 800fb74:	9305      	str	r3, [sp, #20]
 800fb76:	9b06      	ldr	r3, [sp, #24]
 800fb78:	4406      	add	r6, r0
 800fb7a:	4403      	add	r3, r0
 800fb7c:	9306      	str	r3, [sp, #24]
 800fb7e:	9b05      	ldr	r3, [sp, #20]
 800fb80:	2b00      	cmp	r3, #0
 800fb82:	dd05      	ble.n	800fb90 <_dtoa_r+0x758>
 800fb84:	9901      	ldr	r1, [sp, #4]
 800fb86:	461a      	mov	r2, r3
 800fb88:	4648      	mov	r0, r9
 800fb8a:	f000 ff99 	bl	8010ac0 <__lshift>
 800fb8e:	9001      	str	r0, [sp, #4]
 800fb90:	9b06      	ldr	r3, [sp, #24]
 800fb92:	2b00      	cmp	r3, #0
 800fb94:	dd05      	ble.n	800fba2 <_dtoa_r+0x76a>
 800fb96:	4621      	mov	r1, r4
 800fb98:	461a      	mov	r2, r3
 800fb9a:	4648      	mov	r0, r9
 800fb9c:	f000 ff90 	bl	8010ac0 <__lshift>
 800fba0:	4604      	mov	r4, r0
 800fba2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fba4:	2b00      	cmp	r3, #0
 800fba6:	d056      	beq.n	800fc56 <_dtoa_r+0x81e>
 800fba8:	9801      	ldr	r0, [sp, #4]
 800fbaa:	4621      	mov	r1, r4
 800fbac:	f000 fff4 	bl	8010b98 <__mcmp>
 800fbb0:	2800      	cmp	r0, #0
 800fbb2:	da50      	bge.n	800fc56 <_dtoa_r+0x81e>
 800fbb4:	f108 33ff 	add.w	r3, r8, #4294967295
 800fbb8:	9304      	str	r3, [sp, #16]
 800fbba:	9901      	ldr	r1, [sp, #4]
 800fbbc:	2300      	movs	r3, #0
 800fbbe:	220a      	movs	r2, #10
 800fbc0:	4648      	mov	r0, r9
 800fbc2:	f000 fd87 	bl	80106d4 <__multadd>
 800fbc6:	9b08      	ldr	r3, [sp, #32]
 800fbc8:	9001      	str	r0, [sp, #4]
 800fbca:	2b00      	cmp	r3, #0
 800fbcc:	f000 816e 	beq.w	800feac <_dtoa_r+0xa74>
 800fbd0:	4629      	mov	r1, r5
 800fbd2:	2300      	movs	r3, #0
 800fbd4:	220a      	movs	r2, #10
 800fbd6:	4648      	mov	r0, r9
 800fbd8:	f000 fd7c 	bl	80106d4 <__multadd>
 800fbdc:	f1bb 0f00 	cmp.w	fp, #0
 800fbe0:	4605      	mov	r5, r0
 800fbe2:	dc64      	bgt.n	800fcae <_dtoa_r+0x876>
 800fbe4:	9b07      	ldr	r3, [sp, #28]
 800fbe6:	2b02      	cmp	r3, #2
 800fbe8:	dc3e      	bgt.n	800fc68 <_dtoa_r+0x830>
 800fbea:	e060      	b.n	800fcae <_dtoa_r+0x876>
 800fbec:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800fbee:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800fbf2:	e73c      	b.n	800fa6e <_dtoa_r+0x636>
 800fbf4:	f10a 34ff 	add.w	r4, sl, #4294967295
 800fbf8:	42a3      	cmp	r3, r4
 800fbfa:	bfbf      	itttt	lt
 800fbfc:	1ae2      	sublt	r2, r4, r3
 800fbfe:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800fc00:	189b      	addlt	r3, r3, r2
 800fc02:	930a      	strlt	r3, [sp, #40]	@ 0x28
 800fc04:	bfae      	itee	ge
 800fc06:	1b1c      	subge	r4, r3, r4
 800fc08:	4623      	movlt	r3, r4
 800fc0a:	2400      	movlt	r4, #0
 800fc0c:	f1ba 0f00 	cmp.w	sl, #0
 800fc10:	bfb5      	itete	lt
 800fc12:	9a05      	ldrlt	r2, [sp, #20]
 800fc14:	9e05      	ldrge	r6, [sp, #20]
 800fc16:	eba2 060a 	sublt.w	r6, r2, sl
 800fc1a:	4652      	movge	r2, sl
 800fc1c:	bfb8      	it	lt
 800fc1e:	2200      	movlt	r2, #0
 800fc20:	e727      	b.n	800fa72 <_dtoa_r+0x63a>
 800fc22:	9e05      	ldr	r6, [sp, #20]
 800fc24:	9d08      	ldr	r5, [sp, #32]
 800fc26:	461c      	mov	r4, r3
 800fc28:	e730      	b.n	800fa8c <_dtoa_r+0x654>
 800fc2a:	461a      	mov	r2, r3
 800fc2c:	e758      	b.n	800fae0 <_dtoa_r+0x6a8>
 800fc2e:	2300      	movs	r3, #0
 800fc30:	e786      	b.n	800fb40 <_dtoa_r+0x708>
 800fc32:	9b02      	ldr	r3, [sp, #8]
 800fc34:	e784      	b.n	800fb40 <_dtoa_r+0x708>
 800fc36:	920b      	str	r2, [sp, #44]	@ 0x2c
 800fc38:	e783      	b.n	800fb42 <_dtoa_r+0x70a>
 800fc3a:	2300      	movs	r3, #0
 800fc3c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fc3e:	e784      	b.n	800fb4a <_dtoa_r+0x712>
 800fc40:	d09d      	beq.n	800fb7e <_dtoa_r+0x746>
 800fc42:	9b05      	ldr	r3, [sp, #20]
 800fc44:	321c      	adds	r2, #28
 800fc46:	4413      	add	r3, r2
 800fc48:	9305      	str	r3, [sp, #20]
 800fc4a:	9b06      	ldr	r3, [sp, #24]
 800fc4c:	4416      	add	r6, r2
 800fc4e:	4413      	add	r3, r2
 800fc50:	e794      	b.n	800fb7c <_dtoa_r+0x744>
 800fc52:	4602      	mov	r2, r0
 800fc54:	e7f5      	b.n	800fc42 <_dtoa_r+0x80a>
 800fc56:	f1ba 0f00 	cmp.w	sl, #0
 800fc5a:	f8cd 8010 	str.w	r8, [sp, #16]
 800fc5e:	46d3      	mov	fp, sl
 800fc60:	dc21      	bgt.n	800fca6 <_dtoa_r+0x86e>
 800fc62:	9b07      	ldr	r3, [sp, #28]
 800fc64:	2b02      	cmp	r3, #2
 800fc66:	dd1e      	ble.n	800fca6 <_dtoa_r+0x86e>
 800fc68:	f1bb 0f00 	cmp.w	fp, #0
 800fc6c:	f47f aeb7 	bne.w	800f9de <_dtoa_r+0x5a6>
 800fc70:	4621      	mov	r1, r4
 800fc72:	465b      	mov	r3, fp
 800fc74:	2205      	movs	r2, #5
 800fc76:	4648      	mov	r0, r9
 800fc78:	f000 fd2c 	bl	80106d4 <__multadd>
 800fc7c:	4601      	mov	r1, r0
 800fc7e:	4604      	mov	r4, r0
 800fc80:	9801      	ldr	r0, [sp, #4]
 800fc82:	f000 ff89 	bl	8010b98 <__mcmp>
 800fc86:	2800      	cmp	r0, #0
 800fc88:	f77f aea9 	ble.w	800f9de <_dtoa_r+0x5a6>
 800fc8c:	463e      	mov	r6, r7
 800fc8e:	2331      	movs	r3, #49	@ 0x31
 800fc90:	f806 3b01 	strb.w	r3, [r6], #1
 800fc94:	9b04      	ldr	r3, [sp, #16]
 800fc96:	3301      	adds	r3, #1
 800fc98:	9304      	str	r3, [sp, #16]
 800fc9a:	e6a4      	b.n	800f9e6 <_dtoa_r+0x5ae>
 800fc9c:	f8cd 8010 	str.w	r8, [sp, #16]
 800fca0:	4654      	mov	r4, sl
 800fca2:	4625      	mov	r5, r4
 800fca4:	e7f2      	b.n	800fc8c <_dtoa_r+0x854>
 800fca6:	9b08      	ldr	r3, [sp, #32]
 800fca8:	2b00      	cmp	r3, #0
 800fcaa:	f000 8103 	beq.w	800feb4 <_dtoa_r+0xa7c>
 800fcae:	2e00      	cmp	r6, #0
 800fcb0:	dd05      	ble.n	800fcbe <_dtoa_r+0x886>
 800fcb2:	4629      	mov	r1, r5
 800fcb4:	4632      	mov	r2, r6
 800fcb6:	4648      	mov	r0, r9
 800fcb8:	f000 ff02 	bl	8010ac0 <__lshift>
 800fcbc:	4605      	mov	r5, r0
 800fcbe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fcc0:	2b00      	cmp	r3, #0
 800fcc2:	d058      	beq.n	800fd76 <_dtoa_r+0x93e>
 800fcc4:	6869      	ldr	r1, [r5, #4]
 800fcc6:	4648      	mov	r0, r9
 800fcc8:	f000 fca2 	bl	8010610 <_Balloc>
 800fccc:	4606      	mov	r6, r0
 800fcce:	b928      	cbnz	r0, 800fcdc <_dtoa_r+0x8a4>
 800fcd0:	4b82      	ldr	r3, [pc, #520]	@ (800fedc <_dtoa_r+0xaa4>)
 800fcd2:	4602      	mov	r2, r0
 800fcd4:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800fcd8:	f7ff bbc7 	b.w	800f46a <_dtoa_r+0x32>
 800fcdc:	692a      	ldr	r2, [r5, #16]
 800fcde:	3202      	adds	r2, #2
 800fce0:	0092      	lsls	r2, r2, #2
 800fce2:	f105 010c 	add.w	r1, r5, #12
 800fce6:	300c      	adds	r0, #12
 800fce8:	f7ff fafd 	bl	800f2e6 <memcpy>
 800fcec:	2201      	movs	r2, #1
 800fcee:	4631      	mov	r1, r6
 800fcf0:	4648      	mov	r0, r9
 800fcf2:	f000 fee5 	bl	8010ac0 <__lshift>
 800fcf6:	1c7b      	adds	r3, r7, #1
 800fcf8:	9305      	str	r3, [sp, #20]
 800fcfa:	eb07 030b 	add.w	r3, r7, fp
 800fcfe:	9309      	str	r3, [sp, #36]	@ 0x24
 800fd00:	9b02      	ldr	r3, [sp, #8]
 800fd02:	f003 0301 	and.w	r3, r3, #1
 800fd06:	46a8      	mov	r8, r5
 800fd08:	9308      	str	r3, [sp, #32]
 800fd0a:	4605      	mov	r5, r0
 800fd0c:	9b05      	ldr	r3, [sp, #20]
 800fd0e:	9801      	ldr	r0, [sp, #4]
 800fd10:	4621      	mov	r1, r4
 800fd12:	f103 3bff 	add.w	fp, r3, #4294967295
 800fd16:	f7ff fb05 	bl	800f324 <quorem>
 800fd1a:	4641      	mov	r1, r8
 800fd1c:	9002      	str	r0, [sp, #8]
 800fd1e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800fd22:	9801      	ldr	r0, [sp, #4]
 800fd24:	f000 ff38 	bl	8010b98 <__mcmp>
 800fd28:	462a      	mov	r2, r5
 800fd2a:	9006      	str	r0, [sp, #24]
 800fd2c:	4621      	mov	r1, r4
 800fd2e:	4648      	mov	r0, r9
 800fd30:	f000 ff4e 	bl	8010bd0 <__mdiff>
 800fd34:	68c2      	ldr	r2, [r0, #12]
 800fd36:	4606      	mov	r6, r0
 800fd38:	b9fa      	cbnz	r2, 800fd7a <_dtoa_r+0x942>
 800fd3a:	4601      	mov	r1, r0
 800fd3c:	9801      	ldr	r0, [sp, #4]
 800fd3e:	f000 ff2b 	bl	8010b98 <__mcmp>
 800fd42:	4602      	mov	r2, r0
 800fd44:	4631      	mov	r1, r6
 800fd46:	4648      	mov	r0, r9
 800fd48:	920a      	str	r2, [sp, #40]	@ 0x28
 800fd4a:	f000 fca1 	bl	8010690 <_Bfree>
 800fd4e:	9b07      	ldr	r3, [sp, #28]
 800fd50:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800fd52:	9e05      	ldr	r6, [sp, #20]
 800fd54:	ea43 0102 	orr.w	r1, r3, r2
 800fd58:	9b08      	ldr	r3, [sp, #32]
 800fd5a:	4319      	orrs	r1, r3
 800fd5c:	d10f      	bne.n	800fd7e <_dtoa_r+0x946>
 800fd5e:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800fd62:	d028      	beq.n	800fdb6 <_dtoa_r+0x97e>
 800fd64:	9b06      	ldr	r3, [sp, #24]
 800fd66:	2b00      	cmp	r3, #0
 800fd68:	dd02      	ble.n	800fd70 <_dtoa_r+0x938>
 800fd6a:	9b02      	ldr	r3, [sp, #8]
 800fd6c:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 800fd70:	f88b a000 	strb.w	sl, [fp]
 800fd74:	e639      	b.n	800f9ea <_dtoa_r+0x5b2>
 800fd76:	4628      	mov	r0, r5
 800fd78:	e7bd      	b.n	800fcf6 <_dtoa_r+0x8be>
 800fd7a:	2201      	movs	r2, #1
 800fd7c:	e7e2      	b.n	800fd44 <_dtoa_r+0x90c>
 800fd7e:	9b06      	ldr	r3, [sp, #24]
 800fd80:	2b00      	cmp	r3, #0
 800fd82:	db04      	blt.n	800fd8e <_dtoa_r+0x956>
 800fd84:	9907      	ldr	r1, [sp, #28]
 800fd86:	430b      	orrs	r3, r1
 800fd88:	9908      	ldr	r1, [sp, #32]
 800fd8a:	430b      	orrs	r3, r1
 800fd8c:	d120      	bne.n	800fdd0 <_dtoa_r+0x998>
 800fd8e:	2a00      	cmp	r2, #0
 800fd90:	ddee      	ble.n	800fd70 <_dtoa_r+0x938>
 800fd92:	9901      	ldr	r1, [sp, #4]
 800fd94:	2201      	movs	r2, #1
 800fd96:	4648      	mov	r0, r9
 800fd98:	f000 fe92 	bl	8010ac0 <__lshift>
 800fd9c:	4621      	mov	r1, r4
 800fd9e:	9001      	str	r0, [sp, #4]
 800fda0:	f000 fefa 	bl	8010b98 <__mcmp>
 800fda4:	2800      	cmp	r0, #0
 800fda6:	dc03      	bgt.n	800fdb0 <_dtoa_r+0x978>
 800fda8:	d1e2      	bne.n	800fd70 <_dtoa_r+0x938>
 800fdaa:	f01a 0f01 	tst.w	sl, #1
 800fdae:	d0df      	beq.n	800fd70 <_dtoa_r+0x938>
 800fdb0:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800fdb4:	d1d9      	bne.n	800fd6a <_dtoa_r+0x932>
 800fdb6:	2339      	movs	r3, #57	@ 0x39
 800fdb8:	f88b 3000 	strb.w	r3, [fp]
 800fdbc:	4633      	mov	r3, r6
 800fdbe:	461e      	mov	r6, r3
 800fdc0:	3b01      	subs	r3, #1
 800fdc2:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800fdc6:	2a39      	cmp	r2, #57	@ 0x39
 800fdc8:	d053      	beq.n	800fe72 <_dtoa_r+0xa3a>
 800fdca:	3201      	adds	r2, #1
 800fdcc:	701a      	strb	r2, [r3, #0]
 800fdce:	e60c      	b.n	800f9ea <_dtoa_r+0x5b2>
 800fdd0:	2a00      	cmp	r2, #0
 800fdd2:	dd07      	ble.n	800fde4 <_dtoa_r+0x9ac>
 800fdd4:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800fdd8:	d0ed      	beq.n	800fdb6 <_dtoa_r+0x97e>
 800fdda:	f10a 0301 	add.w	r3, sl, #1
 800fdde:	f88b 3000 	strb.w	r3, [fp]
 800fde2:	e602      	b.n	800f9ea <_dtoa_r+0x5b2>
 800fde4:	9b05      	ldr	r3, [sp, #20]
 800fde6:	9a05      	ldr	r2, [sp, #20]
 800fde8:	f803 ac01 	strb.w	sl, [r3, #-1]
 800fdec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fdee:	4293      	cmp	r3, r2
 800fdf0:	d029      	beq.n	800fe46 <_dtoa_r+0xa0e>
 800fdf2:	9901      	ldr	r1, [sp, #4]
 800fdf4:	2300      	movs	r3, #0
 800fdf6:	220a      	movs	r2, #10
 800fdf8:	4648      	mov	r0, r9
 800fdfa:	f000 fc6b 	bl	80106d4 <__multadd>
 800fdfe:	45a8      	cmp	r8, r5
 800fe00:	9001      	str	r0, [sp, #4]
 800fe02:	f04f 0300 	mov.w	r3, #0
 800fe06:	f04f 020a 	mov.w	r2, #10
 800fe0a:	4641      	mov	r1, r8
 800fe0c:	4648      	mov	r0, r9
 800fe0e:	d107      	bne.n	800fe20 <_dtoa_r+0x9e8>
 800fe10:	f000 fc60 	bl	80106d4 <__multadd>
 800fe14:	4680      	mov	r8, r0
 800fe16:	4605      	mov	r5, r0
 800fe18:	9b05      	ldr	r3, [sp, #20]
 800fe1a:	3301      	adds	r3, #1
 800fe1c:	9305      	str	r3, [sp, #20]
 800fe1e:	e775      	b.n	800fd0c <_dtoa_r+0x8d4>
 800fe20:	f000 fc58 	bl	80106d4 <__multadd>
 800fe24:	4629      	mov	r1, r5
 800fe26:	4680      	mov	r8, r0
 800fe28:	2300      	movs	r3, #0
 800fe2a:	220a      	movs	r2, #10
 800fe2c:	4648      	mov	r0, r9
 800fe2e:	f000 fc51 	bl	80106d4 <__multadd>
 800fe32:	4605      	mov	r5, r0
 800fe34:	e7f0      	b.n	800fe18 <_dtoa_r+0x9e0>
 800fe36:	f1bb 0f00 	cmp.w	fp, #0
 800fe3a:	bfcc      	ite	gt
 800fe3c:	465e      	movgt	r6, fp
 800fe3e:	2601      	movle	r6, #1
 800fe40:	443e      	add	r6, r7
 800fe42:	f04f 0800 	mov.w	r8, #0
 800fe46:	9901      	ldr	r1, [sp, #4]
 800fe48:	2201      	movs	r2, #1
 800fe4a:	4648      	mov	r0, r9
 800fe4c:	f000 fe38 	bl	8010ac0 <__lshift>
 800fe50:	4621      	mov	r1, r4
 800fe52:	9001      	str	r0, [sp, #4]
 800fe54:	f000 fea0 	bl	8010b98 <__mcmp>
 800fe58:	2800      	cmp	r0, #0
 800fe5a:	dcaf      	bgt.n	800fdbc <_dtoa_r+0x984>
 800fe5c:	d102      	bne.n	800fe64 <_dtoa_r+0xa2c>
 800fe5e:	f01a 0f01 	tst.w	sl, #1
 800fe62:	d1ab      	bne.n	800fdbc <_dtoa_r+0x984>
 800fe64:	4633      	mov	r3, r6
 800fe66:	461e      	mov	r6, r3
 800fe68:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fe6c:	2a30      	cmp	r2, #48	@ 0x30
 800fe6e:	d0fa      	beq.n	800fe66 <_dtoa_r+0xa2e>
 800fe70:	e5bb      	b.n	800f9ea <_dtoa_r+0x5b2>
 800fe72:	429f      	cmp	r7, r3
 800fe74:	d1a3      	bne.n	800fdbe <_dtoa_r+0x986>
 800fe76:	9b04      	ldr	r3, [sp, #16]
 800fe78:	3301      	adds	r3, #1
 800fe7a:	9304      	str	r3, [sp, #16]
 800fe7c:	2331      	movs	r3, #49	@ 0x31
 800fe7e:	703b      	strb	r3, [r7, #0]
 800fe80:	e5b3      	b.n	800f9ea <_dtoa_r+0x5b2>
 800fe82:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800fe84:	4f16      	ldr	r7, [pc, #88]	@ (800fee0 <_dtoa_r+0xaa8>)
 800fe86:	b11b      	cbz	r3, 800fe90 <_dtoa_r+0xa58>
 800fe88:	f107 0308 	add.w	r3, r7, #8
 800fe8c:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800fe8e:	6013      	str	r3, [r2, #0]
 800fe90:	4638      	mov	r0, r7
 800fe92:	b011      	add	sp, #68	@ 0x44
 800fe94:	ecbd 8b02 	vpop	{d8}
 800fe98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe9c:	9b07      	ldr	r3, [sp, #28]
 800fe9e:	2b01      	cmp	r3, #1
 800fea0:	f77f ae36 	ble.w	800fb10 <_dtoa_r+0x6d8>
 800fea4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fea6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fea8:	2001      	movs	r0, #1
 800feaa:	e656      	b.n	800fb5a <_dtoa_r+0x722>
 800feac:	f1bb 0f00 	cmp.w	fp, #0
 800feb0:	f77f aed7 	ble.w	800fc62 <_dtoa_r+0x82a>
 800feb4:	463e      	mov	r6, r7
 800feb6:	9801      	ldr	r0, [sp, #4]
 800feb8:	4621      	mov	r1, r4
 800feba:	f7ff fa33 	bl	800f324 <quorem>
 800febe:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800fec2:	f806 ab01 	strb.w	sl, [r6], #1
 800fec6:	1bf2      	subs	r2, r6, r7
 800fec8:	4593      	cmp	fp, r2
 800feca:	ddb4      	ble.n	800fe36 <_dtoa_r+0x9fe>
 800fecc:	9901      	ldr	r1, [sp, #4]
 800fece:	2300      	movs	r3, #0
 800fed0:	220a      	movs	r2, #10
 800fed2:	4648      	mov	r0, r9
 800fed4:	f000 fbfe 	bl	80106d4 <__multadd>
 800fed8:	9001      	str	r0, [sp, #4]
 800feda:	e7ec      	b.n	800feb6 <_dtoa_r+0xa7e>
 800fedc:	080127b3 	.word	0x080127b3
 800fee0:	08012737 	.word	0x08012737

0800fee4 <_free_r>:
 800fee4:	b538      	push	{r3, r4, r5, lr}
 800fee6:	4605      	mov	r5, r0
 800fee8:	2900      	cmp	r1, #0
 800feea:	d041      	beq.n	800ff70 <_free_r+0x8c>
 800feec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fef0:	1f0c      	subs	r4, r1, #4
 800fef2:	2b00      	cmp	r3, #0
 800fef4:	bfb8      	it	lt
 800fef6:	18e4      	addlt	r4, r4, r3
 800fef8:	f7fd fbf0 	bl	800d6dc <__malloc_lock>
 800fefc:	4a1d      	ldr	r2, [pc, #116]	@ (800ff74 <_free_r+0x90>)
 800fefe:	6813      	ldr	r3, [r2, #0]
 800ff00:	b933      	cbnz	r3, 800ff10 <_free_r+0x2c>
 800ff02:	6063      	str	r3, [r4, #4]
 800ff04:	6014      	str	r4, [r2, #0]
 800ff06:	4628      	mov	r0, r5
 800ff08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ff0c:	f7fd bbec 	b.w	800d6e8 <__malloc_unlock>
 800ff10:	42a3      	cmp	r3, r4
 800ff12:	d908      	bls.n	800ff26 <_free_r+0x42>
 800ff14:	6820      	ldr	r0, [r4, #0]
 800ff16:	1821      	adds	r1, r4, r0
 800ff18:	428b      	cmp	r3, r1
 800ff1a:	bf01      	itttt	eq
 800ff1c:	6819      	ldreq	r1, [r3, #0]
 800ff1e:	685b      	ldreq	r3, [r3, #4]
 800ff20:	1809      	addeq	r1, r1, r0
 800ff22:	6021      	streq	r1, [r4, #0]
 800ff24:	e7ed      	b.n	800ff02 <_free_r+0x1e>
 800ff26:	461a      	mov	r2, r3
 800ff28:	685b      	ldr	r3, [r3, #4]
 800ff2a:	b10b      	cbz	r3, 800ff30 <_free_r+0x4c>
 800ff2c:	42a3      	cmp	r3, r4
 800ff2e:	d9fa      	bls.n	800ff26 <_free_r+0x42>
 800ff30:	6811      	ldr	r1, [r2, #0]
 800ff32:	1850      	adds	r0, r2, r1
 800ff34:	42a0      	cmp	r0, r4
 800ff36:	d10b      	bne.n	800ff50 <_free_r+0x6c>
 800ff38:	6820      	ldr	r0, [r4, #0]
 800ff3a:	4401      	add	r1, r0
 800ff3c:	1850      	adds	r0, r2, r1
 800ff3e:	4283      	cmp	r3, r0
 800ff40:	6011      	str	r1, [r2, #0]
 800ff42:	d1e0      	bne.n	800ff06 <_free_r+0x22>
 800ff44:	6818      	ldr	r0, [r3, #0]
 800ff46:	685b      	ldr	r3, [r3, #4]
 800ff48:	6053      	str	r3, [r2, #4]
 800ff4a:	4408      	add	r0, r1
 800ff4c:	6010      	str	r0, [r2, #0]
 800ff4e:	e7da      	b.n	800ff06 <_free_r+0x22>
 800ff50:	d902      	bls.n	800ff58 <_free_r+0x74>
 800ff52:	230c      	movs	r3, #12
 800ff54:	602b      	str	r3, [r5, #0]
 800ff56:	e7d6      	b.n	800ff06 <_free_r+0x22>
 800ff58:	6820      	ldr	r0, [r4, #0]
 800ff5a:	1821      	adds	r1, r4, r0
 800ff5c:	428b      	cmp	r3, r1
 800ff5e:	bf04      	itt	eq
 800ff60:	6819      	ldreq	r1, [r3, #0]
 800ff62:	685b      	ldreq	r3, [r3, #4]
 800ff64:	6063      	str	r3, [r4, #4]
 800ff66:	bf04      	itt	eq
 800ff68:	1809      	addeq	r1, r1, r0
 800ff6a:	6021      	streq	r1, [r4, #0]
 800ff6c:	6054      	str	r4, [r2, #4]
 800ff6e:	e7ca      	b.n	800ff06 <_free_r+0x22>
 800ff70:	bd38      	pop	{r3, r4, r5, pc}
 800ff72:	bf00      	nop
 800ff74:	24000d10 	.word	0x24000d10

0800ff78 <rshift>:
 800ff78:	6903      	ldr	r3, [r0, #16]
 800ff7a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ff7e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ff82:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ff86:	f100 0414 	add.w	r4, r0, #20
 800ff8a:	dd45      	ble.n	8010018 <rshift+0xa0>
 800ff8c:	f011 011f 	ands.w	r1, r1, #31
 800ff90:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ff94:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ff98:	d10c      	bne.n	800ffb4 <rshift+0x3c>
 800ff9a:	f100 0710 	add.w	r7, r0, #16
 800ff9e:	4629      	mov	r1, r5
 800ffa0:	42b1      	cmp	r1, r6
 800ffa2:	d334      	bcc.n	801000e <rshift+0x96>
 800ffa4:	1a9b      	subs	r3, r3, r2
 800ffa6:	009b      	lsls	r3, r3, #2
 800ffa8:	1eea      	subs	r2, r5, #3
 800ffaa:	4296      	cmp	r6, r2
 800ffac:	bf38      	it	cc
 800ffae:	2300      	movcc	r3, #0
 800ffb0:	4423      	add	r3, r4
 800ffb2:	e015      	b.n	800ffe0 <rshift+0x68>
 800ffb4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ffb8:	f1c1 0820 	rsb	r8, r1, #32
 800ffbc:	40cf      	lsrs	r7, r1
 800ffbe:	f105 0e04 	add.w	lr, r5, #4
 800ffc2:	46a1      	mov	r9, r4
 800ffc4:	4576      	cmp	r6, lr
 800ffc6:	46f4      	mov	ip, lr
 800ffc8:	d815      	bhi.n	800fff6 <rshift+0x7e>
 800ffca:	1a9a      	subs	r2, r3, r2
 800ffcc:	0092      	lsls	r2, r2, #2
 800ffce:	3a04      	subs	r2, #4
 800ffd0:	3501      	adds	r5, #1
 800ffd2:	42ae      	cmp	r6, r5
 800ffd4:	bf38      	it	cc
 800ffd6:	2200      	movcc	r2, #0
 800ffd8:	18a3      	adds	r3, r4, r2
 800ffda:	50a7      	str	r7, [r4, r2]
 800ffdc:	b107      	cbz	r7, 800ffe0 <rshift+0x68>
 800ffde:	3304      	adds	r3, #4
 800ffe0:	1b1a      	subs	r2, r3, r4
 800ffe2:	42a3      	cmp	r3, r4
 800ffe4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ffe8:	bf08      	it	eq
 800ffea:	2300      	moveq	r3, #0
 800ffec:	6102      	str	r2, [r0, #16]
 800ffee:	bf08      	it	eq
 800fff0:	6143      	streq	r3, [r0, #20]
 800fff2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fff6:	f8dc c000 	ldr.w	ip, [ip]
 800fffa:	fa0c fc08 	lsl.w	ip, ip, r8
 800fffe:	ea4c 0707 	orr.w	r7, ip, r7
 8010002:	f849 7b04 	str.w	r7, [r9], #4
 8010006:	f85e 7b04 	ldr.w	r7, [lr], #4
 801000a:	40cf      	lsrs	r7, r1
 801000c:	e7da      	b.n	800ffc4 <rshift+0x4c>
 801000e:	f851 cb04 	ldr.w	ip, [r1], #4
 8010012:	f847 cf04 	str.w	ip, [r7, #4]!
 8010016:	e7c3      	b.n	800ffa0 <rshift+0x28>
 8010018:	4623      	mov	r3, r4
 801001a:	e7e1      	b.n	800ffe0 <rshift+0x68>

0801001c <__hexdig_fun>:
 801001c:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8010020:	2b09      	cmp	r3, #9
 8010022:	d802      	bhi.n	801002a <__hexdig_fun+0xe>
 8010024:	3820      	subs	r0, #32
 8010026:	b2c0      	uxtb	r0, r0
 8010028:	4770      	bx	lr
 801002a:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 801002e:	2b05      	cmp	r3, #5
 8010030:	d801      	bhi.n	8010036 <__hexdig_fun+0x1a>
 8010032:	3847      	subs	r0, #71	@ 0x47
 8010034:	e7f7      	b.n	8010026 <__hexdig_fun+0xa>
 8010036:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 801003a:	2b05      	cmp	r3, #5
 801003c:	d801      	bhi.n	8010042 <__hexdig_fun+0x26>
 801003e:	3827      	subs	r0, #39	@ 0x27
 8010040:	e7f1      	b.n	8010026 <__hexdig_fun+0xa>
 8010042:	2000      	movs	r0, #0
 8010044:	4770      	bx	lr
	...

08010048 <__gethex>:
 8010048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801004c:	b085      	sub	sp, #20
 801004e:	468a      	mov	sl, r1
 8010050:	9302      	str	r3, [sp, #8]
 8010052:	680b      	ldr	r3, [r1, #0]
 8010054:	9001      	str	r0, [sp, #4]
 8010056:	4690      	mov	r8, r2
 8010058:	1c9c      	adds	r4, r3, #2
 801005a:	46a1      	mov	r9, r4
 801005c:	f814 0b01 	ldrb.w	r0, [r4], #1
 8010060:	2830      	cmp	r0, #48	@ 0x30
 8010062:	d0fa      	beq.n	801005a <__gethex+0x12>
 8010064:	eba9 0303 	sub.w	r3, r9, r3
 8010068:	f1a3 0b02 	sub.w	fp, r3, #2
 801006c:	f7ff ffd6 	bl	801001c <__hexdig_fun>
 8010070:	4605      	mov	r5, r0
 8010072:	2800      	cmp	r0, #0
 8010074:	d168      	bne.n	8010148 <__gethex+0x100>
 8010076:	49a0      	ldr	r1, [pc, #640]	@ (80102f8 <__gethex+0x2b0>)
 8010078:	2201      	movs	r2, #1
 801007a:	4648      	mov	r0, r9
 801007c:	f7ff f89a 	bl	800f1b4 <strncmp>
 8010080:	4607      	mov	r7, r0
 8010082:	2800      	cmp	r0, #0
 8010084:	d167      	bne.n	8010156 <__gethex+0x10e>
 8010086:	f899 0001 	ldrb.w	r0, [r9, #1]
 801008a:	4626      	mov	r6, r4
 801008c:	f7ff ffc6 	bl	801001c <__hexdig_fun>
 8010090:	2800      	cmp	r0, #0
 8010092:	d062      	beq.n	801015a <__gethex+0x112>
 8010094:	4623      	mov	r3, r4
 8010096:	7818      	ldrb	r0, [r3, #0]
 8010098:	2830      	cmp	r0, #48	@ 0x30
 801009a:	4699      	mov	r9, r3
 801009c:	f103 0301 	add.w	r3, r3, #1
 80100a0:	d0f9      	beq.n	8010096 <__gethex+0x4e>
 80100a2:	f7ff ffbb 	bl	801001c <__hexdig_fun>
 80100a6:	fab0 f580 	clz	r5, r0
 80100aa:	096d      	lsrs	r5, r5, #5
 80100ac:	f04f 0b01 	mov.w	fp, #1
 80100b0:	464a      	mov	r2, r9
 80100b2:	4616      	mov	r6, r2
 80100b4:	3201      	adds	r2, #1
 80100b6:	7830      	ldrb	r0, [r6, #0]
 80100b8:	f7ff ffb0 	bl	801001c <__hexdig_fun>
 80100bc:	2800      	cmp	r0, #0
 80100be:	d1f8      	bne.n	80100b2 <__gethex+0x6a>
 80100c0:	498d      	ldr	r1, [pc, #564]	@ (80102f8 <__gethex+0x2b0>)
 80100c2:	2201      	movs	r2, #1
 80100c4:	4630      	mov	r0, r6
 80100c6:	f7ff f875 	bl	800f1b4 <strncmp>
 80100ca:	2800      	cmp	r0, #0
 80100cc:	d13f      	bne.n	801014e <__gethex+0x106>
 80100ce:	b944      	cbnz	r4, 80100e2 <__gethex+0x9a>
 80100d0:	1c74      	adds	r4, r6, #1
 80100d2:	4622      	mov	r2, r4
 80100d4:	4616      	mov	r6, r2
 80100d6:	3201      	adds	r2, #1
 80100d8:	7830      	ldrb	r0, [r6, #0]
 80100da:	f7ff ff9f 	bl	801001c <__hexdig_fun>
 80100de:	2800      	cmp	r0, #0
 80100e0:	d1f8      	bne.n	80100d4 <__gethex+0x8c>
 80100e2:	1ba4      	subs	r4, r4, r6
 80100e4:	00a7      	lsls	r7, r4, #2
 80100e6:	7833      	ldrb	r3, [r6, #0]
 80100e8:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80100ec:	2b50      	cmp	r3, #80	@ 0x50
 80100ee:	d13e      	bne.n	801016e <__gethex+0x126>
 80100f0:	7873      	ldrb	r3, [r6, #1]
 80100f2:	2b2b      	cmp	r3, #43	@ 0x2b
 80100f4:	d033      	beq.n	801015e <__gethex+0x116>
 80100f6:	2b2d      	cmp	r3, #45	@ 0x2d
 80100f8:	d034      	beq.n	8010164 <__gethex+0x11c>
 80100fa:	1c71      	adds	r1, r6, #1
 80100fc:	2400      	movs	r4, #0
 80100fe:	7808      	ldrb	r0, [r1, #0]
 8010100:	f7ff ff8c 	bl	801001c <__hexdig_fun>
 8010104:	1e43      	subs	r3, r0, #1
 8010106:	b2db      	uxtb	r3, r3
 8010108:	2b18      	cmp	r3, #24
 801010a:	d830      	bhi.n	801016e <__gethex+0x126>
 801010c:	f1a0 0210 	sub.w	r2, r0, #16
 8010110:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8010114:	f7ff ff82 	bl	801001c <__hexdig_fun>
 8010118:	f100 3cff 	add.w	ip, r0, #4294967295
 801011c:	fa5f fc8c 	uxtb.w	ip, ip
 8010120:	f1bc 0f18 	cmp.w	ip, #24
 8010124:	f04f 030a 	mov.w	r3, #10
 8010128:	d91e      	bls.n	8010168 <__gethex+0x120>
 801012a:	b104      	cbz	r4, 801012e <__gethex+0xe6>
 801012c:	4252      	negs	r2, r2
 801012e:	4417      	add	r7, r2
 8010130:	f8ca 1000 	str.w	r1, [sl]
 8010134:	b1ed      	cbz	r5, 8010172 <__gethex+0x12a>
 8010136:	f1bb 0f00 	cmp.w	fp, #0
 801013a:	bf0c      	ite	eq
 801013c:	2506      	moveq	r5, #6
 801013e:	2500      	movne	r5, #0
 8010140:	4628      	mov	r0, r5
 8010142:	b005      	add	sp, #20
 8010144:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010148:	2500      	movs	r5, #0
 801014a:	462c      	mov	r4, r5
 801014c:	e7b0      	b.n	80100b0 <__gethex+0x68>
 801014e:	2c00      	cmp	r4, #0
 8010150:	d1c7      	bne.n	80100e2 <__gethex+0x9a>
 8010152:	4627      	mov	r7, r4
 8010154:	e7c7      	b.n	80100e6 <__gethex+0x9e>
 8010156:	464e      	mov	r6, r9
 8010158:	462f      	mov	r7, r5
 801015a:	2501      	movs	r5, #1
 801015c:	e7c3      	b.n	80100e6 <__gethex+0x9e>
 801015e:	2400      	movs	r4, #0
 8010160:	1cb1      	adds	r1, r6, #2
 8010162:	e7cc      	b.n	80100fe <__gethex+0xb6>
 8010164:	2401      	movs	r4, #1
 8010166:	e7fb      	b.n	8010160 <__gethex+0x118>
 8010168:	fb03 0002 	mla	r0, r3, r2, r0
 801016c:	e7ce      	b.n	801010c <__gethex+0xc4>
 801016e:	4631      	mov	r1, r6
 8010170:	e7de      	b.n	8010130 <__gethex+0xe8>
 8010172:	eba6 0309 	sub.w	r3, r6, r9
 8010176:	3b01      	subs	r3, #1
 8010178:	4629      	mov	r1, r5
 801017a:	2b07      	cmp	r3, #7
 801017c:	dc0a      	bgt.n	8010194 <__gethex+0x14c>
 801017e:	9801      	ldr	r0, [sp, #4]
 8010180:	f000 fa46 	bl	8010610 <_Balloc>
 8010184:	4604      	mov	r4, r0
 8010186:	b940      	cbnz	r0, 801019a <__gethex+0x152>
 8010188:	4b5c      	ldr	r3, [pc, #368]	@ (80102fc <__gethex+0x2b4>)
 801018a:	4602      	mov	r2, r0
 801018c:	21e4      	movs	r1, #228	@ 0xe4
 801018e:	485c      	ldr	r0, [pc, #368]	@ (8010300 <__gethex+0x2b8>)
 8010190:	f001 fd22 	bl	8011bd8 <__assert_func>
 8010194:	3101      	adds	r1, #1
 8010196:	105b      	asrs	r3, r3, #1
 8010198:	e7ef      	b.n	801017a <__gethex+0x132>
 801019a:	f100 0a14 	add.w	sl, r0, #20
 801019e:	2300      	movs	r3, #0
 80101a0:	4655      	mov	r5, sl
 80101a2:	469b      	mov	fp, r3
 80101a4:	45b1      	cmp	r9, r6
 80101a6:	d337      	bcc.n	8010218 <__gethex+0x1d0>
 80101a8:	f845 bb04 	str.w	fp, [r5], #4
 80101ac:	eba5 050a 	sub.w	r5, r5, sl
 80101b0:	10ad      	asrs	r5, r5, #2
 80101b2:	6125      	str	r5, [r4, #16]
 80101b4:	4658      	mov	r0, fp
 80101b6:	f000 fb1d 	bl	80107f4 <__hi0bits>
 80101ba:	016d      	lsls	r5, r5, #5
 80101bc:	f8d8 6000 	ldr.w	r6, [r8]
 80101c0:	1a2d      	subs	r5, r5, r0
 80101c2:	42b5      	cmp	r5, r6
 80101c4:	dd54      	ble.n	8010270 <__gethex+0x228>
 80101c6:	1bad      	subs	r5, r5, r6
 80101c8:	4629      	mov	r1, r5
 80101ca:	4620      	mov	r0, r4
 80101cc:	f000 feae 	bl	8010f2c <__any_on>
 80101d0:	4681      	mov	r9, r0
 80101d2:	b178      	cbz	r0, 80101f4 <__gethex+0x1ac>
 80101d4:	1e6b      	subs	r3, r5, #1
 80101d6:	1159      	asrs	r1, r3, #5
 80101d8:	f003 021f 	and.w	r2, r3, #31
 80101dc:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80101e0:	f04f 0901 	mov.w	r9, #1
 80101e4:	fa09 f202 	lsl.w	r2, r9, r2
 80101e8:	420a      	tst	r2, r1
 80101ea:	d003      	beq.n	80101f4 <__gethex+0x1ac>
 80101ec:	454b      	cmp	r3, r9
 80101ee:	dc36      	bgt.n	801025e <__gethex+0x216>
 80101f0:	f04f 0902 	mov.w	r9, #2
 80101f4:	4629      	mov	r1, r5
 80101f6:	4620      	mov	r0, r4
 80101f8:	f7ff febe 	bl	800ff78 <rshift>
 80101fc:	442f      	add	r7, r5
 80101fe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010202:	42bb      	cmp	r3, r7
 8010204:	da42      	bge.n	801028c <__gethex+0x244>
 8010206:	9801      	ldr	r0, [sp, #4]
 8010208:	4621      	mov	r1, r4
 801020a:	f000 fa41 	bl	8010690 <_Bfree>
 801020e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010210:	2300      	movs	r3, #0
 8010212:	6013      	str	r3, [r2, #0]
 8010214:	25a3      	movs	r5, #163	@ 0xa3
 8010216:	e793      	b.n	8010140 <__gethex+0xf8>
 8010218:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 801021c:	2a2e      	cmp	r2, #46	@ 0x2e
 801021e:	d012      	beq.n	8010246 <__gethex+0x1fe>
 8010220:	2b20      	cmp	r3, #32
 8010222:	d104      	bne.n	801022e <__gethex+0x1e6>
 8010224:	f845 bb04 	str.w	fp, [r5], #4
 8010228:	f04f 0b00 	mov.w	fp, #0
 801022c:	465b      	mov	r3, fp
 801022e:	7830      	ldrb	r0, [r6, #0]
 8010230:	9303      	str	r3, [sp, #12]
 8010232:	f7ff fef3 	bl	801001c <__hexdig_fun>
 8010236:	9b03      	ldr	r3, [sp, #12]
 8010238:	f000 000f 	and.w	r0, r0, #15
 801023c:	4098      	lsls	r0, r3
 801023e:	ea4b 0b00 	orr.w	fp, fp, r0
 8010242:	3304      	adds	r3, #4
 8010244:	e7ae      	b.n	80101a4 <__gethex+0x15c>
 8010246:	45b1      	cmp	r9, r6
 8010248:	d8ea      	bhi.n	8010220 <__gethex+0x1d8>
 801024a:	492b      	ldr	r1, [pc, #172]	@ (80102f8 <__gethex+0x2b0>)
 801024c:	9303      	str	r3, [sp, #12]
 801024e:	2201      	movs	r2, #1
 8010250:	4630      	mov	r0, r6
 8010252:	f7fe ffaf 	bl	800f1b4 <strncmp>
 8010256:	9b03      	ldr	r3, [sp, #12]
 8010258:	2800      	cmp	r0, #0
 801025a:	d1e1      	bne.n	8010220 <__gethex+0x1d8>
 801025c:	e7a2      	b.n	80101a4 <__gethex+0x15c>
 801025e:	1ea9      	subs	r1, r5, #2
 8010260:	4620      	mov	r0, r4
 8010262:	f000 fe63 	bl	8010f2c <__any_on>
 8010266:	2800      	cmp	r0, #0
 8010268:	d0c2      	beq.n	80101f0 <__gethex+0x1a8>
 801026a:	f04f 0903 	mov.w	r9, #3
 801026e:	e7c1      	b.n	80101f4 <__gethex+0x1ac>
 8010270:	da09      	bge.n	8010286 <__gethex+0x23e>
 8010272:	1b75      	subs	r5, r6, r5
 8010274:	4621      	mov	r1, r4
 8010276:	9801      	ldr	r0, [sp, #4]
 8010278:	462a      	mov	r2, r5
 801027a:	f000 fc21 	bl	8010ac0 <__lshift>
 801027e:	1b7f      	subs	r7, r7, r5
 8010280:	4604      	mov	r4, r0
 8010282:	f100 0a14 	add.w	sl, r0, #20
 8010286:	f04f 0900 	mov.w	r9, #0
 801028a:	e7b8      	b.n	80101fe <__gethex+0x1b6>
 801028c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8010290:	42bd      	cmp	r5, r7
 8010292:	dd6f      	ble.n	8010374 <__gethex+0x32c>
 8010294:	1bed      	subs	r5, r5, r7
 8010296:	42ae      	cmp	r6, r5
 8010298:	dc34      	bgt.n	8010304 <__gethex+0x2bc>
 801029a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801029e:	2b02      	cmp	r3, #2
 80102a0:	d022      	beq.n	80102e8 <__gethex+0x2a0>
 80102a2:	2b03      	cmp	r3, #3
 80102a4:	d024      	beq.n	80102f0 <__gethex+0x2a8>
 80102a6:	2b01      	cmp	r3, #1
 80102a8:	d115      	bne.n	80102d6 <__gethex+0x28e>
 80102aa:	42ae      	cmp	r6, r5
 80102ac:	d113      	bne.n	80102d6 <__gethex+0x28e>
 80102ae:	2e01      	cmp	r6, #1
 80102b0:	d10b      	bne.n	80102ca <__gethex+0x282>
 80102b2:	9a02      	ldr	r2, [sp, #8]
 80102b4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80102b8:	6013      	str	r3, [r2, #0]
 80102ba:	2301      	movs	r3, #1
 80102bc:	6123      	str	r3, [r4, #16]
 80102be:	f8ca 3000 	str.w	r3, [sl]
 80102c2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80102c4:	2562      	movs	r5, #98	@ 0x62
 80102c6:	601c      	str	r4, [r3, #0]
 80102c8:	e73a      	b.n	8010140 <__gethex+0xf8>
 80102ca:	1e71      	subs	r1, r6, #1
 80102cc:	4620      	mov	r0, r4
 80102ce:	f000 fe2d 	bl	8010f2c <__any_on>
 80102d2:	2800      	cmp	r0, #0
 80102d4:	d1ed      	bne.n	80102b2 <__gethex+0x26a>
 80102d6:	9801      	ldr	r0, [sp, #4]
 80102d8:	4621      	mov	r1, r4
 80102da:	f000 f9d9 	bl	8010690 <_Bfree>
 80102de:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80102e0:	2300      	movs	r3, #0
 80102e2:	6013      	str	r3, [r2, #0]
 80102e4:	2550      	movs	r5, #80	@ 0x50
 80102e6:	e72b      	b.n	8010140 <__gethex+0xf8>
 80102e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80102ea:	2b00      	cmp	r3, #0
 80102ec:	d1f3      	bne.n	80102d6 <__gethex+0x28e>
 80102ee:	e7e0      	b.n	80102b2 <__gethex+0x26a>
 80102f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80102f2:	2b00      	cmp	r3, #0
 80102f4:	d1dd      	bne.n	80102b2 <__gethex+0x26a>
 80102f6:	e7ee      	b.n	80102d6 <__gethex+0x28e>
 80102f8:	080126a0 	.word	0x080126a0
 80102fc:	080127b3 	.word	0x080127b3
 8010300:	080127c4 	.word	0x080127c4
 8010304:	1e6f      	subs	r7, r5, #1
 8010306:	f1b9 0f00 	cmp.w	r9, #0
 801030a:	d130      	bne.n	801036e <__gethex+0x326>
 801030c:	b127      	cbz	r7, 8010318 <__gethex+0x2d0>
 801030e:	4639      	mov	r1, r7
 8010310:	4620      	mov	r0, r4
 8010312:	f000 fe0b 	bl	8010f2c <__any_on>
 8010316:	4681      	mov	r9, r0
 8010318:	117a      	asrs	r2, r7, #5
 801031a:	2301      	movs	r3, #1
 801031c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8010320:	f007 071f 	and.w	r7, r7, #31
 8010324:	40bb      	lsls	r3, r7
 8010326:	4213      	tst	r3, r2
 8010328:	4629      	mov	r1, r5
 801032a:	4620      	mov	r0, r4
 801032c:	bf18      	it	ne
 801032e:	f049 0902 	orrne.w	r9, r9, #2
 8010332:	f7ff fe21 	bl	800ff78 <rshift>
 8010336:	f8d8 7004 	ldr.w	r7, [r8, #4]
 801033a:	1b76      	subs	r6, r6, r5
 801033c:	2502      	movs	r5, #2
 801033e:	f1b9 0f00 	cmp.w	r9, #0
 8010342:	d047      	beq.n	80103d4 <__gethex+0x38c>
 8010344:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010348:	2b02      	cmp	r3, #2
 801034a:	d015      	beq.n	8010378 <__gethex+0x330>
 801034c:	2b03      	cmp	r3, #3
 801034e:	d017      	beq.n	8010380 <__gethex+0x338>
 8010350:	2b01      	cmp	r3, #1
 8010352:	d109      	bne.n	8010368 <__gethex+0x320>
 8010354:	f019 0f02 	tst.w	r9, #2
 8010358:	d006      	beq.n	8010368 <__gethex+0x320>
 801035a:	f8da 3000 	ldr.w	r3, [sl]
 801035e:	ea49 0903 	orr.w	r9, r9, r3
 8010362:	f019 0f01 	tst.w	r9, #1
 8010366:	d10e      	bne.n	8010386 <__gethex+0x33e>
 8010368:	f045 0510 	orr.w	r5, r5, #16
 801036c:	e032      	b.n	80103d4 <__gethex+0x38c>
 801036e:	f04f 0901 	mov.w	r9, #1
 8010372:	e7d1      	b.n	8010318 <__gethex+0x2d0>
 8010374:	2501      	movs	r5, #1
 8010376:	e7e2      	b.n	801033e <__gethex+0x2f6>
 8010378:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801037a:	f1c3 0301 	rsb	r3, r3, #1
 801037e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8010380:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010382:	2b00      	cmp	r3, #0
 8010384:	d0f0      	beq.n	8010368 <__gethex+0x320>
 8010386:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801038a:	f104 0314 	add.w	r3, r4, #20
 801038e:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8010392:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8010396:	f04f 0c00 	mov.w	ip, #0
 801039a:	4618      	mov	r0, r3
 801039c:	f853 2b04 	ldr.w	r2, [r3], #4
 80103a0:	f1b2 3fff 	cmp.w	r2, #4294967295
 80103a4:	d01b      	beq.n	80103de <__gethex+0x396>
 80103a6:	3201      	adds	r2, #1
 80103a8:	6002      	str	r2, [r0, #0]
 80103aa:	2d02      	cmp	r5, #2
 80103ac:	f104 0314 	add.w	r3, r4, #20
 80103b0:	d13c      	bne.n	801042c <__gethex+0x3e4>
 80103b2:	f8d8 2000 	ldr.w	r2, [r8]
 80103b6:	3a01      	subs	r2, #1
 80103b8:	42b2      	cmp	r2, r6
 80103ba:	d109      	bne.n	80103d0 <__gethex+0x388>
 80103bc:	1171      	asrs	r1, r6, #5
 80103be:	2201      	movs	r2, #1
 80103c0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80103c4:	f006 061f 	and.w	r6, r6, #31
 80103c8:	fa02 f606 	lsl.w	r6, r2, r6
 80103cc:	421e      	tst	r6, r3
 80103ce:	d13a      	bne.n	8010446 <__gethex+0x3fe>
 80103d0:	f045 0520 	orr.w	r5, r5, #32
 80103d4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80103d6:	601c      	str	r4, [r3, #0]
 80103d8:	9b02      	ldr	r3, [sp, #8]
 80103da:	601f      	str	r7, [r3, #0]
 80103dc:	e6b0      	b.n	8010140 <__gethex+0xf8>
 80103de:	4299      	cmp	r1, r3
 80103e0:	f843 cc04 	str.w	ip, [r3, #-4]
 80103e4:	d8d9      	bhi.n	801039a <__gethex+0x352>
 80103e6:	68a3      	ldr	r3, [r4, #8]
 80103e8:	459b      	cmp	fp, r3
 80103ea:	db17      	blt.n	801041c <__gethex+0x3d4>
 80103ec:	6861      	ldr	r1, [r4, #4]
 80103ee:	9801      	ldr	r0, [sp, #4]
 80103f0:	3101      	adds	r1, #1
 80103f2:	f000 f90d 	bl	8010610 <_Balloc>
 80103f6:	4681      	mov	r9, r0
 80103f8:	b918      	cbnz	r0, 8010402 <__gethex+0x3ba>
 80103fa:	4b1a      	ldr	r3, [pc, #104]	@ (8010464 <__gethex+0x41c>)
 80103fc:	4602      	mov	r2, r0
 80103fe:	2184      	movs	r1, #132	@ 0x84
 8010400:	e6c5      	b.n	801018e <__gethex+0x146>
 8010402:	6922      	ldr	r2, [r4, #16]
 8010404:	3202      	adds	r2, #2
 8010406:	f104 010c 	add.w	r1, r4, #12
 801040a:	0092      	lsls	r2, r2, #2
 801040c:	300c      	adds	r0, #12
 801040e:	f7fe ff6a 	bl	800f2e6 <memcpy>
 8010412:	4621      	mov	r1, r4
 8010414:	9801      	ldr	r0, [sp, #4]
 8010416:	f000 f93b 	bl	8010690 <_Bfree>
 801041a:	464c      	mov	r4, r9
 801041c:	6923      	ldr	r3, [r4, #16]
 801041e:	1c5a      	adds	r2, r3, #1
 8010420:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010424:	6122      	str	r2, [r4, #16]
 8010426:	2201      	movs	r2, #1
 8010428:	615a      	str	r2, [r3, #20]
 801042a:	e7be      	b.n	80103aa <__gethex+0x362>
 801042c:	6922      	ldr	r2, [r4, #16]
 801042e:	455a      	cmp	r2, fp
 8010430:	dd0b      	ble.n	801044a <__gethex+0x402>
 8010432:	2101      	movs	r1, #1
 8010434:	4620      	mov	r0, r4
 8010436:	f7ff fd9f 	bl	800ff78 <rshift>
 801043a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801043e:	3701      	adds	r7, #1
 8010440:	42bb      	cmp	r3, r7
 8010442:	f6ff aee0 	blt.w	8010206 <__gethex+0x1be>
 8010446:	2501      	movs	r5, #1
 8010448:	e7c2      	b.n	80103d0 <__gethex+0x388>
 801044a:	f016 061f 	ands.w	r6, r6, #31
 801044e:	d0fa      	beq.n	8010446 <__gethex+0x3fe>
 8010450:	4453      	add	r3, sl
 8010452:	f1c6 0620 	rsb	r6, r6, #32
 8010456:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801045a:	f000 f9cb 	bl	80107f4 <__hi0bits>
 801045e:	42b0      	cmp	r0, r6
 8010460:	dbe7      	blt.n	8010432 <__gethex+0x3ea>
 8010462:	e7f0      	b.n	8010446 <__gethex+0x3fe>
 8010464:	080127b3 	.word	0x080127b3

08010468 <L_shift>:
 8010468:	f1c2 0208 	rsb	r2, r2, #8
 801046c:	0092      	lsls	r2, r2, #2
 801046e:	b570      	push	{r4, r5, r6, lr}
 8010470:	f1c2 0620 	rsb	r6, r2, #32
 8010474:	6843      	ldr	r3, [r0, #4]
 8010476:	6804      	ldr	r4, [r0, #0]
 8010478:	fa03 f506 	lsl.w	r5, r3, r6
 801047c:	432c      	orrs	r4, r5
 801047e:	40d3      	lsrs	r3, r2
 8010480:	6004      	str	r4, [r0, #0]
 8010482:	f840 3f04 	str.w	r3, [r0, #4]!
 8010486:	4288      	cmp	r0, r1
 8010488:	d3f4      	bcc.n	8010474 <L_shift+0xc>
 801048a:	bd70      	pop	{r4, r5, r6, pc}

0801048c <__match>:
 801048c:	b530      	push	{r4, r5, lr}
 801048e:	6803      	ldr	r3, [r0, #0]
 8010490:	3301      	adds	r3, #1
 8010492:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010496:	b914      	cbnz	r4, 801049e <__match+0x12>
 8010498:	6003      	str	r3, [r0, #0]
 801049a:	2001      	movs	r0, #1
 801049c:	bd30      	pop	{r4, r5, pc}
 801049e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80104a2:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80104a6:	2d19      	cmp	r5, #25
 80104a8:	bf98      	it	ls
 80104aa:	3220      	addls	r2, #32
 80104ac:	42a2      	cmp	r2, r4
 80104ae:	d0f0      	beq.n	8010492 <__match+0x6>
 80104b0:	2000      	movs	r0, #0
 80104b2:	e7f3      	b.n	801049c <__match+0x10>

080104b4 <__hexnan>:
 80104b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104b8:	680b      	ldr	r3, [r1, #0]
 80104ba:	6801      	ldr	r1, [r0, #0]
 80104bc:	115e      	asrs	r6, r3, #5
 80104be:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80104c2:	f013 031f 	ands.w	r3, r3, #31
 80104c6:	b087      	sub	sp, #28
 80104c8:	bf18      	it	ne
 80104ca:	3604      	addne	r6, #4
 80104cc:	2500      	movs	r5, #0
 80104ce:	1f37      	subs	r7, r6, #4
 80104d0:	4682      	mov	sl, r0
 80104d2:	4690      	mov	r8, r2
 80104d4:	9301      	str	r3, [sp, #4]
 80104d6:	f846 5c04 	str.w	r5, [r6, #-4]
 80104da:	46b9      	mov	r9, r7
 80104dc:	463c      	mov	r4, r7
 80104de:	9502      	str	r5, [sp, #8]
 80104e0:	46ab      	mov	fp, r5
 80104e2:	784a      	ldrb	r2, [r1, #1]
 80104e4:	1c4b      	adds	r3, r1, #1
 80104e6:	9303      	str	r3, [sp, #12]
 80104e8:	b342      	cbz	r2, 801053c <__hexnan+0x88>
 80104ea:	4610      	mov	r0, r2
 80104ec:	9105      	str	r1, [sp, #20]
 80104ee:	9204      	str	r2, [sp, #16]
 80104f0:	f7ff fd94 	bl	801001c <__hexdig_fun>
 80104f4:	2800      	cmp	r0, #0
 80104f6:	d151      	bne.n	801059c <__hexnan+0xe8>
 80104f8:	9a04      	ldr	r2, [sp, #16]
 80104fa:	9905      	ldr	r1, [sp, #20]
 80104fc:	2a20      	cmp	r2, #32
 80104fe:	d818      	bhi.n	8010532 <__hexnan+0x7e>
 8010500:	9b02      	ldr	r3, [sp, #8]
 8010502:	459b      	cmp	fp, r3
 8010504:	dd13      	ble.n	801052e <__hexnan+0x7a>
 8010506:	454c      	cmp	r4, r9
 8010508:	d206      	bcs.n	8010518 <__hexnan+0x64>
 801050a:	2d07      	cmp	r5, #7
 801050c:	dc04      	bgt.n	8010518 <__hexnan+0x64>
 801050e:	462a      	mov	r2, r5
 8010510:	4649      	mov	r1, r9
 8010512:	4620      	mov	r0, r4
 8010514:	f7ff ffa8 	bl	8010468 <L_shift>
 8010518:	4544      	cmp	r4, r8
 801051a:	d952      	bls.n	80105c2 <__hexnan+0x10e>
 801051c:	2300      	movs	r3, #0
 801051e:	f1a4 0904 	sub.w	r9, r4, #4
 8010522:	f844 3c04 	str.w	r3, [r4, #-4]
 8010526:	f8cd b008 	str.w	fp, [sp, #8]
 801052a:	464c      	mov	r4, r9
 801052c:	461d      	mov	r5, r3
 801052e:	9903      	ldr	r1, [sp, #12]
 8010530:	e7d7      	b.n	80104e2 <__hexnan+0x2e>
 8010532:	2a29      	cmp	r2, #41	@ 0x29
 8010534:	d157      	bne.n	80105e6 <__hexnan+0x132>
 8010536:	3102      	adds	r1, #2
 8010538:	f8ca 1000 	str.w	r1, [sl]
 801053c:	f1bb 0f00 	cmp.w	fp, #0
 8010540:	d051      	beq.n	80105e6 <__hexnan+0x132>
 8010542:	454c      	cmp	r4, r9
 8010544:	d206      	bcs.n	8010554 <__hexnan+0xa0>
 8010546:	2d07      	cmp	r5, #7
 8010548:	dc04      	bgt.n	8010554 <__hexnan+0xa0>
 801054a:	462a      	mov	r2, r5
 801054c:	4649      	mov	r1, r9
 801054e:	4620      	mov	r0, r4
 8010550:	f7ff ff8a 	bl	8010468 <L_shift>
 8010554:	4544      	cmp	r4, r8
 8010556:	d936      	bls.n	80105c6 <__hexnan+0x112>
 8010558:	f1a8 0204 	sub.w	r2, r8, #4
 801055c:	4623      	mov	r3, r4
 801055e:	f853 1b04 	ldr.w	r1, [r3], #4
 8010562:	f842 1f04 	str.w	r1, [r2, #4]!
 8010566:	429f      	cmp	r7, r3
 8010568:	d2f9      	bcs.n	801055e <__hexnan+0xaa>
 801056a:	1b3b      	subs	r3, r7, r4
 801056c:	f023 0303 	bic.w	r3, r3, #3
 8010570:	3304      	adds	r3, #4
 8010572:	3401      	adds	r4, #1
 8010574:	3e03      	subs	r6, #3
 8010576:	42b4      	cmp	r4, r6
 8010578:	bf88      	it	hi
 801057a:	2304      	movhi	r3, #4
 801057c:	4443      	add	r3, r8
 801057e:	2200      	movs	r2, #0
 8010580:	f843 2b04 	str.w	r2, [r3], #4
 8010584:	429f      	cmp	r7, r3
 8010586:	d2fb      	bcs.n	8010580 <__hexnan+0xcc>
 8010588:	683b      	ldr	r3, [r7, #0]
 801058a:	b91b      	cbnz	r3, 8010594 <__hexnan+0xe0>
 801058c:	4547      	cmp	r7, r8
 801058e:	d128      	bne.n	80105e2 <__hexnan+0x12e>
 8010590:	2301      	movs	r3, #1
 8010592:	603b      	str	r3, [r7, #0]
 8010594:	2005      	movs	r0, #5
 8010596:	b007      	add	sp, #28
 8010598:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801059c:	3501      	adds	r5, #1
 801059e:	2d08      	cmp	r5, #8
 80105a0:	f10b 0b01 	add.w	fp, fp, #1
 80105a4:	dd06      	ble.n	80105b4 <__hexnan+0x100>
 80105a6:	4544      	cmp	r4, r8
 80105a8:	d9c1      	bls.n	801052e <__hexnan+0x7a>
 80105aa:	2300      	movs	r3, #0
 80105ac:	f844 3c04 	str.w	r3, [r4, #-4]
 80105b0:	2501      	movs	r5, #1
 80105b2:	3c04      	subs	r4, #4
 80105b4:	6822      	ldr	r2, [r4, #0]
 80105b6:	f000 000f 	and.w	r0, r0, #15
 80105ba:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80105be:	6020      	str	r0, [r4, #0]
 80105c0:	e7b5      	b.n	801052e <__hexnan+0x7a>
 80105c2:	2508      	movs	r5, #8
 80105c4:	e7b3      	b.n	801052e <__hexnan+0x7a>
 80105c6:	9b01      	ldr	r3, [sp, #4]
 80105c8:	2b00      	cmp	r3, #0
 80105ca:	d0dd      	beq.n	8010588 <__hexnan+0xd4>
 80105cc:	f1c3 0320 	rsb	r3, r3, #32
 80105d0:	f04f 32ff 	mov.w	r2, #4294967295
 80105d4:	40da      	lsrs	r2, r3
 80105d6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80105da:	4013      	ands	r3, r2
 80105dc:	f846 3c04 	str.w	r3, [r6, #-4]
 80105e0:	e7d2      	b.n	8010588 <__hexnan+0xd4>
 80105e2:	3f04      	subs	r7, #4
 80105e4:	e7d0      	b.n	8010588 <__hexnan+0xd4>
 80105e6:	2004      	movs	r0, #4
 80105e8:	e7d5      	b.n	8010596 <__hexnan+0xe2>

080105ea <__ascii_mbtowc>:
 80105ea:	b082      	sub	sp, #8
 80105ec:	b901      	cbnz	r1, 80105f0 <__ascii_mbtowc+0x6>
 80105ee:	a901      	add	r1, sp, #4
 80105f0:	b142      	cbz	r2, 8010604 <__ascii_mbtowc+0x1a>
 80105f2:	b14b      	cbz	r3, 8010608 <__ascii_mbtowc+0x1e>
 80105f4:	7813      	ldrb	r3, [r2, #0]
 80105f6:	600b      	str	r3, [r1, #0]
 80105f8:	7812      	ldrb	r2, [r2, #0]
 80105fa:	1e10      	subs	r0, r2, #0
 80105fc:	bf18      	it	ne
 80105fe:	2001      	movne	r0, #1
 8010600:	b002      	add	sp, #8
 8010602:	4770      	bx	lr
 8010604:	4610      	mov	r0, r2
 8010606:	e7fb      	b.n	8010600 <__ascii_mbtowc+0x16>
 8010608:	f06f 0001 	mvn.w	r0, #1
 801060c:	e7f8      	b.n	8010600 <__ascii_mbtowc+0x16>
	...

08010610 <_Balloc>:
 8010610:	b570      	push	{r4, r5, r6, lr}
 8010612:	69c6      	ldr	r6, [r0, #28]
 8010614:	4604      	mov	r4, r0
 8010616:	460d      	mov	r5, r1
 8010618:	b976      	cbnz	r6, 8010638 <_Balloc+0x28>
 801061a:	2010      	movs	r0, #16
 801061c:	f7fc ffb4 	bl	800d588 <malloc>
 8010620:	4602      	mov	r2, r0
 8010622:	61e0      	str	r0, [r4, #28]
 8010624:	b920      	cbnz	r0, 8010630 <_Balloc+0x20>
 8010626:	4b18      	ldr	r3, [pc, #96]	@ (8010688 <_Balloc+0x78>)
 8010628:	4818      	ldr	r0, [pc, #96]	@ (801068c <_Balloc+0x7c>)
 801062a:	216b      	movs	r1, #107	@ 0x6b
 801062c:	f001 fad4 	bl	8011bd8 <__assert_func>
 8010630:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010634:	6006      	str	r6, [r0, #0]
 8010636:	60c6      	str	r6, [r0, #12]
 8010638:	69e6      	ldr	r6, [r4, #28]
 801063a:	68f3      	ldr	r3, [r6, #12]
 801063c:	b183      	cbz	r3, 8010660 <_Balloc+0x50>
 801063e:	69e3      	ldr	r3, [r4, #28]
 8010640:	68db      	ldr	r3, [r3, #12]
 8010642:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010646:	b9b8      	cbnz	r0, 8010678 <_Balloc+0x68>
 8010648:	2101      	movs	r1, #1
 801064a:	fa01 f605 	lsl.w	r6, r1, r5
 801064e:	1d72      	adds	r2, r6, #5
 8010650:	0092      	lsls	r2, r2, #2
 8010652:	4620      	mov	r0, r4
 8010654:	f001 fade 	bl	8011c14 <_calloc_r>
 8010658:	b160      	cbz	r0, 8010674 <_Balloc+0x64>
 801065a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801065e:	e00e      	b.n	801067e <_Balloc+0x6e>
 8010660:	2221      	movs	r2, #33	@ 0x21
 8010662:	2104      	movs	r1, #4
 8010664:	4620      	mov	r0, r4
 8010666:	f001 fad5 	bl	8011c14 <_calloc_r>
 801066a:	69e3      	ldr	r3, [r4, #28]
 801066c:	60f0      	str	r0, [r6, #12]
 801066e:	68db      	ldr	r3, [r3, #12]
 8010670:	2b00      	cmp	r3, #0
 8010672:	d1e4      	bne.n	801063e <_Balloc+0x2e>
 8010674:	2000      	movs	r0, #0
 8010676:	bd70      	pop	{r4, r5, r6, pc}
 8010678:	6802      	ldr	r2, [r0, #0]
 801067a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801067e:	2300      	movs	r3, #0
 8010680:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010684:	e7f7      	b.n	8010676 <_Balloc+0x66>
 8010686:	bf00      	nop
 8010688:	08012744 	.word	0x08012744
 801068c:	08012824 	.word	0x08012824

08010690 <_Bfree>:
 8010690:	b570      	push	{r4, r5, r6, lr}
 8010692:	69c6      	ldr	r6, [r0, #28]
 8010694:	4605      	mov	r5, r0
 8010696:	460c      	mov	r4, r1
 8010698:	b976      	cbnz	r6, 80106b8 <_Bfree+0x28>
 801069a:	2010      	movs	r0, #16
 801069c:	f7fc ff74 	bl	800d588 <malloc>
 80106a0:	4602      	mov	r2, r0
 80106a2:	61e8      	str	r0, [r5, #28]
 80106a4:	b920      	cbnz	r0, 80106b0 <_Bfree+0x20>
 80106a6:	4b09      	ldr	r3, [pc, #36]	@ (80106cc <_Bfree+0x3c>)
 80106a8:	4809      	ldr	r0, [pc, #36]	@ (80106d0 <_Bfree+0x40>)
 80106aa:	218f      	movs	r1, #143	@ 0x8f
 80106ac:	f001 fa94 	bl	8011bd8 <__assert_func>
 80106b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80106b4:	6006      	str	r6, [r0, #0]
 80106b6:	60c6      	str	r6, [r0, #12]
 80106b8:	b13c      	cbz	r4, 80106ca <_Bfree+0x3a>
 80106ba:	69eb      	ldr	r3, [r5, #28]
 80106bc:	6862      	ldr	r2, [r4, #4]
 80106be:	68db      	ldr	r3, [r3, #12]
 80106c0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80106c4:	6021      	str	r1, [r4, #0]
 80106c6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80106ca:	bd70      	pop	{r4, r5, r6, pc}
 80106cc:	08012744 	.word	0x08012744
 80106d0:	08012824 	.word	0x08012824

080106d4 <__multadd>:
 80106d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80106d8:	690d      	ldr	r5, [r1, #16]
 80106da:	4607      	mov	r7, r0
 80106dc:	460c      	mov	r4, r1
 80106de:	461e      	mov	r6, r3
 80106e0:	f101 0c14 	add.w	ip, r1, #20
 80106e4:	2000      	movs	r0, #0
 80106e6:	f8dc 3000 	ldr.w	r3, [ip]
 80106ea:	b299      	uxth	r1, r3
 80106ec:	fb02 6101 	mla	r1, r2, r1, r6
 80106f0:	0c1e      	lsrs	r6, r3, #16
 80106f2:	0c0b      	lsrs	r3, r1, #16
 80106f4:	fb02 3306 	mla	r3, r2, r6, r3
 80106f8:	b289      	uxth	r1, r1
 80106fa:	3001      	adds	r0, #1
 80106fc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8010700:	4285      	cmp	r5, r0
 8010702:	f84c 1b04 	str.w	r1, [ip], #4
 8010706:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801070a:	dcec      	bgt.n	80106e6 <__multadd+0x12>
 801070c:	b30e      	cbz	r6, 8010752 <__multadd+0x7e>
 801070e:	68a3      	ldr	r3, [r4, #8]
 8010710:	42ab      	cmp	r3, r5
 8010712:	dc19      	bgt.n	8010748 <__multadd+0x74>
 8010714:	6861      	ldr	r1, [r4, #4]
 8010716:	4638      	mov	r0, r7
 8010718:	3101      	adds	r1, #1
 801071a:	f7ff ff79 	bl	8010610 <_Balloc>
 801071e:	4680      	mov	r8, r0
 8010720:	b928      	cbnz	r0, 801072e <__multadd+0x5a>
 8010722:	4602      	mov	r2, r0
 8010724:	4b0c      	ldr	r3, [pc, #48]	@ (8010758 <__multadd+0x84>)
 8010726:	480d      	ldr	r0, [pc, #52]	@ (801075c <__multadd+0x88>)
 8010728:	21ba      	movs	r1, #186	@ 0xba
 801072a:	f001 fa55 	bl	8011bd8 <__assert_func>
 801072e:	6922      	ldr	r2, [r4, #16]
 8010730:	3202      	adds	r2, #2
 8010732:	f104 010c 	add.w	r1, r4, #12
 8010736:	0092      	lsls	r2, r2, #2
 8010738:	300c      	adds	r0, #12
 801073a:	f7fe fdd4 	bl	800f2e6 <memcpy>
 801073e:	4621      	mov	r1, r4
 8010740:	4638      	mov	r0, r7
 8010742:	f7ff ffa5 	bl	8010690 <_Bfree>
 8010746:	4644      	mov	r4, r8
 8010748:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801074c:	3501      	adds	r5, #1
 801074e:	615e      	str	r6, [r3, #20]
 8010750:	6125      	str	r5, [r4, #16]
 8010752:	4620      	mov	r0, r4
 8010754:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010758:	080127b3 	.word	0x080127b3
 801075c:	08012824 	.word	0x08012824

08010760 <__s2b>:
 8010760:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010764:	460c      	mov	r4, r1
 8010766:	4615      	mov	r5, r2
 8010768:	461f      	mov	r7, r3
 801076a:	2209      	movs	r2, #9
 801076c:	3308      	adds	r3, #8
 801076e:	4606      	mov	r6, r0
 8010770:	fb93 f3f2 	sdiv	r3, r3, r2
 8010774:	2100      	movs	r1, #0
 8010776:	2201      	movs	r2, #1
 8010778:	429a      	cmp	r2, r3
 801077a:	db09      	blt.n	8010790 <__s2b+0x30>
 801077c:	4630      	mov	r0, r6
 801077e:	f7ff ff47 	bl	8010610 <_Balloc>
 8010782:	b940      	cbnz	r0, 8010796 <__s2b+0x36>
 8010784:	4602      	mov	r2, r0
 8010786:	4b19      	ldr	r3, [pc, #100]	@ (80107ec <__s2b+0x8c>)
 8010788:	4819      	ldr	r0, [pc, #100]	@ (80107f0 <__s2b+0x90>)
 801078a:	21d3      	movs	r1, #211	@ 0xd3
 801078c:	f001 fa24 	bl	8011bd8 <__assert_func>
 8010790:	0052      	lsls	r2, r2, #1
 8010792:	3101      	adds	r1, #1
 8010794:	e7f0      	b.n	8010778 <__s2b+0x18>
 8010796:	9b08      	ldr	r3, [sp, #32]
 8010798:	6143      	str	r3, [r0, #20]
 801079a:	2d09      	cmp	r5, #9
 801079c:	f04f 0301 	mov.w	r3, #1
 80107a0:	6103      	str	r3, [r0, #16]
 80107a2:	dd16      	ble.n	80107d2 <__s2b+0x72>
 80107a4:	f104 0909 	add.w	r9, r4, #9
 80107a8:	46c8      	mov	r8, r9
 80107aa:	442c      	add	r4, r5
 80107ac:	f818 3b01 	ldrb.w	r3, [r8], #1
 80107b0:	4601      	mov	r1, r0
 80107b2:	3b30      	subs	r3, #48	@ 0x30
 80107b4:	220a      	movs	r2, #10
 80107b6:	4630      	mov	r0, r6
 80107b8:	f7ff ff8c 	bl	80106d4 <__multadd>
 80107bc:	45a0      	cmp	r8, r4
 80107be:	d1f5      	bne.n	80107ac <__s2b+0x4c>
 80107c0:	f1a5 0408 	sub.w	r4, r5, #8
 80107c4:	444c      	add	r4, r9
 80107c6:	1b2d      	subs	r5, r5, r4
 80107c8:	1963      	adds	r3, r4, r5
 80107ca:	42bb      	cmp	r3, r7
 80107cc:	db04      	blt.n	80107d8 <__s2b+0x78>
 80107ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80107d2:	340a      	adds	r4, #10
 80107d4:	2509      	movs	r5, #9
 80107d6:	e7f6      	b.n	80107c6 <__s2b+0x66>
 80107d8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80107dc:	4601      	mov	r1, r0
 80107de:	3b30      	subs	r3, #48	@ 0x30
 80107e0:	220a      	movs	r2, #10
 80107e2:	4630      	mov	r0, r6
 80107e4:	f7ff ff76 	bl	80106d4 <__multadd>
 80107e8:	e7ee      	b.n	80107c8 <__s2b+0x68>
 80107ea:	bf00      	nop
 80107ec:	080127b3 	.word	0x080127b3
 80107f0:	08012824 	.word	0x08012824

080107f4 <__hi0bits>:
 80107f4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80107f8:	4603      	mov	r3, r0
 80107fa:	bf36      	itet	cc
 80107fc:	0403      	lslcc	r3, r0, #16
 80107fe:	2000      	movcs	r0, #0
 8010800:	2010      	movcc	r0, #16
 8010802:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8010806:	bf3c      	itt	cc
 8010808:	021b      	lslcc	r3, r3, #8
 801080a:	3008      	addcc	r0, #8
 801080c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8010810:	bf3c      	itt	cc
 8010812:	011b      	lslcc	r3, r3, #4
 8010814:	3004      	addcc	r0, #4
 8010816:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801081a:	bf3c      	itt	cc
 801081c:	009b      	lslcc	r3, r3, #2
 801081e:	3002      	addcc	r0, #2
 8010820:	2b00      	cmp	r3, #0
 8010822:	db05      	blt.n	8010830 <__hi0bits+0x3c>
 8010824:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8010828:	f100 0001 	add.w	r0, r0, #1
 801082c:	bf08      	it	eq
 801082e:	2020      	moveq	r0, #32
 8010830:	4770      	bx	lr

08010832 <__lo0bits>:
 8010832:	6803      	ldr	r3, [r0, #0]
 8010834:	4602      	mov	r2, r0
 8010836:	f013 0007 	ands.w	r0, r3, #7
 801083a:	d00b      	beq.n	8010854 <__lo0bits+0x22>
 801083c:	07d9      	lsls	r1, r3, #31
 801083e:	d421      	bmi.n	8010884 <__lo0bits+0x52>
 8010840:	0798      	lsls	r0, r3, #30
 8010842:	bf49      	itett	mi
 8010844:	085b      	lsrmi	r3, r3, #1
 8010846:	089b      	lsrpl	r3, r3, #2
 8010848:	2001      	movmi	r0, #1
 801084a:	6013      	strmi	r3, [r2, #0]
 801084c:	bf5c      	itt	pl
 801084e:	6013      	strpl	r3, [r2, #0]
 8010850:	2002      	movpl	r0, #2
 8010852:	4770      	bx	lr
 8010854:	b299      	uxth	r1, r3
 8010856:	b909      	cbnz	r1, 801085c <__lo0bits+0x2a>
 8010858:	0c1b      	lsrs	r3, r3, #16
 801085a:	2010      	movs	r0, #16
 801085c:	b2d9      	uxtb	r1, r3
 801085e:	b909      	cbnz	r1, 8010864 <__lo0bits+0x32>
 8010860:	3008      	adds	r0, #8
 8010862:	0a1b      	lsrs	r3, r3, #8
 8010864:	0719      	lsls	r1, r3, #28
 8010866:	bf04      	itt	eq
 8010868:	091b      	lsreq	r3, r3, #4
 801086a:	3004      	addeq	r0, #4
 801086c:	0799      	lsls	r1, r3, #30
 801086e:	bf04      	itt	eq
 8010870:	089b      	lsreq	r3, r3, #2
 8010872:	3002      	addeq	r0, #2
 8010874:	07d9      	lsls	r1, r3, #31
 8010876:	d403      	bmi.n	8010880 <__lo0bits+0x4e>
 8010878:	085b      	lsrs	r3, r3, #1
 801087a:	f100 0001 	add.w	r0, r0, #1
 801087e:	d003      	beq.n	8010888 <__lo0bits+0x56>
 8010880:	6013      	str	r3, [r2, #0]
 8010882:	4770      	bx	lr
 8010884:	2000      	movs	r0, #0
 8010886:	4770      	bx	lr
 8010888:	2020      	movs	r0, #32
 801088a:	4770      	bx	lr

0801088c <__i2b>:
 801088c:	b510      	push	{r4, lr}
 801088e:	460c      	mov	r4, r1
 8010890:	2101      	movs	r1, #1
 8010892:	f7ff febd 	bl	8010610 <_Balloc>
 8010896:	4602      	mov	r2, r0
 8010898:	b928      	cbnz	r0, 80108a6 <__i2b+0x1a>
 801089a:	4b05      	ldr	r3, [pc, #20]	@ (80108b0 <__i2b+0x24>)
 801089c:	4805      	ldr	r0, [pc, #20]	@ (80108b4 <__i2b+0x28>)
 801089e:	f240 1145 	movw	r1, #325	@ 0x145
 80108a2:	f001 f999 	bl	8011bd8 <__assert_func>
 80108a6:	2301      	movs	r3, #1
 80108a8:	6144      	str	r4, [r0, #20]
 80108aa:	6103      	str	r3, [r0, #16]
 80108ac:	bd10      	pop	{r4, pc}
 80108ae:	bf00      	nop
 80108b0:	080127b3 	.word	0x080127b3
 80108b4:	08012824 	.word	0x08012824

080108b8 <__multiply>:
 80108b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80108bc:	4614      	mov	r4, r2
 80108be:	690a      	ldr	r2, [r1, #16]
 80108c0:	6923      	ldr	r3, [r4, #16]
 80108c2:	429a      	cmp	r2, r3
 80108c4:	bfa8      	it	ge
 80108c6:	4623      	movge	r3, r4
 80108c8:	460f      	mov	r7, r1
 80108ca:	bfa4      	itt	ge
 80108cc:	460c      	movge	r4, r1
 80108ce:	461f      	movge	r7, r3
 80108d0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80108d4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80108d8:	68a3      	ldr	r3, [r4, #8]
 80108da:	6861      	ldr	r1, [r4, #4]
 80108dc:	eb0a 0609 	add.w	r6, sl, r9
 80108e0:	42b3      	cmp	r3, r6
 80108e2:	b085      	sub	sp, #20
 80108e4:	bfb8      	it	lt
 80108e6:	3101      	addlt	r1, #1
 80108e8:	f7ff fe92 	bl	8010610 <_Balloc>
 80108ec:	b930      	cbnz	r0, 80108fc <__multiply+0x44>
 80108ee:	4602      	mov	r2, r0
 80108f0:	4b44      	ldr	r3, [pc, #272]	@ (8010a04 <__multiply+0x14c>)
 80108f2:	4845      	ldr	r0, [pc, #276]	@ (8010a08 <__multiply+0x150>)
 80108f4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80108f8:	f001 f96e 	bl	8011bd8 <__assert_func>
 80108fc:	f100 0514 	add.w	r5, r0, #20
 8010900:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8010904:	462b      	mov	r3, r5
 8010906:	2200      	movs	r2, #0
 8010908:	4543      	cmp	r3, r8
 801090a:	d321      	bcc.n	8010950 <__multiply+0x98>
 801090c:	f107 0114 	add.w	r1, r7, #20
 8010910:	f104 0214 	add.w	r2, r4, #20
 8010914:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8010918:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 801091c:	9302      	str	r3, [sp, #8]
 801091e:	1b13      	subs	r3, r2, r4
 8010920:	3b15      	subs	r3, #21
 8010922:	f023 0303 	bic.w	r3, r3, #3
 8010926:	3304      	adds	r3, #4
 8010928:	f104 0715 	add.w	r7, r4, #21
 801092c:	42ba      	cmp	r2, r7
 801092e:	bf38      	it	cc
 8010930:	2304      	movcc	r3, #4
 8010932:	9301      	str	r3, [sp, #4]
 8010934:	9b02      	ldr	r3, [sp, #8]
 8010936:	9103      	str	r1, [sp, #12]
 8010938:	428b      	cmp	r3, r1
 801093a:	d80c      	bhi.n	8010956 <__multiply+0x9e>
 801093c:	2e00      	cmp	r6, #0
 801093e:	dd03      	ble.n	8010948 <__multiply+0x90>
 8010940:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010944:	2b00      	cmp	r3, #0
 8010946:	d05b      	beq.n	8010a00 <__multiply+0x148>
 8010948:	6106      	str	r6, [r0, #16]
 801094a:	b005      	add	sp, #20
 801094c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010950:	f843 2b04 	str.w	r2, [r3], #4
 8010954:	e7d8      	b.n	8010908 <__multiply+0x50>
 8010956:	f8b1 a000 	ldrh.w	sl, [r1]
 801095a:	f1ba 0f00 	cmp.w	sl, #0
 801095e:	d024      	beq.n	80109aa <__multiply+0xf2>
 8010960:	f104 0e14 	add.w	lr, r4, #20
 8010964:	46a9      	mov	r9, r5
 8010966:	f04f 0c00 	mov.w	ip, #0
 801096a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801096e:	f8d9 3000 	ldr.w	r3, [r9]
 8010972:	fa1f fb87 	uxth.w	fp, r7
 8010976:	b29b      	uxth	r3, r3
 8010978:	fb0a 330b 	mla	r3, sl, fp, r3
 801097c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8010980:	f8d9 7000 	ldr.w	r7, [r9]
 8010984:	4463      	add	r3, ip
 8010986:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801098a:	fb0a c70b 	mla	r7, sl, fp, ip
 801098e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8010992:	b29b      	uxth	r3, r3
 8010994:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8010998:	4572      	cmp	r2, lr
 801099a:	f849 3b04 	str.w	r3, [r9], #4
 801099e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80109a2:	d8e2      	bhi.n	801096a <__multiply+0xb2>
 80109a4:	9b01      	ldr	r3, [sp, #4]
 80109a6:	f845 c003 	str.w	ip, [r5, r3]
 80109aa:	9b03      	ldr	r3, [sp, #12]
 80109ac:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80109b0:	3104      	adds	r1, #4
 80109b2:	f1b9 0f00 	cmp.w	r9, #0
 80109b6:	d021      	beq.n	80109fc <__multiply+0x144>
 80109b8:	682b      	ldr	r3, [r5, #0]
 80109ba:	f104 0c14 	add.w	ip, r4, #20
 80109be:	46ae      	mov	lr, r5
 80109c0:	f04f 0a00 	mov.w	sl, #0
 80109c4:	f8bc b000 	ldrh.w	fp, [ip]
 80109c8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80109cc:	fb09 770b 	mla	r7, r9, fp, r7
 80109d0:	4457      	add	r7, sl
 80109d2:	b29b      	uxth	r3, r3
 80109d4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80109d8:	f84e 3b04 	str.w	r3, [lr], #4
 80109dc:	f85c 3b04 	ldr.w	r3, [ip], #4
 80109e0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80109e4:	f8be 3000 	ldrh.w	r3, [lr]
 80109e8:	fb09 330a 	mla	r3, r9, sl, r3
 80109ec:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80109f0:	4562      	cmp	r2, ip
 80109f2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80109f6:	d8e5      	bhi.n	80109c4 <__multiply+0x10c>
 80109f8:	9f01      	ldr	r7, [sp, #4]
 80109fa:	51eb      	str	r3, [r5, r7]
 80109fc:	3504      	adds	r5, #4
 80109fe:	e799      	b.n	8010934 <__multiply+0x7c>
 8010a00:	3e01      	subs	r6, #1
 8010a02:	e79b      	b.n	801093c <__multiply+0x84>
 8010a04:	080127b3 	.word	0x080127b3
 8010a08:	08012824 	.word	0x08012824

08010a0c <__pow5mult>:
 8010a0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010a10:	4615      	mov	r5, r2
 8010a12:	f012 0203 	ands.w	r2, r2, #3
 8010a16:	4607      	mov	r7, r0
 8010a18:	460e      	mov	r6, r1
 8010a1a:	d007      	beq.n	8010a2c <__pow5mult+0x20>
 8010a1c:	4c25      	ldr	r4, [pc, #148]	@ (8010ab4 <__pow5mult+0xa8>)
 8010a1e:	3a01      	subs	r2, #1
 8010a20:	2300      	movs	r3, #0
 8010a22:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010a26:	f7ff fe55 	bl	80106d4 <__multadd>
 8010a2a:	4606      	mov	r6, r0
 8010a2c:	10ad      	asrs	r5, r5, #2
 8010a2e:	d03d      	beq.n	8010aac <__pow5mult+0xa0>
 8010a30:	69fc      	ldr	r4, [r7, #28]
 8010a32:	b97c      	cbnz	r4, 8010a54 <__pow5mult+0x48>
 8010a34:	2010      	movs	r0, #16
 8010a36:	f7fc fda7 	bl	800d588 <malloc>
 8010a3a:	4602      	mov	r2, r0
 8010a3c:	61f8      	str	r0, [r7, #28]
 8010a3e:	b928      	cbnz	r0, 8010a4c <__pow5mult+0x40>
 8010a40:	4b1d      	ldr	r3, [pc, #116]	@ (8010ab8 <__pow5mult+0xac>)
 8010a42:	481e      	ldr	r0, [pc, #120]	@ (8010abc <__pow5mult+0xb0>)
 8010a44:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8010a48:	f001 f8c6 	bl	8011bd8 <__assert_func>
 8010a4c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010a50:	6004      	str	r4, [r0, #0]
 8010a52:	60c4      	str	r4, [r0, #12]
 8010a54:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8010a58:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010a5c:	b94c      	cbnz	r4, 8010a72 <__pow5mult+0x66>
 8010a5e:	f240 2171 	movw	r1, #625	@ 0x271
 8010a62:	4638      	mov	r0, r7
 8010a64:	f7ff ff12 	bl	801088c <__i2b>
 8010a68:	2300      	movs	r3, #0
 8010a6a:	f8c8 0008 	str.w	r0, [r8, #8]
 8010a6e:	4604      	mov	r4, r0
 8010a70:	6003      	str	r3, [r0, #0]
 8010a72:	f04f 0900 	mov.w	r9, #0
 8010a76:	07eb      	lsls	r3, r5, #31
 8010a78:	d50a      	bpl.n	8010a90 <__pow5mult+0x84>
 8010a7a:	4631      	mov	r1, r6
 8010a7c:	4622      	mov	r2, r4
 8010a7e:	4638      	mov	r0, r7
 8010a80:	f7ff ff1a 	bl	80108b8 <__multiply>
 8010a84:	4631      	mov	r1, r6
 8010a86:	4680      	mov	r8, r0
 8010a88:	4638      	mov	r0, r7
 8010a8a:	f7ff fe01 	bl	8010690 <_Bfree>
 8010a8e:	4646      	mov	r6, r8
 8010a90:	106d      	asrs	r5, r5, #1
 8010a92:	d00b      	beq.n	8010aac <__pow5mult+0xa0>
 8010a94:	6820      	ldr	r0, [r4, #0]
 8010a96:	b938      	cbnz	r0, 8010aa8 <__pow5mult+0x9c>
 8010a98:	4622      	mov	r2, r4
 8010a9a:	4621      	mov	r1, r4
 8010a9c:	4638      	mov	r0, r7
 8010a9e:	f7ff ff0b 	bl	80108b8 <__multiply>
 8010aa2:	6020      	str	r0, [r4, #0]
 8010aa4:	f8c0 9000 	str.w	r9, [r0]
 8010aa8:	4604      	mov	r4, r0
 8010aaa:	e7e4      	b.n	8010a76 <__pow5mult+0x6a>
 8010aac:	4630      	mov	r0, r6
 8010aae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010ab2:	bf00      	nop
 8010ab4:	08012880 	.word	0x08012880
 8010ab8:	08012744 	.word	0x08012744
 8010abc:	08012824 	.word	0x08012824

08010ac0 <__lshift>:
 8010ac0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010ac4:	460c      	mov	r4, r1
 8010ac6:	6849      	ldr	r1, [r1, #4]
 8010ac8:	6923      	ldr	r3, [r4, #16]
 8010aca:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010ace:	68a3      	ldr	r3, [r4, #8]
 8010ad0:	4607      	mov	r7, r0
 8010ad2:	4691      	mov	r9, r2
 8010ad4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010ad8:	f108 0601 	add.w	r6, r8, #1
 8010adc:	42b3      	cmp	r3, r6
 8010ade:	db0b      	blt.n	8010af8 <__lshift+0x38>
 8010ae0:	4638      	mov	r0, r7
 8010ae2:	f7ff fd95 	bl	8010610 <_Balloc>
 8010ae6:	4605      	mov	r5, r0
 8010ae8:	b948      	cbnz	r0, 8010afe <__lshift+0x3e>
 8010aea:	4602      	mov	r2, r0
 8010aec:	4b28      	ldr	r3, [pc, #160]	@ (8010b90 <__lshift+0xd0>)
 8010aee:	4829      	ldr	r0, [pc, #164]	@ (8010b94 <__lshift+0xd4>)
 8010af0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8010af4:	f001 f870 	bl	8011bd8 <__assert_func>
 8010af8:	3101      	adds	r1, #1
 8010afa:	005b      	lsls	r3, r3, #1
 8010afc:	e7ee      	b.n	8010adc <__lshift+0x1c>
 8010afe:	2300      	movs	r3, #0
 8010b00:	f100 0114 	add.w	r1, r0, #20
 8010b04:	f100 0210 	add.w	r2, r0, #16
 8010b08:	4618      	mov	r0, r3
 8010b0a:	4553      	cmp	r3, sl
 8010b0c:	db33      	blt.n	8010b76 <__lshift+0xb6>
 8010b0e:	6920      	ldr	r0, [r4, #16]
 8010b10:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010b14:	f104 0314 	add.w	r3, r4, #20
 8010b18:	f019 091f 	ands.w	r9, r9, #31
 8010b1c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010b20:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010b24:	d02b      	beq.n	8010b7e <__lshift+0xbe>
 8010b26:	f1c9 0e20 	rsb	lr, r9, #32
 8010b2a:	468a      	mov	sl, r1
 8010b2c:	2200      	movs	r2, #0
 8010b2e:	6818      	ldr	r0, [r3, #0]
 8010b30:	fa00 f009 	lsl.w	r0, r0, r9
 8010b34:	4310      	orrs	r0, r2
 8010b36:	f84a 0b04 	str.w	r0, [sl], #4
 8010b3a:	f853 2b04 	ldr.w	r2, [r3], #4
 8010b3e:	459c      	cmp	ip, r3
 8010b40:	fa22 f20e 	lsr.w	r2, r2, lr
 8010b44:	d8f3      	bhi.n	8010b2e <__lshift+0x6e>
 8010b46:	ebac 0304 	sub.w	r3, ip, r4
 8010b4a:	3b15      	subs	r3, #21
 8010b4c:	f023 0303 	bic.w	r3, r3, #3
 8010b50:	3304      	adds	r3, #4
 8010b52:	f104 0015 	add.w	r0, r4, #21
 8010b56:	4584      	cmp	ip, r0
 8010b58:	bf38      	it	cc
 8010b5a:	2304      	movcc	r3, #4
 8010b5c:	50ca      	str	r2, [r1, r3]
 8010b5e:	b10a      	cbz	r2, 8010b64 <__lshift+0xa4>
 8010b60:	f108 0602 	add.w	r6, r8, #2
 8010b64:	3e01      	subs	r6, #1
 8010b66:	4638      	mov	r0, r7
 8010b68:	612e      	str	r6, [r5, #16]
 8010b6a:	4621      	mov	r1, r4
 8010b6c:	f7ff fd90 	bl	8010690 <_Bfree>
 8010b70:	4628      	mov	r0, r5
 8010b72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010b76:	f842 0f04 	str.w	r0, [r2, #4]!
 8010b7a:	3301      	adds	r3, #1
 8010b7c:	e7c5      	b.n	8010b0a <__lshift+0x4a>
 8010b7e:	3904      	subs	r1, #4
 8010b80:	f853 2b04 	ldr.w	r2, [r3], #4
 8010b84:	f841 2f04 	str.w	r2, [r1, #4]!
 8010b88:	459c      	cmp	ip, r3
 8010b8a:	d8f9      	bhi.n	8010b80 <__lshift+0xc0>
 8010b8c:	e7ea      	b.n	8010b64 <__lshift+0xa4>
 8010b8e:	bf00      	nop
 8010b90:	080127b3 	.word	0x080127b3
 8010b94:	08012824 	.word	0x08012824

08010b98 <__mcmp>:
 8010b98:	690a      	ldr	r2, [r1, #16]
 8010b9a:	4603      	mov	r3, r0
 8010b9c:	6900      	ldr	r0, [r0, #16]
 8010b9e:	1a80      	subs	r0, r0, r2
 8010ba0:	b530      	push	{r4, r5, lr}
 8010ba2:	d10e      	bne.n	8010bc2 <__mcmp+0x2a>
 8010ba4:	3314      	adds	r3, #20
 8010ba6:	3114      	adds	r1, #20
 8010ba8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8010bac:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8010bb0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8010bb4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8010bb8:	4295      	cmp	r5, r2
 8010bba:	d003      	beq.n	8010bc4 <__mcmp+0x2c>
 8010bbc:	d205      	bcs.n	8010bca <__mcmp+0x32>
 8010bbe:	f04f 30ff 	mov.w	r0, #4294967295
 8010bc2:	bd30      	pop	{r4, r5, pc}
 8010bc4:	42a3      	cmp	r3, r4
 8010bc6:	d3f3      	bcc.n	8010bb0 <__mcmp+0x18>
 8010bc8:	e7fb      	b.n	8010bc2 <__mcmp+0x2a>
 8010bca:	2001      	movs	r0, #1
 8010bcc:	e7f9      	b.n	8010bc2 <__mcmp+0x2a>
	...

08010bd0 <__mdiff>:
 8010bd0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010bd4:	4689      	mov	r9, r1
 8010bd6:	4606      	mov	r6, r0
 8010bd8:	4611      	mov	r1, r2
 8010bda:	4648      	mov	r0, r9
 8010bdc:	4614      	mov	r4, r2
 8010bde:	f7ff ffdb 	bl	8010b98 <__mcmp>
 8010be2:	1e05      	subs	r5, r0, #0
 8010be4:	d112      	bne.n	8010c0c <__mdiff+0x3c>
 8010be6:	4629      	mov	r1, r5
 8010be8:	4630      	mov	r0, r6
 8010bea:	f7ff fd11 	bl	8010610 <_Balloc>
 8010bee:	4602      	mov	r2, r0
 8010bf0:	b928      	cbnz	r0, 8010bfe <__mdiff+0x2e>
 8010bf2:	4b3f      	ldr	r3, [pc, #252]	@ (8010cf0 <__mdiff+0x120>)
 8010bf4:	f240 2137 	movw	r1, #567	@ 0x237
 8010bf8:	483e      	ldr	r0, [pc, #248]	@ (8010cf4 <__mdiff+0x124>)
 8010bfa:	f000 ffed 	bl	8011bd8 <__assert_func>
 8010bfe:	2301      	movs	r3, #1
 8010c00:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010c04:	4610      	mov	r0, r2
 8010c06:	b003      	add	sp, #12
 8010c08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c0c:	bfbc      	itt	lt
 8010c0e:	464b      	movlt	r3, r9
 8010c10:	46a1      	movlt	r9, r4
 8010c12:	4630      	mov	r0, r6
 8010c14:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8010c18:	bfba      	itte	lt
 8010c1a:	461c      	movlt	r4, r3
 8010c1c:	2501      	movlt	r5, #1
 8010c1e:	2500      	movge	r5, #0
 8010c20:	f7ff fcf6 	bl	8010610 <_Balloc>
 8010c24:	4602      	mov	r2, r0
 8010c26:	b918      	cbnz	r0, 8010c30 <__mdiff+0x60>
 8010c28:	4b31      	ldr	r3, [pc, #196]	@ (8010cf0 <__mdiff+0x120>)
 8010c2a:	f240 2145 	movw	r1, #581	@ 0x245
 8010c2e:	e7e3      	b.n	8010bf8 <__mdiff+0x28>
 8010c30:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8010c34:	6926      	ldr	r6, [r4, #16]
 8010c36:	60c5      	str	r5, [r0, #12]
 8010c38:	f109 0310 	add.w	r3, r9, #16
 8010c3c:	f109 0514 	add.w	r5, r9, #20
 8010c40:	f104 0e14 	add.w	lr, r4, #20
 8010c44:	f100 0b14 	add.w	fp, r0, #20
 8010c48:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8010c4c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8010c50:	9301      	str	r3, [sp, #4]
 8010c52:	46d9      	mov	r9, fp
 8010c54:	f04f 0c00 	mov.w	ip, #0
 8010c58:	9b01      	ldr	r3, [sp, #4]
 8010c5a:	f85e 0b04 	ldr.w	r0, [lr], #4
 8010c5e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8010c62:	9301      	str	r3, [sp, #4]
 8010c64:	fa1f f38a 	uxth.w	r3, sl
 8010c68:	4619      	mov	r1, r3
 8010c6a:	b283      	uxth	r3, r0
 8010c6c:	1acb      	subs	r3, r1, r3
 8010c6e:	0c00      	lsrs	r0, r0, #16
 8010c70:	4463      	add	r3, ip
 8010c72:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8010c76:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8010c7a:	b29b      	uxth	r3, r3
 8010c7c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8010c80:	4576      	cmp	r6, lr
 8010c82:	f849 3b04 	str.w	r3, [r9], #4
 8010c86:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8010c8a:	d8e5      	bhi.n	8010c58 <__mdiff+0x88>
 8010c8c:	1b33      	subs	r3, r6, r4
 8010c8e:	3b15      	subs	r3, #21
 8010c90:	f023 0303 	bic.w	r3, r3, #3
 8010c94:	3415      	adds	r4, #21
 8010c96:	3304      	adds	r3, #4
 8010c98:	42a6      	cmp	r6, r4
 8010c9a:	bf38      	it	cc
 8010c9c:	2304      	movcc	r3, #4
 8010c9e:	441d      	add	r5, r3
 8010ca0:	445b      	add	r3, fp
 8010ca2:	461e      	mov	r6, r3
 8010ca4:	462c      	mov	r4, r5
 8010ca6:	4544      	cmp	r4, r8
 8010ca8:	d30e      	bcc.n	8010cc8 <__mdiff+0xf8>
 8010caa:	f108 0103 	add.w	r1, r8, #3
 8010cae:	1b49      	subs	r1, r1, r5
 8010cb0:	f021 0103 	bic.w	r1, r1, #3
 8010cb4:	3d03      	subs	r5, #3
 8010cb6:	45a8      	cmp	r8, r5
 8010cb8:	bf38      	it	cc
 8010cba:	2100      	movcc	r1, #0
 8010cbc:	440b      	add	r3, r1
 8010cbe:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010cc2:	b191      	cbz	r1, 8010cea <__mdiff+0x11a>
 8010cc4:	6117      	str	r7, [r2, #16]
 8010cc6:	e79d      	b.n	8010c04 <__mdiff+0x34>
 8010cc8:	f854 1b04 	ldr.w	r1, [r4], #4
 8010ccc:	46e6      	mov	lr, ip
 8010cce:	0c08      	lsrs	r0, r1, #16
 8010cd0:	fa1c fc81 	uxtah	ip, ip, r1
 8010cd4:	4471      	add	r1, lr
 8010cd6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8010cda:	b289      	uxth	r1, r1
 8010cdc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8010ce0:	f846 1b04 	str.w	r1, [r6], #4
 8010ce4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8010ce8:	e7dd      	b.n	8010ca6 <__mdiff+0xd6>
 8010cea:	3f01      	subs	r7, #1
 8010cec:	e7e7      	b.n	8010cbe <__mdiff+0xee>
 8010cee:	bf00      	nop
 8010cf0:	080127b3 	.word	0x080127b3
 8010cf4:	08012824 	.word	0x08012824

08010cf8 <__ulp>:
 8010cf8:	b082      	sub	sp, #8
 8010cfa:	ed8d 0b00 	vstr	d0, [sp]
 8010cfe:	9a01      	ldr	r2, [sp, #4]
 8010d00:	4b0f      	ldr	r3, [pc, #60]	@ (8010d40 <__ulp+0x48>)
 8010d02:	4013      	ands	r3, r2
 8010d04:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8010d08:	2b00      	cmp	r3, #0
 8010d0a:	dc08      	bgt.n	8010d1e <__ulp+0x26>
 8010d0c:	425b      	negs	r3, r3
 8010d0e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8010d12:	ea4f 5223 	mov.w	r2, r3, asr #20
 8010d16:	da04      	bge.n	8010d22 <__ulp+0x2a>
 8010d18:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8010d1c:	4113      	asrs	r3, r2
 8010d1e:	2200      	movs	r2, #0
 8010d20:	e008      	b.n	8010d34 <__ulp+0x3c>
 8010d22:	f1a2 0314 	sub.w	r3, r2, #20
 8010d26:	2b1e      	cmp	r3, #30
 8010d28:	bfda      	itte	le
 8010d2a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8010d2e:	40da      	lsrle	r2, r3
 8010d30:	2201      	movgt	r2, #1
 8010d32:	2300      	movs	r3, #0
 8010d34:	4619      	mov	r1, r3
 8010d36:	4610      	mov	r0, r2
 8010d38:	ec41 0b10 	vmov	d0, r0, r1
 8010d3c:	b002      	add	sp, #8
 8010d3e:	4770      	bx	lr
 8010d40:	7ff00000 	.word	0x7ff00000

08010d44 <__b2d>:
 8010d44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010d48:	6906      	ldr	r6, [r0, #16]
 8010d4a:	f100 0814 	add.w	r8, r0, #20
 8010d4e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8010d52:	1f37      	subs	r7, r6, #4
 8010d54:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8010d58:	4610      	mov	r0, r2
 8010d5a:	f7ff fd4b 	bl	80107f4 <__hi0bits>
 8010d5e:	f1c0 0320 	rsb	r3, r0, #32
 8010d62:	280a      	cmp	r0, #10
 8010d64:	600b      	str	r3, [r1, #0]
 8010d66:	491b      	ldr	r1, [pc, #108]	@ (8010dd4 <__b2d+0x90>)
 8010d68:	dc15      	bgt.n	8010d96 <__b2d+0x52>
 8010d6a:	f1c0 0c0b 	rsb	ip, r0, #11
 8010d6e:	fa22 f30c 	lsr.w	r3, r2, ip
 8010d72:	45b8      	cmp	r8, r7
 8010d74:	ea43 0501 	orr.w	r5, r3, r1
 8010d78:	bf34      	ite	cc
 8010d7a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8010d7e:	2300      	movcs	r3, #0
 8010d80:	3015      	adds	r0, #21
 8010d82:	fa02 f000 	lsl.w	r0, r2, r0
 8010d86:	fa23 f30c 	lsr.w	r3, r3, ip
 8010d8a:	4303      	orrs	r3, r0
 8010d8c:	461c      	mov	r4, r3
 8010d8e:	ec45 4b10 	vmov	d0, r4, r5
 8010d92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010d96:	45b8      	cmp	r8, r7
 8010d98:	bf3a      	itte	cc
 8010d9a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8010d9e:	f1a6 0708 	subcc.w	r7, r6, #8
 8010da2:	2300      	movcs	r3, #0
 8010da4:	380b      	subs	r0, #11
 8010da6:	d012      	beq.n	8010dce <__b2d+0x8a>
 8010da8:	f1c0 0120 	rsb	r1, r0, #32
 8010dac:	fa23 f401 	lsr.w	r4, r3, r1
 8010db0:	4082      	lsls	r2, r0
 8010db2:	4322      	orrs	r2, r4
 8010db4:	4547      	cmp	r7, r8
 8010db6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8010dba:	bf8c      	ite	hi
 8010dbc:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8010dc0:	2200      	movls	r2, #0
 8010dc2:	4083      	lsls	r3, r0
 8010dc4:	40ca      	lsrs	r2, r1
 8010dc6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8010dca:	4313      	orrs	r3, r2
 8010dcc:	e7de      	b.n	8010d8c <__b2d+0x48>
 8010dce:	ea42 0501 	orr.w	r5, r2, r1
 8010dd2:	e7db      	b.n	8010d8c <__b2d+0x48>
 8010dd4:	3ff00000 	.word	0x3ff00000

08010dd8 <__d2b>:
 8010dd8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010ddc:	460f      	mov	r7, r1
 8010dde:	2101      	movs	r1, #1
 8010de0:	ec59 8b10 	vmov	r8, r9, d0
 8010de4:	4616      	mov	r6, r2
 8010de6:	f7ff fc13 	bl	8010610 <_Balloc>
 8010dea:	4604      	mov	r4, r0
 8010dec:	b930      	cbnz	r0, 8010dfc <__d2b+0x24>
 8010dee:	4602      	mov	r2, r0
 8010df0:	4b23      	ldr	r3, [pc, #140]	@ (8010e80 <__d2b+0xa8>)
 8010df2:	4824      	ldr	r0, [pc, #144]	@ (8010e84 <__d2b+0xac>)
 8010df4:	f240 310f 	movw	r1, #783	@ 0x30f
 8010df8:	f000 feee 	bl	8011bd8 <__assert_func>
 8010dfc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8010e00:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010e04:	b10d      	cbz	r5, 8010e0a <__d2b+0x32>
 8010e06:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8010e0a:	9301      	str	r3, [sp, #4]
 8010e0c:	f1b8 0300 	subs.w	r3, r8, #0
 8010e10:	d023      	beq.n	8010e5a <__d2b+0x82>
 8010e12:	4668      	mov	r0, sp
 8010e14:	9300      	str	r3, [sp, #0]
 8010e16:	f7ff fd0c 	bl	8010832 <__lo0bits>
 8010e1a:	e9dd 1200 	ldrd	r1, r2, [sp]
 8010e1e:	b1d0      	cbz	r0, 8010e56 <__d2b+0x7e>
 8010e20:	f1c0 0320 	rsb	r3, r0, #32
 8010e24:	fa02 f303 	lsl.w	r3, r2, r3
 8010e28:	430b      	orrs	r3, r1
 8010e2a:	40c2      	lsrs	r2, r0
 8010e2c:	6163      	str	r3, [r4, #20]
 8010e2e:	9201      	str	r2, [sp, #4]
 8010e30:	9b01      	ldr	r3, [sp, #4]
 8010e32:	61a3      	str	r3, [r4, #24]
 8010e34:	2b00      	cmp	r3, #0
 8010e36:	bf0c      	ite	eq
 8010e38:	2201      	moveq	r2, #1
 8010e3a:	2202      	movne	r2, #2
 8010e3c:	6122      	str	r2, [r4, #16]
 8010e3e:	b1a5      	cbz	r5, 8010e6a <__d2b+0x92>
 8010e40:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8010e44:	4405      	add	r5, r0
 8010e46:	603d      	str	r5, [r7, #0]
 8010e48:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8010e4c:	6030      	str	r0, [r6, #0]
 8010e4e:	4620      	mov	r0, r4
 8010e50:	b003      	add	sp, #12
 8010e52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010e56:	6161      	str	r1, [r4, #20]
 8010e58:	e7ea      	b.n	8010e30 <__d2b+0x58>
 8010e5a:	a801      	add	r0, sp, #4
 8010e5c:	f7ff fce9 	bl	8010832 <__lo0bits>
 8010e60:	9b01      	ldr	r3, [sp, #4]
 8010e62:	6163      	str	r3, [r4, #20]
 8010e64:	3020      	adds	r0, #32
 8010e66:	2201      	movs	r2, #1
 8010e68:	e7e8      	b.n	8010e3c <__d2b+0x64>
 8010e6a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010e6e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8010e72:	6038      	str	r0, [r7, #0]
 8010e74:	6918      	ldr	r0, [r3, #16]
 8010e76:	f7ff fcbd 	bl	80107f4 <__hi0bits>
 8010e7a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8010e7e:	e7e5      	b.n	8010e4c <__d2b+0x74>
 8010e80:	080127b3 	.word	0x080127b3
 8010e84:	08012824 	.word	0x08012824

08010e88 <__ratio>:
 8010e88:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e8c:	4688      	mov	r8, r1
 8010e8e:	4669      	mov	r1, sp
 8010e90:	4681      	mov	r9, r0
 8010e92:	f7ff ff57 	bl	8010d44 <__b2d>
 8010e96:	a901      	add	r1, sp, #4
 8010e98:	4640      	mov	r0, r8
 8010e9a:	ec55 4b10 	vmov	r4, r5, d0
 8010e9e:	f7ff ff51 	bl	8010d44 <__b2d>
 8010ea2:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8010ea6:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8010eaa:	1ad2      	subs	r2, r2, r3
 8010eac:	e9dd 3100 	ldrd	r3, r1, [sp]
 8010eb0:	1a5b      	subs	r3, r3, r1
 8010eb2:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 8010eb6:	ec57 6b10 	vmov	r6, r7, d0
 8010eba:	2b00      	cmp	r3, #0
 8010ebc:	bfd6      	itet	le
 8010ebe:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8010ec2:	462a      	movgt	r2, r5
 8010ec4:	463a      	movle	r2, r7
 8010ec6:	46ab      	mov	fp, r5
 8010ec8:	46a2      	mov	sl, r4
 8010eca:	bfce      	itee	gt
 8010ecc:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8010ed0:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 8010ed4:	ee00 3a90 	vmovle	s1, r3
 8010ed8:	ec4b ab17 	vmov	d7, sl, fp
 8010edc:	ee87 0b00 	vdiv.f64	d0, d7, d0
 8010ee0:	b003      	add	sp, #12
 8010ee2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010ee6 <__copybits>:
 8010ee6:	3901      	subs	r1, #1
 8010ee8:	b570      	push	{r4, r5, r6, lr}
 8010eea:	1149      	asrs	r1, r1, #5
 8010eec:	6914      	ldr	r4, [r2, #16]
 8010eee:	3101      	adds	r1, #1
 8010ef0:	f102 0314 	add.w	r3, r2, #20
 8010ef4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8010ef8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8010efc:	1f05      	subs	r5, r0, #4
 8010efe:	42a3      	cmp	r3, r4
 8010f00:	d30c      	bcc.n	8010f1c <__copybits+0x36>
 8010f02:	1aa3      	subs	r3, r4, r2
 8010f04:	3b11      	subs	r3, #17
 8010f06:	f023 0303 	bic.w	r3, r3, #3
 8010f0a:	3211      	adds	r2, #17
 8010f0c:	42a2      	cmp	r2, r4
 8010f0e:	bf88      	it	hi
 8010f10:	2300      	movhi	r3, #0
 8010f12:	4418      	add	r0, r3
 8010f14:	2300      	movs	r3, #0
 8010f16:	4288      	cmp	r0, r1
 8010f18:	d305      	bcc.n	8010f26 <__copybits+0x40>
 8010f1a:	bd70      	pop	{r4, r5, r6, pc}
 8010f1c:	f853 6b04 	ldr.w	r6, [r3], #4
 8010f20:	f845 6f04 	str.w	r6, [r5, #4]!
 8010f24:	e7eb      	b.n	8010efe <__copybits+0x18>
 8010f26:	f840 3b04 	str.w	r3, [r0], #4
 8010f2a:	e7f4      	b.n	8010f16 <__copybits+0x30>

08010f2c <__any_on>:
 8010f2c:	f100 0214 	add.w	r2, r0, #20
 8010f30:	6900      	ldr	r0, [r0, #16]
 8010f32:	114b      	asrs	r3, r1, #5
 8010f34:	4298      	cmp	r0, r3
 8010f36:	b510      	push	{r4, lr}
 8010f38:	db11      	blt.n	8010f5e <__any_on+0x32>
 8010f3a:	dd0a      	ble.n	8010f52 <__any_on+0x26>
 8010f3c:	f011 011f 	ands.w	r1, r1, #31
 8010f40:	d007      	beq.n	8010f52 <__any_on+0x26>
 8010f42:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8010f46:	fa24 f001 	lsr.w	r0, r4, r1
 8010f4a:	fa00 f101 	lsl.w	r1, r0, r1
 8010f4e:	428c      	cmp	r4, r1
 8010f50:	d10b      	bne.n	8010f6a <__any_on+0x3e>
 8010f52:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010f56:	4293      	cmp	r3, r2
 8010f58:	d803      	bhi.n	8010f62 <__any_on+0x36>
 8010f5a:	2000      	movs	r0, #0
 8010f5c:	bd10      	pop	{r4, pc}
 8010f5e:	4603      	mov	r3, r0
 8010f60:	e7f7      	b.n	8010f52 <__any_on+0x26>
 8010f62:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010f66:	2900      	cmp	r1, #0
 8010f68:	d0f5      	beq.n	8010f56 <__any_on+0x2a>
 8010f6a:	2001      	movs	r0, #1
 8010f6c:	e7f6      	b.n	8010f5c <__any_on+0x30>
	...

08010f70 <_strtol_l.constprop.0>:
 8010f70:	2b24      	cmp	r3, #36	@ 0x24
 8010f72:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010f76:	4686      	mov	lr, r0
 8010f78:	4690      	mov	r8, r2
 8010f7a:	d801      	bhi.n	8010f80 <_strtol_l.constprop.0+0x10>
 8010f7c:	2b01      	cmp	r3, #1
 8010f7e:	d106      	bne.n	8010f8e <_strtol_l.constprop.0+0x1e>
 8010f80:	f7fe f984 	bl	800f28c <__errno>
 8010f84:	2316      	movs	r3, #22
 8010f86:	6003      	str	r3, [r0, #0]
 8010f88:	2000      	movs	r0, #0
 8010f8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010f8e:	4834      	ldr	r0, [pc, #208]	@ (8011060 <_strtol_l.constprop.0+0xf0>)
 8010f90:	460d      	mov	r5, r1
 8010f92:	462a      	mov	r2, r5
 8010f94:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010f98:	5d06      	ldrb	r6, [r0, r4]
 8010f9a:	f016 0608 	ands.w	r6, r6, #8
 8010f9e:	d1f8      	bne.n	8010f92 <_strtol_l.constprop.0+0x22>
 8010fa0:	2c2d      	cmp	r4, #45	@ 0x2d
 8010fa2:	d12d      	bne.n	8011000 <_strtol_l.constprop.0+0x90>
 8010fa4:	782c      	ldrb	r4, [r5, #0]
 8010fa6:	2601      	movs	r6, #1
 8010fa8:	1c95      	adds	r5, r2, #2
 8010faa:	f033 0210 	bics.w	r2, r3, #16
 8010fae:	d109      	bne.n	8010fc4 <_strtol_l.constprop.0+0x54>
 8010fb0:	2c30      	cmp	r4, #48	@ 0x30
 8010fb2:	d12a      	bne.n	801100a <_strtol_l.constprop.0+0x9a>
 8010fb4:	782a      	ldrb	r2, [r5, #0]
 8010fb6:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8010fba:	2a58      	cmp	r2, #88	@ 0x58
 8010fbc:	d125      	bne.n	801100a <_strtol_l.constprop.0+0x9a>
 8010fbe:	786c      	ldrb	r4, [r5, #1]
 8010fc0:	2310      	movs	r3, #16
 8010fc2:	3502      	adds	r5, #2
 8010fc4:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8010fc8:	f10c 3cff 	add.w	ip, ip, #4294967295
 8010fcc:	2200      	movs	r2, #0
 8010fce:	fbbc f9f3 	udiv	r9, ip, r3
 8010fd2:	4610      	mov	r0, r2
 8010fd4:	fb03 ca19 	mls	sl, r3, r9, ip
 8010fd8:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8010fdc:	2f09      	cmp	r7, #9
 8010fde:	d81b      	bhi.n	8011018 <_strtol_l.constprop.0+0xa8>
 8010fe0:	463c      	mov	r4, r7
 8010fe2:	42a3      	cmp	r3, r4
 8010fe4:	dd27      	ble.n	8011036 <_strtol_l.constprop.0+0xc6>
 8010fe6:	1c57      	adds	r7, r2, #1
 8010fe8:	d007      	beq.n	8010ffa <_strtol_l.constprop.0+0x8a>
 8010fea:	4581      	cmp	r9, r0
 8010fec:	d320      	bcc.n	8011030 <_strtol_l.constprop.0+0xc0>
 8010fee:	d101      	bne.n	8010ff4 <_strtol_l.constprop.0+0x84>
 8010ff0:	45a2      	cmp	sl, r4
 8010ff2:	db1d      	blt.n	8011030 <_strtol_l.constprop.0+0xc0>
 8010ff4:	fb00 4003 	mla	r0, r0, r3, r4
 8010ff8:	2201      	movs	r2, #1
 8010ffa:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010ffe:	e7eb      	b.n	8010fd8 <_strtol_l.constprop.0+0x68>
 8011000:	2c2b      	cmp	r4, #43	@ 0x2b
 8011002:	bf04      	itt	eq
 8011004:	782c      	ldrbeq	r4, [r5, #0]
 8011006:	1c95      	addeq	r5, r2, #2
 8011008:	e7cf      	b.n	8010faa <_strtol_l.constprop.0+0x3a>
 801100a:	2b00      	cmp	r3, #0
 801100c:	d1da      	bne.n	8010fc4 <_strtol_l.constprop.0+0x54>
 801100e:	2c30      	cmp	r4, #48	@ 0x30
 8011010:	bf0c      	ite	eq
 8011012:	2308      	moveq	r3, #8
 8011014:	230a      	movne	r3, #10
 8011016:	e7d5      	b.n	8010fc4 <_strtol_l.constprop.0+0x54>
 8011018:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 801101c:	2f19      	cmp	r7, #25
 801101e:	d801      	bhi.n	8011024 <_strtol_l.constprop.0+0xb4>
 8011020:	3c37      	subs	r4, #55	@ 0x37
 8011022:	e7de      	b.n	8010fe2 <_strtol_l.constprop.0+0x72>
 8011024:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8011028:	2f19      	cmp	r7, #25
 801102a:	d804      	bhi.n	8011036 <_strtol_l.constprop.0+0xc6>
 801102c:	3c57      	subs	r4, #87	@ 0x57
 801102e:	e7d8      	b.n	8010fe2 <_strtol_l.constprop.0+0x72>
 8011030:	f04f 32ff 	mov.w	r2, #4294967295
 8011034:	e7e1      	b.n	8010ffa <_strtol_l.constprop.0+0x8a>
 8011036:	1c53      	adds	r3, r2, #1
 8011038:	d108      	bne.n	801104c <_strtol_l.constprop.0+0xdc>
 801103a:	2322      	movs	r3, #34	@ 0x22
 801103c:	f8ce 3000 	str.w	r3, [lr]
 8011040:	4660      	mov	r0, ip
 8011042:	f1b8 0f00 	cmp.w	r8, #0
 8011046:	d0a0      	beq.n	8010f8a <_strtol_l.constprop.0+0x1a>
 8011048:	1e69      	subs	r1, r5, #1
 801104a:	e006      	b.n	801105a <_strtol_l.constprop.0+0xea>
 801104c:	b106      	cbz	r6, 8011050 <_strtol_l.constprop.0+0xe0>
 801104e:	4240      	negs	r0, r0
 8011050:	f1b8 0f00 	cmp.w	r8, #0
 8011054:	d099      	beq.n	8010f8a <_strtol_l.constprop.0+0x1a>
 8011056:	2a00      	cmp	r2, #0
 8011058:	d1f6      	bne.n	8011048 <_strtol_l.constprop.0+0xd8>
 801105a:	f8c8 1000 	str.w	r1, [r8]
 801105e:	e794      	b.n	8010f8a <_strtol_l.constprop.0+0x1a>
 8011060:	08012981 	.word	0x08012981

08011064 <_strtol_r>:
 8011064:	f7ff bf84 	b.w	8010f70 <_strtol_l.constprop.0>

08011068 <__ascii_wctomb>:
 8011068:	4603      	mov	r3, r0
 801106a:	4608      	mov	r0, r1
 801106c:	b141      	cbz	r1, 8011080 <__ascii_wctomb+0x18>
 801106e:	2aff      	cmp	r2, #255	@ 0xff
 8011070:	d904      	bls.n	801107c <__ascii_wctomb+0x14>
 8011072:	228a      	movs	r2, #138	@ 0x8a
 8011074:	601a      	str	r2, [r3, #0]
 8011076:	f04f 30ff 	mov.w	r0, #4294967295
 801107a:	4770      	bx	lr
 801107c:	700a      	strb	r2, [r1, #0]
 801107e:	2001      	movs	r0, #1
 8011080:	4770      	bx	lr

08011082 <__ssputs_r>:
 8011082:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011086:	688e      	ldr	r6, [r1, #8]
 8011088:	461f      	mov	r7, r3
 801108a:	42be      	cmp	r6, r7
 801108c:	680b      	ldr	r3, [r1, #0]
 801108e:	4682      	mov	sl, r0
 8011090:	460c      	mov	r4, r1
 8011092:	4690      	mov	r8, r2
 8011094:	d82d      	bhi.n	80110f2 <__ssputs_r+0x70>
 8011096:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801109a:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801109e:	d026      	beq.n	80110ee <__ssputs_r+0x6c>
 80110a0:	6965      	ldr	r5, [r4, #20]
 80110a2:	6909      	ldr	r1, [r1, #16]
 80110a4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80110a8:	eba3 0901 	sub.w	r9, r3, r1
 80110ac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80110b0:	1c7b      	adds	r3, r7, #1
 80110b2:	444b      	add	r3, r9
 80110b4:	106d      	asrs	r5, r5, #1
 80110b6:	429d      	cmp	r5, r3
 80110b8:	bf38      	it	cc
 80110ba:	461d      	movcc	r5, r3
 80110bc:	0553      	lsls	r3, r2, #21
 80110be:	d527      	bpl.n	8011110 <__ssputs_r+0x8e>
 80110c0:	4629      	mov	r1, r5
 80110c2:	f7fc fa8b 	bl	800d5dc <_malloc_r>
 80110c6:	4606      	mov	r6, r0
 80110c8:	b360      	cbz	r0, 8011124 <__ssputs_r+0xa2>
 80110ca:	6921      	ldr	r1, [r4, #16]
 80110cc:	464a      	mov	r2, r9
 80110ce:	f7fe f90a 	bl	800f2e6 <memcpy>
 80110d2:	89a3      	ldrh	r3, [r4, #12]
 80110d4:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80110d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80110dc:	81a3      	strh	r3, [r4, #12]
 80110de:	6126      	str	r6, [r4, #16]
 80110e0:	6165      	str	r5, [r4, #20]
 80110e2:	444e      	add	r6, r9
 80110e4:	eba5 0509 	sub.w	r5, r5, r9
 80110e8:	6026      	str	r6, [r4, #0]
 80110ea:	60a5      	str	r5, [r4, #8]
 80110ec:	463e      	mov	r6, r7
 80110ee:	42be      	cmp	r6, r7
 80110f0:	d900      	bls.n	80110f4 <__ssputs_r+0x72>
 80110f2:	463e      	mov	r6, r7
 80110f4:	6820      	ldr	r0, [r4, #0]
 80110f6:	4632      	mov	r2, r6
 80110f8:	4641      	mov	r1, r8
 80110fa:	f000 fd52 	bl	8011ba2 <memmove>
 80110fe:	68a3      	ldr	r3, [r4, #8]
 8011100:	1b9b      	subs	r3, r3, r6
 8011102:	60a3      	str	r3, [r4, #8]
 8011104:	6823      	ldr	r3, [r4, #0]
 8011106:	4433      	add	r3, r6
 8011108:	6023      	str	r3, [r4, #0]
 801110a:	2000      	movs	r0, #0
 801110c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011110:	462a      	mov	r2, r5
 8011112:	f000 fd93 	bl	8011c3c <_realloc_r>
 8011116:	4606      	mov	r6, r0
 8011118:	2800      	cmp	r0, #0
 801111a:	d1e0      	bne.n	80110de <__ssputs_r+0x5c>
 801111c:	6921      	ldr	r1, [r4, #16]
 801111e:	4650      	mov	r0, sl
 8011120:	f7fe fee0 	bl	800fee4 <_free_r>
 8011124:	230c      	movs	r3, #12
 8011126:	f8ca 3000 	str.w	r3, [sl]
 801112a:	89a3      	ldrh	r3, [r4, #12]
 801112c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011130:	81a3      	strh	r3, [r4, #12]
 8011132:	f04f 30ff 	mov.w	r0, #4294967295
 8011136:	e7e9      	b.n	801110c <__ssputs_r+0x8a>

08011138 <_svfiprintf_r>:
 8011138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801113c:	4698      	mov	r8, r3
 801113e:	898b      	ldrh	r3, [r1, #12]
 8011140:	061b      	lsls	r3, r3, #24
 8011142:	b09d      	sub	sp, #116	@ 0x74
 8011144:	4607      	mov	r7, r0
 8011146:	460d      	mov	r5, r1
 8011148:	4614      	mov	r4, r2
 801114a:	d510      	bpl.n	801116e <_svfiprintf_r+0x36>
 801114c:	690b      	ldr	r3, [r1, #16]
 801114e:	b973      	cbnz	r3, 801116e <_svfiprintf_r+0x36>
 8011150:	2140      	movs	r1, #64	@ 0x40
 8011152:	f7fc fa43 	bl	800d5dc <_malloc_r>
 8011156:	6028      	str	r0, [r5, #0]
 8011158:	6128      	str	r0, [r5, #16]
 801115a:	b930      	cbnz	r0, 801116a <_svfiprintf_r+0x32>
 801115c:	230c      	movs	r3, #12
 801115e:	603b      	str	r3, [r7, #0]
 8011160:	f04f 30ff 	mov.w	r0, #4294967295
 8011164:	b01d      	add	sp, #116	@ 0x74
 8011166:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801116a:	2340      	movs	r3, #64	@ 0x40
 801116c:	616b      	str	r3, [r5, #20]
 801116e:	2300      	movs	r3, #0
 8011170:	9309      	str	r3, [sp, #36]	@ 0x24
 8011172:	2320      	movs	r3, #32
 8011174:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011178:	f8cd 800c 	str.w	r8, [sp, #12]
 801117c:	2330      	movs	r3, #48	@ 0x30
 801117e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801131c <_svfiprintf_r+0x1e4>
 8011182:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011186:	f04f 0901 	mov.w	r9, #1
 801118a:	4623      	mov	r3, r4
 801118c:	469a      	mov	sl, r3
 801118e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011192:	b10a      	cbz	r2, 8011198 <_svfiprintf_r+0x60>
 8011194:	2a25      	cmp	r2, #37	@ 0x25
 8011196:	d1f9      	bne.n	801118c <_svfiprintf_r+0x54>
 8011198:	ebba 0b04 	subs.w	fp, sl, r4
 801119c:	d00b      	beq.n	80111b6 <_svfiprintf_r+0x7e>
 801119e:	465b      	mov	r3, fp
 80111a0:	4622      	mov	r2, r4
 80111a2:	4629      	mov	r1, r5
 80111a4:	4638      	mov	r0, r7
 80111a6:	f7ff ff6c 	bl	8011082 <__ssputs_r>
 80111aa:	3001      	adds	r0, #1
 80111ac:	f000 80a7 	beq.w	80112fe <_svfiprintf_r+0x1c6>
 80111b0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80111b2:	445a      	add	r2, fp
 80111b4:	9209      	str	r2, [sp, #36]	@ 0x24
 80111b6:	f89a 3000 	ldrb.w	r3, [sl]
 80111ba:	2b00      	cmp	r3, #0
 80111bc:	f000 809f 	beq.w	80112fe <_svfiprintf_r+0x1c6>
 80111c0:	2300      	movs	r3, #0
 80111c2:	f04f 32ff 	mov.w	r2, #4294967295
 80111c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80111ca:	f10a 0a01 	add.w	sl, sl, #1
 80111ce:	9304      	str	r3, [sp, #16]
 80111d0:	9307      	str	r3, [sp, #28]
 80111d2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80111d6:	931a      	str	r3, [sp, #104]	@ 0x68
 80111d8:	4654      	mov	r4, sl
 80111da:	2205      	movs	r2, #5
 80111dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80111e0:	484e      	ldr	r0, [pc, #312]	@ (801131c <_svfiprintf_r+0x1e4>)
 80111e2:	f7ef f895 	bl	8000310 <memchr>
 80111e6:	9a04      	ldr	r2, [sp, #16]
 80111e8:	b9d8      	cbnz	r0, 8011222 <_svfiprintf_r+0xea>
 80111ea:	06d0      	lsls	r0, r2, #27
 80111ec:	bf44      	itt	mi
 80111ee:	2320      	movmi	r3, #32
 80111f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80111f4:	0711      	lsls	r1, r2, #28
 80111f6:	bf44      	itt	mi
 80111f8:	232b      	movmi	r3, #43	@ 0x2b
 80111fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80111fe:	f89a 3000 	ldrb.w	r3, [sl]
 8011202:	2b2a      	cmp	r3, #42	@ 0x2a
 8011204:	d015      	beq.n	8011232 <_svfiprintf_r+0xfa>
 8011206:	9a07      	ldr	r2, [sp, #28]
 8011208:	4654      	mov	r4, sl
 801120a:	2000      	movs	r0, #0
 801120c:	f04f 0c0a 	mov.w	ip, #10
 8011210:	4621      	mov	r1, r4
 8011212:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011216:	3b30      	subs	r3, #48	@ 0x30
 8011218:	2b09      	cmp	r3, #9
 801121a:	d94b      	bls.n	80112b4 <_svfiprintf_r+0x17c>
 801121c:	b1b0      	cbz	r0, 801124c <_svfiprintf_r+0x114>
 801121e:	9207      	str	r2, [sp, #28]
 8011220:	e014      	b.n	801124c <_svfiprintf_r+0x114>
 8011222:	eba0 0308 	sub.w	r3, r0, r8
 8011226:	fa09 f303 	lsl.w	r3, r9, r3
 801122a:	4313      	orrs	r3, r2
 801122c:	9304      	str	r3, [sp, #16]
 801122e:	46a2      	mov	sl, r4
 8011230:	e7d2      	b.n	80111d8 <_svfiprintf_r+0xa0>
 8011232:	9b03      	ldr	r3, [sp, #12]
 8011234:	1d19      	adds	r1, r3, #4
 8011236:	681b      	ldr	r3, [r3, #0]
 8011238:	9103      	str	r1, [sp, #12]
 801123a:	2b00      	cmp	r3, #0
 801123c:	bfbb      	ittet	lt
 801123e:	425b      	neglt	r3, r3
 8011240:	f042 0202 	orrlt.w	r2, r2, #2
 8011244:	9307      	strge	r3, [sp, #28]
 8011246:	9307      	strlt	r3, [sp, #28]
 8011248:	bfb8      	it	lt
 801124a:	9204      	strlt	r2, [sp, #16]
 801124c:	7823      	ldrb	r3, [r4, #0]
 801124e:	2b2e      	cmp	r3, #46	@ 0x2e
 8011250:	d10a      	bne.n	8011268 <_svfiprintf_r+0x130>
 8011252:	7863      	ldrb	r3, [r4, #1]
 8011254:	2b2a      	cmp	r3, #42	@ 0x2a
 8011256:	d132      	bne.n	80112be <_svfiprintf_r+0x186>
 8011258:	9b03      	ldr	r3, [sp, #12]
 801125a:	1d1a      	adds	r2, r3, #4
 801125c:	681b      	ldr	r3, [r3, #0]
 801125e:	9203      	str	r2, [sp, #12]
 8011260:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011264:	3402      	adds	r4, #2
 8011266:	9305      	str	r3, [sp, #20]
 8011268:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801132c <_svfiprintf_r+0x1f4>
 801126c:	7821      	ldrb	r1, [r4, #0]
 801126e:	2203      	movs	r2, #3
 8011270:	4650      	mov	r0, sl
 8011272:	f7ef f84d 	bl	8000310 <memchr>
 8011276:	b138      	cbz	r0, 8011288 <_svfiprintf_r+0x150>
 8011278:	9b04      	ldr	r3, [sp, #16]
 801127a:	eba0 000a 	sub.w	r0, r0, sl
 801127e:	2240      	movs	r2, #64	@ 0x40
 8011280:	4082      	lsls	r2, r0
 8011282:	4313      	orrs	r3, r2
 8011284:	3401      	adds	r4, #1
 8011286:	9304      	str	r3, [sp, #16]
 8011288:	f814 1b01 	ldrb.w	r1, [r4], #1
 801128c:	4824      	ldr	r0, [pc, #144]	@ (8011320 <_svfiprintf_r+0x1e8>)
 801128e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011292:	2206      	movs	r2, #6
 8011294:	f7ef f83c 	bl	8000310 <memchr>
 8011298:	2800      	cmp	r0, #0
 801129a:	d036      	beq.n	801130a <_svfiprintf_r+0x1d2>
 801129c:	4b21      	ldr	r3, [pc, #132]	@ (8011324 <_svfiprintf_r+0x1ec>)
 801129e:	bb1b      	cbnz	r3, 80112e8 <_svfiprintf_r+0x1b0>
 80112a0:	9b03      	ldr	r3, [sp, #12]
 80112a2:	3307      	adds	r3, #7
 80112a4:	f023 0307 	bic.w	r3, r3, #7
 80112a8:	3308      	adds	r3, #8
 80112aa:	9303      	str	r3, [sp, #12]
 80112ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80112ae:	4433      	add	r3, r6
 80112b0:	9309      	str	r3, [sp, #36]	@ 0x24
 80112b2:	e76a      	b.n	801118a <_svfiprintf_r+0x52>
 80112b4:	fb0c 3202 	mla	r2, ip, r2, r3
 80112b8:	460c      	mov	r4, r1
 80112ba:	2001      	movs	r0, #1
 80112bc:	e7a8      	b.n	8011210 <_svfiprintf_r+0xd8>
 80112be:	2300      	movs	r3, #0
 80112c0:	3401      	adds	r4, #1
 80112c2:	9305      	str	r3, [sp, #20]
 80112c4:	4619      	mov	r1, r3
 80112c6:	f04f 0c0a 	mov.w	ip, #10
 80112ca:	4620      	mov	r0, r4
 80112cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80112d0:	3a30      	subs	r2, #48	@ 0x30
 80112d2:	2a09      	cmp	r2, #9
 80112d4:	d903      	bls.n	80112de <_svfiprintf_r+0x1a6>
 80112d6:	2b00      	cmp	r3, #0
 80112d8:	d0c6      	beq.n	8011268 <_svfiprintf_r+0x130>
 80112da:	9105      	str	r1, [sp, #20]
 80112dc:	e7c4      	b.n	8011268 <_svfiprintf_r+0x130>
 80112de:	fb0c 2101 	mla	r1, ip, r1, r2
 80112e2:	4604      	mov	r4, r0
 80112e4:	2301      	movs	r3, #1
 80112e6:	e7f0      	b.n	80112ca <_svfiprintf_r+0x192>
 80112e8:	ab03      	add	r3, sp, #12
 80112ea:	9300      	str	r3, [sp, #0]
 80112ec:	462a      	mov	r2, r5
 80112ee:	4b0e      	ldr	r3, [pc, #56]	@ (8011328 <_svfiprintf_r+0x1f0>)
 80112f0:	a904      	add	r1, sp, #16
 80112f2:	4638      	mov	r0, r7
 80112f4:	f7fd f844 	bl	800e380 <_printf_float>
 80112f8:	1c42      	adds	r2, r0, #1
 80112fa:	4606      	mov	r6, r0
 80112fc:	d1d6      	bne.n	80112ac <_svfiprintf_r+0x174>
 80112fe:	89ab      	ldrh	r3, [r5, #12]
 8011300:	065b      	lsls	r3, r3, #25
 8011302:	f53f af2d 	bmi.w	8011160 <_svfiprintf_r+0x28>
 8011306:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011308:	e72c      	b.n	8011164 <_svfiprintf_r+0x2c>
 801130a:	ab03      	add	r3, sp, #12
 801130c:	9300      	str	r3, [sp, #0]
 801130e:	462a      	mov	r2, r5
 8011310:	4b05      	ldr	r3, [pc, #20]	@ (8011328 <_svfiprintf_r+0x1f0>)
 8011312:	a904      	add	r1, sp, #16
 8011314:	4638      	mov	r0, r7
 8011316:	f7fd fabb 	bl	800e890 <_printf_i>
 801131a:	e7ed      	b.n	80112f8 <_svfiprintf_r+0x1c0>
 801131c:	08012a81 	.word	0x08012a81
 8011320:	08012a8b 	.word	0x08012a8b
 8011324:	0800e381 	.word	0x0800e381
 8011328:	08011083 	.word	0x08011083
 801132c:	08012a87 	.word	0x08012a87

08011330 <_sungetc_r>:
 8011330:	b538      	push	{r3, r4, r5, lr}
 8011332:	1c4b      	adds	r3, r1, #1
 8011334:	4614      	mov	r4, r2
 8011336:	d103      	bne.n	8011340 <_sungetc_r+0x10>
 8011338:	f04f 35ff 	mov.w	r5, #4294967295
 801133c:	4628      	mov	r0, r5
 801133e:	bd38      	pop	{r3, r4, r5, pc}
 8011340:	8993      	ldrh	r3, [r2, #12]
 8011342:	f023 0320 	bic.w	r3, r3, #32
 8011346:	8193      	strh	r3, [r2, #12]
 8011348:	6853      	ldr	r3, [r2, #4]
 801134a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 801134c:	b2cd      	uxtb	r5, r1
 801134e:	b18a      	cbz	r2, 8011374 <_sungetc_r+0x44>
 8011350:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8011352:	429a      	cmp	r2, r3
 8011354:	dd08      	ble.n	8011368 <_sungetc_r+0x38>
 8011356:	6823      	ldr	r3, [r4, #0]
 8011358:	1e5a      	subs	r2, r3, #1
 801135a:	6022      	str	r2, [r4, #0]
 801135c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8011360:	6863      	ldr	r3, [r4, #4]
 8011362:	3301      	adds	r3, #1
 8011364:	6063      	str	r3, [r4, #4]
 8011366:	e7e9      	b.n	801133c <_sungetc_r+0xc>
 8011368:	4621      	mov	r1, r4
 801136a:	f000 fbe0 	bl	8011b2e <__submore>
 801136e:	2800      	cmp	r0, #0
 8011370:	d0f1      	beq.n	8011356 <_sungetc_r+0x26>
 8011372:	e7e1      	b.n	8011338 <_sungetc_r+0x8>
 8011374:	6921      	ldr	r1, [r4, #16]
 8011376:	6822      	ldr	r2, [r4, #0]
 8011378:	b141      	cbz	r1, 801138c <_sungetc_r+0x5c>
 801137a:	4291      	cmp	r1, r2
 801137c:	d206      	bcs.n	801138c <_sungetc_r+0x5c>
 801137e:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8011382:	42a9      	cmp	r1, r5
 8011384:	d102      	bne.n	801138c <_sungetc_r+0x5c>
 8011386:	3a01      	subs	r2, #1
 8011388:	6022      	str	r2, [r4, #0]
 801138a:	e7ea      	b.n	8011362 <_sungetc_r+0x32>
 801138c:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 8011390:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011394:	6363      	str	r3, [r4, #52]	@ 0x34
 8011396:	2303      	movs	r3, #3
 8011398:	63a3      	str	r3, [r4, #56]	@ 0x38
 801139a:	4623      	mov	r3, r4
 801139c:	f803 5f46 	strb.w	r5, [r3, #70]!
 80113a0:	6023      	str	r3, [r4, #0]
 80113a2:	2301      	movs	r3, #1
 80113a4:	e7de      	b.n	8011364 <_sungetc_r+0x34>

080113a6 <__ssrefill_r>:
 80113a6:	b510      	push	{r4, lr}
 80113a8:	460c      	mov	r4, r1
 80113aa:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 80113ac:	b169      	cbz	r1, 80113ca <__ssrefill_r+0x24>
 80113ae:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80113b2:	4299      	cmp	r1, r3
 80113b4:	d001      	beq.n	80113ba <__ssrefill_r+0x14>
 80113b6:	f7fe fd95 	bl	800fee4 <_free_r>
 80113ba:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80113bc:	6063      	str	r3, [r4, #4]
 80113be:	2000      	movs	r0, #0
 80113c0:	6360      	str	r0, [r4, #52]	@ 0x34
 80113c2:	b113      	cbz	r3, 80113ca <__ssrefill_r+0x24>
 80113c4:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80113c6:	6023      	str	r3, [r4, #0]
 80113c8:	bd10      	pop	{r4, pc}
 80113ca:	6923      	ldr	r3, [r4, #16]
 80113cc:	6023      	str	r3, [r4, #0]
 80113ce:	2300      	movs	r3, #0
 80113d0:	6063      	str	r3, [r4, #4]
 80113d2:	89a3      	ldrh	r3, [r4, #12]
 80113d4:	f043 0320 	orr.w	r3, r3, #32
 80113d8:	81a3      	strh	r3, [r4, #12]
 80113da:	f04f 30ff 	mov.w	r0, #4294967295
 80113de:	e7f3      	b.n	80113c8 <__ssrefill_r+0x22>

080113e0 <__ssvfiscanf_r>:
 80113e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80113e4:	460c      	mov	r4, r1
 80113e6:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 80113ea:	2100      	movs	r1, #0
 80113ec:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 80113f0:	49a5      	ldr	r1, [pc, #660]	@ (8011688 <__ssvfiscanf_r+0x2a8>)
 80113f2:	91a0      	str	r1, [sp, #640]	@ 0x280
 80113f4:	f10d 0804 	add.w	r8, sp, #4
 80113f8:	49a4      	ldr	r1, [pc, #656]	@ (801168c <__ssvfiscanf_r+0x2ac>)
 80113fa:	4fa5      	ldr	r7, [pc, #660]	@ (8011690 <__ssvfiscanf_r+0x2b0>)
 80113fc:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8011400:	4606      	mov	r6, r0
 8011402:	91a1      	str	r1, [sp, #644]	@ 0x284
 8011404:	9300      	str	r3, [sp, #0]
 8011406:	7813      	ldrb	r3, [r2, #0]
 8011408:	2b00      	cmp	r3, #0
 801140a:	f000 8158 	beq.w	80116be <__ssvfiscanf_r+0x2de>
 801140e:	5cf9      	ldrb	r1, [r7, r3]
 8011410:	f011 0108 	ands.w	r1, r1, #8
 8011414:	f102 0501 	add.w	r5, r2, #1
 8011418:	d019      	beq.n	801144e <__ssvfiscanf_r+0x6e>
 801141a:	6863      	ldr	r3, [r4, #4]
 801141c:	2b00      	cmp	r3, #0
 801141e:	dd0f      	ble.n	8011440 <__ssvfiscanf_r+0x60>
 8011420:	6823      	ldr	r3, [r4, #0]
 8011422:	781a      	ldrb	r2, [r3, #0]
 8011424:	5cba      	ldrb	r2, [r7, r2]
 8011426:	0712      	lsls	r2, r2, #28
 8011428:	d401      	bmi.n	801142e <__ssvfiscanf_r+0x4e>
 801142a:	462a      	mov	r2, r5
 801142c:	e7eb      	b.n	8011406 <__ssvfiscanf_r+0x26>
 801142e:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8011430:	3201      	adds	r2, #1
 8011432:	9245      	str	r2, [sp, #276]	@ 0x114
 8011434:	6862      	ldr	r2, [r4, #4]
 8011436:	3301      	adds	r3, #1
 8011438:	3a01      	subs	r2, #1
 801143a:	6062      	str	r2, [r4, #4]
 801143c:	6023      	str	r3, [r4, #0]
 801143e:	e7ec      	b.n	801141a <__ssvfiscanf_r+0x3a>
 8011440:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8011442:	4621      	mov	r1, r4
 8011444:	4630      	mov	r0, r6
 8011446:	4798      	blx	r3
 8011448:	2800      	cmp	r0, #0
 801144a:	d0e9      	beq.n	8011420 <__ssvfiscanf_r+0x40>
 801144c:	e7ed      	b.n	801142a <__ssvfiscanf_r+0x4a>
 801144e:	2b25      	cmp	r3, #37	@ 0x25
 8011450:	d012      	beq.n	8011478 <__ssvfiscanf_r+0x98>
 8011452:	4699      	mov	r9, r3
 8011454:	6863      	ldr	r3, [r4, #4]
 8011456:	2b00      	cmp	r3, #0
 8011458:	f340 8093 	ble.w	8011582 <__ssvfiscanf_r+0x1a2>
 801145c:	6822      	ldr	r2, [r4, #0]
 801145e:	7813      	ldrb	r3, [r2, #0]
 8011460:	454b      	cmp	r3, r9
 8011462:	f040 812c 	bne.w	80116be <__ssvfiscanf_r+0x2de>
 8011466:	6863      	ldr	r3, [r4, #4]
 8011468:	3b01      	subs	r3, #1
 801146a:	6063      	str	r3, [r4, #4]
 801146c:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 801146e:	3201      	adds	r2, #1
 8011470:	3301      	adds	r3, #1
 8011472:	6022      	str	r2, [r4, #0]
 8011474:	9345      	str	r3, [sp, #276]	@ 0x114
 8011476:	e7d8      	b.n	801142a <__ssvfiscanf_r+0x4a>
 8011478:	9141      	str	r1, [sp, #260]	@ 0x104
 801147a:	9143      	str	r1, [sp, #268]	@ 0x10c
 801147c:	7853      	ldrb	r3, [r2, #1]
 801147e:	2b2a      	cmp	r3, #42	@ 0x2a
 8011480:	bf02      	ittt	eq
 8011482:	2310      	moveq	r3, #16
 8011484:	1c95      	addeq	r5, r2, #2
 8011486:	9341      	streq	r3, [sp, #260]	@ 0x104
 8011488:	220a      	movs	r2, #10
 801148a:	46a9      	mov	r9, r5
 801148c:	f819 1b01 	ldrb.w	r1, [r9], #1
 8011490:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8011494:	2b09      	cmp	r3, #9
 8011496:	d91e      	bls.n	80114d6 <__ssvfiscanf_r+0xf6>
 8011498:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 8011694 <__ssvfiscanf_r+0x2b4>
 801149c:	2203      	movs	r2, #3
 801149e:	4650      	mov	r0, sl
 80114a0:	f7ee ff36 	bl	8000310 <memchr>
 80114a4:	b138      	cbz	r0, 80114b6 <__ssvfiscanf_r+0xd6>
 80114a6:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80114a8:	eba0 000a 	sub.w	r0, r0, sl
 80114ac:	2301      	movs	r3, #1
 80114ae:	4083      	lsls	r3, r0
 80114b0:	4313      	orrs	r3, r2
 80114b2:	9341      	str	r3, [sp, #260]	@ 0x104
 80114b4:	464d      	mov	r5, r9
 80114b6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80114ba:	2b78      	cmp	r3, #120	@ 0x78
 80114bc:	d806      	bhi.n	80114cc <__ssvfiscanf_r+0xec>
 80114be:	2b57      	cmp	r3, #87	@ 0x57
 80114c0:	d810      	bhi.n	80114e4 <__ssvfiscanf_r+0x104>
 80114c2:	2b25      	cmp	r3, #37	@ 0x25
 80114c4:	d0c5      	beq.n	8011452 <__ssvfiscanf_r+0x72>
 80114c6:	d857      	bhi.n	8011578 <__ssvfiscanf_r+0x198>
 80114c8:	2b00      	cmp	r3, #0
 80114ca:	d065      	beq.n	8011598 <__ssvfiscanf_r+0x1b8>
 80114cc:	2303      	movs	r3, #3
 80114ce:	9347      	str	r3, [sp, #284]	@ 0x11c
 80114d0:	230a      	movs	r3, #10
 80114d2:	9342      	str	r3, [sp, #264]	@ 0x108
 80114d4:	e078      	b.n	80115c8 <__ssvfiscanf_r+0x1e8>
 80114d6:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 80114d8:	fb02 1103 	mla	r1, r2, r3, r1
 80114dc:	3930      	subs	r1, #48	@ 0x30
 80114de:	9143      	str	r1, [sp, #268]	@ 0x10c
 80114e0:	464d      	mov	r5, r9
 80114e2:	e7d2      	b.n	801148a <__ssvfiscanf_r+0xaa>
 80114e4:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 80114e8:	2a20      	cmp	r2, #32
 80114ea:	d8ef      	bhi.n	80114cc <__ssvfiscanf_r+0xec>
 80114ec:	a101      	add	r1, pc, #4	@ (adr r1, 80114f4 <__ssvfiscanf_r+0x114>)
 80114ee:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80114f2:	bf00      	nop
 80114f4:	080115a7 	.word	0x080115a7
 80114f8:	080114cd 	.word	0x080114cd
 80114fc:	080114cd 	.word	0x080114cd
 8011500:	08011601 	.word	0x08011601
 8011504:	080114cd 	.word	0x080114cd
 8011508:	080114cd 	.word	0x080114cd
 801150c:	080114cd 	.word	0x080114cd
 8011510:	080114cd 	.word	0x080114cd
 8011514:	080114cd 	.word	0x080114cd
 8011518:	080114cd 	.word	0x080114cd
 801151c:	080114cd 	.word	0x080114cd
 8011520:	08011617 	.word	0x08011617
 8011524:	080115fd 	.word	0x080115fd
 8011528:	0801157f 	.word	0x0801157f
 801152c:	0801157f 	.word	0x0801157f
 8011530:	0801157f 	.word	0x0801157f
 8011534:	080114cd 	.word	0x080114cd
 8011538:	080115b9 	.word	0x080115b9
 801153c:	080114cd 	.word	0x080114cd
 8011540:	080114cd 	.word	0x080114cd
 8011544:	080114cd 	.word	0x080114cd
 8011548:	080114cd 	.word	0x080114cd
 801154c:	08011627 	.word	0x08011627
 8011550:	080115c1 	.word	0x080115c1
 8011554:	0801159f 	.word	0x0801159f
 8011558:	080114cd 	.word	0x080114cd
 801155c:	080114cd 	.word	0x080114cd
 8011560:	08011623 	.word	0x08011623
 8011564:	080114cd 	.word	0x080114cd
 8011568:	080115fd 	.word	0x080115fd
 801156c:	080114cd 	.word	0x080114cd
 8011570:	080114cd 	.word	0x080114cd
 8011574:	080115a7 	.word	0x080115a7
 8011578:	3b45      	subs	r3, #69	@ 0x45
 801157a:	2b02      	cmp	r3, #2
 801157c:	d8a6      	bhi.n	80114cc <__ssvfiscanf_r+0xec>
 801157e:	2305      	movs	r3, #5
 8011580:	e021      	b.n	80115c6 <__ssvfiscanf_r+0x1e6>
 8011582:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8011584:	4621      	mov	r1, r4
 8011586:	4630      	mov	r0, r6
 8011588:	4798      	blx	r3
 801158a:	2800      	cmp	r0, #0
 801158c:	f43f af66 	beq.w	801145c <__ssvfiscanf_r+0x7c>
 8011590:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8011592:	2800      	cmp	r0, #0
 8011594:	f040 808b 	bne.w	80116ae <__ssvfiscanf_r+0x2ce>
 8011598:	f04f 30ff 	mov.w	r0, #4294967295
 801159c:	e08b      	b.n	80116b6 <__ssvfiscanf_r+0x2d6>
 801159e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80115a0:	f042 0220 	orr.w	r2, r2, #32
 80115a4:	9241      	str	r2, [sp, #260]	@ 0x104
 80115a6:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80115a8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80115ac:	9241      	str	r2, [sp, #260]	@ 0x104
 80115ae:	2210      	movs	r2, #16
 80115b0:	2b6e      	cmp	r3, #110	@ 0x6e
 80115b2:	9242      	str	r2, [sp, #264]	@ 0x108
 80115b4:	d902      	bls.n	80115bc <__ssvfiscanf_r+0x1dc>
 80115b6:	e005      	b.n	80115c4 <__ssvfiscanf_r+0x1e4>
 80115b8:	2300      	movs	r3, #0
 80115ba:	9342      	str	r3, [sp, #264]	@ 0x108
 80115bc:	2303      	movs	r3, #3
 80115be:	e002      	b.n	80115c6 <__ssvfiscanf_r+0x1e6>
 80115c0:	2308      	movs	r3, #8
 80115c2:	9342      	str	r3, [sp, #264]	@ 0x108
 80115c4:	2304      	movs	r3, #4
 80115c6:	9347      	str	r3, [sp, #284]	@ 0x11c
 80115c8:	6863      	ldr	r3, [r4, #4]
 80115ca:	2b00      	cmp	r3, #0
 80115cc:	dd39      	ble.n	8011642 <__ssvfiscanf_r+0x262>
 80115ce:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80115d0:	0659      	lsls	r1, r3, #25
 80115d2:	d404      	bmi.n	80115de <__ssvfiscanf_r+0x1fe>
 80115d4:	6823      	ldr	r3, [r4, #0]
 80115d6:	781a      	ldrb	r2, [r3, #0]
 80115d8:	5cba      	ldrb	r2, [r7, r2]
 80115da:	0712      	lsls	r2, r2, #28
 80115dc:	d438      	bmi.n	8011650 <__ssvfiscanf_r+0x270>
 80115de:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 80115e0:	2b02      	cmp	r3, #2
 80115e2:	dc47      	bgt.n	8011674 <__ssvfiscanf_r+0x294>
 80115e4:	466b      	mov	r3, sp
 80115e6:	4622      	mov	r2, r4
 80115e8:	a941      	add	r1, sp, #260	@ 0x104
 80115ea:	4630      	mov	r0, r6
 80115ec:	f000 f86c 	bl	80116c8 <_scanf_chars>
 80115f0:	2801      	cmp	r0, #1
 80115f2:	d064      	beq.n	80116be <__ssvfiscanf_r+0x2de>
 80115f4:	2802      	cmp	r0, #2
 80115f6:	f47f af18 	bne.w	801142a <__ssvfiscanf_r+0x4a>
 80115fa:	e7c9      	b.n	8011590 <__ssvfiscanf_r+0x1b0>
 80115fc:	220a      	movs	r2, #10
 80115fe:	e7d7      	b.n	80115b0 <__ssvfiscanf_r+0x1d0>
 8011600:	4629      	mov	r1, r5
 8011602:	4640      	mov	r0, r8
 8011604:	f000 fa5a 	bl	8011abc <__sccl>
 8011608:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 801160a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801160e:	9341      	str	r3, [sp, #260]	@ 0x104
 8011610:	4605      	mov	r5, r0
 8011612:	2301      	movs	r3, #1
 8011614:	e7d7      	b.n	80115c6 <__ssvfiscanf_r+0x1e6>
 8011616:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8011618:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801161c:	9341      	str	r3, [sp, #260]	@ 0x104
 801161e:	2300      	movs	r3, #0
 8011620:	e7d1      	b.n	80115c6 <__ssvfiscanf_r+0x1e6>
 8011622:	2302      	movs	r3, #2
 8011624:	e7cf      	b.n	80115c6 <__ssvfiscanf_r+0x1e6>
 8011626:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8011628:	06c3      	lsls	r3, r0, #27
 801162a:	f53f aefe 	bmi.w	801142a <__ssvfiscanf_r+0x4a>
 801162e:	9b00      	ldr	r3, [sp, #0]
 8011630:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8011632:	1d19      	adds	r1, r3, #4
 8011634:	9100      	str	r1, [sp, #0]
 8011636:	681b      	ldr	r3, [r3, #0]
 8011638:	07c0      	lsls	r0, r0, #31
 801163a:	bf4c      	ite	mi
 801163c:	801a      	strhmi	r2, [r3, #0]
 801163e:	601a      	strpl	r2, [r3, #0]
 8011640:	e6f3      	b.n	801142a <__ssvfiscanf_r+0x4a>
 8011642:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8011644:	4621      	mov	r1, r4
 8011646:	4630      	mov	r0, r6
 8011648:	4798      	blx	r3
 801164a:	2800      	cmp	r0, #0
 801164c:	d0bf      	beq.n	80115ce <__ssvfiscanf_r+0x1ee>
 801164e:	e79f      	b.n	8011590 <__ssvfiscanf_r+0x1b0>
 8011650:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8011652:	3201      	adds	r2, #1
 8011654:	9245      	str	r2, [sp, #276]	@ 0x114
 8011656:	6862      	ldr	r2, [r4, #4]
 8011658:	3a01      	subs	r2, #1
 801165a:	2a00      	cmp	r2, #0
 801165c:	6062      	str	r2, [r4, #4]
 801165e:	dd02      	ble.n	8011666 <__ssvfiscanf_r+0x286>
 8011660:	3301      	adds	r3, #1
 8011662:	6023      	str	r3, [r4, #0]
 8011664:	e7b6      	b.n	80115d4 <__ssvfiscanf_r+0x1f4>
 8011666:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8011668:	4621      	mov	r1, r4
 801166a:	4630      	mov	r0, r6
 801166c:	4798      	blx	r3
 801166e:	2800      	cmp	r0, #0
 8011670:	d0b0      	beq.n	80115d4 <__ssvfiscanf_r+0x1f4>
 8011672:	e78d      	b.n	8011590 <__ssvfiscanf_r+0x1b0>
 8011674:	2b04      	cmp	r3, #4
 8011676:	dc0f      	bgt.n	8011698 <__ssvfiscanf_r+0x2b8>
 8011678:	466b      	mov	r3, sp
 801167a:	4622      	mov	r2, r4
 801167c:	a941      	add	r1, sp, #260	@ 0x104
 801167e:	4630      	mov	r0, r6
 8011680:	f000 f87c 	bl	801177c <_scanf_i>
 8011684:	e7b4      	b.n	80115f0 <__ssvfiscanf_r+0x210>
 8011686:	bf00      	nop
 8011688:	08011331 	.word	0x08011331
 801168c:	080113a7 	.word	0x080113a7
 8011690:	08012981 	.word	0x08012981
 8011694:	08012a87 	.word	0x08012a87
 8011698:	4b0a      	ldr	r3, [pc, #40]	@ (80116c4 <__ssvfiscanf_r+0x2e4>)
 801169a:	2b00      	cmp	r3, #0
 801169c:	f43f aec5 	beq.w	801142a <__ssvfiscanf_r+0x4a>
 80116a0:	466b      	mov	r3, sp
 80116a2:	4622      	mov	r2, r4
 80116a4:	a941      	add	r1, sp, #260	@ 0x104
 80116a6:	4630      	mov	r0, r6
 80116a8:	f7fd fa12 	bl	800ead0 <_scanf_float>
 80116ac:	e7a0      	b.n	80115f0 <__ssvfiscanf_r+0x210>
 80116ae:	89a3      	ldrh	r3, [r4, #12]
 80116b0:	065b      	lsls	r3, r3, #25
 80116b2:	f53f af71 	bmi.w	8011598 <__ssvfiscanf_r+0x1b8>
 80116b6:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 80116ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80116be:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80116c0:	e7f9      	b.n	80116b6 <__ssvfiscanf_r+0x2d6>
 80116c2:	bf00      	nop
 80116c4:	0800ead1 	.word	0x0800ead1

080116c8 <_scanf_chars>:
 80116c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80116cc:	4615      	mov	r5, r2
 80116ce:	688a      	ldr	r2, [r1, #8]
 80116d0:	4680      	mov	r8, r0
 80116d2:	460c      	mov	r4, r1
 80116d4:	b932      	cbnz	r2, 80116e4 <_scanf_chars+0x1c>
 80116d6:	698a      	ldr	r2, [r1, #24]
 80116d8:	2a00      	cmp	r2, #0
 80116da:	bf14      	ite	ne
 80116dc:	f04f 32ff 	movne.w	r2, #4294967295
 80116e0:	2201      	moveq	r2, #1
 80116e2:	608a      	str	r2, [r1, #8]
 80116e4:	6822      	ldr	r2, [r4, #0]
 80116e6:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8011778 <_scanf_chars+0xb0>
 80116ea:	06d1      	lsls	r1, r2, #27
 80116ec:	bf5f      	itttt	pl
 80116ee:	681a      	ldrpl	r2, [r3, #0]
 80116f0:	1d11      	addpl	r1, r2, #4
 80116f2:	6019      	strpl	r1, [r3, #0]
 80116f4:	6816      	ldrpl	r6, [r2, #0]
 80116f6:	2700      	movs	r7, #0
 80116f8:	69a0      	ldr	r0, [r4, #24]
 80116fa:	b188      	cbz	r0, 8011720 <_scanf_chars+0x58>
 80116fc:	2801      	cmp	r0, #1
 80116fe:	d107      	bne.n	8011710 <_scanf_chars+0x48>
 8011700:	682b      	ldr	r3, [r5, #0]
 8011702:	781a      	ldrb	r2, [r3, #0]
 8011704:	6963      	ldr	r3, [r4, #20]
 8011706:	5c9b      	ldrb	r3, [r3, r2]
 8011708:	b953      	cbnz	r3, 8011720 <_scanf_chars+0x58>
 801170a:	2f00      	cmp	r7, #0
 801170c:	d031      	beq.n	8011772 <_scanf_chars+0xaa>
 801170e:	e022      	b.n	8011756 <_scanf_chars+0x8e>
 8011710:	2802      	cmp	r0, #2
 8011712:	d120      	bne.n	8011756 <_scanf_chars+0x8e>
 8011714:	682b      	ldr	r3, [r5, #0]
 8011716:	781b      	ldrb	r3, [r3, #0]
 8011718:	f819 3003 	ldrb.w	r3, [r9, r3]
 801171c:	071b      	lsls	r3, r3, #28
 801171e:	d41a      	bmi.n	8011756 <_scanf_chars+0x8e>
 8011720:	6823      	ldr	r3, [r4, #0]
 8011722:	06da      	lsls	r2, r3, #27
 8011724:	bf5e      	ittt	pl
 8011726:	682b      	ldrpl	r3, [r5, #0]
 8011728:	781b      	ldrbpl	r3, [r3, #0]
 801172a:	f806 3b01 	strbpl.w	r3, [r6], #1
 801172e:	682a      	ldr	r2, [r5, #0]
 8011730:	686b      	ldr	r3, [r5, #4]
 8011732:	3201      	adds	r2, #1
 8011734:	602a      	str	r2, [r5, #0]
 8011736:	68a2      	ldr	r2, [r4, #8]
 8011738:	3b01      	subs	r3, #1
 801173a:	3a01      	subs	r2, #1
 801173c:	606b      	str	r3, [r5, #4]
 801173e:	3701      	adds	r7, #1
 8011740:	60a2      	str	r2, [r4, #8]
 8011742:	b142      	cbz	r2, 8011756 <_scanf_chars+0x8e>
 8011744:	2b00      	cmp	r3, #0
 8011746:	dcd7      	bgt.n	80116f8 <_scanf_chars+0x30>
 8011748:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 801174c:	4629      	mov	r1, r5
 801174e:	4640      	mov	r0, r8
 8011750:	4798      	blx	r3
 8011752:	2800      	cmp	r0, #0
 8011754:	d0d0      	beq.n	80116f8 <_scanf_chars+0x30>
 8011756:	6823      	ldr	r3, [r4, #0]
 8011758:	f013 0310 	ands.w	r3, r3, #16
 801175c:	d105      	bne.n	801176a <_scanf_chars+0xa2>
 801175e:	68e2      	ldr	r2, [r4, #12]
 8011760:	3201      	adds	r2, #1
 8011762:	60e2      	str	r2, [r4, #12]
 8011764:	69a2      	ldr	r2, [r4, #24]
 8011766:	b102      	cbz	r2, 801176a <_scanf_chars+0xa2>
 8011768:	7033      	strb	r3, [r6, #0]
 801176a:	6923      	ldr	r3, [r4, #16]
 801176c:	443b      	add	r3, r7
 801176e:	6123      	str	r3, [r4, #16]
 8011770:	2000      	movs	r0, #0
 8011772:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011776:	bf00      	nop
 8011778:	08012981 	.word	0x08012981

0801177c <_scanf_i>:
 801177c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011780:	4698      	mov	r8, r3
 8011782:	4b74      	ldr	r3, [pc, #464]	@ (8011954 <_scanf_i+0x1d8>)
 8011784:	460c      	mov	r4, r1
 8011786:	4682      	mov	sl, r0
 8011788:	4616      	mov	r6, r2
 801178a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801178e:	b087      	sub	sp, #28
 8011790:	ab03      	add	r3, sp, #12
 8011792:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8011796:	4b70      	ldr	r3, [pc, #448]	@ (8011958 <_scanf_i+0x1dc>)
 8011798:	69a1      	ldr	r1, [r4, #24]
 801179a:	4a70      	ldr	r2, [pc, #448]	@ (801195c <_scanf_i+0x1e0>)
 801179c:	2903      	cmp	r1, #3
 801179e:	bf08      	it	eq
 80117a0:	461a      	moveq	r2, r3
 80117a2:	68a3      	ldr	r3, [r4, #8]
 80117a4:	9201      	str	r2, [sp, #4]
 80117a6:	1e5a      	subs	r2, r3, #1
 80117a8:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80117ac:	bf88      	it	hi
 80117ae:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80117b2:	4627      	mov	r7, r4
 80117b4:	bf82      	ittt	hi
 80117b6:	eb03 0905 	addhi.w	r9, r3, r5
 80117ba:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80117be:	60a3      	strhi	r3, [r4, #8]
 80117c0:	f857 3b1c 	ldr.w	r3, [r7], #28
 80117c4:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 80117c8:	bf98      	it	ls
 80117ca:	f04f 0900 	movls.w	r9, #0
 80117ce:	6023      	str	r3, [r4, #0]
 80117d0:	463d      	mov	r5, r7
 80117d2:	f04f 0b00 	mov.w	fp, #0
 80117d6:	6831      	ldr	r1, [r6, #0]
 80117d8:	ab03      	add	r3, sp, #12
 80117da:	7809      	ldrb	r1, [r1, #0]
 80117dc:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80117e0:	2202      	movs	r2, #2
 80117e2:	f7ee fd95 	bl	8000310 <memchr>
 80117e6:	b328      	cbz	r0, 8011834 <_scanf_i+0xb8>
 80117e8:	f1bb 0f01 	cmp.w	fp, #1
 80117ec:	d159      	bne.n	80118a2 <_scanf_i+0x126>
 80117ee:	6862      	ldr	r2, [r4, #4]
 80117f0:	b92a      	cbnz	r2, 80117fe <_scanf_i+0x82>
 80117f2:	6822      	ldr	r2, [r4, #0]
 80117f4:	2108      	movs	r1, #8
 80117f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80117fa:	6061      	str	r1, [r4, #4]
 80117fc:	6022      	str	r2, [r4, #0]
 80117fe:	6822      	ldr	r2, [r4, #0]
 8011800:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8011804:	6022      	str	r2, [r4, #0]
 8011806:	68a2      	ldr	r2, [r4, #8]
 8011808:	1e51      	subs	r1, r2, #1
 801180a:	60a1      	str	r1, [r4, #8]
 801180c:	b192      	cbz	r2, 8011834 <_scanf_i+0xb8>
 801180e:	6832      	ldr	r2, [r6, #0]
 8011810:	1c51      	adds	r1, r2, #1
 8011812:	6031      	str	r1, [r6, #0]
 8011814:	7812      	ldrb	r2, [r2, #0]
 8011816:	f805 2b01 	strb.w	r2, [r5], #1
 801181a:	6872      	ldr	r2, [r6, #4]
 801181c:	3a01      	subs	r2, #1
 801181e:	2a00      	cmp	r2, #0
 8011820:	6072      	str	r2, [r6, #4]
 8011822:	dc07      	bgt.n	8011834 <_scanf_i+0xb8>
 8011824:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8011828:	4631      	mov	r1, r6
 801182a:	4650      	mov	r0, sl
 801182c:	4790      	blx	r2
 801182e:	2800      	cmp	r0, #0
 8011830:	f040 8085 	bne.w	801193e <_scanf_i+0x1c2>
 8011834:	f10b 0b01 	add.w	fp, fp, #1
 8011838:	f1bb 0f03 	cmp.w	fp, #3
 801183c:	d1cb      	bne.n	80117d6 <_scanf_i+0x5a>
 801183e:	6863      	ldr	r3, [r4, #4]
 8011840:	b90b      	cbnz	r3, 8011846 <_scanf_i+0xca>
 8011842:	230a      	movs	r3, #10
 8011844:	6063      	str	r3, [r4, #4]
 8011846:	6863      	ldr	r3, [r4, #4]
 8011848:	4945      	ldr	r1, [pc, #276]	@ (8011960 <_scanf_i+0x1e4>)
 801184a:	6960      	ldr	r0, [r4, #20]
 801184c:	1ac9      	subs	r1, r1, r3
 801184e:	f000 f935 	bl	8011abc <__sccl>
 8011852:	f04f 0b00 	mov.w	fp, #0
 8011856:	68a3      	ldr	r3, [r4, #8]
 8011858:	6822      	ldr	r2, [r4, #0]
 801185a:	2b00      	cmp	r3, #0
 801185c:	d03d      	beq.n	80118da <_scanf_i+0x15e>
 801185e:	6831      	ldr	r1, [r6, #0]
 8011860:	6960      	ldr	r0, [r4, #20]
 8011862:	f891 c000 	ldrb.w	ip, [r1]
 8011866:	f810 000c 	ldrb.w	r0, [r0, ip]
 801186a:	2800      	cmp	r0, #0
 801186c:	d035      	beq.n	80118da <_scanf_i+0x15e>
 801186e:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8011872:	d124      	bne.n	80118be <_scanf_i+0x142>
 8011874:	0510      	lsls	r0, r2, #20
 8011876:	d522      	bpl.n	80118be <_scanf_i+0x142>
 8011878:	f10b 0b01 	add.w	fp, fp, #1
 801187c:	f1b9 0f00 	cmp.w	r9, #0
 8011880:	d003      	beq.n	801188a <_scanf_i+0x10e>
 8011882:	3301      	adds	r3, #1
 8011884:	f109 39ff 	add.w	r9, r9, #4294967295
 8011888:	60a3      	str	r3, [r4, #8]
 801188a:	6873      	ldr	r3, [r6, #4]
 801188c:	3b01      	subs	r3, #1
 801188e:	2b00      	cmp	r3, #0
 8011890:	6073      	str	r3, [r6, #4]
 8011892:	dd1b      	ble.n	80118cc <_scanf_i+0x150>
 8011894:	6833      	ldr	r3, [r6, #0]
 8011896:	3301      	adds	r3, #1
 8011898:	6033      	str	r3, [r6, #0]
 801189a:	68a3      	ldr	r3, [r4, #8]
 801189c:	3b01      	subs	r3, #1
 801189e:	60a3      	str	r3, [r4, #8]
 80118a0:	e7d9      	b.n	8011856 <_scanf_i+0xda>
 80118a2:	f1bb 0f02 	cmp.w	fp, #2
 80118a6:	d1ae      	bne.n	8011806 <_scanf_i+0x8a>
 80118a8:	6822      	ldr	r2, [r4, #0]
 80118aa:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 80118ae:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 80118b2:	d1bf      	bne.n	8011834 <_scanf_i+0xb8>
 80118b4:	2110      	movs	r1, #16
 80118b6:	6061      	str	r1, [r4, #4]
 80118b8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80118bc:	e7a2      	b.n	8011804 <_scanf_i+0x88>
 80118be:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 80118c2:	6022      	str	r2, [r4, #0]
 80118c4:	780b      	ldrb	r3, [r1, #0]
 80118c6:	f805 3b01 	strb.w	r3, [r5], #1
 80118ca:	e7de      	b.n	801188a <_scanf_i+0x10e>
 80118cc:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80118d0:	4631      	mov	r1, r6
 80118d2:	4650      	mov	r0, sl
 80118d4:	4798      	blx	r3
 80118d6:	2800      	cmp	r0, #0
 80118d8:	d0df      	beq.n	801189a <_scanf_i+0x11e>
 80118da:	6823      	ldr	r3, [r4, #0]
 80118dc:	05d9      	lsls	r1, r3, #23
 80118de:	d50d      	bpl.n	80118fc <_scanf_i+0x180>
 80118e0:	42bd      	cmp	r5, r7
 80118e2:	d909      	bls.n	80118f8 <_scanf_i+0x17c>
 80118e4:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80118e8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80118ec:	4632      	mov	r2, r6
 80118ee:	4650      	mov	r0, sl
 80118f0:	4798      	blx	r3
 80118f2:	f105 39ff 	add.w	r9, r5, #4294967295
 80118f6:	464d      	mov	r5, r9
 80118f8:	42bd      	cmp	r5, r7
 80118fa:	d028      	beq.n	801194e <_scanf_i+0x1d2>
 80118fc:	6822      	ldr	r2, [r4, #0]
 80118fe:	f012 0210 	ands.w	r2, r2, #16
 8011902:	d113      	bne.n	801192c <_scanf_i+0x1b0>
 8011904:	702a      	strb	r2, [r5, #0]
 8011906:	6863      	ldr	r3, [r4, #4]
 8011908:	9e01      	ldr	r6, [sp, #4]
 801190a:	4639      	mov	r1, r7
 801190c:	4650      	mov	r0, sl
 801190e:	47b0      	blx	r6
 8011910:	f8d8 3000 	ldr.w	r3, [r8]
 8011914:	6821      	ldr	r1, [r4, #0]
 8011916:	1d1a      	adds	r2, r3, #4
 8011918:	f8c8 2000 	str.w	r2, [r8]
 801191c:	f011 0f20 	tst.w	r1, #32
 8011920:	681b      	ldr	r3, [r3, #0]
 8011922:	d00f      	beq.n	8011944 <_scanf_i+0x1c8>
 8011924:	6018      	str	r0, [r3, #0]
 8011926:	68e3      	ldr	r3, [r4, #12]
 8011928:	3301      	adds	r3, #1
 801192a:	60e3      	str	r3, [r4, #12]
 801192c:	6923      	ldr	r3, [r4, #16]
 801192e:	1bed      	subs	r5, r5, r7
 8011930:	445d      	add	r5, fp
 8011932:	442b      	add	r3, r5
 8011934:	6123      	str	r3, [r4, #16]
 8011936:	2000      	movs	r0, #0
 8011938:	b007      	add	sp, #28
 801193a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801193e:	f04f 0b00 	mov.w	fp, #0
 8011942:	e7ca      	b.n	80118da <_scanf_i+0x15e>
 8011944:	07ca      	lsls	r2, r1, #31
 8011946:	bf4c      	ite	mi
 8011948:	8018      	strhmi	r0, [r3, #0]
 801194a:	6018      	strpl	r0, [r3, #0]
 801194c:	e7eb      	b.n	8011926 <_scanf_i+0x1aa>
 801194e:	2001      	movs	r0, #1
 8011950:	e7f2      	b.n	8011938 <_scanf_i+0x1bc>
 8011952:	bf00      	nop
 8011954:	0801264c 	.word	0x0801264c
 8011958:	08011065 	.word	0x08011065
 801195c:	08011d75 	.word	0x08011d75
 8011960:	08012aa2 	.word	0x08012aa2

08011964 <__sflush_r>:
 8011964:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011968:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801196c:	0716      	lsls	r6, r2, #28
 801196e:	4605      	mov	r5, r0
 8011970:	460c      	mov	r4, r1
 8011972:	d454      	bmi.n	8011a1e <__sflush_r+0xba>
 8011974:	684b      	ldr	r3, [r1, #4]
 8011976:	2b00      	cmp	r3, #0
 8011978:	dc02      	bgt.n	8011980 <__sflush_r+0x1c>
 801197a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801197c:	2b00      	cmp	r3, #0
 801197e:	dd48      	ble.n	8011a12 <__sflush_r+0xae>
 8011980:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011982:	2e00      	cmp	r6, #0
 8011984:	d045      	beq.n	8011a12 <__sflush_r+0xae>
 8011986:	2300      	movs	r3, #0
 8011988:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801198c:	682f      	ldr	r7, [r5, #0]
 801198e:	6a21      	ldr	r1, [r4, #32]
 8011990:	602b      	str	r3, [r5, #0]
 8011992:	d030      	beq.n	80119f6 <__sflush_r+0x92>
 8011994:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8011996:	89a3      	ldrh	r3, [r4, #12]
 8011998:	0759      	lsls	r1, r3, #29
 801199a:	d505      	bpl.n	80119a8 <__sflush_r+0x44>
 801199c:	6863      	ldr	r3, [r4, #4]
 801199e:	1ad2      	subs	r2, r2, r3
 80119a0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80119a2:	b10b      	cbz	r3, 80119a8 <__sflush_r+0x44>
 80119a4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80119a6:	1ad2      	subs	r2, r2, r3
 80119a8:	2300      	movs	r3, #0
 80119aa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80119ac:	6a21      	ldr	r1, [r4, #32]
 80119ae:	4628      	mov	r0, r5
 80119b0:	47b0      	blx	r6
 80119b2:	1c43      	adds	r3, r0, #1
 80119b4:	89a3      	ldrh	r3, [r4, #12]
 80119b6:	d106      	bne.n	80119c6 <__sflush_r+0x62>
 80119b8:	6829      	ldr	r1, [r5, #0]
 80119ba:	291d      	cmp	r1, #29
 80119bc:	d82b      	bhi.n	8011a16 <__sflush_r+0xb2>
 80119be:	4a2a      	ldr	r2, [pc, #168]	@ (8011a68 <__sflush_r+0x104>)
 80119c0:	410a      	asrs	r2, r1
 80119c2:	07d6      	lsls	r6, r2, #31
 80119c4:	d427      	bmi.n	8011a16 <__sflush_r+0xb2>
 80119c6:	2200      	movs	r2, #0
 80119c8:	6062      	str	r2, [r4, #4]
 80119ca:	04d9      	lsls	r1, r3, #19
 80119cc:	6922      	ldr	r2, [r4, #16]
 80119ce:	6022      	str	r2, [r4, #0]
 80119d0:	d504      	bpl.n	80119dc <__sflush_r+0x78>
 80119d2:	1c42      	adds	r2, r0, #1
 80119d4:	d101      	bne.n	80119da <__sflush_r+0x76>
 80119d6:	682b      	ldr	r3, [r5, #0]
 80119d8:	b903      	cbnz	r3, 80119dc <__sflush_r+0x78>
 80119da:	6560      	str	r0, [r4, #84]	@ 0x54
 80119dc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80119de:	602f      	str	r7, [r5, #0]
 80119e0:	b1b9      	cbz	r1, 8011a12 <__sflush_r+0xae>
 80119e2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80119e6:	4299      	cmp	r1, r3
 80119e8:	d002      	beq.n	80119f0 <__sflush_r+0x8c>
 80119ea:	4628      	mov	r0, r5
 80119ec:	f7fe fa7a 	bl	800fee4 <_free_r>
 80119f0:	2300      	movs	r3, #0
 80119f2:	6363      	str	r3, [r4, #52]	@ 0x34
 80119f4:	e00d      	b.n	8011a12 <__sflush_r+0xae>
 80119f6:	2301      	movs	r3, #1
 80119f8:	4628      	mov	r0, r5
 80119fa:	47b0      	blx	r6
 80119fc:	4602      	mov	r2, r0
 80119fe:	1c50      	adds	r0, r2, #1
 8011a00:	d1c9      	bne.n	8011996 <__sflush_r+0x32>
 8011a02:	682b      	ldr	r3, [r5, #0]
 8011a04:	2b00      	cmp	r3, #0
 8011a06:	d0c6      	beq.n	8011996 <__sflush_r+0x32>
 8011a08:	2b1d      	cmp	r3, #29
 8011a0a:	d001      	beq.n	8011a10 <__sflush_r+0xac>
 8011a0c:	2b16      	cmp	r3, #22
 8011a0e:	d11e      	bne.n	8011a4e <__sflush_r+0xea>
 8011a10:	602f      	str	r7, [r5, #0]
 8011a12:	2000      	movs	r0, #0
 8011a14:	e022      	b.n	8011a5c <__sflush_r+0xf8>
 8011a16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011a1a:	b21b      	sxth	r3, r3
 8011a1c:	e01b      	b.n	8011a56 <__sflush_r+0xf2>
 8011a1e:	690f      	ldr	r7, [r1, #16]
 8011a20:	2f00      	cmp	r7, #0
 8011a22:	d0f6      	beq.n	8011a12 <__sflush_r+0xae>
 8011a24:	0793      	lsls	r3, r2, #30
 8011a26:	680e      	ldr	r6, [r1, #0]
 8011a28:	bf08      	it	eq
 8011a2a:	694b      	ldreq	r3, [r1, #20]
 8011a2c:	600f      	str	r7, [r1, #0]
 8011a2e:	bf18      	it	ne
 8011a30:	2300      	movne	r3, #0
 8011a32:	eba6 0807 	sub.w	r8, r6, r7
 8011a36:	608b      	str	r3, [r1, #8]
 8011a38:	f1b8 0f00 	cmp.w	r8, #0
 8011a3c:	dde9      	ble.n	8011a12 <__sflush_r+0xae>
 8011a3e:	6a21      	ldr	r1, [r4, #32]
 8011a40:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8011a42:	4643      	mov	r3, r8
 8011a44:	463a      	mov	r2, r7
 8011a46:	4628      	mov	r0, r5
 8011a48:	47b0      	blx	r6
 8011a4a:	2800      	cmp	r0, #0
 8011a4c:	dc08      	bgt.n	8011a60 <__sflush_r+0xfc>
 8011a4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011a52:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011a56:	81a3      	strh	r3, [r4, #12]
 8011a58:	f04f 30ff 	mov.w	r0, #4294967295
 8011a5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011a60:	4407      	add	r7, r0
 8011a62:	eba8 0800 	sub.w	r8, r8, r0
 8011a66:	e7e7      	b.n	8011a38 <__sflush_r+0xd4>
 8011a68:	dfbffffe 	.word	0xdfbffffe

08011a6c <_fflush_r>:
 8011a6c:	b538      	push	{r3, r4, r5, lr}
 8011a6e:	690b      	ldr	r3, [r1, #16]
 8011a70:	4605      	mov	r5, r0
 8011a72:	460c      	mov	r4, r1
 8011a74:	b913      	cbnz	r3, 8011a7c <_fflush_r+0x10>
 8011a76:	2500      	movs	r5, #0
 8011a78:	4628      	mov	r0, r5
 8011a7a:	bd38      	pop	{r3, r4, r5, pc}
 8011a7c:	b118      	cbz	r0, 8011a86 <_fflush_r+0x1a>
 8011a7e:	6a03      	ldr	r3, [r0, #32]
 8011a80:	b90b      	cbnz	r3, 8011a86 <_fflush_r+0x1a>
 8011a82:	f7fd fabd 	bl	800f000 <__sinit>
 8011a86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011a8a:	2b00      	cmp	r3, #0
 8011a8c:	d0f3      	beq.n	8011a76 <_fflush_r+0xa>
 8011a8e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8011a90:	07d0      	lsls	r0, r2, #31
 8011a92:	d404      	bmi.n	8011a9e <_fflush_r+0x32>
 8011a94:	0599      	lsls	r1, r3, #22
 8011a96:	d402      	bmi.n	8011a9e <_fflush_r+0x32>
 8011a98:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011a9a:	f7fd fc22 	bl	800f2e2 <__retarget_lock_acquire_recursive>
 8011a9e:	4628      	mov	r0, r5
 8011aa0:	4621      	mov	r1, r4
 8011aa2:	f7ff ff5f 	bl	8011964 <__sflush_r>
 8011aa6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011aa8:	07da      	lsls	r2, r3, #31
 8011aaa:	4605      	mov	r5, r0
 8011aac:	d4e4      	bmi.n	8011a78 <_fflush_r+0xc>
 8011aae:	89a3      	ldrh	r3, [r4, #12]
 8011ab0:	059b      	lsls	r3, r3, #22
 8011ab2:	d4e1      	bmi.n	8011a78 <_fflush_r+0xc>
 8011ab4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011ab6:	f7fd fc15 	bl	800f2e4 <__retarget_lock_release_recursive>
 8011aba:	e7dd      	b.n	8011a78 <_fflush_r+0xc>

08011abc <__sccl>:
 8011abc:	b570      	push	{r4, r5, r6, lr}
 8011abe:	780b      	ldrb	r3, [r1, #0]
 8011ac0:	4604      	mov	r4, r0
 8011ac2:	2b5e      	cmp	r3, #94	@ 0x5e
 8011ac4:	bf0b      	itete	eq
 8011ac6:	784b      	ldrbeq	r3, [r1, #1]
 8011ac8:	1c4a      	addne	r2, r1, #1
 8011aca:	1c8a      	addeq	r2, r1, #2
 8011acc:	2100      	movne	r1, #0
 8011ace:	bf08      	it	eq
 8011ad0:	2101      	moveq	r1, #1
 8011ad2:	3801      	subs	r0, #1
 8011ad4:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8011ad8:	f800 1f01 	strb.w	r1, [r0, #1]!
 8011adc:	42a8      	cmp	r0, r5
 8011ade:	d1fb      	bne.n	8011ad8 <__sccl+0x1c>
 8011ae0:	b90b      	cbnz	r3, 8011ae6 <__sccl+0x2a>
 8011ae2:	1e50      	subs	r0, r2, #1
 8011ae4:	bd70      	pop	{r4, r5, r6, pc}
 8011ae6:	f081 0101 	eor.w	r1, r1, #1
 8011aea:	54e1      	strb	r1, [r4, r3]
 8011aec:	4610      	mov	r0, r2
 8011aee:	4602      	mov	r2, r0
 8011af0:	f812 5b01 	ldrb.w	r5, [r2], #1
 8011af4:	2d2d      	cmp	r5, #45	@ 0x2d
 8011af6:	d005      	beq.n	8011b04 <__sccl+0x48>
 8011af8:	2d5d      	cmp	r5, #93	@ 0x5d
 8011afa:	d016      	beq.n	8011b2a <__sccl+0x6e>
 8011afc:	2d00      	cmp	r5, #0
 8011afe:	d0f1      	beq.n	8011ae4 <__sccl+0x28>
 8011b00:	462b      	mov	r3, r5
 8011b02:	e7f2      	b.n	8011aea <__sccl+0x2e>
 8011b04:	7846      	ldrb	r6, [r0, #1]
 8011b06:	2e5d      	cmp	r6, #93	@ 0x5d
 8011b08:	d0fa      	beq.n	8011b00 <__sccl+0x44>
 8011b0a:	42b3      	cmp	r3, r6
 8011b0c:	dcf8      	bgt.n	8011b00 <__sccl+0x44>
 8011b0e:	3002      	adds	r0, #2
 8011b10:	461a      	mov	r2, r3
 8011b12:	3201      	adds	r2, #1
 8011b14:	4296      	cmp	r6, r2
 8011b16:	54a1      	strb	r1, [r4, r2]
 8011b18:	dcfb      	bgt.n	8011b12 <__sccl+0x56>
 8011b1a:	1af2      	subs	r2, r6, r3
 8011b1c:	3a01      	subs	r2, #1
 8011b1e:	1c5d      	adds	r5, r3, #1
 8011b20:	42b3      	cmp	r3, r6
 8011b22:	bfa8      	it	ge
 8011b24:	2200      	movge	r2, #0
 8011b26:	18ab      	adds	r3, r5, r2
 8011b28:	e7e1      	b.n	8011aee <__sccl+0x32>
 8011b2a:	4610      	mov	r0, r2
 8011b2c:	e7da      	b.n	8011ae4 <__sccl+0x28>

08011b2e <__submore>:
 8011b2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011b32:	460c      	mov	r4, r1
 8011b34:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8011b36:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011b3a:	4299      	cmp	r1, r3
 8011b3c:	d11d      	bne.n	8011b7a <__submore+0x4c>
 8011b3e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8011b42:	f7fb fd4b 	bl	800d5dc <_malloc_r>
 8011b46:	b918      	cbnz	r0, 8011b50 <__submore+0x22>
 8011b48:	f04f 30ff 	mov.w	r0, #4294967295
 8011b4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011b50:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011b54:	63a3      	str	r3, [r4, #56]	@ 0x38
 8011b56:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8011b5a:	6360      	str	r0, [r4, #52]	@ 0x34
 8011b5c:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8011b60:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8011b64:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8011b68:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8011b6c:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8011b70:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8011b74:	6020      	str	r0, [r4, #0]
 8011b76:	2000      	movs	r0, #0
 8011b78:	e7e8      	b.n	8011b4c <__submore+0x1e>
 8011b7a:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8011b7c:	0077      	lsls	r7, r6, #1
 8011b7e:	463a      	mov	r2, r7
 8011b80:	f000 f85c 	bl	8011c3c <_realloc_r>
 8011b84:	4605      	mov	r5, r0
 8011b86:	2800      	cmp	r0, #0
 8011b88:	d0de      	beq.n	8011b48 <__submore+0x1a>
 8011b8a:	eb00 0806 	add.w	r8, r0, r6
 8011b8e:	4601      	mov	r1, r0
 8011b90:	4632      	mov	r2, r6
 8011b92:	4640      	mov	r0, r8
 8011b94:	f7fd fba7 	bl	800f2e6 <memcpy>
 8011b98:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8011b9c:	f8c4 8000 	str.w	r8, [r4]
 8011ba0:	e7e9      	b.n	8011b76 <__submore+0x48>

08011ba2 <memmove>:
 8011ba2:	4288      	cmp	r0, r1
 8011ba4:	b510      	push	{r4, lr}
 8011ba6:	eb01 0402 	add.w	r4, r1, r2
 8011baa:	d902      	bls.n	8011bb2 <memmove+0x10>
 8011bac:	4284      	cmp	r4, r0
 8011bae:	4623      	mov	r3, r4
 8011bb0:	d807      	bhi.n	8011bc2 <memmove+0x20>
 8011bb2:	1e43      	subs	r3, r0, #1
 8011bb4:	42a1      	cmp	r1, r4
 8011bb6:	d008      	beq.n	8011bca <memmove+0x28>
 8011bb8:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011bbc:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011bc0:	e7f8      	b.n	8011bb4 <memmove+0x12>
 8011bc2:	4402      	add	r2, r0
 8011bc4:	4601      	mov	r1, r0
 8011bc6:	428a      	cmp	r2, r1
 8011bc8:	d100      	bne.n	8011bcc <memmove+0x2a>
 8011bca:	bd10      	pop	{r4, pc}
 8011bcc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011bd0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011bd4:	e7f7      	b.n	8011bc6 <memmove+0x24>
	...

08011bd8 <__assert_func>:
 8011bd8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011bda:	4614      	mov	r4, r2
 8011bdc:	461a      	mov	r2, r3
 8011bde:	4b09      	ldr	r3, [pc, #36]	@ (8011c04 <__assert_func+0x2c>)
 8011be0:	681b      	ldr	r3, [r3, #0]
 8011be2:	4605      	mov	r5, r0
 8011be4:	68d8      	ldr	r0, [r3, #12]
 8011be6:	b954      	cbnz	r4, 8011bfe <__assert_func+0x26>
 8011be8:	4b07      	ldr	r3, [pc, #28]	@ (8011c08 <__assert_func+0x30>)
 8011bea:	461c      	mov	r4, r3
 8011bec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011bf0:	9100      	str	r1, [sp, #0]
 8011bf2:	462b      	mov	r3, r5
 8011bf4:	4905      	ldr	r1, [pc, #20]	@ (8011c0c <__assert_func+0x34>)
 8011bf6:	f000 f8bf 	bl	8011d78 <fiprintf>
 8011bfa:	f000 f8cf 	bl	8011d9c <abort>
 8011bfe:	4b04      	ldr	r3, [pc, #16]	@ (8011c10 <__assert_func+0x38>)
 8011c00:	e7f4      	b.n	8011bec <__assert_func+0x14>
 8011c02:	bf00      	nop
 8011c04:	240001e0 	.word	0x240001e0
 8011c08:	08012ae8 	.word	0x08012ae8
 8011c0c:	08012aba 	.word	0x08012aba
 8011c10:	08012aad 	.word	0x08012aad

08011c14 <_calloc_r>:
 8011c14:	b570      	push	{r4, r5, r6, lr}
 8011c16:	fba1 5402 	umull	r5, r4, r1, r2
 8011c1a:	b93c      	cbnz	r4, 8011c2c <_calloc_r+0x18>
 8011c1c:	4629      	mov	r1, r5
 8011c1e:	f7fb fcdd 	bl	800d5dc <_malloc_r>
 8011c22:	4606      	mov	r6, r0
 8011c24:	b928      	cbnz	r0, 8011c32 <_calloc_r+0x1e>
 8011c26:	2600      	movs	r6, #0
 8011c28:	4630      	mov	r0, r6
 8011c2a:	bd70      	pop	{r4, r5, r6, pc}
 8011c2c:	220c      	movs	r2, #12
 8011c2e:	6002      	str	r2, [r0, #0]
 8011c30:	e7f9      	b.n	8011c26 <_calloc_r+0x12>
 8011c32:	462a      	mov	r2, r5
 8011c34:	4621      	mov	r1, r4
 8011c36:	f7fd faa8 	bl	800f18a <memset>
 8011c3a:	e7f5      	b.n	8011c28 <_calloc_r+0x14>

08011c3c <_realloc_r>:
 8011c3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011c40:	4680      	mov	r8, r0
 8011c42:	4615      	mov	r5, r2
 8011c44:	460c      	mov	r4, r1
 8011c46:	b921      	cbnz	r1, 8011c52 <_realloc_r+0x16>
 8011c48:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011c4c:	4611      	mov	r1, r2
 8011c4e:	f7fb bcc5 	b.w	800d5dc <_malloc_r>
 8011c52:	b92a      	cbnz	r2, 8011c60 <_realloc_r+0x24>
 8011c54:	f7fe f946 	bl	800fee4 <_free_r>
 8011c58:	2400      	movs	r4, #0
 8011c5a:	4620      	mov	r0, r4
 8011c5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011c60:	f000 f8a3 	bl	8011daa <_malloc_usable_size_r>
 8011c64:	4285      	cmp	r5, r0
 8011c66:	4606      	mov	r6, r0
 8011c68:	d802      	bhi.n	8011c70 <_realloc_r+0x34>
 8011c6a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8011c6e:	d8f4      	bhi.n	8011c5a <_realloc_r+0x1e>
 8011c70:	4629      	mov	r1, r5
 8011c72:	4640      	mov	r0, r8
 8011c74:	f7fb fcb2 	bl	800d5dc <_malloc_r>
 8011c78:	4607      	mov	r7, r0
 8011c7a:	2800      	cmp	r0, #0
 8011c7c:	d0ec      	beq.n	8011c58 <_realloc_r+0x1c>
 8011c7e:	42b5      	cmp	r5, r6
 8011c80:	462a      	mov	r2, r5
 8011c82:	4621      	mov	r1, r4
 8011c84:	bf28      	it	cs
 8011c86:	4632      	movcs	r2, r6
 8011c88:	f7fd fb2d 	bl	800f2e6 <memcpy>
 8011c8c:	4621      	mov	r1, r4
 8011c8e:	4640      	mov	r0, r8
 8011c90:	f7fe f928 	bl	800fee4 <_free_r>
 8011c94:	463c      	mov	r4, r7
 8011c96:	e7e0      	b.n	8011c5a <_realloc_r+0x1e>

08011c98 <_strtoul_l.constprop.0>:
 8011c98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011c9c:	4e34      	ldr	r6, [pc, #208]	@ (8011d70 <_strtoul_l.constprop.0+0xd8>)
 8011c9e:	4686      	mov	lr, r0
 8011ca0:	460d      	mov	r5, r1
 8011ca2:	4628      	mov	r0, r5
 8011ca4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011ca8:	5d37      	ldrb	r7, [r6, r4]
 8011caa:	f017 0708 	ands.w	r7, r7, #8
 8011cae:	d1f8      	bne.n	8011ca2 <_strtoul_l.constprop.0+0xa>
 8011cb0:	2c2d      	cmp	r4, #45	@ 0x2d
 8011cb2:	d12f      	bne.n	8011d14 <_strtoul_l.constprop.0+0x7c>
 8011cb4:	782c      	ldrb	r4, [r5, #0]
 8011cb6:	2701      	movs	r7, #1
 8011cb8:	1c85      	adds	r5, r0, #2
 8011cba:	f033 0010 	bics.w	r0, r3, #16
 8011cbe:	d109      	bne.n	8011cd4 <_strtoul_l.constprop.0+0x3c>
 8011cc0:	2c30      	cmp	r4, #48	@ 0x30
 8011cc2:	d12c      	bne.n	8011d1e <_strtoul_l.constprop.0+0x86>
 8011cc4:	7828      	ldrb	r0, [r5, #0]
 8011cc6:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8011cca:	2858      	cmp	r0, #88	@ 0x58
 8011ccc:	d127      	bne.n	8011d1e <_strtoul_l.constprop.0+0x86>
 8011cce:	786c      	ldrb	r4, [r5, #1]
 8011cd0:	2310      	movs	r3, #16
 8011cd2:	3502      	adds	r5, #2
 8011cd4:	f04f 38ff 	mov.w	r8, #4294967295
 8011cd8:	2600      	movs	r6, #0
 8011cda:	fbb8 f8f3 	udiv	r8, r8, r3
 8011cde:	fb03 f908 	mul.w	r9, r3, r8
 8011ce2:	ea6f 0909 	mvn.w	r9, r9
 8011ce6:	4630      	mov	r0, r6
 8011ce8:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8011cec:	f1bc 0f09 	cmp.w	ip, #9
 8011cf0:	d81c      	bhi.n	8011d2c <_strtoul_l.constprop.0+0x94>
 8011cf2:	4664      	mov	r4, ip
 8011cf4:	42a3      	cmp	r3, r4
 8011cf6:	dd2a      	ble.n	8011d4e <_strtoul_l.constprop.0+0xb6>
 8011cf8:	f1b6 3fff 	cmp.w	r6, #4294967295
 8011cfc:	d007      	beq.n	8011d0e <_strtoul_l.constprop.0+0x76>
 8011cfe:	4580      	cmp	r8, r0
 8011d00:	d322      	bcc.n	8011d48 <_strtoul_l.constprop.0+0xb0>
 8011d02:	d101      	bne.n	8011d08 <_strtoul_l.constprop.0+0x70>
 8011d04:	45a1      	cmp	r9, r4
 8011d06:	db1f      	blt.n	8011d48 <_strtoul_l.constprop.0+0xb0>
 8011d08:	fb00 4003 	mla	r0, r0, r3, r4
 8011d0c:	2601      	movs	r6, #1
 8011d0e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011d12:	e7e9      	b.n	8011ce8 <_strtoul_l.constprop.0+0x50>
 8011d14:	2c2b      	cmp	r4, #43	@ 0x2b
 8011d16:	bf04      	itt	eq
 8011d18:	782c      	ldrbeq	r4, [r5, #0]
 8011d1a:	1c85      	addeq	r5, r0, #2
 8011d1c:	e7cd      	b.n	8011cba <_strtoul_l.constprop.0+0x22>
 8011d1e:	2b00      	cmp	r3, #0
 8011d20:	d1d8      	bne.n	8011cd4 <_strtoul_l.constprop.0+0x3c>
 8011d22:	2c30      	cmp	r4, #48	@ 0x30
 8011d24:	bf0c      	ite	eq
 8011d26:	2308      	moveq	r3, #8
 8011d28:	230a      	movne	r3, #10
 8011d2a:	e7d3      	b.n	8011cd4 <_strtoul_l.constprop.0+0x3c>
 8011d2c:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8011d30:	f1bc 0f19 	cmp.w	ip, #25
 8011d34:	d801      	bhi.n	8011d3a <_strtoul_l.constprop.0+0xa2>
 8011d36:	3c37      	subs	r4, #55	@ 0x37
 8011d38:	e7dc      	b.n	8011cf4 <_strtoul_l.constprop.0+0x5c>
 8011d3a:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8011d3e:	f1bc 0f19 	cmp.w	ip, #25
 8011d42:	d804      	bhi.n	8011d4e <_strtoul_l.constprop.0+0xb6>
 8011d44:	3c57      	subs	r4, #87	@ 0x57
 8011d46:	e7d5      	b.n	8011cf4 <_strtoul_l.constprop.0+0x5c>
 8011d48:	f04f 36ff 	mov.w	r6, #4294967295
 8011d4c:	e7df      	b.n	8011d0e <_strtoul_l.constprop.0+0x76>
 8011d4e:	1c73      	adds	r3, r6, #1
 8011d50:	d106      	bne.n	8011d60 <_strtoul_l.constprop.0+0xc8>
 8011d52:	2322      	movs	r3, #34	@ 0x22
 8011d54:	f8ce 3000 	str.w	r3, [lr]
 8011d58:	4630      	mov	r0, r6
 8011d5a:	b932      	cbnz	r2, 8011d6a <_strtoul_l.constprop.0+0xd2>
 8011d5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011d60:	b107      	cbz	r7, 8011d64 <_strtoul_l.constprop.0+0xcc>
 8011d62:	4240      	negs	r0, r0
 8011d64:	2a00      	cmp	r2, #0
 8011d66:	d0f9      	beq.n	8011d5c <_strtoul_l.constprop.0+0xc4>
 8011d68:	b106      	cbz	r6, 8011d6c <_strtoul_l.constprop.0+0xd4>
 8011d6a:	1e69      	subs	r1, r5, #1
 8011d6c:	6011      	str	r1, [r2, #0]
 8011d6e:	e7f5      	b.n	8011d5c <_strtoul_l.constprop.0+0xc4>
 8011d70:	08012981 	.word	0x08012981

08011d74 <_strtoul_r>:
 8011d74:	f7ff bf90 	b.w	8011c98 <_strtoul_l.constprop.0>

08011d78 <fiprintf>:
 8011d78:	b40e      	push	{r1, r2, r3}
 8011d7a:	b503      	push	{r0, r1, lr}
 8011d7c:	4601      	mov	r1, r0
 8011d7e:	ab03      	add	r3, sp, #12
 8011d80:	4805      	ldr	r0, [pc, #20]	@ (8011d98 <fiprintf+0x20>)
 8011d82:	f853 2b04 	ldr.w	r2, [r3], #4
 8011d86:	6800      	ldr	r0, [r0, #0]
 8011d88:	9301      	str	r3, [sp, #4]
 8011d8a:	f000 f83f 	bl	8011e0c <_vfiprintf_r>
 8011d8e:	b002      	add	sp, #8
 8011d90:	f85d eb04 	ldr.w	lr, [sp], #4
 8011d94:	b003      	add	sp, #12
 8011d96:	4770      	bx	lr
 8011d98:	240001e0 	.word	0x240001e0

08011d9c <abort>:
 8011d9c:	b508      	push	{r3, lr}
 8011d9e:	2006      	movs	r0, #6
 8011da0:	f000 fa08 	bl	80121b4 <raise>
 8011da4:	2001      	movs	r0, #1
 8011da6:	f7ef fe5f 	bl	8001a68 <_exit>

08011daa <_malloc_usable_size_r>:
 8011daa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011dae:	1f18      	subs	r0, r3, #4
 8011db0:	2b00      	cmp	r3, #0
 8011db2:	bfbc      	itt	lt
 8011db4:	580b      	ldrlt	r3, [r1, r0]
 8011db6:	18c0      	addlt	r0, r0, r3
 8011db8:	4770      	bx	lr

08011dba <__sfputc_r>:
 8011dba:	6893      	ldr	r3, [r2, #8]
 8011dbc:	3b01      	subs	r3, #1
 8011dbe:	2b00      	cmp	r3, #0
 8011dc0:	b410      	push	{r4}
 8011dc2:	6093      	str	r3, [r2, #8]
 8011dc4:	da08      	bge.n	8011dd8 <__sfputc_r+0x1e>
 8011dc6:	6994      	ldr	r4, [r2, #24]
 8011dc8:	42a3      	cmp	r3, r4
 8011dca:	db01      	blt.n	8011dd0 <__sfputc_r+0x16>
 8011dcc:	290a      	cmp	r1, #10
 8011dce:	d103      	bne.n	8011dd8 <__sfputc_r+0x1e>
 8011dd0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011dd4:	f000 b932 	b.w	801203c <__swbuf_r>
 8011dd8:	6813      	ldr	r3, [r2, #0]
 8011dda:	1c58      	adds	r0, r3, #1
 8011ddc:	6010      	str	r0, [r2, #0]
 8011dde:	7019      	strb	r1, [r3, #0]
 8011de0:	4608      	mov	r0, r1
 8011de2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011de6:	4770      	bx	lr

08011de8 <__sfputs_r>:
 8011de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011dea:	4606      	mov	r6, r0
 8011dec:	460f      	mov	r7, r1
 8011dee:	4614      	mov	r4, r2
 8011df0:	18d5      	adds	r5, r2, r3
 8011df2:	42ac      	cmp	r4, r5
 8011df4:	d101      	bne.n	8011dfa <__sfputs_r+0x12>
 8011df6:	2000      	movs	r0, #0
 8011df8:	e007      	b.n	8011e0a <__sfputs_r+0x22>
 8011dfa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011dfe:	463a      	mov	r2, r7
 8011e00:	4630      	mov	r0, r6
 8011e02:	f7ff ffda 	bl	8011dba <__sfputc_r>
 8011e06:	1c43      	adds	r3, r0, #1
 8011e08:	d1f3      	bne.n	8011df2 <__sfputs_r+0xa>
 8011e0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08011e0c <_vfiprintf_r>:
 8011e0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e10:	460d      	mov	r5, r1
 8011e12:	b09d      	sub	sp, #116	@ 0x74
 8011e14:	4614      	mov	r4, r2
 8011e16:	4698      	mov	r8, r3
 8011e18:	4606      	mov	r6, r0
 8011e1a:	b118      	cbz	r0, 8011e24 <_vfiprintf_r+0x18>
 8011e1c:	6a03      	ldr	r3, [r0, #32]
 8011e1e:	b90b      	cbnz	r3, 8011e24 <_vfiprintf_r+0x18>
 8011e20:	f7fd f8ee 	bl	800f000 <__sinit>
 8011e24:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011e26:	07d9      	lsls	r1, r3, #31
 8011e28:	d405      	bmi.n	8011e36 <_vfiprintf_r+0x2a>
 8011e2a:	89ab      	ldrh	r3, [r5, #12]
 8011e2c:	059a      	lsls	r2, r3, #22
 8011e2e:	d402      	bmi.n	8011e36 <_vfiprintf_r+0x2a>
 8011e30:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011e32:	f7fd fa56 	bl	800f2e2 <__retarget_lock_acquire_recursive>
 8011e36:	89ab      	ldrh	r3, [r5, #12]
 8011e38:	071b      	lsls	r3, r3, #28
 8011e3a:	d501      	bpl.n	8011e40 <_vfiprintf_r+0x34>
 8011e3c:	692b      	ldr	r3, [r5, #16]
 8011e3e:	b99b      	cbnz	r3, 8011e68 <_vfiprintf_r+0x5c>
 8011e40:	4629      	mov	r1, r5
 8011e42:	4630      	mov	r0, r6
 8011e44:	f000 f938 	bl	80120b8 <__swsetup_r>
 8011e48:	b170      	cbz	r0, 8011e68 <_vfiprintf_r+0x5c>
 8011e4a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011e4c:	07dc      	lsls	r4, r3, #31
 8011e4e:	d504      	bpl.n	8011e5a <_vfiprintf_r+0x4e>
 8011e50:	f04f 30ff 	mov.w	r0, #4294967295
 8011e54:	b01d      	add	sp, #116	@ 0x74
 8011e56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011e5a:	89ab      	ldrh	r3, [r5, #12]
 8011e5c:	0598      	lsls	r0, r3, #22
 8011e5e:	d4f7      	bmi.n	8011e50 <_vfiprintf_r+0x44>
 8011e60:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011e62:	f7fd fa3f 	bl	800f2e4 <__retarget_lock_release_recursive>
 8011e66:	e7f3      	b.n	8011e50 <_vfiprintf_r+0x44>
 8011e68:	2300      	movs	r3, #0
 8011e6a:	9309      	str	r3, [sp, #36]	@ 0x24
 8011e6c:	2320      	movs	r3, #32
 8011e6e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011e72:	f8cd 800c 	str.w	r8, [sp, #12]
 8011e76:	2330      	movs	r3, #48	@ 0x30
 8011e78:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8012028 <_vfiprintf_r+0x21c>
 8011e7c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011e80:	f04f 0901 	mov.w	r9, #1
 8011e84:	4623      	mov	r3, r4
 8011e86:	469a      	mov	sl, r3
 8011e88:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011e8c:	b10a      	cbz	r2, 8011e92 <_vfiprintf_r+0x86>
 8011e8e:	2a25      	cmp	r2, #37	@ 0x25
 8011e90:	d1f9      	bne.n	8011e86 <_vfiprintf_r+0x7a>
 8011e92:	ebba 0b04 	subs.w	fp, sl, r4
 8011e96:	d00b      	beq.n	8011eb0 <_vfiprintf_r+0xa4>
 8011e98:	465b      	mov	r3, fp
 8011e9a:	4622      	mov	r2, r4
 8011e9c:	4629      	mov	r1, r5
 8011e9e:	4630      	mov	r0, r6
 8011ea0:	f7ff ffa2 	bl	8011de8 <__sfputs_r>
 8011ea4:	3001      	adds	r0, #1
 8011ea6:	f000 80a7 	beq.w	8011ff8 <_vfiprintf_r+0x1ec>
 8011eaa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011eac:	445a      	add	r2, fp
 8011eae:	9209      	str	r2, [sp, #36]	@ 0x24
 8011eb0:	f89a 3000 	ldrb.w	r3, [sl]
 8011eb4:	2b00      	cmp	r3, #0
 8011eb6:	f000 809f 	beq.w	8011ff8 <_vfiprintf_r+0x1ec>
 8011eba:	2300      	movs	r3, #0
 8011ebc:	f04f 32ff 	mov.w	r2, #4294967295
 8011ec0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011ec4:	f10a 0a01 	add.w	sl, sl, #1
 8011ec8:	9304      	str	r3, [sp, #16]
 8011eca:	9307      	str	r3, [sp, #28]
 8011ecc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011ed0:	931a      	str	r3, [sp, #104]	@ 0x68
 8011ed2:	4654      	mov	r4, sl
 8011ed4:	2205      	movs	r2, #5
 8011ed6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011eda:	4853      	ldr	r0, [pc, #332]	@ (8012028 <_vfiprintf_r+0x21c>)
 8011edc:	f7ee fa18 	bl	8000310 <memchr>
 8011ee0:	9a04      	ldr	r2, [sp, #16]
 8011ee2:	b9d8      	cbnz	r0, 8011f1c <_vfiprintf_r+0x110>
 8011ee4:	06d1      	lsls	r1, r2, #27
 8011ee6:	bf44      	itt	mi
 8011ee8:	2320      	movmi	r3, #32
 8011eea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011eee:	0713      	lsls	r3, r2, #28
 8011ef0:	bf44      	itt	mi
 8011ef2:	232b      	movmi	r3, #43	@ 0x2b
 8011ef4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011ef8:	f89a 3000 	ldrb.w	r3, [sl]
 8011efc:	2b2a      	cmp	r3, #42	@ 0x2a
 8011efe:	d015      	beq.n	8011f2c <_vfiprintf_r+0x120>
 8011f00:	9a07      	ldr	r2, [sp, #28]
 8011f02:	4654      	mov	r4, sl
 8011f04:	2000      	movs	r0, #0
 8011f06:	f04f 0c0a 	mov.w	ip, #10
 8011f0a:	4621      	mov	r1, r4
 8011f0c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011f10:	3b30      	subs	r3, #48	@ 0x30
 8011f12:	2b09      	cmp	r3, #9
 8011f14:	d94b      	bls.n	8011fae <_vfiprintf_r+0x1a2>
 8011f16:	b1b0      	cbz	r0, 8011f46 <_vfiprintf_r+0x13a>
 8011f18:	9207      	str	r2, [sp, #28]
 8011f1a:	e014      	b.n	8011f46 <_vfiprintf_r+0x13a>
 8011f1c:	eba0 0308 	sub.w	r3, r0, r8
 8011f20:	fa09 f303 	lsl.w	r3, r9, r3
 8011f24:	4313      	orrs	r3, r2
 8011f26:	9304      	str	r3, [sp, #16]
 8011f28:	46a2      	mov	sl, r4
 8011f2a:	e7d2      	b.n	8011ed2 <_vfiprintf_r+0xc6>
 8011f2c:	9b03      	ldr	r3, [sp, #12]
 8011f2e:	1d19      	adds	r1, r3, #4
 8011f30:	681b      	ldr	r3, [r3, #0]
 8011f32:	9103      	str	r1, [sp, #12]
 8011f34:	2b00      	cmp	r3, #0
 8011f36:	bfbb      	ittet	lt
 8011f38:	425b      	neglt	r3, r3
 8011f3a:	f042 0202 	orrlt.w	r2, r2, #2
 8011f3e:	9307      	strge	r3, [sp, #28]
 8011f40:	9307      	strlt	r3, [sp, #28]
 8011f42:	bfb8      	it	lt
 8011f44:	9204      	strlt	r2, [sp, #16]
 8011f46:	7823      	ldrb	r3, [r4, #0]
 8011f48:	2b2e      	cmp	r3, #46	@ 0x2e
 8011f4a:	d10a      	bne.n	8011f62 <_vfiprintf_r+0x156>
 8011f4c:	7863      	ldrb	r3, [r4, #1]
 8011f4e:	2b2a      	cmp	r3, #42	@ 0x2a
 8011f50:	d132      	bne.n	8011fb8 <_vfiprintf_r+0x1ac>
 8011f52:	9b03      	ldr	r3, [sp, #12]
 8011f54:	1d1a      	adds	r2, r3, #4
 8011f56:	681b      	ldr	r3, [r3, #0]
 8011f58:	9203      	str	r2, [sp, #12]
 8011f5a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011f5e:	3402      	adds	r4, #2
 8011f60:	9305      	str	r3, [sp, #20]
 8011f62:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8012038 <_vfiprintf_r+0x22c>
 8011f66:	7821      	ldrb	r1, [r4, #0]
 8011f68:	2203      	movs	r2, #3
 8011f6a:	4650      	mov	r0, sl
 8011f6c:	f7ee f9d0 	bl	8000310 <memchr>
 8011f70:	b138      	cbz	r0, 8011f82 <_vfiprintf_r+0x176>
 8011f72:	9b04      	ldr	r3, [sp, #16]
 8011f74:	eba0 000a 	sub.w	r0, r0, sl
 8011f78:	2240      	movs	r2, #64	@ 0x40
 8011f7a:	4082      	lsls	r2, r0
 8011f7c:	4313      	orrs	r3, r2
 8011f7e:	3401      	adds	r4, #1
 8011f80:	9304      	str	r3, [sp, #16]
 8011f82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011f86:	4829      	ldr	r0, [pc, #164]	@ (801202c <_vfiprintf_r+0x220>)
 8011f88:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011f8c:	2206      	movs	r2, #6
 8011f8e:	f7ee f9bf 	bl	8000310 <memchr>
 8011f92:	2800      	cmp	r0, #0
 8011f94:	d03f      	beq.n	8012016 <_vfiprintf_r+0x20a>
 8011f96:	4b26      	ldr	r3, [pc, #152]	@ (8012030 <_vfiprintf_r+0x224>)
 8011f98:	bb1b      	cbnz	r3, 8011fe2 <_vfiprintf_r+0x1d6>
 8011f9a:	9b03      	ldr	r3, [sp, #12]
 8011f9c:	3307      	adds	r3, #7
 8011f9e:	f023 0307 	bic.w	r3, r3, #7
 8011fa2:	3308      	adds	r3, #8
 8011fa4:	9303      	str	r3, [sp, #12]
 8011fa6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011fa8:	443b      	add	r3, r7
 8011faa:	9309      	str	r3, [sp, #36]	@ 0x24
 8011fac:	e76a      	b.n	8011e84 <_vfiprintf_r+0x78>
 8011fae:	fb0c 3202 	mla	r2, ip, r2, r3
 8011fb2:	460c      	mov	r4, r1
 8011fb4:	2001      	movs	r0, #1
 8011fb6:	e7a8      	b.n	8011f0a <_vfiprintf_r+0xfe>
 8011fb8:	2300      	movs	r3, #0
 8011fba:	3401      	adds	r4, #1
 8011fbc:	9305      	str	r3, [sp, #20]
 8011fbe:	4619      	mov	r1, r3
 8011fc0:	f04f 0c0a 	mov.w	ip, #10
 8011fc4:	4620      	mov	r0, r4
 8011fc6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011fca:	3a30      	subs	r2, #48	@ 0x30
 8011fcc:	2a09      	cmp	r2, #9
 8011fce:	d903      	bls.n	8011fd8 <_vfiprintf_r+0x1cc>
 8011fd0:	2b00      	cmp	r3, #0
 8011fd2:	d0c6      	beq.n	8011f62 <_vfiprintf_r+0x156>
 8011fd4:	9105      	str	r1, [sp, #20]
 8011fd6:	e7c4      	b.n	8011f62 <_vfiprintf_r+0x156>
 8011fd8:	fb0c 2101 	mla	r1, ip, r1, r2
 8011fdc:	4604      	mov	r4, r0
 8011fde:	2301      	movs	r3, #1
 8011fe0:	e7f0      	b.n	8011fc4 <_vfiprintf_r+0x1b8>
 8011fe2:	ab03      	add	r3, sp, #12
 8011fe4:	9300      	str	r3, [sp, #0]
 8011fe6:	462a      	mov	r2, r5
 8011fe8:	4b12      	ldr	r3, [pc, #72]	@ (8012034 <_vfiprintf_r+0x228>)
 8011fea:	a904      	add	r1, sp, #16
 8011fec:	4630      	mov	r0, r6
 8011fee:	f7fc f9c7 	bl	800e380 <_printf_float>
 8011ff2:	4607      	mov	r7, r0
 8011ff4:	1c78      	adds	r0, r7, #1
 8011ff6:	d1d6      	bne.n	8011fa6 <_vfiprintf_r+0x19a>
 8011ff8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011ffa:	07d9      	lsls	r1, r3, #31
 8011ffc:	d405      	bmi.n	801200a <_vfiprintf_r+0x1fe>
 8011ffe:	89ab      	ldrh	r3, [r5, #12]
 8012000:	059a      	lsls	r2, r3, #22
 8012002:	d402      	bmi.n	801200a <_vfiprintf_r+0x1fe>
 8012004:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012006:	f7fd f96d 	bl	800f2e4 <__retarget_lock_release_recursive>
 801200a:	89ab      	ldrh	r3, [r5, #12]
 801200c:	065b      	lsls	r3, r3, #25
 801200e:	f53f af1f 	bmi.w	8011e50 <_vfiprintf_r+0x44>
 8012012:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012014:	e71e      	b.n	8011e54 <_vfiprintf_r+0x48>
 8012016:	ab03      	add	r3, sp, #12
 8012018:	9300      	str	r3, [sp, #0]
 801201a:	462a      	mov	r2, r5
 801201c:	4b05      	ldr	r3, [pc, #20]	@ (8012034 <_vfiprintf_r+0x228>)
 801201e:	a904      	add	r1, sp, #16
 8012020:	4630      	mov	r0, r6
 8012022:	f7fc fc35 	bl	800e890 <_printf_i>
 8012026:	e7e4      	b.n	8011ff2 <_vfiprintf_r+0x1e6>
 8012028:	08012a81 	.word	0x08012a81
 801202c:	08012a8b 	.word	0x08012a8b
 8012030:	0800e381 	.word	0x0800e381
 8012034:	08011de9 	.word	0x08011de9
 8012038:	08012a87 	.word	0x08012a87

0801203c <__swbuf_r>:
 801203c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801203e:	460e      	mov	r6, r1
 8012040:	4614      	mov	r4, r2
 8012042:	4605      	mov	r5, r0
 8012044:	b118      	cbz	r0, 801204e <__swbuf_r+0x12>
 8012046:	6a03      	ldr	r3, [r0, #32]
 8012048:	b90b      	cbnz	r3, 801204e <__swbuf_r+0x12>
 801204a:	f7fc ffd9 	bl	800f000 <__sinit>
 801204e:	69a3      	ldr	r3, [r4, #24]
 8012050:	60a3      	str	r3, [r4, #8]
 8012052:	89a3      	ldrh	r3, [r4, #12]
 8012054:	071a      	lsls	r2, r3, #28
 8012056:	d501      	bpl.n	801205c <__swbuf_r+0x20>
 8012058:	6923      	ldr	r3, [r4, #16]
 801205a:	b943      	cbnz	r3, 801206e <__swbuf_r+0x32>
 801205c:	4621      	mov	r1, r4
 801205e:	4628      	mov	r0, r5
 8012060:	f000 f82a 	bl	80120b8 <__swsetup_r>
 8012064:	b118      	cbz	r0, 801206e <__swbuf_r+0x32>
 8012066:	f04f 37ff 	mov.w	r7, #4294967295
 801206a:	4638      	mov	r0, r7
 801206c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801206e:	6823      	ldr	r3, [r4, #0]
 8012070:	6922      	ldr	r2, [r4, #16]
 8012072:	1a98      	subs	r0, r3, r2
 8012074:	6963      	ldr	r3, [r4, #20]
 8012076:	b2f6      	uxtb	r6, r6
 8012078:	4283      	cmp	r3, r0
 801207a:	4637      	mov	r7, r6
 801207c:	dc05      	bgt.n	801208a <__swbuf_r+0x4e>
 801207e:	4621      	mov	r1, r4
 8012080:	4628      	mov	r0, r5
 8012082:	f7ff fcf3 	bl	8011a6c <_fflush_r>
 8012086:	2800      	cmp	r0, #0
 8012088:	d1ed      	bne.n	8012066 <__swbuf_r+0x2a>
 801208a:	68a3      	ldr	r3, [r4, #8]
 801208c:	3b01      	subs	r3, #1
 801208e:	60a3      	str	r3, [r4, #8]
 8012090:	6823      	ldr	r3, [r4, #0]
 8012092:	1c5a      	adds	r2, r3, #1
 8012094:	6022      	str	r2, [r4, #0]
 8012096:	701e      	strb	r6, [r3, #0]
 8012098:	6962      	ldr	r2, [r4, #20]
 801209a:	1c43      	adds	r3, r0, #1
 801209c:	429a      	cmp	r2, r3
 801209e:	d004      	beq.n	80120aa <__swbuf_r+0x6e>
 80120a0:	89a3      	ldrh	r3, [r4, #12]
 80120a2:	07db      	lsls	r3, r3, #31
 80120a4:	d5e1      	bpl.n	801206a <__swbuf_r+0x2e>
 80120a6:	2e0a      	cmp	r6, #10
 80120a8:	d1df      	bne.n	801206a <__swbuf_r+0x2e>
 80120aa:	4621      	mov	r1, r4
 80120ac:	4628      	mov	r0, r5
 80120ae:	f7ff fcdd 	bl	8011a6c <_fflush_r>
 80120b2:	2800      	cmp	r0, #0
 80120b4:	d0d9      	beq.n	801206a <__swbuf_r+0x2e>
 80120b6:	e7d6      	b.n	8012066 <__swbuf_r+0x2a>

080120b8 <__swsetup_r>:
 80120b8:	b538      	push	{r3, r4, r5, lr}
 80120ba:	4b29      	ldr	r3, [pc, #164]	@ (8012160 <__swsetup_r+0xa8>)
 80120bc:	4605      	mov	r5, r0
 80120be:	6818      	ldr	r0, [r3, #0]
 80120c0:	460c      	mov	r4, r1
 80120c2:	b118      	cbz	r0, 80120cc <__swsetup_r+0x14>
 80120c4:	6a03      	ldr	r3, [r0, #32]
 80120c6:	b90b      	cbnz	r3, 80120cc <__swsetup_r+0x14>
 80120c8:	f7fc ff9a 	bl	800f000 <__sinit>
 80120cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80120d0:	0719      	lsls	r1, r3, #28
 80120d2:	d422      	bmi.n	801211a <__swsetup_r+0x62>
 80120d4:	06da      	lsls	r2, r3, #27
 80120d6:	d407      	bmi.n	80120e8 <__swsetup_r+0x30>
 80120d8:	2209      	movs	r2, #9
 80120da:	602a      	str	r2, [r5, #0]
 80120dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80120e0:	81a3      	strh	r3, [r4, #12]
 80120e2:	f04f 30ff 	mov.w	r0, #4294967295
 80120e6:	e033      	b.n	8012150 <__swsetup_r+0x98>
 80120e8:	0758      	lsls	r0, r3, #29
 80120ea:	d512      	bpl.n	8012112 <__swsetup_r+0x5a>
 80120ec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80120ee:	b141      	cbz	r1, 8012102 <__swsetup_r+0x4a>
 80120f0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80120f4:	4299      	cmp	r1, r3
 80120f6:	d002      	beq.n	80120fe <__swsetup_r+0x46>
 80120f8:	4628      	mov	r0, r5
 80120fa:	f7fd fef3 	bl	800fee4 <_free_r>
 80120fe:	2300      	movs	r3, #0
 8012100:	6363      	str	r3, [r4, #52]	@ 0x34
 8012102:	89a3      	ldrh	r3, [r4, #12]
 8012104:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8012108:	81a3      	strh	r3, [r4, #12]
 801210a:	2300      	movs	r3, #0
 801210c:	6063      	str	r3, [r4, #4]
 801210e:	6923      	ldr	r3, [r4, #16]
 8012110:	6023      	str	r3, [r4, #0]
 8012112:	89a3      	ldrh	r3, [r4, #12]
 8012114:	f043 0308 	orr.w	r3, r3, #8
 8012118:	81a3      	strh	r3, [r4, #12]
 801211a:	6923      	ldr	r3, [r4, #16]
 801211c:	b94b      	cbnz	r3, 8012132 <__swsetup_r+0x7a>
 801211e:	89a3      	ldrh	r3, [r4, #12]
 8012120:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8012124:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012128:	d003      	beq.n	8012132 <__swsetup_r+0x7a>
 801212a:	4621      	mov	r1, r4
 801212c:	4628      	mov	r0, r5
 801212e:	f000 f883 	bl	8012238 <__smakebuf_r>
 8012132:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012136:	f013 0201 	ands.w	r2, r3, #1
 801213a:	d00a      	beq.n	8012152 <__swsetup_r+0x9a>
 801213c:	2200      	movs	r2, #0
 801213e:	60a2      	str	r2, [r4, #8]
 8012140:	6962      	ldr	r2, [r4, #20]
 8012142:	4252      	negs	r2, r2
 8012144:	61a2      	str	r2, [r4, #24]
 8012146:	6922      	ldr	r2, [r4, #16]
 8012148:	b942      	cbnz	r2, 801215c <__swsetup_r+0xa4>
 801214a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801214e:	d1c5      	bne.n	80120dc <__swsetup_r+0x24>
 8012150:	bd38      	pop	{r3, r4, r5, pc}
 8012152:	0799      	lsls	r1, r3, #30
 8012154:	bf58      	it	pl
 8012156:	6962      	ldrpl	r2, [r4, #20]
 8012158:	60a2      	str	r2, [r4, #8]
 801215a:	e7f4      	b.n	8012146 <__swsetup_r+0x8e>
 801215c:	2000      	movs	r0, #0
 801215e:	e7f7      	b.n	8012150 <__swsetup_r+0x98>
 8012160:	240001e0 	.word	0x240001e0

08012164 <_raise_r>:
 8012164:	291f      	cmp	r1, #31
 8012166:	b538      	push	{r3, r4, r5, lr}
 8012168:	4605      	mov	r5, r0
 801216a:	460c      	mov	r4, r1
 801216c:	d904      	bls.n	8012178 <_raise_r+0x14>
 801216e:	2316      	movs	r3, #22
 8012170:	6003      	str	r3, [r0, #0]
 8012172:	f04f 30ff 	mov.w	r0, #4294967295
 8012176:	bd38      	pop	{r3, r4, r5, pc}
 8012178:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801217a:	b112      	cbz	r2, 8012182 <_raise_r+0x1e>
 801217c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012180:	b94b      	cbnz	r3, 8012196 <_raise_r+0x32>
 8012182:	4628      	mov	r0, r5
 8012184:	f000 f830 	bl	80121e8 <_getpid_r>
 8012188:	4622      	mov	r2, r4
 801218a:	4601      	mov	r1, r0
 801218c:	4628      	mov	r0, r5
 801218e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012192:	f000 b817 	b.w	80121c4 <_kill_r>
 8012196:	2b01      	cmp	r3, #1
 8012198:	d00a      	beq.n	80121b0 <_raise_r+0x4c>
 801219a:	1c59      	adds	r1, r3, #1
 801219c:	d103      	bne.n	80121a6 <_raise_r+0x42>
 801219e:	2316      	movs	r3, #22
 80121a0:	6003      	str	r3, [r0, #0]
 80121a2:	2001      	movs	r0, #1
 80121a4:	e7e7      	b.n	8012176 <_raise_r+0x12>
 80121a6:	2100      	movs	r1, #0
 80121a8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80121ac:	4620      	mov	r0, r4
 80121ae:	4798      	blx	r3
 80121b0:	2000      	movs	r0, #0
 80121b2:	e7e0      	b.n	8012176 <_raise_r+0x12>

080121b4 <raise>:
 80121b4:	4b02      	ldr	r3, [pc, #8]	@ (80121c0 <raise+0xc>)
 80121b6:	4601      	mov	r1, r0
 80121b8:	6818      	ldr	r0, [r3, #0]
 80121ba:	f7ff bfd3 	b.w	8012164 <_raise_r>
 80121be:	bf00      	nop
 80121c0:	240001e0 	.word	0x240001e0

080121c4 <_kill_r>:
 80121c4:	b538      	push	{r3, r4, r5, lr}
 80121c6:	4d07      	ldr	r5, [pc, #28]	@ (80121e4 <_kill_r+0x20>)
 80121c8:	2300      	movs	r3, #0
 80121ca:	4604      	mov	r4, r0
 80121cc:	4608      	mov	r0, r1
 80121ce:	4611      	mov	r1, r2
 80121d0:	602b      	str	r3, [r5, #0]
 80121d2:	f7ef fc39 	bl	8001a48 <_kill>
 80121d6:	1c43      	adds	r3, r0, #1
 80121d8:	d102      	bne.n	80121e0 <_kill_r+0x1c>
 80121da:	682b      	ldr	r3, [r5, #0]
 80121dc:	b103      	cbz	r3, 80121e0 <_kill_r+0x1c>
 80121de:	6023      	str	r3, [r4, #0]
 80121e0:	bd38      	pop	{r3, r4, r5, pc}
 80121e2:	bf00      	nop
 80121e4:	24000e50 	.word	0x24000e50

080121e8 <_getpid_r>:
 80121e8:	f7ef bc26 	b.w	8001a38 <_getpid>

080121ec <__swhatbuf_r>:
 80121ec:	b570      	push	{r4, r5, r6, lr}
 80121ee:	460c      	mov	r4, r1
 80121f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80121f4:	2900      	cmp	r1, #0
 80121f6:	b096      	sub	sp, #88	@ 0x58
 80121f8:	4615      	mov	r5, r2
 80121fa:	461e      	mov	r6, r3
 80121fc:	da0d      	bge.n	801221a <__swhatbuf_r+0x2e>
 80121fe:	89a3      	ldrh	r3, [r4, #12]
 8012200:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8012204:	f04f 0100 	mov.w	r1, #0
 8012208:	bf14      	ite	ne
 801220a:	2340      	movne	r3, #64	@ 0x40
 801220c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8012210:	2000      	movs	r0, #0
 8012212:	6031      	str	r1, [r6, #0]
 8012214:	602b      	str	r3, [r5, #0]
 8012216:	b016      	add	sp, #88	@ 0x58
 8012218:	bd70      	pop	{r4, r5, r6, pc}
 801221a:	466a      	mov	r2, sp
 801221c:	f000 f848 	bl	80122b0 <_fstat_r>
 8012220:	2800      	cmp	r0, #0
 8012222:	dbec      	blt.n	80121fe <__swhatbuf_r+0x12>
 8012224:	9901      	ldr	r1, [sp, #4]
 8012226:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801222a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801222e:	4259      	negs	r1, r3
 8012230:	4159      	adcs	r1, r3
 8012232:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8012236:	e7eb      	b.n	8012210 <__swhatbuf_r+0x24>

08012238 <__smakebuf_r>:
 8012238:	898b      	ldrh	r3, [r1, #12]
 801223a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801223c:	079d      	lsls	r5, r3, #30
 801223e:	4606      	mov	r6, r0
 8012240:	460c      	mov	r4, r1
 8012242:	d507      	bpl.n	8012254 <__smakebuf_r+0x1c>
 8012244:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8012248:	6023      	str	r3, [r4, #0]
 801224a:	6123      	str	r3, [r4, #16]
 801224c:	2301      	movs	r3, #1
 801224e:	6163      	str	r3, [r4, #20]
 8012250:	b003      	add	sp, #12
 8012252:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012254:	ab01      	add	r3, sp, #4
 8012256:	466a      	mov	r2, sp
 8012258:	f7ff ffc8 	bl	80121ec <__swhatbuf_r>
 801225c:	9f00      	ldr	r7, [sp, #0]
 801225e:	4605      	mov	r5, r0
 8012260:	4639      	mov	r1, r7
 8012262:	4630      	mov	r0, r6
 8012264:	f7fb f9ba 	bl	800d5dc <_malloc_r>
 8012268:	b948      	cbnz	r0, 801227e <__smakebuf_r+0x46>
 801226a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801226e:	059a      	lsls	r2, r3, #22
 8012270:	d4ee      	bmi.n	8012250 <__smakebuf_r+0x18>
 8012272:	f023 0303 	bic.w	r3, r3, #3
 8012276:	f043 0302 	orr.w	r3, r3, #2
 801227a:	81a3      	strh	r3, [r4, #12]
 801227c:	e7e2      	b.n	8012244 <__smakebuf_r+0xc>
 801227e:	89a3      	ldrh	r3, [r4, #12]
 8012280:	6020      	str	r0, [r4, #0]
 8012282:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012286:	81a3      	strh	r3, [r4, #12]
 8012288:	9b01      	ldr	r3, [sp, #4]
 801228a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801228e:	b15b      	cbz	r3, 80122a8 <__smakebuf_r+0x70>
 8012290:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012294:	4630      	mov	r0, r6
 8012296:	f000 f81d 	bl	80122d4 <_isatty_r>
 801229a:	b128      	cbz	r0, 80122a8 <__smakebuf_r+0x70>
 801229c:	89a3      	ldrh	r3, [r4, #12]
 801229e:	f023 0303 	bic.w	r3, r3, #3
 80122a2:	f043 0301 	orr.w	r3, r3, #1
 80122a6:	81a3      	strh	r3, [r4, #12]
 80122a8:	89a3      	ldrh	r3, [r4, #12]
 80122aa:	431d      	orrs	r5, r3
 80122ac:	81a5      	strh	r5, [r4, #12]
 80122ae:	e7cf      	b.n	8012250 <__smakebuf_r+0x18>

080122b0 <_fstat_r>:
 80122b0:	b538      	push	{r3, r4, r5, lr}
 80122b2:	4d07      	ldr	r5, [pc, #28]	@ (80122d0 <_fstat_r+0x20>)
 80122b4:	2300      	movs	r3, #0
 80122b6:	4604      	mov	r4, r0
 80122b8:	4608      	mov	r0, r1
 80122ba:	4611      	mov	r1, r2
 80122bc:	602b      	str	r3, [r5, #0]
 80122be:	f7ef fc23 	bl	8001b08 <_fstat>
 80122c2:	1c43      	adds	r3, r0, #1
 80122c4:	d102      	bne.n	80122cc <_fstat_r+0x1c>
 80122c6:	682b      	ldr	r3, [r5, #0]
 80122c8:	b103      	cbz	r3, 80122cc <_fstat_r+0x1c>
 80122ca:	6023      	str	r3, [r4, #0]
 80122cc:	bd38      	pop	{r3, r4, r5, pc}
 80122ce:	bf00      	nop
 80122d0:	24000e50 	.word	0x24000e50

080122d4 <_isatty_r>:
 80122d4:	b538      	push	{r3, r4, r5, lr}
 80122d6:	4d06      	ldr	r5, [pc, #24]	@ (80122f0 <_isatty_r+0x1c>)
 80122d8:	2300      	movs	r3, #0
 80122da:	4604      	mov	r4, r0
 80122dc:	4608      	mov	r0, r1
 80122de:	602b      	str	r3, [r5, #0]
 80122e0:	f7ef fc22 	bl	8001b28 <_isatty>
 80122e4:	1c43      	adds	r3, r0, #1
 80122e6:	d102      	bne.n	80122ee <_isatty_r+0x1a>
 80122e8:	682b      	ldr	r3, [r5, #0]
 80122ea:	b103      	cbz	r3, 80122ee <_isatty_r+0x1a>
 80122ec:	6023      	str	r3, [r4, #0]
 80122ee:	bd38      	pop	{r3, r4, r5, pc}
 80122f0:	24000e50 	.word	0x24000e50

080122f4 <_init>:
 80122f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80122f6:	bf00      	nop
 80122f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80122fa:	bc08      	pop	{r3}
 80122fc:	469e      	mov	lr, r3
 80122fe:	4770      	bx	lr

08012300 <_fini>:
 8012300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012302:	bf00      	nop
 8012304:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012306:	bc08      	pop	{r3}
 8012308:	469e      	mov	lr, r3
 801230a:	4770      	bx	lr
